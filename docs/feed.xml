<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
    <title>ひげメモ</title>
    <link href="https://matsubara0507.github.io/feed.xml" rel="self" type="application/rss+xml" />
    <link href="https://matsubara0507.github.io" />
    <id>https://matsubara0507.github.io/feed.xml</id>
    <author>
        <name>MATSUBARA Nobutada</name>
    </author>
    <updated>2021-12-19T15:07:17Z</updated>

    <entry>
        <title>Bazel でも GHC 9.2.1 でビルドがしたい</title>
        <link href="https://matsubara0507.github.io/posts/2021-12-20-fix-rules_haskell-for-ghc_9_2_1.html"/>
        <id>https://matsubara0507.github.io/posts/2021-12-20-fix-rules_haskell-for-ghc_9_2_1.html</id>
        <published>2021-12-20T00:00:00Z</published>
        <updated>2021-12-20T00:00:00Z</updated>
        <category term="Haskell"/>
        <category term="Bazel"/>
        <content type="html"><![CDATA[<p>本記事は 「<a href="https://qiita.com/advent-calendar/2021/haskell">Haskell Advent Calendar 2021</a>」の4日目の記事です。 空いてたので埋めました。</p>
<h1 id="section"></h1>
<p><a href="https://bazel.build/">Bazel</a>というビルドツールがあります。Bazelでは、いわゆるライブラリのようなものを使うことで、簡単にさまざまなプログラムのビルドやテストの実行を同じインターフェースで行うことができます。例えば：</p>
<ul>
<li><a href="https://github.com/bazelbuild/rules_go">bazelbuild/rules_go</a> : Goプログラムのビルドやテストなど</li>
<li><a href="https://github.com/bazelbuild/rules_docker">bazelbuild/rules_docker</a> : Dockerイメージのビルドやプッシュなど</li>
<li><a href="https://github.com/bazelbuild/rules_nodejs">bazelbuild/rules_nodejs</a> : Nodeプログラムのビルドやテストなど</li>
</ul>
<p>そして、<a href="https://github.com/tweag/rules_haskell">tweag/rules_haskell</a> を使うことで、Bazel を利用して Haskell プログラムのビルドが行えます。今回は今年でた新しいバージョンの Haskell 処理系、GHC 9.2.1 を Bazel を利用してビルドする、までに頑張ったことのメモ書きです。</p>
<p>ちなみに、頑張って修正したので、私のフォークを利用すればとりあえずビルドすることができます。</p>
<h1 id="section-1"></h1>
<p>例として <a href="https://github.com/matsubara0507/example-haskell-with-bazel">matsubara0507/example-haskell-with-bazel</a> というリポジトリも用意しました。CI/CD をいい感じにして、無事、直近3バージョンと各OSのビルドが通るのを確認できました：</p>
<p><img src="/assets/fix-rules_haskell-for-ghc_9_2_1/all-green.png" /></p>
<h2 id="rules_haskell-の振る舞い">rules_haskell の振る舞い</h2>
<p>rules_haskell で、どの GHC に対応している（ビルドできるとは言ってない）かは <code>haskell/gen_bindist.bzl</code> の <code>GHC_BINDIST</code> 変数を見ればわかります：</p>
<div class="sourceCode" id="cb1"><pre class="sourceCode py"><code class="sourceCode python"><span id="cb1-1"><a href="#cb1-1" aria-hidden="true" tabindex="-1"></a>GHC_BINDIST <span class="op">=</span> <span class="op">\</span></span>
<span id="cb1-2"><a href="#cb1-2" aria-hidden="true" tabindex="-1"></a>    {</span>
<span id="cb1-3"><a href="#cb1-3" aria-hidden="true" tabindex="-1"></a>        ...</span>
<span id="cb1-4"><a href="#cb1-4" aria-hidden="true" tabindex="-1"></a>        <span class="st">&quot;9.2.1&quot;</span>: {</span>
<span id="cb1-5"><a href="#cb1-5" aria-hidden="true" tabindex="-1"></a>            <span class="st">&quot;darwin_amd64&quot;</span>: (</span>
<span id="cb1-6"><a href="#cb1-6" aria-hidden="true" tabindex="-1"></a>                <span class="st">&quot;https://downloads.haskell.org/~ghc/9.2.1/ghc-9.2.1-x86_64-apple-darwin.tar.xz&quot;</span>,</span>
<span id="cb1-7"><a href="#cb1-7" aria-hidden="true" tabindex="-1"></a>                <span class="st">&quot;c527700a210306098ce85d2c956089deea539aefe1d1816701d5c14cf9c113b7&quot;</span>,</span>
<span id="cb1-8"><a href="#cb1-8" aria-hidden="true" tabindex="-1"></a>            ),</span>
<span id="cb1-9"><a href="#cb1-9" aria-hidden="true" tabindex="-1"></a>            <span class="st">&quot;linux_amd64&quot;</span>: (</span>
<span id="cb1-10"><a href="#cb1-10" aria-hidden="true" tabindex="-1"></a>                <span class="st">&quot;https://downloads.haskell.org/~ghc/9.2.1/ghc-9.2.1-x86_64-deb9-linux.tar.xz&quot;</span>,</span>
<span id="cb1-11"><a href="#cb1-11" aria-hidden="true" tabindex="-1"></a>                <span class="st">&quot;f09133ed735e9f3b221b5ed54787e5651f039ed0f7dab0ab834a27c8ca68fc9b&quot;</span>,</span>
<span id="cb1-12"><a href="#cb1-12" aria-hidden="true" tabindex="-1"></a>            ),</span>
<span id="cb1-13"><a href="#cb1-13" aria-hidden="true" tabindex="-1"></a>            <span class="st">&quot;windows_amd64&quot;</span>: (</span>
<span id="cb1-14"><a href="#cb1-14" aria-hidden="true" tabindex="-1"></a>                <span class="st">&quot;https://downloads.haskell.org/~ghc/9.2.1/ghc-9.2.1-x86_64-unknown-mingw32.tar.xz&quot;</span>,</span>
<span id="cb1-15"><a href="#cb1-15" aria-hidden="true" tabindex="-1"></a>                <span class="st">&quot;649e04abd4fa35796070b35de1c353721507a49842b18663aa1c7adc6b4115d8&quot;</span>,</span>
<span id="cb1-16"><a href="#cb1-16" aria-hidden="true" tabindex="-1"></a>            ),</span>
<span id="cb1-17"><a href="#cb1-17" aria-hidden="true" tabindex="-1"></a>        },</span>
<span id="cb1-18"><a href="#cb1-18" aria-hidden="true" tabindex="-1"></a>    }</span></code></pre></div>
<p><code>GHC_BINDIST</code> の URL から <code>ghc</code> や <code>ghc-pkg</code> などのビルド済みバイナリと標準パッケージなどが固まった <code>tar.xz</code> ファイルが手に入ります。<code>rules_haskell</code> は、これを Bazel サンドボックス用に展開して利用します。</p>
<p>Linux と macOS の場合は <code>configure</code> と <code>make</code> を使ってバイナリファイルや haddock ファイルなど様々なファイルを、特定のディレクトリ構成で配置し直したりしているようです。Windows の場合は、<code>make</code> が動作しないためか、そのまま使っています。</p>
<p>この <code>make</code> 時の振る舞いが 8.10・9.0・9.1 で微妙に異なるため苦労しました。</p>
<h2 id="バージョン間の違い">バージョン間の違い</h2>
<p>以下のような違いがあり、そのまんまビルドすることができませんでした：</p>
<ol>
<li>展開後のディレクトリ名が違う</li>
<li><code>html/libraries</code> 配下のディレクトリの命名規則が違う</li>
<li><code>package.conf.d</code> ディレクトリのパスが違う</li>
<li>Cabal ファイルの変数が <code>$topdir</code> から <code>${pkgroot}</code> に変わった</li>
<li><code>realpath</code> コマンドに依存している問題（Mac）</li>
<li>Cabal 3.6 から <code>relocatable</code> フラグが機能しなくなった</li>
<li><code>html/libraries</code> へのパスが間違っている（Windows）</li>
</ol>
<p>流石に GHC 側の経緯までは完璧に追えてませんが、ひたすらトライアンドエラーして直しました。 一応、<a href="https://github.com/tweag/rules_haskell/pull/1666">雑な英語で本家に PR を投げました</a>が、マージされるかはわかりません。</p>
<h3 id="1-展開後のディレクトリ名が違う">1. 展開後のディレクトリ名が違う</h3>
<p>今までは、どの OS であれ <code>ghc-X.Y.Z</code> のようなディレクトリ名でした。しかし、9.2.1 の Windows と Mac、9.0.1 の Windows は（なぜか）<code>ghc-9.2.1-x86_64-apple-darwin</code> のような <code>tar.xz</code> ファイル名になっていました。仕方がないので、GHC のバージョンと OS によってディレクトリ名が変わるように修正しました：</p>
<div class="sourceCode" id="cb2"><pre class="sourceCode py"><code class="sourceCode python"><span id="cb2-1"><a href="#cb2-1" aria-hidden="true" tabindex="-1"></a>GHC_BINDIST_STRIP_PREFIX <span class="op">=</span> <span class="op">\</span></span>
<span id="cb2-2"><a href="#cb2-2" aria-hidden="true" tabindex="-1"></a>    {</span>
<span id="cb2-3"><a href="#cb2-3" aria-hidden="true" tabindex="-1"></a>        <span class="st">&quot;9.2.1&quot;</span>: {</span>
<span id="cb2-4"><a href="#cb2-4" aria-hidden="true" tabindex="-1"></a>            <span class="st">&quot;darwin_amd64&quot;</span>: <span class="st">&quot;ghc-9.2.1-x86_64-apple-darwin&quot;</span>,</span>
<span id="cb2-5"><a href="#cb2-5" aria-hidden="true" tabindex="-1"></a>            <span class="st">&quot;windows_amd64&quot;</span>: <span class="st">&quot;ghc-9.2.1-x86_64-unknown-mingw32&quot;</span>,</span>
<span id="cb2-6"><a href="#cb2-6" aria-hidden="true" tabindex="-1"></a>        },</span>
<span id="cb2-7"><a href="#cb2-7" aria-hidden="true" tabindex="-1"></a>        <span class="st">&quot;9.0.1&quot;</span>: {</span>
<span id="cb2-8"><a href="#cb2-8" aria-hidden="true" tabindex="-1"></a>            <span class="st">&quot;windows_amd64&quot;</span>: <span class="st">&quot;ghc-9.0.1-x86_64-unknown-mingw32&quot;</span>,</span>
<span id="cb2-9"><a href="#cb2-9" aria-hidden="true" tabindex="-1"></a>        },</span>
<span id="cb2-10"><a href="#cb2-10" aria-hidden="true" tabindex="-1"></a>    }</span>
<span id="cb2-11"><a href="#cb2-11" aria-hidden="true" tabindex="-1"></a>...</span>
<span id="cb2-12"><a href="#cb2-12" aria-hidden="true" tabindex="-1"></a>    stripPrefix <span class="op">=</span> <span class="st">&quot;ghc-&quot;</span> <span class="op">+</span> version</span>
<span id="cb2-13"><a href="#cb2-13" aria-hidden="true" tabindex="-1"></a>    <span class="cf">if</span> GHC_BINDIST_STRIP_PREFIX.get(version) <span class="op">!=</span> <span class="va">None</span> <span class="kw">and</span> GHC_BINDIST_STRIP_PREFIX[version].get(target) <span class="op">!=</span> <span class="va">None</span>:</span>
<span id="cb2-14"><a href="#cb2-14" aria-hidden="true" tabindex="-1"></a>        stripPrefix <span class="op">=</span> GHC_BINDIST_STRIP_PREFIX[version][target]</span>
<span id="cb2-15"><a href="#cb2-15" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb2-16"><a href="#cb2-16" aria-hidden="true" tabindex="-1"></a>    ctx.download_and_extract(</span>
<span id="cb2-17"><a href="#cb2-17" aria-hidden="true" tabindex="-1"></a>        url <span class="op">=</span> url,</span>
<span id="cb2-18"><a href="#cb2-18" aria-hidden="true" tabindex="-1"></a>        output <span class="op">=</span> unpack_dir,</span>
<span id="cb2-19"><a href="#cb2-19" aria-hidden="true" tabindex="-1"></a>        sha256 <span class="op">=</span> sha256,</span>
<span id="cb2-20"><a href="#cb2-20" aria-hidden="true" tabindex="-1"></a>        <span class="bu">type</span> <span class="op">=</span> <span class="st">&quot;tar.xz&quot;</span>,</span>
<span id="cb2-21"><a href="#cb2-21" aria-hidden="true" tabindex="-1"></a>        stripPrefix <span class="op">=</span> stripPrefix,</span>
<span id="cb2-22"><a href="#cb2-22" aria-hidden="true" tabindex="-1"></a>    )</span></code></pre></div>
<h3 id="2-htmllibraries-配下のディレクトリの命名規則が違う">2. <code>html/libraries</code> 配下のディレクトリの命名規則が違う</h3>
<p><code>haddock</code> を生成するためか、展開したファイル群の中から標準パッケージの生成済み haddock ファイル置き場を特定する必要があります。8.10 系までは <code>base-4.14.3.0</code> のようにバージョンがディレクトリ名に含まれていたため、次のように特定していました：</p>
<div class="sourceCode" id="cb3"><pre class="sourceCode py"><code class="sourceCode python"><span id="cb3-1"><a href="#cb3-1" aria-hidden="true" tabindex="-1"></a>        <span class="co"># Find a file matching `html/libraries/base-*.*.*.*/*` and infer `docdir` from its path.</span></span>
<span id="cb3-2"><a href="#cb3-2" aria-hidden="true" tabindex="-1"></a>        <span class="co"># `GHC.Paths.docdir` reports paths such as `.../doc/html/libraries/base-4.13.0.0`.</span></span>
<span id="cb3-3"><a href="#cb3-3" aria-hidden="true" tabindex="-1"></a>        <span class="cf">for</span> f <span class="kw">in</span> docdir:</span>
<span id="cb3-4"><a href="#cb3-4" aria-hidden="true" tabindex="-1"></a>            html_start <span class="op">=</span> f.path.find(<span class="st">&quot;html/libraries/base-&quot;</span>)</span>
<span id="cb3-5"><a href="#cb3-5" aria-hidden="true" tabindex="-1"></a>            <span class="cf">if</span> html_start <span class="op">!=</span> <span class="op">-</span><span class="dv">1</span>:</span>
<span id="cb3-6"><a href="#cb3-6" aria-hidden="true" tabindex="-1"></a>                base_end <span class="op">=</span> f.path.find(<span class="st">&quot;/&quot;</span>, html_start <span class="op">+</span> <span class="bu">len</span>(<span class="st">&quot;html/libraries/base-&quot;</span>))</span>
<span id="cb3-7"><a href="#cb3-7" aria-hidden="true" tabindex="-1"></a>                <span class="cf">if</span> base_end <span class="op">!=</span> <span class="op">-</span><span class="dv">1</span>:</span>
<span id="cb3-8"><a href="#cb3-8" aria-hidden="true" tabindex="-1"></a>                    docdir_path <span class="op">=</span> f.path[:base_end]</span>
<span id="cb3-9"><a href="#cb3-9" aria-hidden="true" tabindex="-1"></a>                    <span class="cf">break</span></span></code></pre></div>
<p>しかし、9.0 系以降は（なぜか）<code>base</code> のようにバージョンを含まなくなりました。なので、<code>-</code> の部分を消して対応しました。</p>
<h3 id="3-packageconfd-ディレクトリのパスが違う">3. <code>package.conf.d</code> ディレクトリのパスが違う</h3>
<p><code>make</code> 後に <code>package.conf.d</code> までのパスを特定する必要があります（これを <code>pkgdb</code> と呼んでるっぽいです）。<code>package.conf.d</code> 配下には Cabal ファイルのようなものが置いてあります、rules_haskell では、このファイルを元に haddock ファイルなど各種組み込みパッケージの構成を解決します。macOS のこのパスが、9.0 まで <code>lib</code> だったのに対し、9.2 からは <code>lib/lib</code> に（なぜか）なっていました。なので、これまた OS とバージョンで切り替えれるように書き換えました：</p>
<div class="sourceCode" id="cb4"><pre class="sourceCode py"><code class="sourceCode python"><span id="cb4-1"><a href="#cb4-1" aria-hidden="true" tabindex="-1"></a>GHC_BINDIST_LIBDIR <span class="op">=</span> <span class="op">\</span></span>
<span id="cb4-2"><a href="#cb4-2" aria-hidden="true" tabindex="-1"></a>    {</span>
<span id="cb4-3"><a href="#cb4-3" aria-hidden="true" tabindex="-1"></a>        <span class="st">&quot;9.2.1&quot;</span>: {</span>
<span id="cb4-4"><a href="#cb4-4" aria-hidden="true" tabindex="-1"></a>            <span class="st">&quot;darwin_amd64&quot;</span>: <span class="st">&quot;lib/lib&quot;</span>,</span>
<span id="cb4-5"><a href="#cb4-5" aria-hidden="true" tabindex="-1"></a>        },</span>
<span id="cb4-6"><a href="#cb4-6" aria-hidden="true" tabindex="-1"></a>    }</span>
<span id="cb4-7"><a href="#cb4-7" aria-hidden="true" tabindex="-1"></a>...</span>
<span id="cb4-8"><a href="#cb4-8" aria-hidden="true" tabindex="-1"></a>    libdir <span class="op">=</span> <span class="st">&quot;lib&quot;</span></span>
<span id="cb4-9"><a href="#cb4-9" aria-hidden="true" tabindex="-1"></a>    <span class="cf">if</span> GHC_BINDIST_LIBDIR.get(version) <span class="op">!=</span> <span class="va">None</span> <span class="kw">and</span> GHC_BINDIST_LIBDIR[version].get(target) <span class="op">!=</span> <span class="va">None</span>:</span>
<span id="cb4-10"><a href="#cb4-10" aria-hidden="true" tabindex="-1"></a>        libdir <span class="op">=</span> GHC_BINDIST_LIBDIR[version][target]</span>
<span id="cb4-11"><a href="#cb4-11" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb4-12"><a href="#cb4-12" aria-hidden="true" tabindex="-1"></a>    toolchain_libraries <span class="op">=</span> pkgdb_to_bzl(ctx, filepaths, libdir)</span></code></pre></div>
<h3 id="4-cabal-ファイルの変数が-topdir-から-pkgroot-に変わった">4. Cabal ファイルの変数が <code>$topdir</code> から <code>${pkgroot}</code> に変わった</h3>
<p>前述した <code>package.conf.d</code> 配下の Cabal ファイルっぽいのには <code>$topdir</code> という変数が含まれていました。rules_haskell では、この変数をいい感じに置換して利用していましたが、9.0 からは <code>${pkgroot}</code> に（なぜか）変わっていました。仕方がないので、どっちでもいい感じに置換するように書き換えました：</p>
<div class="sourceCode" id="cb5"><pre class="sourceCode py"><code class="sourceCode python"><span id="cb5-1"><a href="#cb5-1" aria-hidden="true" tabindex="-1"></a><span class="kw">def</span> path_to_label(path, pkgroot):</span>
<span id="cb5-2"><a href="#cb5-2" aria-hidden="true" tabindex="-1"></a>    <span class="co">&quot;&quot;&quot;Substitute one pkgroot for another relative one to obtain a label.&quot;&quot;&quot;</span></span>
<span id="cb5-3"><a href="#cb5-3" aria-hidden="true" tabindex="-1"></a>    <span class="cf">if</span> path.find(<span class="st">&quot;$</span><span class="sc">{pkgroot}</span><span class="st">&quot;</span>) <span class="op">!=</span> <span class="op">-</span><span class="dv">1</span>:</span>
<span id="cb5-4"><a href="#cb5-4" aria-hidden="true" tabindex="-1"></a>        <span class="cf">return</span> os.path.normpath(path.strip(<span class="st">&quot;</span><span class="ch">\&quot;</span><span class="st">&quot;</span>).replace(<span class="st">&quot;$</span><span class="sc">{pkgroot}</span><span class="st">&quot;</span>, topdir)).replace(<span class="st">&#39;</span><span class="ch">\\</span><span class="st">&#39;</span>, <span class="st">&#39;/&#39;</span>)</span>
<span id="cb5-5"><a href="#cb5-5" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb5-6"><a href="#cb5-6" aria-hidden="true" tabindex="-1"></a>    topdir_relative_path <span class="op">=</span> path.replace(pkgroot, <span class="st">&quot;$topdir&quot;</span>)</span>
<span id="cb5-7"><a href="#cb5-7" aria-hidden="true" tabindex="-1"></a>    <span class="cf">if</span> topdir_relative_path.find(<span class="st">&quot;$topdir&quot;</span>) <span class="op">!=</span> <span class="op">-</span><span class="dv">1</span>:</span>
<span id="cb5-8"><a href="#cb5-8" aria-hidden="true" tabindex="-1"></a>        <span class="cf">return</span> os.path.normpath(topdir_relative_path.replace(<span class="st">&quot;$topdir&quot;</span>, topdir)).replace(<span class="st">&#39;</span><span class="ch">\\</span><span class="st">&#39;</span>, <span class="st">&#39;/&#39;</span>)</span></code></pre></div>
<p>また、macOS の 9.2.1 では <code>make</code> を利用して内部でも置換をしている場所があります：</p>
<div class="sourceCode" id="cb6"><pre class="sourceCode mk"><code class="sourceCode makefile"><span id="cb6-1"><a href="#cb6-1" aria-hidden="true" tabindex="-1"></a><span class="kw">define</span> patchpackageconf</span>
<span id="cb6-2"><a href="#cb6-2" aria-hidden="true" tabindex="-1"></a>	cat <span class="st">&#39;</span><span class="ch">$2</span><span class="st">&#39;</span> | sed <span class="st">&#39;s|haddock-interfaces.*|haddock-interfaces: &quot;</span><span class="ch">$$</span><span class="st">{pkgroot}/</span><span class="ch">$4</span><span class="st">/html/libraries/</span><span class="ch">$1</span><span class="st">/</span><span class="ch">$1</span><span class="st">.haddock&quot;|&#39;</span> \</span>
<span id="cb6-3"><a href="#cb6-3" aria-hidden="true" tabindex="-1"></a>	         | sed <span class="st">&#39;s|haddock-html.*|haddock-html: &quot;</span><span class="ch">$$</span><span class="st">{pkgroot}/</span><span class="ch">$4</span><span class="st">/html/libraries/</span><span class="ch">$1</span><span class="st">&quot;|&#39;</span> \</span>
<span id="cb6-4"><a href="#cb6-4" aria-hidden="true" tabindex="-1"></a>		 | sed <span class="st">&#39;s|    </span><span class="ch">$$</span><span class="st">{pkgroot}/../../docs/html/.*||&#39;</span> \</span>
<span id="cb6-5"><a href="#cb6-5" aria-hidden="true" tabindex="-1"></a>	       &gt; <span class="st">&#39;</span><span class="ch">$2</span><span class="st">.copy&#39;</span></span></code></pre></div>
<p>ここ、何故か <code>"</code> を前後に追加しているんですよね。Bazel で利用するパスにする場合、邪魔になるので <code>path.strip("\"")</code> で除去しています。</p>
<h3 id="5-realpath-コマンドに依存している問題mac">5. <code>realpath</code> コマンドに依存している問題（Mac）</h3>
<p>ちょうど前述した <code>patchpackageconf</code> の引数に <code>pkgroot</code> から <code>doc</code> への相対パスを <code>$4</code> として渡しています。この相対パスの解決に <code>realpath</code> コマンドを利用していたのですが、これは macOS に標準で入っていません。そのため、<code>make</code> を実行すると落ちます。</p>
<p><a href="https://gitlab.haskell.org/ghc/ghc/-/commit/fab2579e63bb317d4c266d7b949cf96ad6e5d17b">これはすでに GHC 側で Issue があり、対応の差分が master へ取り込まれています</a>。9.2.2 でもリリースされていれば、それで解決ですが、まだ無いのでパッチを手動で当てることにしました：</p>
<div class="sourceCode" id="cb7"><pre class="sourceCode py"><code class="sourceCode python"><span id="cb7-1"><a href="#cb7-1" aria-hidden="true" tabindex="-1"></a>    <span class="cf">if</span> target <span class="op">==</span> <span class="st">&quot;darwin_amd64&quot;</span>:</span>
<span id="cb7-2"><a href="#cb7-2" aria-hidden="true" tabindex="-1"></a>        patches <span class="op">=</span> {</span>
<span id="cb7-3"><a href="#cb7-3" aria-hidden="true" tabindex="-1"></a>            <span class="co"># Patch for https://gitlab.haskell.org/ghc/ghc/-/issues/19963</span></span>
<span id="cb7-4"><a href="#cb7-4" aria-hidden="true" tabindex="-1"></a>            <span class="st">&quot;9.2.1&quot;</span>: [<span class="st">&quot;@rules_haskell//haskell:assets/ghc_9_2_1_mac.patch&quot;</span>],</span>
<span id="cb7-5"><a href="#cb7-5" aria-hidden="true" tabindex="-1"></a>        }.get(version)</span>
<span id="cb7-6"><a href="#cb7-6" aria-hidden="true" tabindex="-1"></a>    ...</span>
<span id="cb7-7"><a href="#cb7-7" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb7-8"><a href="#cb7-8" aria-hidden="true" tabindex="-1"></a>    <span class="co"># We apply some patches, if needed.</span></span>
<span id="cb7-9"><a href="#cb7-9" aria-hidden="true" tabindex="-1"></a>    patch_args <span class="op">=</span> <span class="bu">list</span>(ctx.attr.patch_args)</span>
<span id="cb7-10"><a href="#cb7-10" aria-hidden="true" tabindex="-1"></a>    <span class="cf">if</span> unpack_dir:</span>
<span id="cb7-11"><a href="#cb7-11" aria-hidden="true" tabindex="-1"></a>        patch_args.extend([<span class="st">&quot;-d&quot;</span>, unpack_dir])</span>
<span id="cb7-12"><a href="#cb7-12" aria-hidden="true" tabindex="-1"></a>    patch(ctx, patch_args <span class="op">=</span> patch_args)</span></code></pre></div>
<p><code>unpack_dir</code> というのが <code>GHC_BINDIST</code> の URL から落としてきたのを展開したディレクトリへのパスです。</p>
<p><code>relpath.sh</code> はパッチだけでは実行できないので、事前に用意しておいて呼び出せるようにしておきます：</p>
<div class="sourceCode" id="cb8"><pre class="sourceCode py"><code class="sourceCode python"><span id="cb8-1"><a href="#cb8-1" aria-hidden="true" tabindex="-1"></a>        <span class="cf">if</span> version <span class="op">==</span> <span class="st">&quot;9.2.1&quot;</span>:</span>
<span id="cb8-2"><a href="#cb8-2" aria-hidden="true" tabindex="-1"></a>            ctx.<span class="bu">file</span>(<span class="st">&quot;</span><span class="sc">{}</span><span class="st">/mk/relpath.sh&quot;</span>.<span class="bu">format</span>(unpack_dir), ctx.read(ctx.path(ctx.attr._relpath_script)), executable <span class="op">=</span> <span class="va">False</span>, legacy_utf8 <span class="op">=</span> <span class="va">False</span>)</span>
<span id="cb8-3"><a href="#cb8-3" aria-hidden="true" tabindex="-1"></a>            execute_or_fail_loudly(ctx, [<span class="st">&quot;chmod&quot;</span>, <span class="st">&quot;+x&quot;</span>, <span class="st">&quot;mk/relpath.sh&quot;</span>], working_directory <span class="op">=</span> unpack_dir)</span></code></pre></div>
<h3 id="6-cabal-36-から-relocatable-フラグが機能しなくなった">6. Cabal 3.6 から <code>relocatable</code> フラグが機能しなくなった</h3>
<p>ここはあまりよくわかってないのですが、依存パッケージ（組み込みに限らず）の <code>Path_xxx</code> モジュールをビルドしようとすると次のようなエラーで落ちます：</p>
<pre><code>ERROR: /path/to/external/stackage/BUILD.bazel:821:22: HaskellCabalLibrary @stackage//:unliftio-core failed: (Exit 1): cabal_wrapper failed: error executing command bazel-out/host/bin/external/rules_haskell/haskell/cabal_wrapper bazel-out/darwin-fastbuild/bin/external/stackage/unliftio-core_cabal_wrapper_args.json

Use --sandbox_debug to see verbose messages from the sandbox

../../../bazel-out/darwin-fastbuild/bin/external/stackage/unliftio-core-0.2.0.1/unliftio-core-0.2.0.1/build/autogen/Paths_unliftio_core.hs:47:17: error:
    Variable not in scope: splitFileName :: FilePath -&gt; (a, b0)
   |
47 |   let (dir,_) = splitFileName exePath
   |                 ^^^^^^^^^^^^^

../../../bazel-out/darwin-fastbuild/bin/external/stackage/unliftio-core-0.2.0.1/unliftio-core-0.2.0.1/build/autogen/Paths_unliftio_core.hs:48:16: error:
    Variable not in scope: minusFileName :: t0 -&gt; String -&gt; String
   |
48 |   return ((dir `minusFileName` &quot;bin&quot;) `joinFileName` dirRel)
   |                ^^^^^^^^^^^^^^^</code></pre>
<p><code>Path_xxx</code> モジュールは Cabal からビルドしています。<a href="https://github.com/haskell/cabal/pull/6984">この挙動が Cabal 3.6 から変わっているっぽく</a>、以前は <code>--enable-relocatable</code> オプションを指定することで <code>splitFileName</code> 関数などを利用して relocate (?) をやっていたようです。しかし、Cabal 3.6 からは依存パッケージに対して relocate ができなくなったぽく、依存パッケージなのに <code>--enable-relocatable</code> オプションを指定すると上記のようなエラーが出るようです（わかりにくい）。</p>
<p>仕方がないので、GHC 9.2.1 以降の場合は <code>--enable-relocatable</code> オプションを指定しないようにしました：</p>
<div class="sourceCode" id="cb10"><pre class="sourceCode py"><code class="sourceCode python"><span id="cb10-1"><a href="#cb10-1" aria-hidden="true" tabindex="-1"></a>    enable_relocatable_flags <span class="op">=</span> []</span>
<span id="cb10-2"><a href="#cb10-2" aria-hidden="true" tabindex="-1"></a>    <span class="cf">if</span> <span class="kw">not</span> is_windows <span class="kw">and</span> json_args[<span class="st">&quot;ghc_version&quot;</span>] <span class="op">!=</span> <span class="va">None</span> <span class="kw">and</span> json_args[<span class="st">&quot;ghc_version&quot;</span>] <span class="op">&lt;</span> [<span class="dv">9</span>,<span class="dv">2</span>,<span class="dv">1</span>]:</span>
<span id="cb10-3"><a href="#cb10-3" aria-hidden="true" tabindex="-1"></a>        <span class="co"># ToDo: not work relocatable from Cabal-3.6.0.0 buildin GHC 9.2.1</span></span>
<span id="cb10-4"><a href="#cb10-4" aria-hidden="true" tabindex="-1"></a>        enable_relocatable_flags <span class="op">=</span> [<span class="st">&quot;--enable-relocatable&quot;</span>]</span></code></pre></div>
<p>理想的には Cabal のバージョンで分岐したいのですが、Cabal のバージョンを簡単に手に入れる方法が思いつかなったので GHC のバージョンでとりあえず分岐しています。</p>
<h3 id="7-htmllibraries-へのパスが間違っているwindows">7. <code>html/libraries</code> へのパスが間違っている（Windows）</h3>
<p>Windows は、<code>make</code> などをせず、割とそのまま展開したファイルを利用します。<code>package.conf.d</code> ディレクトリ配下の Cabal ファイル的なのに <code>${pkgroot}/../../docs</code> とあるのですが、他の OS の動作と合わせると <code>${pkgroot}/../docs</code> が正しいはずです。仕方がないので、(5) のときと同じようにパッチを当てて解決しました。</p>
<p>また、GHC 8.10 以前は <code>html/libraries</code> へのパスが <code>doc</code> だったのに対して、Windows だけは <code>docs</code> になっています。 rules_haskell は <code>doc</code> 前提になっていたので、よしなに分岐できるようにしました：</p>
<div class="sourceCode" id="cb11"><pre class="sourceCode py"><code class="sourceCode python"><span id="cb11-1"><a href="#cb11-1" aria-hidden="true" tabindex="-1"></a>GHC_BINDIST_DOCDIR <span class="op">=</span> <span class="op">\</span></span>
<span id="cb11-2"><a href="#cb11-2" aria-hidden="true" tabindex="-1"></a>    {</span>
<span id="cb11-3"><a href="#cb11-3" aria-hidden="true" tabindex="-1"></a>        <span class="st">&quot;9.2.1&quot;</span>: {</span>
<span id="cb11-4"><a href="#cb11-4" aria-hidden="true" tabindex="-1"></a>            <span class="st">&quot;windows_amd64&quot;</span>: <span class="st">&quot;docs&quot;</span>,</span>
<span id="cb11-5"><a href="#cb11-5" aria-hidden="true" tabindex="-1"></a>        },</span>
<span id="cb11-6"><a href="#cb11-6" aria-hidden="true" tabindex="-1"></a>        <span class="st">&quot;9.0.1&quot;</span>: {</span>
<span id="cb11-7"><a href="#cb11-7" aria-hidden="true" tabindex="-1"></a>            <span class="st">&quot;windows_amd64&quot;</span>: <span class="st">&quot;docs&quot;</span>,</span>
<span id="cb11-8"><a href="#cb11-8" aria-hidden="true" tabindex="-1"></a>        },</span>
<span id="cb11-9"><a href="#cb11-9" aria-hidden="true" tabindex="-1"></a>    }</span>
<span id="cb11-10"><a href="#cb11-10" aria-hidden="true" tabindex="-1"></a>  ...</span>
<span id="cb11-11"><a href="#cb11-11" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb11-12"><a href="#cb11-12" aria-hidden="true" tabindex="-1"></a>    docdir <span class="op">=</span> <span class="st">&quot;doc&quot;</span></span>
<span id="cb11-13"><a href="#cb11-13" aria-hidden="true" tabindex="-1"></a>    <span class="cf">if</span> GHC_BINDIST_DOCDIR.get(version) <span class="op">!=</span> <span class="va">None</span> <span class="kw">and</span> GHC_BINDIST_DOCDIR[version].get(target) <span class="op">!=</span> <span class="va">None</span>:</span>
<span id="cb11-14"><a href="#cb11-14" aria-hidden="true" tabindex="-1"></a>        docdir <span class="op">=</span> GHC_BINDIST_DOCDIR[version][target]</span></code></pre></div>
<h2 id="おまけallow-newer-オプション">おまけ：<code>allow-newer</code> オプション</h2>
<p>Stack には <code>allow-newer</code> オプションというめちゃくちゃ便利な機能があります。これをオンにすると、依存パッケージ間のバージョンの上限を全部無視してくれるのです（ビルドできるかは別として）。</p>
<p>このオプションはてっきり Cabal 側にそう言うのがあり、Stack 側はそれへ橋渡しするだけなのかと思ったのですが、実は違いました。Cabal は <code>--dependency</code> オプションに全ての依存パッケージを明示することで、バージョンの上限下限のチェックをしないようです。Stack 側は、常にそれを利用し、バージョンの上限下限のチェックは自前で用意していました（<code>allow-newer</code> オプションは Stack 独自のチェックを無視するだけ）。</p>
<p>昔は Cabal にも <code>allow-newer</code> オプションがあったっぽいですが、上記のように代替可能（無視したければ指定しろ）なので消されたようです：</p>
<ul>
<li><a href="https://github.com/haskell/cabal/issues/3581">RFC remove allow-older and allow-newer support from Setup.hs · Issue #3581 · haskell/cabal</a></li>
</ul>
<p>そのため、Bazel 側で簡単にチェックを外すのは厳しい（Stack と同じチェックの仕組みを再実装する必要がある）のでした。</p>
<h2 id="おしまい">おしまい</h2>
<p>1週間もかかった笑</p>]]></content>
    </entry>
    <entry>
        <title>Haskell Morpheus GraphQL で GitHub API を試す</title>
        <link href="https://matsubara0507.github.io/posts/2021-12-09-use-morpheus-graphql-for-github.html"/>
        <id>https://matsubara0507.github.io/posts/2021-12-09-use-morpheus-graphql-for-github.html</id>
        <published>2021-12-09T00:00:00Z</published>
        <updated>2021-12-09T00:00:00Z</updated>
        <category term="Haskell"/>
        <category term="GraphQL"/>
        <category term="GitHub"/>
        <content type="html"><![CDATA[<p>本記事は 「<a href="https://qiita.com/advent-calendar/2021/haskell">Haskell Advent Calendar 2021</a>」の9日目の記事です。</p>
<p>2021年11月に開催された「<a href="https://haskell.jp/haskell-day-2021/">Haskell Day 2021</a>」の発表で <a href="https://morpheusgraphql.com/">Morpheus GraphQL</a> の紹介がありました。 それに触発されて Morpheus GraphQL を触ってみます。 Haskell Day での発表では、GraphQL サーバーの構築について焦点が当てられてましたが、私はクライアント側を試してみます。</p>
<h2 id="題材-stack-tpls">題材: stack-tpls</h2>
<p>題材として私が自作している <a href="https://github.com/matsubara0507/stack-tpls">stack-tpls</a> というツールを使います。 これは、Haskell Stack の公開されているテンプレートの一覧表示などをしてくれる CLI ツールです：</p>
<pre><code>$ stack-tpls --list | grep matsubara0507
github:matsubara0507/get-opt-cli.hsfiles
github:matsubara0507/lib-extensible.hsfiles
github:matsubara0507/mix-cli-with-bazel.hsfiles
github:matsubara0507/mix-cli.hsfiles
github:matsubara0507/optparse-applicative-cli.hsfiles</code></pre>
<p>GitHub や GitLab などの stack-templates というリポジトリのトップレベルにある <code>.hsfiles</code> ファイルがテンプレートになります。 GitHub から Stack のテンプレートを取得するのに <a href="https://docs.github.com/graphql">GitHub GraphQL API</a> を使っています。 <code>stack-templates</code> が名前に含まれるリポジトリを検索し、クエリの結果にはトップレベルの Git オブジェクトを含ませて取得します。 あとは、クエリの結果のうち条件に当てはまるものをフィルタリングしています。 で、元々は手書きでクエリを組み立てたのですが：</p>
<div class="sourceCode" id="cb2"><pre class="sourceCode hs"><code class="sourceCode haskell"><span id="cb2-1"><a href="#cb2-1" aria-hidden="true" tabindex="-1"></a><span class="ot">searchQuery ::</span> <span class="dt">Text</span> <span class="ot">-&gt;</span> <span class="dt">Maybe</span> <span class="dt">Text</span> <span class="ot">-&gt;</span> <span class="dt">Text</span></span>
<span id="cb2-2"><a href="#cb2-2" aria-hidden="true" tabindex="-1"></a>searchQuery query after <span class="ot">=</span> <span class="fu">mconcat</span></span>
<span id="cb2-3"><a href="#cb2-3" aria-hidden="true" tabindex="-1"></a>  [ <span class="st">&quot;query{search(&quot;</span></span>
<span id="cb2-4"><a href="#cb2-4" aria-hidden="true" tabindex="-1"></a>  , <span class="st">&quot;query:&quot;</span>, tshow query, <span class="st">&quot;, &quot;</span></span>
<span id="cb2-5"><a href="#cb2-5" aria-hidden="true" tabindex="-1"></a>  , <span class="st">&quot;type: REPOSITORY, &quot;</span>,</span>
<span id="cb2-6"><a href="#cb2-6" aria-hidden="true" tabindex="-1"></a>  , <span class="st">&quot;first: 100&quot;</span>,</span>
<span id="cb2-7"><a href="#cb2-7" aria-hidden="true" tabindex="-1"></a>  , <span class="fu">maybe</span> <span class="st">&quot;&quot;</span> (\txt <span class="ot">-&gt;</span> <span class="st">&quot;, after: &quot;</span> <span class="op">&lt;&gt;</span> tshow txt) after</span>
<span id="cb2-8"><a href="#cb2-8" aria-hidden="true" tabindex="-1"></a>  , <span class="st">&quot;){&quot;</span>, Text.intercalate <span class="st">&quot;,&quot;</span> fields, <span class="st">&quot;}}&quot;</span></span>
<span id="cb2-9"><a href="#cb2-9" aria-hidden="true" tabindex="-1"></a>  ]</span>
<span id="cb2-10"><a href="#cb2-10" aria-hidden="true" tabindex="-1"></a>  <span class="kw">where</span></span>
<span id="cb2-11"><a href="#cb2-11" aria-hidden="true" tabindex="-1"></a>    fields <span class="ot">=</span></span>
<span id="cb2-12"><a href="#cb2-12" aria-hidden="true" tabindex="-1"></a>      [ <span class="st">&quot;repositoryCount&quot;</span></span>
<span id="cb2-13"><a href="#cb2-13" aria-hidden="true" tabindex="-1"></a>      , <span class="st">&quot;pageInfo{ endCursor, hasNextPage }&quot;</span></span>
<span id="cb2-14"><a href="#cb2-14" aria-hidden="true" tabindex="-1"></a>      , <span class="st">&quot;edges{ node{ ... on Repository{ nameWithOwner, name, &quot;</span> <span class="op">&lt;&gt;</span> obj <span class="op">&lt;&gt;</span> <span class="st">&quot; }}}&quot;</span></span>
<span id="cb2-15"><a href="#cb2-15" aria-hidden="true" tabindex="-1"></a>      ]</span>
<span id="cb2-16"><a href="#cb2-16" aria-hidden="true" tabindex="-1"></a>    obj <span class="ot">=</span> <span class="st">&quot;object(expression:\&quot;HEAD\&quot;){ ... on Commit{ tree{ entries{ name, type }}}}&quot;</span></span></code></pre></div>
<p>そこを Morpheus GraphQL に置き換えます。</p>
<h2 id="morpheus-graphql-でクライアント作成">Morpheus GraphQL でクライアント作成</h2>
<p>Morpheus GraphQL でクライアントだけを作る場合は <a href="https://hackage.haskell.org/package/morpheus-graphql-client-0.18.0">morpheus-graphql-client パッケージ</a>を使います。 GraphQL のスキーマファイルを用意し、<code>defineByDocumentFile</code> を使って Template Haskell で GraphQL クエリに対応する Haskell の関数を生成します。 例えば、前述した stack-tpls のクエリを記述すると次のようになります：</p>
<div class="sourceCode" id="cb3"><pre class="sourceCode hs"><code class="sourceCode haskell"><span id="cb3-1"><a href="#cb3-1" aria-hidden="true" tabindex="-1"></a><span class="ot">{-# LANGUAGE DeriveGeneric         #-}</span></span>
<span id="cb3-2"><a href="#cb3-2" aria-hidden="true" tabindex="-1"></a><span class="ot">{-# LANGUAGE DerivingStrategies    #-}</span></span>
<span id="cb3-3"><a href="#cb3-3" aria-hidden="true" tabindex="-1"></a><span class="ot">{-# LANGUAGE DuplicateRecordFields #-}</span></span>
<span id="cb3-4"><a href="#cb3-4" aria-hidden="true" tabindex="-1"></a><span class="ot">{-# LANGUAGE OverloadedStrings     #-}</span></span>
<span id="cb3-5"><a href="#cb3-5" aria-hidden="true" tabindex="-1"></a><span class="ot">{-# LANGUAGE QuasiQuotes           #-}</span></span>
<span id="cb3-6"><a href="#cb3-6" aria-hidden="true" tabindex="-1"></a><span class="ot">{-# LANGUAGE TemplateHaskell       #-}</span></span>
<span id="cb3-7"><a href="#cb3-7" aria-hidden="true" tabindex="-1"></a><span class="ot">{-# LANGUAGE TypeFamilies          #-}</span></span>
<span id="cb3-8"><a href="#cb3-8" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb3-9"><a href="#cb3-9" aria-hidden="true" tabindex="-1"></a><span class="kw">import</span>           <span class="dt">Data.Morpheus.Client</span></span>
<span id="cb3-10"><a href="#cb3-10" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb3-11"><a href="#cb3-11" aria-hidden="true" tabindex="-1"></a>defineByDocumentFile <span class="st">&quot;./assets/schema.docs.graphql&quot;</span></span>
<span id="cb3-12"><a href="#cb3-12" aria-hidden="true" tabindex="-1"></a>  [gql|</span>
<span id="cb3-13"><a href="#cb3-13" aria-hidden="true" tabindex="-1"></a>    query SearchRepository($query: String!, $cursor: String) {</span>
<span id="cb3-14"><a href="#cb3-14" aria-hidden="true" tabindex="-1"></a>      search(query: $query, type: REPOSITORY, first: 100, after: $cursor) {</span>
<span id="cb3-15"><a href="#cb3-15" aria-hidden="true" tabindex="-1"></a>        repositoryCount,</span>
<span id="cb3-16"><a href="#cb3-16" aria-hidden="true" tabindex="-1"></a>        pageInfo { endCursor, hasNextPage }</span>
<span id="cb3-17"><a href="#cb3-17" aria-hidden="true" tabindex="-1"></a>        edges {</span>
<span id="cb3-18"><a href="#cb3-18" aria-hidden="true" tabindex="-1"></a>          node {</span>
<span id="cb3-19"><a href="#cb3-19" aria-hidden="true" tabindex="-1"></a>            ... on Repository {</span>
<span id="cb3-20"><a href="#cb3-20" aria-hidden="true" tabindex="-1"></a>              __typename</span>
<span id="cb3-21"><a href="#cb3-21" aria-hidden="true" tabindex="-1"></a>              nameWithOwner,</span>
<span id="cb3-22"><a href="#cb3-22" aria-hidden="true" tabindex="-1"></a>              name,</span>
<span id="cb3-23"><a href="#cb3-23" aria-hidden="true" tabindex="-1"></a>              object(expression: &quot;HEAD&quot;) {</span>
<span id="cb3-24"><a href="#cb3-24" aria-hidden="true" tabindex="-1"></a>                ... on Commit { __typename, tree { entries { name, type } } }</span>
<span id="cb3-25"><a href="#cb3-25" aria-hidden="true" tabindex="-1"></a>              }</span>
<span id="cb3-26"><a href="#cb3-26" aria-hidden="true" tabindex="-1"></a>            }</span>
<span id="cb3-27"><a href="#cb3-27" aria-hidden="true" tabindex="-1"></a>          }</span>
<span id="cb3-28"><a href="#cb3-28" aria-hidden="true" tabindex="-1"></a>        }</span>
<span id="cb3-29"><a href="#cb3-29" aria-hidden="true" tabindex="-1"></a>      }</span>
<span id="cb3-30"><a href="#cb3-30" aria-hidden="true" tabindex="-1"></a>    }</span>
<span id="cb3-31"><a href="#cb3-31" aria-hidden="true" tabindex="-1"></a>  |]</span></code></pre></div>
<p>スキーマは、<a href="https://docs.github.com/graphql/overview/public-schema">GitHub の場合はココに公開されています</a>。 公開されていなくても、API から生成する方法があるらしいです（詳しくは知らない）。</p>
<p>で、この Template Haskell は例えば次のようなクエリの結果を表現した型を生成します：</p>
<div class="sourceCode" id="cb4"><pre class="sourceCode hs"><code class="sourceCode haskell"><span id="cb4-1"><a href="#cb4-1" aria-hidden="true" tabindex="-1"></a><span class="kw">data</span> <span class="dt">SearchRepository</span> <span class="ot">=</span> <span class="dt">SearchRepository</span> {<span class="ot"> search ::</span> <span class="dt">SearchSearchResultItemConnection</span>	}</span>
<span id="cb4-2"><a href="#cb4-2" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb4-3"><a href="#cb4-3" aria-hidden="true" tabindex="-1"></a><span class="kw">data</span> <span class="dt">SearchSearchResultItemConnection</span> <span class="ot">=</span> <span class="dt">SearchSearchResultItemConnection</span></span>
<span id="cb4-4"><a href="#cb4-4" aria-hidden="true" tabindex="-1"></a>  {<span class="ot"> repositoryCount ::</span> <span class="dt">Int</span>	 </span>
<span id="cb4-5"><a href="#cb4-5" aria-hidden="true" tabindex="-1"></a>  ,<span class="ot"> pageInfo ::</span> <span class="dt">SearchPageInfoPageInfo</span>	 </span>
<span id="cb4-6"><a href="#cb4-6" aria-hidden="true" tabindex="-1"></a>  ,<span class="ot"> edges ::</span> <span class="dt">Maybe</span> [<span class="dt">Maybe</span> <span class="dt">SearchEdgesSearchResultItemEdge</span>]</span>
<span id="cb4-7"><a href="#cb4-7" aria-hidden="true" tabindex="-1"></a>  }</span>
<span id="cb4-8"><a href="#cb4-8" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb4-9"><a href="#cb4-9" aria-hidden="true" tabindex="-1"></a><span class="kw">data</span> <span class="dt">SearchPageInfoPageInfo</span> <span class="ot">=</span> <span class="dt">SearchPageInfoPageInfo</span>	 </span>
<span id="cb4-10"><a href="#cb4-10" aria-hidden="true" tabindex="-1"></a>  {<span class="ot"> endCursor ::</span> <span class="dt">Maybe</span> <span class="dt">Text</span>	 </span>
<span id="cb4-11"><a href="#cb4-11" aria-hidden="true" tabindex="-1"></a>  ,<span class="ot"> hasNextPage ::</span> <span class="dt">Bool</span></span>
<span id="cb4-12"><a href="#cb4-12" aria-hidden="true" tabindex="-1"></a>  }</span>
<span id="cb4-13"><a href="#cb4-13" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb4-14"><a href="#cb4-14" aria-hidden="true" tabindex="-1"></a><span class="kw">data</span> <span class="dt">SearchEdgesSearchResultItemEdge</span> <span class="ot">=</span> <span class="dt">SearchEdgesSearchResultItemEdge</span></span>
<span id="cb4-15"><a href="#cb4-15" aria-hidden="true" tabindex="-1"></a>  {<span class="ot"> node ::</span> <span class="dt">Maybe</span> <span class="dt">SearchEdgesNodeSearchResultItem</span></span>
<span id="cb4-16"><a href="#cb4-16" aria-hidden="true" tabindex="-1"></a>  }</span>
<span id="cb4-17"><a href="#cb4-17" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb4-18"><a href="#cb4-18" aria-hidden="true" tabindex="-1"></a><span class="kw">data</span> <span class="dt">SearchEdgesNodeSearchResultItem</span></span>
<span id="cb4-19"><a href="#cb4-19" aria-hidden="true" tabindex="-1"></a>  <span class="ot">=</span> <span class="dt">SearchEdgesNodeSearchResultItem</span> {<span class="ot"> __typename ::</span> <span class="dt">Text</span> }</span>
<span id="cb4-20"><a href="#cb4-20" aria-hidden="true" tabindex="-1"></a>  <span class="op">|</span> <span class="dt">SearchEdgesNodeRepository</span> <span class="co">-- こっちしか来ないけど</span></span>
<span id="cb4-21"><a href="#cb4-21" aria-hidden="true" tabindex="-1"></a>      {<span class="ot"> __typename ::</span> <span class="dt">Text</span>	 </span>
<span id="cb4-22"><a href="#cb4-22" aria-hidden="true" tabindex="-1"></a>      ,<span class="ot"> nameWithOwner ::</span> <span class="dt">Text</span>	 </span>
<span id="cb4-23"><a href="#cb4-23" aria-hidden="true" tabindex="-1"></a>      ,<span class="ot"> name ::</span> <span class="dt">Text</span>	 </span>
<span id="cb4-24"><a href="#cb4-24" aria-hidden="true" tabindex="-1"></a>      ,<span class="ot"> object ::</span> <span class="dt">Maybe</span> <span class="dt">SearchEdgesNodeObjectGitObject</span></span>
<span id="cb4-25"><a href="#cb4-25" aria-hidden="true" tabindex="-1"></a>      }</span>
<span id="cb4-26"><a href="#cb4-26" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb4-27"><a href="#cb4-27" aria-hidden="true" tabindex="-1"></a><span class="kw">data</span> <span class="dt">SearchEdgesNodeObjectGitObject</span></span>
<span id="cb4-28"><a href="#cb4-28" aria-hidden="true" tabindex="-1"></a>  <span class="ot">=</span> <span class="dt">SearchEdgesNodeObjectGitObject</span> {<span class="ot"> __typename ::</span> <span class="dt">Text</span> }</span>
<span id="cb4-29"><a href="#cb4-29" aria-hidden="true" tabindex="-1"></a>  <span class="op">|</span> <span class="dt">SearchEdgesNodeObjectCommit</span> <span class="co">-- こっちしか来ないけど</span></span>
<span id="cb4-30"><a href="#cb4-30" aria-hidden="true" tabindex="-1"></a>      {<span class="ot"> __typename ::</span> <span class="dt">Text</span></span>
<span id="cb4-31"><a href="#cb4-31" aria-hidden="true" tabindex="-1"></a>      ,<span class="ot"> tree ::</span> <span class="dt">SearchEdgesNodeObjectTreeTree</span></span>
<span id="cb4-32"><a href="#cb4-32" aria-hidden="true" tabindex="-1"></a>      }</span>
<span id="cb4-33"><a href="#cb4-33" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb4-34"><a href="#cb4-34" aria-hidden="true" tabindex="-1"></a><span class="kw">data</span> <span class="dt">SearchEdgesNodeObjectTreeTree</span> <span class="ot">=</span> <span class="dt">SearchEdgesNodeObjectTreeTree</span></span>
<span id="cb4-35"><a href="#cb4-35" aria-hidden="true" tabindex="-1"></a>  {<span class="ot"> entries ::</span> <span class="dt">Maybe</span> [<span class="dt">SearchEdgesNodeObjectTreeEntriesTreeEntry</span>]</span>
<span id="cb4-36"><a href="#cb4-36" aria-hidden="true" tabindex="-1"></a>  }</span>
<span id="cb4-37"><a href="#cb4-37" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb4-38"><a href="#cb4-38" aria-hidden="true" tabindex="-1"></a><span class="kw">data</span> <span class="dt">SearchEdgesNodeObjectTreeEntriesTreeEntry</span> <span class="ot">=</span> <span class="dt">SearchEdgesNodeObjectTreeEntriesTreeEntry</span>	 </span>
<span id="cb4-39"><a href="#cb4-39" aria-hidden="true" tabindex="-1"></a>  {<span class="ot"> name ::</span> <span class="dt">Text</span>	 </span>
<span id="cb4-40"><a href="#cb4-40" aria-hidden="true" tabindex="-1"></a>  ,<span class="ot"> type&#39; ::</span> <span class="dt">Text</span> <span class="co">-- type は type&#39; になる</span></span>
<span id="cb4-41"><a href="#cb4-41" aria-hidden="true" tabindex="-1"></a>  }</span></code></pre></div>
<p>GraphQL はクエリで返して欲しいデータ構造（型構造）自体を構築するため、このようなデータ型をクエリ毎に Template Haskell で生成するわけですね。 クエリ結果の型には morpheus-graphql-client パッケージの <code>Fetch</code> 型クラスのインスタンスが定義されています。 この型クラスを利用してクエリを実行するのです：</p>
<div class="sourceCode" id="cb5"><pre class="sourceCode hs"><code class="sourceCode haskell"><span id="cb5-1"><a href="#cb5-1" aria-hidden="true" tabindex="-1"></a><span class="kw">class</span> <span class="dt">Fetch</span> a <span class="kw">where</span></span>
<span id="cb5-2"><a href="#cb5-2" aria-hidden="true" tabindex="-1"></a>  <span class="kw">type</span> <span class="dt">Args</span><span class="ot"> a ::</span> <span class="op">*</span></span>
<span id="cb5-3"><a href="#cb5-3" aria-hidden="true" tabindex="-1"></a>  fetch </span>
<span id="cb5-4"><a href="#cb5-4" aria-hidden="true" tabindex="-1"></a><span class="ot">    ::</span> (<span class="dt">Monad</span> m, <span class="dt">FromJSON</span> a) </span>
<span id="cb5-5"><a href="#cb5-5" aria-hidden="true" tabindex="-1"></a>    <span class="ot">=&gt;</span> (<span class="dt">ByteString</span> <span class="ot">-&gt;</span> m <span class="dt">ByteString</span>)</span>
<span id="cb5-6"><a href="#cb5-6" aria-hidden="true" tabindex="-1"></a>    <span class="ot">-&gt;</span> <span class="dt">Args</span> a </span>
<span id="cb5-7"><a href="#cb5-7" aria-hidden="true" tabindex="-1"></a>    <span class="ot">-&gt;</span> m (<span class="dt">Either</span> (<span class="dt">FetchError</span> a) a)</span>
<span id="cb5-8"><a href="#cb5-8" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb5-9"><a href="#cb5-9" aria-hidden="true" tabindex="-1"></a><span class="kw">instance</span> <span class="dt">Fetch</span> <span class="dt">SearchRepository</span> <span class="kw">where</span></span>
<span id="cb5-10"><a href="#cb5-10" aria-hidden="true" tabindex="-1"></a>  <span class="kw">type</span> <span class="dt">Args</span> <span class="dt">SearchRepository</span> <span class="ot">=</span> <span class="dt">SearchRepositoryArgs</span></span>
<span id="cb5-11"><a href="#cb5-11" aria-hidden="true" tabindex="-1"></a>  fetch <span class="ot">=</span> <span class="op">...</span></span>
<span id="cb5-12"><a href="#cb5-12" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb5-13"><a href="#cb5-13" aria-hidden="true" tabindex="-1"></a><span class="kw">data</span> <span class="dt">SearchRepositoryArgs</span> <span class="ot">=</span> <span class="dt">SearchRepositoryArgs</span></span>
<span id="cb5-14"><a href="#cb5-14" aria-hidden="true" tabindex="-1"></a>  {<span class="ot"> query ::</span> <span class="dt">Text</span></span>
<span id="cb5-15"><a href="#cb5-15" aria-hidden="true" tabindex="-1"></a>  ,<span class="ot"> cursor ::</span> <span class="dt">Maybe</span> <span class="dt">Text</span></span>
<span id="cb5-16"><a href="#cb5-16" aria-hidden="true" tabindex="-1"></a>  }</span></code></pre></div>
<p><code>SearchRepositoryArgs</code> 型も Template Haskell で生成されます。 <code>fetch</code> 関数の一引数目には、実際に <code>ByteString</code> のクエリ文字列を受け取り HTTP リクエストをして <code>ByteString</code> の結果を返す関数を渡します。 <a href="https://github.com/morpheusgraphql/morpheus-graphql/blob/1ad3b8d59a1e4f62628dfdcae204c768d2b5b0f7/morpheus-graphql-client/README.md">morpheus-graphql-client パッケージの README</a>には <a href="https://hackage.haskell.org/package/req-3.9.2">req パッケージ</a>を使った例があるので、参考にして次のように書きました：</p>
<div class="sourceCode" id="cb6"><pre class="sourceCode hs"><code class="sourceCode haskell"><span id="cb6-1"><a href="#cb6-1" aria-hidden="true" tabindex="-1"></a><span class="kw">import</span>           <span class="dt">Data.ByteString</span>      (<span class="dt">ByteString</span>)</span>
<span id="cb6-2"><a href="#cb6-2" aria-hidden="true" tabindex="-1"></a><span class="kw">import</span> <span class="kw">qualified</span> <span class="dt">Data.ByteString.Lazy</span> <span class="kw">as</span> <span class="dt">Lazy</span></span>
<span id="cb6-3"><a href="#cb6-3" aria-hidden="true" tabindex="-1"></a><span class="kw">import</span>           <span class="dt">Network.HTTP.Req</span></span>
<span id="cb6-4"><a href="#cb6-4" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb6-5"><a href="#cb6-5" aria-hidden="true" tabindex="-1"></a><span class="ot">resolver ::</span> <span class="dt">ByteString</span> <span class="ot">-&gt;</span> <span class="dt">Lazy.ByteString</span> <span class="ot">-&gt;</span> <span class="dt">IO</span> <span class="dt">Lazy.ByteString</span></span>
<span id="cb6-6"><a href="#cb6-6" aria-hidden="true" tabindex="-1"></a>resolver token b <span class="ot">=</span> runReq defaultHttpConfig <span class="op">$</span> <span class="kw">do</span></span>
<span id="cb6-7"><a href="#cb6-7" aria-hidden="true" tabindex="-1"></a>    <span class="kw">let</span> headers <span class="ot">=</span> header <span class="st">&quot;Content-Type&quot;</span> <span class="st">&quot;application/json&quot;</span></span>
<span id="cb6-8"><a href="#cb6-8" aria-hidden="true" tabindex="-1"></a>               <span class="op">&lt;&gt;</span> header <span class="st">&quot;User-Agent&quot;</span> <span class="st">&quot;matsubara0507/stack-tpls&quot;</span></span>
<span id="cb6-9"><a href="#cb6-9" aria-hidden="true" tabindex="-1"></a>               <span class="op">&lt;&gt;</span> oAuth2Bearer token</span>
<span id="cb6-10"><a href="#cb6-10" aria-hidden="true" tabindex="-1"></a>    responseBody <span class="op">&lt;$&gt;</span> req <span class="dt">POST</span> (https <span class="st">&quot;api.github.com&quot;</span> <span class="op">/:</span> <span class="st">&quot;graphql&quot;</span>) (<span class="dt">ReqBodyLbs</span> b) lbsResponse headers</span></code></pre></div>
<p>余談ですが、Template Haskell の生成結果は <code>stack haddock</code> などを利用して Haddock を生成して利用すると確認しやすいです（そのときに <code>--no-haddock-deps</code> をすれば、依存パッケージの Haddock 生成をスキップできるので早いです）。</p>
<h3 id="注意点">注意点</h3>
<p>いくつか注意点があります。</p>
<p>まず、GitHub GraphQL API で morpheus-graphql-client パッケージを使うには v0.18.0 以上を使う必要があります。 もし古いのを使うと、次のようなエラーメッセージが出ます：</p>
<pre><code>stack-tpls/src/StackTemplates/GitHub/GraphQL/Query.hs:14:1: error:
    [{&quot;message&quot;:&quot;offset=672270:\nunexpected &#39;Â&#39;\nexpecting \&quot;\&quot;\&quot;\&quot;\&quot;, newline, or printable character\n&quot;,&quot;locations&quot;:[{&quot;line&quot;:36050,&quot;column&quot;:60}]}]
   |
14 | defineByDocumentFile &quot;./assets/schema.docs.graphql&quot;
   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^...</code></pre>
<p>これは、<a href="https://github.com/morpheusgraphql/morpheus-graphql/issues/581">この Issue のやつ</a>でスキーマのパーサーが全ての Unicode な文字を扱えてなかったのが原因です。 GitHub GraphQL API のスキーマの36050行目のコメントに、そういう文字が含まれていたというわけです。 幸いにも、すでに修正されているので、バージョンを上げておきましょう。</p>
<h1 id="section"></h1>
<p>もう一つは <code>__typename</code> の部分です。 これをなくすとコンパイルはできますが、実行時に次のようなエラーメッセージが出てしまいます：</p>
<pre><code>$ stack-tpls --list --update
FetchErrorParseFailure &quot;Error in $.data.search.edges[0].node: key \&quot;__typename\&quot; not found on object&quot;</code></pre>
<p>GraphQL には <a href="https://graphql.org/learn/schema/#interfaces">Interface Type</a> というのがあります。 特定のフィールドを持っている型を多相的に扱えるというものです。 クエリでは、この Interface Type に対して「具体的なこの型が欲しい」と指定できます。 <code>... on Repository</code> や <code>... on Commit</code> の部分です。</p>
<p>で、クエリ結果の JSON には <a href="https://graphql.org/learn/queries/#meta-fields"><code>__typename</code> というフィールド</a>を使うことで、どの具体型なのかの情報を載せることができます。 おそらく、Morpheus GraphQL のパーサーは <code>__typename</code> を使って変換先の型を選んでるんだと思います。 そのため、勝手に生成する型構造には <code>__typename</code> フィールドを付与されるのですが、リクエストしてるクエリには <code>__typename</code> が含まれないため、実際の結果の JSON には含まれてなくて落ちてるわけですね。 なので、<code>... on</code> する場合はとりあえず <code>__typename</code> 付けることで回避できます。</p>
<h2 id="おまけ別々のクエリ結果を多相的に扱う">おまけ：別々のクエリ結果を多相的に扱う</h2>
<p>Morpheus GraphQL のクライアントでは、クエリに対して別々の型を生成します。 例えば、<code>SearchRepository</code> クエリの他に、次のようなクエリを生成してみます：</p>
<div class="sourceCode" id="cb9"><pre class="sourceCode hs"><code class="sourceCode haskell"><span id="cb9-1"><a href="#cb9-1" aria-hidden="true" tabindex="-1"></a>defineByDocumentFile <span class="st">&quot;./assets/schema.docs.graphql&quot;</span></span>
<span id="cb9-2"><a href="#cb9-2" aria-hidden="true" tabindex="-1"></a>  [gql|</span>
<span id="cb9-3"><a href="#cb9-3" aria-hidden="true" tabindex="-1"></a>    query GetReository($owner: String!, $name: String!) {</span>
<span id="cb9-4"><a href="#cb9-4" aria-hidden="true" tabindex="-1"></a>      repository(owner: $owner, name: $name) {</span>
<span id="cb9-5"><a href="#cb9-5" aria-hidden="true" tabindex="-1"></a>        object(expression: &quot;HEAD&quot;) {</span>
<span id="cb9-6"><a href="#cb9-6" aria-hidden="true" tabindex="-1"></a>          ... on Commit { __typename, tree { entries { name, type } } }</span>
<span id="cb9-7"><a href="#cb9-7" aria-hidden="true" tabindex="-1"></a>        }</span>
<span id="cb9-8"><a href="#cb9-8" aria-hidden="true" tabindex="-1"></a>      }</span>
<span id="cb9-9"><a href="#cb9-9" aria-hidden="true" tabindex="-1"></a>    }</span>
<span id="cb9-10"><a href="#cb9-10" aria-hidden="true" tabindex="-1"></a>  |]</span></code></pre></div>
<p>指定したリポジトリのトップレベルの Git オブジェクトをとってきているだけですね。 これは次のような型を生成します：</p>
<div class="sourceCode" id="cb10"><pre class="sourceCode hs"><code class="sourceCode haskell"><span id="cb10-1"><a href="#cb10-1" aria-hidden="true" tabindex="-1"></a><span class="kw">data</span> <span class="dt">GetReository</span> <span class="ot">=</span> <span class="dt">GetReository</span> {<span class="ot"> repository ::</span> <span class="dt">Maybe</span> <span class="dt">RepositoryRepository</span> } </span>
<span id="cb10-2"><a href="#cb10-2" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb10-3"><a href="#cb10-3" aria-hidden="true" tabindex="-1"></a><span class="kw">data</span> <span class="dt">RepositoryRepository</span> <span class="ot">=</span> <span class="dt">RepositoryRepository</span> {<span class="ot"> object ::</span> <span class="dt">Maybe</span> <span class="dt">RepositoryObjectGitObject</span> }</span>
<span id="cb10-4"><a href="#cb10-4" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb10-5"><a href="#cb10-5" aria-hidden="true" tabindex="-1"></a><span class="kw">data</span> <span class="dt">RepositoryObjectGitObject</span></span>
<span id="cb10-6"><a href="#cb10-6" aria-hidden="true" tabindex="-1"></a>  <span class="ot">=</span> <span class="dt">RepositoryObjectGitObject</span> {<span class="ot"> __typename ::</span> <span class="dt">Text</span> }</span>
<span id="cb10-7"><a href="#cb10-7" aria-hidden="true" tabindex="-1"></a>  <span class="op">|</span> <span class="dt">RepositoryObjectCommit</span> </span>
<span id="cb10-8"><a href="#cb10-8" aria-hidden="true" tabindex="-1"></a>      {<span class="ot"> __typename ::</span> <span class="dt">Text</span></span>
<span id="cb10-9"><a href="#cb10-9" aria-hidden="true" tabindex="-1"></a>      ,<span class="ot"> tree ::</span> <span class="dt">RepositoryObjectTreeTree</span></span>
<span id="cb10-10"><a href="#cb10-10" aria-hidden="true" tabindex="-1"></a>      }</span>
<span id="cb10-11"><a href="#cb10-11" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb10-12"><a href="#cb10-12" aria-hidden="true" tabindex="-1"></a><span class="kw">data</span> <span class="dt">RepositoryObjectTreeTree</span> <span class="ot">=</span> <span class="dt">RepositoryObjectTreeTree</span> </span>
<span id="cb10-13"><a href="#cb10-13" aria-hidden="true" tabindex="-1"></a>  {<span class="ot"> entries ::</span> <span class="dt">Maybe</span> [<span class="dt">RepositoryObjectTreeEntriesTreeEntry</span>]</span>
<span id="cb10-14"><a href="#cb10-14" aria-hidden="true" tabindex="-1"></a>  }</span>
<span id="cb10-15"><a href="#cb10-15" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb10-16"><a href="#cb10-16" aria-hidden="true" tabindex="-1"></a><span class="kw">data</span> <span class="dt">RepositoryObjectTreeEntriesTreeEntry</span> <span class="ot">=</span> <span class="dt">RepositoryObjectTreeEntriesTreeEntry</span></span>
<span id="cb10-17"><a href="#cb10-17" aria-hidden="true" tabindex="-1"></a>  {<span class="ot"> name ::</span> <span class="dt">Text</span>	 </span>
<span id="cb10-18"><a href="#cb10-18" aria-hidden="true" tabindex="-1"></a>  ,<span class="ot"> type&#39; ::</span> <span class="dt">Text</span></span>
<span id="cb10-19"><a href="#cb10-19" aria-hidden="true" tabindex="-1"></a>  }</span></code></pre></div>
<p>生成した型のうち、<code>SearchRepository</code> クエリから生成したものとフィールドもとい本質的に同じだけど型名が違うものがいくつかありますね。 例えば、<code>SearchEdgesNodeObjectTreeEntriesTreeEntry</code> と <code>RepositoryObjectTreeEntriesTreeEntry</code> です。 できれば、この両方に対して同じ関数を定義したいなと思いませんか？</p>
<p>いくつかやり方はあると思いますが、今回は GHC 9.2.1 で導入された <code>OverloadedRecordDot</code> 言語拡張を利用します。</p>
<h3 id="overloadedrecorddot-言語拡張"><code>OverloadedRecordDot</code> 言語拡張</h3>
<p>この言語拡張自身については、だめぽ氏の「<a href="https://zenn.dev/mod_poppo/articles/ghc-9-2-and-future#record-dot-syntax">GHC 9.2の新機能と、GHCの動向2021</a>」を参考にしてください（ないしは適当に調べてください）。 で、<code>OverloadedRecordDot</code> を実現するために <a href="https://hackage.haskell.org/package/base-4.16.0.0/docs/GHC-Records.html#t:HasField"><code>GHC.Records</code> モジュールと <code>HasField</code> 型クラス</a>が追加されましたね？</p>
<div class="sourceCode" id="cb11"><pre class="sourceCode hs"><code class="sourceCode haskell"><span id="cb11-1"><a href="#cb11-1" aria-hidden="true" tabindex="-1"></a><span class="kw">class</span> <span class="dt">HasField</span> x r a <span class="op">|</span> x r <span class="ot">-&gt;</span> a <span class="kw">where</span></span>
<span id="cb11-2"><a href="#cb11-2" aria-hidden="true" tabindex="-1"></a><span class="ot">  getField ::</span> r <span class="ot">-&gt;</span> a</span></code></pre></div>
<p>この型クラスは「型 <code>r</code> のレコードが <code>a</code> 型を返すフィールド <code>x</code> を持つ」というのを表しています。 つまり、これを使えば「同一のフィールドを持つレコード型」に対して共通の関数を定義できるわけです：</p>
<div class="sourceCode" id="cb12"><pre class="sourceCode hs"><code class="sourceCode haskell"><span id="cb12-1"><a href="#cb12-1" aria-hidden="true" tabindex="-1"></a><span class="co">-- name の方は厳密にはいらないが</span></span>
<span id="cb12-2"><a href="#cb12-2" aria-hidden="true" tabindex="-1"></a><span class="ot">isBlob ::</span> (<span class="dt">HasField</span> <span class="st">&quot;name&quot;</span> r <span class="dt">Text</span>, <span class="dt">HasField</span> <span class="st">&quot;type&#39;&quot;</span> r <span class="dt">Text</span>) <span class="ot">=&gt;</span> r <span class="ot">-&gt;</span> <span class="dt">Bool</span></span>
<span id="cb12-3"><a href="#cb12-3" aria-hidden="true" tabindex="-1"></a>isBlob entry <span class="ot">=</span> entry<span class="op">.</span>type&#39; <span class="op">==</span> <span class="st">&quot;blob&quot;</span></span></code></pre></div>
<p><code>isBlob</code> 関数は <code>SearchEdgesNodeObjectTreeEntriesTreeEntry</code> 型と <code>RepositoryObjectTreeEntriesTreeEntry</code> 型の両方に適用できる関数です。 これを駆使すれば、別々のクエリ結果に対する関数をいい感じに共通化できそうですね。 ただし、GraphQL の Interface Type を挟むと直和型を含むのでうまく表現できなくなります。</p>
<h2 id="おしまい">おしまい</h2>
<p>ちなみに、おまけ部分のコードは <a href="https://github.com/matsubara0507/github-graphql-example.hs/tree/ghc9.2">matsubara0507/github-graphql-example.hs の ghc9.2 ブランチ</a>に置いてあります。 Morpheus GraphQL のパッケージを GHC 9.2.1 で使うために、いろいろフォークして修正しています（現在は、ですが）。</p>]]></content>
    </entry>
    <entry>
        <title>Haskell Stack で Stackage に無い GHC を使う</title>
        <link href="https://matsubara0507.github.io/posts/2021-11-28-use-latest-ghc-with-slack.html"/>
        <id>https://matsubara0507.github.io/posts/2021-11-28-use-latest-ghc-with-slack.html</id>
        <published>2021-11-28T00:00:00Z</published>
        <updated>2021-11-28T00:00:00Z</updated>
        <category term="Haskell"/>
        <content type="html"><![CDATA[<p>ちょっと前に GHC 9.2.1 がリリースされましたね。 GHC 9.2.1 には、ライト層のユーザーでも使いやすい機能（例えば、<code>GHC2021</code> とか <code>OverloadedRecordDot</code> とか）がいくつかあり、それを早く試したい！って人が少なくないと思います。 僕もです。</p>
<p>Haskell Stack を利用していると、Stackage に新しいバージョン用のスナップショット（<code>lts-x.y</code> とか）が来るまで待つ人が多いと思いますが、実は自分で依存ライブラリの列挙をすれば、好きな GHC を使うことができます！ 今回はそのメモ書きです。</p>
<h2 id="任意の-ghc-を利用する">任意の GHC を利用する</h2>
<p>これは簡単。<code>stack.yaml</code> の <code>resolver</code> に GHC を直接指定するとできる：</p>
<div class="sourceCode" id="cb1"><pre class="sourceCode yaml"><code class="sourceCode yaml"><span id="cb1-1"><a href="#cb1-1" aria-hidden="true" tabindex="-1"></a><span class="fu">resolver</span><span class="kw">:</span><span class="at"> ghc-9.2.1</span></span></code></pre></div>
<p>この場合、依存パッケージは何一つ登録されていないため、<code>extra-deps</code> に全て列挙する必要がある。 <code>nightly</code> や <code>lts</code> を使いつつ GHC だけ上書きする場合は <code>compiler</code> を使う：</p>
<div class="sourceCode" id="cb2"><pre class="sourceCode yaml"><code class="sourceCode yaml"><span id="cb2-1"><a href="#cb2-1" aria-hidden="true" tabindex="-1"></a><span class="fu">resolver</span><span class="kw">:</span><span class="at"> nightly-2021-11-19</span></span>
<span id="cb2-2"><a href="#cb2-2" aria-hidden="true" tabindex="-1"></a><span class="fu">compiler</span><span class="kw">:</span><span class="at"> ghc-9.2.1</span></span></code></pre></div>
<p>また、正式リリース済みの GHC ではなく、ソースコードからコンパイルして使いたい場合は <code>ghc-git</code> を使う：</p>
<div class="sourceCode" id="cb3"><pre class="sourceCode yaml"><code class="sourceCode yaml"><span id="cb3-1"><a href="#cb3-1" aria-hidden="true" tabindex="-1"></a><span class="fu">resolver</span><span class="kw">:</span><span class="at"> nightly-2021-11-19</span></span>
<span id="cb3-2"><a href="#cb3-2" aria-hidden="true" tabindex="-1"></a><span class="fu">compiler</span><span class="kw">:</span><span class="at"> ghc-git-COMMIT-FLAVOUR</span></span></code></pre></div>
<p>（<a href="https://docs.haskellstack.org/en/stable/yaml_configuration/#compiler">公式サイトにまとまっている</a>）</p>
<h2 id="カスタムスナップショットを作る">カスタムスナップショットを作る</h2>
<p>さらに、<a href="https://docs.haskellstack.org/en/stable/pantry/#snapshots">自由に個人のカスタムスナップショットを公開し再利用することができる</a>。 LTS の場合、数多くのパッケージが同時にビルド可能になる必要があるため、なかなか新しい GHC のものがリリースされない。 しかし、自分がよく使うパッケージだけなら可能かもしれない。 <a href="https://github.com/matsubara0507/stack-snapshots">ということで、試しに作ってみた</a>：</p>
<div class="sourceCode" id="cb4"><pre class="sourceCode yaml"><code class="sourceCode yaml"><span id="cb4-1"><a href="#cb4-1" aria-hidden="true" tabindex="-1"></a><span class="fu">resolver</span><span class="kw">:</span><span class="at"> ghc-9.2.1</span></span>
<span id="cb4-2"><a href="#cb4-2" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb4-3"><a href="#cb4-3" aria-hidden="true" tabindex="-1"></a><span class="fu">packages</span><span class="kw">:</span></span>
<span id="cb4-4"><a href="#cb4-4" aria-hidden="true" tabindex="-1"></a><span class="kw">-</span><span class="at"> OneTuple-0.3.1</span></span>
<span id="cb4-5"><a href="#cb4-5" aria-hidden="true" tabindex="-1"></a><span class="kw">-</span><span class="at"> Only-0.1</span></span>
<span id="cb4-6"><a href="#cb4-6" aria-hidden="true" tabindex="-1"></a><span class="co">...</span></span>
<span id="cb4-7"><a href="#cb4-7" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb4-8"><a href="#cb4-8" aria-hidden="true" tabindex="-1"></a><span class="co">flags:</span></span>
<span id="cb4-9"><a href="#cb4-9" aria-hidden="true" tabindex="-1"></a><span class="co">  cassava:</span></span>
<span id="cb4-10"><a href="#cb4-10" aria-hidden="true" tabindex="-1"></a><span class="co">    bytestring--lt-0_10_4: false</span></span>
<span id="cb4-11"><a href="#cb4-11" aria-hidden="true" tabindex="-1"></a><span class="co">  transformers-compat:</span></span>
<span id="cb4-12"><a href="#cb4-12" aria-hidden="true" tabindex="-1"></a><span class="co">    five-three: true</span></span></code></pre></div>
<p>パッケージのいくつかには GHC のコンパイルフラグを利用して、そのパッケージの依存パッケージのバージョンを分岐しているものがある。 そういうのは <code>flags</code> で指定する。 Stackage の場合、<a href="https://github.com/commercialhaskell/stackage/blob/3c8220a4306f697333df6454dcb29e7e66385fff/build-constraints.yaml#L6837">この辺りを見ると参考になる</a>（ただし、Stackage はスナップショットを直接記述せず、設定ファイルから <a href="https://github.com/commercialhaskell/curator">curator</a> で自動生成しているが）。</p>
<p>そして、<code>resolver</code> で GitHub の RAW リンクを resolver で指定すれば使える：</p>
<div class="sourceCode" id="cb5"><pre class="sourceCode yaml"><code class="sourceCode yaml"><span id="cb5-1"><a href="#cb5-1" aria-hidden="true" tabindex="-1"></a><span class="fu">resolver</span><span class="kw">:</span><span class="at"> https://raw.githubusercontent.com/matsubara0507/stack-snapshots/main/snapshot.yaml</span></span></code></pre></div>
<h2 id="おしまい">おしまい</h2>
<p>結構多くのパッケージが既に GHC9.2 対応されてて、割とすんなり遊べる。 ありがたい。</p>]]></content>
    </entry>
    <entry>
        <title>rules_elm に elm-test するルールを追加する</title>
        <link href="https://matsubara0507.github.io/posts/2021-09-30-rules_elm-elm_test.html"/>
        <id>https://matsubara0507.github.io/posts/2021-09-30-rules_elm-elm_test.html</id>
        <published>2021-09-30T00:00:00Z</published>
        <updated>2021-09-30T00:00:00Z</updated>
        <category term="Elm"/>
        <category term="Bazel"/>
        <category term="Rust"/>
        <content type="html"><![CDATA[<p>前に、Bazel で Elm をビルドしたりするためのルール群である <a href="https://github.com/matsubara0507/rules_elm">matsubara0507/rules_elm</a> を作りました。 これには、<code>elm make</code> 相当のことをしてくれるルールと、依存パッケージをキャッシュするためのルールしかありませんでした。</p>
<p>今回は、それに Elm のテストを実行するためのルールを追加するためのメモ書きです。 <a href="https://github.com/matsubara0507/rules_elm/pull/4">作業 PR はこちら</a>。</p>
<h2 id="elm-test-rs">elm-test-rs</h2>
<p>Elm 本体はテストするためのナニガシを提供していない。 テスト用のパッケージは提供しているが、今のところ実行方法はサードパーティに委ねている。 現状、デファクトスタンダードなのは <a href="https://github.com/rtfeldman/node-test-runner">rtfeldman/node-test-runner</a> を利用して実行する方法だ。</p>
<p>しかし、こいつは Node 環境で動作する。 不可能ではないが、このためだけに rules_node を利用して Bazel で Node を利用するのは面倒だ。 できればシングルバイナリで提供されてるものを利用したい。</p>
<h1 id="section"></h1>
<p>一瞬自作するか？と迷ったが、もしかしたらあるかもしれないとググってみたところ、なんとあった：</p>
<ul>
<li><a href="https://github.com/mpizenberg/elm-test-rs">mpizenberg/elm-test-rs - GitHub</a></li>
</ul>
<p>まさかの Rust 製。</p>
<h3 id="vs-symlink">vs. symlink</h3>
<p>いつものように toolchains 化し、いざ実行してみたところ次のようなエラーが出た：</p>
<pre><code>elm-test-rs 1.1.0 for elm 0.19.1
--------------------------------

Generating the elm.json for the Runner.elm
The dependencies picked to run the tests are:
{
  &quot;direct&quot;: {
    &quot;elm/browser&quot;: &quot;1.0.2&quot;,
    &quot;elm/core&quot;: &quot;1.0.5&quot;,
    &quot;elm/html&quot;: &quot;1.0.0&quot;,
    &quot;elm/json&quot;: &quot;1.1.3&quot;,
    &quot;elm-explorations/test&quot;: &quot;1.2.2&quot;,
    &quot;mpizenberg/elm-test-runner&quot;: &quot;4.0.5&quot;
  },
  &quot;indirect&quot;: {
    &quot;elm/random&quot;: &quot;1.0.0&quot;,
    &quot;elm/time&quot;: &quot;1.0.0&quot;,
    &quot;elm/url&quot;: &quot;1.0.0&quot;,
    &quot;elm/virtual-dom&quot;: &quot;1.0.2&quot;
  }
}
get_module_name of: /path/to/elm-test-rs/tests/example-projects/passing/app/tests/Tests.elm
Error: This file &quot;/path/to/elm-test-rs/tests/example-projects/passing/app/tests/Tests.elm&quot; matches no source directory! Imports wont work then.</code></pre>
<p>elm-test-rs 内で、テスト用の Elm ファイルが設定されてるディレクトリ内に存在するかどうかをチェックするところで落ちている。 もちろん、ファイルは Bazel サンドボックスに渡している。 色々調査した結果、どうやらファイルが symlink されたものの場合、このようにエラーとなってしまうらしい。 ファイルが symlink になってしまうのは Bazel の性質上仕方ないことでどうしようもない。 なので、elm-test-rs 側に修正 PR を投げて対応してもらった：</p>
<ul>
<li><a href="https://github.com/mpizenberg/elm-test-rs/pull/93">Support Elm project have symlink file by matsubara0507 · Pull Request #93 · mpizenberg/elm-test-rs</a></li>
</ul>
<p>無事マージされて新しいバージョン v1.2 がリリースされた。</p>
<h2 id="vs-windows">vs. Windows</h2>
<p>あとは適当にルールを書いて無事動作した。 と思いきや、GitHub Actions で回しているテストで Windows だけが落ちるようになってしまった。</p>
<p>元々 Windows 対策として Shell Script の代わりに Python スクリプトを噛ませていたのにこっちでは少しサボってしまった。 なので、同様に Python を利用してテストをテスト用ルールを作る。 <code>bazel build</code> 時に Python スクリプトを実行したいだけだったときは <code>py_binary</code> を利用したが、今回はテストをしたいので <code>py_test</code> を使う：</p>
<div class="sourceCode" id="cb2"><pre class="sourceCode py"><code class="sourceCode python"><span id="cb2-1"><a href="#cb2-1" aria-hidden="true" tabindex="-1"></a><span class="kw">def</span> elm_test(name, <span class="op">**</span>kwargs):</span>
<span id="cb2-2"><a href="#cb2-2" aria-hidden="true" tabindex="-1"></a>    _elm_test_wrapper(</span>
<span id="cb2-3"><a href="#cb2-3" aria-hidden="true" tabindex="-1"></a>        name <span class="op">=</span> name <span class="op">+</span> <span class="st">&quot;.py&quot;</span>,</span>
<span id="cb2-4"><a href="#cb2-4" aria-hidden="true" tabindex="-1"></a>        src_name <span class="op">=</span> name,</span>
<span id="cb2-5"><a href="#cb2-5" aria-hidden="true" tabindex="-1"></a>        elm_wrapper_tpl <span class="op">=</span> Label(<span class="st">&quot;@rules_elm//elm/private:elm_test_wrapper.py.tpl&quot;</span>),</span>
<span id="cb2-6"><a href="#cb2-6" aria-hidden="true" tabindex="-1"></a>        <span class="op">**</span>kwargs,</span>
<span id="cb2-7"><a href="#cb2-7" aria-hidden="true" tabindex="-1"></a>    )</span>
<span id="cb2-8"><a href="#cb2-8" aria-hidden="true" tabindex="-1"></a>    py_test(</span>
<span id="cb2-9"><a href="#cb2-9" aria-hidden="true" tabindex="-1"></a>        name <span class="op">=</span> name,</span>
<span id="cb2-10"><a href="#cb2-10" aria-hidden="true" tabindex="-1"></a>        srcs <span class="op">=</span> [name <span class="op">+</span> <span class="st">&quot;.py&quot;</span>],</span>
<span id="cb2-11"><a href="#cb2-11" aria-hidden="true" tabindex="-1"></a>        srcs_version <span class="op">=</span> <span class="st">&quot;PY3&quot;</span>,</span>
<span id="cb2-12"><a href="#cb2-12" aria-hidden="true" tabindex="-1"></a>        python_version <span class="op">=</span> <span class="st">&quot;PY3&quot;</span>,</span>
<span id="cb2-13"><a href="#cb2-13" aria-hidden="true" tabindex="-1"></a>    )</span></code></pre></div>
<p><code>_elm_test_wrapper</code> というのが、テンプレートを元に <code>bazel test</code> で実行する Python スクリプトを生成するルールで、<code>py_test</code> がそのテスト用のスクリプトを <code>bazel test</code> で実行してくれる。 <code>bazel build</code> で使っていたスクリプトと異なり、<code>bazel test</code> で実行したいナニガシ（正確には <code>bazel run</code>）は runfiles と呼ばれる実行時に参照できるファイル群を用意しておく必要がある：</p>
<div class="sourceCode" id="cb3"><pre class="sourceCode py"><code class="sourceCode python"><span id="cb3-1"><a href="#cb3-1" aria-hidden="true" tabindex="-1"></a><span class="kw">def</span> _elm_test_wrapper_impl(ctx):</span>
<span id="cb3-2"><a href="#cb3-2" aria-hidden="true" tabindex="-1"></a>    elm_compiler <span class="op">=</span> ctx.toolchains[<span class="st">&quot;@rules_elm//elm:toolchain&quot;</span>].elm</span>
<span id="cb3-3"><a href="#cb3-3" aria-hidden="true" tabindex="-1"></a>    elm_test_bin <span class="op">=</span> ctx.toolchains[<span class="st">&quot;@rules_elm//elm:toolchain&quot;</span>].elm_test</span>
<span id="cb3-4"><a href="#cb3-4" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb3-5"><a href="#cb3-5" aria-hidden="true" tabindex="-1"></a>    inputs <span class="op">=</span> [</span>
<span id="cb3-6"><a href="#cb3-6" aria-hidden="true" tabindex="-1"></a>        ctx.toolchains[<span class="st">&quot;@rules_elm//elm:toolchain&quot;</span>].elm,</span>
<span id="cb3-7"><a href="#cb3-7" aria-hidden="true" tabindex="-1"></a>        ctx.toolchains[<span class="st">&quot;@rules_elm//elm:toolchain&quot;</span>].elm_test,</span>
<span id="cb3-8"><a href="#cb3-8" aria-hidden="true" tabindex="-1"></a>        ctx.<span class="bu">file</span>.elm_json,</span>
<span id="cb3-9"><a href="#cb3-9" aria-hidden="true" tabindex="-1"></a>    ] <span class="op">+</span> ctx.files.srcs <span class="op">+</span> ctx.files.tests</span>
<span id="cb3-10"><a href="#cb3-10" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb3-11"><a href="#cb3-11" aria-hidden="true" tabindex="-1"></a>    substitutions <span class="op">=</span> {</span>
<span id="cb3-12"><a href="#cb3-12" aria-hidden="true" tabindex="-1"></a>        <span class="st">&quot;@@ELM_RUNTIME@@&quot;</span>: elm_compiler.short_path,</span>
<span id="cb3-13"><a href="#cb3-13" aria-hidden="true" tabindex="-1"></a>        <span class="st">&quot;@@ELM_TEST@@&quot;</span>: elm_test_bin.short_path,</span>
<span id="cb3-14"><a href="#cb3-14" aria-hidden="true" tabindex="-1"></a>        <span class="st">&quot;@@PROJECT_ROOT@@&quot;</span>: ctx.<span class="bu">file</span>.elm_json.short_path.rsplit(<span class="st">&quot;/&quot;</span>, <span class="dv">1</span>)[<span class="dv">0</span>],</span>
<span id="cb3-15"><a href="#cb3-15" aria-hidden="true" tabindex="-1"></a>        <span class="st">&quot;@@ELM_HOME_ZIP@@&quot;</span>: <span class="st">&quot;&quot;</span>,</span>
<span id="cb3-16"><a href="#cb3-16" aria-hidden="true" tabindex="-1"></a>    }</span>
<span id="cb3-17"><a href="#cb3-17" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb3-18"><a href="#cb3-18" aria-hidden="true" tabindex="-1"></a>    <span class="cf">if</span> ctx.<span class="bu">file</span>.elm_home <span class="op">!=</span> <span class="va">None</span>:</span>
<span id="cb3-19"><a href="#cb3-19" aria-hidden="true" tabindex="-1"></a>        substitutions[<span class="st">&quot;@@ELM_HOME_ZIP@@&quot;</span>] <span class="op">=</span> ctx.<span class="bu">file</span>.elm_home.short_path</span>
<span id="cb3-20"><a href="#cb3-20" aria-hidden="true" tabindex="-1"></a>        inputs.append(ctx.<span class="bu">file</span>.elm_home)</span>
<span id="cb3-21"><a href="#cb3-21" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb3-22"><a href="#cb3-22" aria-hidden="true" tabindex="-1"></a>    elm_wrapper <span class="op">=</span> ctx.actions.declare_file(ctx.attr.src_name <span class="op">+</span> <span class="st">&quot;.py&quot;</span>)</span>
<span id="cb3-23"><a href="#cb3-23" aria-hidden="true" tabindex="-1"></a>    ctx.actions.expand_template(</span>
<span id="cb3-24"><a href="#cb3-24" aria-hidden="true" tabindex="-1"></a>        template <span class="op">=</span> ctx.<span class="bu">file</span>.elm_wrapper_tpl,</span>
<span id="cb3-25"><a href="#cb3-25" aria-hidden="true" tabindex="-1"></a>        output <span class="op">=</span> elm_wrapper,</span>
<span id="cb3-26"><a href="#cb3-26" aria-hidden="true" tabindex="-1"></a>        is_executable <span class="op">=</span> <span class="va">True</span>,</span>
<span id="cb3-27"><a href="#cb3-27" aria-hidden="true" tabindex="-1"></a>        substitutions <span class="op">=</span> substitutions,</span>
<span id="cb3-28"><a href="#cb3-28" aria-hidden="true" tabindex="-1"></a>    )</span>
<span id="cb3-29"><a href="#cb3-29" aria-hidden="true" tabindex="-1"></a>    <span class="cf">return</span> [DefaultInfo(</span>
<span id="cb3-30"><a href="#cb3-30" aria-hidden="true" tabindex="-1"></a>        files <span class="op">=</span> depset([elm_wrapper]), </span>
<span id="cb3-31"><a href="#cb3-31" aria-hidden="true" tabindex="-1"></a>        runfiles <span class="op">=</span> ctx.runfiles(files <span class="op">=</span> inputs), <span class="co"># この部分</span></span>
<span id="cb3-32"><a href="#cb3-32" aria-hidden="true" tabindex="-1"></a>    )]</span></code></pre></div>
<p><code>bazel build</code> 用のルールのときは、<code>py_binary</code> には Python スクリプトしか含まれておらず、Python スクリプトを別のルールで実行するときに上記のようなファイル群を構築していた。 しかし、<code>bazel test</code> は <code>bazel run</code> と同じで <code>bazel build</code> とは実行環境が少し異なるのだ（実行環境を <code>bazel build</code> しているイメージ）。</p>
<h3 id="elm-test-rs-から-elm-バイナリが見えない">elm-test-rs から elm バイナリが見えない</h3>
<p>試行錯誤して、やっとこさ Bazel + Windows での問題は突破できたところで elm-test-rs 由来でのエラーが生じた。 Windows だけなぜか、elm-test-rs から elm バイナリが見当たらないというエラーが出たのだ：</p>
<pre><code>==================== Test output for //examples/build-project:sample-test:
Error: 
Failed to run C:\path\to\elm. Are you sure it&#39;s in your PATH?
If you installed elm locally with npm, maybe try running with npx such as:

    npx --no-install elm-test-rs

Caused by:
    cannot find binary path
...</code></pre>
<p>確かに、Bazel サンドボックスで参照できる位置に elm バイナリはある。 仕方ないので elm-test-rs コードを読んで、手元の Windows に Rust 環境を用意して色々動作を追ってみた。 で、結果としては Bazel ツールチェインでインストールした elm バイナリに拡張子が無いのが問題だった。 elm-test-rs は、バイナリの存在確認に <a href="https://github.com/harryfei/which-rs/tree/4.0.2">which</a> ライブラリを使っているのだが、<a href="https://github.com/harryfei/which-rs/blob/4.0.2/src/finder.rs#L134-L151">これが Windows の場合は特定の拡張子が無いとバイナリとして識別してくれない</a>。 なので、Windows の場合は <code>.exe</code> を付けるように改修した。</p>
<h2 id="使う">使う</h2>
<p>趣味の Haskell + Elm + Bazel プロジェクトで使ってみた。<a href="https://github.com/matsubara0507/homelyapp/pull/5">作業 PR はこちら</a>。利用は簡単で、BUILD ファイルに以下のようなのを追記するだけ：</p>
<div class="sourceCode" id="cb5"><pre class="sourceCode py"><code class="sourceCode python"><span id="cb5-1"><a href="#cb5-1" aria-hidden="true" tabindex="-1"></a>elm_test(</span>
<span id="cb5-2"><a href="#cb5-2" aria-hidden="true" tabindex="-1"></a>    name <span class="op">=</span> <span class="st">&quot;test-elm&quot;</span>,</span>
<span id="cb5-3"><a href="#cb5-3" aria-hidden="true" tabindex="-1"></a>    tests <span class="op">=</span> glob([<span class="st">&quot;elm-test/**&quot;</span>]),</span>
<span id="cb5-4"><a href="#cb5-4" aria-hidden="true" tabindex="-1"></a>    srcs <span class="op">=</span> glob([<span class="st">&quot;elm-src/**&quot;</span>]),</span>
<span id="cb5-5"><a href="#cb5-5" aria-hidden="true" tabindex="-1"></a>    elm_json <span class="op">=</span> <span class="st">&quot;elm.json&quot;</span>,</span>
<span id="cb5-6"><a href="#cb5-6" aria-hidden="true" tabindex="-1"></a>    elm_home <span class="op">=</span> <span class="st">&quot;:deps&quot;</span>,</span>
<span id="cb5-7"><a href="#cb5-7" aria-hidden="true" tabindex="-1"></a>)</span></code></pre></div>
<p>ここで <code>:deps</code> というのは依存パッケージを固めた Bazel 生成物で、毎回依存パッケージのインストールをしないようにするための工夫だ。 これで、<code>bazel test //...</code> と実行するだけで Haskell と Elm のテストが同時に実行されるようになった。</p>
<h2 id="おしまい">おしまい</h2>]]></content>
    </entry>
    <entry>
        <title>Bazel で生成したファイルを Haskell から参照する</title>
        <link href="https://matsubara0507.github.io/posts/2021-08-19-haskell-use-generated-file-by-bazel.html"/>
        <id>https://matsubara0507.github.io/posts/2021-08-19-haskell-use-generated-file-by-bazel.html</id>
        <published>2021-08-19T00:00:00Z</published>
        <updated>2021-08-19T00:00:00Z</updated>
        <category term="Haskell"/>
        <category term="Bazel"/>
        <category term="Docker"/>
        <content type="html"><![CDATA[<p><a href="https://matsubara0507.github.io/posts/2021-01-18-create-rules_elm.html">前に Elm のコードを Bazel でビルドするためのルールを作りました</a>． この生成物を Bazel でビルドしてる Haskell アプリケーションから参照する方法のメモ書きです．</p>
<h2 id="bazel生成物を参照する方法">Bazel生成物を参照する方法</h2>
<p>思い付いた方法は2つ：</p>
<ol>
<li>Bazel で Docker イメージを作るときに含めて動的に参照する</li>
<li>Bazel で Haskell をビルドするときに埋め込む（Template Haskell）</li>
</ol>
<p>前者は Docker で固めるだけなので，Haskell 側で特別なことをする必要がなく簡単． 後者は rules_haskell と Haskell 側で試行錯誤する必要があるが，Haskell アプリケーション単体で完結するので便利だ．</p>
<h3 id="docker-イメージに含める">Docker イメージに含める</h3>
<p>Bazel を利用して Docker イメージを作る場合は次のように書く：</p>
<div class="sourceCode" id="cb1"><pre class="sourceCode python"><code class="sourceCode python"><span id="cb1-1"><a href="#cb1-1" aria-hidden="true" tabindex="-1"></a>pkg_tar(</span>
<span id="cb1-2"><a href="#cb1-2" aria-hidden="true" tabindex="-1"></a>    name <span class="op">=</span> <span class="st">&quot;bin&quot;</span>,</span>
<span id="cb1-3"><a href="#cb1-3" aria-hidden="true" tabindex="-1"></a>    srcs <span class="op">=</span> [<span class="st">&quot;:app&quot;</span>],</span>
<span id="cb1-4"><a href="#cb1-4" aria-hidden="true" tabindex="-1"></a>    mode <span class="op">=</span> <span class="st">&quot;0755&quot;</span>,</span>
<span id="cb1-5"><a href="#cb1-5" aria-hidden="true" tabindex="-1"></a>    package_dir <span class="op">=</span> <span class="st">&quot;/usr/local/bin&quot;</span>,</span>
<span id="cb1-6"><a href="#cb1-6" aria-hidden="true" tabindex="-1"></a>)</span>
<span id="cb1-7"><a href="#cb1-7" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb1-8"><a href="#cb1-8" aria-hidden="true" tabindex="-1"></a>container_image(</span>
<span id="cb1-9"><a href="#cb1-9" aria-hidden="true" tabindex="-1"></a>    name <span class="op">=</span> <span class="st">&quot;image&quot;</span>,</span>
<span id="cb1-10"><a href="#cb1-10" aria-hidden="true" tabindex="-1"></a>    base <span class="op">=</span> <span class="st">&quot;@haskell_base//image&quot;</span>,</span>
<span id="cb1-11"><a href="#cb1-11" aria-hidden="true" tabindex="-1"></a>    tars <span class="op">=</span> [<span class="st">&quot;:bin&quot;</span>],</span>
<span id="cb1-12"><a href="#cb1-12" aria-hidden="true" tabindex="-1"></a>    entrypoint <span class="op">=</span> [<span class="st">&quot;/usr/local/bin/app&quot;</span>],</span>
<span id="cb1-13"><a href="#cb1-13" aria-hidden="true" tabindex="-1"></a>)</span></code></pre></div>
<p><code>:app</code> は，例えば rules_haskell の <code>haskell_binary</code> などで生成した実行ファイル（の Bazel 生成物）だ． <code>container_image</code> にファイルを直接渡す場合は <code>files</code> 属性を利用する：</p>
<div class="sourceCode" id="cb2"><pre class="sourceCode python"><code class="sourceCode python"><span id="cb2-1"><a href="#cb2-1" aria-hidden="true" tabindex="-1"></a>container_image(</span>
<span id="cb2-2"><a href="#cb2-2" aria-hidden="true" tabindex="-1"></a>    name <span class="op">=</span> <span class="st">&quot;image&quot;</span>,</span>
<span id="cb2-3"><a href="#cb2-3" aria-hidden="true" tabindex="-1"></a>    base <span class="op">=</span> <span class="st">&quot;@haskell_base//image&quot;</span>,</span>
<span id="cb2-4"><a href="#cb2-4" aria-hidden="true" tabindex="-1"></a>    tars <span class="op">=</span> [<span class="st">&quot;:bin&quot;</span>],</span>
<span id="cb2-5"><a href="#cb2-5" aria-hidden="true" tabindex="-1"></a>    files <span class="op">=</span> [<span class="st">&quot;:mainjs&quot;</span>], <span class="co"># ココ</span></span>
<span id="cb2-6"><a href="#cb2-6" aria-hidden="true" tabindex="-1"></a>    entrypoint <span class="op">=</span> [<span class="st">&quot;/usr/local/bin/app&quot;</span>],</span>
<span id="cb2-7"><a href="#cb2-7" aria-hidden="true" tabindex="-1"></a>)</span></code></pre></div>
<p><code>:mainjs</code> は，例えば rules_elm の <code>elm_make</code> などで生成したファイルだ． この場合，ルートディレクトリ直下に生成物が置かれる． 任意のパスにしたい場合は <code>directory</code> 属性を使えば良い：</p>
<div class="sourceCode" id="cb3"><pre class="sourceCode python"><code class="sourceCode python"><span id="cb3-1"><a href="#cb3-1" aria-hidden="true" tabindex="-1"></a>container_image(</span>
<span id="cb3-2"><a href="#cb3-2" aria-hidden="true" tabindex="-1"></a>    name <span class="op">=</span> <span class="st">&quot;image&quot;</span>,</span>
<span id="cb3-3"><a href="#cb3-3" aria-hidden="true" tabindex="-1"></a>    base <span class="op">=</span> <span class="st">&quot;@haskell_base//image&quot;</span>,</span>
<span id="cb3-4"><a href="#cb3-4" aria-hidden="true" tabindex="-1"></a>    tars <span class="op">=</span> [<span class="st">&quot;:bin&quot;</span>],</span>
<span id="cb3-5"><a href="#cb3-5" aria-hidden="true" tabindex="-1"></a>    files <span class="op">=</span> [<span class="st">&quot;:mainjs&quot;</span>],</span>
<span id="cb3-6"><a href="#cb3-6" aria-hidden="true" tabindex="-1"></a>    directory <span class="op">=</span> <span class="st">&quot;/work/static&quot;</span>, <span class="co"># ココ</span></span>
<span id="cb3-7"><a href="#cb3-7" aria-hidden="true" tabindex="-1"></a>    workdir <span class="op">=</span> <span class="st">&quot;/work&quot;</span>,</span>
<span id="cb3-8"><a href="#cb3-8" aria-hidden="true" tabindex="-1"></a>    entrypoint <span class="op">=</span> [<span class="st">&quot;/usr/local/bin/app&quot;</span>],</span>
<span id="cb3-9"><a href="#cb3-9" aria-hidden="true" tabindex="-1"></a>)</span></code></pre></div>
<p>しかし，この場合 <code>:bin</code> のパスも変わってしまう（今回の場合は <code>/work/static/usr/local/bin/app</code> になってしまう）． そこで，<code>:mainjs</code> も <code>:bin</code> のように <code>pkg_tar</code> を介すようにすれば良い：</p>
<div class="sourceCode" id="cb4"><pre class="sourceCode python"><code class="sourceCode python"><span id="cb4-1"><a href="#cb4-1" aria-hidden="true" tabindex="-1"></a>pkg_tar(</span>
<span id="cb4-2"><a href="#cb4-2" aria-hidden="true" tabindex="-1"></a>    name <span class="op">=</span> <span class="st">&quot;static&quot;</span>,</span>
<span id="cb4-3"><a href="#cb4-3" aria-hidden="true" tabindex="-1"></a>    srcs <span class="op">=</span> [<span class="st">&quot;:mainjs&quot;</span>],</span>
<span id="cb4-4"><a href="#cb4-4" aria-hidden="true" tabindex="-1"></a>    mode <span class="op">=</span> <span class="st">&quot;0444&quot;</span>,</span>
<span id="cb4-5"><a href="#cb4-5" aria-hidden="true" tabindex="-1"></a>    package_dir <span class="op">=</span> <span class="st">&quot;/work/static&quot;</span></span>
<span id="cb4-6"><a href="#cb4-6" aria-hidden="true" tabindex="-1"></a>)</span>
<span id="cb4-7"><a href="#cb4-7" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb4-8"><a href="#cb4-8" aria-hidden="true" tabindex="-1"></a>container_image(</span>
<span id="cb4-9"><a href="#cb4-9" aria-hidden="true" tabindex="-1"></a>    name <span class="op">=</span> <span class="st">&quot;image&quot;</span>,</span>
<span id="cb4-10"><a href="#cb4-10" aria-hidden="true" tabindex="-1"></a>    base <span class="op">=</span> <span class="st">&quot;@haskell_base//image&quot;</span>,</span>
<span id="cb4-11"><a href="#cb4-11" aria-hidden="true" tabindex="-1"></a>    tars <span class="op">=</span> [<span class="st">&quot;:bin&quot;</span>, <span class="st">&quot;:static&quot;</span>],</span>
<span id="cb4-12"><a href="#cb4-12" aria-hidden="true" tabindex="-1"></a>    workdir <span class="op">=</span> <span class="st">&quot;/work&quot;</span>,</span>
<span id="cb4-13"><a href="#cb4-13" aria-hidden="true" tabindex="-1"></a>    entrypoint <span class="op">=</span> [<span class="st">&quot;/usr/local/bin/app&quot;</span>],</span>
<span id="cb4-14"><a href="#cb4-14" aria-hidden="true" tabindex="-1"></a>)</span></code></pre></div>
<p>これで実行ファイルは <code>/usr/local/bin</code> にあって，Haskell アプリケーション側で読み込む静的ファイルは <code>/work/static</code> にあるようにできた． ただし，こっちの方法の問題として Docker イメージまで作らないと手元で動作確認ができない点がある． それでは不便な場合は，次の実行ファイル自体に静的ファイルを埋め込んでしまう方法をとると良い．</p>
<h3 id="haskell-に埋め込む">Haskell に埋め込む</h3>
<p>Haskell でコードを埋め込むには Template Haskell を利用する． ちなみに，<a href="https://github.com/matsubara0507/homelyapp/pull/4">実際の作業PRはこちら</a>．</p>
<p>今回は <a href="https://hackage.haskell.org/package/file-embed-0.0.14.0">file-embed パッケージ</a>を利用する：</p>
<div class="sourceCode" id="cb5"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span id="cb5-1"><a href="#cb5-1" aria-hidden="true" tabindex="-1"></a><span class="kw">import</span> <span class="dt">Data.FileEmbed</span> (embedDir)</span>
<span id="cb5-2"><a href="#cb5-2" aria-hidden="true" tabindex="-1"></a><span class="kw">import</span> <span class="dt">Servant</span></span>
<span id="cb5-3"><a href="#cb5-3" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb5-4"><a href="#cb5-4" aria-hidden="true" tabindex="-1"></a><span class="kw">type</span> <span class="dt">API</span> <span class="ot">=</span> <span class="st">&quot;static&quot;</span> <span class="op">:&gt;</span> <span class="dt">Raw</span></span>
<span id="cb5-5"><a href="#cb5-5" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb5-6"><a href="#cb5-6" aria-hidden="true" tabindex="-1"></a><span class="ot">server ::</span> <span class="dt">ServerT</span> <span class="dt">API</span> (<span class="dt">RIO</span> <span class="dt">Env</span>)</span>
<span id="cb5-7"><a href="#cb5-7" aria-hidden="true" tabindex="-1"></a>server <span class="ot">=</span> serveDirectoryEmbedded <span class="op">$</span>(embedDir <span class="st">&quot;./static&quot;</span>)</span></code></pre></div>
<p>rules_haskell で Template Haskell などのために Haskell のソースコード以外を渡す場合には <code>extra_srcs</code> 属性を利用する（<a href="https://github.com/tweag/rules_haskell/tree/b6242a0938323ee741e1dfa1a954d3f4360f1731/tests/extra-source-files">参照</a>）：</p>
<div class="sourceCode" id="cb6"><pre class="sourceCode py"><code class="sourceCode python"><span id="cb6-1"><a href="#cb6-1" aria-hidden="true" tabindex="-1"></a>haskell_library(</span>
<span id="cb6-2"><a href="#cb6-2" aria-hidden="true" tabindex="-1"></a>    name <span class="op">=</span> <span class="st">&quot;homelyapp-library&quot;</span>,</span>
<span id="cb6-3"><a href="#cb6-3" aria-hidden="true" tabindex="-1"></a>    src_strip_prefix <span class="op">=</span> <span class="st">&quot;src&quot;</span>,</span>
<span id="cb6-4"><a href="#cb6-4" aria-hidden="true" tabindex="-1"></a>    srcs <span class="op">=</span> glob([<span class="st">&quot;src/**/*.hs&quot;</span>]),</span>
<span id="cb6-5"><a href="#cb6-5" aria-hidden="true" tabindex="-1"></a>    deps <span class="op">=</span> [</span>
<span id="cb6-6"><a href="#cb6-6" aria-hidden="true" tabindex="-1"></a>        <span class="st">&quot;@stackage//:base&quot;</span>,</span>
<span id="cb6-7"><a href="#cb6-7" aria-hidden="true" tabindex="-1"></a>        ... </span>
<span id="cb6-8"><a href="#cb6-8" aria-hidden="true" tabindex="-1"></a>    ],</span>
<span id="cb6-9"><a href="#cb6-9" aria-hidden="true" tabindex="-1"></a>    extra_srcs <span class="op">=</span> [<span class="st">&quot;:mainjs&quot;</span>], <span class="co"># ココ</span></span>
<span id="cb6-10"><a href="#cb6-10" aria-hidden="true" tabindex="-1"></a>    compiler_flags <span class="op">=</span> GHC_FLAGS,</span>
<span id="cb6-11"><a href="#cb6-11" aria-hidden="true" tabindex="-1"></a>)</span></code></pre></div>
<p><code>extra_srcs</code> に渡しているのが Bazel の生成物でない場合はこれでうまくいくが，Bazel の生成物を渡した場合はこれだけではうまくいかない． というのも，Bazel の生成物のパスが <code>"./static"</code> ではないからだ． <code>:mainjs</code> 自体は <code>./static/main.js</code> という設定で生成したが，Bazel サンドボックスにおいてはカレントパスが変わってしまう（<a href="https://docs.bazel.build/versions/main/output_directories.html">Bazelサンドボックスと各種ディレクトリ構造について</a>）．</p>
<p>ではどうすれば良いか． 一応，パスの類推は可能だが，Haskellコード側に Bazel 専用のパスをハードコードするのはいやだ． で，<a href="https://github.com/tweag/rules_haskell/issues/1337#issuecomment-632588864">いろいろと Issue を漁っていたらドンピシャなものを見つけた</a>． Issue のコメント曰く，次のようにしてあげれば良い：</p>
<div class="sourceCode" id="cb7"><pre class="sourceCode py"><code class="sourceCode python"><span id="cb7-1"><a href="#cb7-1" aria-hidden="true" tabindex="-1"></a>haskell_library(</span>
<span id="cb7-2"><a href="#cb7-2" aria-hidden="true" tabindex="-1"></a>    name <span class="op">=</span> <span class="st">&quot;homelyapp-library&quot;</span>,</span>
<span id="cb7-3"><a href="#cb7-3" aria-hidden="true" tabindex="-1"></a>    src_strip_prefix <span class="op">=</span> <span class="st">&quot;src&quot;</span>,</span>
<span id="cb7-4"><a href="#cb7-4" aria-hidden="true" tabindex="-1"></a>    srcs <span class="op">=</span> glob([<span class="st">&quot;src/**/*.hs&quot;</span>]),</span>
<span id="cb7-5"><a href="#cb7-5" aria-hidden="true" tabindex="-1"></a>    deps <span class="op">=</span> [</span>
<span id="cb7-6"><a href="#cb7-6" aria-hidden="true" tabindex="-1"></a>        <span class="st">&quot;@stackage//:base&quot;</span>,</span>
<span id="cb7-7"><a href="#cb7-7" aria-hidden="true" tabindex="-1"></a>        ... </span>
<span id="cb7-8"><a href="#cb7-8" aria-hidden="true" tabindex="-1"></a>    ],</span>
<span id="cb7-9"><a href="#cb7-9" aria-hidden="true" tabindex="-1"></a>    extra_srcs <span class="op">=</span> [<span class="st">&quot;:mainjs&quot;</span>], </span>
<span id="cb7-10"><a href="#cb7-10" aria-hidden="true" tabindex="-1"></a>    compiler_flags <span class="op">=</span> [</span>
<span id="cb7-11"><a href="#cb7-11" aria-hidden="true" tabindex="-1"></a>        <span class="st">&quot;-DMAINJS_FILE=</span><span class="ch">\&quot;</span><span class="st">$(execpath :mainjs)</span><span class="ch">\&quot;</span><span class="st">&quot;</span>,  <span class="co"># ココ</span></span>
<span id="cb7-12"><a href="#cb7-12" aria-hidden="true" tabindex="-1"></a>    ] <span class="op">+</span> GHC_FLAGS,</span>
<span id="cb7-13"><a href="#cb7-13" aria-hidden="true" tabindex="-1"></a>)</span></code></pre></div>
<p><a href="https://downloads.haskell.org/~ghc/latest/docs/html/users_guide/flags.html#c-pre-processor-options"><code>-D</code> オプションはCプリプロセッサによる変数を外部から与えるやつ</a>で，<code>MAINJS_FILE</code> 変数に <code>execpath :mainjs</code> の結果を与えている． <a href="https://docs.bazel.build/versions/4.1.0/be/make-variables.html#predefined_label_variables"><code>execpath</code> は Bazel 専用の特殊な変数展開らしく</a>，サンドボックスのルートから与えた Bazel 生成物への相対パスを返す． つまり，これを <code>embedDir</code> に渡してやれば良い：</p>
<div class="sourceCode" id="cb8"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span id="cb8-1"><a href="#cb8-1" aria-hidden="true" tabindex="-1"></a><span class="ot">{-# LANGUAGE CPP #-}</span></span>
<span id="cb8-2"><a href="#cb8-2" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb8-3"><a href="#cb8-3" aria-hidden="true" tabindex="-1"></a><span class="ot">server ::</span> <span class="dt">ServerT</span> <span class="dt">API</span> (<span class="dt">RIO</span> <span class="dt">Env</span>)</span>
<span id="cb8-4"><a href="#cb8-4" aria-hidden="true" tabindex="-1"></a>server <span class="ot">=</span> serveDirectoryEmbedded <span class="op">$</span>(embedDir (takeDirectory <span class="dt">MAINJS_FILE</span>))</span></code></pre></div>
<h2 id="おまけhazell-の修正">おまけ：Hazell の修正</h2>
<p><code>compiler_flags</code> をいじった結果，Hazell が動作しなくなったので直した． 問題箇所は2つ：</p>
<ol>
<li>リストの結合（<code>+</code>）は未対応</li>
<li>文字列の <code>"</code> のエスケープが未対応</li>
</ol>
<p>両方対応した：</p>
<ul>
<li><a href="https://github.com/matsubara0507/hazell/pull/2">Support append list operator and escaped double quote in string literal by matsubara0507 · Pull Request #2 · matsubara0507/hazell</a></li>
</ul>
<p>リスト結合はだいぶ雑に実装しており，もし別の式をパースしたくなった場合はまるっと書き直す必要がある（演算子の優先順位などを考慮していないため）．</p>
<h2 id="おしまい">おしまい</h2>
<p>ちなみに，僕は後者の埋め込みを利用することにしました． こっちだと，<code>bazel run</code> のワンコマンドでアプリケーションをローカルで起動できるからです．</p>]]></content>
    </entry>
    <entry>
        <title>rules_elm で依存パッケージのインストールをキャッシュする</title>
        <link href="https://matsubara0507.github.io/posts/2021-07-31-rules_elm-elm_dependencies.html"/>
        <id>https://matsubara0507.github.io/posts/2021-07-31-rules_elm-elm_dependencies.html</id>
        <published>2021-07-31T00:00:00Z</published>
        <updated>2021-07-31T00:00:00Z</updated>
        <category term="Elm"/>
        <category term="Bazel"/>
        <content type="html"><![CDATA[<p>前に，Elm 用の Bazel ルールがないので作りました：</p>
<ul>
<li><a href="https://matsubara0507.github.io/posts/2021-01-18-create-rules_elm.html">rules_elm を作る - ひげメモ</a></li>
</ul>
<p>しかしこれは依存パッケージのDLなどをうまくキャッシュしたりしないので毎回フルビルドが走ってしまいます． 今回は，この問題をなんとか解決したという話です．</p>
<h2 id="elm-の依存パッケージのキャッシュ">Elm の依存パッケージのキャッシュ</h2>
<p>まずはそもそも，Elm は依存パッケージをどうやってローカルにキャッシュしているかについて紹介する． <code>elm make</code> などをすると Elm プロジェクトの配下に <code>elm-stuff</code> という（基本的には git 管理しない）ディレクトリができるが，中身を見てみるとここには無い． Elm コンパイラ（バージョンは 0.19.1）のソースコードを直接呼んだ結果，<code>ELM_HOME</code> 環境変数に設定したパスのディレクトリに保存されているようだ． <code>ELM_HOME</code> 環境変数が設定されてない場合は <code>$HOME/.elm</code> が使われている．</p>
<pre><code>$ ls ~/.elm/0.19.1/packages/
bartavelle		elm			elm-community		elm-explorations	justinmimbs		lock			registry.dat		rtfeldman</code></pre>
<p><code>registry.dat</code> ファイルには，このディレクトリ配下で既に管理しているパッケージ群が書かれてある． <code>lock</code> ファイルは，このディレクトリへの書き込みを排他制御するためのもので，<a href="https://hackage.haskell.org/package/filelock">filelock パッケージ</a>を利用して行っている． <code>elm install</code> や <code>elm make</code> を実行すると <code>lock</code> ファイルによってロックをとり，<code>registry.dat</code> ファイルを見て対象のパッケージがダウンロード済みかを確認し，なければダウンロードしてくるといった感じだ．</p>
<h3 id="bazel-でどうするか">Bazel でどうするか</h3>
<p><code>registry.dat</code> ファイルがあるため，依存パッケージ別に保存し再利用することは難しい． なので，Bazel のサンドボックス内に保存した <code>ELM_HOME</code> の中身をまるまるドカッと Bazel の生成物として再利用することにした． この生成物は elm.json に依存することにすれば，elm.json が変更されない限りは再ダウンロードされないはず． もちろん，elm.json が少しでも変更されると全て再ダウンロードされるが，そこまで時間かからないので取り敢えず目を瞑ることにする．</p>
<h2 id="elm_dependencies-ルール">elm_dependencies ルール</h2>
<p>それらを行う <code>elm_dependencies</code> ルールを作った． 次のように利用する：</p>
<div class="sourceCode" id="cb2"><pre class="sourceCode py"><code class="sourceCode python"><span id="cb2-1"><a href="#cb2-1" aria-hidden="true" tabindex="-1"></a>elm_dependencies(</span>
<span id="cb2-2"><a href="#cb2-2" aria-hidden="true" tabindex="-1"></a>    name <span class="op">=</span> <span class="st">&quot;deps&quot;</span>,</span>
<span id="cb2-3"><a href="#cb2-3" aria-hidden="true" tabindex="-1"></a>    elm_json <span class="op">=</span> <span class="st">&quot;elm.json&quot;</span>,</span>
<span id="cb2-4"><a href="#cb2-4" aria-hidden="true" tabindex="-1"></a>)</span>
<span id="cb2-5"><a href="#cb2-5" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb2-6"><a href="#cb2-6" aria-hidden="true" tabindex="-1"></a>elm_make(</span>
<span id="cb2-7"><a href="#cb2-7" aria-hidden="true" tabindex="-1"></a>    name <span class="op">=</span> <span class="st">&quot;index&quot;</span>,</span>
<span id="cb2-8"><a href="#cb2-8" aria-hidden="true" tabindex="-1"></a>    srcs <span class="op">=</span> glob([<span class="st">&quot;**&quot;</span>]),</span>
<span id="cb2-9"><a href="#cb2-9" aria-hidden="true" tabindex="-1"></a>    elm_json <span class="op">=</span> <span class="st">&quot;elm.json&quot;</span>,</span>
<span id="cb2-10"><a href="#cb2-10" aria-hidden="true" tabindex="-1"></a>    main <span class="op">=</span> <span class="st">&quot;src/Main.elm&quot;</span>,</span>
<span id="cb2-11"><a href="#cb2-11" aria-hidden="true" tabindex="-1"></a>    output <span class="op">=</span> <span class="st">&quot;index.html&quot;</span>,</span>
<span id="cb2-12"><a href="#cb2-12" aria-hidden="true" tabindex="-1"></a>    elm_home <span class="op">=</span> <span class="st">&quot;:deps&quot;</span>, <span class="co"># elm_dependencies の生成物をココで指定する</span></span>
<span id="cb2-13"><a href="#cb2-13" aria-hidden="true" tabindex="-1"></a>)</span></code></pre></div>
<p><a href="https://github.com/matsubara0507/rules_elm/pull/1">作業 PR はこちら</a>．</p>
<h3 id="elm_home-の中身を保存する">ELM_HOME の中身を保存する</h3>
<p>まずは <code>elm_dependencies</code> の振る舞いについて． 試行錯誤した結果：</p>
<ol>
<li>Bazel のサンドボックス配下に <code>ELM_HOME</code> を指定</li>
<li>いったん無理やり <code>elm make Main.elm</code> を実行</li>
<li><code>ELM_HOME</code> 配下を ZIP で固めてルールの生成物とする</li>
</ol>
<p>方法をとることにした． Bazel の生成物にはディレクトリも指定可能だが，生成物をあとで利用する際に ZIP ファイルにしておいた方が都合が良いのでそうしている（詳しくは後述）．</p>
<p>Bazel 内で実行される Elm コマンドは Windows でも動作するように Python を使ってラップされている（rules_haskell を参考にした）． なので，今回も同様に専用の Python スクリプトを記述することにした：</p>
<div class="sourceCode" id="cb3"><pre class="sourceCode python"><code class="sourceCode python"><span id="cb3-1"><a href="#cb3-1" aria-hidden="true" tabindex="-1"></a><span class="im">import</span> json</span>
<span id="cb3-2"><a href="#cb3-2" aria-hidden="true" tabindex="-1"></a><span class="im">import</span> os</span>
<span id="cb3-3"><a href="#cb3-3" aria-hidden="true" tabindex="-1"></a><span class="im">import</span> os.path</span>
<span id="cb3-4"><a href="#cb3-4" aria-hidden="true" tabindex="-1"></a><span class="im">import</span> shutil</span>
<span id="cb3-5"><a href="#cb3-5" aria-hidden="true" tabindex="-1"></a><span class="im">import</span> subprocess</span>
<span id="cb3-6"><a href="#cb3-6" aria-hidden="true" tabindex="-1"></a><span class="im">import</span> sys</span>
<span id="cb3-7"><a href="#cb3-7" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb3-8"><a href="#cb3-8" aria-hidden="true" tabindex="-1"></a><span class="kw">def</span> run(cmd, <span class="op">*</span>args, <span class="op">**</span>kwargs):</span>
<span id="cb3-9"><a href="#cb3-9" aria-hidden="true" tabindex="-1"></a>    <span class="cf">try</span>:</span>
<span id="cb3-10"><a href="#cb3-10" aria-hidden="true" tabindex="-1"></a>        subprocess.run(cmd, check<span class="op">=</span><span class="va">True</span>, stdout<span class="op">=</span>subprocess.PIPE, stderr<span class="op">=</span>subprocess.PIPE, <span class="op">*</span>args, <span class="op">**</span>kwargs)</span>
<span id="cb3-11"><a href="#cb3-11" aria-hidden="true" tabindex="-1"></a>    <span class="cf">except</span> subprocess.CalledProcessError <span class="im">as</span> err:</span>
<span id="cb3-12"><a href="#cb3-12" aria-hidden="true" tabindex="-1"></a>        sys.stdout.<span class="bu">buffer</span>.write(err.stdout)</span>
<span id="cb3-13"><a href="#cb3-13" aria-hidden="true" tabindex="-1"></a>        sys.stderr.<span class="bu">buffer</span>.write(err.stderr)</span>
<span id="cb3-14"><a href="#cb3-14" aria-hidden="true" tabindex="-1"></a>        <span class="cf">raise</span></span>
<span id="cb3-15"><a href="#cb3-15" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb3-16"><a href="#cb3-16" aria-hidden="true" tabindex="-1"></a>elm_runtime_path <span class="op">=</span> os.path.abspath(<span class="st">&quot;@@ELM_RUNTIME@@&quot;</span>) <span class="co"># Bazelのテンプレート機能で後から指定</span></span>
<span id="cb3-17"><a href="#cb3-17" aria-hidden="true" tabindex="-1"></a>elm_project_root <span class="op">=</span> sys.argv.pop(<span class="dv">1</span>) <span class="co"># トップレベル以外で Elm プロジェクトを指定した場合を考慮</span></span>
<span id="cb3-18"><a href="#cb3-18" aria-hidden="true" tabindex="-1"></a>os.environ[<span class="st">&quot;ELM_HOME&quot;</span>] <span class="op">=</span> os.path.abspath(os.getenv(<span class="st">&quot;ELM_HOME&quot;</span>)) <span class="co"># 念のため絶対パスにする</span></span>
<span id="cb3-19"><a href="#cb3-19" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb3-20"><a href="#cb3-20" aria-hidden="true" tabindex="-1"></a>os.chdir(elm_project_root)</span>
<span id="cb3-21"><a href="#cb3-21" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb3-22"><a href="#cb3-22" aria-hidden="true" tabindex="-1"></a><span class="co"># elm.json しか無い前提なので `source-directories` で指定してあるパスを生成しておく</span></span>
<span id="cb3-23"><a href="#cb3-23" aria-hidden="true" tabindex="-1"></a>elm_json <span class="op">=</span> json.load(<span class="bu">open</span>(<span class="st">&quot;elm.json&quot;</span>))</span>
<span id="cb3-24"><a href="#cb3-24" aria-hidden="true" tabindex="-1"></a><span class="cf">if</span> elm_json[<span class="st">&quot;type&quot;</span>] <span class="op">==</span> <span class="st">&quot;application&quot;</span>:</span>
<span id="cb3-25"><a href="#cb3-25" aria-hidden="true" tabindex="-1"></a>    <span class="cf">for</span> srcdir <span class="kw">in</span> elm_json[<span class="st">&quot;source-directories&quot;</span>]:</span>
<span id="cb3-26"><a href="#cb3-26" aria-hidden="true" tabindex="-1"></a>        os.makedirs(srcdir, exist_ok <span class="op">=</span> <span class="va">True</span>)</span>
<span id="cb3-27"><a href="#cb3-27" aria-hidden="true" tabindex="-1"></a><span class="co"># Main.elm はなんでも良いのでコンパクトなのを生成</span></span>
<span id="cb3-28"><a href="#cb3-28" aria-hidden="true" tabindex="-1"></a><span class="cf">with</span> <span class="bu">open</span>(<span class="st">&quot;Main.elm&quot;</span>, mode <span class="op">=</span> <span class="st">&quot;w&quot;</span>) <span class="im">as</span> f:</span>
<span id="cb3-29"><a href="#cb3-29" aria-hidden="true" tabindex="-1"></a>    f.write(<span class="st">&quot;import Browser</span><span class="ch">\n</span><span class="st">import Debug</span><span class="ch">\n</span><span class="st">main = Browser.sandbox (Debug.todo </span><span class="ch">\&quot;</span><span class="st">temp</span><span class="ch">\&quot;</span><span class="st">)&quot;</span>)</span>
<span id="cb3-30"><a href="#cb3-30" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb3-31"><a href="#cb3-31" aria-hidden="true" tabindex="-1"></a>run([elm_runtime_path, <span class="st">&quot;make&quot;</span>, <span class="st">&quot;Main.elm&quot;</span>])</span>
<span id="cb3-32"><a href="#cb3-32" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb3-33"><a href="#cb3-33" aria-hidden="true" tabindex="-1"></a><span class="co"># ZIP で固める</span></span>
<span id="cb3-34"><a href="#cb3-34" aria-hidden="true" tabindex="-1"></a>elm_home <span class="op">=</span> os.getenv(<span class="st">&quot;ELM_HOME&quot;</span>)</span>
<span id="cb3-35"><a href="#cb3-35" aria-hidden="true" tabindex="-1"></a>shutil.make_archive(elm_home, <span class="st">&quot;zip&quot;</span>, root_dir <span class="op">=</span> elm_home) </span></code></pre></div>
<p><code>elm_dependencies</code> ルールでは elm.json しか Bazel サンドボックスに渡していないので，<code>elm make Main.elm</code> するために必要なファイルやディレクトリを生成する必要がある． アプリケーションタイプの elm.json の場合，<code>source-directories</code> で指定したパスが存在しないとエラーになるので mkdir しておく（パッケージタイプについては，今回はまだ未対応）． また，<code>elm make</code> するには <code>Main</code> ファイルを指定しないといけないので適当なのを生成している． で，最後に <a href="https://docs.python.org/3/library/shutil.html#shutil.make_archive"><code>shutil.make_archive</code></a> 関数を利用して ZIP に固めている．</p>
<h1 id="section"></h1>
<p>あとはこの Python スクリプトを呼び出すルールを作成し，その生成物をZIPファイルとする：</p>
<div class="sourceCode" id="cb4"><pre class="sourceCode py"><code class="sourceCode python"><span id="cb4-1"><a href="#cb4-1" aria-hidden="true" tabindex="-1"></a><span class="kw">def</span> _elm_dependencies_impl(ctx):</span>
<span id="cb4-2"><a href="#cb4-2" aria-hidden="true" tabindex="-1"></a>    elm_compiler <span class="op">=</span> ctx.toolchains[<span class="st">&quot;@rules_elm//elm:toolchain&quot;</span>].elm</span>
<span id="cb4-3"><a href="#cb4-3" aria-hidden="true" tabindex="-1"></a>    elm_home <span class="op">=</span> ctx.actions.declare_directory(<span class="st">&quot;.elm&quot;</span>)</span>
<span id="cb4-4"><a href="#cb4-4" aria-hidden="true" tabindex="-1"></a>    output <span class="op">=</span> ctx.actions.declare_file(<span class="st">&quot;.elm.zip&quot;</span>) <span class="co"># ZIPファイルを生成物にする</span></span>
<span id="cb4-5"><a href="#cb4-5" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb4-6"><a href="#cb4-6" aria-hidden="true" tabindex="-1"></a>    ctx.actions.run(</span>
<span id="cb4-7"><a href="#cb4-7" aria-hidden="true" tabindex="-1"></a>        executable <span class="op">=</span> ctx.executable._elm_wrapper,</span>
<span id="cb4-8"><a href="#cb4-8" aria-hidden="true" tabindex="-1"></a>        arguments <span class="op">=</span> [ctx.<span class="bu">file</span>.elm_json.dirname],</span>
<span id="cb4-9"><a href="#cb4-9" aria-hidden="true" tabindex="-1"></a>        inputs <span class="op">=</span> [elm_compiler, ctx.<span class="bu">file</span>.elm_json],</span>
<span id="cb4-10"><a href="#cb4-10" aria-hidden="true" tabindex="-1"></a>        outputs <span class="op">=</span> [output, elm_home],</span>
<span id="cb4-11"><a href="#cb4-11" aria-hidden="true" tabindex="-1"></a>        env <span class="op">=</span> {<span class="st">&quot;ELM_HOME&quot;</span>: elm_home.path},</span>
<span id="cb4-12"><a href="#cb4-12" aria-hidden="true" tabindex="-1"></a>    )</span>
<span id="cb4-13"><a href="#cb4-13" aria-hidden="true" tabindex="-1"></a>    <span class="cf">return</span> [DefaultInfo(files <span class="op">=</span> depset([output]))]</span>
<span id="cb4-14"><a href="#cb4-14" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb4-15"><a href="#cb4-15" aria-hidden="true" tabindex="-1"></a>elm_dependencies <span class="op">=</span> rule(</span>
<span id="cb4-16"><a href="#cb4-16" aria-hidden="true" tabindex="-1"></a>    _elm_dependencies_impl,</span>
<span id="cb4-17"><a href="#cb4-17" aria-hidden="true" tabindex="-1"></a>    attrs <span class="op">=</span> {</span>
<span id="cb4-18"><a href="#cb4-18" aria-hidden="true" tabindex="-1"></a>        <span class="st">&quot;elm_json&quot;</span>: attr.label(allow_single_file <span class="op">=</span> <span class="va">True</span>),</span>
<span id="cb4-19"><a href="#cb4-19" aria-hidden="true" tabindex="-1"></a>        <span class="st">&quot;_elm_wrapper&quot;</span>: attr.label(</span>
<span id="cb4-20"><a href="#cb4-20" aria-hidden="true" tabindex="-1"></a>            executable <span class="op">=</span> <span class="va">True</span>,</span>
<span id="cb4-21"><a href="#cb4-21" aria-hidden="true" tabindex="-1"></a>            cfg <span class="op">=</span> <span class="st">&quot;host&quot;</span>,</span>
<span id="cb4-22"><a href="#cb4-22" aria-hidden="true" tabindex="-1"></a>            default <span class="op">=</span> Label(<span class="st">&quot;@rules_elm//elm:elm_dependencies&quot;</span>),</span>
<span id="cb4-23"><a href="#cb4-23" aria-hidden="true" tabindex="-1"></a>        ),</span>
<span id="cb4-24"><a href="#cb4-24" aria-hidden="true" tabindex="-1"></a>    },</span>
<span id="cb4-25"><a href="#cb4-25" aria-hidden="true" tabindex="-1"></a>    toolchains <span class="op">=</span> [</span>
<span id="cb4-26"><a href="#cb4-26" aria-hidden="true" tabindex="-1"></a>        <span class="st">&quot;@rules_elm//elm:toolchain&quot;</span>,</span>
<span id="cb4-27"><a href="#cb4-27" aria-hidden="true" tabindex="-1"></a>    ]</span>
<span id="cb4-28"><a href="#cb4-28" aria-hidden="true" tabindex="-1"></a>)</span></code></pre></div>
<h3 id="elm_home-の中身を展開する">ELM_HOME の中身を展開する</h3>
<p>あとは <code>elm_dependencies</code> ルールの生成物を <code>elm_make</code> ルールで利用できるようにするだけだ． まずは <code>elm_make</code> に引数を追加して生成物を渡せるようにする：</p>
<div class="sourceCode" id="cb5"><pre class="sourceCode py"><code class="sourceCode python"><span id="cb5-1"><a href="#cb5-1" aria-hidden="true" tabindex="-1"></a><span class="kw">def</span> _elm_make_impl(ctx):</span>
<span id="cb5-2"><a href="#cb5-2" aria-hidden="true" tabindex="-1"></a>    ...</span>
<span id="cb5-3"><a href="#cb5-3" aria-hidden="true" tabindex="-1"></a>    env <span class="op">=</span> {}</span>
<span id="cb5-4"><a href="#cb5-4" aria-hidden="true" tabindex="-1"></a>    inputs <span class="op">=</span> [elm_compiler, ctx.<span class="bu">file</span>.elm_json] <span class="op">+</span> ctx.files.srcs</span>
<span id="cb5-5"><a href="#cb5-5" aria-hidden="true" tabindex="-1"></a>    <span class="co"># elm_home が指定している場合は ZIP ファイルとそのパスをラッパースクリプトに渡す</span></span>
<span id="cb5-6"><a href="#cb5-6" aria-hidden="true" tabindex="-1"></a>    <span class="cf">if</span> ctx.<span class="bu">file</span>.elm_home <span class="op">!=</span> <span class="va">None</span>:</span>
<span id="cb5-7"><a href="#cb5-7" aria-hidden="true" tabindex="-1"></a>        env[<span class="st">&quot;ELM_HOME_ZIP&quot;</span>] <span class="op">=</span> ctx.<span class="bu">file</span>.elm_home.path</span>
<span id="cb5-8"><a href="#cb5-8" aria-hidden="true" tabindex="-1"></a>        inputs.append(ctx.<span class="bu">file</span>.elm_home)</span>
<span id="cb5-9"><a href="#cb5-9" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb5-10"><a href="#cb5-10" aria-hidden="true" tabindex="-1"></a>    ctx.actions.run(</span>
<span id="cb5-11"><a href="#cb5-11" aria-hidden="true" tabindex="-1"></a>        executable <span class="op">=</span> ctx.executable._elm_wrapper,</span>
<span id="cb5-12"><a href="#cb5-12" aria-hidden="true" tabindex="-1"></a>        arguments <span class="op">=</span> [</span>
<span id="cb5-13"><a href="#cb5-13" aria-hidden="true" tabindex="-1"></a>            ctx.<span class="bu">file</span>.elm_json.dirname,</span>
<span id="cb5-14"><a href="#cb5-14" aria-hidden="true" tabindex="-1"></a>            <span class="st">&quot;make&quot;</span>, ctx.attr.main, <span class="st">&quot;--output&quot;</span>, output_file.path,</span>
<span id="cb5-15"><a href="#cb5-15" aria-hidden="true" tabindex="-1"></a>        ],</span>
<span id="cb5-16"><a href="#cb5-16" aria-hidden="true" tabindex="-1"></a>        inputs <span class="op">=</span> [elm_compiler, ctx.<span class="bu">file</span>.elm_json] <span class="op">+</span> ctx.files.srcs,</span>
<span id="cb5-17"><a href="#cb5-17" aria-hidden="true" tabindex="-1"></a>        inputs <span class="op">=</span> inputs,</span>
<span id="cb5-18"><a href="#cb5-18" aria-hidden="true" tabindex="-1"></a>        outputs <span class="op">=</span> [output_file],</span>
<span id="cb5-19"><a href="#cb5-19" aria-hidden="true" tabindex="-1"></a>        env <span class="op">=</span> env,</span>
<span id="cb5-20"><a href="#cb5-20" aria-hidden="true" tabindex="-1"></a>    )</span>
<span id="cb5-21"><a href="#cb5-21" aria-hidden="true" tabindex="-1"></a>    ...</span>
<span id="cb5-22"><a href="#cb5-22" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb5-23"><a href="#cb5-23" aria-hidden="true" tabindex="-1"></a>elm_make <span class="op">=</span> rule(</span>
<span id="cb5-24"><a href="#cb5-24" aria-hidden="true" tabindex="-1"></a>    ...</span>
<span id="cb5-25"><a href="#cb5-25" aria-hidden="true" tabindex="-1"></a>    attrs <span class="op">=</span> {</span>
<span id="cb5-26"><a href="#cb5-26" aria-hidden="true" tabindex="-1"></a>    ...</span>
<span id="cb5-27"><a href="#cb5-27" aria-hidden="true" tabindex="-1"></a>        <span class="co"># 追加（この引数はなくても良い）</span></span>
<span id="cb5-28"><a href="#cb5-28" aria-hidden="true" tabindex="-1"></a>        <span class="st">&quot;elm_home&quot;</span>: attr.label(</span>
<span id="cb5-29"><a href="#cb5-29" aria-hidden="true" tabindex="-1"></a>            allow_single_file <span class="op">=</span> <span class="va">True</span>,</span>
<span id="cb5-30"><a href="#cb5-30" aria-hidden="true" tabindex="-1"></a>        ),</span>
<span id="cb5-31"><a href="#cb5-31" aria-hidden="true" tabindex="-1"></a>    ...</span>
<span id="cb5-32"><a href="#cb5-32" aria-hidden="true" tabindex="-1"></a>)</span></code></pre></div>
<p>あとは <code>elm_make</code> で利用している Elm コマンドのラッパースクリプトを編集する：</p>
<div class="sourceCode" id="cb6"><pre class="sourceCode python"><code class="sourceCode python"><span id="cb6-1"><a href="#cb6-1" aria-hidden="true" tabindex="-1"></a><span class="im">import</span> zipfile</span>
<span id="cb6-2"><a href="#cb6-2" aria-hidden="true" tabindex="-1"></a>...</span>
<span id="cb6-3"><a href="#cb6-3" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb6-4"><a href="#cb6-4" aria-hidden="true" tabindex="-1"></a><span class="co"># ここを追記</span></span>
<span id="cb6-5"><a href="#cb6-5" aria-hidden="true" tabindex="-1"></a><span class="cf">if</span> os.getenv(<span class="st">&quot;ELM_HOME_ZIP&quot;</span>) <span class="op">==</span> <span class="va">None</span>:</span>
<span id="cb6-6"><a href="#cb6-6" aria-hidden="true" tabindex="-1"></a>    os.putenv(<span class="st">&quot;HOME&quot;</span>, os.getcwd())</span>
<span id="cb6-7"><a href="#cb6-7" aria-hidden="true" tabindex="-1"></a><span class="cf">else</span>:</span>
<span id="cb6-8"><a href="#cb6-8" aria-hidden="true" tabindex="-1"></a>    elm_home <span class="op">=</span> os.getcwd() <span class="op">+</span> <span class="st">&quot;/.elm&quot;</span></span>
<span id="cb6-9"><a href="#cb6-9" aria-hidden="true" tabindex="-1"></a>    elm_home_zip <span class="op">=</span> os.getenv(<span class="st">&quot;ELM_HOME_ZIP&quot;</span>)</span>
<span id="cb6-10"><a href="#cb6-10" aria-hidden="true" tabindex="-1"></a>    <span class="cf">with</span> zipfile.ZipFile(elm_home_zip) <span class="im">as</span> elm_zip:</span>
<span id="cb6-11"><a href="#cb6-11" aria-hidden="true" tabindex="-1"></a>        elm_zip.extractall(elm_home)</span>
<span id="cb6-12"><a href="#cb6-12" aria-hidden="true" tabindex="-1"></a>    os.environ[<span class="st">&quot;ELM_HOME&quot;</span>] <span class="op">=</span> elm_home</span>
<span id="cb6-13"><a href="#cb6-13" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb6-14"><a href="#cb6-14" aria-hidden="true" tabindex="-1"></a>os.chdir(elm_project_root)</span>
<span id="cb6-15"><a href="#cb6-15" aria-hidden="true" tabindex="-1"></a>...</span></code></pre></div>
<p>で，なぜ ZIP ファイルを介しているのかというと，Bazel ルールの生成物を別のルールで利用する場合は read only じゃないといけないからだ． 前述したとおり，<code>elm make</code> では <code>lock</code> ファイルを利用して排他制御をする． その時，書き込み可能でファイルを open しようとする． そのため，<code>ELM_HOME</code> のディレクトリ自体を直接の生成物にして次のルールに渡すとエラーになってしまう：</p>
<pre><code>elm-mac: /private/var/tmp/.../execroot/rules_elm/bazel-out/darwin-fastbuild/bin/examples/build-project/.elm/0.19.1/packages/lock: openFd: permission denied (Permission denied)

-- ERROR -----------------------------------------------------------------------

I ran into something that bypassed the normal error reporting process! I
extracted whatever information I could from the internal error:

&gt;   thread blocked indefinitely in an MVar operation

These errors are usually pretty confusing, so start by asking around on one of
forums listed at https://elm-lang.org/community to see if anyone can get you
unstuck quickly.
...</code></pre>
<p>なので，一度 ZIP で固めてサンドボックスに展開するようにすれば乱暴だがうまくいく（他に良い方法があれば教えて欲しい...）．</p>
<h2 id="おしまい">おしまい</h2>
<p>Haskell 読めるおかげで Elm の振る舞いをささっと調べられるのは便利． それと，記事を書きながら思いついたが，<code>ELM_HOME</code> をプロジェクト直下にして vendoring みたいにするのもありっちゃありですね（Go みたいに）．</p>]]></content>
    </entry>
    <entry>
        <title>Bazel で Haskell の Custom Setup をする</title>
        <link href="https://matsubara0507.github.io/posts/2021-07-30-rules_haskell-with-setup_deps.html"/>
        <id>https://matsubara0507.github.io/posts/2021-07-30-rules_haskell-with-setup_deps.html</id>
        <published>2021-07-30T00:00:00Z</published>
        <updated>2021-07-30T00:00:00Z</updated>
        <category term="Bazel"/>
        <category term="Haskell"/>
        <content type="html"><![CDATA[<p>Bazel を使って Haskell アプリケーションをビルドしてるんですけど，依存パッケージが Custom Setup を使ってるときにちょっと躓いたので，そのメモ書きです．</p>
<h2 id="bazel-で-custom-setup">Bazel で Custom Setup</h2>
<p><a href="https://github.com/matsubara0507/mdium">mdium</a> という CLI ツールを実験的に Bazel でビルドをしている． LTS を 18.0 にあげようと依存パッケージをアップデートしたところ，次のようなエラーが出た：</p>
<pre><code>/private/var/tmp/.../sandbox/darwin-sandbox/10/execroot/mdium/external/stackage/xml-conduit-1.9.1.1/Setup.hs:3:1: error:
    Could not find module ‘Distribution.Extra.Doctest’
    Perhaps you meant Distribution.Simple.Doctest (from Cabal-3.2.1.0)
    Use -v (or `:set -v` in ghci) to see a list of the files searched for.
  |
3 | import Distribution.Extra.Doctest (defaultMainWithDoctests)
  | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^</code></pre>
<p>Stack でビルドした場合には起きないエラーだ． エラーの内容はどうやら，Cabal の Custom Setup で利用している依存パッケージが足りていないようだ（Custom Setup については「<a href="https://haskell.e-bigmoon.com/posts/2018/12-25-cabal-preprocessing.html">cabal build で package.yaml を使う - BIGMOON Haskeller's BLOG</a>」が日本語記事では分かりやすい）．</p>
<p><a href="https://github.com/tweag/rules_haskell">tweag/rules_haskell</a> で Issue を漁ったところ，<a href="https://github.com/tweag/rules_haskell/issues/1314">まさに同じの</a>があった． どうやら <code>setup_deps</code> を使えば良いらしい：</p>
<div class="sourceCode" id="cb2"><pre class="sourceCode py"><code class="sourceCode python"><span id="cb2-1"><a href="#cb2-1" aria-hidden="true" tabindex="-1"></a>stack_snapshot(</span>
<span id="cb2-2"><a href="#cb2-2" aria-hidden="true" tabindex="-1"></a>    name <span class="op">=</span> <span class="st">&quot;stackage&quot;</span>,</span>
<span id="cb2-3"><a href="#cb2-3" aria-hidden="true" tabindex="-1"></a>    packages <span class="op">=</span> [</span>
<span id="cb2-4"><a href="#cb2-4" aria-hidden="true" tabindex="-1"></a>        <span class="st">&quot;aeson&quot;</span>,</span>
<span id="cb2-5"><a href="#cb2-5" aria-hidden="true" tabindex="-1"></a>        <span class="st">&quot;base&quot;</span>,</span>
<span id="cb2-6"><a href="#cb2-6" aria-hidden="true" tabindex="-1"></a>        <span class="st">&quot;dotenv&quot;</span>,</span>
<span id="cb2-7"><a href="#cb2-7" aria-hidden="true" tabindex="-1"></a>        <span class="st">&quot;extensible&quot;</span>,</span>
<span id="cb2-8"><a href="#cb2-8" aria-hidden="true" tabindex="-1"></a>        <span class="st">&quot;fallible&quot;</span>,</span>
<span id="cb2-9"><a href="#cb2-9" aria-hidden="true" tabindex="-1"></a>        <span class="st">&quot;github&quot;</span>,</span>
<span id="cb2-10"><a href="#cb2-10" aria-hidden="true" tabindex="-1"></a>        <span class="st">&quot;mix&quot;</span>,</span>
<span id="cb2-11"><a href="#cb2-11" aria-hidden="true" tabindex="-1"></a>        <span class="st">&quot;mix-json-logger&quot;</span>,</span>
<span id="cb2-12"><a href="#cb2-12" aria-hidden="true" tabindex="-1"></a>        <span class="st">&quot;mix-plugin-github&quot;</span>,</span>
<span id="cb2-13"><a href="#cb2-13" aria-hidden="true" tabindex="-1"></a>        <span class="st">&quot;pandoc&quot;</span>,</span>
<span id="cb2-14"><a href="#cb2-14" aria-hidden="true" tabindex="-1"></a>        <span class="st">&quot;pandoc-types&quot;</span>,</span>
<span id="cb2-15"><a href="#cb2-15" aria-hidden="true" tabindex="-1"></a>        <span class="st">&quot;rio&quot;</span>,</span>
<span id="cb2-16"><a href="#cb2-16" aria-hidden="true" tabindex="-1"></a>        <span class="st">&quot;wreq&quot;</span>,</span>
<span id="cb2-17"><a href="#cb2-17" aria-hidden="true" tabindex="-1"></a>    ],</span>
<span id="cb2-18"><a href="#cb2-18" aria-hidden="true" tabindex="-1"></a>    setup_deps <span class="op">=</span> {</span>
<span id="cb2-19"><a href="#cb2-19" aria-hidden="true" tabindex="-1"></a>        <span class="st">&quot;xml-conduit&quot;</span>: [<span class="st">&quot;cabal-doctest&quot;</span>], <span class="co"># 追記</span></span>
<span id="cb2-20"><a href="#cb2-20" aria-hidden="true" tabindex="-1"></a>    },</span>
<span id="cb2-21"><a href="#cb2-21" aria-hidden="true" tabindex="-1"></a>    local_snapshot <span class="op">=</span> <span class="st">&quot;//:stack-snapshot.yaml&quot;</span>,</span>
<span id="cb2-22"><a href="#cb2-22" aria-hidden="true" tabindex="-1"></a>)</span></code></pre></div>
<p>うまくビルドできました． やったね．</p>
<h2 id="おまけhazell-で対応する">おまけ：hazell で対応する</h2>
<p>ぶっちゃけ，表題の「Bazel で Haskell の Custom Setup をする」に関してはこれでおしまい． Issue もあるので記事にするほどのことでもない（笑）．</p>
<p>ただ，私は <code>stack_snapshot</code> ルールを<a href="https://github.com/matsubara0507/hazell">自作ツール hazell</a> を使って hpack の package.yaml から生成している． しかし，残念ながら <code>setup_deps</code> には対応していないので対応する必要があった（ここからが本題）．</p>
<h1 id="section"></h1>
<p><a href="https://github.com/matsubara0507/hazell/pull/1">作業PRはコチラ</a></p>
<h3 id="dict-型を扱えるようにする">Dict 型を扱えるようにする</h3>
<p>実は，今までの機能であれば <a href="https://docs.bazel.build/versions/main/skylark/lib/globals.html#dict">Dict 型</a>を扱う必要がなかったので未対応だった（WORKSPACE などを読み込むとエラーになる）． まずはここから対応する．</p>
<p>まずは Bazel ルールの引数の型 <code>RuleArg</code> を拡張する：</p>
<div class="sourceCode" id="cb3"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span id="cb3-1"><a href="#cb3-1" aria-hidden="true" tabindex="-1"></a><span class="kw">data</span> <span class="dt">RuleArg</span></span>
<span id="cb3-2"><a href="#cb3-2" aria-hidden="true" tabindex="-1"></a>  <span class="ot">=</span> <span class="dt">RuleArgString</span> <span class="dt">String</span></span>
<span id="cb3-3"><a href="#cb3-3" aria-hidden="true" tabindex="-1"></a>  <span class="op">|</span> <span class="dt">RuleArgBool</span> <span class="dt">Bool</span></span>
<span id="cb3-4"><a href="#cb3-4" aria-hidden="true" tabindex="-1"></a>  <span class="op">|</span> <span class="dt">RuleArgArray</span> [<span class="dt">RuleArg</span>]</span>
<span id="cb3-5"><a href="#cb3-5" aria-hidden="true" tabindex="-1"></a>  <span class="op">|</span> <span class="dt">RuleArgDict</span> (<span class="dt">Map</span> <span class="dt">String</span> <span class="dt">RuleArg</span>) <span class="co">-- 追加</span></span>
<span id="cb3-6"><a href="#cb3-6" aria-hidden="true" tabindex="-1"></a>  <span class="op">|</span> <span class="dt">RuleArgConst</span> <span class="dt">String</span></span>
<span id="cb3-7"><a href="#cb3-7" aria-hidden="true" tabindex="-1"></a>  <span class="op">|</span> <span class="dt">RuleArgGlob</span> <span class="dt">String</span></span></code></pre></div>
<p><code>Map</code> を使うと，元のキーの順番が保持されないが，まぁ本質的には困らないのでとりあえず <code>Map</code> にした． フォーマットするときにモヤモヤしだしたらキーの順番が保持される仕組みを考えることとする．</p>
<p>次にパーサーを追加：</p>
<div class="sourceCode" id="cb4"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span id="cb4-1"><a href="#cb4-1" aria-hidden="true" tabindex="-1"></a><span class="ot">buildRuleArgParser ::</span> <span class="dt">Parser</span> <span class="dt">RuleArg</span></span>
<span id="cb4-2"><a href="#cb4-2" aria-hidden="true" tabindex="-1"></a>buildRuleArgParser</span>
<span id="cb4-3"><a href="#cb4-3" aria-hidden="true" tabindex="-1"></a>    <span class="ot">=</span> buildRuleArgArrayParser</span>
<span id="cb4-4"><a href="#cb4-4" aria-hidden="true" tabindex="-1"></a>  <span class="op">&lt;|&gt;</span> buildRuleArgDictParser  <span class="co">-- 追加</span></span>
<span id="cb4-5"><a href="#cb4-5" aria-hidden="true" tabindex="-1"></a>  <span class="op">&lt;|&gt;</span> buildRuleArgBoolParser</span>
<span id="cb4-6"><a href="#cb4-6" aria-hidden="true" tabindex="-1"></a>   <span class="op">...</span></span>
<span id="cb4-7"><a href="#cb4-7" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb4-8"><a href="#cb4-8" aria-hidden="true" tabindex="-1"></a><span class="co">-- `{ &quot;key&quot; : value, &quot;key&quot; : value }` って感じのをパースしたい</span></span>
<span id="cb4-9"><a href="#cb4-9" aria-hidden="true" tabindex="-1"></a><span class="ot">buildRuleArgDictParser ::</span> <span class="dt">Parser</span> <span class="dt">RuleArg</span></span>
<span id="cb4-10"><a href="#cb4-10" aria-hidden="true" tabindex="-1"></a>buildRuleArgDictParser <span class="ot">=</span> <span class="kw">do</span></span>
<span id="cb4-11"><a href="#cb4-11" aria-hidden="true" tabindex="-1"></a>  char <span class="ch">&#39;{&#39;</span></span>
<span id="cb4-12"><a href="#cb4-12" aria-hidden="true" tabindex="-1"></a>  space</span>
<span id="cb4-13"><a href="#cb4-13" aria-hidden="true" tabindex="-1"></a>  dict <span class="ot">&lt;-</span> buildRuleDictMemberParser <span class="ot">`sepAndEndBy`</span> (comma, space <span class="op">&gt;&gt;</span> char <span class="ch">&#39;}&#39;</span>)</span>
<span id="cb4-14"><a href="#cb4-14" aria-hidden="true" tabindex="-1"></a>  <span class="fu">pure</span> <span class="op">$</span> <span class="dt">RuleArgDict</span> (Map.fromList dict)</span>
<span id="cb4-15"><a href="#cb4-15" aria-hidden="true" tabindex="-1"></a>  <span class="kw">where</span></span>
<span id="cb4-16"><a href="#cb4-16" aria-hidden="true" tabindex="-1"></a><span class="ot">    buildRuleDictMemberParser ::</span> <span class="dt">Parser</span> (<span class="dt">String</span>, <span class="dt">RuleArg</span>)</span>
<span id="cb4-17"><a href="#cb4-17" aria-hidden="true" tabindex="-1"></a>    buildRuleDictMemberParser <span class="ot">=</span> <span class="kw">do</span></span>
<span id="cb4-18"><a href="#cb4-18" aria-hidden="true" tabindex="-1"></a>      key <span class="ot">&lt;-</span> stringLitParser</span>
<span id="cb4-19"><a href="#cb4-19" aria-hidden="true" tabindex="-1"></a>      space</span>
<span id="cb4-20"><a href="#cb4-20" aria-hidden="true" tabindex="-1"></a>      char <span class="ch">&#39;:&#39;</span></span>
<span id="cb4-21"><a href="#cb4-21" aria-hidden="true" tabindex="-1"></a>      space</span>
<span id="cb4-22"><a href="#cb4-22" aria-hidden="true" tabindex="-1"></a>      val <span class="ot">&lt;-</span> buildRuleArgParser</span>
<span id="cb4-23"><a href="#cb4-23" aria-hidden="true" tabindex="-1"></a>      <span class="fu">pure</span> (key, val)</span></code></pre></div>
<p><code>sepAndEndBy</code> コンビネーターは自分で定義しているやつで，名前の通りセパレーターと終端に使うパーサーをそれぞれ指定して繰り返し処理させる．</p>
<p>最後にプリティプリンターを定義して完成：</p>
<div class="sourceCode" id="cb5"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span id="cb5-1"><a href="#cb5-1" aria-hidden="true" tabindex="-1"></a><span class="kw">instance</span> <span class="dt">Pretty</span> <span class="dt">RuleArg</span> <span class="kw">where</span></span>
<span id="cb5-2"><a href="#cb5-2" aria-hidden="true" tabindex="-1"></a>  pretty (<span class="dt">RuleArgString</span> str)  <span class="ot">=</span> fromString (<span class="fu">show</span> str)</span>
<span id="cb5-3"><a href="#cb5-3" aria-hidden="true" tabindex="-1"></a>  pretty (<span class="dt">RuleArgBool</span> <span class="dt">True</span>)   <span class="ot">=</span> <span class="st">&quot;True&quot;</span></span>
<span id="cb5-4"><a href="#cb5-4" aria-hidden="true" tabindex="-1"></a>  <span class="op">...</span></span>
<span id="cb5-5"><a href="#cb5-5" aria-hidden="true" tabindex="-1"></a>  pretty (<span class="dt">RuleArgDict</span> dict)   <span class="ot">=</span> pretteyDict dict <span class="co">-- 追加</span></span>
<span id="cb5-6"><a href="#cb5-6" aria-hidden="true" tabindex="-1"></a>  <span class="op">...</span></span>
<span id="cb5-7"><a href="#cb5-7" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb5-8"><a href="#cb5-8" aria-hidden="true" tabindex="-1"></a><span class="co">-- 要素がある場合は次のように出力したい：</span></span>
<span id="cb5-9"><a href="#cb5-9" aria-hidden="true" tabindex="-1"></a><span class="co">--  hoge = {</span></span>
<span id="cb5-10"><a href="#cb5-10" aria-hidden="true" tabindex="-1"></a><span class="co">--    &quot;key1&quot;: value1,</span></span>
<span id="cb5-11"><a href="#cb5-11" aria-hidden="true" tabindex="-1"></a><span class="co">--    &quot;key2&quot;: value2,</span></span>
<span id="cb5-12"><a href="#cb5-12" aria-hidden="true" tabindex="-1"></a><span class="co">--  }</span></span>
<span id="cb5-13"><a href="#cb5-13" aria-hidden="true" tabindex="-1"></a><span class="ot">pretteyDict ::</span> <span class="dt">Map</span> <span class="dt">String</span> <span class="dt">RuleArg</span> <span class="ot">-&gt;</span> <span class="dt">Doc</span> ann</span>
<span id="cb5-14"><a href="#cb5-14" aria-hidden="true" tabindex="-1"></a>pretteyDict dict <span class="ot">=</span></span>
<span id="cb5-15"><a href="#cb5-15" aria-hidden="true" tabindex="-1"></a>  <span class="kw">if</span> Map.null dict <span class="kw">then</span></span>
<span id="cb5-16"><a href="#cb5-16" aria-hidden="true" tabindex="-1"></a>    <span class="st">&quot;{}&quot;</span></span>
<span id="cb5-17"><a href="#cb5-17" aria-hidden="true" tabindex="-1"></a>  <span class="kw">else</span></span>
<span id="cb5-18"><a href="#cb5-18" aria-hidden="true" tabindex="-1"></a>    vsep [nest <span class="dv">4</span> <span class="op">$</span> vsep (<span class="st">&quot;{&quot;</span> <span class="op">:</span> pretteyDict&#39; dict), <span class="st">&quot;}&quot;</span>]</span>
<span id="cb5-19"><a href="#cb5-19" aria-hidden="true" tabindex="-1"></a>  <span class="kw">where</span></span>
<span id="cb5-20"><a href="#cb5-20" aria-hidden="true" tabindex="-1"></a>    pretteyDict&#39; <span class="ot">=</span> <span class="fu">map</span> (\(k, v) <span class="ot">-&gt;</span> fromString (<span class="fu">show</span> k) <span class="op">&lt;&gt;</span> <span class="st">&quot;: &quot;</span> <span class="op">&lt;&gt;</span> pretty v <span class="op">&lt;&gt;</span> <span class="st">&quot;,&quot;</span>) <span class="op">.</span> Map.toList</span></code></pre></div>
<p>これで hazell に修正した WORKSPACE ファイルを食わしてもパースエラーが起きなくなった． しかし，追記した <code>setup_deps</code> が消えてしまう． 困った．</p>
<h3 id="未定義の引数は残すようにする">未定義の引数は残すようにする</h3>
<p>実は，元の <code>stack_snapshot</code> と新しく生成した <code>stack_snapshot</code> のマージが雑すぎて，新しく生成した <code>stack_snapshot</code> にない引数は消してしまうようになっていた． なので，元の <code>stack_snapshot</code> にある引数はちゃんと保持するようにマージ処理を書き直した：</p>
<div class="sourceCode" id="cb6"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span id="cb6-1"><a href="#cb6-1" aria-hidden="true" tabindex="-1"></a><span class="kw">import</span> <span class="kw">qualified</span> <span class="dt">Data.Map.Merge.Strict</span> <span class="kw">as</span> <span class="dt">Map</span></span>
<span id="cb6-2"><a href="#cb6-2" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb6-3"><a href="#cb6-3" aria-hidden="true" tabindex="-1"></a><span class="ot">mergeRuleArgs ::</span> <span class="dt">BuildContent</span> <span class="ot">-&gt;</span> <span class="dt">Rule</span> <span class="ot">-&gt;</span> <span class="dt">BuildContent</span></span>
<span id="cb6-4"><a href="#cb6-4" aria-hidden="true" tabindex="-1"></a>mergeRuleArgs (<span class="dt">BuildRule</span> name args) rule <span class="ot">=</span></span>
<span id="cb6-5"><a href="#cb6-5" aria-hidden="true" tabindex="-1"></a>  <span class="dt">BuildRule</span> name <span class="op">.</span> Map.toList <span class="op">$</span> Map.merge</span>
<span id="cb6-6"><a href="#cb6-6" aria-hidden="true" tabindex="-1"></a>    Map.preserveMissing</span>
<span id="cb6-7"><a href="#cb6-7" aria-hidden="true" tabindex="-1"></a>    Map.preserveMissing</span>
<span id="cb6-8"><a href="#cb6-8" aria-hidden="true" tabindex="-1"></a>    (Map.zipWithMatched <span class="op">$</span> \_ old new <span class="ot">-&gt;</span> new)</span>
<span id="cb6-9"><a href="#cb6-9" aria-hidden="true" tabindex="-1"></a>    (Map.fromList args)</span>
<span id="cb6-10"><a href="#cb6-10" aria-hidden="true" tabindex="-1"></a>    (Map.fromList <span class="op">$</span> ruleArgs rule)</span>
<span id="cb6-11"><a href="#cb6-11" aria-hidden="true" tabindex="-1"></a>mergeRuleArgs content _ <span class="ot">=</span> content</span></code></pre></div>
<p>1引数目が WORKSPACE ファイルをパースして得た元々の <code>stack_snapshot</code> ルールで，2引数目が package.yaml から生成した新しい <code>stack_snapshot</code> ルール（型が違うのはお気になさらず）． 連想配列の結合にはどうやら <a href="https://hackage.haskell.org/package/containers-0.6.5.1/docs/Data-Map-Merge-Strict.html#v:merge"><code>Data.Map.Merge</code> の <code>merge</code> 関数</a>を利用すると良いらしい（もちろん，もっとパフォーマンスの良いサードパーティパッケージはあるだろうが）． <code>merge</code> 関数は3つの関数を受け取る高階関数である． 型がぱっと見謎（<code>SimpleWhenMissing k a c</code> など）だが，要するに次の3つのケースに関する関数を要求している（<code>merge m1 m2</code>）：</p>
<ol>
<li><code>m1</code> だけ要素があった場合の <code>key -&gt; m1Value -&gt; Maybe newValue</code> な関数</li>
<li><code>m2</code> だけ要素があった場合の <code>key -&gt; m2Value -&gt; Maybe newValue</code> な関数</li>
<li>両方に要素があった場合の <code>key -&gt; m1Value -&gt; m2Value -&gt; Maybe newValue</code> な関数</li>
</ol>
<p>全て最後が <code>Maybe</code> なのは，<code>Nothing</code> の場合はキーそのものを消すためだ． 今回は (1)(2) はヒットした方をそのまま利用し，(3) の場合は新しい方（<code>m2</code>）優先にしたい． ヒットしたのをそのまま使う場合は <code>preserveMissing</code> 関数を使えばよい． <code>zipWithMatched</code> 関数は，前述した <code>Nothing</code> のケースを排除した <code>zip</code> 関数のようなものだ．</p>
<h3 id="cabal-ファイルを集める">Cabal ファイルを集める</h3>
<p>正直，機能的にはここまでで十分だったが，せっかくなので <code>setup_deps</code> も自動生成する方法を実装してみる． Custom Setup の依存パッケージは Cabal ファイルの <code>custom-setup</code> の <code>setup-depends</code> に書いてある． つまり，まずはインダイレクトも含む全ての依存パッケージの Cabal ファイルを集める必要がある（これはなかなか大変）．</p>
<p>現在解析している package.yaml には直接の依存パッケージしか書いてないので依存パッケージの依存パッケージなども含めて列挙する方法を考える． いろいろ試行錯誤した結果，とりあえずは <code>stack ls</code> を使うことにした（Stack も Haskell 製なので，いずれ直接扱えるようにしたい）：</p>
<div class="sourceCode" id="cb7"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span id="cb7-1"><a href="#cb7-1" aria-hidden="true" tabindex="-1"></a><span class="kw">import</span> <span class="dt">RIO.Process</span> (<span class="dt">HasProcessContext</span>, proc, readProcessStdout_, withWorkingDir)</span>
<span id="cb7-2"><a href="#cb7-2" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb7-3"><a href="#cb7-3" aria-hidden="true" tabindex="-1"></a>runStackLs</span>
<span id="cb7-4"><a href="#cb7-4" aria-hidden="true" tabindex="-1"></a><span class="ot">  ::</span> (<span class="dt">HasProcessContext</span> env, <span class="dt">HasLogFunc</span> env, <span class="dt">MonadReader</span> env m, <span class="dt">MonadIO</span> m, <span class="dt">HasCallStack</span>)</span>
<span id="cb7-5"><a href="#cb7-5" aria-hidden="true" tabindex="-1"></a>  <span class="ot">=&gt;</span> <span class="dt">FilePath</span> <span class="ot">-&gt;</span> m [<span class="dt">DotPayload</span>]</span>
<span id="cb7-6"><a href="#cb7-6" aria-hidden="true" tabindex="-1"></a>runStackLs path <span class="ot">=</span> <span class="kw">do</span></span>
<span id="cb7-7"><a href="#cb7-7" aria-hidden="true" tabindex="-1"></a>  out <span class="ot">&lt;-</span> proc <span class="st">&quot;stack&quot;</span> [<span class="st">&quot;ls&quot;</span>, <span class="st">&quot;dependencies&quot;</span>, <span class="st">&quot;json&quot;</span>, <span class="st">&quot;--test&quot;</span>] (withWorkingDir path <span class="op">.</span> readProcessStdout_)</span>
<span id="cb7-8"><a href="#cb7-8" aria-hidden="true" tabindex="-1"></a>  <span class="kw">case</span> JSON.eitherDecode out <span class="kw">of</span></span>
<span id="cb7-9"><a href="#cb7-9" aria-hidden="true" tabindex="-1"></a>    <span class="dt">Left</span> e  <span class="ot">-&gt;</span> logError (displayShow e) <span class="op">&gt;&gt;</span> <span class="fu">pure</span> <span class="fu">mempty</span></span>
<span id="cb7-10"><a href="#cb7-10" aria-hidden="true" tabindex="-1"></a>    <span class="dt">Right</span> a <span class="ot">-&gt;</span> <span class="fu">pure</span> a</span></code></pre></div>
<p>rio を利用して外部コマンドを安全に呼び出すには <a href="https://hackage.haskell.org/package/rio-0.1.20.0/docs/RIO-Process.html"><code>RIO.Process</code> モジュール</a>を使うのだが少しクセがある． 基本は <code>HasProcessContext m</code> 型クラス配下のモナド <code>m</code> で <a href="https://hackage.haskell.org/package/rio-0.1.20.0/docs/RIO-Process.html#v:proc"><code>proc</code> 関数</a>を呼べば良い：</p>
<div class="sourceCode" id="cb8"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span id="cb8-1"><a href="#cb8-1" aria-hidden="true" tabindex="-1"></a>proc</span>
<span id="cb8-2"><a href="#cb8-2" aria-hidden="true" tabindex="-1"></a><span class="ot">  ::</span> (<span class="dt">HasProcessContext</span> env, <span class="dt">HasLogFunc</span> env, <span class="dt">MonadReader</span> env m, <span class="dt">MonadIO</span> m, <span class="dt">HasCallStack</span>)	 </span>
<span id="cb8-3"><a href="#cb8-3" aria-hidden="true" tabindex="-1"></a>  <span class="ot">=&gt;</span> <span class="dt">FilePath</span>	</span>
<span id="cb8-4"><a href="#cb8-4" aria-hidden="true" tabindex="-1"></a>  <span class="ot">-&gt;</span> [<span class="dt">String</span>]	</span>
<span id="cb8-5"><a href="#cb8-5" aria-hidden="true" tabindex="-1"></a>  <span class="ot">-&gt;</span> (<span class="dt">ProcessConfig</span> () () () <span class="ot">-&gt;</span> m a)	 </span>
<span id="cb8-6"><a href="#cb8-6" aria-hidden="true" tabindex="-1"></a>  <span class="ot">-&gt;</span> m a</span></code></pre></div>
<p>1引数目と2引数目が呼び出したいコマンドと与える引数なのだが，問題は3引数目． これは，コマンドを呼び出すプロセスの設定を関数結合な感じで定義している． 例えば今回は，返り値として標準出力が欲しいので <code>readProcessStdout_</code> を使い，加えて実行ディレクトリを変えたいので <code>withWorkingDir</code> も呼んでいる． 他にも Exit Code を返り値にしたり，標準入力を与えたりするコンビネーターが存在する．</p>
<p>で，<code>stack ls</code> の結果は JSON 形式で出力してパースしている． <code>DotPayload</code> 型は <a href="https://github.com/commercialhaskell/stack/blob/v2.7.1/src/Stack/Dot.hs">Stack のコード</a>を呼んで必要なものだけ切り出した型だ． あとは <code>DotPayload</code> から Cabal ファイルを拾ってくる関数を定義するだけ：</p>
<div class="sourceCode" id="cb9"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span id="cb9-1"><a href="#cb9-1" aria-hidden="true" tabindex="-1"></a><span class="kw">type</span> <span class="dt">CabalPackage</span> <span class="ot">=</span> <span class="dt">Cabal.PackageDescription</span></span>
<span id="cb9-2"><a href="#cb9-2" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb9-3"><a href="#cb9-3" aria-hidden="true" tabindex="-1"></a><span class="ot">readCabalFile ::</span> <span class="dt">MonadIO</span> m <span class="ot">=&gt;</span> <span class="dt">DotPayload</span> <span class="ot">-&gt;</span> m (<span class="dt">Maybe</span> (<span class="dt">Either</span> <span class="dt">String</span> <span class="dt">CabalPackage</span>))</span>
<span id="cb9-4"><a href="#cb9-4" aria-hidden="true" tabindex="-1"></a>readCabalFile payload <span class="ot">=</span></span>
<span id="cb9-5"><a href="#cb9-5" aria-hidden="true" tabindex="-1"></a>  <span class="co">-- hackage 以外の場合はいったん未対応</span></span>
<span id="cb9-6"><a href="#cb9-6" aria-hidden="true" tabindex="-1"></a>  <span class="kw">case</span> payloadLocation payload <span class="kw">of</span></span>
<span id="cb9-7"><a href="#cb9-7" aria-hidden="true" tabindex="-1"></a>    (<span class="dt">Just</span> (<span class="dt">PackageLocation</span> <span class="st">&quot;hackage&quot;</span> url)) <span class="ot">-&gt;</span> <span class="kw">do</span></span>
<span id="cb9-8"><a href="#cb9-8" aria-hidden="true" tabindex="-1"></a>      <span class="dt">Just</span> <span class="op">.</span> (parsePackageDescription <span class="op">=&lt;&lt;</span>) <span class="op">&lt;$&gt;</span> get (Text.unpack url <span class="op">++</span> <span class="st">&quot;/&quot;</span> <span class="op">++</span> packageName <span class="op">++</span> <span class="st">&quot;.cabal&quot;</span>)</span>
<span id="cb9-9"><a href="#cb9-9" aria-hidden="true" tabindex="-1"></a>    _ <span class="ot">-&gt;</span></span>
<span id="cb9-10"><a href="#cb9-10" aria-hidden="true" tabindex="-1"></a>      <span class="fu">pure</span> <span class="dt">Nothing</span></span>
<span id="cb9-11"><a href="#cb9-11" aria-hidden="true" tabindex="-1"></a>  <span class="kw">where</span></span>
<span id="cb9-12"><a href="#cb9-12" aria-hidden="true" tabindex="-1"></a>    packageName <span class="ot">=</span> Text.unpack (payloadName payload)</span>
<span id="cb9-13"><a href="#cb9-13" aria-hidden="true" tabindex="-1"></a>    parsePackageDescription b <span class="ot">=</span> <span class="kw">case</span> Cabal.parseGenericPackageDescriptionMaybe b <span class="kw">of</span></span>
<span id="cb9-14"><a href="#cb9-14" aria-hidden="true" tabindex="-1"></a>      <span class="dt">Nothing</span> <span class="ot">-&gt;</span> <span class="dt">Left</span> <span class="op">$</span> <span class="st">&quot;cannnot parse to cabal file &quot;</span> <span class="op">++</span> packageName</span>
<span id="cb9-15"><a href="#cb9-15" aria-hidden="true" tabindex="-1"></a>      <span class="dt">Just</span> p  <span class="ot">-&gt;</span> <span class="dt">Right</span> <span class="op">$</span> Cabal.packageDescription p</span></code></pre></div>
<p>Cabal ファイルは Hackage から引くことができる（例えば <code>https://hackage.haskell.org/package/rio-0.1.20.0/rio.cabal</code> など）． <code>get</code> 関数は req パッケージを使って自分で定義した，いい感じにしただけの GET HTTP リクエストするだけの関数（割愛）で，これを使って取ってきている． <a href="https://hackage.haskell.org/package/Cabal-3.4.0.0/docs/Distribution-PackageDescription-Parsec.html#v:parseGenericPackageDescriptionMaybe">Cabal ファイルのパーサーは Cabal パッケージにある</a>のでそれを利用しているだけだ．</p>
<h3 id="setup_deps-を生成する"><code>setup_deps</code> を生成する</h3>
<p>あとは集めた Cabal ファイルを使って <code>setup_deps</code> を構築するだけだ． Cabal パッケージの関数をそのまま呼ぶことで Custom Setup 用の依存パッケージは集めることができる：</p>
<div class="sourceCode" id="cb10"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span id="cb10-1"><a href="#cb10-1" aria-hidden="true" tabindex="-1"></a><span class="kw">import</span> <span class="kw">qualified</span> <span class="dt">Distribution.Types.Dependency</span>  <span class="kw">as</span> <span class="dt">Cabal</span></span>
<span id="cb10-2"><a href="#cb10-2" aria-hidden="true" tabindex="-1"></a><span class="kw">import</span> <span class="kw">qualified</span> <span class="dt">Distribution.Types.PackageId</span>   <span class="kw">as</span> <span class="dt">Cabal</span></span>
<span id="cb10-3"><a href="#cb10-3" aria-hidden="true" tabindex="-1"></a><span class="kw">import</span> <span class="kw">qualified</span> <span class="dt">Distribution.Types.PackageName</span> <span class="kw">as</span> <span class="dt">Cabal</span></span>
<span id="cb10-4"><a href="#cb10-4" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb10-5"><a href="#cb10-5" aria-hidden="true" tabindex="-1"></a><span class="ot">toSetupDeps ::</span> <span class="dt">CabalPackage</span> <span class="ot">-&gt;</span> [<span class="dt">String</span>]</span>
<span id="cb10-6"><a href="#cb10-6" aria-hidden="true" tabindex="-1"></a>toSetupDeps <span class="ot">=</span></span>
<span id="cb10-7"><a href="#cb10-7" aria-hidden="true" tabindex="-1"></a>  <span class="fu">fmap</span> (Cabal.unPackageName <span class="op">.</span> Cabal.depPkgName) <span class="op">.</span> <span class="fu">maybe</span> [] Cabal.setupDepends <span class="op">.</span> Cabal.setupBuildInfo</span>
<span id="cb10-8"><a href="#cb10-8" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb10-9"><a href="#cb10-9" aria-hidden="true" tabindex="-1"></a><span class="ot">toPackageName ::</span> <span class="dt">CabalPackage</span> <span class="ot">-&gt;</span> <span class="dt">String</span></span>
<span id="cb10-10"><a href="#cb10-10" aria-hidden="true" tabindex="-1"></a>toPackageName <span class="ot">=</span></span>
<span id="cb10-11"><a href="#cb10-11" aria-hidden="true" tabindex="-1"></a>  Cabal.unPackageName <span class="op">.</span> Cabal.pkgName <span class="op">.</span> Cabal.package</span></code></pre></div>
<p>これを雑に <code>setup_deps</code> にしたところ，Cabal パッケージなど不要なのが大量に出てきてしまった． おそらく，<a href="https://downloads.haskell.org/~ghc/8.10.4/docs/html/users_guide/packages.html#using-packages">GHC にデフォルト含まれるパッケージ</a> は <code>setup_deps</code> に指定する必要がない気がするので弾くようにした：</p>
<div class="sourceCode" id="cb11"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span id="cb11-1"><a href="#cb11-1" aria-hidden="true" tabindex="-1"></a><span class="ot">buildSetupDeps ::</span> [<span class="dt">CabalPackage</span>] <span class="ot">-&gt;</span> [(<span class="dt">Maybe</span> [<span class="dt">Char</span>], <span class="dt">RuleArg</span>)]</span>
<span id="cb11-2"><a href="#cb11-2" aria-hidden="true" tabindex="-1"></a>buildSetupDeps cabals <span class="ot">=</span></span>
<span id="cb11-3"><a href="#cb11-3" aria-hidden="true" tabindex="-1"></a>  <span class="kw">case</span> [(Cabal.toPackageName c, <span class="dt">RuleArgArray</span> ds) <span class="op">|</span> c <span class="ot">&lt;-</span> cabals, <span class="kw">let</span> ds <span class="ot">=</span> toSetupDepsArg c, <span class="fu">not</span> (<span class="fu">null</span> ds)] <span class="kw">of</span></span>
<span id="cb11-4"><a href="#cb11-4" aria-hidden="true" tabindex="-1"></a>    [] <span class="ot">-&gt;</span></span>
<span id="cb11-5"><a href="#cb11-5" aria-hidden="true" tabindex="-1"></a>      []</span>
<span id="cb11-6"><a href="#cb11-6" aria-hidden="true" tabindex="-1"></a>    deps <span class="ot">-&gt;</span></span>
<span id="cb11-7"><a href="#cb11-7" aria-hidden="true" tabindex="-1"></a>      [(<span class="dt">Just</span> <span class="st">&quot;setup_deps&quot;</span>, <span class="dt">RuleArgDict</span> <span class="op">$</span> Map.fromList deps)]</span>
<span id="cb11-8"><a href="#cb11-8" aria-hidden="true" tabindex="-1"></a>  <span class="kw">where</span></span>
<span id="cb11-9"><a href="#cb11-9" aria-hidden="true" tabindex="-1"></a>    toSetupDepsArg <span class="ot">=</span> <span class="fu">fmap</span> <span class="dt">RuleArgString</span> <span class="op">.</span> <span class="fu">filter</span> (<span class="fu">not</span> <span class="op">.</span> (<span class="ot">`elem`</span> ghcPkgs)) <span class="op">.</span> Cabal.toSetupDeps</span>
<span id="cb11-10"><a href="#cb11-10" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb11-11"><a href="#cb11-11" aria-hidden="true" tabindex="-1"></a><span class="ot">ghcPkgs ::</span> [<span class="dt">String</span>]</span>
<span id="cb11-12"><a href="#cb11-12" aria-hidden="true" tabindex="-1"></a>ghcPkgs <span class="ot">=</span> [<span class="st">&quot;Cabal&quot;</span>, <span class="op">...</span> ]</span></code></pre></div>
<p>これで無事完成．</p>
<h2 id="おしまい">おしまい</h2>
<p>ちなみに，全ての Cabal ファイルを集めて <code>setup_deps</code> を構築するのはそこそこ時間がかかるため，するかしないかをフラグで制御できるようにしてる． Hackage にある Cabal ファイルはパッケージのバージョン毎に（たぶん）不変なのでローカルにキャッシュする方法を用意したいね．</p>]]></content>
    </entry>
    <entry>
        <title>ここを Hakyll から Slick に移行してみた</title>
        <link href="https://matsubara0507.github.io/posts/2021-06-13-my-site-use-slick.html"/>
        <id>https://matsubara0507.github.io/posts/2021-06-13-my-site-use-slick.html</id>
        <published>2021-06-13T00:00:00Z</published>
        <updated>2021-06-13T00:00:00Z</updated>
        <category term="site"/>
        <category term="Haskell"/>
        <content type="html"><![CDATA[<p>特に深い理由はないですが，新しいツールを触ってみようかと思い変えてみました。</p>
<h2 id="slick">Slick</h2>
<p><a href="https://github.com/ChrisPenner/slick">Slick</a> は Hakyll と同じような Haskell 製の静的サイトジェネレーターで，サイトの生成方法自体を自身でプログラミングする． <a href="https://github.com/ChrisPenner/slick#another-static-site-generator-what-about-hakylljekyll">GitHub の README 曰く</a>，Hakyll はモナドに隠蔽されすぎてよくわからないから，もっとわかりやすいのを作った（超意訳）だそうだ． 実際，両方同じようなコードを書いてみた感じ，確かに Slick の方がわかりやすい（シンプル）．</p>
<p>Slick は内部的な処理の多くを外部パッケージに委ねている：</p>
<ul>
<li>ビルドシステムには <a href="https://shakebuild.com/">Shake</a> を利用している（提供するサブコマンドやビルド結果のキャッシュなど）</li>
<li>Markdown から HTML への変換は <a href="https://hackage.haskell.org/package/pandoc">Pandoc</a> を利用している（Hakyll と同じ）</li>
<li>テンプレートのレンダリングには <a href="https://hackage.haskell.org/package/mustache">Mustache</a> を利用している</li>
</ul>
<p>それぞれについては，あまり詳しいことを僕は知らないので，ここでは解説しません．</p>
<h2 id="カスタマイズする">カスタマイズする</h2>
<p>Slick の作者は <a href="https://github.com/ChrisPenner/slick-template">ChrisPenner/slick-template</a> というテンプレートリポジトリを用意しているので，これをベースにカスタマイズしていく． 正直なところ，半分は元の Hakyll でのテンプレートを再現するため．</p>
<h3 id="extensible-レコード">extensible レコード</h3>
<p>まずはいきなりテンプレートの再現ではないやつ．</p>
<p>slick-template で使っていたレコード型を extensible レコードに置き換える． 例えば：</p>
<div class="sourceCode" id="cb1"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span id="cb1-1"><a href="#cb1-1" aria-hidden="true" tabindex="-1"></a><span class="kw">type</span> <span class="dt">SiteMeta</span> <span class="ot">=</span> <span class="dt">Record</span></span>
<span id="cb1-2"><a href="#cb1-2" aria-hidden="true" tabindex="-1"></a>  &#39;[ <span class="st">&quot;siteTitle&quot;</span>   <span class="op">&gt;:</span> <span class="dt">String</span></span>
<span id="cb1-3"><a href="#cb1-3" aria-hidden="true" tabindex="-1"></a>   , <span class="st">&quot;domain&quot;</span>      <span class="op">&gt;:</span> <span class="dt">String</span></span>
<span id="cb1-4"><a href="#cb1-4" aria-hidden="true" tabindex="-1"></a>   , <span class="st">&quot;author&quot;</span>      <span class="op">&gt;:</span> <span class="dt">String</span></span>
<span id="cb1-5"><a href="#cb1-5" aria-hidden="true" tabindex="-1"></a>   , <span class="st">&quot;description&quot;</span> <span class="op">&gt;:</span> <span class="dt">String</span></span>
<span id="cb1-6"><a href="#cb1-6" aria-hidden="true" tabindex="-1"></a>   , <span class="st">&quot;twitter&quot;</span>     <span class="op">&gt;:</span> <span class="dt">Maybe</span> <span class="dt">String</span></span>
<span id="cb1-7"><a href="#cb1-7" aria-hidden="true" tabindex="-1"></a>   , <span class="st">&quot;github&quot;</span>      <span class="op">&gt;:</span> <span class="dt">Maybe</span> <span class="dt">String</span></span>
<span id="cb1-8"><a href="#cb1-8" aria-hidden="true" tabindex="-1"></a>   ]</span>
<span id="cb1-9"><a href="#cb1-9" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb1-10"><a href="#cb1-10" aria-hidden="true" tabindex="-1"></a><span class="kw">type</span> <span class="dt">Post</span> <span class="ot">=</span> <span class="dt">Record</span> (&#39;[ <span class="st">&quot;date&quot;</span> <span class="op">&gt;:</span> <span class="dt">String</span>, <span class="st">&quot;url&quot;</span> <span class="op">&gt;:</span> <span class="dt">String</span> ] <span class="op">++</span> <span class="dt">FrontMatterParams</span>)</span>
<span id="cb1-11"><a href="#cb1-11" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb1-12"><a href="#cb1-12" aria-hidden="true" tabindex="-1"></a><span class="kw">type</span> <span class="dt">FrontMatterParams</span> <span class="ot">=</span></span>
<span id="cb1-13"><a href="#cb1-13" aria-hidden="true" tabindex="-1"></a>  &#39;[ <span class="st">&quot;title&quot;</span>   <span class="op">&gt;:</span> <span class="dt">String</span></span>
<span id="cb1-14"><a href="#cb1-14" aria-hidden="true" tabindex="-1"></a>   , <span class="st">&quot;tags&quot;</span>    <span class="op">&gt;:</span> [<span class="dt">Tag</span>]</span>
<span id="cb1-15"><a href="#cb1-15" aria-hidden="true" tabindex="-1"></a>   , <span class="st">&quot;image&quot;</span>   <span class="op">&gt;:</span> <span class="dt">Maybe</span> <span class="dt">String</span></span>
<span id="cb1-16"><a href="#cb1-16" aria-hidden="true" tabindex="-1"></a>   , <span class="st">&quot;content&quot;</span> <span class="op">&gt;:</span> <span class="dt">String</span></span>
<span id="cb1-17"><a href="#cb1-17" aria-hidden="true" tabindex="-1"></a>   ]</span></code></pre></div>
<p>フロントマターの部分だけ分けてるのは後述．</p>
<p>extensible を使うのに利点はあって，slick-template では <code>substitute</code> に渡す <code>ToMustache k</code> の値を結合するときに aeson の <code>Value</code> 型に変換して無理やり足しているが，extensible レコードであれば <code>happend</code> だけですむ． 無論このためには extensible レコードを <code>ToMustache</code> 型クラスのインスタンスにする必要がある：</p>
<div class="sourceCode" id="cb2"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span id="cb2-1"><a href="#cb2-1" aria-hidden="true" tabindex="-1"></a><span class="kw">deriving</span> <span class="kw">instance</span> <span class="dt">ToMustache</span> (h (<span class="dt">TargetOf</span> kv)) <span class="ot">=&gt;</span> <span class="dt">ToMustache</span> (<span class="dt">Field</span> h kv)</span>
<span id="cb2-2"><a href="#cb2-2" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb2-3"><a href="#cb2-3" aria-hidden="true" tabindex="-1"></a><span class="kw">deriving</span> <span class="kw">instance</span> <span class="dt">ToMustache</span> a <span class="ot">=&gt;</span> <span class="dt">ToMustache</span> (<span class="dt">Identity</span> a)</span>
<span id="cb2-4"><a href="#cb2-4" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb2-5"><a href="#cb2-5" aria-hidden="true" tabindex="-1"></a><span class="kw">instance</span> <span class="dt">Forall</span> (<span class="dt">KeyTargetAre</span> <span class="dt">KnownSymbol</span> (<span class="dt">Instance1</span> <span class="dt">ToMustache</span> h)) xs <span class="ot">=&gt;</span> <span class="dt">ToMustache</span> (xs <span class="op">:&amp;</span> <span class="dt">Field</span> h) <span class="kw">where</span></span>
<span id="cb2-6"><a href="#cb2-6" aria-hidden="true" tabindex="-1"></a>  toMustache <span class="ot">=</span> <span class="dt">Object</span> <span class="op">.</span> hfoldlWithIndexFor</span>
<span id="cb2-7"><a href="#cb2-7" aria-hidden="true" tabindex="-1"></a>    (<span class="dt">Proxy</span> <span class="op">@</span> (<span class="dt">KeyTargetAre</span> <span class="dt">KnownSymbol</span> (<span class="dt">Instance1</span> <span class="dt">ToMustache</span> h)))</span>
<span id="cb2-8"><a href="#cb2-8" aria-hidden="true" tabindex="-1"></a>    (\k m v <span class="ot">-&gt;</span> HM.insert (stringKeyOf k) (toMustache v) m)</span>
<span id="cb2-9"><a href="#cb2-9" aria-hidden="true" tabindex="-1"></a>    HM.empty</span></code></pre></div>
<p>また，Shake のキャッシュ（<code>cacheAction</code>）を利用するには生成物の型（例えば <code>Post</code>）が <code>Binary</code> 型クラスのインスタンスになってないといけない：</p>
<div class="sourceCode" id="cb3"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span id="cb3-1"><a href="#cb3-1" aria-hidden="true" tabindex="-1"></a><span class="kw">deriving</span> <span class="kw">instance</span> <span class="dt">Binary</span> (h (<span class="dt">TargetOf</span> kv)) <span class="ot">=&gt;</span> <span class="dt">Binary</span> (<span class="dt">Field</span> h kv)</span>
<span id="cb3-2"><a href="#cb3-2" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb3-3"><a href="#cb3-3" aria-hidden="true" tabindex="-1"></a><span class="kw">instance</span> <span class="dt">Forall</span> (<span class="dt">KeyTargetAre</span> <span class="dt">KnownSymbol</span> (<span class="dt">Instance1</span> <span class="dt">Binary</span> h)) xs <span class="ot">=&gt;</span> <span class="dt">Binary</span> (xs <span class="op">:&amp;</span> <span class="dt">Field</span> h) <span class="kw">where</span></span>
<span id="cb3-4"><a href="#cb3-4" aria-hidden="true" tabindex="-1"></a>    get <span class="ot">=</span> hgenerateFor</span>
<span id="cb3-5"><a href="#cb3-5" aria-hidden="true" tabindex="-1"></a>      (<span class="dt">Proxy</span> <span class="op">@</span> (<span class="dt">KeyTargetAre</span> <span class="dt">KnownSymbol</span> (<span class="dt">Instance1</span> <span class="dt">Binary</span> h)))</span>
<span id="cb3-6"><a href="#cb3-6" aria-hidden="true" tabindex="-1"></a>      (<span class="fu">const</span> Binary.get)</span>
<span id="cb3-7"><a href="#cb3-7" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb3-8"><a href="#cb3-8" aria-hidden="true" tabindex="-1"></a>    put <span class="ot">=</span> <span class="fu">flip</span> appEndo (<span class="fu">return</span> ()) <span class="op">.</span> hfoldMap getConst <span class="op">.</span></span>
<span id="cb3-9"><a href="#cb3-9" aria-hidden="true" tabindex="-1"></a>      hzipWith</span>
<span id="cb3-10"><a href="#cb3-10" aria-hidden="true" tabindex="-1"></a>        (\(<span class="dt">Comp</span> <span class="dt">Dict</span>) x <span class="ot">-&gt;</span> <span class="dt">Const</span> <span class="op">$</span> <span class="dt">Endo</span> <span class="op">$</span> (Binary.put x <span class="op">&gt;&gt;</span>))</span>
<span id="cb3-11"><a href="#cb3-11" aria-hidden="true" tabindex="-1"></a>        (<span class="ot">library ::</span> xs <span class="op">:&amp;</span> <span class="dt">Comp</span> <span class="dt">Dict</span> (<span class="dt">KeyTargetAre</span> <span class="dt">KnownSymbol</span> (<span class="dt">Instance1</span> <span class="dt">Binary</span> h)))</span></code></pre></div>
<p>これは<a href="https://github.com/fumieval/extensible/commit/d6e067e805f92a7c336fd4cc68042985ee13e6b8">過去に extensible 本体にあったインスタンス</a>を参考にした（今は実装されてない，理由は知らない）． 一応 <a href="https://hackage.haskell.org/package/binary-0.8.8.0/docs/Data-Binary.html#t:Binary"><code>decode . encode == id</code> という性質</a>は満たしているっぽいので大丈夫だろう．</p>
<h1 id="section"></h1>
<p>さて，例えば以上を踏まえて <code>buildPost</code> を書き換えると次のようになった（<a href="https://github.com/ChrisPenner/slick-template/blob/129b85152a481db19efc5e65e80b55a52af4a985/app/Main.hs#L100-L112">元はこんな感じ</a>）：</p>
<div class="sourceCode" id="cb4"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span id="cb4-1"><a href="#cb4-1" aria-hidden="true" tabindex="-1"></a><span class="ot">buildPost ::</span> <span class="dt">FilePath</span> <span class="ot">-&gt;</span> <span class="dt">Action</span> <span class="dt">Post</span></span>
<span id="cb4-2"><a href="#cb4-2" aria-hidden="true" tabindex="-1"></a>buildPost srcPath <span class="ot">=</span> cacheAction (<span class="st">&quot;build&quot;</span><span class="ot"> ::</span> <span class="dt">T.Text</span>, srcPath) <span class="op">$</span> <span class="kw">do</span></span>
<span id="cb4-3"><a href="#cb4-3" aria-hidden="true" tabindex="-1"></a>  postContent <span class="ot">&lt;-</span> readFile&#39; srcPath</span>
<span id="cb4-4"><a href="#cb4-4" aria-hidden="true" tabindex="-1"></a>  postData    <span class="ot">&lt;-</span> markdownToHTML&#39; <span class="op">@</span>(<span class="dt">Record</span> <span class="dt">FrontMatterParams</span>) (T.pack postContent)</span>
<span id="cb4-5"><a href="#cb4-5" aria-hidden="true" tabindex="-1"></a>  <span class="kw">let</span> postUrl   <span class="ot">=</span> dropDirectory1 (srcPath <span class="op">-&lt;.&gt;</span> <span class="st">&quot;html&quot;</span>)</span>
<span id="cb4-6"><a href="#cb4-6" aria-hidden="true" tabindex="-1"></a>      postData&#39; <span class="ot">=</span> happend siteMeta <span class="op">$</span> <span class="op">#</span>url <span class="op">@=</span> postUrl <span class="op">&lt;:</span> <span class="op">#</span>date <span class="op">@=</span> <span class="st">&quot;...&quot;</span> <span class="op">&lt;:</span> postData</span>
<span id="cb4-7"><a href="#cb4-7" aria-hidden="true" tabindex="-1"></a>  template <span class="ot">&lt;-</span> compileTemplate&#39; <span class="st">&quot;site/templates/post.html&quot;</span></span>
<span id="cb4-8"><a href="#cb4-8" aria-hidden="true" tabindex="-1"></a>  writeFile&#39; (outputFolder <span class="op">&lt;/&gt;</span> postUrl) <span class="op">$</span> T.unpack (substitute template postData&#39;)</span>
<span id="cb4-9"><a href="#cb4-9" aria-hidden="true" tabindex="-1"></a>  convert postData&#39;</span></code></pre></div>
<p>日付（<code>date</code> フィールド）については後述． <code>markdownToHTML' :: FromJSON a =&gt; Text -&gt; Action a</code> は本文を Markdown から HTML に変換して型 <code>a</code> の <code>content</code> フィールドへ格納し，残りのフィールドをフロントマターとしてパースする． <code>TypeApplication</code> 言語拡張でフロントマターの型を明記してるのは，具体的な型がはっきりしていないと <code>happend</code> できないからだ． ちなみに，今回定義した <code>FrontMatterParams</code> 型はタイトルとタグとサムネイル用画像をフロントマターとして与えている．</p>
<h3 id="記事のパスから投稿日を出す">記事のパスから投稿日を出す</h3>
<p>slick-template では投稿日をフロントマターで指定していたが，このサイトでは記事のパス（<code>YYYY/MM-DD-name.md</code>）で指定していた． なので，そのような動作をするように修正する：</p>
<div class="sourceCode" id="cb5"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span id="cb5-1"><a href="#cb5-1" aria-hidden="true" tabindex="-1"></a><span class="ot">buildPost ::</span> <span class="dt">FilePath</span> <span class="ot">-&gt;</span> <span class="dt">Action</span> <span class="dt">Post</span></span>
<span id="cb5-2"><a href="#cb5-2" aria-hidden="true" tabindex="-1"></a>buildPost srcPath <span class="ot">=</span> cacheAction (<span class="st">&quot;build&quot;</span><span class="ot"> ::</span> <span class="dt">T.Text</span>, srcPath) <span class="op">$</span> <span class="kw">do</span></span>
<span id="cb5-3"><a href="#cb5-3" aria-hidden="true" tabindex="-1"></a>  postContent <span class="ot">&lt;-</span> readFile&#39; srcPath</span>
<span id="cb5-4"><a href="#cb5-4" aria-hidden="true" tabindex="-1"></a>  postData    <span class="ot">&lt;-</span> markdownToHTML&#39; <span class="op">@</span>(<span class="dt">Record</span> <span class="dt">FrontMatterParams</span>) (T.pack postContent)</span>
<span id="cb5-5"><a href="#cb5-5" aria-hidden="true" tabindex="-1"></a>      <span class="co">-- YYYY/MM-DD-name.md から YYYY-MM-DD-name.html にしている </span></span>
<span id="cb5-6"><a href="#cb5-6" aria-hidden="true" tabindex="-1"></a>  <span class="kw">let</span> postUrl   <span class="ot">=</span> dropDirectory1 (takeDirectory srcPath <span class="op">&lt;&gt;</span> <span class="st">&quot;-&quot;</span> <span class="op">&lt;&gt;</span> takeFileName srcPath <span class="op">-&lt;.&gt;</span> <span class="st">&quot;html&quot;</span>)</span>
<span id="cb5-7"><a href="#cb5-7" aria-hidden="true" tabindex="-1"></a>      postData&#39; <span class="ot">=</span> happend siteMeta <span class="op">$</span> <span class="op">#</span>url <span class="op">@=</span> postUrl <span class="op">&lt;:</span> <span class="op">#</span>date <span class="op">@=</span> formatToHumanDate srcPath <span class="op">&lt;:</span> postData</span>
<span id="cb5-8"><a href="#cb5-8" aria-hidden="true" tabindex="-1"></a>  <span class="op">...</span> <span class="co">-- 割愛</span></span>
<span id="cb5-9"><a href="#cb5-9" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb5-10"><a href="#cb5-10" aria-hidden="true" tabindex="-1"></a><span class="ot">formatToHumanDate ::</span> <span class="dt">FilePath</span> <span class="ot">-&gt;</span> <span class="dt">String</span></span>
<span id="cb5-11"><a href="#cb5-11" aria-hidden="true" tabindex="-1"></a>formatToHumanDate p <span class="ot">=</span> formatTime defaultTimeLocale <span class="st">&quot;%b %e, %Y&quot;</span> parsedTime</span>
<span id="cb5-12"><a href="#cb5-12" aria-hidden="true" tabindex="-1"></a>  <span class="kw">where</span></span>
<span id="cb5-13"><a href="#cb5-13" aria-hidden="true" tabindex="-1"></a>    parsedTime <span class="ot">=</span> parseTimeOrError <span class="dt">True</span> defaultTimeLocale <span class="st">&quot;%Y-%m-%d&quot;</span> (year <span class="op">&lt;&gt;</span> <span class="st">&quot;-&quot;</span> <span class="op">&lt;&gt;</span> date)<span class="ot"> ::</span> <span class="dt">UTCTime</span></span>
<span id="cb5-14"><a href="#cb5-14" aria-hidden="true" tabindex="-1"></a>    date <span class="ot">=</span> <span class="fu">take</span> <span class="dv">5</span> <span class="op">$</span> takeFileName p</span>
<span id="cb5-15"><a href="#cb5-15" aria-hidden="true" tabindex="-1"></a>    year <span class="ot">=</span> takeFileName <span class="op">$</span> takeDirectory p</span></code></pre></div>
<p>ちなみに，このパス操作系の関数は <code>Development.Shake.FilePath</code> にあるのを利用している．</p>
<h3 id="ページネーション">ページネーション</h3>
<p>slick-template では，記事の一覧がインデックスページにズラーっといくらでも並ぶようになっている． これを10記事ぐらいずつに分けて表示できるようにする：</p>
<div class="sourceCode" id="cb6"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span id="cb6-1"><a href="#cb6-1" aria-hidden="true" tabindex="-1"></a><span class="ot">buildArchive ::</span> [<span class="dt">Post</span>] <span class="ot">-&gt;</span> <span class="dt">Action</span> ()</span>
<span id="cb6-2"><a href="#cb6-2" aria-hidden="true" tabindex="-1"></a>buildArchive posts <span class="ot">=</span> <span class="kw">do</span></span>
<span id="cb6-3"><a href="#cb6-3" aria-hidden="true" tabindex="-1"></a>  archiveT <span class="ot">&lt;-</span> compileTemplate&#39; <span class="st">&quot;site/templates/archive.html&quot;</span></span>
<span id="cb6-4"><a href="#cb6-4" aria-hidden="true" tabindex="-1"></a>  <span class="co">-- posts が古い順なので reverse している</span></span>
<span id="cb6-5"><a href="#cb6-5" aria-hidden="true" tabindex="-1"></a>  buildWithPagenation archiveT siteMeta (<span class="fu">reverse</span> posts) (outputFolder <span class="op">&lt;/&gt;</span> <span class="st">&quot;archive&quot;</span>)</span>
<span id="cb6-6"><a href="#cb6-6" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb6-7"><a href="#cb6-7" aria-hidden="true" tabindex="-1"></a>buildWithPagenation</span>
<span id="cb6-8"><a href="#cb6-8" aria-hidden="true" tabindex="-1"></a><span class="ot">  ::</span> <span class="dt">Forall</span> (<span class="dt">KeyTargetAre</span> <span class="dt">KnownSymbol</span> (<span class="dt">Instance1</span> <span class="dt">ToMustache</span> <span class="dt">Identity</span>)) (xs <span class="op">++</span> <span class="dt">PagenationInfoParams</span>)</span>
<span id="cb6-9"><a href="#cb6-9" aria-hidden="true" tabindex="-1"></a>  <span class="ot">=&gt;</span> <span class="dt">Template</span></span>
<span id="cb6-10"><a href="#cb6-10" aria-hidden="true" tabindex="-1"></a>  <span class="ot">-&gt;</span> (xs <span class="op">:&amp;</span> <span class="dt">Field</span> <span class="dt">Identity</span>)</span>
<span id="cb6-11"><a href="#cb6-11" aria-hidden="true" tabindex="-1"></a>  <span class="ot">-&gt;</span> [<span class="dt">Post</span>]</span>
<span id="cb6-12"><a href="#cb6-12" aria-hidden="true" tabindex="-1"></a>  <span class="ot">-&gt;</span> <span class="dt">FilePath</span></span>
<span id="cb6-13"><a href="#cb6-13" aria-hidden="true" tabindex="-1"></a>  <span class="ot">-&gt;</span> <span class="dt">Action</span> ()</span>
<span id="cb6-14"><a href="#cb6-14" aria-hidden="true" tabindex="-1"></a>buildWithPagenation t r posts dir <span class="ot">=</span> go <span class="dv">1</span> posts</span>
<span id="cb6-15"><a href="#cb6-15" aria-hidden="true" tabindex="-1"></a>  <span class="kw">where</span></span>
<span id="cb6-16"><a href="#cb6-16" aria-hidden="true" tabindex="-1"></a>    pageSize <span class="ot">=</span> <span class="dv">10</span></span>
<span id="cb6-17"><a href="#cb6-17" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb6-18"><a href="#cb6-18" aria-hidden="true" tabindex="-1"></a><span class="ot">    go ::</span> <span class="dt">Int</span> <span class="ot">-&gt;</span> [<span class="dt">Post</span>] <span class="ot">-&gt;</span> <span class="dt">Action</span> ()</span>
<span id="cb6-19"><a href="#cb6-19" aria-hidden="true" tabindex="-1"></a>    go _ [] <span class="ot">=</span> <span class="fu">pure</span> ()</span>
<span id="cb6-20"><a href="#cb6-20" aria-hidden="true" tabindex="-1"></a>    go n posts&#39; <span class="ot">=</span> <span class="kw">do</span></span>
<span id="cb6-21"><a href="#cb6-21" aria-hidden="true" tabindex="-1"></a>      <span class="kw">let</span> info <span class="ot">=</span> <span class="op">#</span>posts <span class="op">@=</span> <span class="fu">take</span> pageSize posts&#39;</span>
<span id="cb6-22"><a href="#cb6-22" aria-hidden="true" tabindex="-1"></a>              <span class="op">&lt;:</span> <span class="op">#</span>prevPageNum <span class="op">@=</span> guarded (<span class="op">&gt;</span> <span class="dv">0</span>) (n <span class="op">-</span> <span class="dv">1</span>)</span>
<span id="cb6-23"><a href="#cb6-23" aria-hidden="true" tabindex="-1"></a>              <span class="op">&lt;:</span> <span class="op">#</span>nextPageNum <span class="op">@=</span> guarded (<span class="fu">const</span> <span class="op">$</span> <span class="fu">length</span> posts&#39; <span class="op">&gt;</span> pageSize) (n <span class="op">+</span> <span class="dv">1</span>)</span>
<span id="cb6-24"><a href="#cb6-24" aria-hidden="true" tabindex="-1"></a>              <span class="op">&lt;:</span> nil</span>
<span id="cb6-25"><a href="#cb6-25" aria-hidden="true" tabindex="-1"></a>      writeFile&#39; (dir <span class="op">&lt;/&gt;</span> <span class="fu">show</span> n <span class="op">-&lt;.&gt;</span> <span class="st">&quot;html&quot;</span>) <span class="op">$</span> T.unpack (substitute t <span class="op">$</span> happend r info)</span>
<span id="cb6-26"><a href="#cb6-26" aria-hidden="true" tabindex="-1"></a>      go (n <span class="op">+</span> <span class="dv">1</span>) (<span class="fu">drop</span> pageSize posts&#39;)</span>
<span id="cb6-27"><a href="#cb6-27" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb6-28"><a href="#cb6-28" aria-hidden="true" tabindex="-1"></a><span class="ot">    guarded ::</span> (a <span class="ot">-&gt;</span> <span class="dt">Bool</span>) <span class="ot">-&gt;</span> a <span class="ot">-&gt;</span> <span class="dt">Maybe</span> a</span>
<span id="cb6-29"><a href="#cb6-29" aria-hidden="true" tabindex="-1"></a>    guarded p a <span class="ot">=</span> <span class="kw">if</span> p a <span class="kw">then</span> <span class="dt">Just</span> a <span class="kw">else</span> <span class="dt">Nothing</span></span></code></pre></div>
<p><code>buildWithPagenation</code> がページネーションしてくれる本体で，あとでタグページでも利用したいので別関数に切り出している． 単純に <code>posts</code> を分割するだけではダメで，現在と前後のページ番号をテンプレートに渡してあげる必要がある． そのために簡単な再帰処理をしている．</p>
<p>ちなみに，<code>buildWithPagenation</code> の型が仰々しいのは <code>happend</code> するメタデータを任意の extensible レコードにしたかったからだ． 型パズルに悩んだ結果，型を書かないときに <a href="https://github.com/haskell/haskell-language-server">HLS</a> がサジェストしてくれた型をそのまま書いたら通った（パズルできてないじゃん）． HLS 最高．</p>
<h3 id="タグページ">タグページ</h3>
<p>slick-template では，タグをフロントマターに記述できるようになってはいるものの，タグページはないので自作した：</p>
<div class="sourceCode" id="cb7"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span id="cb7-1"><a href="#cb7-1" aria-hidden="true" tabindex="-1"></a><span class="ot">buildTagPages ::</span> [<span class="dt">Post</span>] <span class="ot">-&gt;</span> <span class="dt">Action</span> [(<span class="dt">Tag</span>, <span class="dt">Int</span>)]</span>
<span id="cb7-2"><a href="#cb7-2" aria-hidden="true" tabindex="-1"></a>buildTagPages posts <span class="ot">=</span> <span class="kw">do</span></span>
<span id="cb7-3"><a href="#cb7-3" aria-hidden="true" tabindex="-1"></a>  tagT <span class="ot">&lt;-</span> compileTemplate&#39; <span class="st">&quot;site/templates/tags.html&quot;</span></span>
<span id="cb7-4"><a href="#cb7-4" aria-hidden="true" tabindex="-1"></a>  forM (groupByTag posts) <span class="op">$</span> \(tag, posts&#39;) <span class="ot">-&gt;</span> <span class="kw">do</span></span>
<span id="cb7-5"><a href="#cb7-5" aria-hidden="true" tabindex="-1"></a>    buildWithPagenation tagT (<span class="op">#</span>tag <span class="op">@=</span> tag <span class="op">&lt;:</span> siteMeta) posts&#39; (outputFolder <span class="op">&lt;/&gt;</span> <span class="st">&quot;tags&quot;</span> <span class="op">&lt;/&gt;</span> tag)</span>
<span id="cb7-6"><a href="#cb7-6" aria-hidden="true" tabindex="-1"></a>    <span class="fu">pure</span> (tag, <span class="fu">length</span> posts&#39;)</span>
<span id="cb7-7"><a href="#cb7-7" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb7-8"><a href="#cb7-8" aria-hidden="true" tabindex="-1"></a><span class="ot">groupByTag ::</span> [<span class="dt">Post</span>] <span class="ot">-&gt;</span> [(<span class="dt">Tag</span>, [<span class="dt">Post</span>])]</span>
<span id="cb7-9"><a href="#cb7-9" aria-hidden="true" tabindex="-1"></a>groupByTag <span class="ot">=</span> HML.toList <span class="op">.</span> <span class="fu">foldl</span> go <span class="fu">mempty</span></span>
<span id="cb7-10"><a href="#cb7-10" aria-hidden="true" tabindex="-1"></a>  <span class="kw">where</span></span>
<span id="cb7-11"><a href="#cb7-11" aria-hidden="true" tabindex="-1"></a><span class="ot">    go ::</span> <span class="dt">HML.HashMap</span> <span class="dt">Tag</span> [<span class="dt">Post</span>] <span class="ot">-&gt;</span> <span class="dt">Post</span> <span class="ot">-&gt;</span> <span class="dt">HML.HashMap</span> <span class="dt">Tag</span> [<span class="dt">Post</span>]</span>
<span id="cb7-12"><a href="#cb7-12" aria-hidden="true" tabindex="-1"></a>    go acc post <span class="ot">=</span></span>
<span id="cb7-13"><a href="#cb7-13" aria-hidden="true" tabindex="-1"></a>      <span class="fu">foldl</span> (\acc&#39; tag <span class="ot">-&gt;</span> HML.insertWith (<span class="op">++</span>) tag [post] acc&#39;) acc (post <span class="op">^.</span> <span class="op">#</span>tags)</span></code></pre></div>
<p>前述したとおり，こっちでも <code>buildWithPagenation</code> を使っているが，<code>siteMeta</code> の他にタグの情報もテンプレートに渡したかったので仰々しい型にしたのだ． <code>buildTagPages</code> がタグ情報を返しているのはインデックスページに <a href="https://hackage.haskell.org/package/hakyll-4.14.0.0/docs/Hakyll-Web-Tags.html#v:renderTagCloud">Hakyll のタグクラウド</a>を設定したいからだ：</p>
<div class="sourceCode" id="cb8"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span id="cb8-1"><a href="#cb8-1" aria-hidden="true" tabindex="-1"></a><span class="ot">buildIndex ::</span> [(<span class="dt">Tag</span>, <span class="dt">Int</span>)] <span class="ot">-&gt;</span> [<span class="dt">Post</span>] <span class="ot">-&gt;</span> <span class="dt">Action</span> ()</span>
<span id="cb8-2"><a href="#cb8-2" aria-hidden="true" tabindex="-1"></a>buildIndex tags posts <span class="ot">=</span> <span class="kw">do</span></span>
<span id="cb8-3"><a href="#cb8-3" aria-hidden="true" tabindex="-1"></a>  indexT <span class="ot">&lt;-</span> compileTemplate&#39; <span class="st">&quot;site/templates/index.html&quot;</span></span>
<span id="cb8-4"><a href="#cb8-4" aria-hidden="true" tabindex="-1"></a>  <span class="kw">let</span> indexHTML <span class="ot">=</span> T.unpack <span class="op">$</span> substitute indexT (happend siteMeta indexInfo)</span>
<span id="cb8-5"><a href="#cb8-5" aria-hidden="true" tabindex="-1"></a>  writeFile&#39; (outputFolder <span class="op">&lt;/&gt;</span> <span class="st">&quot;index.html&quot;</span>) indexHTML</span>
<span id="cb8-6"><a href="#cb8-6" aria-hidden="true" tabindex="-1"></a>  <span class="kw">where</span></span>
<span id="cb8-7"><a href="#cb8-7" aria-hidden="true" tabindex="-1"></a>    indexInfo <span class="ot">=</span> <span class="op">#</span>tags <span class="op">@=</span> tagsInfo <span class="op">&lt;:</span> <span class="op">#</span>posts <span class="op">@=</span> <span class="fu">take</span> <span class="dv">4</span> (<span class="fu">reverse</span> posts) <span class="op">&lt;:</span><span class="ot"> nil ::</span> <span class="dt">IndexInfo</span></span>
<span id="cb8-8"><a href="#cb8-8" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb8-9"><a href="#cb8-9" aria-hidden="true" tabindex="-1"></a>    tagsInfo <span class="ot">=</span> <span class="fu">map</span> (<span class="fu">uncurry</span> toTagInfo) (L.sortOn <span class="fu">fst</span> tags)</span>
<span id="cb8-10"><a href="#cb8-10" aria-hidden="true" tabindex="-1"></a>    minCnt <span class="ot">=</span> <span class="fu">maximum</span> <span class="op">$</span> <span class="fu">map</span> <span class="fu">snd</span> tags</span>
<span id="cb8-11"><a href="#cb8-11" aria-hidden="true" tabindex="-1"></a>    maxCnt <span class="ot">=</span> <span class="fu">minimum</span> <span class="op">$</span> <span class="fu">map</span> <span class="fu">snd</span> tags</span>
<span id="cb8-12"><a href="#cb8-12" aria-hidden="true" tabindex="-1"></a>    toTagInfo tag n</span>
<span id="cb8-13"><a href="#cb8-13" aria-hidden="true" tabindex="-1"></a>       <span class="ot">=</span> <span class="op">#</span>name <span class="op">@=</span> tag</span>
<span id="cb8-14"><a href="#cb8-14" aria-hidden="true" tabindex="-1"></a>      <span class="op">&lt;:</span> <span class="op">#</span>size <span class="op">@=</span> calcSize <span class="fl">120.0</span> <span class="fl">80.0</span> n minCnt maxCnt</span>
<span id="cb8-15"><a href="#cb8-15" aria-hidden="true" tabindex="-1"></a>      <span class="op">&lt;:</span> nil</span>
<span id="cb8-16"><a href="#cb8-16" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb8-17"><a href="#cb8-17" aria-hidden="true" tabindex="-1"></a><span class="ot">    calcSize ::</span> <span class="dt">Double</span> <span class="ot">-&gt;</span> <span class="dt">Double</span> <span class="ot">-&gt;</span> <span class="dt">Int</span> <span class="ot">-&gt;</span> <span class="dt">Int</span> <span class="ot">-&gt;</span> <span class="dt">Int</span> <span class="ot">-&gt;</span> <span class="dt">Int</span></span>
<span id="cb8-18"><a href="#cb8-18" aria-hidden="true" tabindex="-1"></a>    calcSize minSize maxSize cnt min&#39; max&#39; <span class="ot">=</span></span>
<span id="cb8-19"><a href="#cb8-19" aria-hidden="true" tabindex="-1"></a>      <span class="kw">let</span> diff <span class="ot">=</span> <span class="dv">1</span> <span class="op">+</span> <span class="fu">fromIntegral</span> max&#39; <span class="op">-</span> <span class="fu">fromIntegral</span> min&#39;</span>
<span id="cb8-20"><a href="#cb8-20" aria-hidden="true" tabindex="-1"></a>          relative <span class="ot">=</span> (<span class="fu">fromIntegral</span> cnt <span class="op">-</span> <span class="fu">fromIntegral</span> min&#39;) <span class="op">/</span> diff</span>
<span id="cb8-21"><a href="#cb8-21" aria-hidden="true" tabindex="-1"></a>      <span class="kw">in</span> <span class="fu">floor</span> <span class="op">$</span> minSize <span class="op">+</span> relative <span class="op">*</span> (maxSize <span class="op">-</span> minSize)</span></code></pre></div>
<p><code>tagsInfo</code> 周りの処理は Hakyll のコードを参考にして書いただけ．</p>
<h3 id="シンタックスハイライト">シンタックスハイライト</h3>
<p>slick-template では，シンタックスハイライトを自前の CSS で定義していたが，ここでは <a href="https://hackage.haskell.org/package/skylighting">skylighting パッケージ</a>のを利用していたいたのでそうする：</p>
<div class="sourceCode" id="cb9"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span id="cb9-1"><a href="#cb9-1" aria-hidden="true" tabindex="-1"></a><span class="ot">buildHighlightCss ::</span> <span class="dt">Action</span> ()</span>
<span id="cb9-2"><a href="#cb9-2" aria-hidden="true" tabindex="-1"></a>buildHighlightCss <span class="ot">=</span></span>
<span id="cb9-3"><a href="#cb9-3" aria-hidden="true" tabindex="-1"></a>  writeFile&#39; (outputFolder <span class="op">&lt;/&gt;</span> <span class="st">&quot;css&quot;</span> <span class="op">&lt;/&gt;</span> <span class="st">&quot;highlight.css&quot;</span>) <span class="op">$</span> styleToCss pygments</span></code></pre></div>
<h2 id="おしまい">おしまい</h2>
<p>思ったよりさくっとできた．</p>]]></content>
    </entry>
    <entry>
        <title>家計簿アプリを作る：HaskellでSQL編</title>
        <link href="https://matsubara0507.github.io/posts/2021-04-01-create-homelyapp-part1.html"/>
        <id>https://matsubara0507.github.io/posts/2021-04-01-create-homelyapp-part1.html</id>
        <published>2021-04-01T00:00:00Z</published>
        <updated>2021-04-01T00:00:00Z</updated>
        <category term="Haskell"/>
        <content type="html"><![CDATA[<p>自分用に Haskell で<a href="https://github.com/matsubara0507/homelyapp">家計簿アプリ的なの</a>を作り始めました． 今回はまずバックエンドでのDBとの繋ぎの部分のメモ書きです．</p>
<h2 id="バックエンドの構成">バックエンドの構成</h2>
<ul>
<li>バックエンドには Servant を使う（今回はあまり関係ない）</li>
<li>DB には SQLite を（とりあえず）使う</li>
<li>両者のつなぎには <a href="https://hackage.haskell.org/package/persistent">Persistent</a>/<a href="https://hackage.haskell.org/package/esqueleto">Esqueleto</a> を使う</li>
</ul>
<p>Persistent はいわゆるORマッパーのようなライブラリで，型安全にDBを扱う方法を提供してくれる． しかし，<code>JOIN</code> のような SQL 特有の機能は提供しておらず，そういうのを利用するのに Esqueleto を使う．</p>
<p>個人利用なので規模的にわざわざ RDB を使う必要はないのだが，このアプリケーションは Haskell のサンドボックスも兼ねてるので，無駄にガチガチな構成を利用することにした．</p>
<h3 id="扱うデータ構造">扱うデータ構造</h3>
<p>自分用なので，まずはシンプルに出費やらを記録する「Expense」というデータ構造と，それをグループ分けする用の「Label」を用意：</p>
<div class="sourceCode" id="cb1"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span id="cb1-1"><a href="#cb1-1" aria-hidden="true" tabindex="-1"></a><span class="co">-- extensible を使っています</span></span>
<span id="cb1-2"><a href="#cb1-2" aria-hidden="true" tabindex="-1"></a><span class="kw">import</span> <span class="dt">Data.Extensible</span></span>
<span id="cb1-3"><a href="#cb1-3" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb1-4"><a href="#cb1-4" aria-hidden="true" tabindex="-1"></a><span class="kw">type</span> <span class="dt">ExpendId</span> <span class="ot">=</span> <span class="dt">Int64</span></span>
<span id="cb1-5"><a href="#cb1-5" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb1-6"><a href="#cb1-6" aria-hidden="true" tabindex="-1"></a><span class="kw">type</span> <span class="dt">Expense</span> <span class="ot">=</span> <span class="dt">Record</span></span>
<span id="cb1-7"><a href="#cb1-7" aria-hidden="true" tabindex="-1"></a>  &#39;[ <span class="st">&quot;amount&quot;</span>      <span class="op">&gt;:</span> <span class="dt">Int</span> <span class="co">-- 円</span></span>
<span id="cb1-8"><a href="#cb1-8" aria-hidden="true" tabindex="-1"></a>   , <span class="st">&quot;date&quot;</span>        <span class="op">&gt;:</span> <span class="dt">Day</span></span>
<span id="cb1-9"><a href="#cb1-9" aria-hidden="true" tabindex="-1"></a>   , <span class="st">&quot;description&quot;</span> <span class="op">&gt;:</span> <span class="dt">Text</span></span>
<span id="cb1-10"><a href="#cb1-10" aria-hidden="true" tabindex="-1"></a>   , <span class="st">&quot;labels&quot;</span>      <span class="op">&gt;:</span> <span class="dt">Set</span> <span class="dt">LabelId</span></span>
<span id="cb1-11"><a href="#cb1-11" aria-hidden="true" tabindex="-1"></a>   ]</span>
<span id="cb1-12"><a href="#cb1-12" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb1-13"><a href="#cb1-13" aria-hidden="true" tabindex="-1"></a><span class="kw">type</span> <span class="dt">LabelId</span> <span class="ot">=</span> <span class="dt">Int64</span></span>
<span id="cb1-14"><a href="#cb1-14" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb1-15"><a href="#cb1-15" aria-hidden="true" tabindex="-1"></a><span class="kw">type</span> <span class="dt">Label</span> <span class="ot">=</span> <span class="dt">Record</span></span>
<span id="cb1-16"><a href="#cb1-16" aria-hidden="true" tabindex="-1"></a>  &#39;[ <span class="st">&quot;name&quot;</span>        <span class="op">&gt;:</span> <span class="dt">Text</span></span>
<span id="cb1-17"><a href="#cb1-17" aria-hidden="true" tabindex="-1"></a>   , <span class="st">&quot;description&quot;</span> <span class="op">&gt;:</span> <span class="dt">Text</span></span>
<span id="cb1-18"><a href="#cb1-18" aria-hidden="true" tabindex="-1"></a>   ]</span></code></pre></div>
<h3 id="rdb側のデータ構造">RDB側のデータ構造</h3>
<p>これとは別に RDB 用のデータ構造を Persistent で定義する：</p>
<div class="sourceCode" id="cb2"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span id="cb2-1"><a href="#cb2-1" aria-hidden="true" tabindex="-1"></a><span class="kw">import</span> <span class="dt">Database.Persist.TH</span></span>
<span id="cb2-2"><a href="#cb2-2" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb2-3"><a href="#cb2-3" aria-hidden="true" tabindex="-1"></a>share [mkPersist sqlSettings, mkDeleteCascade sqlSettings, mkMigrate <span class="st">&quot;migrateAll&quot;</span>] [persistLowerCase|</span>
<span id="cb2-4"><a href="#cb2-4" aria-hidden="true" tabindex="-1"></a>ExpenseData</span>
<span id="cb2-5"><a href="#cb2-5" aria-hidden="true" tabindex="-1"></a>  amount Int</span>
<span id="cb2-6"><a href="#cb2-6" aria-hidden="true" tabindex="-1"></a>  date UTCTime</span>
<span id="cb2-7"><a href="#cb2-7" aria-hidden="true" tabindex="-1"></a>  description Text</span>
<span id="cb2-8"><a href="#cb2-8" aria-hidden="true" tabindex="-1"></a>  created UTCTime default=CURRENT_TIME</span>
<span id="cb2-9"><a href="#cb2-9" aria-hidden="true" tabindex="-1"></a>  updated UTCTime default=CURRENT_TIME</span>
<span id="cb2-10"><a href="#cb2-10" aria-hidden="true" tabindex="-1"></a>  deriving Show</span>
<span id="cb2-11"><a href="#cb2-11" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb2-12"><a href="#cb2-12" aria-hidden="true" tabindex="-1"></a>LabelData</span>
<span id="cb2-13"><a href="#cb2-13" aria-hidden="true" tabindex="-1"></a>  name Text</span>
<span id="cb2-14"><a href="#cb2-14" aria-hidden="true" tabindex="-1"></a>  description Text</span>
<span id="cb2-15"><a href="#cb2-15" aria-hidden="true" tabindex="-1"></a>  deriving Show</span>
<span id="cb2-16"><a href="#cb2-16" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb2-17"><a href="#cb2-17" aria-hidden="true" tabindex="-1"></a>ExpenseLabelRel</span>
<span id="cb2-18"><a href="#cb2-18" aria-hidden="true" tabindex="-1"></a>  expenseId ExpenseDataId</span>
<span id="cb2-19"><a href="#cb2-19" aria-hidden="true" tabindex="-1"></a>  labelId LabelDataId</span>
<span id="cb2-20"><a href="#cb2-20" aria-hidden="true" tabindex="-1"></a>  deriving Show</span>
<span id="cb2-21"><a href="#cb2-21" aria-hidden="true" tabindex="-1"></a>|]</span></code></pre></div>
<p>Persistent と extensible のレコードをいい感じに Template Haskell で繋ぐ方法はよくわからないので，愚直に２つ定義するようにしている． Persistent のデータから extensible のレコードへ変換する関数を定義する：</p>
<div class="sourceCode" id="cb3"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span id="cb3-1"><a href="#cb3-1" aria-hidden="true" tabindex="-1"></a><span class="ot">toEpense ::</span> <span class="dt">ExpenseData</span> <span class="ot">-&gt;</span> <span class="dt">Set</span> <span class="dt">LabelId</span> <span class="ot">-&gt;</span> <span class="dt">Expense</span></span>
<span id="cb3-2"><a href="#cb3-2" aria-hidden="true" tabindex="-1"></a>toEpense (<span class="dt">ExpenseData</span> amount date description _ _) ls</span>
<span id="cb3-3"><a href="#cb3-3" aria-hidden="true" tabindex="-1"></a>     <span class="ot">=</span> <span class="op">#</span>amount      <span class="op">@=</span> amount</span>
<span id="cb3-4"><a href="#cb3-4" aria-hidden="true" tabindex="-1"></a>    <span class="op">&lt;:</span> <span class="op">#</span>date        <span class="op">@=</span> utctDay date</span>
<span id="cb3-5"><a href="#cb3-5" aria-hidden="true" tabindex="-1"></a>    <span class="op">&lt;:</span> <span class="op">#</span>description <span class="op">@=</span> description</span>
<span id="cb3-6"><a href="#cb3-6" aria-hidden="true" tabindex="-1"></a>    <span class="op">&lt;:</span> <span class="op">#</span>labels      <span class="op">@=</span> ls</span>
<span id="cb3-7"><a href="#cb3-7" aria-hidden="true" tabindex="-1"></a>    <span class="op">&lt;:</span> nil</span>
<span id="cb3-8"><a href="#cb3-8" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb3-9"><a href="#cb3-9" aria-hidden="true" tabindex="-1"></a><span class="ot">toLabel ::</span> <span class="dt">LabelData</span> <span class="ot">-&gt;</span> <span class="dt">Label</span></span>
<span id="cb3-10"><a href="#cb3-10" aria-hidden="true" tabindex="-1"></a>toLabel (<span class="dt">LabelData</span> name description)</span>
<span id="cb3-11"><a href="#cb3-11" aria-hidden="true" tabindex="-1"></a>    <span class="ot">=</span> <span class="op">#</span>name         <span class="op">@=</span> name</span>
<span id="cb3-12"><a href="#cb3-12" aria-hidden="true" tabindex="-1"></a>    <span class="op">&lt;:</span> <span class="op">#</span>description <span class="op">@=</span> description</span>
<span id="cb3-13"><a href="#cb3-13" aria-hidden="true" tabindex="-1"></a>    <span class="op">&lt;:</span> nil</span></code></pre></div>
<h2 id="db操作を定義">DB操作を定義</h2>
<p>参照・挿入・削除をとりあえず定義する．</p>
<h3 id="label-の操作">Label の操作</h3>
<p>まずは全ての <code>Label</code> を返すだけの関数を定義する：</p>
<div class="sourceCode" id="cb4"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span id="cb4-1"><a href="#cb4-1" aria-hidden="true" tabindex="-1"></a><span class="kw">import</span>           <span class="dt">Database.Esqueleto.Experimental</span> <span class="kw">hiding</span> (set, (^.))</span>
<span id="cb4-2"><a href="#cb4-2" aria-hidden="true" tabindex="-1"></a><span class="kw">import</span> <span class="kw">qualified</span> <span class="dt">Database.Esqueleto.Experimental</span> <span class="kw">as</span> <span class="dt">DB</span></span>
<span id="cb4-3"><a href="#cb4-3" aria-hidden="true" tabindex="-1"></a><span class="kw">import</span> <span class="kw">qualified</span> <span class="dt">Mix.Plugin.Persist.Sqlite</span>       <span class="kw">as</span> <span class="dt">MixDB</span></span>
<span id="cb4-4"><a href="#cb4-4" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb4-5"><a href="#cb4-5" aria-hidden="true" tabindex="-1"></a><span class="kw">type</span> <span class="dt">SQLitable</span> m env <span class="ot">=</span> </span>
<span id="cb4-6"><a href="#cb4-6" aria-hidden="true" tabindex="-1"></a>  (<span class="dt">MixDB.HasSqliteConfig</span> env, <span class="dt">HasLogFunc</span> env, <span class="dt">MonadReader</span> env m, <span class="dt">MonadUnliftIO</span> m)</span>
<span id="cb4-7"><a href="#cb4-7" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb4-8"><a href="#cb4-8" aria-hidden="true" tabindex="-1"></a><span class="ot">selectLabelAll ::</span> <span class="dt">SQLitable</span> m env <span class="ot">=&gt;</span> m (<span class="dt">Map</span> <span class="dt">LabelId</span> <span class="dt">Label</span>)</span>
<span id="cb4-9"><a href="#cb4-9" aria-hidden="true" tabindex="-1"></a>selectLabelAll <span class="ot">=</span> MixDB.run <span class="op">$</span> <span class="kw">do</span></span>
<span id="cb4-10"><a href="#cb4-10" aria-hidden="true" tabindex="-1"></a>  labels <span class="ot">&lt;-</span> select <span class="op">$</span> from <span class="op">$</span> <span class="dt">Table</span> <span class="op">@</span><span class="dt">LabelData</span></span>
<span id="cb4-11"><a href="#cb4-11" aria-hidden="true" tabindex="-1"></a>  <span class="fu">pure</span> <span class="op">$</span> Map.fromList (liftA2 (,) (fromSqlKey <span class="op">.</span> entityKey) (toLabel <span class="op">.</span> entityVal) <span class="op">&lt;$&gt;</span> labels)</span></code></pre></div>
<p>自分は <a href="https://hackage.haskell.org/package/rio">rio</a> を愛用しており，それを拡張した <a href="https://github.com/matsubara0507/mix.hs">mix.hs</a> という自作の簡易フレームワークを利用している． そのため，基本的には <code>RIO Env a</code> という型を利用すれば，副作用のある処理（ログとか）はだいたい書けるのだが，テストがしやすいように敢えて細かい制約を記述しておく． その制約を <code>ConstraintKinds</code> 拡張を利用してエイリアスしたのが <code>SQLitable</code> だ（名前が雑）．</p>
<p>Esqueleto は現在（バージョン3.4.2），SQL の書き方を刷新している最中っぽく，新しい記法は <a href="https://hackage.haskell.org/package/esqueleto-3.4.2.0/docs/Database-Esqueleto-Experimental.html"><code>Database.Esqueleto.Experimental</code></a> で利用できる． 今まではラムダ式を利用して <code>FROM</code> の部分をこう書いていてた：</p>
<div class="sourceCode" id="cb5"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span id="cb5-1"><a href="#cb5-1" aria-hidden="true" tabindex="-1"></a>select <span class="op">$</span></span>
<span id="cb5-2"><a href="#cb5-2" aria-hidden="true" tabindex="-1"></a>  from <span class="op">$</span> \people <span class="ot">-&gt;</span> <span class="kw">do</span></span>
<span id="cb5-3"><a href="#cb5-3" aria-hidden="true" tabindex="-1"></a>    where_ (people <span class="op">^.</span> <span class="dt">PersonName</span> <span class="op">==.</span> val <span class="st">&quot;John&quot;</span>)</span>
<span id="cb5-4"><a href="#cb5-4" aria-hidden="true" tabindex="-1"></a>    <span class="fu">pure</span> people</span></code></pre></div>
<p>のに対して，新しい記法では <code>TypeApplications</code> を利用してこう書く：</p>
<div class="sourceCode" id="cb6"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span id="cb6-1"><a href="#cb6-1" aria-hidden="true" tabindex="-1"></a>select <span class="op">$</span> <span class="kw">do</span></span>
<span id="cb6-2"><a href="#cb6-2" aria-hidden="true" tabindex="-1"></a>  people <span class="ot">&lt;-</span> from <span class="op">$</span> <span class="dt">Table</span> <span class="op">@</span><span class="dt">Person</span></span>
<span id="cb6-3"><a href="#cb6-3" aria-hidden="true" tabindex="-1"></a>  where_ (people <span class="op">^.</span> <span class="dt">PersonName</span> <span class="op">==.</span> val <span class="st">&quot;John&quot;</span>)</span>
<span id="cb6-4"><a href="#cb6-4" aria-hidden="true" tabindex="-1"></a>  <span class="fu">pure</span> people</span></code></pre></div>
<p>経緯などについてはあまり詳しく追ってないが<a href="https://github.com/bitemyapp/esqueleto/pull/172">このPR</a>から辿れそう．</p>
<h1 id="section"></h1>
<p><code>Label</code> の挿入，ID を指定しての参照・削除も簡単なのでさくっと定義：</p>
<div class="sourceCode" id="cb7"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span id="cb7-1"><a href="#cb7-1" aria-hidden="true" tabindex="-1"></a><span class="ot">findLabelById ::</span> <span class="dt">SQLitable</span> m env <span class="ot">=&gt;</span> <span class="dt">LabelId</span> <span class="ot">-&gt;</span> m (<span class="dt">Maybe</span> <span class="dt">Label</span>)</span>
<span id="cb7-2"><a href="#cb7-2" aria-hidden="true" tabindex="-1"></a>findLabelById idx <span class="ot">=</span></span>
<span id="cb7-3"><a href="#cb7-3" aria-hidden="true" tabindex="-1"></a>  MixDB.run <span class="op">$</span> <span class="fu">fmap</span> toLabel <span class="op">&lt;$&gt;</span> get (toSqlKey idx)</span>
<span id="cb7-4"><a href="#cb7-4" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb7-5"><a href="#cb7-5" aria-hidden="true" tabindex="-1"></a><span class="ot">insertLabel ::</span> <span class="dt">SQLitable</span> m env <span class="ot">=&gt;</span> <span class="dt">Label</span> <span class="ot">-&gt;</span> m <span class="dt">LabelId</span></span>
<span id="cb7-6"><a href="#cb7-6" aria-hidden="true" tabindex="-1"></a>insertLabel label <span class="ot">=</span></span>
<span id="cb7-7"><a href="#cb7-7" aria-hidden="true" tabindex="-1"></a>  MixDB.run <span class="op">$</span> fromSqlKey <span class="op">&lt;$&gt;</span> insert (<span class="dt">LabelData</span> (label <span class="op">^.</span> <span class="op">#</span>name) (label <span class="op">^.</span> <span class="op">#</span>description))</span>
<span id="cb7-8"><a href="#cb7-8" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb7-9"><a href="#cb7-9" aria-hidden="true" tabindex="-1"></a><span class="ot">deleteLabelById ::</span> <span class="dt">SQLitable</span> m env <span class="ot">=&gt;</span> <span class="dt">LabelId</span> <span class="ot">-&gt;</span> m ()</span>
<span id="cb7-10"><a href="#cb7-10" aria-hidden="true" tabindex="-1"></a>deleteLabelById idx <span class="ot">=</span></span>
<span id="cb7-11"><a href="#cb7-11" aria-hidden="true" tabindex="-1"></a>  MixDB.run <span class="op">$</span> deleteKey (toSqlKey<span class="ot"> idx ::</span> <span class="dt">Key</span> <span class="dt">LabelData</span>)</span></code></pre></div>
<h3 id="expense-の操作">Expense の操作</h3>
<p>次に <code>Expense</code> の参照を定義する：</p>
<div class="sourceCode" id="cb8"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span id="cb8-1"><a href="#cb8-1" aria-hidden="true" tabindex="-1"></a><span class="ot">findExpenseById ::</span> <span class="dt">SQLitable</span> m env <span class="ot">=&gt;</span> <span class="dt">ExpenseId</span> <span class="ot">-&gt;</span> m (<span class="dt">Maybe</span> <span class="dt">Expense</span>)</span>
<span id="cb8-2"><a href="#cb8-2" aria-hidden="true" tabindex="-1"></a>findExpenseById idx <span class="ot">=</span> MixDB.run <span class="op">$</span> <span class="kw">do</span></span>
<span id="cb8-3"><a href="#cb8-3" aria-hidden="true" tabindex="-1"></a>  expense <span class="ot">&lt;-</span> get <span class="op">$</span> toSqlKey idx</span>
<span id="cb8-4"><a href="#cb8-4" aria-hidden="true" tabindex="-1"></a>  for expense <span class="op">$</span> \e <span class="ot">-&gt;</span> <span class="kw">do</span>  <span class="co">-- for :: Maybe a -&gt; (a -&gt; m b) -&gt; m (Maybe b)</span></span>
<span id="cb8-5"><a href="#cb8-5" aria-hidden="true" tabindex="-1"></a>    lids <span class="ot">&lt;-</span> select <span class="op">$</span> <span class="kw">do</span></span>
<span id="cb8-6"><a href="#cb8-6" aria-hidden="true" tabindex="-1"></a>      el <span class="ot">&lt;-</span> from <span class="op">$</span> <span class="dt">Table</span> <span class="op">@</span><span class="dt">ExpenseLabelRel</span></span>
<span id="cb8-7"><a href="#cb8-7" aria-hidden="true" tabindex="-1"></a>      where_ ((el <span class="op">DB.^.</span> <span class="dt">ExpenseLabelRelExpenseId</span>) <span class="op">==.</span> val (toSqlKey idx))</span>
<span id="cb8-8"><a href="#cb8-8" aria-hidden="true" tabindex="-1"></a>      <span class="fu">pure</span> (el <span class="op">DB.^.</span> <span class="dt">ExpenseLabelRelLabelId</span>)</span>
<span id="cb8-9"><a href="#cb8-9" aria-hidden="true" tabindex="-1"></a>    <span class="fu">pure</span> <span class="op">$</span> toEpense e (Set.fromList <span class="op">$</span> fromSqlKey <span class="op">.</span> unValue <span class="op">&lt;$&gt;</span> lids)</span></code></pre></div>
<p><code>Expense</code> と <code>Label</code> の関係は <code>ExpenseLabel</code> で定義しているので，それも引っ張ってくる（もっと賢い SQL があるかもだがお気になさらず）． ちなみに <code>DB.^.</code> としているのは，rio でインポートされる lens の <code>(^.)</code> とバッティングするためだ．</p>
<p>挿入時には逆に <code>ExpenseLabel</code> も一緒に挿入するようにする：</p>
<div class="sourceCode" id="cb9"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span id="cb9-1"><a href="#cb9-1" aria-hidden="true" tabindex="-1"></a><span class="ot">insertExpense ::</span> <span class="dt">SQLitable</span> m env <span class="ot">=&gt;</span> <span class="dt">Expense</span> <span class="ot">-&gt;</span> m <span class="dt">ExpenseId</span></span>
<span id="cb9-2"><a href="#cb9-2" aria-hidden="true" tabindex="-1"></a>insertExpense expense <span class="ot">=</span> MixDB.run <span class="op">$</span> <span class="kw">do</span></span>
<span id="cb9-3"><a href="#cb9-3" aria-hidden="true" tabindex="-1"></a>  expenseId <span class="ot">&lt;-</span> insert expenseData</span>
<span id="cb9-4"><a href="#cb9-4" aria-hidden="true" tabindex="-1"></a>  insertMany_ <span class="op">$</span> <span class="dt">ExpenseLabelRel</span> expenseId <span class="op">.</span> toSqlKey <span class="op">&lt;$&gt;</span> Set.toList (expense <span class="op">^.</span> <span class="op">#</span>labels)</span>
<span id="cb9-5"><a href="#cb9-5" aria-hidden="true" tabindex="-1"></a>  <span class="fu">pure</span> <span class="op">$</span> fromSqlKey expenseId</span>
<span id="cb9-6"><a href="#cb9-6" aria-hidden="true" tabindex="-1"></a>  <span class="kw">where</span></span>
<span id="cb9-7"><a href="#cb9-7" aria-hidden="true" tabindex="-1"></a>    expenseData <span class="ot">=</span> <span class="dt">ExpenseData</span></span>
<span id="cb9-8"><a href="#cb9-8" aria-hidden="true" tabindex="-1"></a>      (expense <span class="op">^.</span> <span class="op">#</span>amount)</span>
<span id="cb9-9"><a href="#cb9-9" aria-hidden="true" tabindex="-1"></a>      (<span class="dt">UTCTime</span> (expense <span class="op">^.</span> <span class="op">#</span>date) <span class="dv">0</span>)</span>
<span id="cb9-10"><a href="#cb9-10" aria-hidden="true" tabindex="-1"></a>      (expense <span class="op">^.</span> <span class="op">#</span>description)</span>
<span id="cb9-11"><a href="#cb9-11" aria-hidden="true" tabindex="-1"></a>      zeroTime <span class="co">-- default で初期化されるがなんか値を与える必要があるっぽい？</span></span>
<span id="cb9-12"><a href="#cb9-12" aria-hidden="true" tabindex="-1"></a>      zeroTime</span>
<span id="cb9-13"><a href="#cb9-13" aria-hidden="true" tabindex="-1"></a>    zeroTime <span class="ot">=</span> <span class="dt">UTCTime</span> (<span class="dt">ModifiedJulianDay</span> <span class="dv">0</span>) <span class="dv">0</span></span></code></pre></div>
<p><code>insertMany_</code> を利用することでひとつのクエリで一気に挿入をしてくれる． ちなみに，ID のリストが返ってくる <code>insertMany</code> は，SQLite の場合はひとつのクエリではなく <code>insert</code> を <code>mapM</code> しているだけなので注意．</p>
<p>もちろん，削除の場合も <code>ExpenseLabel</code> を一緒に削除する：</p>
<div class="sourceCode" id="cb10"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span id="cb10-1"><a href="#cb10-1" aria-hidden="true" tabindex="-1"></a><span class="ot">deleteExpenseById ::</span> <span class="dt">SQLitable</span> m env <span class="ot">=&gt;</span> <span class="dt">ExpenseId</span>  <span class="ot">-&gt;</span> m ()</span>
<span id="cb10-2"><a href="#cb10-2" aria-hidden="true" tabindex="-1"></a>deleteExpenseById idx <span class="ot">=</span></span>
<span id="cb10-3"><a href="#cb10-3" aria-hidden="true" tabindex="-1"></a>  MixDB.run <span class="op">$</span> deleteCascade (toSqlKey<span class="ot"> idx ::</span> <span class="dt">Key</span> <span class="dt">ExpenseData</span>)</span></code></pre></div>
<p><code>deleteCascade</code> を使うことで関連するデータも全て削除してくれる（<code>ON DELETE CASCADE</code>）．</p>
<p>最後に年月を指定して <code>Expense</code> を取得する関数を定義する：</p>
<div class="sourceCode" id="cb11"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span id="cb11-1"><a href="#cb11-1" aria-hidden="true" tabindex="-1"></a><span class="ot">selectExpensesByMonth ::</span> <span class="dt">SQLitable</span> m env <span class="ot">=&gt;</span> (<span class="dt">Integer</span>, <span class="dt">Int</span>) <span class="ot">-&gt;</span> m (<span class="dt">Map</span> <span class="dt">ExpenseId</span> <span class="dt">Expense</span>)</span>
<span id="cb11-2"><a href="#cb11-2" aria-hidden="true" tabindex="-1"></a>selectExpensesByMonth (y, m) <span class="ot">=</span></span>
<span id="cb11-3"><a href="#cb11-3" aria-hidden="true" tabindex="-1"></a>  MixDB.run <span class="op">$</span> <span class="kw">do</span></span>
<span id="cb11-4"><a href="#cb11-4" aria-hidden="true" tabindex="-1"></a>    es <span class="ot">&lt;-</span> select <span class="op">$</span> <span class="kw">do</span></span>
<span id="cb11-5"><a href="#cb11-5" aria-hidden="true" tabindex="-1"></a>      e <span class="ot">&lt;-</span> from <span class="op">$</span> <span class="dt">Table</span> <span class="op">@</span><span class="dt">ExpenseData</span></span>
<span id="cb11-6"><a href="#cb11-6" aria-hidden="true" tabindex="-1"></a>      where_ (between (e <span class="op">DB.^.</span> <span class="dt">ExpenseDataDate</span>) (val startDate, val endDate))</span>
<span id="cb11-7"><a href="#cb11-7" aria-hidden="true" tabindex="-1"></a>      <span class="fu">pure</span> e</span>
<span id="cb11-8"><a href="#cb11-8" aria-hidden="true" tabindex="-1"></a>    <span class="kw">let</span> eIds <span class="ot">=</span> <span class="fu">fmap</span> entityKey es</span>
<span id="cb11-9"><a href="#cb11-9" aria-hidden="true" tabindex="-1"></a>    els <span class="ot">&lt;-</span> select <span class="op">$</span> <span class="kw">do</span></span>
<span id="cb11-10"><a href="#cb11-10" aria-hidden="true" tabindex="-1"></a>      el <span class="ot">&lt;-</span> from <span class="op">$</span> <span class="dt">Table</span> <span class="op">@</span><span class="dt">ExpenseLabelRel</span></span>
<span id="cb11-11"><a href="#cb11-11" aria-hidden="true" tabindex="-1"></a>      where_ ((el <span class="op">DB.^.</span> <span class="dt">ExpenseLabelRelExpenseId</span>) <span class="ot">`in_`</span> valList eIds)</span>
<span id="cb11-12"><a href="#cb11-12" aria-hidden="true" tabindex="-1"></a>      <span class="fu">pure</span> el</span>
<span id="cb11-13"><a href="#cb11-13" aria-hidden="true" tabindex="-1"></a>    <span class="fu">pure</span> <span class="op">$</span> Map.fromList (fromExpenseDataWith (toLabelIdsMap <span class="op">$</span> <span class="fu">fmap</span> entityVal els) <span class="op">&lt;$&gt;</span> es)</span>
<span id="cb11-14"><a href="#cb11-14" aria-hidden="true" tabindex="-1"></a>  <span class="kw">where</span></span>
<span id="cb11-15"><a href="#cb11-15" aria-hidden="true" tabindex="-1"></a>    startDay  <span class="ot">=</span> fromGregorian y m <span class="dv">1</span></span>
<span id="cb11-16"><a href="#cb11-16" aria-hidden="true" tabindex="-1"></a>    startDate <span class="ot">=</span> <span class="dt">UTCTime</span> startDay <span class="dv">0</span></span>
<span id="cb11-17"><a href="#cb11-17" aria-hidden="true" tabindex="-1"></a>    endDate   <span class="ot">=</span> addUTCTime (<span class="op">-</span><span class="dv">1</span>) <span class="op">$</span> <span class="dt">UTCTime</span> (addGregorianMonthsClip <span class="dv">1</span> startDay) <span class="dv">0</span></span>
<span id="cb11-18"><a href="#cb11-18" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb11-19"><a href="#cb11-19" aria-hidden="true" tabindex="-1"></a><span class="ot">fromExpenseDataWith ::</span> <span class="dt">Map</span> <span class="dt">ExpenseId</span> (<span class="dt">Set</span> <span class="dt">LabelId</span>) <span class="ot">-&gt;</span> <span class="dt">Entity</span> <span class="dt">ExpenseData</span> <span class="ot">-&gt;</span> (<span class="dt">ExpenseId</span>, <span class="dt">Expense</span>)</span>
<span id="cb11-20"><a href="#cb11-20" aria-hidden="true" tabindex="-1"></a>fromExpenseDataWith labelMap e <span class="ot">=</span></span>
<span id="cb11-21"><a href="#cb11-21" aria-hidden="true" tabindex="-1"></a>  ( fromSqlKey <span class="op">$</span> entityKey e</span>
<span id="cb11-22"><a href="#cb11-22" aria-hidden="true" tabindex="-1"></a>  , toEpense (entityVal e) <span class="op">$</span> fromMaybe <span class="fu">mempty</span> (Map.lookup (fromSqlKey <span class="op">$</span> entityKey e) labelMap)</span>
<span id="cb11-23"><a href="#cb11-23" aria-hidden="true" tabindex="-1"></a>  )</span>
<span id="cb11-24"><a href="#cb11-24" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb11-25"><a href="#cb11-25" aria-hidden="true" tabindex="-1"></a><span class="ot">toLabelIdsMap ::</span> [<span class="dt">ExpenseLabelRel</span>] <span class="ot">-&gt;</span> <span class="dt">Map</span> <span class="dt">ExpenseId</span> (<span class="dt">Set</span> <span class="dt">LabelId</span>)</span>
<span id="cb11-26"><a href="#cb11-26" aria-hidden="true" tabindex="-1"></a>toLabelIdsMap <span class="ot">=</span> </span>
<span id="cb11-27"><a href="#cb11-27" aria-hidden="true" tabindex="-1"></a>  Map.fromListWith (<span class="op">&lt;&gt;</span>) <span class="op">.</span> <span class="fu">fmap</span> (\(<span class="dt">ExpenseLabelRel</span> eid lid) <span class="ot">-&gt;</span> (fromSqlKey eid, Set.singleton <span class="op">$</span> fromSqlKey lid))</span></code></pre></div>
<p><code>IN</code> 句には1000個を超える要素は渡せないが，まぁここはとりあえずあとで直す．</p>
<h2 id="テストを書く">テストを書く</h2>
<p>テストには <a href="https://hackage.haskell.org/package/tasty">tasty</a> を利用している． テストの用の <code>Env</code> を定義する：</p>
<div class="sourceCode" id="cb12"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span id="cb12-1"><a href="#cb12-1" aria-hidden="true" tabindex="-1"></a><span class="kw">type</span> <span class="dt">TestEnv</span> <span class="ot">=</span> <span class="dt">Record</span></span>
<span id="cb12-2"><a href="#cb12-2" aria-hidden="true" tabindex="-1"></a>  &#39;[ <span class="st">&quot;logger&quot;</span> <span class="op">&gt;:</span> <span class="dt">LogFunc</span></span>
<span id="cb12-3"><a href="#cb12-3" aria-hidden="true" tabindex="-1"></a>   , <span class="st">&quot;sqlite&quot;</span> <span class="op">&gt;:</span> <span class="dt">MixDB.Config</span></span>
<span id="cb12-4"><a href="#cb12-4" aria-hidden="true" tabindex="-1"></a>   ]</span>
<span id="cb12-5"><a href="#cb12-5" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb12-6"><a href="#cb12-6" aria-hidden="true" tabindex="-1"></a><span class="ot">mkPlugin ::</span> <span class="dt">Text</span> <span class="ot">-&gt;</span> <span class="dt">Mix.Plugin</span> a m <span class="dt">TestEnv</span></span>
<span id="cb12-7"><a href="#cb12-7" aria-hidden="true" tabindex="-1"></a>mkPlugin path <span class="ot">=</span> hsequence</span>
<span id="cb12-8"><a href="#cb12-8" aria-hidden="true" tabindex="-1"></a>   <span class="op">$</span> <span class="op">#</span>logger <span class="op">&lt;@=&gt;</span> <span class="fu">pure</span> (mkLogFunc <span class="op">$</span> \_ _ _ _ <span class="ot">-&gt;</span> <span class="fu">pure</span> ()) <span class="co">-- NoLogging</span></span>
<span id="cb12-9"><a href="#cb12-9" aria-hidden="true" tabindex="-1"></a>  <span class="op">&lt;:</span> <span class="op">#</span>sqlite <span class="op">&lt;@=&gt;</span> MixDB.buildPluginWithoutPool path</span>
<span id="cb12-10"><a href="#cb12-10" aria-hidden="true" tabindex="-1"></a>  <span class="op">&lt;:</span> nil</span></code></pre></div>
<p>ロギングは要らないので何もしないロギングを渡しておく． ローカルの一時的なパスを指定してマイグレーションをするようにする：</p>
<div class="sourceCode" id="cb13"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span id="cb13-1"><a href="#cb13-1" aria-hidden="true" tabindex="-1"></a><span class="kw">import</span>           <span class="dt">Test.Tasty</span></span>
<span id="cb13-2"><a href="#cb13-2" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb13-3"><a href="#cb13-3" aria-hidden="true" tabindex="-1"></a><span class="ot">withMigrateOn ::</span> <span class="dt">MonadUnliftIO</span> m <span class="ot">=&gt;</span> <span class="dt">Text</span> <span class="ot">-&gt;</span> m <span class="dt">TestTree</span> <span class="ot">-&gt;</span> m <span class="dt">TestTree</span></span>
<span id="cb13-4"><a href="#cb13-4" aria-hidden="true" tabindex="-1"></a>withMigrateOn path spec <span class="ot">=</span></span>
<span id="cb13-5"><a href="#cb13-5" aria-hidden="true" tabindex="-1"></a>  bracket</span>
<span id="cb13-6"><a href="#cb13-6" aria-hidden="true" tabindex="-1"></a>    migrateForTest</span>
<span id="cb13-7"><a href="#cb13-7" aria-hidden="true" tabindex="-1"></a>    (\_ <span class="ot">-&gt;</span> removeFile <span class="op">$</span> Text.unpack path)</span>
<span id="cb13-8"><a href="#cb13-8" aria-hidden="true" tabindex="-1"></a>    (<span class="fu">const</span> spec)</span>
<span id="cb13-9"><a href="#cb13-9" aria-hidden="true" tabindex="-1"></a>  <span class="kw">where</span></span>
<span id="cb13-10"><a href="#cb13-10" aria-hidden="true" tabindex="-1"></a>    migrateForTest <span class="ot">=</span> <span class="kw">do</span></span>
<span id="cb13-11"><a href="#cb13-11" aria-hidden="true" tabindex="-1"></a>      createDirectoryIfMissing <span class="dt">True</span> (takeDirectory <span class="op">$</span> Text.unpack path)</span>
<span id="cb13-12"><a href="#cb13-12" aria-hidden="true" tabindex="-1"></a>      Mix.run (mkPlugin path) (MixDB.runMigrate migrateAll)</span></code></pre></div>
<p><code>bracket</code> を利用して最後には SQLite のファイルごと削除するようにした． ちなみに，Persistent の SQLite の設定には <code>:memory:</code> というオンメモリで動作するものもある． しかしこれは一つの <code>Mix.run</code> でしか共有できないため今回は使いにくい． なので，愚直に一時的なテストファイルを作成することにした．</p>
<h1 id="section-1"></h1>
<p>テスト自体はこんな感じ：</p>
<div class="sourceCode" id="cb14"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span id="cb14-1"><a href="#cb14-1" aria-hidden="true" tabindex="-1"></a><span class="ot">tests ::</span> <span class="dt">IO</span> <span class="dt">TestTree</span></span>
<span id="cb14-2"><a href="#cb14-2" aria-hidden="true" tabindex="-1"></a>tests <span class="ot">=</span> withMigrateOn dbPath <span class="op">$</span></span>
<span id="cb14-3"><a href="#cb14-3" aria-hidden="true" tabindex="-1"></a>  testSpec <span class="st">&quot;Homely.DB&quot;</span> <span class="op">$</span> <span class="kw">do</span></span>
<span id="cb14-4"><a href="#cb14-4" aria-hidden="true" tabindex="-1"></a>    describe <span class="st">&quot;selectExpensesByMonth&quot;</span> <span class="op">$</span> <span class="kw">do</span></span>
<span id="cb14-5"><a href="#cb14-5" aria-hidden="true" tabindex="-1"></a>      context <span class="st">&quot;with label&quot;</span> <span class="op">$</span> <span class="kw">do</span></span>
<span id="cb14-6"><a href="#cb14-6" aria-hidden="true" tabindex="-1"></a>        <span class="kw">let</span> label1 <span class="ot">=</span> <span class="op">#</span>name <span class="op">@=</span> <span class="st">&quot;hoge&quot;</span> <span class="op">&lt;:</span> <span class="op">#</span>description <span class="op">@=</span> <span class="st">&quot;hogege&quot;</span> <span class="op">&lt;:</span> nil</span>
<span id="cb14-7"><a href="#cb14-7" aria-hidden="true" tabindex="-1"></a>            label2 <span class="ot">=</span> <span class="op">#</span>name <span class="op">@=</span> <span class="st">&quot;fuga&quot;</span> <span class="op">&lt;:</span> <span class="op">#</span>description <span class="op">@=</span> <span class="st">&quot;fugaga&quot;</span> <span class="op">&lt;:</span> nil</span>
<span id="cb14-8"><a href="#cb14-8" aria-hidden="true" tabindex="-1"></a>        labelIds <span class="ot">&lt;-</span> runIO <span class="op">$</span> runWithDB <span class="op">$</span> Set.fromList <span class="op">&lt;$&gt;</span> <span class="fu">mapM</span> insertLabel [label1, label2]</span>
<span id="cb14-9"><a href="#cb14-9" aria-hidden="true" tabindex="-1"></a>        <span class="kw">let</span> expect1 <span class="ot">=</span> <span class="op">#</span>amount      <span class="op">@=</span> <span class="dv">1000</span></span>
<span id="cb14-10"><a href="#cb14-10" aria-hidden="true" tabindex="-1"></a>                   <span class="op">&lt;:</span> <span class="op">#</span>date        <span class="op">@=</span> fromGregorian <span class="dv">2021</span> <span class="dv">3</span> <span class="dv">21</span></span>
<span id="cb14-11"><a href="#cb14-11" aria-hidden="true" tabindex="-1"></a>                   <span class="op">&lt;:</span> <span class="op">#</span>description <span class="op">@=</span> <span class="st">&quot;test&quot;</span></span>
<span id="cb14-12"><a href="#cb14-12" aria-hidden="true" tabindex="-1"></a>                   <span class="op">&lt;:</span> <span class="op">#</span>labels      <span class="op">@=</span> labelIds</span>
<span id="cb14-13"><a href="#cb14-13" aria-hidden="true" tabindex="-1"></a>                   <span class="op">&lt;:</span> nil</span>
<span id="cb14-14"><a href="#cb14-14" aria-hidden="true" tabindex="-1"></a>            expect2 <span class="ot">=</span> <span class="op">#</span>amount      <span class="op">@=</span> <span class="dv">3000</span></span>
<span id="cb14-15"><a href="#cb14-15" aria-hidden="true" tabindex="-1"></a>                   <span class="op">&lt;:</span> <span class="op">#</span>date        <span class="op">@=</span> fromGregorian <span class="dv">2021</span> <span class="dv">3</span> <span class="dv">22</span></span>
<span id="cb14-16"><a href="#cb14-16" aria-hidden="true" tabindex="-1"></a>                   <span class="op">&lt;:</span> <span class="op">#</span>description <span class="op">@=</span> <span class="st">&quot;test&quot;</span></span>
<span id="cb14-17"><a href="#cb14-17" aria-hidden="true" tabindex="-1"></a>                   <span class="op">&lt;:</span> <span class="op">#</span>labels      <span class="op">@=</span> Set.take <span class="dv">1</span> labelIds</span>
<span id="cb14-18"><a href="#cb14-18" aria-hidden="true" tabindex="-1"></a>                   <span class="op">&lt;:</span> nil</span>
<span id="cb14-19"><a href="#cb14-19" aria-hidden="true" tabindex="-1"></a>        actual <span class="ot">&lt;-</span> runIO <span class="op">$</span> runWithDB <span class="op">$</span> <span class="kw">do</span></span>
<span id="cb14-20"><a href="#cb14-20" aria-hidden="true" tabindex="-1"></a>          idx1 <span class="ot">&lt;-</span> insertExpense expect1</span>
<span id="cb14-21"><a href="#cb14-21" aria-hidden="true" tabindex="-1"></a>          idx2 <span class="ot">&lt;-</span> insertExpense expect2</span>
<span id="cb14-22"><a href="#cb14-22" aria-hidden="true" tabindex="-1"></a>          es <span class="ot">&lt;-</span> selectExpensesByMonth (<span class="dv">2021</span>, <span class="dv">3</span>)</span>
<span id="cb14-23"><a href="#cb14-23" aria-hidden="true" tabindex="-1"></a>          deleteExpenseById idx1</span>
<span id="cb14-24"><a href="#cb14-24" aria-hidden="true" tabindex="-1"></a>          deleteExpenseById idx2</span>
<span id="cb14-25"><a href="#cb14-25" aria-hidden="true" tabindex="-1"></a>          <span class="fu">mapM_</span> deleteLabelById <span class="op">$</span> Set.toList labelIds</span>
<span id="cb14-26"><a href="#cb14-26" aria-hidden="true" tabindex="-1"></a>          <span class="fu">pure</span> es</span>
<span id="cb14-27"><a href="#cb14-27" aria-hidden="true" tabindex="-1"></a>        it <span class="st">&quot;insert Expense&quot;</span> <span class="op">$</span></span>
<span id="cb14-28"><a href="#cb14-28" aria-hidden="true" tabindex="-1"></a>          Map.elems actual <span class="ot">`shouldBe`</span> [expect1, expect2]</span>
<span id="cb14-29"><a href="#cb14-29" aria-hidden="true" tabindex="-1"></a>  <span class="kw">where</span></span>
<span id="cb14-30"><a href="#cb14-30" aria-hidden="true" tabindex="-1"></a>    dbPath <span class="ot">=</span> <span class="st">&quot;./tmp/test.sqlite&quot;</span></span>
<span id="cb14-31"><a href="#cb14-31" aria-hidden="true" tabindex="-1"></a><span class="ot">    runWithDB ::</span> <span class="dt">RIO</span> <span class="dt">TestEnv</span> a <span class="ot">-&gt;</span> <span class="dt">IO</span> a</span>
<span id="cb14-32"><a href="#cb14-32" aria-hidden="true" tabindex="-1"></a>    runWithDB <span class="ot">=</span> Mix.run (mkPlugin dbPath)</span></code></pre></div>
<p>他のテストへ干渉しないように，一度作ったデータは毎回削除するようにしている． ここはまぁなんか良い方法がないかおいおい考えます．</p>
<h2 id="おしまい">おしまい</h2>
<p>果たしていつ完成するのやら．</p>]]></content>
    </entry>
    <entry>
        <title>Haskell のための自作 Docker イメージを GitHub Container Registry に移行する</title>
        <link href="https://matsubara0507.github.io/posts/2021-02-21-replace-haskell-docker-images-to-ghcr.html"/>
        <id>https://matsubara0507.github.io/posts/2021-02-21-replace-haskell-docker-images-to-ghcr.html</id>
        <published>2021-02-21T00:00:00Z</published>
        <updated>2021-02-21T00:00:00Z</updated>
        <category term="Docker"/>
        <category term="GitHub-Actions"/>
        <content type="html"><![CDATA[<p>Haskell Stack の Docker Integration などで個人的に使う Docker イメージを自作しています． その雛形を下記のリポジトリで管理していました：</p>
<iframe width="320" height="163" scrolling="no" frameborder="0" src="https://matsubara0507.github.io/my-github-cards/?target=matsubara0507/haskell-dockerfiles" >
</iframe>
<p>これは TravisCI で Docker イメージのビルドとプッシュをし，Docker Hub にイメージを置いてあります． しかし，<a href="https://blog.travis-ci.com/2020-11-02-travis-ci-new-billing">TravisCI は料金プランが大幅改定されて OSS であっても専用のプランに申し込まないと無料で使えなくなってしまいました</a>． また，Docker Hub に関しては無料枠の場合は使われていないイメージ（確か6ヶ月プルされてないイメージ）がだんだん消されていく使用に変わりました．</p>
<p>なので，今回は TravisCI の代わりに GitHub Actions へ，Docker Hub の代わりに GitHub Container Registry へ移行することにしました．</p>
<h2 id="cicd-でやっていたこと">CI/CD でやっていたこと</h2>
<p>元々，matsubara0507/stack-build のイメージだけ定期的に更新していた． Stack の Docker Integration では，Docker のイメージタグの指定がない場合は resolver をタグの代わりにする：</p>
<div class="sourceCode" id="cb1"><pre class="sourceCode yaml"><code class="sourceCode yaml"><span id="cb1-1"><a href="#cb1-1" aria-hidden="true" tabindex="-1"></a><span class="fu">resolver</span><span class="kw">:</span><span class="at"> lts-17.4</span></span>
<span id="cb1-2"><a href="#cb1-2" aria-hidden="true" tabindex="-1"></a><span class="fu">packages</span><span class="kw">:</span></span>
<span id="cb1-3"><a href="#cb1-3" aria-hidden="true" tabindex="-1"></a><span class="kw">-</span><span class="at"> .</span></span>
<span id="cb1-4"><a href="#cb1-4" aria-hidden="true" tabindex="-1"></a><span class="fu">extra-deps</span><span class="kw">:</span><span class="at"> </span><span class="kw">[]</span></span>
<span id="cb1-5"><a href="#cb1-5" aria-hidden="true" tabindex="-1"></a><span class="fu">docker</span><span class="kw">:</span></span>
<span id="cb1-6"><a href="#cb1-6" aria-hidden="true" tabindex="-1"></a><span class="at">  </span><span class="fu">repo</span><span class="kw">:</span><span class="at"> matsubara0507/stack-build</span></span>
<span id="cb1-7"><a href="#cb1-7" aria-hidden="true" tabindex="-1"></a><span class="at">  </span><span class="fu">enable</span><span class="kw">:</span><span class="at"> </span><span class="ch">false</span></span></code></pre></div>
<p>この場合，<code>stack --docker build</code> で利用するイメージは Docker Hub 上の <code>matsubara0507/stack-build:lts-17.4</code> になる． <code>docker.repo</code> にタグまで含ませた場合はタグまで含んだイメージを利用する．</p>
<p>Stack を開発している fpco が出してるイメージは resolver 毎にタグを作って Docker Hub に上げてあったので，それを真似して自分も resolver 毎にタグを作っていた． <a href="https://github.com/matsubara0507/dockwright">dockwright</a> というツールと TravisCI の定期実行を利用して Stackage に resolver が追加されるたびに自動で新しいタグを生成していた． しかし，タグだけが変わって中身は変わってないので GitHub Container Registry にするついでに，この方法を止めることにした．</p>
<h1 id="section"></h1>
<p>また，dockwright の機能を利用して Dockerfile でインストールする Haskell Stack のバージョンを自動で更新していた．</p>
<h2 id="github-actions-ですること">GitHub Actions ですること</h2>
<p>以下の2つをする</p>
<ul>
<li>PR や master の更新で Docker イメージを GitHub Container Registry にビルド・プッシュ</li>
<li>Dockerfile でインストールする Haskell Stack のバージョンを定期的に自動更新</li>
</ul>
<p>作業 PR は<a href="https://github.com/matsubara0507/haskell-dockerfiles/pull/1">こちら</a>．</p>
<h3 id="docker-イメージのビルドプッシュ">Docker イメージのビルド・プッシュ</h3>
<p>haskell-dockerfiles では以下の複数のイメージを管理していた：</p>
<ul>
<li>matsubara0507/stack-build
<ul>
<li>ビルドするときに利用する</li>
</ul></li>
<li>matsubara0507/ubuntu-for-haskell
<ul>
<li>Haskellアプリケーションを Docker イメージ化するときのベースイメージ</li>
<li>git コマンドも入った <code>git</code> タグもある</li>
</ul></li>
</ul>
<p>それぞれ別の Dockerfile で管理しているので，適当に matrix にして分けてあげる：</p>
<div class="sourceCode" id="cb2"><pre class="sourceCode yaml"><code class="sourceCode yaml"><span id="cb2-1"><a href="#cb2-1" aria-hidden="true" tabindex="-1"></a><span class="fu">name</span><span class="kw">:</span><span class="at"> Build docker images</span></span>
<span id="cb2-2"><a href="#cb2-2" aria-hidden="true" tabindex="-1"></a><span class="co"># ...</span></span>
<span id="cb2-3"><a href="#cb2-3" aria-hidden="true" tabindex="-1"></a><span class="fu">jobs</span><span class="kw">:</span></span>
<span id="cb2-4"><a href="#cb2-4" aria-hidden="true" tabindex="-1"></a><span class="at">  </span><span class="fu">build</span><span class="kw">:</span></span>
<span id="cb2-5"><a href="#cb2-5" aria-hidden="true" tabindex="-1"></a><span class="at">    </span><span class="fu">name</span><span class="kw">:</span><span class="at"> Build docker images for ${{ matrix.dir }}</span></span>
<span id="cb2-6"><a href="#cb2-6" aria-hidden="true" tabindex="-1"></a><span class="at">    </span><span class="fu">runs-on</span><span class="kw">:</span><span class="at"> ubuntu-18.04</span></span>
<span id="cb2-7"><a href="#cb2-7" aria-hidden="true" tabindex="-1"></a><span class="at">    </span><span class="fu">strategy</span><span class="kw">:</span></span>
<span id="cb2-8"><a href="#cb2-8" aria-hidden="true" tabindex="-1"></a><span class="at">      </span><span class="fu">fail-fast</span><span class="kw">:</span><span class="at"> </span><span class="ch">false</span></span>
<span id="cb2-9"><a href="#cb2-9" aria-hidden="true" tabindex="-1"></a><span class="at">      </span><span class="fu">matrix</span><span class="kw">:</span></span>
<span id="cb2-10"><a href="#cb2-10" aria-hidden="true" tabindex="-1"></a><span class="at">        </span><span class="fu">dir</span><span class="kw">:</span></span>
<span id="cb2-11"><a href="#cb2-11" aria-hidden="true" tabindex="-1"></a><span class="at">        </span><span class="kw">-</span><span class="at"> </span><span class="st">&quot;stack-build&quot;</span></span>
<span id="cb2-12"><a href="#cb2-12" aria-hidden="true" tabindex="-1"></a><span class="at">        </span><span class="kw">-</span><span class="at"> </span><span class="st">&quot;ubuntu-for-haskell&quot;</span></span>
<span id="cb2-13"><a href="#cb2-13" aria-hidden="true" tabindex="-1"></a><span class="at">        </span><span class="kw">-</span><span class="at"> </span><span class="st">&quot;ubuntu-for-haskell-with-git&quot;</span></span>
<span id="cb2-14"><a href="#cb2-14" aria-hidden="true" tabindex="-1"></a><span class="at">    </span><span class="fu">steps</span><span class="kw">:</span></span>
<span id="cb2-15"><a href="#cb2-15" aria-hidden="true" tabindex="-1"></a><span class="co">    # ...</span></span>
<span id="cb2-16"><a href="#cb2-16" aria-hidden="true" tabindex="-1"></a><span class="at">    </span><span class="kw">-</span><span class="at"> </span><span class="fu">name</span><span class="kw">:</span><span class="at"> Build and push</span></span>
<span id="cb2-17"><a href="#cb2-17" aria-hidden="true" tabindex="-1"></a><span class="at">      </span><span class="fu">uses</span><span class="kw">:</span><span class="at"> docker/build-push-action@v2</span></span>
<span id="cb2-18"><a href="#cb2-18" aria-hidden="true" tabindex="-1"></a><span class="at">      </span><span class="fu">with</span><span class="kw">:</span></span>
<span id="cb2-19"><a href="#cb2-19" aria-hidden="true" tabindex="-1"></a><span class="at">        </span><span class="fu">context</span><span class="kw">:</span><span class="at"> ${{ matrix.dir }}</span></span>
<span id="cb2-20"><a href="#cb2-20" aria-hidden="true" tabindex="-1"></a><span class="at">        </span><span class="fu">builder</span><span class="kw">:</span><span class="at"> ${{ steps.buildx.outputs.name }}</span></span>
<span id="cb2-21"><a href="#cb2-21" aria-hidden="true" tabindex="-1"></a><span class="at">        </span><span class="fu">tags</span><span class="kw">:</span><span class="co"> # 問題はココ</span></span>
<span id="cb2-22"><a href="#cb2-22" aria-hidden="true" tabindex="-1"></a><span class="at">        </span><span class="fu">push</span><span class="kw">:</span><span class="at"> ${{ github.event_name != &#39;pull_request&#39; }}</span></span></code></pre></div>
<p>問題はタグだ． <code>stack-build</code> と <code>ubuntu-for-haskell</code> はそれぞれのディレクトリ名がイメージ名で <code>latest</code> と <code>18.04</code> タグを作って欲しい． <code>ubuntu-for-haskell-with-git</code> は <code>ubuntu-for-haskell:git</code> を作って欲しい． dockwright には設定ファイルからイメージタグを生成するコマンドがあるので，それを利用する：</p>
<div class="sourceCode" id="cb3"><pre class="sourceCode yaml"><code class="sourceCode yaml"><span id="cb3-1"><a href="#cb3-1" aria-hidden="true" tabindex="-1"></a><span class="co"># ubuntu-for-haskell/.dockwritht.yaml</span></span>
<span id="cb3-2"><a href="#cb3-2" aria-hidden="true" tabindex="-1"></a><span class="fu">image</span><span class="kw">:</span><span class="at"> </span><span class="st">&quot;matsubara0507/ubuntu-for-haskell&quot;</span></span>
<span id="cb3-3"><a href="#cb3-3" aria-hidden="true" tabindex="-1"></a><span class="fu">tags</span><span class="kw">:</span></span>
<span id="cb3-4"><a href="#cb3-4" aria-hidden="true" tabindex="-1"></a><span class="kw">-</span><span class="at"> </span><span class="fu">type</span><span class="kw">:</span><span class="at"> value</span></span>
<span id="cb3-5"><a href="#cb3-5" aria-hidden="true" tabindex="-1"></a><span class="at">  </span><span class="fu">keys</span><span class="kw">:</span></span>
<span id="cb3-6"><a href="#cb3-6" aria-hidden="true" tabindex="-1"></a><span class="at">  </span><span class="kw">-</span><span class="at"> latest</span></span>
<span id="cb3-7"><a href="#cb3-7" aria-hidden="true" tabindex="-1"></a><span class="at">  </span><span class="kw">-</span><span class="at"> </span><span class="st">&quot;18.04&quot;</span></span>
<span id="cb3-8"><a href="#cb3-8" aria-hidden="true" tabindex="-1"></a><span class="at">  </span><span class="fu">always</span><span class="kw">:</span><span class="at"> </span><span class="ch">true</span></span></code></pre></div>
<div class="sourceCode" id="cb4"><pre class="sourceCode yaml"><code class="sourceCode yaml"><span id="cb4-1"><a href="#cb4-1" aria-hidden="true" tabindex="-1"></a><span class="co"># ubuntu-for-haskell-with-git/.dockwritht.yaml</span></span>
<span id="cb4-2"><a href="#cb4-2" aria-hidden="true" tabindex="-1"></a><span class="fu">image</span><span class="kw">:</span><span class="at"> </span><span class="st">&quot;matsubara0507/ubuntu-for-haskell&quot;</span></span>
<span id="cb4-3"><a href="#cb4-3" aria-hidden="true" tabindex="-1"></a><span class="fu">tags</span><span class="kw">:</span></span>
<span id="cb4-4"><a href="#cb4-4" aria-hidden="true" tabindex="-1"></a><span class="kw">-</span><span class="at"> </span><span class="fu">type</span><span class="kw">:</span><span class="at"> value</span></span>
<span id="cb4-5"><a href="#cb4-5" aria-hidden="true" tabindex="-1"></a><span class="at">  </span><span class="fu">keys</span><span class="kw">:</span></span>
<span id="cb4-6"><a href="#cb4-6" aria-hidden="true" tabindex="-1"></a><span class="at">  </span><span class="kw">-</span><span class="at"> git</span></span>
<span id="cb4-7"><a href="#cb4-7" aria-hidden="true" tabindex="-1"></a><span class="at">  </span><span class="fu">always</span><span class="kw">:</span><span class="at"> </span><span class="ch">true</span></span></code></pre></div>
<p>で，この設定ファイルでコマンドを実行すると：</p>
<div class="sourceCode" id="cb5"><pre class="sourceCode sh"><code class="sourceCode bash"><span id="cb5-1"><a href="#cb5-1" aria-hidden="true" tabindex="-1"></a><span class="ex">$</span> dockwright ubuntu-for-haskell/.dockwright.yaml <span class="at">--new-tags</span> <span class="at">--with-name</span></span>
<span id="cb5-2"><a href="#cb5-2" aria-hidden="true" tabindex="-1"></a><span class="ex">matsubara0507/ubuntu-for-haskell:18.04</span></span>
<span id="cb5-3"><a href="#cb5-3" aria-hidden="true" tabindex="-1"></a><span class="ex">matsubara0507/ubuntu-for-haskell:latest</span></span>
<span id="cb5-4"><a href="#cb5-4" aria-hidden="true" tabindex="-1"></a><span class="ex">$</span> dockwright ubuntu-for-haskell-with-git/.dockwright.yaml <span class="at">--new-tags</span> <span class="at">--with-name</span></span>
<span id="cb5-5"><a href="#cb5-5" aria-hidden="true" tabindex="-1"></a><span class="ex">matsubara0507/ubuntu-for-haskell:git</span></span></code></pre></div>
<p>となる． あとはいい感じに GitHub Actions の output 機能へ渡してあげる：</p>
<div class="sourceCode" id="cb6"><pre class="sourceCode yaml"><code class="sourceCode yaml"><span id="cb6-1"><a href="#cb6-1" aria-hidden="true" tabindex="-1"></a><span class="co"># ...</span></span>
<span id="cb6-2"><a href="#cb6-2" aria-hidden="true" tabindex="-1"></a><span class="at">    </span><span class="fu">steps</span><span class="kw">:</span></span>
<span id="cb6-3"><a href="#cb6-3" aria-hidden="true" tabindex="-1"></a><span class="co">    # ...</span></span>
<span id="cb6-4"><a href="#cb6-4" aria-hidden="true" tabindex="-1"></a><span class="at">    </span><span class="kw">-</span><span class="at"> </span><span class="fu">name</span><span class="kw">:</span><span class="at"> Prepare</span></span>
<span id="cb6-5"><a href="#cb6-5" aria-hidden="true" tabindex="-1"></a><span class="at">      </span><span class="fu">id</span><span class="kw">:</span><span class="at"> prep</span></span>
<span id="cb6-6"><a href="#cb6-6" aria-hidden="true" tabindex="-1"></a><span class="fu">      run</span><span class="kw">: </span><span class="ch">|</span></span>
<span id="cb6-7"><a href="#cb6-7" aria-hidden="true" tabindex="-1"></a>        TAGS=$(make -s new-tags dir=${{ matrix.dir }} | xargs -ITAG printf &quot;,ghcr.io/TAG&quot;)</span>
<span id="cb6-8"><a href="#cb6-8" aria-hidden="true" tabindex="-1"></a>        echo ::set-output name=tags::${TAGS#,}</span>
<span id="cb6-9"><a href="#cb6-9" aria-hidden="true" tabindex="-1"></a><span class="co">    # ...</span></span>
<span id="cb6-10"><a href="#cb6-10" aria-hidden="true" tabindex="-1"></a><span class="at">    </span><span class="kw">-</span><span class="at"> </span><span class="fu">name</span><span class="kw">:</span><span class="at"> Build and push</span></span>
<span id="cb6-11"><a href="#cb6-11" aria-hidden="true" tabindex="-1"></a><span class="at">      </span><span class="fu">uses</span><span class="kw">:</span><span class="at"> docker/build-push-action@v2</span></span>
<span id="cb6-12"><a href="#cb6-12" aria-hidden="true" tabindex="-1"></a><span class="at">      </span><span class="fu">with</span><span class="kw">:</span></span>
<span id="cb6-13"><a href="#cb6-13" aria-hidden="true" tabindex="-1"></a><span class="at">        </span><span class="fu">context</span><span class="kw">:</span><span class="at"> ${{ matrix.dir }}</span></span>
<span id="cb6-14"><a href="#cb6-14" aria-hidden="true" tabindex="-1"></a><span class="at">        </span><span class="fu">builder</span><span class="kw">:</span><span class="at"> ${{ steps.buildx.outputs.name }}</span></span>
<span id="cb6-15"><a href="#cb6-15" aria-hidden="true" tabindex="-1"></a><span class="at">        </span><span class="fu">tags</span><span class="kw">:</span><span class="at"> ${{ steps.prep.outputs.tags }}</span></span>
<span id="cb6-16"><a href="#cb6-16" aria-hidden="true" tabindex="-1"></a><span class="at">        </span><span class="fu">push</span><span class="kw">:</span><span class="at"> ${{ github.event_name != &#39;pull_request&#39; }}</span></span></code></pre></div>
<p><code>make</code> は <code>dockwright</code> のコマンドを情略しているだけ． 結果をいい感じに <code>,</code> 区切りでつなげるのに手間取った．</p>
<h3 id="stack-のバージョンを定期的に自動更新">Stack のバージョンを定期的に自動更新</h3>
<p>こっちはもっと簡単． Dockerfile を生成したいのは stack-build だけなので適当に設定をして（ここは割愛），コマンドを実行するだけ：</p>
<div class="sourceCode" id="cb7"><pre class="sourceCode yaml"><code class="sourceCode yaml"><span id="cb7-1"><a href="#cb7-1" aria-hidden="true" tabindex="-1"></a><span class="fu">name</span><span class="kw">:</span><span class="at"> Update Dockerfile</span></span>
<span id="cb7-2"><a href="#cb7-2" aria-hidden="true" tabindex="-1"></a><span class="fu">on</span><span class="kw">:</span></span>
<span id="cb7-3"><a href="#cb7-3" aria-hidden="true" tabindex="-1"></a><span class="at">  </span><span class="fu">schedule</span><span class="kw">:</span></span>
<span id="cb7-4"><a href="#cb7-4" aria-hidden="true" tabindex="-1"></a><span class="at">  </span><span class="kw">-</span><span class="at"> </span><span class="fu">cron</span><span class="kw">:</span><span class="at"> </span><span class="st">&#39;0 0 * * *&#39;</span></span>
<span id="cb7-5"><a href="#cb7-5" aria-hidden="true" tabindex="-1"></a><span class="fu">jobs</span><span class="kw">:</span></span>
<span id="cb7-6"><a href="#cb7-6" aria-hidden="true" tabindex="-1"></a><span class="at">  </span><span class="fu">update</span><span class="kw">:</span></span>
<span id="cb7-7"><a href="#cb7-7" aria-hidden="true" tabindex="-1"></a><span class="at">    </span><span class="fu">name</span><span class="kw">:</span><span class="at"> Update Dockerfile for ${{ matrix.dir }}</span></span>
<span id="cb7-8"><a href="#cb7-8" aria-hidden="true" tabindex="-1"></a><span class="at">    </span><span class="fu">runs-on</span><span class="kw">:</span><span class="at"> ubuntu-18.04</span></span>
<span id="cb7-9"><a href="#cb7-9" aria-hidden="true" tabindex="-1"></a><span class="at">    </span><span class="fu">strategy</span><span class="kw">:</span></span>
<span id="cb7-10"><a href="#cb7-10" aria-hidden="true" tabindex="-1"></a><span class="at">      </span><span class="fu">fail-fast</span><span class="kw">:</span><span class="at"> </span><span class="ch">false</span></span>
<span id="cb7-11"><a href="#cb7-11" aria-hidden="true" tabindex="-1"></a><span class="at">      </span><span class="fu">matrix</span><span class="kw">:</span></span>
<span id="cb7-12"><a href="#cb7-12" aria-hidden="true" tabindex="-1"></a><span class="at">        </span><span class="fu">dir</span><span class="kw">:</span></span>
<span id="cb7-13"><a href="#cb7-13" aria-hidden="true" tabindex="-1"></a><span class="at">        </span><span class="kw">-</span><span class="at"> stack-build</span></span>
<span id="cb7-14"><a href="#cb7-14" aria-hidden="true" tabindex="-1"></a><span class="at">    </span><span class="fu">steps</span><span class="kw">:</span></span>
<span id="cb7-15"><a href="#cb7-15" aria-hidden="true" tabindex="-1"></a><span class="at">    </span><span class="kw">-</span><span class="at"> </span><span class="fu">uses</span><span class="kw">:</span><span class="at"> actions/checkout@v2</span></span>
<span id="cb7-16"><a href="#cb7-16" aria-hidden="true" tabindex="-1"></a><span class="at">    </span><span class="kw">-</span><span class="at"> </span><span class="fu">name</span><span class="kw">:</span><span class="at"> Build Dockerfile</span></span>
<span id="cb7-17"><a href="#cb7-17" aria-hidden="true" tabindex="-1"></a><span class="at">      </span><span class="fu">run</span><span class="kw">:</span><span class="at"> make dockerfile dir=${{ matrix.dir }}</span></span>
<span id="cb7-18"><a href="#cb7-18" aria-hidden="true" tabindex="-1"></a><span class="at">    </span><span class="kw">-</span><span class="at"> </span><span class="fu">name</span><span class="kw">:</span><span class="at"> Push changes</span></span>
<span id="cb7-19"><a href="#cb7-19" aria-hidden="true" tabindex="-1"></a><span class="fu">      run</span><span class="kw">: </span><span class="ch">|</span></span>
<span id="cb7-20"><a href="#cb7-20" aria-hidden="true" tabindex="-1"></a>        git config --local user.email &quot;bot@example.com&quot;</span>
<span id="cb7-21"><a href="#cb7-21" aria-hidden="true" tabindex="-1"></a>        git config --local user.name &quot;Bot&quot;</span>
<span id="cb7-22"><a href="#cb7-22" aria-hidden="true" tabindex="-1"></a>        git status</span>
<span id="cb7-23"><a href="#cb7-23" aria-hidden="true" tabindex="-1"></a>        git add -A</span>
<span id="cb7-24"><a href="#cb7-24" aria-hidden="true" tabindex="-1"></a>        git diff --staged --quiet || git commit -m &quot;[skip ci] Update Dockerfile for ${{ matrix.dir }}&quot;</span>
<span id="cb7-25"><a href="#cb7-25" aria-hidden="true" tabindex="-1"></a>        git push origin master</span></code></pre></div>
<p>GitHub Actions は自身のリポジトリへのコミットも簡単．</p>
<h2 id="github-containr-registry-へプッシュ">GitHub Containr Registry へプッシュ</h2>
<p>GitHub Actions から GitHub Container Registry へプッシュするには <code>docker/login-action</code> アクションを使うだけ：</p>
<div class="sourceCode" id="cb8"><pre class="sourceCode yaml"><code class="sourceCode yaml"><span id="cb8-1"><a href="#cb8-1" aria-hidden="true" tabindex="-1"></a><span class="fu">name</span><span class="kw">:</span><span class="at"> Build docker images</span></span>
<span id="cb8-2"><a href="#cb8-2" aria-hidden="true" tabindex="-1"></a><span class="co"># ...</span></span>
<span id="cb8-3"><a href="#cb8-3" aria-hidden="true" tabindex="-1"></a><span class="at">    </span><span class="fu">steps</span><span class="kw">:</span></span>
<span id="cb8-4"><a href="#cb8-4" aria-hidden="true" tabindex="-1"></a><span class="at">    ...</span></span>
<span id="cb8-5"><a href="#cb8-5" aria-hidden="true" tabindex="-1"></a><span class="at">    </span><span class="kw">-</span><span class="at"> </span><span class="fu">name</span><span class="kw">:</span><span class="at"> Login to GitHub Container Registry</span></span>
<span id="cb8-6"><a href="#cb8-6" aria-hidden="true" tabindex="-1"></a><span class="at">      </span><span class="fu">uses</span><span class="kw">:</span><span class="at"> docker/login-action@v1</span></span>
<span id="cb8-7"><a href="#cb8-7" aria-hidden="true" tabindex="-1"></a><span class="at">      </span><span class="fu">with</span><span class="kw">:</span></span>
<span id="cb8-8"><a href="#cb8-8" aria-hidden="true" tabindex="-1"></a><span class="at">        </span><span class="fu">registry</span><span class="kw">:</span><span class="at"> ghcr.io</span></span>
<span id="cb8-9"><a href="#cb8-9" aria-hidden="true" tabindex="-1"></a><span class="at">        </span><span class="fu">username</span><span class="kw">:</span><span class="at"> matsubara0507</span></span>
<span id="cb8-10"><a href="#cb8-10" aria-hidden="true" tabindex="-1"></a><span class="at">        </span><span class="fu">password</span><span class="kw">:</span><span class="at"> ${{ secrets.CR_PAT }}</span></span></code></pre></div>
<p>GitHub Actions にデフォルトで設定されているトークンでは GitHub Container Registry へプッシュできない． なので，個別に Personal Access Token を生成し，<code>write:packages</code> 権限を与えてシークレットに設定する必要がある．</p>
<p>実際にプッシュしたのがこちら：</p>
<ul>
<li><a href="https://github.com/users/matsubara0507/packages/container/package/stack-build">matsubara0507/stack-build</a></li>
<li><a href="https://github.com/users/matsubara0507/packages/container/package/ubuntu-for-haskell">matsubara0507/ubuntu-for-haskell</a></li>
</ul>
<p>デフォルトはプライベートになってしまうので，あとで手動でパブリックにしてあげる必要がある．</p>
<h2 id="おまけstack-で-docker-pull-できない">おまけ：stack で docker pull できない</h2>
<p>試しに Stack の Docker Integration してみたら：</p>
<div class="sourceCode" id="cb9"><pre class="sourceCode sh"><code class="sourceCode bash"><span id="cb9-1"><a href="#cb9-1" aria-hidden="true" tabindex="-1"></a><span class="ex">$</span> stack <span class="at">--docker</span> build</span>
<span id="cb9-2"><a href="#cb9-2" aria-hidden="true" tabindex="-1"></a><span class="ex">Pulling</span> image from registry: <span class="st">&#39;ghcr.io/matsubara0507/stack-build:18.04&#39;</span></span>
<span id="cb9-3"><a href="#cb9-3" aria-hidden="true" tabindex="-1"></a><span class="ex">fork/exec</span> /usr/local/bin/com.docker.cli: bad file descriptor</span>
<span id="cb9-4"><a href="#cb9-4" aria-hidden="true" tabindex="-1"></a><span class="ex">Could</span> not pull Docker image:</span>
<span id="cb9-5"><a href="#cb9-5" aria-hidden="true" tabindex="-1"></a>    <span class="ex">ghcr.io/matsubara0507/stack-build:18.04</span></span>
<span id="cb9-6"><a href="#cb9-6" aria-hidden="true" tabindex="-1"></a><span class="ex">There</span> may not be an image on the registry for your resolver<span class="st">&#39;s LTS version in</span></span>
<span id="cb9-7"><a href="#cb9-7" aria-hidden="true" tabindex="-1"></a><span class="st">your configuration file.</span></span></code></pre></div>
<p>よくわからないが，<code>docker login</code> で事前にしてあるはずの認証結果がうまく渡せてないっぽい？？ とりあえず，先に <code>docker pull</code> しておけばそれを利用してくれるので，その方法で回避してください．</p>
<h2 id="おまけdockwright-の更新">おまけ：dockwright の更新</h2>
<p>ついでに dockwright も更新した（<a href="https://github.com/matsubara0507/dockwright/pull/4">作業PR</a>）：</p>
<ul>
<li>CI/CD を TravisCI から GitHub Actions へ移行</li>
<li>Container Registry を Docker Hub から GitHub Container Registry に移行</li>
<li>resolver を lts-14.4 から lts-17.4 にアップデート</li>
</ul>
<p>resolver が上がった結果 req パッケージと language-docker パッケージ関連で修正を入れた． req は URL の文字列を req で使えるようにパースする関数が変わり，<a href="https://hackage.haskell.org/package/modern-uri">modern-uri</a> パッケージを使うようになった：</p>
<div class="sourceCode" id="cb10"><pre class="sourceCode diff"><code class="sourceCode diff"><span id="cb10-1"><a href="#cb10-1" aria-hidden="true" tabindex="-1"></a>        tags &lt;- runReq defaultHttpConfig (responseBody &lt;$&gt; buildReq opts)</span>
<span id="cb10-2"><a href="#cb10-2" aria-hidden="true" tabindex="-1"></a>        MixLogger.logDebugR &quot;fetched tags with next url&quot; (#next @= (tags ^. #next) &lt;: nil)</span>
<span id="cb10-3"><a href="#cb10-3" aria-hidden="true" tabindex="-1"></a><span class="st">-       let nextOpts = fmap snd $ parseUrlHttps =&lt;&lt; Text.encodeUtf8 &lt;$&gt; tags ^. #next</span></span>
<span id="cb10-4"><a href="#cb10-4" aria-hidden="true" tabindex="-1"></a><span class="va">+       let nextOpts = fmap snd $ useHttpsURI =&lt;&lt; URI.mkURI =&lt;&lt; tags ^. #next</span></span>
<span id="cb10-5"><a href="#cb10-5" aria-hidden="true" tabindex="-1"></a>        threadDelay 100_000</span></code></pre></div>
<p>language-docker は 9.0 から Dockerfile を記述する EDSL の部分を別パッケージ <a href="https://hackage.haskell.org/package/dockerfile-creator">dockerfile-creator</a> に分かれたのでインポート先を変更した：</p>
<div class="sourceCode" id="cb11"><pre class="sourceCode diff"><code class="sourceCode diff"><span id="cb11-1"><a href="#cb11-1" aria-hidden="true" tabindex="-1"></a>  import           Dockwright.Fetch       (fetchEnvVal)</span>
<span id="cb11-2"><a href="#cb11-2" aria-hidden="true" tabindex="-1"></a>  import           Language.Docker        (Dockerfile)</span>
<span id="cb11-3"><a href="#cb11-3" aria-hidden="true" tabindex="-1"></a>  import qualified Language.Docker        as Docker</span>
<span id="cb11-4"><a href="#cb11-4" aria-hidden="true" tabindex="-1"></a><span class="va">+ import qualified Language.Docker.EDSL   as Docker</span></span></code></pre></div>
<h2 id="おしまい">おしまい</h2>
<p>早く GitHub Actions のトークンで GitHub Container Registry にプッシュできるようになって欲しい．</p>]]></content>
    </entry>
</feed>
