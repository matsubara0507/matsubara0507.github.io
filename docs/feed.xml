<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
    <title>ひげメモ</title>
    <link href="https://matsubara0507.github.io/feed.xml" rel="self" type="application/rss+xml" />
    <link href="https://matsubara0507.github.io" />
    <id>https://matsubara0507.github.io/feed.xml</id>
    <author>
        <name>MATSUBARA Nobutada</name>
    </author>
    <updated>2021-06-12T10:45:SZ</updated>

    <entry>
        <title>家計簿アプリを作る：HaskellでSQL編</title>
        <link href="https://matsubara0507.github.ioposts/2021-04-01-create-homelyapp-part1.html"/>
        <id>https://matsubara0507.github.ioposts/2021-04-01-create-homelyapp-part1.html</id>
        <updated>2021-04-01T00:00:SZ</updated>
        <category term="Haskell"/>
        <summary></summary>
        <content type="html"><![CDATA[<p>自分用に Haskell で<a href="https://github.com/matsubara0507/homelyapp">家計簿アプリ的なの</a>を作り始めました． 今回はまずバックエンドでのDBとの繋ぎの部分のメモ書きです．</p>
<h2 id="バックエンドの構成">バックエンドの構成</h2>
<ul>
<li>バックエンドには Servant を使う（今回はあまり関係ない）</li>
<li>DB には SQLite を（とりあえず）使う</li>
<li>両者のつなぎには <a href="https://hackage.haskell.org/package/persistent">Persistent</a>/<a href="https://hackage.haskell.org/package/esqueleto">Esqueleto</a> を使う</li>
</ul>
<p>Persistent はいわゆるORマッパーのようなライブラリで，型安全にDBを扱う方法を提供してくれる． しかし，<code>JOIN</code> のような SQL 特有の機能は提供しておらず，そういうのを利用するのに Esqueleto を使う．</p>
<p>個人利用なので規模的にわざわざ RDB を使う必要はないのだが，このアプリケーションは Haskell のサンドボックスも兼ねてるので，無駄にガチガチな構成を利用することにした．</p>
<h3 id="扱うデータ構造">扱うデータ構造</h3>
<p>自分用なので，まずはシンプルに出費やらを記録する「Expense」というデータ構造と，それをグループ分けする用の「Label」を用意：</p>
<div class="sourceCode" id="cb1"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span id="cb1-1"><a href="#cb1-1" aria-hidden="true" tabindex="-1"></a><span class="co">-- extensible を使っています</span></span>
<span id="cb1-2"><a href="#cb1-2" aria-hidden="true" tabindex="-1"></a><span class="kw">import</span> <span class="dt">Data.Extensible</span></span>
<span id="cb1-3"><a href="#cb1-3" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb1-4"><a href="#cb1-4" aria-hidden="true" tabindex="-1"></a><span class="kw">type</span> <span class="dt">ExpendId</span> <span class="ot">=</span> <span class="dt">Int64</span></span>
<span id="cb1-5"><a href="#cb1-5" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb1-6"><a href="#cb1-6" aria-hidden="true" tabindex="-1"></a><span class="kw">type</span> <span class="dt">Expense</span> <span class="ot">=</span> <span class="dt">Record</span></span>
<span id="cb1-7"><a href="#cb1-7" aria-hidden="true" tabindex="-1"></a>  &#39;[ <span class="st">&quot;amount&quot;</span>      <span class="op">&gt;:</span> <span class="dt">Int</span> <span class="co">-- 円</span></span>
<span id="cb1-8"><a href="#cb1-8" aria-hidden="true" tabindex="-1"></a>   , <span class="st">&quot;date&quot;</span>        <span class="op">&gt;:</span> <span class="dt">Day</span></span>
<span id="cb1-9"><a href="#cb1-9" aria-hidden="true" tabindex="-1"></a>   , <span class="st">&quot;description&quot;</span> <span class="op">&gt;:</span> <span class="dt">Text</span></span>
<span id="cb1-10"><a href="#cb1-10" aria-hidden="true" tabindex="-1"></a>   , <span class="st">&quot;labels&quot;</span>      <span class="op">&gt;:</span> <span class="dt">Set</span> <span class="dt">LabelId</span></span>
<span id="cb1-11"><a href="#cb1-11" aria-hidden="true" tabindex="-1"></a>   ]</span>
<span id="cb1-12"><a href="#cb1-12" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb1-13"><a href="#cb1-13" aria-hidden="true" tabindex="-1"></a><span class="kw">type</span> <span class="dt">LabelId</span> <span class="ot">=</span> <span class="dt">Int64</span></span>
<span id="cb1-14"><a href="#cb1-14" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb1-15"><a href="#cb1-15" aria-hidden="true" tabindex="-1"></a><span class="kw">type</span> <span class="dt">Label</span> <span class="ot">=</span> <span class="dt">Record</span></span>
<span id="cb1-16"><a href="#cb1-16" aria-hidden="true" tabindex="-1"></a>  &#39;[ <span class="st">&quot;name&quot;</span>        <span class="op">&gt;:</span> <span class="dt">Text</span></span>
<span id="cb1-17"><a href="#cb1-17" aria-hidden="true" tabindex="-1"></a>   , <span class="st">&quot;description&quot;</span> <span class="op">&gt;:</span> <span class="dt">Text</span></span>
<span id="cb1-18"><a href="#cb1-18" aria-hidden="true" tabindex="-1"></a>   ]</span></code></pre></div>
<h3 id="rdb側のデータ構造">RDB側のデータ構造</h3>
<p>これとは別に RDB 用のデータ構造を Persistent で定義する：</p>
<div class="sourceCode" id="cb2"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span id="cb2-1"><a href="#cb2-1" aria-hidden="true" tabindex="-1"></a><span class="kw">import</span> <span class="dt">Database.Persist.TH</span></span>
<span id="cb2-2"><a href="#cb2-2" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb2-3"><a href="#cb2-3" aria-hidden="true" tabindex="-1"></a>share [mkPersist sqlSettings, mkDeleteCascade sqlSettings, mkMigrate <span class="st">&quot;migrateAll&quot;</span>] [persistLowerCase|</span>
<span id="cb2-4"><a href="#cb2-4" aria-hidden="true" tabindex="-1"></a>ExpenseData</span>
<span id="cb2-5"><a href="#cb2-5" aria-hidden="true" tabindex="-1"></a>  amount Int</span>
<span id="cb2-6"><a href="#cb2-6" aria-hidden="true" tabindex="-1"></a>  date UTCTime</span>
<span id="cb2-7"><a href="#cb2-7" aria-hidden="true" tabindex="-1"></a>  description Text</span>
<span id="cb2-8"><a href="#cb2-8" aria-hidden="true" tabindex="-1"></a>  created UTCTime default=CURRENT_TIME</span>
<span id="cb2-9"><a href="#cb2-9" aria-hidden="true" tabindex="-1"></a>  updated UTCTime default=CURRENT_TIME</span>
<span id="cb2-10"><a href="#cb2-10" aria-hidden="true" tabindex="-1"></a>  deriving Show</span>
<span id="cb2-11"><a href="#cb2-11" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb2-12"><a href="#cb2-12" aria-hidden="true" tabindex="-1"></a>LabelData</span>
<span id="cb2-13"><a href="#cb2-13" aria-hidden="true" tabindex="-1"></a>  name Text</span>
<span id="cb2-14"><a href="#cb2-14" aria-hidden="true" tabindex="-1"></a>  description Text</span>
<span id="cb2-15"><a href="#cb2-15" aria-hidden="true" tabindex="-1"></a>  deriving Show</span>
<span id="cb2-16"><a href="#cb2-16" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb2-17"><a href="#cb2-17" aria-hidden="true" tabindex="-1"></a>ExpenseLabelRel</span>
<span id="cb2-18"><a href="#cb2-18" aria-hidden="true" tabindex="-1"></a>  expenseId ExpenseDataId</span>
<span id="cb2-19"><a href="#cb2-19" aria-hidden="true" tabindex="-1"></a>  labelId LabelDataId</span>
<span id="cb2-20"><a href="#cb2-20" aria-hidden="true" tabindex="-1"></a>  deriving Show</span>
<span id="cb2-21"><a href="#cb2-21" aria-hidden="true" tabindex="-1"></a>|]</span></code></pre></div>
<p>Persistent と extensible のレコードをいい感じに Template Haskell で繋ぐ方法はよくわからないので，愚直に２つ定義するようにしている． Persistent のデータから extensible のレコードへ変換する関数を定義する：</p>
<div class="sourceCode" id="cb3"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span id="cb3-1"><a href="#cb3-1" aria-hidden="true" tabindex="-1"></a><span class="ot">toEpense ::</span> <span class="dt">ExpenseData</span> <span class="ot">-&gt;</span> <span class="dt">Set</span> <span class="dt">LabelId</span> <span class="ot">-&gt;</span> <span class="dt">Expense</span></span>
<span id="cb3-2"><a href="#cb3-2" aria-hidden="true" tabindex="-1"></a>toEpense (<span class="dt">ExpenseData</span> amount date description _ _) ls</span>
<span id="cb3-3"><a href="#cb3-3" aria-hidden="true" tabindex="-1"></a>     <span class="ot">=</span> <span class="op">#</span>amount      <span class="op">@=</span> amount</span>
<span id="cb3-4"><a href="#cb3-4" aria-hidden="true" tabindex="-1"></a>    <span class="op">&lt;:</span> <span class="op">#</span>date        <span class="op">@=</span> utctDay date</span>
<span id="cb3-5"><a href="#cb3-5" aria-hidden="true" tabindex="-1"></a>    <span class="op">&lt;:</span> <span class="op">#</span>description <span class="op">@=</span> description</span>
<span id="cb3-6"><a href="#cb3-6" aria-hidden="true" tabindex="-1"></a>    <span class="op">&lt;:</span> <span class="op">#</span>labels      <span class="op">@=</span> ls</span>
<span id="cb3-7"><a href="#cb3-7" aria-hidden="true" tabindex="-1"></a>    <span class="op">&lt;:</span> nil</span>
<span id="cb3-8"><a href="#cb3-8" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb3-9"><a href="#cb3-9" aria-hidden="true" tabindex="-1"></a><span class="ot">toLabel ::</span> <span class="dt">LabelData</span> <span class="ot">-&gt;</span> <span class="dt">Label</span></span>
<span id="cb3-10"><a href="#cb3-10" aria-hidden="true" tabindex="-1"></a>toLabel (<span class="dt">LabelData</span> name description)</span>
<span id="cb3-11"><a href="#cb3-11" aria-hidden="true" tabindex="-1"></a>    <span class="ot">=</span> <span class="op">#</span>name         <span class="op">@=</span> name</span>
<span id="cb3-12"><a href="#cb3-12" aria-hidden="true" tabindex="-1"></a>    <span class="op">&lt;:</span> <span class="op">#</span>description <span class="op">@=</span> description</span>
<span id="cb3-13"><a href="#cb3-13" aria-hidden="true" tabindex="-1"></a>    <span class="op">&lt;:</span> nil</span></code></pre></div>
<h2 id="db操作を定義">DB操作を定義</h2>
<p>参照・挿入・削除をとりあえず定義する．</p>
<h3 id="label-の操作">Label の操作</h3>
<p>まずは全ての <code>Label</code> を返すだけの関数を定義する：</p>
<div class="sourceCode" id="cb4"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span id="cb4-1"><a href="#cb4-1" aria-hidden="true" tabindex="-1"></a><span class="kw">import</span>           <span class="dt">Database.Esqueleto.Experimental</span> <span class="kw">hiding</span> (set, (^.))</span>
<span id="cb4-2"><a href="#cb4-2" aria-hidden="true" tabindex="-1"></a><span class="kw">import</span> <span class="kw">qualified</span> <span class="dt">Database.Esqueleto.Experimental</span> <span class="kw">as</span> <span class="dt">DB</span></span>
<span id="cb4-3"><a href="#cb4-3" aria-hidden="true" tabindex="-1"></a><span class="kw">import</span> <span class="kw">qualified</span> <span class="dt">Mix.Plugin.Persist.Sqlite</span>       <span class="kw">as</span> <span class="dt">MixDB</span></span>
<span id="cb4-4"><a href="#cb4-4" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb4-5"><a href="#cb4-5" aria-hidden="true" tabindex="-1"></a><span class="kw">type</span> <span class="dt">SQLitable</span> m env <span class="ot">=</span> </span>
<span id="cb4-6"><a href="#cb4-6" aria-hidden="true" tabindex="-1"></a>  (<span class="dt">MixDB.HasSqliteConfig</span> env, <span class="dt">HasLogFunc</span> env, <span class="dt">MonadReader</span> env m, <span class="dt">MonadUnliftIO</span> m)</span>
<span id="cb4-7"><a href="#cb4-7" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb4-8"><a href="#cb4-8" aria-hidden="true" tabindex="-1"></a><span class="ot">selectLabelAll ::</span> <span class="dt">SQLitable</span> m env <span class="ot">=&gt;</span> m (<span class="dt">Map</span> <span class="dt">LabelId</span> <span class="dt">Label</span>)</span>
<span id="cb4-9"><a href="#cb4-9" aria-hidden="true" tabindex="-1"></a>selectLabelAll <span class="ot">=</span> MixDB.run <span class="op">$</span> <span class="kw">do</span></span>
<span id="cb4-10"><a href="#cb4-10" aria-hidden="true" tabindex="-1"></a>  labels <span class="ot">&lt;-</span> select <span class="op">$</span> from <span class="op">$</span> <span class="dt">Table</span> <span class="op">@</span><span class="dt">LabelData</span></span>
<span id="cb4-11"><a href="#cb4-11" aria-hidden="true" tabindex="-1"></a>  <span class="fu">pure</span> <span class="op">$</span> Map.fromList (liftA2 (,) (fromSqlKey <span class="op">.</span> entityKey) (toLabel <span class="op">.</span> entityVal) <span class="op">&lt;$&gt;</span> labels)</span></code></pre></div>
<p>自分は <a href="https://hackage.haskell.org/package/rio">rio</a> を愛用しており，それを拡張した <a href="https://github.com/matsubara0507/mix.hs">mix.hs</a> という自作の簡易フレームワークを利用している． そのため，基本的には <code>RIO Env a</code> という型を利用すれば，副作用のある処理（ログとか）はだいたい書けるのだが，テストがしやすいように敢えて細かい制約を記述しておく． その制約を <code>ConstraintKinds</code> 拡張を利用してエイリアスしたのが <code>SQLitable</code> だ（名前が雑）．</p>
<p>Esqueleto は現在（バージョン3.4.2），SQL の書き方を刷新している最中っぽく，新しい記法は <a href="https://hackage.haskell.org/package/esqueleto-3.4.2.0/docs/Database-Esqueleto-Experimental.html"><code>Database.Esqueleto.Experimental</code></a> で利用できる． 今まではラムダ式を利用して <code>FROM</code> の部分をこう書いていてた：</p>
<div class="sourceCode" id="cb5"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span id="cb5-1"><a href="#cb5-1" aria-hidden="true" tabindex="-1"></a>select <span class="op">$</span></span>
<span id="cb5-2"><a href="#cb5-2" aria-hidden="true" tabindex="-1"></a>  from <span class="op">$</span> \people <span class="ot">-&gt;</span> <span class="kw">do</span></span>
<span id="cb5-3"><a href="#cb5-3" aria-hidden="true" tabindex="-1"></a>    where_ (people <span class="op">^.</span> <span class="dt">PersonName</span> <span class="op">==.</span> val <span class="st">&quot;John&quot;</span>)</span>
<span id="cb5-4"><a href="#cb5-4" aria-hidden="true" tabindex="-1"></a>    <span class="fu">pure</span> people</span></code></pre></div>
<p>のに対して，新しい記法では <code>TypeApplications</code> を利用してこう書く：</p>
<div class="sourceCode" id="cb6"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span id="cb6-1"><a href="#cb6-1" aria-hidden="true" tabindex="-1"></a>select <span class="op">$</span> <span class="kw">do</span></span>
<span id="cb6-2"><a href="#cb6-2" aria-hidden="true" tabindex="-1"></a>  people <span class="ot">&lt;-</span> from <span class="op">$</span> <span class="dt">Table</span> <span class="op">@</span><span class="dt">Person</span></span>
<span id="cb6-3"><a href="#cb6-3" aria-hidden="true" tabindex="-1"></a>  where_ (people <span class="op">^.</span> <span class="dt">PersonName</span> <span class="op">==.</span> val <span class="st">&quot;John&quot;</span>)</span>
<span id="cb6-4"><a href="#cb6-4" aria-hidden="true" tabindex="-1"></a>  <span class="fu">pure</span> people</span></code></pre></div>
<p>経緯などについてはあまり詳しく追ってないが<a href="https://github.com/bitemyapp/esqueleto/pull/172">このPR</a>から辿れそう．</p>
<h1 id="section"></h1>
<p><code>Label</code> の挿入，ID を指定しての参照・削除も簡単なのでさくっと定義：</p>
<div class="sourceCode" id="cb7"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span id="cb7-1"><a href="#cb7-1" aria-hidden="true" tabindex="-1"></a><span class="ot">findLabelById ::</span> <span class="dt">SQLitable</span> m env <span class="ot">=&gt;</span> <span class="dt">LabelId</span> <span class="ot">-&gt;</span> m (<span class="dt">Maybe</span> <span class="dt">Label</span>)</span>
<span id="cb7-2"><a href="#cb7-2" aria-hidden="true" tabindex="-1"></a>findLabelById idx <span class="ot">=</span></span>
<span id="cb7-3"><a href="#cb7-3" aria-hidden="true" tabindex="-1"></a>  MixDB.run <span class="op">$</span> <span class="fu">fmap</span> toLabel <span class="op">&lt;$&gt;</span> get (toSqlKey idx)</span>
<span id="cb7-4"><a href="#cb7-4" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb7-5"><a href="#cb7-5" aria-hidden="true" tabindex="-1"></a><span class="ot">insertLabel ::</span> <span class="dt">SQLitable</span> m env <span class="ot">=&gt;</span> <span class="dt">Label</span> <span class="ot">-&gt;</span> m <span class="dt">LabelId</span></span>
<span id="cb7-6"><a href="#cb7-6" aria-hidden="true" tabindex="-1"></a>insertLabel label <span class="ot">=</span></span>
<span id="cb7-7"><a href="#cb7-7" aria-hidden="true" tabindex="-1"></a>  MixDB.run <span class="op">$</span> fromSqlKey <span class="op">&lt;$&gt;</span> insert (<span class="dt">LabelData</span> (label <span class="op">^.</span> <span class="op">#</span>name) (label <span class="op">^.</span> <span class="op">#</span>description))</span>
<span id="cb7-8"><a href="#cb7-8" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb7-9"><a href="#cb7-9" aria-hidden="true" tabindex="-1"></a><span class="ot">deleteLabelById ::</span> <span class="dt">SQLitable</span> m env <span class="ot">=&gt;</span> <span class="dt">LabelId</span> <span class="ot">-&gt;</span> m ()</span>
<span id="cb7-10"><a href="#cb7-10" aria-hidden="true" tabindex="-1"></a>deleteLabelById idx <span class="ot">=</span></span>
<span id="cb7-11"><a href="#cb7-11" aria-hidden="true" tabindex="-1"></a>  MixDB.run <span class="op">$</span> deleteKey (toSqlKey<span class="ot"> idx ::</span> <span class="dt">Key</span> <span class="dt">LabelData</span>)</span></code></pre></div>
<h3 id="expense-の操作">Expense の操作</h3>
<p>次に <code>Expense</code> の参照を定義する：</p>
<div class="sourceCode" id="cb8"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span id="cb8-1"><a href="#cb8-1" aria-hidden="true" tabindex="-1"></a><span class="ot">findExpenseById ::</span> <span class="dt">SQLitable</span> m env <span class="ot">=&gt;</span> <span class="dt">ExpenseId</span> <span class="ot">-&gt;</span> m (<span class="dt">Maybe</span> <span class="dt">Expense</span>)</span>
<span id="cb8-2"><a href="#cb8-2" aria-hidden="true" tabindex="-1"></a>findExpenseById idx <span class="ot">=</span> MixDB.run <span class="op">$</span> <span class="kw">do</span></span>
<span id="cb8-3"><a href="#cb8-3" aria-hidden="true" tabindex="-1"></a>  expense <span class="ot">&lt;-</span> get <span class="op">$</span> toSqlKey idx</span>
<span id="cb8-4"><a href="#cb8-4" aria-hidden="true" tabindex="-1"></a>  for expense <span class="op">$</span> \e <span class="ot">-&gt;</span> <span class="kw">do</span>  <span class="co">-- for :: Maybe a -&gt; (a -&gt; m b) -&gt; m (Maybe b)</span></span>
<span id="cb8-5"><a href="#cb8-5" aria-hidden="true" tabindex="-1"></a>    lids <span class="ot">&lt;-</span> select <span class="op">$</span> <span class="kw">do</span></span>
<span id="cb8-6"><a href="#cb8-6" aria-hidden="true" tabindex="-1"></a>      el <span class="ot">&lt;-</span> from <span class="op">$</span> <span class="dt">Table</span> <span class="op">@</span><span class="dt">ExpenseLabelRel</span></span>
<span id="cb8-7"><a href="#cb8-7" aria-hidden="true" tabindex="-1"></a>      where_ ((el <span class="op">DB.^.</span> <span class="dt">ExpenseLabelRelExpenseId</span>) <span class="op">==.</span> val (toSqlKey idx))</span>
<span id="cb8-8"><a href="#cb8-8" aria-hidden="true" tabindex="-1"></a>      <span class="fu">pure</span> (el <span class="op">DB.^.</span> <span class="dt">ExpenseLabelRelLabelId</span>)</span>
<span id="cb8-9"><a href="#cb8-9" aria-hidden="true" tabindex="-1"></a>    <span class="fu">pure</span> <span class="op">$</span> toEpense e (Set.fromList <span class="op">$</span> fromSqlKey <span class="op">.</span> unValue <span class="op">&lt;$&gt;</span> lids)</span></code></pre></div>
<p><code>Expense</code> と <code>Label</code> の関係は <code>ExpenseLabel</code> で定義しているので，それも引っ張ってくる（もっと賢い SQL があるかもだがお気になさらず）． ちなみに <code>DB.^.</code> としているのは，rio でインポートされる lens の <code>(^.)</code> とバッティングするためだ．</p>
<p>挿入時には逆に <code>ExpenseLabel</code> も一緒に挿入するようにする：</p>
<div class="sourceCode" id="cb9"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span id="cb9-1"><a href="#cb9-1" aria-hidden="true" tabindex="-1"></a><span class="ot">insertExpense ::</span> <span class="dt">SQLitable</span> m env <span class="ot">=&gt;</span> <span class="dt">Expense</span> <span class="ot">-&gt;</span> m <span class="dt">ExpenseId</span></span>
<span id="cb9-2"><a href="#cb9-2" aria-hidden="true" tabindex="-1"></a>insertExpense expense <span class="ot">=</span> MixDB.run <span class="op">$</span> <span class="kw">do</span></span>
<span id="cb9-3"><a href="#cb9-3" aria-hidden="true" tabindex="-1"></a>  expenseId <span class="ot">&lt;-</span> insert expenseData</span>
<span id="cb9-4"><a href="#cb9-4" aria-hidden="true" tabindex="-1"></a>  insertMany_ <span class="op">$</span> <span class="dt">ExpenseLabelRel</span> expenseId <span class="op">.</span> toSqlKey <span class="op">&lt;$&gt;</span> Set.toList (expense <span class="op">^.</span> <span class="op">#</span>labels)</span>
<span id="cb9-5"><a href="#cb9-5" aria-hidden="true" tabindex="-1"></a>  <span class="fu">pure</span> <span class="op">$</span> fromSqlKey expenseId</span>
<span id="cb9-6"><a href="#cb9-6" aria-hidden="true" tabindex="-1"></a>  <span class="kw">where</span></span>
<span id="cb9-7"><a href="#cb9-7" aria-hidden="true" tabindex="-1"></a>    expenseData <span class="ot">=</span> <span class="dt">ExpenseData</span></span>
<span id="cb9-8"><a href="#cb9-8" aria-hidden="true" tabindex="-1"></a>      (expense <span class="op">^.</span> <span class="op">#</span>amount)</span>
<span id="cb9-9"><a href="#cb9-9" aria-hidden="true" tabindex="-1"></a>      (<span class="dt">UTCTime</span> (expense <span class="op">^.</span> <span class="op">#</span>date) <span class="dv">0</span>)</span>
<span id="cb9-10"><a href="#cb9-10" aria-hidden="true" tabindex="-1"></a>      (expense <span class="op">^.</span> <span class="op">#</span>description)</span>
<span id="cb9-11"><a href="#cb9-11" aria-hidden="true" tabindex="-1"></a>      zeroTime <span class="co">-- default で初期化されるがなんか値を与える必要があるっぽい？</span></span>
<span id="cb9-12"><a href="#cb9-12" aria-hidden="true" tabindex="-1"></a>      zeroTime</span>
<span id="cb9-13"><a href="#cb9-13" aria-hidden="true" tabindex="-1"></a>    zeroTime <span class="ot">=</span> <span class="dt">UTCTime</span> (<span class="dt">ModifiedJulianDay</span> <span class="dv">0</span>) <span class="dv">0</span></span></code></pre></div>
<p><code>insertMany_</code> を利用することでひとつのクエリで一気に挿入をしてくれる． ちなみに，ID のリストが返ってくる <code>insertMany</code> は，SQLite の場合はひとつのクエリではなく <code>insert</code> を <code>mapM</code> しているだけなので注意．</p>
<p>もちろん，削除の場合も <code>ExpenseLabel</code> を一緒に削除する：</p>
<div class="sourceCode" id="cb10"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span id="cb10-1"><a href="#cb10-1" aria-hidden="true" tabindex="-1"></a><span class="ot">deleteExpenseById ::</span> <span class="dt">SQLitable</span> m env <span class="ot">=&gt;</span> <span class="dt">ExpenseId</span>  <span class="ot">-&gt;</span> m ()</span>
<span id="cb10-2"><a href="#cb10-2" aria-hidden="true" tabindex="-1"></a>deleteExpenseById idx <span class="ot">=</span></span>
<span id="cb10-3"><a href="#cb10-3" aria-hidden="true" tabindex="-1"></a>  MixDB.run <span class="op">$</span> deleteCascade (toSqlKey<span class="ot"> idx ::</span> <span class="dt">Key</span> <span class="dt">ExpenseData</span>)</span></code></pre></div>
<p><code>deleteCascade</code> を使うことで関連するデータも全て削除してくれる（<code>ON DELETE CASCADE</code>）．</p>
<p>最後に年月を指定して <code>Expense</code> を取得する関数を定義する：</p>
<div class="sourceCode" id="cb11"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span id="cb11-1"><a href="#cb11-1" aria-hidden="true" tabindex="-1"></a><span class="ot">selectExpensesByMonth ::</span> <span class="dt">SQLitable</span> m env <span class="ot">=&gt;</span> (<span class="dt">Integer</span>, <span class="dt">Int</span>) <span class="ot">-&gt;</span> m (<span class="dt">Map</span> <span class="dt">ExpenseId</span> <span class="dt">Expense</span>)</span>
<span id="cb11-2"><a href="#cb11-2" aria-hidden="true" tabindex="-1"></a>selectExpensesByMonth (y, m) <span class="ot">=</span></span>
<span id="cb11-3"><a href="#cb11-3" aria-hidden="true" tabindex="-1"></a>  MixDB.run <span class="op">$</span> <span class="kw">do</span></span>
<span id="cb11-4"><a href="#cb11-4" aria-hidden="true" tabindex="-1"></a>    es <span class="ot">&lt;-</span> select <span class="op">$</span> <span class="kw">do</span></span>
<span id="cb11-5"><a href="#cb11-5" aria-hidden="true" tabindex="-1"></a>      e <span class="ot">&lt;-</span> from <span class="op">$</span> <span class="dt">Table</span> <span class="op">@</span><span class="dt">ExpenseData</span></span>
<span id="cb11-6"><a href="#cb11-6" aria-hidden="true" tabindex="-1"></a>      where_ (between (e <span class="op">DB.^.</span> <span class="dt">ExpenseDataDate</span>) (val startDate, val endDate))</span>
<span id="cb11-7"><a href="#cb11-7" aria-hidden="true" tabindex="-1"></a>      <span class="fu">pure</span> e</span>
<span id="cb11-8"><a href="#cb11-8" aria-hidden="true" tabindex="-1"></a>    <span class="kw">let</span> eIds <span class="ot">=</span> <span class="fu">fmap</span> entityKey es</span>
<span id="cb11-9"><a href="#cb11-9" aria-hidden="true" tabindex="-1"></a>    els <span class="ot">&lt;-</span> select <span class="op">$</span> <span class="kw">do</span></span>
<span id="cb11-10"><a href="#cb11-10" aria-hidden="true" tabindex="-1"></a>      el <span class="ot">&lt;-</span> from <span class="op">$</span> <span class="dt">Table</span> <span class="op">@</span><span class="dt">ExpenseLabelRel</span></span>
<span id="cb11-11"><a href="#cb11-11" aria-hidden="true" tabindex="-1"></a>      where_ ((el <span class="op">DB.^.</span> <span class="dt">ExpenseLabelRelExpenseId</span>) <span class="ot">`in_`</span> valList eIds)</span>
<span id="cb11-12"><a href="#cb11-12" aria-hidden="true" tabindex="-1"></a>      <span class="fu">pure</span> el</span>
<span id="cb11-13"><a href="#cb11-13" aria-hidden="true" tabindex="-1"></a>    <span class="fu">pure</span> <span class="op">$</span> Map.fromList (fromExpenseDataWith (toLabelIdsMap <span class="op">$</span> <span class="fu">fmap</span> entityVal els) <span class="op">&lt;$&gt;</span> es)</span>
<span id="cb11-14"><a href="#cb11-14" aria-hidden="true" tabindex="-1"></a>  <span class="kw">where</span></span>
<span id="cb11-15"><a href="#cb11-15" aria-hidden="true" tabindex="-1"></a>    startDay  <span class="ot">=</span> fromGregorian y m <span class="dv">1</span></span>
<span id="cb11-16"><a href="#cb11-16" aria-hidden="true" tabindex="-1"></a>    startDate <span class="ot">=</span> <span class="dt">UTCTime</span> startDay <span class="dv">0</span></span>
<span id="cb11-17"><a href="#cb11-17" aria-hidden="true" tabindex="-1"></a>    endDate   <span class="ot">=</span> addUTCTime (<span class="op">-</span><span class="dv">1</span>) <span class="op">$</span> <span class="dt">UTCTime</span> (addGregorianMonthsClip <span class="dv">1</span> startDay) <span class="dv">0</span></span>
<span id="cb11-18"><a href="#cb11-18" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb11-19"><a href="#cb11-19" aria-hidden="true" tabindex="-1"></a><span class="ot">fromExpenseDataWith ::</span> <span class="dt">Map</span> <span class="dt">ExpenseId</span> (<span class="dt">Set</span> <span class="dt">LabelId</span>) <span class="ot">-&gt;</span> <span class="dt">Entity</span> <span class="dt">ExpenseData</span> <span class="ot">-&gt;</span> (<span class="dt">ExpenseId</span>, <span class="dt">Expense</span>)</span>
<span id="cb11-20"><a href="#cb11-20" aria-hidden="true" tabindex="-1"></a>fromExpenseDataWith labelMap e <span class="ot">=</span></span>
<span id="cb11-21"><a href="#cb11-21" aria-hidden="true" tabindex="-1"></a>  ( fromSqlKey <span class="op">$</span> entityKey e</span>
<span id="cb11-22"><a href="#cb11-22" aria-hidden="true" tabindex="-1"></a>  , toEpense (entityVal e) <span class="op">$</span> fromMaybe <span class="fu">mempty</span> (Map.lookup (fromSqlKey <span class="op">$</span> entityKey e) labelMap)</span>
<span id="cb11-23"><a href="#cb11-23" aria-hidden="true" tabindex="-1"></a>  )</span>
<span id="cb11-24"><a href="#cb11-24" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb11-25"><a href="#cb11-25" aria-hidden="true" tabindex="-1"></a><span class="ot">toLabelIdsMap ::</span> [<span class="dt">ExpenseLabelRel</span>] <span class="ot">-&gt;</span> <span class="dt">Map</span> <span class="dt">ExpenseId</span> (<span class="dt">Set</span> <span class="dt">LabelId</span>)</span>
<span id="cb11-26"><a href="#cb11-26" aria-hidden="true" tabindex="-1"></a>toLabelIdsMap <span class="ot">=</span> </span>
<span id="cb11-27"><a href="#cb11-27" aria-hidden="true" tabindex="-1"></a>  Map.fromListWith (<span class="op">&lt;&gt;</span>) <span class="op">.</span> <span class="fu">fmap</span> (\(<span class="dt">ExpenseLabelRel</span> eid lid) <span class="ot">-&gt;</span> (fromSqlKey eid, Set.singleton <span class="op">$</span> fromSqlKey lid))</span></code></pre></div>
<p><code>IN</code> 句には1000個を超える要素は渡せないが，まぁここはとりあえずあとで直す．</p>
<h2 id="テストを書く">テストを書く</h2>
<p>テストには <a href="https://hackage.haskell.org/package/tasty">tasty</a> を利用している． テストの用の <code>Env</code> を定義する：</p>
<div class="sourceCode" id="cb12"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span id="cb12-1"><a href="#cb12-1" aria-hidden="true" tabindex="-1"></a><span class="kw">type</span> <span class="dt">TestEnv</span> <span class="ot">=</span> <span class="dt">Record</span></span>
<span id="cb12-2"><a href="#cb12-2" aria-hidden="true" tabindex="-1"></a>  &#39;[ <span class="st">&quot;logger&quot;</span> <span class="op">&gt;:</span> <span class="dt">LogFunc</span></span>
<span id="cb12-3"><a href="#cb12-3" aria-hidden="true" tabindex="-1"></a>   , <span class="st">&quot;sqlite&quot;</span> <span class="op">&gt;:</span> <span class="dt">MixDB.Config</span></span>
<span id="cb12-4"><a href="#cb12-4" aria-hidden="true" tabindex="-1"></a>   ]</span>
<span id="cb12-5"><a href="#cb12-5" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb12-6"><a href="#cb12-6" aria-hidden="true" tabindex="-1"></a><span class="ot">mkPlugin ::</span> <span class="dt">Text</span> <span class="ot">-&gt;</span> <span class="dt">Mix.Plugin</span> a m <span class="dt">TestEnv</span></span>
<span id="cb12-7"><a href="#cb12-7" aria-hidden="true" tabindex="-1"></a>mkPlugin path <span class="ot">=</span> hsequence</span>
<span id="cb12-8"><a href="#cb12-8" aria-hidden="true" tabindex="-1"></a>   <span class="op">$</span> <span class="op">#</span>logger <span class="op">&lt;@=&gt;</span> <span class="fu">pure</span> (mkLogFunc <span class="op">$</span> \_ _ _ _ <span class="ot">-&gt;</span> <span class="fu">pure</span> ()) <span class="co">-- NoLogging</span></span>
<span id="cb12-9"><a href="#cb12-9" aria-hidden="true" tabindex="-1"></a>  <span class="op">&lt;:</span> <span class="op">#</span>sqlite <span class="op">&lt;@=&gt;</span> MixDB.buildPluginWithoutPool path</span>
<span id="cb12-10"><a href="#cb12-10" aria-hidden="true" tabindex="-1"></a>  <span class="op">&lt;:</span> nil</span></code></pre></div>
<p>ロギングは要らないので何もしないロギングを渡しておく． ローカルの一時的なパスを指定してマイグレーションをするようにする：</p>
<div class="sourceCode" id="cb13"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span id="cb13-1"><a href="#cb13-1" aria-hidden="true" tabindex="-1"></a><span class="kw">import</span>           <span class="dt">Test.Tasty</span></span>
<span id="cb13-2"><a href="#cb13-2" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb13-3"><a href="#cb13-3" aria-hidden="true" tabindex="-1"></a><span class="ot">withMigrateOn ::</span> <span class="dt">MonadUnliftIO</span> m <span class="ot">=&gt;</span> <span class="dt">Text</span> <span class="ot">-&gt;</span> m <span class="dt">TestTree</span> <span class="ot">-&gt;</span> m <span class="dt">TestTree</span></span>
<span id="cb13-4"><a href="#cb13-4" aria-hidden="true" tabindex="-1"></a>withMigrateOn path spec <span class="ot">=</span></span>
<span id="cb13-5"><a href="#cb13-5" aria-hidden="true" tabindex="-1"></a>  bracket</span>
<span id="cb13-6"><a href="#cb13-6" aria-hidden="true" tabindex="-1"></a>    migrateForTest</span>
<span id="cb13-7"><a href="#cb13-7" aria-hidden="true" tabindex="-1"></a>    (\_ <span class="ot">-&gt;</span> removeFile <span class="op">$</span> Text.unpack path)</span>
<span id="cb13-8"><a href="#cb13-8" aria-hidden="true" tabindex="-1"></a>    (<span class="fu">const</span> spec)</span>
<span id="cb13-9"><a href="#cb13-9" aria-hidden="true" tabindex="-1"></a>  <span class="kw">where</span></span>
<span id="cb13-10"><a href="#cb13-10" aria-hidden="true" tabindex="-1"></a>    migrateForTest <span class="ot">=</span> <span class="kw">do</span></span>
<span id="cb13-11"><a href="#cb13-11" aria-hidden="true" tabindex="-1"></a>      createDirectoryIfMissing <span class="dt">True</span> (takeDirectory <span class="op">$</span> Text.unpack path)</span>
<span id="cb13-12"><a href="#cb13-12" aria-hidden="true" tabindex="-1"></a>      Mix.run (mkPlugin path) (MixDB.runMigrate migrateAll)</span></code></pre></div>
<p><code>bracket</code> を利用して最後には SQLite のファイルごと削除するようにした． ちなみに，Persistent の SQLite の設定には <code>:memory:</code> というオンメモリで動作するものもある． しかしこれは一つの <code>Mix.run</code> でしか共有できないため今回は使いにくい． なので，愚直に一時的なテストファイルを作成することにした．</p>
<h1 id="section-1"></h1>
<p>テスト自体はこんな感じ：</p>
<div class="sourceCode" id="cb14"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span id="cb14-1"><a href="#cb14-1" aria-hidden="true" tabindex="-1"></a><span class="ot">tests ::</span> <span class="dt">IO</span> <span class="dt">TestTree</span></span>
<span id="cb14-2"><a href="#cb14-2" aria-hidden="true" tabindex="-1"></a>tests <span class="ot">=</span> withMigrateOn dbPath <span class="op">$</span></span>
<span id="cb14-3"><a href="#cb14-3" aria-hidden="true" tabindex="-1"></a>  testSpec <span class="st">&quot;Homely.DB&quot;</span> <span class="op">$</span> <span class="kw">do</span></span>
<span id="cb14-4"><a href="#cb14-4" aria-hidden="true" tabindex="-1"></a>    describe <span class="st">&quot;selectExpensesByMonth&quot;</span> <span class="op">$</span> <span class="kw">do</span></span>
<span id="cb14-5"><a href="#cb14-5" aria-hidden="true" tabindex="-1"></a>      context <span class="st">&quot;with label&quot;</span> <span class="op">$</span> <span class="kw">do</span></span>
<span id="cb14-6"><a href="#cb14-6" aria-hidden="true" tabindex="-1"></a>        <span class="kw">let</span> label1 <span class="ot">=</span> <span class="op">#</span>name <span class="op">@=</span> <span class="st">&quot;hoge&quot;</span> <span class="op">&lt;:</span> <span class="op">#</span>description <span class="op">@=</span> <span class="st">&quot;hogege&quot;</span> <span class="op">&lt;:</span> nil</span>
<span id="cb14-7"><a href="#cb14-7" aria-hidden="true" tabindex="-1"></a>            label2 <span class="ot">=</span> <span class="op">#</span>name <span class="op">@=</span> <span class="st">&quot;fuga&quot;</span> <span class="op">&lt;:</span> <span class="op">#</span>description <span class="op">@=</span> <span class="st">&quot;fugaga&quot;</span> <span class="op">&lt;:</span> nil</span>
<span id="cb14-8"><a href="#cb14-8" aria-hidden="true" tabindex="-1"></a>        labelIds <span class="ot">&lt;-</span> runIO <span class="op">$</span> runWithDB <span class="op">$</span> Set.fromList <span class="op">&lt;$&gt;</span> <span class="fu">mapM</span> insertLabel [label1, label2]</span>
<span id="cb14-9"><a href="#cb14-9" aria-hidden="true" tabindex="-1"></a>        <span class="kw">let</span> expect1 <span class="ot">=</span> <span class="op">#</span>amount      <span class="op">@=</span> <span class="dv">1000</span></span>
<span id="cb14-10"><a href="#cb14-10" aria-hidden="true" tabindex="-1"></a>                   <span class="op">&lt;:</span> <span class="op">#</span>date        <span class="op">@=</span> fromGregorian <span class="dv">2021</span> <span class="dv">3</span> <span class="dv">21</span></span>
<span id="cb14-11"><a href="#cb14-11" aria-hidden="true" tabindex="-1"></a>                   <span class="op">&lt;:</span> <span class="op">#</span>description <span class="op">@=</span> <span class="st">&quot;test&quot;</span></span>
<span id="cb14-12"><a href="#cb14-12" aria-hidden="true" tabindex="-1"></a>                   <span class="op">&lt;:</span> <span class="op">#</span>labels      <span class="op">@=</span> labelIds</span>
<span id="cb14-13"><a href="#cb14-13" aria-hidden="true" tabindex="-1"></a>                   <span class="op">&lt;:</span> nil</span>
<span id="cb14-14"><a href="#cb14-14" aria-hidden="true" tabindex="-1"></a>            expect2 <span class="ot">=</span> <span class="op">#</span>amount      <span class="op">@=</span> <span class="dv">3000</span></span>
<span id="cb14-15"><a href="#cb14-15" aria-hidden="true" tabindex="-1"></a>                   <span class="op">&lt;:</span> <span class="op">#</span>date        <span class="op">@=</span> fromGregorian <span class="dv">2021</span> <span class="dv">3</span> <span class="dv">22</span></span>
<span id="cb14-16"><a href="#cb14-16" aria-hidden="true" tabindex="-1"></a>                   <span class="op">&lt;:</span> <span class="op">#</span>description <span class="op">@=</span> <span class="st">&quot;test&quot;</span></span>
<span id="cb14-17"><a href="#cb14-17" aria-hidden="true" tabindex="-1"></a>                   <span class="op">&lt;:</span> <span class="op">#</span>labels      <span class="op">@=</span> Set.take <span class="dv">1</span> labelIds</span>
<span id="cb14-18"><a href="#cb14-18" aria-hidden="true" tabindex="-1"></a>                   <span class="op">&lt;:</span> nil</span>
<span id="cb14-19"><a href="#cb14-19" aria-hidden="true" tabindex="-1"></a>        actual <span class="ot">&lt;-</span> runIO <span class="op">$</span> runWithDB <span class="op">$</span> <span class="kw">do</span></span>
<span id="cb14-20"><a href="#cb14-20" aria-hidden="true" tabindex="-1"></a>          idx1 <span class="ot">&lt;-</span> insertExpense expect1</span>
<span id="cb14-21"><a href="#cb14-21" aria-hidden="true" tabindex="-1"></a>          idx2 <span class="ot">&lt;-</span> insertExpense expect2</span>
<span id="cb14-22"><a href="#cb14-22" aria-hidden="true" tabindex="-1"></a>          es <span class="ot">&lt;-</span> selectExpensesByMonth (<span class="dv">2021</span>, <span class="dv">3</span>)</span>
<span id="cb14-23"><a href="#cb14-23" aria-hidden="true" tabindex="-1"></a>          deleteExpenseById idx1</span>
<span id="cb14-24"><a href="#cb14-24" aria-hidden="true" tabindex="-1"></a>          deleteExpenseById idx2</span>
<span id="cb14-25"><a href="#cb14-25" aria-hidden="true" tabindex="-1"></a>          <span class="fu">mapM_</span> deleteLabelById <span class="op">$</span> Set.toList labelIds</span>
<span id="cb14-26"><a href="#cb14-26" aria-hidden="true" tabindex="-1"></a>          <span class="fu">pure</span> es</span>
<span id="cb14-27"><a href="#cb14-27" aria-hidden="true" tabindex="-1"></a>        it <span class="st">&quot;insert Expense&quot;</span> <span class="op">$</span></span>
<span id="cb14-28"><a href="#cb14-28" aria-hidden="true" tabindex="-1"></a>          Map.elems actual <span class="ot">`shouldBe`</span> [expect1, expect2]</span>
<span id="cb14-29"><a href="#cb14-29" aria-hidden="true" tabindex="-1"></a>  <span class="kw">where</span></span>
<span id="cb14-30"><a href="#cb14-30" aria-hidden="true" tabindex="-1"></a>    dbPath <span class="ot">=</span> <span class="st">&quot;./tmp/test.sqlite&quot;</span></span>
<span id="cb14-31"><a href="#cb14-31" aria-hidden="true" tabindex="-1"></a><span class="ot">    runWithDB ::</span> <span class="dt">RIO</span> <span class="dt">TestEnv</span> a <span class="ot">-&gt;</span> <span class="dt">IO</span> a</span>
<span id="cb14-32"><a href="#cb14-32" aria-hidden="true" tabindex="-1"></a>    runWithDB <span class="ot">=</span> Mix.run (mkPlugin dbPath)</span></code></pre></div>
<p>他のテストへ干渉しないように，一度作ったデータは毎回削除するようにしている． ここはまぁなんか良い方法がないかおいおい考えます．</p>
<h2 id="おしまい">おしまい</h2>
<p>果たしていつ完成するのやら．</p>]]></content>
    </entry>
    <entry>
        <title>Haskell のための自作 Docker イメージを GitHub Container Registry に移行する</title>
        <link href="https://matsubara0507.github.ioposts/2021-02-21-replace-haskell-docker-images-to-ghcr.html"/>
        <id>https://matsubara0507.github.ioposts/2021-02-21-replace-haskell-docker-images-to-ghcr.html</id>
        <updated>2021-02-21T00:00:SZ</updated>
        <category term="Docker"/>
        <category term="GitHub-Actions"/>
        <summary></summary>
        <content type="html"><![CDATA[<p>Haskell Stack の Docker Integration などで個人的に使う Docker イメージを自作しています． その雛形を下記のリポジトリで管理していました：</p>
<iframe width="320" height="163" scrolling="no" frameborder="0" src="https://matsubara0507.github.io/my-github-cards/?target=matsubara0507/haskell-dockerfiles" >
</iframe>
<p>これは TravisCI で Docker イメージのビルドとプッシュをし，Docker Hub にイメージを置いてあります． しかし，<a href="https://blog.travis-ci.com/2020-11-02-travis-ci-new-billing">TravisCI は料金プランが大幅改定されて OSS であっても専用のプランに申し込まないと無料で使えなくなってしまいました</a>． また，Docker Hub に関しては無料枠の場合は使われていないイメージ（確か6ヶ月プルされてないイメージ）がだんだん消されていく使用に変わりました．</p>
<p>なので，今回は TravisCI の代わりに GitHub Actions へ，Docker Hub の代わりに GitHub Container Registry へ移行することにしました．</p>
<h2 id="cicd-でやっていたこと">CI/CD でやっていたこと</h2>
<p>元々，matsubara0507/stack-build のイメージだけ定期的に更新していた． Stack の Docker Integration では，Docker のイメージタグの指定がない場合は resolver をタグの代わりにする：</p>
<div class="sourceCode" id="cb1"><pre class="sourceCode yaml"><code class="sourceCode yaml"><span id="cb1-1"><a href="#cb1-1" aria-hidden="true" tabindex="-1"></a><span class="fu">resolver</span><span class="kw">:</span><span class="at"> lts-17.4</span></span>
<span id="cb1-2"><a href="#cb1-2" aria-hidden="true" tabindex="-1"></a><span class="fu">packages</span><span class="kw">:</span></span>
<span id="cb1-3"><a href="#cb1-3" aria-hidden="true" tabindex="-1"></a><span class="kw">-</span><span class="at"> .</span></span>
<span id="cb1-4"><a href="#cb1-4" aria-hidden="true" tabindex="-1"></a><span class="fu">extra-deps</span><span class="kw">:</span><span class="at"> </span><span class="kw">[]</span></span>
<span id="cb1-5"><a href="#cb1-5" aria-hidden="true" tabindex="-1"></a><span class="fu">docker</span><span class="kw">:</span></span>
<span id="cb1-6"><a href="#cb1-6" aria-hidden="true" tabindex="-1"></a><span class="at">  </span><span class="fu">repo</span><span class="kw">:</span><span class="at"> matsubara0507/stack-build</span></span>
<span id="cb1-7"><a href="#cb1-7" aria-hidden="true" tabindex="-1"></a><span class="at">  </span><span class="fu">enable</span><span class="kw">:</span><span class="at"> </span><span class="ch">false</span></span></code></pre></div>
<p>この場合，<code>stack --docker build</code> で利用するイメージは Docker Hub 上の <code>matsubara0507/stack-build:lts-17.4</code> になる． <code>docker.repo</code> にタグまで含ませた場合はタグまで含んだイメージを利用する．</p>
<p>Stack を開発している fpco が出してるイメージは resolver 毎にタグを作って Docker Hub に上げてあったので，それを真似して自分も resolver 毎にタグを作っていた． <a href="https://github.com/matsubara0507/dockwright">dockwright</a> というツールと TravisCI の定期実行を利用して Stackage に resolver が追加されるたびに自動で新しいタグを生成していた． しかし，タグだけが変わって中身は変わってないので GitHub Container Registry にするついでに，この方法を止めることにした．</p>
<h1 id="section"></h1>
<p>また，dockwright の機能を利用して Dockerfile でインストールする Haskell Stack のバージョンを自動で更新していた．</p>
<h2 id="github-actions-ですること">GitHub Actions ですること</h2>
<p>以下の2つをする</p>
<ul>
<li>PR や master の更新で Docker イメージを GitHub Container Registry にビルド・プッシュ</li>
<li>Dockerfile でインストールする Haskell Stack のバージョンを定期的に自動更新</li>
</ul>
<p>作業 PR は<a href="https://github.com/matsubara0507/haskell-dockerfiles/pull/1">こちら</a>．</p>
<h3 id="docker-イメージのビルドプッシュ">Docker イメージのビルド・プッシュ</h3>
<p>haskell-dockerfiles では以下の複数のイメージを管理していた：</p>
<ul>
<li>matsubara0507/stack-build
<ul>
<li>ビルドするときに利用する</li>
</ul></li>
<li>matsubara0507/ubuntu-for-haskell
<ul>
<li>Haskellアプリケーションを Docker イメージ化するときのベースイメージ</li>
<li>git コマンドも入った <code>git</code> タグもある</li>
</ul></li>
</ul>
<p>それぞれ別の Dockerfile で管理しているので，適当に matrix にして分けてあげる：</p>
<div class="sourceCode" id="cb2"><pre class="sourceCode yaml"><code class="sourceCode yaml"><span id="cb2-1"><a href="#cb2-1" aria-hidden="true" tabindex="-1"></a><span class="fu">name</span><span class="kw">:</span><span class="at"> Build docker images</span></span>
<span id="cb2-2"><a href="#cb2-2" aria-hidden="true" tabindex="-1"></a><span class="co"># ...</span></span>
<span id="cb2-3"><a href="#cb2-3" aria-hidden="true" tabindex="-1"></a><span class="fu">jobs</span><span class="kw">:</span></span>
<span id="cb2-4"><a href="#cb2-4" aria-hidden="true" tabindex="-1"></a><span class="at">  </span><span class="fu">build</span><span class="kw">:</span></span>
<span id="cb2-5"><a href="#cb2-5" aria-hidden="true" tabindex="-1"></a><span class="at">    </span><span class="fu">name</span><span class="kw">:</span><span class="at"> Build docker images for ${{ matrix.dir }}</span></span>
<span id="cb2-6"><a href="#cb2-6" aria-hidden="true" tabindex="-1"></a><span class="at">    </span><span class="fu">runs-on</span><span class="kw">:</span><span class="at"> ubuntu-18.04</span></span>
<span id="cb2-7"><a href="#cb2-7" aria-hidden="true" tabindex="-1"></a><span class="at">    </span><span class="fu">strategy</span><span class="kw">:</span></span>
<span id="cb2-8"><a href="#cb2-8" aria-hidden="true" tabindex="-1"></a><span class="at">      </span><span class="fu">fail-fast</span><span class="kw">:</span><span class="at"> </span><span class="ch">false</span></span>
<span id="cb2-9"><a href="#cb2-9" aria-hidden="true" tabindex="-1"></a><span class="at">      </span><span class="fu">matrix</span><span class="kw">:</span></span>
<span id="cb2-10"><a href="#cb2-10" aria-hidden="true" tabindex="-1"></a><span class="at">        </span><span class="fu">dir</span><span class="kw">:</span></span>
<span id="cb2-11"><a href="#cb2-11" aria-hidden="true" tabindex="-1"></a><span class="at">        </span><span class="kw">-</span><span class="at"> </span><span class="st">&quot;stack-build&quot;</span></span>
<span id="cb2-12"><a href="#cb2-12" aria-hidden="true" tabindex="-1"></a><span class="at">        </span><span class="kw">-</span><span class="at"> </span><span class="st">&quot;ubuntu-for-haskell&quot;</span></span>
<span id="cb2-13"><a href="#cb2-13" aria-hidden="true" tabindex="-1"></a><span class="at">        </span><span class="kw">-</span><span class="at"> </span><span class="st">&quot;ubuntu-for-haskell-with-git&quot;</span></span>
<span id="cb2-14"><a href="#cb2-14" aria-hidden="true" tabindex="-1"></a><span class="at">    </span><span class="fu">steps</span><span class="kw">:</span></span>
<span id="cb2-15"><a href="#cb2-15" aria-hidden="true" tabindex="-1"></a><span class="co">    # ...</span></span>
<span id="cb2-16"><a href="#cb2-16" aria-hidden="true" tabindex="-1"></a><span class="at">    </span><span class="kw">-</span><span class="at"> </span><span class="fu">name</span><span class="kw">:</span><span class="at"> Build and push</span></span>
<span id="cb2-17"><a href="#cb2-17" aria-hidden="true" tabindex="-1"></a><span class="at">      </span><span class="fu">uses</span><span class="kw">:</span><span class="at"> docker/build-push-action@v2</span></span>
<span id="cb2-18"><a href="#cb2-18" aria-hidden="true" tabindex="-1"></a><span class="at">      </span><span class="fu">with</span><span class="kw">:</span></span>
<span id="cb2-19"><a href="#cb2-19" aria-hidden="true" tabindex="-1"></a><span class="at">        </span><span class="fu">context</span><span class="kw">:</span><span class="at"> ${{ matrix.dir }}</span></span>
<span id="cb2-20"><a href="#cb2-20" aria-hidden="true" tabindex="-1"></a><span class="at">        </span><span class="fu">builder</span><span class="kw">:</span><span class="at"> ${{ steps.buildx.outputs.name }}</span></span>
<span id="cb2-21"><a href="#cb2-21" aria-hidden="true" tabindex="-1"></a><span class="at">        </span><span class="fu">tags</span><span class="kw">:</span><span class="co"> # 問題はココ</span></span>
<span id="cb2-22"><a href="#cb2-22" aria-hidden="true" tabindex="-1"></a><span class="at">        </span><span class="fu">push</span><span class="kw">:</span><span class="at"> ${{ github.event_name != &#39;pull_request&#39; }}</span></span></code></pre></div>
<p>問題はタグだ． <code>stack-build</code> と <code>ubuntu-for-haskell</code> はそれぞれのディレクトリ名がイメージ名で <code>latest</code> と <code>18.04</code> タグを作って欲しい． <code>ubuntu-for-haskell-with-git</code> は <code>ubuntu-for-haskell:git</code> を作って欲しい． dockwright には設定ファイルからイメージタグを生成するコマンドがあるので，それを利用する：</p>
<div class="sourceCode" id="cb3"><pre class="sourceCode yaml"><code class="sourceCode yaml"><span id="cb3-1"><a href="#cb3-1" aria-hidden="true" tabindex="-1"></a><span class="co"># ubuntu-for-haskell/.dockwritht.yaml</span></span>
<span id="cb3-2"><a href="#cb3-2" aria-hidden="true" tabindex="-1"></a><span class="fu">image</span><span class="kw">:</span><span class="at"> </span><span class="st">&quot;matsubara0507/ubuntu-for-haskell&quot;</span></span>
<span id="cb3-3"><a href="#cb3-3" aria-hidden="true" tabindex="-1"></a><span class="fu">tags</span><span class="kw">:</span></span>
<span id="cb3-4"><a href="#cb3-4" aria-hidden="true" tabindex="-1"></a><span class="kw">-</span><span class="at"> </span><span class="fu">type</span><span class="kw">:</span><span class="at"> value</span></span>
<span id="cb3-5"><a href="#cb3-5" aria-hidden="true" tabindex="-1"></a><span class="at">  </span><span class="fu">keys</span><span class="kw">:</span></span>
<span id="cb3-6"><a href="#cb3-6" aria-hidden="true" tabindex="-1"></a><span class="at">  </span><span class="kw">-</span><span class="at"> latest</span></span>
<span id="cb3-7"><a href="#cb3-7" aria-hidden="true" tabindex="-1"></a><span class="at">  </span><span class="kw">-</span><span class="at"> </span><span class="st">&quot;18.04&quot;</span></span>
<span id="cb3-8"><a href="#cb3-8" aria-hidden="true" tabindex="-1"></a><span class="at">  </span><span class="fu">always</span><span class="kw">:</span><span class="at"> </span><span class="ch">true</span></span></code></pre></div>
<div class="sourceCode" id="cb4"><pre class="sourceCode yaml"><code class="sourceCode yaml"><span id="cb4-1"><a href="#cb4-1" aria-hidden="true" tabindex="-1"></a><span class="co"># ubuntu-for-haskell-with-git/.dockwritht.yaml</span></span>
<span id="cb4-2"><a href="#cb4-2" aria-hidden="true" tabindex="-1"></a><span class="fu">image</span><span class="kw">:</span><span class="at"> </span><span class="st">&quot;matsubara0507/ubuntu-for-haskell&quot;</span></span>
<span id="cb4-3"><a href="#cb4-3" aria-hidden="true" tabindex="-1"></a><span class="fu">tags</span><span class="kw">:</span></span>
<span id="cb4-4"><a href="#cb4-4" aria-hidden="true" tabindex="-1"></a><span class="kw">-</span><span class="at"> </span><span class="fu">type</span><span class="kw">:</span><span class="at"> value</span></span>
<span id="cb4-5"><a href="#cb4-5" aria-hidden="true" tabindex="-1"></a><span class="at">  </span><span class="fu">keys</span><span class="kw">:</span></span>
<span id="cb4-6"><a href="#cb4-6" aria-hidden="true" tabindex="-1"></a><span class="at">  </span><span class="kw">-</span><span class="at"> git</span></span>
<span id="cb4-7"><a href="#cb4-7" aria-hidden="true" tabindex="-1"></a><span class="at">  </span><span class="fu">always</span><span class="kw">:</span><span class="at"> </span><span class="ch">true</span></span></code></pre></div>
<p>で，この設定ファイルでコマンドを実行すると：</p>
<div class="sourceCode" id="cb5"><pre class="sourceCode sh"><code class="sourceCode bash"><span id="cb5-1"><a href="#cb5-1" aria-hidden="true" tabindex="-1"></a><span class="ex">$</span> dockwright ubuntu-for-haskell/.dockwright.yaml <span class="at">--new-tags</span> <span class="at">--with-name</span></span>
<span id="cb5-2"><a href="#cb5-2" aria-hidden="true" tabindex="-1"></a><span class="ex">matsubara0507/ubuntu-for-haskell:18.04</span></span>
<span id="cb5-3"><a href="#cb5-3" aria-hidden="true" tabindex="-1"></a><span class="ex">matsubara0507/ubuntu-for-haskell:latest</span></span>
<span id="cb5-4"><a href="#cb5-4" aria-hidden="true" tabindex="-1"></a><span class="ex">$</span> dockwright ubuntu-for-haskell-with-git/.dockwright.yaml <span class="at">--new-tags</span> <span class="at">--with-name</span></span>
<span id="cb5-5"><a href="#cb5-5" aria-hidden="true" tabindex="-1"></a><span class="ex">matsubara0507/ubuntu-for-haskell:git</span></span></code></pre></div>
<p>となる． あとはいい感じに GitHub Actions の output 機能へ渡してあげる：</p>
<div class="sourceCode" id="cb6"><pre class="sourceCode yaml"><code class="sourceCode yaml"><span id="cb6-1"><a href="#cb6-1" aria-hidden="true" tabindex="-1"></a><span class="co"># ...</span></span>
<span id="cb6-2"><a href="#cb6-2" aria-hidden="true" tabindex="-1"></a><span class="at">    </span><span class="fu">steps</span><span class="kw">:</span></span>
<span id="cb6-3"><a href="#cb6-3" aria-hidden="true" tabindex="-1"></a><span class="co">    # ...</span></span>
<span id="cb6-4"><a href="#cb6-4" aria-hidden="true" tabindex="-1"></a><span class="at">    </span><span class="kw">-</span><span class="at"> </span><span class="fu">name</span><span class="kw">:</span><span class="at"> Prepare</span></span>
<span id="cb6-5"><a href="#cb6-5" aria-hidden="true" tabindex="-1"></a><span class="at">      </span><span class="fu">id</span><span class="kw">:</span><span class="at"> prep</span></span>
<span id="cb6-6"><a href="#cb6-6" aria-hidden="true" tabindex="-1"></a><span class="fu">      run</span><span class="kw">: </span><span class="ch">|</span></span>
<span id="cb6-7"><a href="#cb6-7" aria-hidden="true" tabindex="-1"></a>        TAGS=$(make -s new-tags dir=${{ matrix.dir }} | xargs -ITAG printf &quot;,ghcr.io/TAG&quot;)</span>
<span id="cb6-8"><a href="#cb6-8" aria-hidden="true" tabindex="-1"></a>        echo ::set-output name=tags::${TAGS#,}</span>
<span id="cb6-9"><a href="#cb6-9" aria-hidden="true" tabindex="-1"></a><span class="co">    # ...</span></span>
<span id="cb6-10"><a href="#cb6-10" aria-hidden="true" tabindex="-1"></a><span class="at">    </span><span class="kw">-</span><span class="at"> </span><span class="fu">name</span><span class="kw">:</span><span class="at"> Build and push</span></span>
<span id="cb6-11"><a href="#cb6-11" aria-hidden="true" tabindex="-1"></a><span class="at">      </span><span class="fu">uses</span><span class="kw">:</span><span class="at"> docker/build-push-action@v2</span></span>
<span id="cb6-12"><a href="#cb6-12" aria-hidden="true" tabindex="-1"></a><span class="at">      </span><span class="fu">with</span><span class="kw">:</span></span>
<span id="cb6-13"><a href="#cb6-13" aria-hidden="true" tabindex="-1"></a><span class="at">        </span><span class="fu">context</span><span class="kw">:</span><span class="at"> ${{ matrix.dir }}</span></span>
<span id="cb6-14"><a href="#cb6-14" aria-hidden="true" tabindex="-1"></a><span class="at">        </span><span class="fu">builder</span><span class="kw">:</span><span class="at"> ${{ steps.buildx.outputs.name }}</span></span>
<span id="cb6-15"><a href="#cb6-15" aria-hidden="true" tabindex="-1"></a><span class="at">        </span><span class="fu">tags</span><span class="kw">:</span><span class="at"> ${{ steps.prep.outputs.tags }}</span></span>
<span id="cb6-16"><a href="#cb6-16" aria-hidden="true" tabindex="-1"></a><span class="at">        </span><span class="fu">push</span><span class="kw">:</span><span class="at"> ${{ github.event_name != &#39;pull_request&#39; }}</span></span></code></pre></div>
<p><code>make</code> は <code>dockwright</code> のコマンドを情略しているだけ． 結果をいい感じに <code>,</code> 区切りでつなげるのに手間取った．</p>
<h3 id="stack-のバージョンを定期的に自動更新">Stack のバージョンを定期的に自動更新</h3>
<p>こっちはもっと簡単． Dockerfile を生成したいのは stack-build だけなので適当に設定をして（ここは割愛），コマンドを実行するだけ：</p>
<div class="sourceCode" id="cb7"><pre class="sourceCode yaml"><code class="sourceCode yaml"><span id="cb7-1"><a href="#cb7-1" aria-hidden="true" tabindex="-1"></a><span class="fu">name</span><span class="kw">:</span><span class="at"> Update Dockerfile</span></span>
<span id="cb7-2"><a href="#cb7-2" aria-hidden="true" tabindex="-1"></a><span class="fu">on</span><span class="kw">:</span></span>
<span id="cb7-3"><a href="#cb7-3" aria-hidden="true" tabindex="-1"></a><span class="at">  </span><span class="fu">schedule</span><span class="kw">:</span></span>
<span id="cb7-4"><a href="#cb7-4" aria-hidden="true" tabindex="-1"></a><span class="at">  </span><span class="kw">-</span><span class="at"> </span><span class="fu">cron</span><span class="kw">:</span><span class="at"> </span><span class="st">&#39;0 0 * * *&#39;</span></span>
<span id="cb7-5"><a href="#cb7-5" aria-hidden="true" tabindex="-1"></a><span class="fu">jobs</span><span class="kw">:</span></span>
<span id="cb7-6"><a href="#cb7-6" aria-hidden="true" tabindex="-1"></a><span class="at">  </span><span class="fu">update</span><span class="kw">:</span></span>
<span id="cb7-7"><a href="#cb7-7" aria-hidden="true" tabindex="-1"></a><span class="at">    </span><span class="fu">name</span><span class="kw">:</span><span class="at"> Update Dockerfile for ${{ matrix.dir }}</span></span>
<span id="cb7-8"><a href="#cb7-8" aria-hidden="true" tabindex="-1"></a><span class="at">    </span><span class="fu">runs-on</span><span class="kw">:</span><span class="at"> ubuntu-18.04</span></span>
<span id="cb7-9"><a href="#cb7-9" aria-hidden="true" tabindex="-1"></a><span class="at">    </span><span class="fu">strategy</span><span class="kw">:</span></span>
<span id="cb7-10"><a href="#cb7-10" aria-hidden="true" tabindex="-1"></a><span class="at">      </span><span class="fu">fail-fast</span><span class="kw">:</span><span class="at"> </span><span class="ch">false</span></span>
<span id="cb7-11"><a href="#cb7-11" aria-hidden="true" tabindex="-1"></a><span class="at">      </span><span class="fu">matrix</span><span class="kw">:</span></span>
<span id="cb7-12"><a href="#cb7-12" aria-hidden="true" tabindex="-1"></a><span class="at">        </span><span class="fu">dir</span><span class="kw">:</span></span>
<span id="cb7-13"><a href="#cb7-13" aria-hidden="true" tabindex="-1"></a><span class="at">        </span><span class="kw">-</span><span class="at"> stack-build</span></span>
<span id="cb7-14"><a href="#cb7-14" aria-hidden="true" tabindex="-1"></a><span class="at">    </span><span class="fu">steps</span><span class="kw">:</span></span>
<span id="cb7-15"><a href="#cb7-15" aria-hidden="true" tabindex="-1"></a><span class="at">    </span><span class="kw">-</span><span class="at"> </span><span class="fu">uses</span><span class="kw">:</span><span class="at"> actions/checkout@v2</span></span>
<span id="cb7-16"><a href="#cb7-16" aria-hidden="true" tabindex="-1"></a><span class="at">    </span><span class="kw">-</span><span class="at"> </span><span class="fu">name</span><span class="kw">:</span><span class="at"> Build Dockerfile</span></span>
<span id="cb7-17"><a href="#cb7-17" aria-hidden="true" tabindex="-1"></a><span class="at">      </span><span class="fu">run</span><span class="kw">:</span><span class="at"> make dockerfile dir=${{ matrix.dir }}</span></span>
<span id="cb7-18"><a href="#cb7-18" aria-hidden="true" tabindex="-1"></a><span class="at">    </span><span class="kw">-</span><span class="at"> </span><span class="fu">name</span><span class="kw">:</span><span class="at"> Push changes</span></span>
<span id="cb7-19"><a href="#cb7-19" aria-hidden="true" tabindex="-1"></a><span class="fu">      run</span><span class="kw">: </span><span class="ch">|</span></span>
<span id="cb7-20"><a href="#cb7-20" aria-hidden="true" tabindex="-1"></a>        git config --local user.email &quot;bot@example.com&quot;</span>
<span id="cb7-21"><a href="#cb7-21" aria-hidden="true" tabindex="-1"></a>        git config --local user.name &quot;Bot&quot;</span>
<span id="cb7-22"><a href="#cb7-22" aria-hidden="true" tabindex="-1"></a>        git status</span>
<span id="cb7-23"><a href="#cb7-23" aria-hidden="true" tabindex="-1"></a>        git add -A</span>
<span id="cb7-24"><a href="#cb7-24" aria-hidden="true" tabindex="-1"></a>        git diff --staged --quiet || git commit -m &quot;[skip ci] Update Dockerfile for ${{ matrix.dir }}&quot;</span>
<span id="cb7-25"><a href="#cb7-25" aria-hidden="true" tabindex="-1"></a>        git push origin master</span></code></pre></div>
<p>GitHub Actions は自身のリポジトリへのコミットも簡単．</p>
<h2 id="github-containr-registry-へプッシュ">GitHub Containr Registry へプッシュ</h2>
<p>GitHub Actions から GitHub Container Registry へプッシュするには <code>docker/login-action</code> アクションを使うだけ：</p>
<div class="sourceCode" id="cb8"><pre class="sourceCode yaml"><code class="sourceCode yaml"><span id="cb8-1"><a href="#cb8-1" aria-hidden="true" tabindex="-1"></a><span class="fu">name</span><span class="kw">:</span><span class="at"> Build docker images</span></span>
<span id="cb8-2"><a href="#cb8-2" aria-hidden="true" tabindex="-1"></a><span class="co"># ...</span></span>
<span id="cb8-3"><a href="#cb8-3" aria-hidden="true" tabindex="-1"></a><span class="at">    </span><span class="fu">steps</span><span class="kw">:</span></span>
<span id="cb8-4"><a href="#cb8-4" aria-hidden="true" tabindex="-1"></a><span class="at">    ...</span></span>
<span id="cb8-5"><a href="#cb8-5" aria-hidden="true" tabindex="-1"></a><span class="at">    </span><span class="kw">-</span><span class="at"> </span><span class="fu">name</span><span class="kw">:</span><span class="at"> Login to GitHub Container Registry</span></span>
<span id="cb8-6"><a href="#cb8-6" aria-hidden="true" tabindex="-1"></a><span class="at">      </span><span class="fu">uses</span><span class="kw">:</span><span class="at"> docker/login-action@v1</span></span>
<span id="cb8-7"><a href="#cb8-7" aria-hidden="true" tabindex="-1"></a><span class="at">      </span><span class="fu">with</span><span class="kw">:</span></span>
<span id="cb8-8"><a href="#cb8-8" aria-hidden="true" tabindex="-1"></a><span class="at">        </span><span class="fu">registry</span><span class="kw">:</span><span class="at"> ghcr.io</span></span>
<span id="cb8-9"><a href="#cb8-9" aria-hidden="true" tabindex="-1"></a><span class="at">        </span><span class="fu">username</span><span class="kw">:</span><span class="at"> matsubara0507</span></span>
<span id="cb8-10"><a href="#cb8-10" aria-hidden="true" tabindex="-1"></a><span class="at">        </span><span class="fu">password</span><span class="kw">:</span><span class="at"> ${{ secrets.CR_PAT }}</span></span></code></pre></div>
<p>GitHub Actions にデフォルトで設定されているトークンでは GitHub Container Registry へプッシュできない． なので，個別に Personal Access Token を生成し，<code>write:packages</code> 権限を与えてシークレットに設定する必要がある．</p>
<p>実際にプッシュしたのがこちら：</p>
<ul>
<li><a href="https://github.com/users/matsubara0507/packages/container/package/stack-build">matsubara0507/stack-build</a></li>
<li><a href="https://github.com/users/matsubara0507/packages/container/package/ubuntu-for-haskell">matsubara0507/ubuntu-for-haskell</a></li>
</ul>
<p>デフォルトはプライベートになってしまうので，あとで手動でパブリックにしてあげる必要がある．</p>
<h2 id="おまけstack-で-docker-pull-できない">おまけ：stack で docker pull できない</h2>
<p>試しに Stack の Docker Integration してみたら：</p>
<div class="sourceCode" id="cb9"><pre class="sourceCode sh"><code class="sourceCode bash"><span id="cb9-1"><a href="#cb9-1" aria-hidden="true" tabindex="-1"></a><span class="ex">$</span> stack <span class="at">--docker</span> build</span>
<span id="cb9-2"><a href="#cb9-2" aria-hidden="true" tabindex="-1"></a><span class="ex">Pulling</span> image from registry: <span class="st">&#39;ghcr.io/matsubara0507/stack-build:18.04&#39;</span></span>
<span id="cb9-3"><a href="#cb9-3" aria-hidden="true" tabindex="-1"></a><span class="ex">fork/exec</span> /usr/local/bin/com.docker.cli: bad file descriptor</span>
<span id="cb9-4"><a href="#cb9-4" aria-hidden="true" tabindex="-1"></a><span class="ex">Could</span> not pull Docker image:</span>
<span id="cb9-5"><a href="#cb9-5" aria-hidden="true" tabindex="-1"></a>    <span class="ex">ghcr.io/matsubara0507/stack-build:18.04</span></span>
<span id="cb9-6"><a href="#cb9-6" aria-hidden="true" tabindex="-1"></a><span class="ex">There</span> may not be an image on the registry for your resolver<span class="st">&#39;s LTS version in</span></span>
<span id="cb9-7"><a href="#cb9-7" aria-hidden="true" tabindex="-1"></a><span class="st">your configuration file.</span></span></code></pre></div>
<p>よくわからないが，<code>docker login</code> で事前にしてあるはずの認証結果がうまく渡せてないっぽい？？ とりあえず，先に <code>docker pull</code> しておけばそれを利用してくれるので，その方法で回避してください．</p>
<h2 id="おまけdockwright-の更新">おまけ：dockwright の更新</h2>
<p>ついでに dockwright も更新した（<a href="https://github.com/matsubara0507/dockwright/pull/4">作業PR</a>）：</p>
<ul>
<li>CI/CD を TravisCI から GitHub Actions へ移行</li>
<li>Container Registry を Docker Hub から GitHub Container Registry に移行</li>
<li>resolver を lts-14.4 から lts-17.4 にアップデート</li>
</ul>
<p>resolver が上がった結果 req パッケージと language-docker パッケージ関連で修正を入れた． req は URL の文字列を req で使えるようにパースする関数が変わり，<a href="https://hackage.haskell.org/package/modern-uri">modern-uri</a> パッケージを使うようになった：</p>
<div class="sourceCode" id="cb10"><pre class="sourceCode diff"><code class="sourceCode diff"><span id="cb10-1"><a href="#cb10-1" aria-hidden="true" tabindex="-1"></a>        tags &lt;- runReq defaultHttpConfig (responseBody &lt;$&gt; buildReq opts)</span>
<span id="cb10-2"><a href="#cb10-2" aria-hidden="true" tabindex="-1"></a>        MixLogger.logDebugR &quot;fetched tags with next url&quot; (#next @= (tags ^. #next) &lt;: nil)</span>
<span id="cb10-3"><a href="#cb10-3" aria-hidden="true" tabindex="-1"></a><span class="st">-       let nextOpts = fmap snd $ parseUrlHttps =&lt;&lt; Text.encodeUtf8 &lt;$&gt; tags ^. #next</span></span>
<span id="cb10-4"><a href="#cb10-4" aria-hidden="true" tabindex="-1"></a><span class="va">+       let nextOpts = fmap snd $ useHttpsURI =&lt;&lt; URI.mkURI =&lt;&lt; tags ^. #next</span></span>
<span id="cb10-5"><a href="#cb10-5" aria-hidden="true" tabindex="-1"></a>        threadDelay 100_000</span></code></pre></div>
<p>language-docker は 9.0 から Dockerfile を記述する EDSL の部分を別パッケージ <a href="https://hackage.haskell.org/package/dockerfile-creator">dockerfile-creator</a> に分かれたのでインポート先を変更した：</p>
<div class="sourceCode" id="cb11"><pre class="sourceCode diff"><code class="sourceCode diff"><span id="cb11-1"><a href="#cb11-1" aria-hidden="true" tabindex="-1"></a>  import           Dockwright.Fetch       (fetchEnvVal)</span>
<span id="cb11-2"><a href="#cb11-2" aria-hidden="true" tabindex="-1"></a>  import           Language.Docker        (Dockerfile)</span>
<span id="cb11-3"><a href="#cb11-3" aria-hidden="true" tabindex="-1"></a>  import qualified Language.Docker        as Docker</span>
<span id="cb11-4"><a href="#cb11-4" aria-hidden="true" tabindex="-1"></a><span class="va">+ import qualified Language.Docker.EDSL   as Docker</span></span></code></pre></div>
<h2 id="おしまい">おしまい</h2>
<p>早く GitHub Actions のトークンで GitHub Container Registry にプッシュできるようになって欲しい．</p>]]></content>
    </entry>
    <entry>
        <title>hpack の設定から Bazel の設定を自動生成するツール Hazell を作った</title>
        <link href="https://matsubara0507.github.ioposts/2021-02-15-create-hazell.html"/>
        <id>https://matsubara0507.github.ioposts/2021-02-15-create-hazell.html</id>
        <updated>2021-02-15T00:00:SZ</updated>
        <category term="Haskell"/>
        <category term="Bazel"/>
        <category term="application"/>
        <summary></summary>
        <content type="html"><![CDATA[<p>趣味のアプリケーションを新しく Haskell×Elm×Bazel で実装しようと考えてます． しかし，Bazel の設定は Haskell，というか <a href="https://github.com/sol/hpack">hpack</a> の設定に比べると煩雑で面倒臭いです（重複がいくつかある）． なので，hpack から Cabal ファイルを生成するように，Bazel の設定ファイルを生成できるようにすれば楽ができるなと考えて作りました．</p>
<h2 id="完成品">完成品</h2>
<iframe width="320" height="184" scrolling="no" frameborder="0" src="https://matsubara0507.github.io/my-github-cards/?target=matsubara0507/hazell" >
</iframe>
<p>まだ途中で，現状できるのは：</p>
<ul>
<li>hpack の設定から WORKSPACE の <code>stack_snapshot</code> ルールを置き換える</li>
<li>hpack の設定から BUILD.bazel の <code>haskell_library</code> ルールを置き換える</li>
</ul>
<p>置き換えるとあるが，そもそもなければ追加する． また，すでにある WORKSPACE ファイルや BUILD.bazel に書き込むために Bazel の設定ファイルのパーサーを自作した． しかし，構文定義を読んで真面目に実装しておらず，あくまで自分のユースケースで動く程度な雑実装だ．</p>
<h2 id="作る">作る</h2>
<p>おおきく4ステップ</p>
<ol>
<li>hpack の設定から Bazel の設定を構築（Haskell のデータ型として）</li>
<li>Bazel の設定をパースして読み込む</li>
<li>Haskell関連のところだけ置き換える</li>
<li>Bazel の設定を PrettyPrint する</li>
</ol>
<h3 id="1-hpack-の設定から-bazel-の設定を構築">1. hpack の設定から Bazel の設定を構築</h3>
<p>まずは hpack の設定を読み込む． これは簡単で，hpack が hpack を利用したツールを作る用に，そういうパッケージを公開してくれている．</p>
<ul>
<li><a href="https://hackage.haskell.org/package/hpack">hpack: A modern format for Haskell packages - Hackage</a></li>
</ul>
<p>このパッケージの <code>readPackageConfig</code> を利用することで読み込める：</p>
<div class="sourceCode" id="cb1"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span id="cb1-1"><a href="#cb1-1" aria-hidden="true" tabindex="-1"></a><span class="ot">main ::</span> <span class="dt">IO</span> ()</span>
<span id="cb1-2"><a href="#cb1-2" aria-hidden="true" tabindex="-1"></a>main <span class="ot">=</span> <span class="kw">do</span></span>
<span id="cb1-3"><a href="#cb1-3" aria-hidden="true" tabindex="-1"></a>  <span class="kw">let</span> opts <span class="ot">=</span> Hpack.defaultDecodeOptions </span>
<span id="cb1-4"><a href="#cb1-4" aria-hidden="true" tabindex="-1"></a>  result <span class="ot">&lt;-</span> Hpack.readPackageConfig opts</span>
<span id="cb1-5"><a href="#cb1-5" aria-hidden="true" tabindex="-1"></a>  <span class="kw">case</span> result <span class="kw">of</span></span>
<span id="cb1-6"><a href="#cb1-6" aria-hidden="true" tabindex="-1"></a>    <span class="dt">Left</span> e <span class="ot">-&gt;</span> </span>
<span id="cb1-7"><a href="#cb1-7" aria-hidden="true" tabindex="-1"></a>      <span class="fu">fail</span> e</span>
<span id="cb1-8"><a href="#cb1-8" aria-hidden="true" tabindex="-1"></a>    <span class="dt">Right</span> r <span class="ot">-&gt;</span> <span class="kw">do</span></span>
<span id="cb1-9"><a href="#cb1-9" aria-hidden="true" tabindex="-1"></a>      <span class="kw">let</span> package <span class="ot">=</span> Hpack.decodeResultPackage r</span>
<span id="cb1-10"><a href="#cb1-10" aria-hidden="true" tabindex="-1"></a>      <span class="co">-- package が Hpack.Package 型の値</span></span></code></pre></div>
<p>例えば，<code>Hpack.packageDependencies package</code> で全ての依存パッケージのリストを参照したり，<code>Hpack.packageLibrary package</code> でライブラリの設定を参照したりできる．</p>
<p>次に，Bazel の設定を表現する型を定義した：</p>
<div class="sourceCode" id="cb2"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span id="cb2-1"><a href="#cb2-1" aria-hidden="true" tabindex="-1"></a><span class="kw">data</span> <span class="dt">Rule</span> <span class="ot">=</span> <span class="dt">Rule</span></span>
<span id="cb2-2"><a href="#cb2-2" aria-hidden="true" tabindex="-1"></a>  {<span class="ot"> ruleName ::</span> <span class="dt">String</span> <span class="co">-- http_archive とか stack_snapshot などの Bazel ルール名</span></span>
<span id="cb2-3"><a href="#cb2-3" aria-hidden="true" tabindex="-1"></a>  ,<span class="ot"> ruleDef  ::</span> <span class="dt">String</span> <span class="co">-- load で利用する Bazel ルールの定義先</span></span>
<span id="cb2-4"><a href="#cb2-4" aria-hidden="true" tabindex="-1"></a>  ,<span class="ot"> ruleArgs ::</span> [(<span class="dt">Maybe</span> <span class="dt">String</span>, <span class="dt">RuleArg</span>)] <span class="co">-- 1つ目の要素は `name = &quot;abc&quot;` の name</span></span>
<span id="cb2-5"><a href="#cb2-5" aria-hidden="true" tabindex="-1"></a>  } <span class="kw">deriving</span> (<span class="dt">Show</span>, <span class="dt">Eq</span>)</span>
<span id="cb2-6"><a href="#cb2-6" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb2-7"><a href="#cb2-7" aria-hidden="true" tabindex="-1"></a><span class="kw">data</span> <span class="dt">RuleArg</span></span>
<span id="cb2-8"><a href="#cb2-8" aria-hidden="true" tabindex="-1"></a>  <span class="ot">=</span> <span class="dt">RuleArgString</span> <span class="dt">String</span></span>
<span id="cb2-9"><a href="#cb2-9" aria-hidden="true" tabindex="-1"></a>  <span class="op">|</span> <span class="dt">RuleArgBool</span> <span class="dt">Bool</span></span>
<span id="cb2-10"><a href="#cb2-10" aria-hidden="true" tabindex="-1"></a>  <span class="op">|</span> <span class="dt">RuleArgArray</span> [<span class="dt">RuleArg</span>]</span>
<span id="cb2-11"><a href="#cb2-11" aria-hidden="true" tabindex="-1"></a>  <span class="op">|</span> <span class="dt">RuleArgConst</span> <span class="dt">String</span></span>
<span id="cb2-12"><a href="#cb2-12" aria-hidden="true" tabindex="-1"></a>  <span class="op">|</span> <span class="dt">RuleArgGlob</span> <span class="dt">String</span></span>
<span id="cb2-13"><a href="#cb2-13" aria-hidden="true" tabindex="-1"></a>  <span class="kw">deriving</span> (<span class="dt">Show</span>, <span class="dt">Eq</span>)</span></code></pre></div>
<p><code>RuleArg</code> はとりあえず今回必要になった分だけ定義した． 本当は辞書型やリストの結合式が書けたりするが，ちょっとパーサーがめんどくさいのでサボった．</p>
<p>最後に，<code>Rule</code> 型で <code>stack_snapshot</code> ルールと <code>haskell_libarary</code> ルールを <code>Hpack.Package</code> から生成する関数を定義する：</p>
<div class="sourceCode" id="cb3"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span id="cb3-1"><a href="#cb3-1" aria-hidden="true" tabindex="-1"></a><span class="ot">buildStackSnapshotRule ::</span> <span class="dt">Hpack.Package</span> <span class="ot">-&gt;</span> <span class="dt">Rule</span></span>
<span id="cb3-2"><a href="#cb3-2" aria-hidden="true" tabindex="-1"></a>buildStackSnapshotRule package localSnapshot <span class="ot">=</span> <span class="dt">Rule</span> { <span class="op">..</span> }</span>
<span id="cb3-3"><a href="#cb3-3" aria-hidden="true" tabindex="-1"></a>  <span class="kw">where</span></span>
<span id="cb3-4"><a href="#cb3-4" aria-hidden="true" tabindex="-1"></a>    ruleName <span class="ot">=</span> <span class="st">&quot;stack_snapshot&quot;</span></span>
<span id="cb3-5"><a href="#cb3-5" aria-hidden="true" tabindex="-1"></a>    ruleDef <span class="ot">=</span> <span class="st">&quot;@rules_haskell//haskell:cabal.bzl&quot;</span></span>
<span id="cb3-6"><a href="#cb3-6" aria-hidden="true" tabindex="-1"></a>    ruleArgs <span class="ot">=</span></span>
<span id="cb3-7"><a href="#cb3-7" aria-hidden="true" tabindex="-1"></a>      [ (<span class="dt">Just</span> <span class="st">&quot;name&quot;</span>, <span class="dt">RuleArgString</span> <span class="st">&quot;stackage&quot;</span>)</span>
<span id="cb3-8"><a href="#cb3-8" aria-hidden="true" tabindex="-1"></a>      , (<span class="dt">Just</span> <span class="st">&quot;packages&quot;</span>, <span class="dt">RuleArgArray</span> <span class="op">$</span> <span class="fu">map</span> <span class="dt">RuleArgString</span> dependencies)</span>
<span id="cb3-9"><a href="#cb3-9" aria-hidden="true" tabindex="-1"></a>      , (<span class="dt">Just</span> <span class="st">&quot;local_snapshot&quot;</span>, <span class="dt">RuleArgString</span> <span class="st">&quot;//:stack-snapshot.yaml&quot;</span>) <span class="co">-- ここの拡張性はとりあえずサボる</span></span>
<span id="cb3-10"><a href="#cb3-10" aria-hidden="true" tabindex="-1"></a>      ]</span>
<span id="cb3-11"><a href="#cb3-11" aria-hidden="true" tabindex="-1"></a>    dependencies <span class="ot">=</span></span>
<span id="cb3-12"><a href="#cb3-12" aria-hidden="true" tabindex="-1"></a>      <span class="co">-- 自分自身はあとで生成するので省く</span></span>
<span id="cb3-13"><a href="#cb3-13" aria-hidden="true" tabindex="-1"></a>      <span class="fu">filter</span> (<span class="op">/=</span> Hpack.packageName package) <span class="op">$</span> <span class="fu">map</span> <span class="fu">fst</span> (Hpack.packageDependencies package)</span>
<span id="cb3-14"><a href="#cb3-14" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb3-15"><a href="#cb3-15" aria-hidden="true" tabindex="-1"></a><span class="ot">buildHaskellLibraryRule ::</span> <span class="dt">Hpack.Package</span> <span class="ot">-&gt;</span> <span class="dt">Rule</span></span>
<span id="cb3-16"><a href="#cb3-16" aria-hidden="true" tabindex="-1"></a>buildHaskellLibraryRule package <span class="ot">=</span> <span class="dt">Rule</span> { <span class="op">..</span> }</span>
<span id="cb3-17"><a href="#cb3-17" aria-hidden="true" tabindex="-1"></a>  <span class="kw">where</span></span>
<span id="cb3-18"><a href="#cb3-18" aria-hidden="true" tabindex="-1"></a>    ruleName <span class="ot">=</span> <span class="st">&quot;haskell_library&quot;</span></span>
<span id="cb3-19"><a href="#cb3-19" aria-hidden="true" tabindex="-1"></a>    ruleDef <span class="ot">=</span> <span class="st">&quot;@rules_haskell//haskell:defs.bzl&quot;</span></span>
<span id="cb3-20"><a href="#cb3-20" aria-hidden="true" tabindex="-1"></a>    ruleArgs <span class="ot">=</span> buildRuleArgs (Hpack.packageLibrary package)</span>
<span id="cb3-21"><a href="#cb3-21" aria-hidden="true" tabindex="-1"></a>    buildRuleArgs <span class="dt">Nothing</span> <span class="ot">=</span> []</span>
<span id="cb3-22"><a href="#cb3-22" aria-hidden="true" tabindex="-1"></a>    buildRuleArgs (<span class="dt">Just</span> lib) <span class="ot">=</span></span>
<span id="cb3-23"><a href="#cb3-23" aria-hidden="true" tabindex="-1"></a>      [ (<span class="dt">Just</span> <span class="st">&quot;name&quot;</span>, <span class="dt">RuleArgString</span> <span class="op">$</span> Hpack.packageName package <span class="op">&lt;&gt;</span> <span class="st">&quot;-library&quot;</span>)</span>
<span id="cb3-24"><a href="#cb3-24" aria-hidden="true" tabindex="-1"></a>        <span class="co">-- `source-dirs` が複数あった場合はとりあえず無視</span></span>
<span id="cb3-25"><a href="#cb3-25" aria-hidden="true" tabindex="-1"></a>      , (<span class="dt">Just</span> <span class="st">&quot;src_strip_prefix&quot;</span>, <span class="dt">RuleArgString</span> <span class="op">$</span> <span class="fu">head</span> (Hpack.sectionSourceDirs lib))</span>
<span id="cb3-26"><a href="#cb3-26" aria-hidden="true" tabindex="-1"></a>      , (<span class="dt">Just</span> <span class="st">&quot;srcs&quot;</span>, <span class="dt">RuleArgGlob</span> <span class="op">$</span> <span class="fu">head</span> (Hpack.sectionSourceDirs lib) <span class="op">&lt;&gt;</span> <span class="st">&quot;/**/*.hs&quot;</span>)</span>
<span id="cb3-27"><a href="#cb3-27" aria-hidden="true" tabindex="-1"></a>      , (<span class="dt">Just</span> <span class="st">&quot;deps&quot;</span>, <span class="dt">RuleArgArray</span> <span class="op">$</span> <span class="fu">map</span> <span class="dt">RuleArgString</span> (dependencies lib))</span>
<span id="cb3-28"><a href="#cb3-28" aria-hidden="true" tabindex="-1"></a>      , (<span class="dt">Just</span> <span class="st">&quot;compiler_flags&quot;</span>, <span class="dt">RuleArgConst</span> <span class="st">&quot;GHC_FLAGS&quot;</span>) <span class="co">-- いったん定数でお茶を濁す</span></span>
<span id="cb3-29"><a href="#cb3-29" aria-hidden="true" tabindex="-1"></a>      ]</span>
<span id="cb3-30"><a href="#cb3-30" aria-hidden="true" tabindex="-1"></a>    dependencies lib <span class="ot">=</span> </span>
<span id="cb3-31"><a href="#cb3-31" aria-hidden="true" tabindex="-1"></a>      <span class="fu">map</span> (<span class="st">&quot;@stackage//:&quot;</span> <span class="op">&lt;&gt;</span>) <span class="op">$</span> Map.keys (Hpack.unDependencies <span class="op">$</span> Hpack.sectionDependencies lib)</span></code></pre></div>
<h3 id="2-bazel-の設定をパースして読み込む">2. Bazel の設定をパースして読み込む</h3>
<p>ここが大変． ざっと探した感じ，BUILD ファイルの構文定義が見つからなかったので雰囲気でパーサーを自作する． 例えば，次のようなファイルを眺めてみると：</p>
<div class="sourceCode" id="cb4"><pre class="sourceCode py"><code class="sourceCode python"><span id="cb4-1"><a href="#cb4-1" aria-hidden="true" tabindex="-1"></a><span class="co"># Set all target’s visibility in this package to &quot;public&quot;.</span></span>
<span id="cb4-2"><a href="#cb4-2" aria-hidden="true" tabindex="-1"></a>package(default_visibility <span class="op">=</span> [<span class="st">&quot;//visibility:public&quot;</span>])</span>
<span id="cb4-3"><a href="#cb4-3" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb4-4"><a href="#cb4-4" aria-hidden="true" tabindex="-1"></a>load(</span>
<span id="cb4-5"><a href="#cb4-5" aria-hidden="true" tabindex="-1"></a>    <span class="st">&quot;//:build/common.bzl&quot;</span>,</span>
<span id="cb4-6"><a href="#cb4-6" aria-hidden="true" tabindex="-1"></a>    <span class="st">&quot;GHC_FLAGS&quot;</span>,</span>
<span id="cb4-7"><a href="#cb4-7" aria-hidden="true" tabindex="-1"></a>)</span>
<span id="cb4-8"><a href="#cb4-8" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb4-9"><a href="#cb4-9" aria-hidden="true" tabindex="-1"></a>load(</span>
<span id="cb4-10"><a href="#cb4-10" aria-hidden="true" tabindex="-1"></a>    <span class="st">&quot;@rules_haskell//haskell:defs.bzl&quot;</span>,</span>
<span id="cb4-11"><a href="#cb4-11" aria-hidden="true" tabindex="-1"></a>    <span class="st">&quot;haskell_library&quot;</span>,</span>
<span id="cb4-12"><a href="#cb4-12" aria-hidden="true" tabindex="-1"></a>)</span>
<span id="cb4-13"><a href="#cb4-13" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb4-14"><a href="#cb4-14" aria-hidden="true" tabindex="-1"></a>haskell_library(</span>
<span id="cb4-15"><a href="#cb4-15" aria-hidden="true" tabindex="-1"></a>    name <span class="op">=</span> <span class="st">&quot;hazell-library&quot;</span>,</span>
<span id="cb4-16"><a href="#cb4-16" aria-hidden="true" tabindex="-1"></a>    src_strip_prefix <span class="op">=</span> <span class="st">&quot;src&quot;</span>,</span>
<span id="cb4-17"><a href="#cb4-17" aria-hidden="true" tabindex="-1"></a>    srcs <span class="op">=</span> glob([<span class="st">&quot;src/**/*.hs&quot;</span>]),</span>
<span id="cb4-18"><a href="#cb4-18" aria-hidden="true" tabindex="-1"></a>    deps <span class="op">=</span> [</span>
<span id="cb4-19"><a href="#cb4-19" aria-hidden="true" tabindex="-1"></a>        <span class="st">&quot;@stackage//:base&quot;</span>,</span>
<span id="cb4-20"><a href="#cb4-20" aria-hidden="true" tabindex="-1"></a>        <span class="st">&quot;@stackage//:containers&quot;</span>,</span>
<span id="cb4-21"><a href="#cb4-21" aria-hidden="true" tabindex="-1"></a>        <span class="st">&quot;@stackage//:filepath&quot;</span>,</span>
<span id="cb4-22"><a href="#cb4-22" aria-hidden="true" tabindex="-1"></a>        <span class="st">&quot;@stackage//:hpack&quot;</span>,</span>
<span id="cb4-23"><a href="#cb4-23" aria-hidden="true" tabindex="-1"></a>        <span class="st">&quot;@stackage//:megaparsec&quot;</span>,</span>
<span id="cb4-24"><a href="#cb4-24" aria-hidden="true" tabindex="-1"></a>        <span class="st">&quot;@stackage//:prettyprinter&quot;</span>,</span>
<span id="cb4-25"><a href="#cb4-25" aria-hidden="true" tabindex="-1"></a>        <span class="st">&quot;@stackage//:text&quot;</span>,</span>
<span id="cb4-26"><a href="#cb4-26" aria-hidden="true" tabindex="-1"></a>    ],</span>
<span id="cb4-27"><a href="#cb4-27" aria-hidden="true" tabindex="-1"></a>    compiler_flags <span class="op">=</span> GHC_FLAGS,</span>
<span id="cb4-28"><a href="#cb4-28" aria-hidden="true" tabindex="-1"></a>)</span></code></pre></div>
<p>構成要素は：</p>
<ul>
<li>コメント</li>
<li><code>hoge(name = "fuga")</code> という関数呼び出し（省略可能な名前付き引数）</li>
</ul>
<p>ぐらいだ． なので，他にも細かい記法はあるかもしれないが，いったんこれのリストとしてパースする：</p>
<div class="sourceCode" id="cb5"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span id="cb5-1"><a href="#cb5-1" aria-hidden="true" tabindex="-1"></a><span class="kw">type</span> <span class="dt">BuildFile</span> <span class="ot">=</span> [<span class="dt">BuildContent</span>]</span>
<span id="cb5-2"><a href="#cb5-2" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb5-3"><a href="#cb5-3" aria-hidden="true" tabindex="-1"></a><span class="kw">data</span> <span class="dt">BuildContent</span></span>
<span id="cb5-4"><a href="#cb5-4" aria-hidden="true" tabindex="-1"></a>  <span class="ot">=</span> <span class="dt">BuildRule</span> <span class="dt">Text</span> [(<span class="dt">Maybe</span> <span class="dt">String</span>, <span class="dt">RuleArg</span>)]</span>
<span id="cb5-5"><a href="#cb5-5" aria-hidden="true" tabindex="-1"></a>  <span class="op">|</span> <span class="dt">BuildComment</span> <span class="dt">Text</span></span>
<span id="cb5-6"><a href="#cb5-6" aria-hidden="true" tabindex="-1"></a>  <span class="op">|</span> <span class="dt">BuildNewline</span> <span class="co">-- 改行も保存したいので</span></span>
<span id="cb5-7"><a href="#cb5-7" aria-hidden="true" tabindex="-1"></a>  <span class="kw">deriving</span> (<span class="dt">Show</span>, <span class="dt">Eq</span>)</span></code></pre></div>
<p>パーサーを作るには megaparsec パッケージを利用する：</p>
<ul>
<li><a href="https://hackage.haskell.org/package/megaparsec">megaparsec: Monadic parser combinators - Hackage</a></li>
</ul>
<p>一つ一つ説明すると長くなるので細かくは割愛． 工夫した点として，BUILD ファイルでの関数呼び出しや配列はいわゆるケツカンマを許容している：</p>
<div class="sourceCode" id="cb6"><pre class="sourceCode py"><code class="sourceCode python"><span id="cb6-1"><a href="#cb6-1" aria-hidden="true" tabindex="-1"></a><span class="co"># どちらもOK</span></span>
<span id="cb6-2"><a href="#cb6-2" aria-hidden="true" tabindex="-1"></a>[</span>
<span id="cb6-3"><a href="#cb6-3" aria-hidden="true" tabindex="-1"></a>    <span class="va">True</span>,</span>
<span id="cb6-4"><a href="#cb6-4" aria-hidden="true" tabindex="-1"></a>    <span class="va">True</span></span>
<span id="cb6-5"><a href="#cb6-5" aria-hidden="true" tabindex="-1"></a>]</span>
<span id="cb6-6"><a href="#cb6-6" aria-hidden="true" tabindex="-1"></a>[</span>
<span id="cb6-7"><a href="#cb6-7" aria-hidden="true" tabindex="-1"></a>    <span class="va">True</span>,</span>
<span id="cb6-8"><a href="#cb6-8" aria-hidden="true" tabindex="-1"></a>    <span class="va">True</span>,</span>
<span id="cb6-9"><a href="#cb6-9" aria-hidden="true" tabindex="-1"></a>]</span></code></pre></div>
<p>これを <code>sepBy</code> で実現するのは難しいので専用のコンビネーターを自作した：</p>
<div class="sourceCode" id="cb7"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span id="cb7-1"><a href="#cb7-1" aria-hidden="true" tabindex="-1"></a><span class="ot">sepAndEndBy ::</span> <span class="dt">MonadPlus</span> m <span class="ot">=&gt;</span> m a <span class="ot">-&gt;</span> (m sep, m end) <span class="ot">-&gt;</span> m [a]</span>
<span id="cb7-2"><a href="#cb7-2" aria-hidden="true" tabindex="-1"></a>sepAndEndBy p (sep, end) <span class="ot">=</span> go</span>
<span id="cb7-3"><a href="#cb7-3" aria-hidden="true" tabindex="-1"></a>  <span class="kw">where</span></span>
<span id="cb7-4"><a href="#cb7-4" aria-hidden="true" tabindex="-1"></a>    go <span class="ot">=</span> <span class="kw">do</span></span>
<span id="cb7-5"><a href="#cb7-5" aria-hidden="true" tabindex="-1"></a>      r <span class="ot">&lt;-</span> optional p</span>
<span id="cb7-6"><a href="#cb7-6" aria-hidden="true" tabindex="-1"></a>      <span class="kw">case</span> r <span class="kw">of</span></span>
<span id="cb7-7"><a href="#cb7-7" aria-hidden="true" tabindex="-1"></a>        <span class="dt">Nothing</span> <span class="ot">-&gt;</span> end <span class="op">$&gt;</span> []</span>
<span id="cb7-8"><a href="#cb7-8" aria-hidden="true" tabindex="-1"></a>        <span class="dt">Just</span> x <span class="ot">-&gt;</span> <span class="kw">do</span></span>
<span id="cb7-9"><a href="#cb7-9" aria-hidden="true" tabindex="-1"></a>          s <span class="ot">&lt;-</span> optional sep</span>
<span id="cb7-10"><a href="#cb7-10" aria-hidden="true" tabindex="-1"></a>          <span class="kw">case</span> s <span class="kw">of</span></span>
<span id="cb7-11"><a href="#cb7-11" aria-hidden="true" tabindex="-1"></a>            <span class="dt">Nothing</span> <span class="ot">-&gt;</span> end <span class="op">$&gt;</span> [x]</span>
<span id="cb7-12"><a href="#cb7-12" aria-hidden="true" tabindex="-1"></a>            <span class="dt">Just</span> _  <span class="ot">-&gt;</span> (x<span class="op">:</span>) <span class="op">&lt;$&gt;</span> go</span>
<span id="cb7-13"><a href="#cb7-13" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb7-14"><a href="#cb7-14" aria-hidden="true" tabindex="-1"></a><span class="co">-- 例えば配列</span></span>
<span id="cb7-15"><a href="#cb7-15" aria-hidden="true" tabindex="-1"></a><span class="ot">buildRuleArgArrayParser ::</span> <span class="dt">Parser</span> <span class="dt">RuleArg</span></span>
<span id="cb7-16"><a href="#cb7-16" aria-hidden="true" tabindex="-1"></a>buildRuleArgArrayParser <span class="ot">=</span> <span class="kw">do</span></span>
<span id="cb7-17"><a href="#cb7-17" aria-hidden="true" tabindex="-1"></a>  char <span class="ch">&#39;[&#39;</span></span>
<span id="cb7-18"><a href="#cb7-18" aria-hidden="true" tabindex="-1"></a>  space</span>
<span id="cb7-19"><a href="#cb7-19" aria-hidden="true" tabindex="-1"></a>  arr <span class="ot">&lt;-</span> buildRuleArgParser <span class="ot">`sepAndEndBy`</span> (comma, space <span class="op">&gt;&gt;</span> char <span class="ch">&#39;]&#39;</span>)</span>
<span id="cb7-20"><a href="#cb7-20" aria-hidden="true" tabindex="-1"></a>  <span class="fu">pure</span> <span class="op">$</span> <span class="dt">RuleArgArray</span> arr</span></code></pre></div>
<p>あと，工夫というか困ったところで名前付き引数があった． いろいろ考えた結果，とりあえず泥臭い方法をとった：</p>
<div class="sourceCode" id="cb8"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span id="cb8-1"><a href="#cb8-1" aria-hidden="true" tabindex="-1"></a><span class="ot">buildRuleParser ::</span> <span class="dt">Parser</span> <span class="dt">BuildContent</span></span>
<span id="cb8-2"><a href="#cb8-2" aria-hidden="true" tabindex="-1"></a>buildRuleParser <span class="ot">=</span> <span class="kw">do</span></span>
<span id="cb8-3"><a href="#cb8-3" aria-hidden="true" tabindex="-1"></a>  name <span class="ot">&lt;-</span> nameParser <span class="co">-- `A-Z0-9a-z_` からなる文字列</span></span>
<span id="cb8-4"><a href="#cb8-4" aria-hidden="true" tabindex="-1"></a>  char <span class="ch">&#39;(&#39;</span></span>
<span id="cb8-5"><a href="#cb8-5" aria-hidden="true" tabindex="-1"></a>  space</span>
<span id="cb8-6"><a href="#cb8-6" aria-hidden="true" tabindex="-1"></a>  args <span class="ot">&lt;-</span> argParser <span class="ot">`sepAndEndBy`</span> (comma, space <span class="op">&gt;&gt;</span> char <span class="ch">&#39;)&#39;</span>)</span>
<span id="cb8-7"><a href="#cb8-7" aria-hidden="true" tabindex="-1"></a>  optional newline</span>
<span id="cb8-8"><a href="#cb8-8" aria-hidden="true" tabindex="-1"></a>  <span class="fu">pure</span> <span class="op">$</span> <span class="dt">BuildRule</span> (Text.pack name) args</span>
<span id="cb8-9"><a href="#cb8-9" aria-hidden="true" tabindex="-1"></a>  <span class="kw">where</span></span>
<span id="cb8-10"><a href="#cb8-10" aria-hidden="true" tabindex="-1"></a>    argParser <span class="ot">=</span> buildRuleArgWithNameParser <span class="op">&lt;|&gt;</span> buildRuleArgWithoutNameParser</span>
<span id="cb8-11"><a href="#cb8-11" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb8-12"><a href="#cb8-12" aria-hidden="true" tabindex="-1"></a><span class="ot">buildRuleArgWithNameParser ::</span> <span class="dt">Parser</span> (<span class="dt">Maybe</span> <span class="dt">String</span>, <span class="dt">RuleArg</span>)</span>
<span id="cb8-13"><a href="#cb8-13" aria-hidden="true" tabindex="-1"></a>buildRuleArgWithNameParser <span class="ot">=</span> <span class="kw">do</span></span>
<span id="cb8-14"><a href="#cb8-14" aria-hidden="true" tabindex="-1"></a>  <span class="co">-- try を付けると失敗しても入力文字を消費しない（その代わり効率が悪くなる）</span></span>
<span id="cb8-15"><a href="#cb8-15" aria-hidden="true" tabindex="-1"></a>  name <span class="ot">&lt;-</span> try <span class="op">$</span> nameParser <span class="op">&lt;*</span> space <span class="op">&lt;*</span> char <span class="ch">&#39;=&#39;</span></span>
<span id="cb8-16"><a href="#cb8-16" aria-hidden="true" tabindex="-1"></a>  space</span>
<span id="cb8-17"><a href="#cb8-17" aria-hidden="true" tabindex="-1"></a>  (<span class="dt">Just</span> name,) <span class="op">&lt;$&gt;</span> buildRuleArgParser</span>
<span id="cb8-18"><a href="#cb8-18" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb8-19"><a href="#cb8-19" aria-hidden="true" tabindex="-1"></a><span class="ot">buildRuleArgWithoutNameParser ::</span> <span class="dt">Parser</span> (<span class="dt">Maybe</span> <span class="dt">String</span>, <span class="dt">RuleArg</span>)</span>
<span id="cb8-20"><a href="#cb8-20" aria-hidden="true" tabindex="-1"></a>buildRuleArgWithoutNameParser <span class="ot">=</span> (<span class="dt">Nothing</span>,) <span class="op">&lt;$&gt;</span> buildRuleArgParser</span></code></pre></div>
<p>ちゃんと実装するなら，いったん <code>nameParser</code> して，後ろに <code>=</code> があれば名前付き引数で無ければ変数かなんかとするみたいにすれば良いかしら．</p>
<h3 id="3-haskell関連のところだけ置き換える">3. Haskell関連のところだけ置き換える</h3>
<p>WORKSPACE ファイルや BUILD.bazel ファイルを読み込んで， (2) のパーサーで <code>BuildFile</code> 型の値に変換する． そのうち，<code>stack_snapshot</code> ルールや <code>haskell_libarary</code> ルールのものを検知して，(1) で生成したものに置き換える． ことを実装したのが次の関数だ：</p>
<div class="sourceCode" id="cb9"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span id="cb9-1"><a href="#cb9-1" aria-hidden="true" tabindex="-1"></a><span class="ot">replaceStackSnapshotRule ::</span> <span class="dt">Hpack.Package</span> <span class="ot">-&gt;</span> <span class="dt">FilePath</span> <span class="ot">-&gt;</span> <span class="dt">BuildFile</span> <span class="ot">-&gt;</span> <span class="dt">BuildFile</span></span>
<span id="cb9-2"><a href="#cb9-2" aria-hidden="true" tabindex="-1"></a>replaceStackSnapshotRule package stackSnapshotPath ws <span class="ot">=</span></span>
<span id="cb9-3"><a href="#cb9-3" aria-hidden="true" tabindex="-1"></a>  <span class="kw">if</span> <span class="fu">any</span> (<span class="ot">`isRule`</span> stackSnapshotRule) ws <span class="kw">then</span></span>
<span id="cb9-4"><a href="#cb9-4" aria-hidden="true" tabindex="-1"></a>    ws <span class="op">&lt;&amp;&gt;</span> \content <span class="ot">-&gt;</span></span>
<span id="cb9-5"><a href="#cb9-5" aria-hidden="true" tabindex="-1"></a>      <span class="kw">if</span> content <span class="ot">`isRule`</span> stackSnapshotRule <span class="kw">then</span></span>
<span id="cb9-6"><a href="#cb9-6" aria-hidden="true" tabindex="-1"></a>        stackSnapshotContent</span>
<span id="cb9-7"><a href="#cb9-7" aria-hidden="true" tabindex="-1"></a>      <span class="kw">else</span></span>
<span id="cb9-8"><a href="#cb9-8" aria-hidden="true" tabindex="-1"></a>        content</span>
<span id="cb9-9"><a href="#cb9-9" aria-hidden="true" tabindex="-1"></a>  <span class="kw">else</span></span>
<span id="cb9-10"><a href="#cb9-10" aria-hidden="true" tabindex="-1"></a>    ws <span class="op">++</span> [<span class="dt">BuildNewline</span>, loadContent, <span class="dt">BuildNewline</span>, stackSnapshotContent]</span>
<span id="cb9-11"><a href="#cb9-11" aria-hidden="true" tabindex="-1"></a>  <span class="kw">where</span></span>
<span id="cb9-12"><a href="#cb9-12" aria-hidden="true" tabindex="-1"></a>    stackSnapshotRule <span class="ot">=</span> buildStackSnapshotRule package stackSnapshotPath</span>
<span id="cb9-13"><a href="#cb9-13" aria-hidden="true" tabindex="-1"></a>    (loadContent, stackSnapshotContent) <span class="ot">=</span> fromRule stackSnapshotRule</span>
<span id="cb9-14"><a href="#cb9-14" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb9-15"><a href="#cb9-15" aria-hidden="true" tabindex="-1"></a><span class="ot">isRule ::</span> <span class="dt">BuildContent</span> <span class="ot">-&gt;</span> <span class="dt">Rule</span> <span class="ot">-&gt;</span> <span class="dt">Bool</span></span>
<span id="cb9-16"><a href="#cb9-16" aria-hidden="true" tabindex="-1"></a>isRule (<span class="dt">BuildRule</span> name _) rule <span class="ot">=</span> name <span class="op">==</span> <span class="fu">pack</span> (ruleName rule)</span>
<span id="cb9-17"><a href="#cb9-17" aria-hidden="true" tabindex="-1"></a>isRule _ _                     <span class="ot">=</span> <span class="dt">False</span></span>
<span id="cb9-18"><a href="#cb9-18" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb9-19"><a href="#cb9-19" aria-hidden="true" tabindex="-1"></a><span class="ot">isStringArg ::</span> <span class="dt">RuleArg</span> <span class="ot">-&gt;</span> <span class="dt">String</span> <span class="ot">-&gt;</span> <span class="dt">Bool</span></span>
<span id="cb9-20"><a href="#cb9-20" aria-hidden="true" tabindex="-1"></a>isStringArg (<span class="dt">RuleArgString</span> str) str&#39; <span class="ot">=</span> str <span class="op">==</span> str&#39;</span>
<span id="cb9-21"><a href="#cb9-21" aria-hidden="true" tabindex="-1"></a>isStringArg _ _                      <span class="ot">=</span> <span class="dt">False</span></span>
<span id="cb9-22"><a href="#cb9-22" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb9-23"><a href="#cb9-23" aria-hidden="true" tabindex="-1"></a><span class="ot">fromRule ::</span> <span class="dt">Rule</span> <span class="ot">-&gt;</span> (<span class="dt">BuildContent</span>, <span class="dt">BuildContent</span>)</span>
<span id="cb9-24"><a href="#cb9-24" aria-hidden="true" tabindex="-1"></a>fromRule rule <span class="ot">=</span></span>
<span id="cb9-25"><a href="#cb9-25" aria-hidden="true" tabindex="-1"></a>  ( <span class="dt">BuildRule</span> <span class="st">&quot;load&quot;</span></span>
<span id="cb9-26"><a href="#cb9-26" aria-hidden="true" tabindex="-1"></a>      [ (<span class="dt">Nothing</span>, <span class="dt">RuleArgString</span> <span class="op">$</span> ruleDef rule)</span>
<span id="cb9-27"><a href="#cb9-27" aria-hidden="true" tabindex="-1"></a>      , (<span class="dt">Nothing</span>, <span class="dt">RuleArgString</span> <span class="op">$</span> ruleName rule)</span>
<span id="cb9-28"><a href="#cb9-28" aria-hidden="true" tabindex="-1"></a>      ]</span>
<span id="cb9-29"><a href="#cb9-29" aria-hidden="true" tabindex="-1"></a>  , <span class="dt">BuildRule</span> (<span class="fu">pack</span> <span class="op">$</span> ruleName rule) <span class="op">$</span> ruleArgs rule</span>
<span id="cb9-30"><a href="#cb9-30" aria-hidden="true" tabindex="-1"></a>  )</span></code></pre></div>
<p>これは <code>stack_snapshot</code> ルール版． <code>haskell_library</code> ルールの場合もほとんど同じなので割愛する．</p>
<h3 id="4-bazel-の設定を-prettyprint-する">4. Bazel の設定を PrettyPrint する</h3>
<p>最後に，(3) の結果をいい感じに出力するために PrettyPrint する． 今回はそのために prettyprinter パッケージを利用する．</p>
<ul>
<li><a href="https://hackage.haskell.org/package/prettyprinter">prettyprinter: A modern, easy to use, well-documented, extensible pretty-printer - Hackage</a></li>
</ul>
<p>任意の型の PrettyPrint の仕方を定義するには，その型の <code>Pretty</code> 型クラスインスタンスを定義すれば良い． 今回出力したいのは <code>BuildFile</code> 型もとい <code>BuildContent</code> 型の値なので，その型の <code>Pretty</code> 型クラスインスタンスを定義する：</p>
<div class="sourceCode" id="cb10"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span id="cb10-1"><a href="#cb10-1" aria-hidden="true" tabindex="-1"></a><span class="kw">instance</span> <span class="dt">Pretty</span> <span class="dt">BuildContent</span> <span class="kw">where</span></span>
<span id="cb10-2"><a href="#cb10-2" aria-hidden="true" tabindex="-1"></a>  pretty (<span class="dt">BuildRule</span> name args)  <span class="ot">=</span> prettyMethodCall (Text.unpack name) (<span class="fu">map</span> prettyMethodArg args)</span>
<span id="cb10-3"><a href="#cb10-3" aria-hidden="true" tabindex="-1"></a>  pretty (<span class="dt">BuildComment</span> comment) <span class="ot">=</span> <span class="st">&quot;#&quot;</span> <span class="op">&lt;&gt;</span> fromString (Text.unpack comment)</span>
<span id="cb10-4"><a href="#cb10-4" aria-hidden="true" tabindex="-1"></a>  pretty <span class="dt">BuildNewline</span>           <span class="ot">=</span> <span class="st">&quot;&quot;</span></span>
<span id="cb10-5"><a href="#cb10-5" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb10-6"><a href="#cb10-6" aria-hidden="true" tabindex="-1"></a><span class="kw">instance</span> <span class="dt">Pretty</span> <span class="dt">RuleArg</span> <span class="kw">where</span></span>
<span id="cb10-7"><a href="#cb10-7" aria-hidden="true" tabindex="-1"></a>  pretty (<span class="dt">RuleArgString</span> str)  <span class="ot">=</span> fromString (<span class="fu">show</span> str) <span class="co">-- show すると文字列の前後に `&quot;` が付く</span></span>
<span id="cb10-8"><a href="#cb10-8" aria-hidden="true" tabindex="-1"></a>  pretty (<span class="dt">RuleArgBool</span> <span class="dt">True</span>)   <span class="ot">=</span> <span class="st">&quot;True&quot;</span></span>
<span id="cb10-9"><a href="#cb10-9" aria-hidden="true" tabindex="-1"></a>  pretty (<span class="dt">RuleArgBool</span> <span class="dt">False</span>)  <span class="ot">=</span> <span class="st">&quot;False&quot;</span></span>
<span id="cb10-10"><a href="#cb10-10" aria-hidden="true" tabindex="-1"></a>  pretty (<span class="dt">RuleArgConst</span> name)  <span class="ot">=</span> fromString name</span>
<span id="cb10-11"><a href="#cb10-11" aria-hidden="true" tabindex="-1"></a>  pretty (<span class="dt">RuleArgGlob</span> path)   <span class="ot">=</span> <span class="st">&quot;glob([&quot;</span> <span class="op">&lt;&gt;</span> fromString (<span class="fu">show</span> path) <span class="op">&lt;&gt;</span> <span class="st">&quot;])&quot;</span></span>
<span id="cb10-12"><a href="#cb10-12" aria-hidden="true" tabindex="-1"></a>  <span class="co">-- 配列の要素数によって場合分け</span></span>
<span id="cb10-13"><a href="#cb10-13" aria-hidden="true" tabindex="-1"></a>  pretty (<span class="dt">RuleArgArray</span> [])    <span class="ot">=</span> <span class="st">&quot;[]&quot;</span></span>
<span id="cb10-14"><a href="#cb10-14" aria-hidden="true" tabindex="-1"></a>  pretty (<span class="dt">RuleArgArray</span> [arg]) <span class="ot">=</span> <span class="st">&quot;[&quot;</span> <span class="op">&lt;&gt;</span> pretty arg <span class="op">&lt;&gt;</span> <span class="st">&quot;]&quot;</span></span>
<span id="cb10-15"><a href="#cb10-15" aria-hidden="true" tabindex="-1"></a>  pretty (<span class="dt">RuleArgArray</span> args)  <span class="ot">=</span> vsep [nest <span class="dv">4</span> <span class="op">$</span> vsep (<span class="st">&quot;[&quot;</span> <span class="op">:</span> <span class="fu">map</span> ((<span class="op">&lt;&gt;</span> <span class="st">&quot;,&quot;</span>) <span class="op">.</span> pretty) args), <span class="st">&quot;]&quot;</span>]</span>
<span id="cb10-16"><a href="#cb10-16" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb10-17"><a href="#cb10-17" aria-hidden="true" tabindex="-1"></a><span class="co">-- 関数呼び出しの引数の個数によって場合分け</span></span>
<span id="cb10-18"><a href="#cb10-18" aria-hidden="true" tabindex="-1"></a><span class="ot">prettyMethodCall ::</span> <span class="dt">String</span> <span class="ot">-&gt;</span> [<span class="dt">Doc</span> ann] <span class="ot">-&gt;</span> <span class="dt">Doc</span> ann</span>
<span id="cb10-19"><a href="#cb10-19" aria-hidden="true" tabindex="-1"></a>prettyMethodCall name []    <span class="ot">=</span> fromString name <span class="op">&lt;&gt;</span> <span class="st">&quot;()&quot;</span></span>
<span id="cb10-20"><a href="#cb10-20" aria-hidden="true" tabindex="-1"></a>prettyMethodCall name [arg] <span class="ot">=</span> fromString name <span class="op">&lt;&gt;</span> <span class="st">&quot;(&quot;</span> <span class="op">&lt;&gt;</span> arg <span class="op">&lt;&gt;</span> <span class="st">&quot;)&quot;</span></span>
<span id="cb10-21"><a href="#cb10-21" aria-hidden="true" tabindex="-1"></a>prettyMethodCall name args  <span class="ot">=</span> vsep [nest <span class="dv">4</span> <span class="op">$</span> vsep (fromString name <span class="op">&lt;&gt;</span> <span class="st">&quot;(&quot;</span> <span class="op">:</span> <span class="fu">map</span> (<span class="op">&lt;&gt;</span> <span class="st">&quot;,&quot;</span>) args), <span class="st">&quot;)&quot;</span>]</span>
<span id="cb10-22"><a href="#cb10-22" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb10-23"><a href="#cb10-23" aria-hidden="true" tabindex="-1"></a><span class="ot">prettyMethodArg ::</span> (<span class="dt">Maybe</span> <span class="dt">String</span>, <span class="dt">RuleArg</span>) <span class="ot">-&gt;</span> <span class="dt">Doc</span> ann</span>
<span id="cb10-24"><a href="#cb10-24" aria-hidden="true" tabindex="-1"></a>prettyMethodArg (<span class="dt">Nothing</span>, val)  <span class="ot">=</span> pretty val</span>
<span id="cb10-25"><a href="#cb10-25" aria-hidden="true" tabindex="-1"></a>prettyMethodArg (<span class="dt">Just</span> key, val) <span class="ot">=</span> fromString key <span class="op">&lt;+&gt;</span> <span class="st">&quot;=&quot;</span> <span class="op">&lt;+&gt;</span> pretty val</span></code></pre></div>
<p><code>pretty</code> の構成要素は <code>Doc a</code> 型である． <code>&lt;&gt;</code> は空白無しで結合，<code>&lt;+&gt;</code> は空白有りで結合になる． <code>vsep</code> で与えた <code>Doc a</code> 型のリストを改行で結合してくれる． <code>nest 4 (vsep [...])</code> とすることで <code>vsep</code> の2要素目から4スペースでインデントしてくれる． つまり，<code>vsep [nest 4 $ vsep ["[", "True,", "True,"], "]"]</code> は次のようになる：</p>
<div class="sourceCode" id="cb11"><pre class="sourceCode py"><code class="sourceCode python"><span id="cb11-1"><a href="#cb11-1" aria-hidden="true" tabindex="-1"></a>[</span>
<span id="cb11-2"><a href="#cb11-2" aria-hidden="true" tabindex="-1"></a>    <span class="va">True</span>,</span>
<span id="cb11-3"><a href="#cb11-3" aria-hidden="true" tabindex="-1"></a>    <span class="va">True</span>,</span>
<span id="cb11-4"><a href="#cb11-4" aria-hidden="true" tabindex="-1"></a>]</span></code></pre></div>
<p>便利ですね．</p>
<h2 id="おしまい">おしまい</h2>
<p>思いの外，さくっとできた． それよりも作りたいアプリケーションの方を作らないと笑</p>]]></content>
    </entry>
    <entry>
        <title>rules_elm を作る</title>
        <link href="https://matsubara0507.github.ioposts/2021-01-18-create-rules_elm.html"/>
        <id>https://matsubara0507.github.ioposts/2021-01-18-create-rules_elm.html</id>
        <updated>2021-01-18T00:00:SZ</updated>
        <category term="Elm"/>
        <category term="Bazel"/>
        <summary></summary>
        <content type="html"><![CDATA[<p>Elm 用の Bazel ルールがないので作ったという話です． 正確には <a href="https://github.com/EdSchouten/rules_elm">EdSchouten/rules_elm</a> がありますが，最新バージョンの 0.19.1 には対応してなかったので，対応したものを自作しました．</p>
<h2 id="作ったもの">作ったもの</h2>
<iframe width="320" height="142" scrolling="no" frameborder="0" src="https://matsubara0507.github.io/my-github-cards/?target=matsubara0507/rules_elm" >
</iframe>
<p>まず作ったのは：</p>
<ul>
<li>Elm コンパイラをインストールする（Toolchain）</li>
<li><code>elm make</code> をする Bazel ルール（<code>elm_make</code>）</li>
<li>Windows でも動作する</li>
</ul>
<p>要するに <code>elm make</code> をできるようにしただけ．</p>
<h2 id="作る">作る</h2>
<h3 id="elmコンパイラを取得する">Elmコンパイラを取得する</h3>
<p>これが結構めんどくさかった． というのも，基本的になんらかのバイナリをとってくる場合は <code>repository_ctx.download</code> を使い，ダウンロード対象が <code>zip</code> や <code>tar.gz</code> でついでに展開する場合は <code>repository_ctx.download_and_extract</code> を使う． しかし，Elm コンパイラは <code>gz</code> だけでこれは <code>repository_ctx.download_and_extract</code> で展開できない． 困った．</p>
<h2 id="section"></h2>
<p>Bazel 仲間に知恵をもらった結果，次のように <code>repository_ctx.download</code> でふつーに落としてきて <code>gzip</code> で展開するようにした（無理やり）：</p>
<div class="sourceCode" id="cb1"><pre class="sourceCode py"><code class="sourceCode python"><span id="cb1-1"><a href="#cb1-1" aria-hidden="true" tabindex="-1"></a><span class="kw">def</span> _elm_compiler_impl(ctx):</span>
<span id="cb1-2"><a href="#cb1-2" aria-hidden="true" tabindex="-1"></a>    os <span class="op">=</span> ctx.attr.os</span>
<span id="cb1-3"><a href="#cb1-3" aria-hidden="true" tabindex="-1"></a>    version <span class="op">=</span> ctx.attr.version</span>
<span id="cb1-4"><a href="#cb1-4" aria-hidden="true" tabindex="-1"></a>    file_name <span class="op">=</span> <span class="st">&quot;elm-</span><span class="sc">{}</span><span class="st">&quot;</span>.<span class="bu">format</span>(os)</span>
<span id="cb1-5"><a href="#cb1-5" aria-hidden="true" tabindex="-1"></a>    ctx.download(</span>
<span id="cb1-6"><a href="#cb1-6" aria-hidden="true" tabindex="-1"></a>        url <span class="op">=</span> <span class="st">&quot;https://github.com/elm/compiler/releases/download/</span><span class="sc">{}</span><span class="st">/binary-for-</span><span class="sc">{}</span><span class="st">-64-bit.gz&quot;</span>.<span class="bu">format</span>(version, os),</span>
<span id="cb1-7"><a href="#cb1-7" aria-hidden="true" tabindex="-1"></a>        sha256 <span class="op">=</span> ctx.attr.checksum,</span>
<span id="cb1-8"><a href="#cb1-8" aria-hidden="true" tabindex="-1"></a>        output <span class="op">=</span> file_name <span class="op">+</span> <span class="st">&quot;.gz&quot;</span>,</span>
<span id="cb1-9"><a href="#cb1-9" aria-hidden="true" tabindex="-1"></a>    )</span>
<span id="cb1-10"><a href="#cb1-10" aria-hidden="true" tabindex="-1"></a>    ctx.execute([ctx.which(<span class="st">&quot;gzip&quot;</span>), <span class="st">&quot;-d&quot;</span>, file_name <span class="op">+</span> <span class="st">&quot;.gz&quot;</span>])</span>
<span id="cb1-11"><a href="#cb1-11" aria-hidden="true" tabindex="-1"></a>    ctx.execute([ctx.which(<span class="st">&quot;chmod&quot;</span>), <span class="st">&quot;+x&quot;</span>, file_name])</span>
<span id="cb1-12"><a href="#cb1-12" aria-hidden="true" tabindex="-1"></a>    ...</span></code></pre></div>
<h3 id="elm-make-をするルールを作る"><code>elm make</code> をするルールを作る</h3>
<p>こっちで大変だったのは，なんとか Windows でも動作するようにすることだった． というのも，できれば Elm プロジェクトがリポジトリのルートに無い場合でも動作するようにしたくて，この場合は生成物（<code>--output</code> の引数）や elm バイナリを絶対パスにしたい． しかし，Windows の動作も考慮するとシェルスクリプトでは絶対パスへの変換をうまく動かすことが難しい．</p>
<p>ということでいろいろ試行錯誤した結果，最終的には Python を噛ませることでお茶を濁すことにした． 下記のような Python スクリプトをテンプレートで生成し：</p>
<div class="sourceCode" id="cb2"><pre class="sourceCode py"><code class="sourceCode python"><span id="cb2-1"><a href="#cb2-1" aria-hidden="true" tabindex="-1"></a><span class="co">#!/usr/bin/env python3</span></span>
<span id="cb2-2"><a href="#cb2-2" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb2-3"><a href="#cb2-3" aria-hidden="true" tabindex="-1"></a><span class="co"># elm_wrapper.py ELM_PROJECT_ROOT [ARGS_FOR_ELM...]</span></span>
<span id="cb2-4"><a href="#cb2-4" aria-hidden="true" tabindex="-1"></a><span class="co">#  １引数目の ELM_PROJECT_ROOT だけ Elm プロジェクトへの相対パスで残りは elm コマンドへの引数</span></span>
<span id="cb2-5"><a href="#cb2-5" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb2-6"><a href="#cb2-6" aria-hidden="true" tabindex="-1"></a><span class="im">import</span> os</span>
<span id="cb2-7"><a href="#cb2-7" aria-hidden="true" tabindex="-1"></a><span class="im">import</span> os.path</span>
<span id="cb2-8"><a href="#cb2-8" aria-hidden="true" tabindex="-1"></a><span class="im">import</span> subprocess</span>
<span id="cb2-9"><a href="#cb2-9" aria-hidden="true" tabindex="-1"></a><span class="im">import</span> sys</span>
<span id="cb2-10"><a href="#cb2-10" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb2-11"><a href="#cb2-11" aria-hidden="true" tabindex="-1"></a><span class="kw">def</span> run(cmd, <span class="op">*</span>args, <span class="op">**</span>kwargs):</span>
<span id="cb2-12"><a href="#cb2-12" aria-hidden="true" tabindex="-1"></a>    <span class="cf">try</span>:</span>
<span id="cb2-13"><a href="#cb2-13" aria-hidden="true" tabindex="-1"></a>        subprocess.run(cmd, check<span class="op">=</span><span class="va">True</span>, stdout<span class="op">=</span>subprocess.PIPE, stderr<span class="op">=</span>subprocess.PIPE, <span class="op">*</span>args, <span class="op">**</span>kwargs)</span>
<span id="cb2-14"><a href="#cb2-14" aria-hidden="true" tabindex="-1"></a>    <span class="cf">except</span> subprocess.CalledProcessError <span class="im">as</span> err:</span>
<span id="cb2-15"><a href="#cb2-15" aria-hidden="true" tabindex="-1"></a>        sys.stdout.<span class="bu">buffer</span>.write(err.stdout)</span>
<span id="cb2-16"><a href="#cb2-16" aria-hidden="true" tabindex="-1"></a>        sys.stderr.<span class="bu">buffer</span>.write(err.stderr)</span>
<span id="cb2-17"><a href="#cb2-17" aria-hidden="true" tabindex="-1"></a>        <span class="cf">raise</span></span>
<span id="cb2-18"><a href="#cb2-18" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb2-19"><a href="#cb2-19" aria-hidden="true" tabindex="-1"></a>elm_runtime_path <span class="op">=</span> os.path.abspath(<span class="st">&quot;path/to/elm&quot;</span>) <span class="co"># ここはテンプレート</span></span>
<span id="cb2-20"><a href="#cb2-20" aria-hidden="true" tabindex="-1"></a>elm_project_root <span class="op">=</span> sys.argv.pop(<span class="dv">1</span>)</span>
<span id="cb2-21"><a href="#cb2-21" aria-hidden="true" tabindex="-1"></a><span class="cf">for</span> i, arg <span class="kw">in</span> <span class="bu">enumerate</span>(sys.argv):</span>
<span id="cb2-22"><a href="#cb2-22" aria-hidden="true" tabindex="-1"></a>    <span class="cf">if</span> arg <span class="op">==</span> <span class="st">&quot;--output&quot;</span>:</span>
<span id="cb2-23"><a href="#cb2-23" aria-hidden="true" tabindex="-1"></a>        sys.argv[i<span class="op">+</span><span class="dv">1</span>] <span class="op">=</span> os.path.abspath(sys.argv[i<span class="op">+</span><span class="dv">1</span>])</span>
<span id="cb2-24"><a href="#cb2-24" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb2-25"><a href="#cb2-25" aria-hidden="true" tabindex="-1"></a><span class="co"># HOME: getAppUserDataDirectory:getEnv: does not exist (no environment variable)</span></span>
<span id="cb2-26"><a href="#cb2-26" aria-hidden="true" tabindex="-1"></a><span class="co">#  というエラーが出るので適当に定義しておく</span></span>
<span id="cb2-27"><a href="#cb2-27" aria-hidden="true" tabindex="-1"></a>os.putenv(<span class="st">&quot;HOME&quot;</span>, os.getcwd())</span>
<span id="cb2-28"><a href="#cb2-28" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb2-29"><a href="#cb2-29" aria-hidden="true" tabindex="-1"></a>os.chdir(elm_project_root)</span>
<span id="cb2-30"><a href="#cb2-30" aria-hidden="true" tabindex="-1"></a>run([elm_runtime_path] <span class="op">+</span> sys.argv[<span class="dv">1</span>:])</span></code></pre></div>
<p>これを <code>py_binary</code> で固めておいて次のように利用する：</p>
<div class="sourceCode" id="cb3"><pre class="sourceCode py"><code class="sourceCode python"><span id="cb3-1"><a href="#cb3-1" aria-hidden="true" tabindex="-1"></a><span class="kw">def</span> _elm_make_impl(ctx):</span>
<span id="cb3-2"><a href="#cb3-2" aria-hidden="true" tabindex="-1"></a>    elm_compiler <span class="op">=</span> ctx.toolchains[<span class="st">&quot;@rules_elm//elm:toolchain&quot;</span>].elm</span>
<span id="cb3-3"><a href="#cb3-3" aria-hidden="true" tabindex="-1"></a>    output_file <span class="op">=</span> ctx.actions.declare_file(ctx.attr.output)</span>
<span id="cb3-4"><a href="#cb3-4" aria-hidden="true" tabindex="-1"></a>    ctx.actions.run(</span>
<span id="cb3-5"><a href="#cb3-5" aria-hidden="true" tabindex="-1"></a>        executable <span class="op">=</span> ctx.executable._elm_wrapper,</span>
<span id="cb3-6"><a href="#cb3-6" aria-hidden="true" tabindex="-1"></a>        arguments <span class="op">=</span> [</span>
<span id="cb3-7"><a href="#cb3-7" aria-hidden="true" tabindex="-1"></a>            ctx.<span class="bu">file</span>.elm_json.dirname,</span>
<span id="cb3-8"><a href="#cb3-8" aria-hidden="true" tabindex="-1"></a>            <span class="st">&quot;make&quot;</span>, ctx.attr.main, <span class="st">&quot;--output&quot;</span>, output_file.path,</span>
<span id="cb3-9"><a href="#cb3-9" aria-hidden="true" tabindex="-1"></a>        ],</span>
<span id="cb3-10"><a href="#cb3-10" aria-hidden="true" tabindex="-1"></a>        inputs <span class="op">=</span> [elm_compiler, ctx.<span class="bu">file</span>.elm_json] <span class="op">+</span> ctx.files.srcs,</span>
<span id="cb3-11"><a href="#cb3-11" aria-hidden="true" tabindex="-1"></a>        outputs <span class="op">=</span> [output_file],</span>
<span id="cb3-12"><a href="#cb3-12" aria-hidden="true" tabindex="-1"></a>    )</span>
<span id="cb3-13"><a href="#cb3-13" aria-hidden="true" tabindex="-1"></a>    <span class="cf">return</span> [DefaultInfo(files <span class="op">=</span> depset([output_file]))]</span>
<span id="cb3-14"><a href="#cb3-14" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb3-15"><a href="#cb3-15" aria-hidden="true" tabindex="-1"></a>elm_make <span class="op">=</span> rule(</span>
<span id="cb3-16"><a href="#cb3-16" aria-hidden="true" tabindex="-1"></a>    _elm_make_impl,</span>
<span id="cb3-17"><a href="#cb3-17" aria-hidden="true" tabindex="-1"></a>    attrs <span class="op">=</span> {</span>
<span id="cb3-18"><a href="#cb3-18" aria-hidden="true" tabindex="-1"></a>        <span class="st">&quot;srcs&quot;</span>: attr.label_list(allow_files <span class="op">=</span> <span class="va">True</span>),</span>
<span id="cb3-19"><a href="#cb3-19" aria-hidden="true" tabindex="-1"></a>        <span class="st">&quot;elm_json&quot;</span>: attr.label(mandatory <span class="op">=</span> <span class="va">True</span>, allow_single_file <span class="op">=</span> <span class="va">True</span>),</span>
<span id="cb3-20"><a href="#cb3-20" aria-hidden="true" tabindex="-1"></a>        <span class="st">&quot;main&quot;</span>: attr.string(default <span class="op">=</span> <span class="st">&quot;src/Main.elm&quot;</span>),</span>
<span id="cb3-21"><a href="#cb3-21" aria-hidden="true" tabindex="-1"></a>        <span class="st">&quot;output&quot;</span>: attr.string(default <span class="op">=</span> <span class="st">&quot;index.html&quot;</span>),</span>
<span id="cb3-22"><a href="#cb3-22" aria-hidden="true" tabindex="-1"></a>        <span class="st">&quot;_elm_wrapper&quot;</span>: attr.label(</span>
<span id="cb3-23"><a href="#cb3-23" aria-hidden="true" tabindex="-1"></a>            executable <span class="op">=</span> <span class="va">True</span>,</span>
<span id="cb3-24"><a href="#cb3-24" aria-hidden="true" tabindex="-1"></a>            cfg <span class="op">=</span> <span class="st">&quot;host&quot;</span>,</span>
<span id="cb3-25"><a href="#cb3-25" aria-hidden="true" tabindex="-1"></a>            default <span class="op">=</span> Label(<span class="st">&quot;@rules_elm//elm:elm_wrapper&quot;</span>), <span class="co"># py_binary で固めたやつ</span></span>
<span id="cb3-26"><a href="#cb3-26" aria-hidden="true" tabindex="-1"></a>        ),</span>
<span id="cb3-27"><a href="#cb3-27" aria-hidden="true" tabindex="-1"></a>    },</span>
<span id="cb3-28"><a href="#cb3-28" aria-hidden="true" tabindex="-1"></a>    toolchains <span class="op">=</span> [</span>
<span id="cb3-29"><a href="#cb3-29" aria-hidden="true" tabindex="-1"></a>        <span class="st">&quot;@rules_elm//elm:toolchain&quot;</span>,</span>
<span id="cb3-30"><a href="#cb3-30" aria-hidden="true" tabindex="-1"></a>    ]</span>
<span id="cb3-31"><a href="#cb3-31" aria-hidden="true" tabindex="-1"></a>)</span></code></pre></div>
<p>この方法は <code>tweag/rules_haskell</code> の cabal コマンド関連でも同様のことをしている（目的が同じかはわからないが参考にした）．</p>
<h2 id="使う">使う</h2>
<p>試しに使った：</p>
<ul>
<li><a href="https://github.com/matsubara0507/mixlogue/pull/7">Add Bazel by matsubara0507 · #7 · matsubara0507/mixlogue</a></li>
</ul>
<p>mixlogue は Haskell + Elm の簡単なプログラム． この PR では Haskell のビルドも Bazel にしている．</p>
<h2 id="課題">課題</h2>
<ol>
<li>依存パッケージを Bazel で管理していないので毎回依存パッケージのインストールからする</li>
<li>もっと Toolchain を活用する</li>
</ol>
<p>(1)は単純な話． 普通 Bazel は依存パッケージを明示的に記述することで，無駄に依存パッケージを何回もインストールしようとするのを防ぐ方法をとる． しかし，<code>elm_make</code> は雑に作ったので毎回インストールしちゃうっていう．</p>
<p>(2)は，Toolchain の <code>action</code> なんかに <code>elm</code> コマンドの振る舞いを突っ込んだ方がかっこいいかなーっていうだけ．</p>
<p>次回，頑張る．</p>
<h2 id="おしまい">おしまい</h2>]]></content>
    </entry>
    <entry>
        <title>rules_haskell でパッケージの依存関係がうまく解決できない時</title>
        <link href="https://matsubara0507.github.ioposts/2021-01-01-missing-dependencies-with-rules_haskell.html"/>
        <id>https://matsubara0507.github.ioposts/2021-01-01-missing-dependencies-with-rules_haskell.html</id>
        <updated>2021-01-01T00:00:SZ</updated>
        <category term="Haskell"/>
        <category term="Bazel"/>
        <summary></summary>
        <content type="html"><![CDATA[<p>ちょっとした rules_haskell で起きたエラーに関するメモ書きです（Bazel の話）．</p>
<h2 id="起きたエラー">起きたエラー</h2>
<p>具体的には「<a href="/posts/2021-01-01-mdium-with-gist.html">MarkdownをMediumへポストするときにコードブロックをGistのリンクにする</a>」をやっていたときに起きたエラー：</p>
<pre><code>$ bazel build //:mdium
...
ERROR: /.../external/stackage/BUILD.bazel:1277:22: HaskellCabalLibrary @stackage//:hslua failed (Exit 1) cabal_wrapper failed: error executing command bazel-out/host/bin/external/rules_haskell/haskell/cabal_wrapper lib:hslua hslua-1.3.0 true external/stackage/hslua-1.3.0/Setup.hs external/stackage/hslua-1.3.0 ... (remaining 9 argument(s) skipped)

Use --sandbox_debug to see verbose messages from the sandbox
Setup.hs: Encountered missing dependencies:
base-compat &gt;=0.10
...</code></pre>
<p>base-compat はバージョン 0.11.2 が入ってるはずなので，この依存関係は満たしているはずなのに...？？？</p>
<h2 id="原因">原因</h2>
<p>hslua-1.3.0 の Cabal ファイルを読んでたら気づいた：</p>
<pre class="cabal"><code>  if impl(ghc &lt; 8.8)
    build-depends:       base-compat          &gt;= 0.10
    hs-source-dirs:      prelude
    other-modules:       Prelude</code></pre>
<p><code>if impl(ghc &lt; 8.8)</code> の部分． もしかして，Bazel の依存パッケージを解決してるときにこの分岐がうまくいってない？つまり GHC のバージョンが間違ってる？</p>
<p>正解でした．</p>
<h2 id="対処">対処</h2>
<p>GHC のバージョンは rules_haskell の <code>rules_haskell_toolchains</code> の <code>version</code> 引数で指定できる． 指定しない場合は デフォルトで 8.6.5 が利用される． 決して，<code>stack_snapshot</code> で指定した LTS から自動で解決されない（はず）． 僕はこの仕様をすっかり忘れており，LTS では GHC 8.8 系を利用しているのに GHC 8.6 でビルドをしていた． 結果として，依存パッケージの解決がめちゃくちゃになっていたのだ．</p>
<p>対処法は簡単で，<code>rules_haskell_toolchains</code> で <code>version</code> を指定すれば良い：</p>
<div class="sourceCode" id="cb3"><pre class="sourceCode py"><code class="sourceCode python"><span id="cb3-1"><a href="#cb3-1" aria-hidden="true" tabindex="-1"></a>http_archive(</span>
<span id="cb3-2"><a href="#cb3-2" aria-hidden="true" tabindex="-1"></a>    name <span class="op">=</span> <span class="st">&quot;rules_haskell&quot;</span>,</span>
<span id="cb3-3"><a href="#cb3-3" aria-hidden="true" tabindex="-1"></a>    strip_prefix <span class="op">=</span> <span class="st">&quot;rules_haskell-3b8182ca5287cf93687fff1cefd98910f683b679&quot;</span>,</span>
<span id="cb3-4"><a href="#cb3-4" aria-hidden="true" tabindex="-1"></a>    urls <span class="op">=</span> [<span class="st">&quot;https://github.com/tweag/rules_haskell/archive/3b8182ca5287cf93687fff1cefd98910f683b679.tar.gz&quot;</span>],</span>
<span id="cb3-5"><a href="#cb3-5" aria-hidden="true" tabindex="-1"></a>    sha256 <span class="op">=</span> <span class="st">&quot;85f269adfecfc5760fae6017608f7efebfccb719c22c7e71af03c4887f54b08e&quot;</span>,</span>
<span id="cb3-6"><a href="#cb3-6" aria-hidden="true" tabindex="-1"></a>)</span>
<span id="cb3-7"><a href="#cb3-7" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb3-8"><a href="#cb3-8" aria-hidden="true" tabindex="-1"></a>load(</span>
<span id="cb3-9"><a href="#cb3-9" aria-hidden="true" tabindex="-1"></a>    <span class="st">&quot;@rules_haskell//haskell:toolchain.bzl&quot;</span>,</span>
<span id="cb3-10"><a href="#cb3-10" aria-hidden="true" tabindex="-1"></a>    <span class="st">&quot;rules_haskell_toolchains&quot;</span>,</span>
<span id="cb3-11"><a href="#cb3-11" aria-hidden="true" tabindex="-1"></a>)</span>
<span id="cb3-12"><a href="#cb3-12" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb3-13"><a href="#cb3-13" aria-hidden="true" tabindex="-1"></a>rules_haskell_toolchains(version <span class="op">=</span> <span class="st">&quot;8.8.4&quot;</span>)</span></code></pre></div>
<p>ちなみに，rules_haskell の現在の最新のバージョンタグである v0.13 を使わずに，直接最新のコミットハッシュを指定しているのは，v0.13 では LTS で利用している 8.8.4 が無いからだ．</p>
<h2 id="おしまい">おしまい</h2>
<p>本当にちょっとしたことだけど念のため記事にしておいた． rules_haskell が流行ったあかつきにはきっと助かる人が出るはず笑</p>]]></content>
    </entry>
    <entry>
        <title>MarkdownをMediumへポストするときにコードブロックをGistのリンクにする</title>
        <link href="https://matsubara0507.github.ioposts/2021-01-01-mdium-with-gist.html"/>
        <id>https://matsubara0507.github.ioposts/2021-01-01-mdium-with-gist.html</id>
        <updated>2021-01-01T00:00:SZ</updated>
        <category term="Haskell"/>
        <category term="application"/>
        <summary></summary>
        <content type="html"><![CDATA[<p>「<a href="/posts/2018-11-04-create-mdium.html">Markdownで書いたテキストをMediumへポストする(mdium)</a>」で作った Markdown で書いたテキストを Medium へポストするツールですが，ちょくちょく改良を続けてます． 今回は Pandoc を利用して、コードブロックを Gist のリンクに置き換える機能を追加したので，そのことについてのメモ書きです．</p>
<h2 id="medium-のシンタックスハイライト">Medium のシンタックスハイライト</h2>
<p>Medium は普通にコードブロックを記述するとシンタックハイライトされずダサい：</p>
<p><img src="/assets/mdium-with-gist/medium-code-block.jpg" /></p>
<p>これをなんとかする方法の一つに Gist のリンクを貼って埋め込みにするというのがある：</p>
<p><img src="/assets/mdium-with-gist/medium-code-block-using-gist.jpg" /></p>
<p>ただし，一つの Gist に一つのファイルを設定しないといけないのでコスパが最悪で，1つの記事に対してこんな感じに大量の Gist を作る必要がある：</p>
<p><img src="/assets/mdium-with-gist/many-gists-for-medium.jpg" /></p>
<p>最近はその Gist を使った方法をとっているが，いちいち Gist に手で置き換えるのはめんどいよね． ってことで，自作ツールの mdium が自動でやってくれるようにした．</p>
<h2 id="作る">作る</h2>
<p>作業 PR はこれです：</p>
<ul>
<li><a href="https://github.com/matsubara0507/mdium/pull/9">Add gist option · #9 · matsubara0507/mdium</a></li>
</ul>
<h3 id="gist-を作成する-api">Gist を作成する API</h3>
<p><a href="https://docs.github.com/rest/reference/gists#create-a-gist">GitHub API には Gist を作成するものがある</a>． しかし，私がよく使う <a href="https://hackage.haskell.org/package/github">Haskell の GitHub クライアント</a>には Gist を作成する関数が作られてなかった． ので，作成してとりあえず PR を出した：</p>
<ul>
<li><a href="https://github.com/phadej/github/pull/455">Add endpoint to create gist · #455 · phadej/github</a></li>
</ul>
<p>実は（リファレンスからは分かりにくい？）注意点があって：</p>
<ol>
<li><code>files</code> は <code>{"hoge.txt": {"content": "abc"}}</code> って感じのJSONオブジェクト</li>
<li><code>description</code> パラメーターや <code>files</code> の <code>content</code> は <code>null</code> を渡せない</li>
<li><code>public</code> を <code>null</code> にした場合レスポンスの <code>public</code> も <code>null</code> になる</li>
</ol>
<p>aeson で <code>Maybe</code> を使ってオプショナルなパラメーターを表現した場合は強制的に <code>null</code> が渡される． <del>そのため，<code>description</code> はオプショナルなパラメーターだが型を <code>Text</code> にした</del> が，レビューで次のようにやればいいよって返ってきた：</p>
<div class="sourceCode" id="cb1"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span id="cb1-1"><a href="#cb1-1" aria-hidden="true" tabindex="-1"></a><span class="kw">instance</span> <span class="dt">ToJSON</span> <span class="dt">NewGist</span> <span class="kw">where</span></span>
<span id="cb1-2"><a href="#cb1-2" aria-hidden="true" tabindex="-1"></a>    toJSON <span class="dt">NewGist</span> { <span class="op">...</span> } <span class="ot">=</span> object <span class="op">$</span> <span class="fu">filter</span> notNull</span>
<span id="cb1-3"><a href="#cb1-3" aria-hidden="true" tabindex="-1"></a>                   [ <span class="st">&quot;description&quot;</span> <span class="op">.=</span> newGistDescription</span>
<span id="cb1-4"><a href="#cb1-4" aria-hidden="true" tabindex="-1"></a>                   , <span class="st">&quot;files&quot;</span>       <span class="op">.=</span> newGistFiles</span>
<span id="cb1-5"><a href="#cb1-5" aria-hidden="true" tabindex="-1"></a>                   , <span class="st">&quot;public&quot;</span>      <span class="op">.=</span> newGistPublic</span>
<span id="cb1-6"><a href="#cb1-6" aria-hidden="true" tabindex="-1"></a>                   ]</span>
<span id="cb1-7"><a href="#cb1-7" aria-hidden="true" tabindex="-1"></a>      <span class="kw">where</span></span>
<span id="cb1-8"><a href="#cb1-8" aria-hidden="true" tabindex="-1"></a>        notNull (_, <span class="dt">Null</span>) <span class="ot">=</span> <span class="dt">False</span></span>
<span id="cb1-9"><a href="#cb1-9" aria-hidden="true" tabindex="-1"></a>        notNull (_, _)    <span class="ot">=</span> <span class="dt">True</span></span></code></pre></div>
<p>なるほど，レビュー感謝． で，<code>public</code> は，すでにある <code>Gist</code> 型（レスポンスに使いたい）の <code>public</code> が <code>Maybe Bool</code> ではなく <code>Bool</code> なので (3) の挙動が困る． そのため，<code>public</code> パラメーターの型も <code>Bool</code> にしたが，<code>description</code> 同様に <code>filter notNull</code> 効かせたので普通に <code>Maybe Bool</code> で良くなった． ちなみに，デフォルトは <code>false</code>．</p>
<h3 id="pandoc-で書き換える">Pandoc で書き換える</h3>
<p>少しオーバースペックのような気がするが，Pandoc を利用して Markdown をパースする：</p>
<div class="sourceCode" id="cb2"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span id="cb2-1"><a href="#cb2-1" aria-hidden="true" tabindex="-1"></a><span class="ot">customizeContent ::</span> <span class="dt">Text</span> <span class="ot">-&gt;</span> <span class="dt">RIO</span> <span class="dt">Env</span> <span class="dt">Text</span></span>
<span id="cb2-2"><a href="#cb2-2" aria-hidden="true" tabindex="-1"></a>customizeContent content <span class="ot">=</span> liftIO <span class="op">.</span> Pandoc.runIOorExplode <span class="op">$</span> <span class="kw">do</span></span>
<span id="cb2-3"><a href="#cb2-3" aria-hidden="true" tabindex="-1"></a>  p0 <span class="ot">&lt;-</span> Pandoc.readCommonMark Pandoc.def content</span>
<span id="cb2-4"><a href="#cb2-4" aria-hidden="true" tabindex="-1"></a>  Pandoc.writeCommonMark Pandoc.def p0</span></code></pre></div>
<p><code>readMarkdown</code> というのもあるが，GFM などを使う場合は <code>readCommonMark</code> の方を使う． <code>p0</code> というのが <code>Pandoc</code> 型の値で，<code>Walkable</code> を利用することで任意のブロックに対してのみ変換を適用したりできる：</p>
<div class="sourceCode" id="cb3"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span id="cb3-1"><a href="#cb3-1" aria-hidden="true" tabindex="-1"></a><span class="ot">customizeContent ::</span> <span class="dt">Text</span> <span class="ot">-&gt;</span> <span class="dt">RIO</span> <span class="dt">Env</span> <span class="dt">Text</span></span>
<span id="cb3-2"><a href="#cb3-2" aria-hidden="true" tabindex="-1"></a>customizeContent content <span class="ot">=</span> <span class="kw">do</span></span>
<span id="cb3-3"><a href="#cb3-3" aria-hidden="true" tabindex="-1"></a>  p0 <span class="ot">&lt;-</span> liftIO <span class="op">$</span> Pandoc.runIOorExplode (Pandoc.readCommonMark Pandoc.def content)</span>
<span id="cb3-4"><a href="#cb3-4" aria-hidden="true" tabindex="-1"></a>  p1 <span class="ot">&lt;-</span> Pandoc.walkPandocM replaceCodeBlockToGistLink p0</span>
<span id="cb3-5"><a href="#cb3-5" aria-hidden="true" tabindex="-1"></a>  liftIO <span class="op">$</span> Pandoc.runIOorExplode (Pandoc.writeCommonMark Pandoc.def p1)</span>
<span id="cb3-6"><a href="#cb3-6" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb3-7"><a href="#cb3-7" aria-hidden="true" tabindex="-1"></a><span class="ot">replaceCodeBlockToGistLink ::</span> <span class="dt">Pandoc.Block</span> <span class="ot">-&gt;</span> <span class="dt">RIO</span> <span class="dt">Env</span> <span class="dt">Pandoc.Block</span></span>
<span id="cb3-8"><a href="#cb3-8" aria-hidden="true" tabindex="-1"></a>replaceCodeBlockToGistLink <span class="ot">=</span> \<span class="kw">case</span></span>
<span id="cb3-9"><a href="#cb3-9" aria-hidden="true" tabindex="-1"></a>  <span class="dt">Pandoc.CodeBlock</span> attr txt <span class="ot">-&gt;</span> <span class="fu">undefined</span> <span class="co">-- 書き換える</span></span>
<span id="cb3-10"><a href="#cb3-10" aria-hidden="true" tabindex="-1"></a>  block <span class="ot">-&gt;</span> <span class="fu">pure</span> block</span></code></pre></div>
<p>Gist がよしなにプログラミング言語を特定してシンタックスハイライトするにはファイルの拡張子が必要だ． コードブロックのバッククオートの後ろに指定している拡張子を取得するために <code>attr</code> を見てみると <code>("", ["hs"], [])</code> となっていた（プログラミング言語名も指定できるけど，拡張子だけを指定してるとする）． なので，これを利用する：</p>
<div class="sourceCode" id="cb4"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span id="cb4-1"><a href="#cb4-1" aria-hidden="true" tabindex="-1"></a><span class="ot">replaceCodeBlockToGistLink ::</span> <span class="dt">Pandoc.Block</span> <span class="ot">-&gt;</span> <span class="dt">RIO</span> <span class="dt">Env</span> <span class="dt">Pandoc.Block</span></span>
<span id="cb4-2"><a href="#cb4-2" aria-hidden="true" tabindex="-1"></a>replaceCodeBlockToGistLink <span class="ot">=</span> \<span class="kw">case</span></span>
<span id="cb4-3"><a href="#cb4-3" aria-hidden="true" tabindex="-1"></a>  <span class="dt">Pandoc.CodeBlock</span> (_, [ext], _) txt <span class="ot">-&gt;</span> <span class="kw">do</span></span>
<span id="cb4-4"><a href="#cb4-4" aria-hidden="true" tabindex="-1"></a>    gist <span class="ot">&lt;-</span> lift <span class="op">$</span> createGist ext txt</span>
<span id="cb4-5"><a href="#cb4-5" aria-hidden="true" tabindex="-1"></a>    <span class="fu">pure</span> <span class="op">$</span> <span class="dt">Pandoc.Plain</span> [<span class="dt">Pandoc.Str</span> (GitHub.getUrl <span class="op">$</span> GitHub.gistHtmlUrl gist)]</span>
<span id="cb4-6"><a href="#cb4-6" aria-hidden="true" tabindex="-1"></a>  block <span class="ot">-&gt;</span> <span class="fu">pure</span> block</span>
<span id="cb4-7"><a href="#cb4-7" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb4-8"><a href="#cb4-8" aria-hidden="true" tabindex="-1"></a><span class="ot">createGist ::</span> <span class="dt">Text</span> <span class="ot">-&gt;</span> <span class="dt">Text</span> <span class="ot">-&gt;</span> <span class="dt">RIO</span> <span class="dt">Env</span> <span class="dt">GitHub.Gist</span></span>
<span id="cb4-9"><a href="#cb4-9" aria-hidden="true" tabindex="-1"></a>createGist ext txt <span class="ot">=</span> <span class="kw">do</span></span>
<span id="cb4-10"><a href="#cb4-10" aria-hidden="true" tabindex="-1"></a>  <span class="kw">let</span> files <span class="ot">=</span> HM.fromList [(<span class="st">&quot;sample.&quot;</span> <span class="op">&lt;&gt;</span> ext, <span class="dt">GitHub.NewGistFile</span> txt)]</span>
<span id="cb4-11"><a href="#cb4-11" aria-hidden="true" tabindex="-1"></a>  <span class="co">-- とりあえずエラーハンドリングは適当に throwM する</span></span>
<span id="cb4-12"><a href="#cb4-12" aria-hidden="true" tabindex="-1"></a>  <span class="fu">either</span> throwM <span class="fu">pure</span> <span class="op">=&lt;&lt;</span> MixGitHub.fetch (GitHub.createGistR <span class="op">$</span> <span class="dt">GitHub.NewGist</span> <span class="st">&quot;&quot;</span> files <span class="dt">True</span>)</span></code></pre></div>
<p><code>MixGitHub.fetch</code> というのは<a href="https://github.com/matsubara0507/mix.hs/tree/master/mix-plugin-github">これ</a>です． 便利です．</p>
<p>これでとりあえず，コードブロックから Gist を作ってリンクに置き換えることができるようになった．</p>
<h3 id="gist-のファイル名を工夫する">Gist のファイル名を工夫する</h3>
<p>現状だと全ての Gist ファイルが <code>sample.hs</code> みたいに拡張子以外は一緒になってしまう． なのでプレフィックスを指定できるようにするのと，何個目のコードブロックかで <code>sample1.hs</code> や <code>sample2.hs</code> みたいにできるようにしたい． そのために <code>State</code> モナドを利用する：</p>
<div class="sourceCode" id="cb5"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span id="cb5-1"><a href="#cb5-1" aria-hidden="true" tabindex="-1"></a><span class="ot">customizeContent ::</span> <span class="dt">Text</span> <span class="ot">-&gt;</span> <span class="dt">RIO</span> <span class="dt">Env</span> <span class="dt">Text</span></span>
<span id="cb5-2"><a href="#cb5-2" aria-hidden="true" tabindex="-1"></a>customizeContent content <span class="ot">=</span> <span class="kw">do</span></span>
<span id="cb5-3"><a href="#cb5-3" aria-hidden="true" tabindex="-1"></a>  p0 <span class="ot">&lt;-</span> liftIO <span class="op">$</span> Pandoc.runIOorExplode (Pandoc.readCommonMark Pandoc.def content)</span>
<span id="cb5-4"><a href="#cb5-4" aria-hidden="true" tabindex="-1"></a>  p1 <span class="ot">&lt;-</span> <span class="fu">fst</span> <span class="op">&lt;$&gt;</span> runStateT (Pandoc.walkPandocM replaceCodeBlockToGistLink p0) <span class="dv">1</span></span>
<span id="cb5-5"><a href="#cb5-5" aria-hidden="true" tabindex="-1"></a>  liftIO <span class="op">$</span> Pandoc.runIOorExplode (Pandoc.writeCommonMark Pandoc.def p1)</span>
<span id="cb5-6"><a href="#cb5-6" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb5-7"><a href="#cb5-7" aria-hidden="true" tabindex="-1"></a><span class="ot">replaceCodeBlockToGistLink ::</span>  <span class="dt">Pandoc.Block</span> <span class="ot">-&gt;</span> <span class="dt">StateT</span> <span class="dt">Int</span> (<span class="dt">RIO</span> <span class="dt">Env</span>) <span class="dt">Pandoc.Block</span></span>
<span id="cb5-8"><a href="#cb5-8" aria-hidden="true" tabindex="-1"></a>replaceCodeBlockToGistLink <span class="ot">=</span> \<span class="kw">case</span></span>
<span id="cb5-9"><a href="#cb5-9" aria-hidden="true" tabindex="-1"></a>  <span class="dt">Pandoc.CodeBlock</span> (_, [ext], _) txt <span class="ot">-&gt;</span> <span class="kw">do</span></span>
<span id="cb5-10"><a href="#cb5-10" aria-hidden="true" tabindex="-1"></a>    cnt  <span class="ot">&lt;-</span> State.get</span>
<span id="cb5-11"><a href="#cb5-11" aria-hidden="true" tabindex="-1"></a>    gist <span class="ot">&lt;-</span> lift <span class="op">$</span> createGist (tshow cnt) ext txt</span>
<span id="cb5-12"><a href="#cb5-12" aria-hidden="true" tabindex="-1"></a>    State.modify (<span class="op">+</span> <span class="dv">1</span>)</span>
<span id="cb5-13"><a href="#cb5-13" aria-hidden="true" tabindex="-1"></a>    <span class="fu">pure</span> <span class="op">$</span> <span class="dt">Pandoc.Plain</span> [<span class="dt">Pandoc.Str</span> (GitHub.getUrl <span class="op">$</span> GitHub.gistHtmlUrl gist)]</span>
<span id="cb5-14"><a href="#cb5-14" aria-hidden="true" tabindex="-1"></a>  block <span class="ot">-&gt;</span> <span class="fu">pure</span> block</span>
<span id="cb5-15"><a href="#cb5-15" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb5-16"><a href="#cb5-16" aria-hidden="true" tabindex="-1"></a><span class="ot">createGist ::</span> <span class="dt">Text</span> <span class="ot">-&gt;</span> <span class="dt">Text</span> <span class="ot">-&gt;</span> <span class="dt">Text</span> <span class="ot">-&gt;</span> <span class="dt">RIO</span> <span class="dt">Env</span> <span class="dt">GitHub.Gist</span></span>
<span id="cb5-17"><a href="#cb5-17" aria-hidden="true" tabindex="-1"></a>createGist suffix ext txt <span class="ot">=</span> <span class="kw">do</span></span>
<span id="cb5-18"><a href="#cb5-18" aria-hidden="true" tabindex="-1"></a>  <span class="kw">let</span> files <span class="ot">=</span> HM.fromList [(<span class="st">&quot;sample&quot;</span> <span class="op">&lt;&gt;</span> suffix <span class="op">&lt;&gt;</span> <span class="st">&quot;.&quot;</span> <span class="op">&lt;&gt;</span> ext, <span class="dt">GitHub.NewGistFile</span> txt)]</span>
<span id="cb5-19"><a href="#cb5-19" aria-hidden="true" tabindex="-1"></a>  <span class="fu">either</span> throwM <span class="fu">pure</span> <span class="op">=&lt;&lt;</span> MixGitHub.fetch (GitHub.createGistR <span class="op">$</span> <span class="dt">GitHub.NewGist</span> <span class="st">&quot;&quot;</span> files <span class="dt">True</span>)</span></code></pre></div>
<p>プレフィックスはコマンドのオプションから指定して，適当に <code>createGist</code> まで持ってくるだけなので割愛． これで完全に手作業してたのが自動化された．</p>
<h2 id="おしまい">おしまい</h2>
<p>Pandoc パッケージのビルドがゲキオモなのがネックだけどね．</p>]]></content>
    </entry>
    <entry>
        <title>外部ツールのバージョンアップを GitHub Actions で検知する</title>
        <link href="https://matsubara0507.github.ioposts/2020-12-14-check-release-using-github-actions.html"/>
        <id>https://matsubara0507.github.ioposts/2020-12-14-check-release-using-github-actions.html</id>
        <updated>2020-12-14T00:00:SZ</updated>
        <category term="GitHub-Actions"/>
        <summary></summary>
        <content type="html"><![CDATA[<p>GitHub Actions のアクションや Bazel ルールを書いたりすると，外部のアプリケーションのアップデートを検知したいときがしばしばあります． いろいろ試行錯誤した結果，GitHub Actions を使って実現することにしたので，本記事はそのメモ書きです．</p>
<h1 id="section"></h1>
<p>ちなみに，本記事は「<a href="https://qiita.com/advent-calendar/2020/github-actions">GitHub Actions Advent Calendar 2020</a>」の14日目の記事です．</p>
<h2 id="github-actions-を設定する">GitHub Actions を設定する</h2>
<p>実際に導入した PR がこちら：</p>
<ul>
<li><a href="https://github.com/matsubara0507/rules_yq/pull/1">Add GitHub Action to check new yq version by matsubara0507 · Pull Request #1 · matsubara0507/rules_yq</a></li>
</ul>
<p><a href="https://github.com/mikefarah/yq">yq</a> と言うツールのリリースを検知しようとしている． ちなみに，最新のバージョンは中の処理のデフォルト値として利用している．</p>
<h3 id="デフォルト値を取り出す">デフォルト値を取り出す</h3>
<p>まずは，現在のデフォルトのバージョンを参照しやすいように別ファイル（yq/default.bzl）にしておく：</p>
<div class="sourceCode" id="cb1"><pre class="sourceCode py"><code class="sourceCode python"><span id="cb1-1"><a href="#cb1-1" aria-hidden="true" tabindex="-1"></a>YQ_DEFAULT_VERSION <span class="op">=</span> <span class="st">&quot;3.4.1&quot;</span></span></code></pre></div>
<p>これを sed でいい感じに取り出して GitHub Actions の output に入れていく：</p>
<div class="sourceCode" id="cb2"><pre class="sourceCode yaml"><code class="sourceCode yaml"><span id="cb2-1"><a href="#cb2-1" aria-hidden="true" tabindex="-1"></a><span class="fu">jobs</span><span class="kw">:</span></span>
<span id="cb2-2"><a href="#cb2-2" aria-hidden="true" tabindex="-1"></a><span class="at">  </span><span class="fu">build</span><span class="kw">:</span></span>
<span id="cb2-3"><a href="#cb2-3" aria-hidden="true" tabindex="-1"></a><span class="at">    </span><span class="fu">name</span><span class="kw">:</span><span class="at"> Build new version commit</span></span>
<span id="cb2-4"><a href="#cb2-4" aria-hidden="true" tabindex="-1"></a><span class="at">    </span><span class="fu">runs-on</span><span class="kw">:</span><span class="at"> ubuntu-latest</span></span>
<span id="cb2-5"><a href="#cb2-5" aria-hidden="true" tabindex="-1"></a><span class="at">    </span><span class="fu">env</span><span class="kw">:</span></span>
<span id="cb2-6"><a href="#cb2-6" aria-hidden="true" tabindex="-1"></a><span class="at">      </span><span class="fu">DEFAULT_FILE_PATH</span><span class="kw">:</span><span class="at"> yq/default.bzl</span></span>
<span id="cb2-7"><a href="#cb2-7" aria-hidden="true" tabindex="-1"></a><span class="at">    </span><span class="fu">steps</span><span class="kw">:</span></span>
<span id="cb2-8"><a href="#cb2-8" aria-hidden="true" tabindex="-1"></a><span class="at">    ...</span></span>
<span id="cb2-9"><a href="#cb2-9" aria-hidden="true" tabindex="-1"></a><span class="at">    </span><span class="kw">-</span><span class="at"> </span><span class="fu">name</span><span class="kw">:</span><span class="at"> Set default version</span></span>
<span id="cb2-10"><a href="#cb2-10" aria-hidden="true" tabindex="-1"></a><span class="at">      </span><span class="fu">id</span><span class="kw">:</span><span class="at"> default</span></span>
<span id="cb2-11"><a href="#cb2-11" aria-hidden="true" tabindex="-1"></a><span class="at">      </span><span class="fu">run</span><span class="kw">:</span><span class="at"> echo &quot;::set-output name=version::$(sed -e s/YQ_DEFAULT_VERSION\ =\ //g $DEFAULT_FILE_PATH | sed -e s/\&quot;//g)&quot;</span></span></code></pre></div>
<p><code>::set-output</code> というのは GitHub Actions の記法で， step 毎の結果を同じ job 間で共有するために使う．以降の step で <code>steps.default.outputs.version</code> という形で <code>sed</code> の結果を参照できるようになる．</p>
<h3 id="最新のリリースバージョンを取り出す">最新のリリースバージョンを取り出す</h3>
<p>最新のリリースは <a href="https://docs.github.com/en/free-pro-team@latest/rest/reference/repos#get-the-latest-release">GitHub のリリースから API</a> を使って取得する． API のレスポンスからバージョンの情報を <code>jq</code> でいい感じに取り出して，また output に入れておく：</p>
<div class="sourceCode" id="cb3"><pre class="sourceCode yaml"><code class="sourceCode yaml"><span id="cb3-1"><a href="#cb3-1" aria-hidden="true" tabindex="-1"></a><span class="fu">jobs</span><span class="kw">:</span></span>
<span id="cb3-2"><a href="#cb3-2" aria-hidden="true" tabindex="-1"></a><span class="at">  </span><span class="fu">build</span><span class="kw">:</span></span>
<span id="cb3-3"><a href="#cb3-3" aria-hidden="true" tabindex="-1"></a><span class="at">    </span><span class="fu">name</span><span class="kw">:</span><span class="at"> Build new version commit</span></span>
<span id="cb3-4"><a href="#cb3-4" aria-hidden="true" tabindex="-1"></a><span class="at">    </span><span class="fu">runs-on</span><span class="kw">:</span><span class="at"> ubuntu-latest</span></span>
<span id="cb3-5"><a href="#cb3-5" aria-hidden="true" tabindex="-1"></a><span class="at">    </span><span class="fu">env</span><span class="kw">:</span></span>
<span id="cb3-6"><a href="#cb3-6" aria-hidden="true" tabindex="-1"></a><span class="at">      </span><span class="fu">DEFAULT_FILE_PATH</span><span class="kw">:</span><span class="at"> yq/default.bzl</span></span>
<span id="cb3-7"><a href="#cb3-7" aria-hidden="true" tabindex="-1"></a><span class="at">      </span><span class="fu">LATEST_LINK</span><span class="kw">:</span><span class="at"> https://api.github.com/repos/mikefarah/yq/releases/latest</span></span>
<span id="cb3-8"><a href="#cb3-8" aria-hidden="true" tabindex="-1"></a><span class="at">    </span><span class="fu">steps</span><span class="kw">:</span></span>
<span id="cb3-9"><a href="#cb3-9" aria-hidden="true" tabindex="-1"></a><span class="at">    ...</span></span>
<span id="cb3-10"><a href="#cb3-10" aria-hidden="true" tabindex="-1"></a><span class="at">    </span><span class="kw">-</span><span class="at"> </span><span class="fu">name</span><span class="kw">:</span><span class="at"> Set latest version</span></span>
<span id="cb3-11"><a href="#cb3-11" aria-hidden="true" tabindex="-1"></a><span class="at">      </span><span class="fu">id</span><span class="kw">:</span><span class="at"> latest</span></span>
<span id="cb3-12"><a href="#cb3-12" aria-hidden="true" tabindex="-1"></a><span class="at">      </span><span class="fu">run</span><span class="kw">:</span><span class="at"> echo &quot;::set-output name=version::$(curl -s $LATEST_LINK | jq .tag_name | sed -e s/\&quot;//g)&quot;</span></span></code></pre></div>
<p>以降の step で <code>steps.latest.outputs.version</code> という形で <code>jq</code> の結果を参照できるようになる．</p>
<h3 id="デフォルト値を更新する">デフォルト値を更新する</h3>
<p>これら2つのバージョンが異なるときにだけデフォルト値を更新するようにする：</p>
<div class="sourceCode" id="cb4"><pre class="sourceCode yaml"><code class="sourceCode yaml"><span id="cb4-1"><a href="#cb4-1" aria-hidden="true" tabindex="-1"></a><span class="fu">jobs</span><span class="kw">:</span></span>
<span id="cb4-2"><a href="#cb4-2" aria-hidden="true" tabindex="-1"></a><span class="at">  </span><span class="fu">build</span><span class="kw">:</span></span>
<span id="cb4-3"><a href="#cb4-3" aria-hidden="true" tabindex="-1"></a><span class="at">    </span><span class="fu">name</span><span class="kw">:</span><span class="at"> Build new version commit</span></span>
<span id="cb4-4"><a href="#cb4-4" aria-hidden="true" tabindex="-1"></a><span class="at">    </span><span class="fu">runs-on</span><span class="kw">:</span><span class="at"> ubuntu-latest</span></span>
<span id="cb4-5"><a href="#cb4-5" aria-hidden="true" tabindex="-1"></a><span class="at">    </span><span class="fu">env</span><span class="kw">:</span></span>
<span id="cb4-6"><a href="#cb4-6" aria-hidden="true" tabindex="-1"></a><span class="at">      </span><span class="fu">DEFAULT_FILE_PATH</span><span class="kw">:</span><span class="at"> yq/default.bzl</span></span>
<span id="cb4-7"><a href="#cb4-7" aria-hidden="true" tabindex="-1"></a><span class="at">      </span><span class="fu">LATEST_LINK</span><span class="kw">:</span><span class="at"> https://api.github.com/repos/mikefarah/yq/releases/latest</span></span>
<span id="cb4-8"><a href="#cb4-8" aria-hidden="true" tabindex="-1"></a><span class="at">    </span><span class="fu">steps</span><span class="kw">:</span></span>
<span id="cb4-9"><a href="#cb4-9" aria-hidden="true" tabindex="-1"></a><span class="at">    ...</span></span>
<span id="cb4-10"><a href="#cb4-10" aria-hidden="true" tabindex="-1"></a><span class="at">    </span><span class="kw">-</span><span class="at"> </span><span class="fu">name</span><span class="kw">:</span><span class="at"> Update new version default.bzl</span></span>
<span id="cb4-11"><a href="#cb4-11" aria-hidden="true" tabindex="-1"></a><span class="at">      </span><span class="fu">if</span><span class="kw">:</span><span class="at"> ${{ steps.latest.outputs.version != steps.default.outputs.version }}</span></span>
<span id="cb4-12"><a href="#cb4-12" aria-hidden="true" tabindex="-1"></a><span class="at">      </span><span class="fu">env</span><span class="kw">:</span></span>
<span id="cb4-13"><a href="#cb4-13" aria-hidden="true" tabindex="-1"></a><span class="at">        </span><span class="fu">NEW_VERSION</span><span class="kw">:</span><span class="at"> ${{ steps.latest.outputs.version }}</span></span>
<span id="cb4-14"><a href="#cb4-14" aria-hidden="true" tabindex="-1"></a><span class="at">      </span><span class="fu">run</span><span class="kw">:</span><span class="at"> echo &quot;YQ_DEFAULT_VERSION = \&quot;$NEW_VERSION\&quot;&quot; &gt; $DEFAULT_FILE_PATH    </span></span></code></pre></div>
<p>ただ切り出しておいたファイルを上書きしているだけ．</p>
<h3 id="prを作成する">PRを作成する</h3>
<p><a href="https://github.com/peter-evans/create-pull-request">peter-evans/create-pull-request</a> という GitHub Actions を利用する：</p>
<div class="sourceCode" id="cb5"><pre class="sourceCode yaml"><code class="sourceCode yaml"><span id="cb5-1"><a href="#cb5-1" aria-hidden="true" tabindex="-1"></a><span class="fu">jobs</span><span class="kw">:</span></span>
<span id="cb5-2"><a href="#cb5-2" aria-hidden="true" tabindex="-1"></a><span class="at">  </span><span class="fu">build</span><span class="kw">:</span></span>
<span id="cb5-3"><a href="#cb5-3" aria-hidden="true" tabindex="-1"></a><span class="at">    </span><span class="fu">name</span><span class="kw">:</span><span class="at"> Build new version commit</span></span>
<span id="cb5-4"><a href="#cb5-4" aria-hidden="true" tabindex="-1"></a><span class="at">    </span><span class="fu">runs-on</span><span class="kw">:</span><span class="at"> ubuntu-latest</span></span>
<span id="cb5-5"><a href="#cb5-5" aria-hidden="true" tabindex="-1"></a><span class="at">    </span><span class="fu">env</span><span class="kw">:</span></span>
<span id="cb5-6"><a href="#cb5-6" aria-hidden="true" tabindex="-1"></a><span class="at">      </span><span class="fu">DEFAULT_FILE_PATH</span><span class="kw">:</span><span class="at"> yq/default.bzl</span></span>
<span id="cb5-7"><a href="#cb5-7" aria-hidden="true" tabindex="-1"></a><span class="at">      </span><span class="fu">LATEST_LINK</span><span class="kw">:</span><span class="at"> https://api.github.com/repos/mikefarah/yq/releases/latest</span></span>
<span id="cb5-8"><a href="#cb5-8" aria-hidden="true" tabindex="-1"></a><span class="at">    </span><span class="fu">steps</span><span class="kw">:</span></span>
<span id="cb5-9"><a href="#cb5-9" aria-hidden="true" tabindex="-1"></a><span class="at">    ...</span></span>
<span id="cb5-10"><a href="#cb5-10" aria-hidden="true" tabindex="-1"></a><span class="at">    </span><span class="kw">-</span><span class="at"> </span><span class="fu">name</span><span class="kw">:</span><span class="at"> Create Pull Request</span></span>
<span id="cb5-11"><a href="#cb5-11" aria-hidden="true" tabindex="-1"></a><span class="at">      </span><span class="fu">if</span><span class="kw">:</span><span class="at"> ${{ steps.latest.outputs.version != steps.default.outputs.version }}</span></span>
<span id="cb5-12"><a href="#cb5-12" aria-hidden="true" tabindex="-1"></a><span class="at">      </span><span class="fu">uses</span><span class="kw">:</span><span class="at"> peter-evans/create-pull-request@v3.5.1</span></span>
<span id="cb5-13"><a href="#cb5-13" aria-hidden="true" tabindex="-1"></a><span class="at">      </span><span class="fu">with</span><span class="kw">:</span></span>
<span id="cb5-14"><a href="#cb5-14" aria-hidden="true" tabindex="-1"></a><span class="at">        </span><span class="fu">token</span><span class="kw">:</span><span class="at"> ${{ secrets.GITHUB_TOKEN }}</span></span>
<span id="cb5-15"><a href="#cb5-15" aria-hidden="true" tabindex="-1"></a><span class="at">        </span><span class="fu">commit-message</span><span class="kw">:</span><span class="at"> </span><span class="st">&#39;Feat: update default yq version&#39;</span></span>
<span id="cb5-16"><a href="#cb5-16" aria-hidden="true" tabindex="-1"></a><span class="at">        </span><span class="fu">title</span><span class="kw">:</span><span class="at"> Release new yq version ${{ steps.latest.outputs.version }}</span></span>
<span id="cb5-17"><a href="#cb5-17" aria-hidden="true" tabindex="-1"></a><span class="fu">        body</span><span class="kw">: </span><span class="ch">|</span></span>
<span id="cb5-18"><a href="#cb5-18" aria-hidden="true" tabindex="-1"></a>         @matsubara0507</span>
<span id="cb5-19"><a href="#cb5-19" aria-hidden="true" tabindex="-1"></a>         - [x] update default version in yq</span>
<span id="cb5-20"><a href="#cb5-20" aria-hidden="true" tabindex="-1"></a>         - [ ] add new checksums to yq/toolchain.bzl</span>
<span id="cb5-21"><a href="#cb5-21" aria-hidden="true" tabindex="-1"></a>         - [ ] update documents (README, actions.yml)</span>
<span id="cb5-22"><a href="#cb5-22" aria-hidden="true" tabindex="-1"></a>         - [ ] update sample workflow</span>
<span id="cb5-23"><a href="#cb5-23" aria-hidden="true" tabindex="-1"></a><span class="at">        </span><span class="fu">labels</span><span class="kw">:</span><span class="at"> New yq Version</span></span>
<span id="cb5-24"><a href="#cb5-24" aria-hidden="true" tabindex="-1"></a><span class="at">        </span><span class="fu">branch</span><span class="kw">:</span><span class="at"> yq-version-${{ steps.latest.outputs.version }}</span></span>
<span id="cb5-25"><a href="#cb5-25" aria-hidden="true" tabindex="-1"></a><span class="at">        </span><span class="fu">base</span><span class="kw">:</span><span class="at"> main</span><span class="co">  # 最近作ったリポジトリなので main がデフォルトブランチ</span></span>
<span id="cb5-26"><a href="#cb5-26" aria-hidden="true" tabindex="-1"></a><span class="at">        </span><span class="fu">draft</span><span class="kw">:</span><span class="at"> </span><span class="ch">true</span><span class="co"> # ドラフトPRにしてくれる</span></span></code></pre></div>
<p><code>body</code> のところに自分の GitHub アカウントをメンションしておくと，GitHub のスマホアプリとかで通知されて気付きやすい． こんな感じの PR が出来上がる：</p>
<p><img src="/assets/check-release-using-github-actions/pr.jpg" /></p>
<p>ちなみに，すでにブランチがある場合は PR が作成されない． また，PR を放置しているうちに新しいバージョンがリリースされた場合は，新しい PR がもう一個でき上がる．</p>
<h2 id="おしまい">おしまい</h2>
<p>結構便利です．</p>]]></content>
    </entry>
    <entry>
        <title>Elm で Featherweight Go を書いてみた（その１）</title>
        <link href="https://matsubara0507.github.ioposts/2020-12-07-fg-with-elm-part1.html"/>
        <id>https://matsubara0507.github.ioposts/2020-12-07-fg-with-elm-part1.html</id>
        <updated>2020-12-07T00:00:SZ</updated>
        <category term="Elm"/>
        <category term="Go"/>
        <summary></summary>
        <content type="html"><![CDATA[<p>タイトルの通り，Elm で Featherweight Go を作って遊んでました． 本記事はそのメモ書きです．</p>
<h1 id="section"></h1>
<p>あとこれは <a href="https://qiita.com/advent-calendar/2020/elm">Elm Advent Calendar 2020</a> の7日目の記事です．</p>
<h2 id="featherweight-go">Featherweight Go</h2>
<p>Go にジェネリクスを導入するために考案された，極めてミニマムな Go 処理系（の形式的な定義）． そのまんま「<a href="https://arxiv.org/abs/2005.11710">Featherweight Go</a>」という論文が出てる． 前に，ざっくり日本語でまとめました：</p>
<ul>
<li><a href="https://matsubara0507.github.io/posts/2020-07-02-read-featherweight-go.html">Featherweight Go を読んでみた - ひげメモ</a></li>
</ul>
<p>論文では Featherweight Go（以下 FG）と，それにジェネリクスを追加した Featherweight Generics Go の構文規則・評価規則・型付け規則などが定義されており，型安全性が証明されている． 今回は，Featherweight Go のパーサーと型検査器を論文の定義に則って Elm で実装した話．</p>
<p>ちなみに評価の方は実装しないです．</p>
<h2 id="elm">Elm</h2>
<p>Elm は JavaScript へとトランスパイルされる Web フロントエンドに特化した純粋関数型プログラミング言語． 構文は Haskell に似ているが，言語機能自体は Haskell のように多彩ではなく，極めてコンパクトである．</p>
<p>今回 Elm を使う理由は2つあって：</p>
<ol>
<li>Elm でプログラミング言語作る人がほとんど居ないから</li>
<li>簡単に Web ビュー側を作れるから</li>
</ol>
<p>です．</p>
<h3 id="elm-でパーサーを作るには">Elm でパーサーを作るには</h3>
<p>Elm でパーサーを記述するには <a href="https://package.elm-lang.org/packages/elm/parser">elm/parser</a> という公式が提供しているパーサーコンビネーターライブラリを使う．</p>
<h2 id="fgのパーサーを作る">FGのパーサーを作る</h2>
<p>構文規則は次の通り：</p>
<p><img src="/assets/read-featherweight-go/fg.jpg" /></p>
<p>これを Elm でひたすら実装していく．</p>
<h3 id="構文の型を定義">構文の型を定義</h3>
<p>まずは，構文を表現する型を定義しよう． ひたすら予約語にあたる部分を排除するだけだ：</p>
<div class="sourceCode" id="cb1"><pre class="sourceCode elm"><code class="sourceCode elm"><span id="cb1-1"><a href="#cb1-1" aria-hidden="true" tabindex="-1"></a><span class="kw">module</span> <span class="dt">Go</span><span class="op">.</span><span class="dt">Featherweight</span><span class="op">.</span><span class="dt">Syntax</span> <span class="kw">exposing</span> (<span class="op">..</span>)</span>
<span id="cb1-2"><a href="#cb1-2" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb1-3"><a href="#cb1-3" aria-hidden="true" tabindex="-1"></a><span class="kw">type</span> <span class="kw">alias</span> <span class="dt">Program</span> <span class="op">=</span></span>
<span id="cb1-4"><a href="#cb1-4" aria-hidden="true" tabindex="-1"></a>    { <span class="fu">decls</span> : <span class="dt">List</span> <span class="dt">Declaration</span><span class="op">,</span> <span class="fu">exp</span> : <span class="dt">Expression</span> }</span>
<span id="cb1-5"><a href="#cb1-5" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb1-6"><a href="#cb1-6" aria-hidden="true" tabindex="-1"></a><span class="kw">type</span> <span class="dt">Declaration</span></span>
<span id="cb1-7"><a href="#cb1-7" aria-hidden="true" tabindex="-1"></a>    <span class="op">=</span> <span class="dt">TDecl</span></span>
<span id="cb1-8"><a href="#cb1-8" aria-hidden="true" tabindex="-1"></a>        { <span class="fu">name</span> : <span class="dt">TypeName</span></span>
<span id="cb1-9"><a href="#cb1-9" aria-hidden="true" tabindex="-1"></a>        <span class="op">,</span> <span class="fu">literal</span> : <span class="dt">TypeLiteral</span></span>
<span id="cb1-10"><a href="#cb1-10" aria-hidden="true" tabindex="-1"></a>        }</span>
<span id="cb1-11"><a href="#cb1-11" aria-hidden="true" tabindex="-1"></a>    <span class="op">|</span> <span class="dt">MDecl</span></span>
<span id="cb1-12"><a href="#cb1-12" aria-hidden="true" tabindex="-1"></a>        { <span class="fu">recv</span> : ( <span class="dt">VarName</span><span class="op">,</span> <span class="dt">TypeName</span> )</span>
<span id="cb1-13"><a href="#cb1-13" aria-hidden="true" tabindex="-1"></a>        <span class="op">,</span> <span class="fu">name</span> : <span class="dt">MethodName</span></span>
<span id="cb1-14"><a href="#cb1-14" aria-hidden="true" tabindex="-1"></a>        <span class="op">,</span> <span class="fu">sign</span> : <span class="dt">MethodSignature</span></span>
<span id="cb1-15"><a href="#cb1-15" aria-hidden="true" tabindex="-1"></a>        <span class="op">,</span> <span class="fu">retv</span> : <span class="dt">Expression</span></span>
<span id="cb1-16"><a href="#cb1-16" aria-hidden="true" tabindex="-1"></a>        }</span>
<span id="cb1-17"><a href="#cb1-17" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb1-18"><a href="#cb1-18" aria-hidden="true" tabindex="-1"></a><span class="kw">type</span> <span class="kw">alias</span> <span class="dt">TypeName</span> <span class="op">=</span> <span class="dt">String</span></span>
<span id="cb1-19"><a href="#cb1-19" aria-hidden="true" tabindex="-1"></a><span class="kw">type</span> <span class="kw">alias</span> <span class="dt">VarName</span> <span class="op">=</span> <span class="dt">String</span></span>
<span id="cb1-20"><a href="#cb1-20" aria-hidden="true" tabindex="-1"></a><span class="kw">type</span> <span class="kw">alias</span> <span class="dt">MethodName</span> <span class="op">=</span> <span class="dt">String</span></span>
<span id="cb1-21"><a href="#cb1-21" aria-hidden="true" tabindex="-1"></a><span class="kw">type</span> <span class="kw">alias</span> <span class="dt">FieldName</span> <span class="op">=</span> <span class="dt">String</span></span>
<span id="cb1-22"><a href="#cb1-22" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb1-23"><a href="#cb1-23" aria-hidden="true" tabindex="-1"></a><span class="kw">type</span> <span class="dt">TypeLiteral</span></span>
<span id="cb1-24"><a href="#cb1-24" aria-hidden="true" tabindex="-1"></a>    <span class="op">=</span> <span class="dt">Structure</span> (<span class="dt">List</span> ( <span class="dt">FieldName</span><span class="op">,</span> <span class="dt">TypeName</span> ))</span>
<span id="cb1-25"><a href="#cb1-25" aria-hidden="true" tabindex="-1"></a>    <span class="op">|</span> <span class="dt">Interface</span> (<span class="dt">List</span> <span class="dt">MethodSpecific</span>)</span>
<span id="cb1-26"><a href="#cb1-26" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb1-27"><a href="#cb1-27" aria-hidden="true" tabindex="-1"></a><span class="kw">type</span> <span class="kw">alias</span> <span class="dt">MethodSpecific</span> <span class="op">=</span></span>
<span id="cb1-28"><a href="#cb1-28" aria-hidden="true" tabindex="-1"></a>    { <span class="fu">name</span> : <span class="dt">MethodName</span><span class="op">,</span> <span class="fu">sign</span> : <span class="dt">MethodSignature</span> }</span>
<span id="cb1-29"><a href="#cb1-29" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb1-30"><a href="#cb1-30" aria-hidden="true" tabindex="-1"></a><span class="kw">type</span> <span class="kw">alias</span> <span class="dt">MethodSignature</span> <span class="op">=</span></span>
<span id="cb1-31"><a href="#cb1-31" aria-hidden="true" tabindex="-1"></a>    { <span class="fu">args</span> : <span class="dt">List</span> ( <span class="dt">VarName</span><span class="op">,</span> <span class="dt">TypeName</span> )<span class="op">,</span> <span class="fu">rett</span> : <span class="dt">TypeName</span> }</span>
<span id="cb1-32"><a href="#cb1-32" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb1-33"><a href="#cb1-33" aria-hidden="true" tabindex="-1"></a><span class="kw">type</span> <span class="dt">Expression</span></span>
<span id="cb1-34"><a href="#cb1-34" aria-hidden="true" tabindex="-1"></a>    <span class="op">=</span> <span class="dt">Var</span> <span class="dt">VarName</span></span>
<span id="cb1-35"><a href="#cb1-35" aria-hidden="true" tabindex="-1"></a>    <span class="op">|</span> <span class="dt">MethodCall</span></span>
<span id="cb1-36"><a href="#cb1-36" aria-hidden="true" tabindex="-1"></a>        { <span class="fu">exp</span> : <span class="dt">Expression</span></span>
<span id="cb1-37"><a href="#cb1-37" aria-hidden="true" tabindex="-1"></a>        <span class="op">,</span> <span class="fu">method</span> : <span class="dt">MethodName</span></span>
<span id="cb1-38"><a href="#cb1-38" aria-hidden="true" tabindex="-1"></a>        <span class="op">,</span> <span class="fu">args</span> : <span class="dt">List</span> <span class="dt">Expression</span></span>
<span id="cb1-39"><a href="#cb1-39" aria-hidden="true" tabindex="-1"></a>        }</span>
<span id="cb1-40"><a href="#cb1-40" aria-hidden="true" tabindex="-1"></a>    <span class="op">|</span> <span class="dt">StructLiteral</span></span>
<span id="cb1-41"><a href="#cb1-41" aria-hidden="true" tabindex="-1"></a>        { <span class="fu">struct</span> : <span class="dt">TypeName</span></span>
<span id="cb1-42"><a href="#cb1-42" aria-hidden="true" tabindex="-1"></a>        <span class="op">,</span> <span class="fu">args</span> : <span class="dt">List</span> <span class="dt">Expression</span></span>
<span id="cb1-43"><a href="#cb1-43" aria-hidden="true" tabindex="-1"></a>        }</span>
<span id="cb1-44"><a href="#cb1-44" aria-hidden="true" tabindex="-1"></a>    <span class="op">|</span> <span class="dt">SelectField</span></span>
<span id="cb1-45"><a href="#cb1-45" aria-hidden="true" tabindex="-1"></a>        { <span class="fu">exp</span> : <span class="dt">Expression</span></span>
<span id="cb1-46"><a href="#cb1-46" aria-hidden="true" tabindex="-1"></a>        <span class="op">,</span> <span class="fu">field</span> : <span class="dt">FieldName</span></span>
<span id="cb1-47"><a href="#cb1-47" aria-hidden="true" tabindex="-1"></a>        }</span>
<span id="cb1-48"><a href="#cb1-48" aria-hidden="true" tabindex="-1"></a>    <span class="op">|</span> <span class="dt">TypeAssertion</span></span>
<span id="cb1-49"><a href="#cb1-49" aria-hidden="true" tabindex="-1"></a>        { <span class="fu">exp</span> : <span class="dt">Expression</span></span>
<span id="cb1-50"><a href="#cb1-50" aria-hidden="true" tabindex="-1"></a>        <span class="op">,</span> <span class="fu">ty</span> : <span class="dt">TypeName</span></span>
<span id="cb1-51"><a href="#cb1-51" aria-hidden="true" tabindex="-1"></a>        }</span></code></pre></div>
<h3 id="パーサーを書く">パーサーを書く</h3>
<p>先に，FG のパーサーを記述する上で便利なヘルパー関数をいくつか定義しておく：</p>
<div class="sourceCode" id="cb2"><pre class="sourceCode elm"><code class="sourceCode elm"><span id="cb2-1"><a href="#cb2-1" aria-hidden="true" tabindex="-1"></a><span class="kw">module</span> <span class="dt">Go</span><span class="op">.</span><span class="dt">Parser</span><span class="op">.</span><span class="dt">Helper</span> <span class="kw">exposing</span> (<span class="op">..</span>)</span>
<span id="cb2-2"><a href="#cb2-2" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb2-3"><a href="#cb2-3" aria-hidden="true" tabindex="-1"></a><span class="fu">newlineSequence</span> : <span class="dt">Parser</span> () <span class="op">-&gt;</span> <span class="dt">Parser</span> <span class="fu">a</span> <span class="op">-&gt;</span> <span class="dt">Parser</span> (<span class="dt">List</span> <span class="fu">a</span>)</span>
<span id="cb2-4"><a href="#cb2-4" aria-hidden="true" tabindex="-1"></a><span class="fu">newlineSequence</span> <span class="fu">end</span> <span class="fu">p</span> <span class="op">=</span> <span class="op">...</span></span>
<span id="cb2-5"><a href="#cb2-5" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb2-6"><a href="#cb2-6" aria-hidden="true" tabindex="-1"></a><span class="fu">blockWith</span> : ( <span class="dt">String</span><span class="op">,</span> <span class="dt">String</span> ) <span class="op">-&gt;</span> <span class="dt">Parser</span> <span class="fu">a</span> <span class="op">-&gt;</span> <span class="dt">Parser</span> (<span class="dt">List</span> <span class="fu">a</span>)</span>
<span id="cb2-7"><a href="#cb2-7" aria-hidden="true" tabindex="-1"></a><span class="fu">blockWith</span> ( <span class="fu">start</span><span class="op">,</span> <span class="fu">end</span> ) <span class="fu">p</span> <span class="op">=</span> <span class="op">...</span></span>
<span id="cb2-8"><a href="#cb2-8" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb2-9"><a href="#cb2-9" aria-hidden="true" tabindex="-1"></a><span class="fu">whitespaces</span> : <span class="dt">Parser</span> ()</span>
<span id="cb2-10"><a href="#cb2-10" aria-hidden="true" tabindex="-1"></a><span class="fu">whitespaces</span> <span class="op">=</span> <span class="op">...</span></span>
<span id="cb2-11"><a href="#cb2-11" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb2-12"><a href="#cb2-12" aria-hidden="true" tabindex="-1"></a><span class="fu">newlines</span> : <span class="dt">Parser</span> ()</span>
<span id="cb2-13"><a href="#cb2-13" aria-hidden="true" tabindex="-1"></a><span class="fu">newlines</span> <span class="op">=</span> <span class="op">...</span></span></code></pre></div>
<p><a href="https://github.com/matsubara0507/featherweight-go/blob/4ce84918c80b0852b4c32989bdbfe29331ab1fe9/src/Go/Parser/Helper.elm">実装はこの辺りを見てください</a>． <code>newlineSequence</code> は改行区切りで引数のパーサーを実行してくれる． 例えば，構造体のフィールドを改行区切りで列挙するのをパースするのに役立つ． <code>blockWith</code> は，1引数目で与えた開始文字列と終端文字列で囲まれてかつ，2引数目のパーサーをカンマ区切りで実行してくれる． 関数定義の引数のパースなどに役立つ． <code>whitespaces</code> は1つ以上の空白を，<code>newlines</code> は1つ以上の改行をパースする．</p>
<p>で，まずは「プログラム」の部分のパーサーだ． プログラムは次のようなのをパースしたい：</p>
<div class="sourceCode" id="cb3"><pre class="sourceCode go"><code class="sourceCode go"><span id="cb3-1"><a href="#cb3-1" aria-hidden="true" tabindex="-1"></a><span class="kw">package</span> main</span>
<span id="cb3-2"><a href="#cb3-2" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb3-3"><a href="#cb3-3" aria-hidden="true" tabindex="-1"></a><span class="co">// 構造体や関数の定義</span></span>
<span id="cb3-4"><a href="#cb3-4" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb3-5"><a href="#cb3-5" aria-hidden="true" tabindex="-1"></a><span class="kw">func</span> main<span class="op">()</span> <span class="op">{</span></span>
<span id="cb3-6"><a href="#cb3-6" aria-hidden="true" tabindex="-1"></a>    _ <span class="op">=</span> <span class="op">..</span> <span class="co">// なんらかの式</span></span>
<span id="cb3-7"><a href="#cb3-7" aria-hidden="true" tabindex="-1"></a><span class="op">}</span></span></code></pre></div>
<p>とりあえず，式や構造体の定義のパーサーはあるものと仮定して実装する：</p>
<div class="sourceCode" id="cb4"><pre class="sourceCode elm"><code class="sourceCode elm"><span id="cb4-1"><a href="#cb4-1" aria-hidden="true" tabindex="-1"></a><span class="kw">import</span> <span class="dt">Parser</span> <span class="kw">exposing</span> (<span class="op">..</span>)</span>
<span id="cb4-2"><a href="#cb4-2" aria-hidden="true" tabindex="-1"></a><span class="kw">import</span> <span class="dt">Go</span><span class="op">.</span><span class="dt">Parser</span><span class="op">.</span><span class="dt">Helper</span> <span class="kw">exposing</span> (<span class="op">..</span>)</span>
<span id="cb4-3"><a href="#cb4-3" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb4-4"><a href="#cb4-4" aria-hidden="true" tabindex="-1"></a><span class="fu">parser</span> : <span class="dt">Parser</span> <span class="dt">Program</span></span>
<span id="cb4-5"><a href="#cb4-5" aria-hidden="true" tabindex="-1"></a><span class="fu">parser</span> <span class="op">=</span></span>
<span id="cb4-6"><a href="#cb4-6" aria-hidden="true" tabindex="-1"></a>    <span class="kw">let</span></span>
<span id="cb4-7"><a href="#cb4-7" aria-hidden="true" tabindex="-1"></a>        <span class="fu">parseMainPackage</span> <span class="op">=</span> <span class="co">-- package main の部分</span></span>
<span id="cb4-8"><a href="#cb4-8" aria-hidden="true" tabindex="-1"></a>            <span class="fu">succeed</span> ()</span>
<span id="cb4-9"><a href="#cb4-9" aria-hidden="true" tabindex="-1"></a>                <span class="op">|.</span> <span class="fu">keyword</span> <span class="st">&quot;package&quot;</span></span>
<span id="cb4-10"><a href="#cb4-10" aria-hidden="true" tabindex="-1"></a>                <span class="op">|.</span> <span class="fu">whitespaces</span></span>
<span id="cb4-11"><a href="#cb4-11" aria-hidden="true" tabindex="-1"></a>                <span class="op">|.</span> <span class="fu">keyword</span> <span class="st">&quot;main&quot;</span></span>
<span id="cb4-12"><a href="#cb4-12" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb4-13"><a href="#cb4-13" aria-hidden="true" tabindex="-1"></a>        <span class="fu">parseMainFunc</span> <span class="op">=</span> <span class="co">-- func main() の部分</span></span>
<span id="cb4-14"><a href="#cb4-14" aria-hidden="true" tabindex="-1"></a>            <span class="fu">succeed</span> ()</span>
<span id="cb4-15"><a href="#cb4-15" aria-hidden="true" tabindex="-1"></a>                <span class="op">|.</span> <span class="fu">backtrackable</span> (<span class="fu">keyword</span> <span class="st">&quot;func&quot;</span>)</span>
<span id="cb4-16"><a href="#cb4-16" aria-hidden="true" tabindex="-1"></a>                <span class="op">|.</span> <span class="fu">backtrackable</span> <span class="fu">whitespaces</span></span>
<span id="cb4-17"><a href="#cb4-17" aria-hidden="true" tabindex="-1"></a>                <span class="op">|.</span> <span class="fu">keyword</span> <span class="st">&quot;main()&quot;</span></span>
<span id="cb4-18"><a href="#cb4-18" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb4-19"><a href="#cb4-19" aria-hidden="true" tabindex="-1"></a>        <span class="fu">parseMainExp</span> <span class="op">=</span> <span class="co">-- _ = e の部分</span></span>
<span id="cb4-20"><a href="#cb4-20" aria-hidden="true" tabindex="-1"></a>            <span class="fu">succeed</span> <span class="fu">identity</span></span>
<span id="cb4-21"><a href="#cb4-21" aria-hidden="true" tabindex="-1"></a>                <span class="op">|.</span> <span class="fu">symbol</span> <span class="st">&quot;_&quot;</span></span>
<span id="cb4-22"><a href="#cb4-22" aria-hidden="true" tabindex="-1"></a>                <span class="op">|.</span> <span class="fu">whitespaces</span></span>
<span id="cb4-23"><a href="#cb4-23" aria-hidden="true" tabindex="-1"></a>                <span class="op">|.</span> <span class="fu">symbol</span> <span class="st">&quot;=&quot;</span></span>
<span id="cb4-24"><a href="#cb4-24" aria-hidden="true" tabindex="-1"></a>                <span class="op">|.</span> <span class="fu">whitespaces</span></span>
<span id="cb4-25"><a href="#cb4-25" aria-hidden="true" tabindex="-1"></a>                <span class="op">|=</span> <span class="fu">expParser</span></span>
<span id="cb4-26"><a href="#cb4-26" aria-hidden="true" tabindex="-1"></a>    <span class="kw">in</span></span>
<span id="cb4-27"><a href="#cb4-27" aria-hidden="true" tabindex="-1"></a>    <span class="fu">succeed</span> <span class="dt">Program</span></span>
<span id="cb4-28"><a href="#cb4-28" aria-hidden="true" tabindex="-1"></a>        <span class="op">|.</span> <span class="fu">parseMainPackage</span></span>
<span id="cb4-29"><a href="#cb4-29" aria-hidden="true" tabindex="-1"></a>        <span class="op">|.</span> <span class="fu">newlines</span></span>
<span id="cb4-30"><a href="#cb4-30" aria-hidden="true" tabindex="-1"></a>        <span class="op">|=</span> <span class="fu">newlineSequence</span> <span class="fu">parseMainFunc</span> <span class="fu">declParser</span></span>
<span id="cb4-31"><a href="#cb4-31" aria-hidden="true" tabindex="-1"></a>        <span class="op">|.</span> <span class="fu">spaces</span></span>
<span id="cb4-32"><a href="#cb4-32" aria-hidden="true" tabindex="-1"></a>        <span class="op">|.</span> <span class="fu">symbol</span> <span class="st">&quot;{&quot;</span></span>
<span id="cb4-33"><a href="#cb4-33" aria-hidden="true" tabindex="-1"></a>        <span class="op">|.</span> <span class="fu">spaces</span></span>
<span id="cb4-34"><a href="#cb4-34" aria-hidden="true" tabindex="-1"></a>        <span class="op">|=</span> <span class="fu">parseMainExp</span></span>
<span id="cb4-35"><a href="#cb4-35" aria-hidden="true" tabindex="-1"></a>        <span class="op">|.</span> <span class="fu">spaces</span></span>
<span id="cb4-36"><a href="#cb4-36" aria-hidden="true" tabindex="-1"></a>        <span class="op">|.</span> <span class="fu">symbol</span> <span class="st">&quot;}&quot;</span></span>
<span id="cb4-37"><a href="#cb4-37" aria-hidden="true" tabindex="-1"></a>        <span class="op">|.</span> <span class="fu">spaces</span></span>
<span id="cb4-38"><a href="#cb4-38" aria-hidden="true" tabindex="-1"></a>        <span class="op">|.</span> <span class="dt">Parser</span><span class="op">.</span><span class="fu">end</span></span>
<span id="cb4-39"><a href="#cb4-39" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb4-40"><a href="#cb4-40" aria-hidden="true" tabindex="-1"></a><span class="fu">declParser</span> : <span class="dt">Parser</span> <span class="dt">Declaration</span></span>
<span id="cb4-41"><a href="#cb4-41" aria-hidden="true" tabindex="-1"></a><span class="fu">declParser</span> <span class="op">=</span> <span class="dt">Debug</span><span class="op">.</span><span class="fu">todo</span> <span class="st">&quot;Decl Parser&quot;</span></span>
<span id="cb4-42"><a href="#cb4-42" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb4-43"><a href="#cb4-43" aria-hidden="true" tabindex="-1"></a><span class="fu">expParser</span> : <span class="dt">Parser</span> <span class="dt">Expression</span></span>
<span id="cb4-44"><a href="#cb4-44" aria-hidden="true" tabindex="-1"></a><span class="fu">expParser</span> <span class="op">=</span> <span class="dt">Debug</span><span class="op">.</span><span class="fu">todo</span> <span class="st">&quot;Exp Parser&quot;</span></span></code></pre></div>
<p>基本的に <code>declParser</code> や <code>expParser</code> も同じように構文定義を見ながら実装していくだけなので割愛する（<a href="https://github.com/matsubara0507/featherweight-go/blob/4ce84918c80b0852b4c32989bdbfe29331ab1fe9/tests/Test/Go/Featherweight/Syntax.elm">コード</a>）． 1つだけ，なんらかの変数をパースするパーサーだけは書いておく． elm/parser には <code>variable</code> というまさにこれをやるパーサーコンビネーターがあるのでこれを利用する：</p>
<div class="sourceCode" id="cb5"><pre class="sourceCode elm"><code class="sourceCode elm"><span id="cb5-1"><a href="#cb5-1" aria-hidden="true" tabindex="-1"></a><span class="fu">nameParser</span> : <span class="dt">Parser</span> <span class="dt">String</span></span>
<span id="cb5-2"><a href="#cb5-2" aria-hidden="true" tabindex="-1"></a><span class="fu">nameParser</span> <span class="op">=</span></span>
<span id="cb5-3"><a href="#cb5-3" aria-hidden="true" tabindex="-1"></a>    <span class="fu">variable</span></span>
<span id="cb5-4"><a href="#cb5-4" aria-hidden="true" tabindex="-1"></a>        { <span class="fu">start</span> <span class="op">=</span> <span class="dt">Char</span><span class="op">.</span><span class="fu">isAlphaNum</span> <span class="co">-- 先頭文字，小文字や数字を含まないとかできる</span></span>
<span id="cb5-5"><a href="#cb5-5" aria-hidden="true" tabindex="-1"></a>        <span class="op">,</span> <span class="fu">inner</span> <span class="op">=</span> \<span class="fu">c</span> <span class="op">-&gt;</span> <span class="dt">Char</span><span class="op">.</span><span class="fu">isAlphaNum</span> <span class="fu">c</span> <span class="op">||</span> <span class="fu">c</span> <span class="op">==</span> <span class="ch">&#39;_&#39;</span></span>
<span id="cb5-6"><a href="#cb5-6" aria-hidden="true" tabindex="-1"></a>        <span class="op">,</span> <span class="fu">reserved</span> <span class="op">=</span> <span class="fu">keywords</span>     <span class="co">-- 変数にはならない予約を列挙する</span></span>
<span id="cb5-7"><a href="#cb5-7" aria-hidden="true" tabindex="-1"></a>        }</span>
<span id="cb5-8"><a href="#cb5-8" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb5-9"><a href="#cb5-9" aria-hidden="true" tabindex="-1"></a><span class="fu">keywords</span> : <span class="dt">Set</span> <span class="dt">String</span></span>
<span id="cb5-10"><a href="#cb5-10" aria-hidden="true" tabindex="-1"></a><span class="fu">keywords</span> <span class="op">=</span></span>
<span id="cb5-11"><a href="#cb5-11" aria-hidden="true" tabindex="-1"></a>    <span class="dt">Set</span><span class="op">.</span><span class="fu">fromList</span></span>
<span id="cb5-12"><a href="#cb5-12" aria-hidden="true" tabindex="-1"></a>        [ <span class="st">&quot;package&quot;</span></span>
<span id="cb5-13"><a href="#cb5-13" aria-hidden="true" tabindex="-1"></a>        <span class="op">,</span> <span class="st">&quot;main&quot;</span></span>
<span id="cb5-14"><a href="#cb5-14" aria-hidden="true" tabindex="-1"></a>        <span class="op">,</span> <span class="st">&quot;func&quot;</span></span>
<span id="cb5-15"><a href="#cb5-15" aria-hidden="true" tabindex="-1"></a>        <span class="op">,</span> <span class="st">&quot;struct&quot;</span></span>
<span id="cb5-16"><a href="#cb5-16" aria-hidden="true" tabindex="-1"></a>        <span class="op">,</span> <span class="st">&quot;interface&quot;</span></span>
<span id="cb5-17"><a href="#cb5-17" aria-hidden="true" tabindex="-1"></a>        <span class="op">,</span> <span class="st">&quot;type&quot;</span></span>
<span id="cb5-18"><a href="#cb5-18" aria-hidden="true" tabindex="-1"></a>        <span class="op">,</span> <span class="st">&quot;return&quot;</span></span>
<span id="cb5-19"><a href="#cb5-19" aria-hidden="true" tabindex="-1"></a>        ]</span></code></pre></div>
<h3 id="テスト">テスト</h3>
<p>とりあえず簡単に，FGの論文にあるサンプルコードが動作するかのテストだけを書いた：</p>
<div class="sourceCode" id="cb6"><pre class="sourceCode elm"><code class="sourceCode elm"><span id="cb6-1"><a href="#cb6-1" aria-hidden="true" tabindex="-1"></a><span class="kw">module</span> <span class="dt">Test</span><span class="op">.</span><span class="dt">Go</span><span class="op">.</span><span class="dt">Featherweight</span><span class="op">.</span><span class="dt">Syntax</span> <span class="kw">exposing</span> (<span class="fu">suite</span>)</span>
<span id="cb6-2"><a href="#cb6-2" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb6-3"><a href="#cb6-3" aria-hidden="true" tabindex="-1"></a><span class="kw">import</span> <span class="dt">Go</span><span class="op">.</span><span class="dt">Featherweight</span><span class="op">.</span><span class="dt">Syntax</span> <span class="kw">exposing</span> (<span class="op">..</span>)</span>
<span id="cb6-4"><a href="#cb6-4" aria-hidden="true" tabindex="-1"></a><span class="kw">import</span> <span class="dt">Parser</span></span>
<span id="cb6-5"><a href="#cb6-5" aria-hidden="true" tabindex="-1"></a><span class="kw">import</span> <span class="dt">Test</span> <span class="kw">exposing</span> (<span class="op">..</span>)</span>
<span id="cb6-6"><a href="#cb6-6" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb6-7"><a href="#cb6-7" aria-hidden="true" tabindex="-1"></a><span class="fu">suite</span> : <span class="dt">Test</span></span>
<span id="cb6-8"><a href="#cb6-8" aria-hidden="true" tabindex="-1"></a><span class="fu">suite</span> <span class="op">=</span></span>
<span id="cb6-9"><a href="#cb6-9" aria-hidden="true" tabindex="-1"></a>    <span class="fu">describe</span> <span class="st">&quot;module Go.Featherweight.Syntax&quot;</span></span>
<span id="cb6-10"><a href="#cb6-10" aria-hidden="true" tabindex="-1"></a>        [ <span class="fu">describe</span> <span class="st">&quot;parser&quot;</span></span>
<span id="cb6-11"><a href="#cb6-11" aria-hidden="true" tabindex="-1"></a>            [ <span class="fu">test</span> <span class="st">&quot;parse sample FG code&quot;</span> <span class="op">&lt;|</span></span>
<span id="cb6-12"><a href="#cb6-12" aria-hidden="true" tabindex="-1"></a>                \<span class="fu">_</span> <span class="op">-&gt;</span></span>
<span id="cb6-13"><a href="#cb6-13" aria-hidden="true" tabindex="-1"></a>                    <span class="dt">Parser</span><span class="op">.</span><span class="fu">run</span> <span class="fu">parser</span> <span class="fu">sample</span></span>
<span id="cb6-14"><a href="#cb6-14" aria-hidden="true" tabindex="-1"></a>                        <span class="op">|&gt;</span> <span class="dt">Expect</span><span class="op">.</span><span class="fu">equal</span> (<span class="dt">Ok</span> <span class="op">&lt;|</span> { <span class="fu">decls</span> <span class="op">=</span> <span class="op">...,</span> <span class="fu">exp</span> <span class="op">=</span> <span class="op">...</span> }</span>
<span id="cb6-15"><a href="#cb6-15" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb6-16"><a href="#cb6-16" aria-hidden="true" tabindex="-1"></a><span class="fu">sample</span> : <span class="dt">String</span></span>
<span id="cb6-17"><a href="#cb6-17" aria-hidden="true" tabindex="-1"></a><span class="fu">sample</span> <span class="op">=</span></span>
<span id="cb6-18"><a href="#cb6-18" aria-hidden="true" tabindex="-1"></a>    <span class="dt">String</span><span class="op">.</span><span class="fu">dropLeft</span> <span class="dv">1</span></span>
<span id="cb6-19"><a href="#cb6-19" aria-hidden="true" tabindex="-1"></a>        <span class="st">&quot;&quot;&quot;</span></span>
<span id="cb6-20"><a href="#cb6-20" aria-hidden="true" tabindex="-1"></a><span class="st">package main</span></span>
<span id="cb6-21"><a href="#cb6-21" aria-hidden="true" tabindex="-1"></a><span class="st">type Any interface {}</span></span>
<span id="cb6-22"><a href="#cb6-22" aria-hidden="true" tabindex="-1"></a><span class="st">type Function interface {</span></span>
<span id="cb6-23"><a href="#cb6-23" aria-hidden="true" tabindex="-1"></a><span class="st">    Apply(x Any) Any</span></span>
<span id="cb6-24"><a href="#cb6-24" aria-hidden="true" tabindex="-1"></a><span class="st">}</span></span>
<span id="cb6-25"><a href="#cb6-25" aria-hidden="true" tabindex="-1"></a><span class="st">type incr struct { n int }</span></span>
<span id="cb6-26"><a href="#cb6-26" aria-hidden="true" tabindex="-1"></a><span class="st">func (this incr) Apply(x Any) Any {</span></span>
<span id="cb6-27"><a href="#cb6-27" aria-hidden="true" tabindex="-1"></a><span class="st">    return this.n.add(x.(int))</span></span>
<span id="cb6-28"><a href="#cb6-28" aria-hidden="true" tabindex="-1"></a><span class="st">}</span></span>
<span id="cb6-29"><a href="#cb6-29" aria-hidden="true" tabindex="-1"></a><span class="st">type pos struct {}</span></span>
<span id="cb6-30"><a href="#cb6-30" aria-hidden="true" tabindex="-1"></a><span class="st">func (this pos) Apply(x Any) Any {</span></span>
<span id="cb6-31"><a href="#cb6-31" aria-hidden="true" tabindex="-1"></a><span class="st">    return x.(int).lt(zero)</span></span>
<span id="cb6-32"><a href="#cb6-32" aria-hidden="true" tabindex="-1"></a><span class="st">}</span></span>
<span id="cb6-33"><a href="#cb6-33" aria-hidden="true" tabindex="-1"></a><span class="st">type compose struct {</span></span>
<span id="cb6-34"><a href="#cb6-34" aria-hidden="true" tabindex="-1"></a><span class="st">    f Function</span></span>
<span id="cb6-35"><a href="#cb6-35" aria-hidden="true" tabindex="-1"></a><span class="st">    g Function</span></span>
<span id="cb6-36"><a href="#cb6-36" aria-hidden="true" tabindex="-1"></a><span class="st">}</span></span>
<span id="cb6-37"><a href="#cb6-37" aria-hidden="true" tabindex="-1"></a><span class="st">func (this compose) Apply(x Any) Any {</span></span>
<span id="cb6-38"><a href="#cb6-38" aria-hidden="true" tabindex="-1"></a><span class="st">    return this.g.Apply(this.f.Apply(x))</span></span>
<span id="cb6-39"><a href="#cb6-39" aria-hidden="true" tabindex="-1"></a><span class="st">}</span></span>
<span id="cb6-40"><a href="#cb6-40" aria-hidden="true" tabindex="-1"></a><span class="st">func main(){</span></span>
<span id="cb6-41"><a href="#cb6-41" aria-hidden="true" tabindex="-1"></a><span class="st">    _ = compose{incr{x}, pos{}}.Apply(y).(bool)</span></span>
<span id="cb6-42"><a href="#cb6-42" aria-hidden="true" tabindex="-1"></a><span class="st">}</span></span>
<span id="cb6-43"><a href="#cb6-43" aria-hidden="true" tabindex="-1"></a><span class="st">&quot;&quot;&quot;</span></span></code></pre></div>
<h2 id="fgの型検査器を作る">FGの型検査器を作る</h2>
<p>型検査器を作るにはとりあえず，論文の型付け規則（3.3節の図11）をそのまんま実装していけばいい． まぁまぁ量があるので型付け規則自体は載せません（論文を見て）．</p>
<h3 id="例プログラムの型付け規則">例：プログラムの型付け規則</h3>
<p>全部載せると膨大なので，「プログラム」の型付け規則とその実装だけ． 型付け規則は次のようになっている：</p>
<pre><code>distinct(tdecls(seq(D)))
distinct(mdecls(seq(D)))
seq(D ok)
[] |- e : t
---------------------------------------------
package main; seq(D) func main { _ = e } ok</code></pre>
<p>数式で書くの大変なので，だいぶ本来の記法と離れちゃってますが雰囲気として，<code>---</code> より上が全て成り立てば下が成り立つという感じ． 下の <code>... ok</code> というのは「プログラム」が正しく型付けされていることを意味しており，上のそれぞれは：</p>
<ul>
<li><code>D</code> というのは型（構造体・インターフェース）の宣言かメソッドの宣言</li>
<li><code>seq(D)</code> は <code>D</code> のリスト（シーケンス）</li>
<li><code>tdecls(seq(D))</code> は <code>seq(D)</code> のうち型の宣言だけを集めたもの</li>
<li><code>mdecls(seq(D))</code> は <code>seq(D)</code> のうちメソッドの宣言だけを集めたもの</li>
<li><code>distinct(xs)</code> は <code>xs</code> 内に重複がないことを意味する（つまり，型やメソッドが重複してたらダメ）</li>
<li><code>D ok</code> は宣言 <code>D</code> が正しく型付けされていることを意味する</li>
<li><code>seq(D ok)</code> は <code>seq(D)</code> の全ての宣言が正しく型付けされていることを意味する</li>
<li><code>[] |- e : t</code> は式 <code>e</code> がなんらかの型 <code>t</code> で型付けされていることを意味する</li>
</ul>
<p>最後ので <code>[]</code> は空の型環境を意味している． 型環境はある式がどの型になるかの辞書だ． つまり，Elm で実装するとこんな感じ：</p>
<div class="sourceCode" id="cb8"><pre class="sourceCode elm"><code class="sourceCode elm"><span id="cb8-1"><a href="#cb8-1" aria-hidden="true" tabindex="-1"></a><span class="kw">module</span> <span class="dt">Go</span><span class="op">.</span><span class="dt">Featherweight</span><span class="op">.</span><span class="dt">Type</span> <span class="kw">exposing</span> (<span class="op">..</span>)</span>
<span id="cb8-2"><a href="#cb8-2" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb8-3"><a href="#cb8-3" aria-hidden="true" tabindex="-1"></a><span class="kw">import</span> <span class="dt">Dict</span> <span class="kw">exposing</span> (<span class="dt">Dict</span>)</span>
<span id="cb8-4"><a href="#cb8-4" aria-hidden="true" tabindex="-1"></a><span class="kw">import</span> <span class="dt">Go</span><span class="op">.</span><span class="dt">Featherweight</span><span class="op">.</span><span class="dt">Syntax</span> <span class="kw">as</span> <span class="dt">FG</span> <span class="kw">exposing</span> (<span class="op">..</span>)</span>
<span id="cb8-5"><a href="#cb8-5" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb8-6"><a href="#cb8-6" aria-hidden="true" tabindex="-1"></a><span class="kw">type</span> <span class="kw">alias</span> <span class="dt">Gamma</span> <span class="op">=</span></span>
<span id="cb8-7"><a href="#cb8-7" aria-hidden="true" tabindex="-1"></a>    <span class="dt">Dict</span> <span class="dt">VarName</span> <span class="dt">TypeName</span></span></code></pre></div>
<p>また，型検査をするには <code>seq(D)</code> で宣言されている型やメソッドの情報が必要だ． 論文の数理論理学的な定義では，情報が必要になるたびに <code>seq(D)</code> から引っ張ってきている． しかし，実際のプログラムでそれをやると効率が悪いので，事前にそのような辞書を環境（<code>Env</code>）として定義しておく：</p>
<div class="sourceCode" id="cb9"><pre class="sourceCode elm"><code class="sourceCode elm"><span id="cb9-1"><a href="#cb9-1" aria-hidden="true" tabindex="-1"></a><span class="kw">type</span> <span class="kw">alias</span> <span class="dt">Env</span> <span class="op">=</span></span>
<span id="cb9-2"><a href="#cb9-2" aria-hidden="true" tabindex="-1"></a>    ( <span class="dt">Gamma</span><span class="op">,</span> <span class="dt">DeclMap</span> )</span>
<span id="cb9-3"><a href="#cb9-3" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb9-4"><a href="#cb9-4" aria-hidden="true" tabindex="-1"></a><span class="co">-- 型名をキー</span></span>
<span id="cb9-5"><a href="#cb9-5" aria-hidden="true" tabindex="-1"></a><span class="co">-- 型の情報（`TypeLiteral`）とメソッドの情報（`MethodSpecific`）が値</span></span>
<span id="cb9-6"><a href="#cb9-6" aria-hidden="true" tabindex="-1"></a><span class="kw">type</span> <span class="kw">alias</span> <span class="dt">DeclMap</span> <span class="op">=</span></span>
<span id="cb9-7"><a href="#cb9-7" aria-hidden="true" tabindex="-1"></a>    <span class="dt">Dict</span> <span class="dt">TypeName</span> ( <span class="dt">TypeLiteral</span><span class="op">,</span> <span class="dt">List</span> <span class="dt">MethodSpecific</span> )</span>
<span id="cb9-8"><a href="#cb9-8" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb9-9"><a href="#cb9-9" aria-hidden="true" tabindex="-1"></a><span class="fu">newEnv</span> : <span class="dt">List</span> <span class="dt">Declaration</span> <span class="op">-&gt;</span> <span class="dt">Env</span></span>
<span id="cb9-10"><a href="#cb9-10" aria-hidden="true" tabindex="-1"></a><span class="fu">newEnv</span> <span class="fu">decls</span> <span class="op">=</span></span>
<span id="cb9-11"><a href="#cb9-11" aria-hidden="true" tabindex="-1"></a>    ( <span class="dt">Dict</span><span class="op">.</span><span class="fu">empty</span><span class="op">,</span> <span class="fu">mkDeclMap</span> <span class="fu">decls</span> )</span>
<span id="cb9-12"><a href="#cb9-12" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb9-13"><a href="#cb9-13" aria-hidden="true" tabindex="-1"></a><span class="fu">mkDeclMap</span> : <span class="dt">List</span> <span class="dt">Declaration</span> <span class="op">-&gt;</span> <span class="dt">DeclMap</span></span>
<span id="cb9-14"><a href="#cb9-14" aria-hidden="true" tabindex="-1"></a><span class="fu">mkDeclMap</span> <span class="fu">decls</span> <span class="op">=</span> <span class="op">...</span> <span class="co">-- ちょっと複雑なので割愛</span></span></code></pre></div>
<p>で，「プログラム」の型付け規則をそのまんま実装すると次のようになる：</p>
<div class="sourceCode" id="cb10"><pre class="sourceCode elm"><code class="sourceCode elm"><span id="cb10-1"><a href="#cb10-1" aria-hidden="true" tabindex="-1"></a><span class="kw">module</span> <span class="dt">Go</span><span class="op">.</span><span class="dt">Featherweight</span><span class="op">.</span><span class="dt">Type</span> <span class="kw">exposing</span> (<span class="op">..</span>)</span>
<span id="cb10-2"><a href="#cb10-2" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb10-3"><a href="#cb10-3" aria-hidden="true" tabindex="-1"></a><span class="fu">check</span> : <span class="dt">FG</span><span class="op">.</span><span class="dt">Program</span> <span class="op">-&gt;</span> <span class="dt">Result</span> <span class="dt">TypeError</span> ()</span>
<span id="cb10-4"><a href="#cb10-4" aria-hidden="true" tabindex="-1"></a><span class="fu">check</span> <span class="fu">p</span> <span class="op">=</span></span>
<span id="cb10-5"><a href="#cb10-5" aria-hidden="true" tabindex="-1"></a>    <span class="kw">let</span></span>
<span id="cb10-6"><a href="#cb10-6" aria-hidden="true" tabindex="-1"></a>        <span class="fu">env</span> <span class="op">=</span></span>
<span id="cb10-7"><a href="#cb10-7" aria-hidden="true" tabindex="-1"></a>            <span class="fu">newEnv</span> <span class="fu">p</span><span class="op">.</span><span class="fu">decls</span></span>
<span id="cb10-8"><a href="#cb10-8" aria-hidden="true" tabindex="-1"></a>        <span class="fu">dmap</span> <span class="op">=</span></span>
<span id="cb10-9"><a href="#cb10-9" aria-hidden="true" tabindex="-1"></a>            <span class="dt">Tuple</span><span class="op">.</span><span class="fu">second</span> <span class="fu">env</span></span>
<span id="cb10-10"><a href="#cb10-10" aria-hidden="true" tabindex="-1"></a>    <span class="kw">in</span></span>
<span id="cb10-11"><a href="#cb10-11" aria-hidden="true" tabindex="-1"></a>    <span class="fu">combine_</span></span>
<span id="cb10-12"><a href="#cb10-12" aria-hidden="true" tabindex="-1"></a>        [ <span class="fu">distinct</span> (<span class="fu">tdecls</span> <span class="fu">p</span><span class="op">.</span><span class="fu">decls</span>)</span>
<span id="cb10-13"><a href="#cb10-13" aria-hidden="true" tabindex="-1"></a>            <span class="op">|&gt;</span> <span class="dt">Result</span><span class="op">.</span><span class="fu">mapError</span> (<span class="dt">DuplicatedDefinition</span> <span class="st">&quot;type&quot;</span>)</span>
<span id="cb10-14"><a href="#cb10-14" aria-hidden="true" tabindex="-1"></a>        <span class="op">,</span> <span class="fu">distinct</span> (<span class="fu">mdecls</span> <span class="fu">p</span><span class="op">.</span><span class="fu">decls</span>)</span>
<span id="cb10-15"><a href="#cb10-15" aria-hidden="true" tabindex="-1"></a>            <span class="op">|&gt;</span> <span class="dt">Result</span><span class="op">.</span><span class="fu">mapError</span> (\( <span class="fu">x</span><span class="op">,</span> <span class="fu">y</span> ) <span class="op">-&gt;</span> <span class="dt">DuplicatedDefinition</span> <span class="st">&quot;method&quot;</span> (<span class="fu">x</span> <span class="op">++</span> <span class="st">&quot;.&quot;</span> <span class="op">++</span> <span class="fu">y</span>))</span>
<span id="cb10-16"><a href="#cb10-16" aria-hidden="true" tabindex="-1"></a>        <span class="op">,</span> <span class="fu">combine_</span> (<span class="dt">List</span><span class="op">.</span><span class="fu">map</span> (<span class="fu">checkDeclWith</span> <span class="fu">dmap</span>) <span class="fu">p</span><span class="op">.</span><span class="fu">decls</span>)</span>
<span id="cb10-17"><a href="#cb10-17" aria-hidden="true" tabindex="-1"></a>        <span class="op">,</span> <span class="fu">typeInferWith</span> <span class="fu">env</span> <span class="fu">p</span><span class="op">.</span><span class="fu">exp</span></span>
<span id="cb10-18"><a href="#cb10-18" aria-hidden="true" tabindex="-1"></a>            <span class="op">|&gt;</span> <span class="dt">Result</span><span class="op">.</span><span class="fu">map</span> (<span class="fu">always</span> ())</span>
<span id="cb10-19"><a href="#cb10-19" aria-hidden="true" tabindex="-1"></a>        ]</span>
<span id="cb10-20"><a href="#cb10-20" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb10-21"><a href="#cb10-21" aria-hidden="true" tabindex="-1"></a><span class="co">-- `Result.combine` は `Result e a` を返すが</span></span>
<span id="cb10-22"><a href="#cb10-22" aria-hidden="true" tabindex="-1"></a><span class="co">-- `Result e ()` を返す関数が欲しかった</span></span>
<span id="cb10-23"><a href="#cb10-23" aria-hidden="true" tabindex="-1"></a><span class="fu">combine_</span> : <span class="dt">List</span> (<span class="dt">Result</span> <span class="fu">e</span> <span class="fu">a</span>) <span class="op">-&gt;</span> <span class="dt">Result</span> <span class="fu">e</span> ()</span>
<span id="cb10-24"><a href="#cb10-24" aria-hidden="true" tabindex="-1"></a><span class="fu">combine_</span> <span class="op">=</span></span>
<span id="cb10-25"><a href="#cb10-25" aria-hidden="true" tabindex="-1"></a>    <span class="dt">Result</span><span class="op">.</span><span class="fu">map</span> (<span class="fu">always</span> ()) <span class="op">&lt;&lt;</span> <span class="dt">Result</span><span class="op">.</span><span class="fu">combine</span></span>
<span id="cb10-26"><a href="#cb10-26" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb10-27"><a href="#cb10-27" aria-hidden="true" tabindex="-1"></a><span class="co">-- 重複のチェックは</span></span>
<span id="cb10-28"><a href="#cb10-28" aria-hidden="true" tabindex="-1"></a><span class="co">-- 型の場合は型名が重複してないかどうか</span></span>
<span id="cb10-29"><a href="#cb10-29" aria-hidden="true" tabindex="-1"></a><span class="co">-- メソッドの場合は型名+メソッド名が重複してないかどうか</span></span>
<span id="cb10-30"><a href="#cb10-30" aria-hidden="true" tabindex="-1"></a><span class="fu">distinct</span> : <span class="dt">List</span> <span class="fu">comparable</span> <span class="op">-&gt;</span> <span class="dt">Result</span> <span class="fu">comparable</span> ()</span>
<span id="cb10-31"><a href="#cb10-31" aria-hidden="true" tabindex="-1"></a><span class="fu">tdecls</span> : <span class="dt">List</span> <span class="dt">Declaration</span> <span class="op">-&gt;</span> <span class="dt">List</span> <span class="dt">TypeName</span></span>
<span id="cb10-32"><a href="#cb10-32" aria-hidden="true" tabindex="-1"></a><span class="fu">mdecls</span> : <span class="dt">List</span> <span class="dt">Declaration</span> <span class="op">-&gt;</span> <span class="dt">List</span> ( <span class="dt">TypeName</span><span class="op">,</span> <span class="dt">MethodName</span> )</span>
<span id="cb10-33"><a href="#cb10-33" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb10-34"><a href="#cb10-34" aria-hidden="true" tabindex="-1"></a><span class="fu">checkDeclWith</span> : <span class="dt">DeclMap</span> <span class="op">-&gt;</span> <span class="dt">Declaration</span> <span class="op">-&gt;</span> <span class="dt">Result</span> <span class="dt">TypeError</span> ()</span>
<span id="cb10-35"><a href="#cb10-35" aria-hidden="true" tabindex="-1"></a><span class="fu">checkDeclWith</span> <span class="fu">dmap</span> <span class="fu">d</span> <span class="op">=</span> <span class="op">...</span></span>
<span id="cb10-36"><a href="#cb10-36" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb10-37"><a href="#cb10-37" aria-hidden="true" tabindex="-1"></a><span class="fu">typeInferWith</span> : <span class="dt">Env</span> <span class="op">-&gt;</span> <span class="dt">Expression</span> <span class="op">-&gt;</span> <span class="dt">Result</span> <span class="dt">TypeError</span> <span class="dt">TypeName</span></span>
<span id="cb10-38"><a href="#cb10-38" aria-hidden="true" tabindex="-1"></a><span class="fu">typeInferWith</span> <span class="fu">env</span> <span class="fu">exp</span> <span class="op">=</span> <span class="op">...</span></span></code></pre></div>
<p><code>checkDeclWith</code> は与えた宣言（<code>Declaration</code>）が正しく型付けされているかどうかをチェックする． つまり <code>D ok</code> にあたる． <code>typeInferWith</code> は2引数目の式（<code>Expression</code>）の型を推論して返す関数だ． 推論できない場合は <code>TypeError</code> を返し，推論できた場合はその型名を返す． 「プログラム」の <code>e</code> の場合，どんな型に推論されても問題ないので <code>Result.map (always ())</code> で結果を破棄している．</p>
<p>これを型付け規則分作らないといけない． まぁまぁしんどかった．</p>
<h2 id="webページを作る">Webページを作る</h2>
<p>Elm なので，FGのコードを書くと型検査してくれるページを作った：</p>
<p><img src="/assets/fg-with-elm/fg-parser-page.jpg" /></p>
<p>やっていることは簡単で，テキストエリアの文字列を <code>Go.Featherweight.Syntax.parser</code> でパースして <code>Program</code> 型の値を作り，それをそのまま <code>Go.Featherweight.Type.check</code> しているだけ． そして，結果がエラーだったらそのエラーメッセージを出力して，エラーでなければ「OK」って出しているだけ．</p>
<h2 id="おしまい">おしまい</h2>
<p>作ってから時間が経ってしまったので，記事が結構雑だ．．． その２では Featherweight Generics Go のパーサーと型検査器です．</p>]]></content>
    </entry>
    <entry>
        <title>Haskell Stack プロジェクトを Bazel でビルドしてみる</title>
        <link href="https://matsubara0507.github.ioposts/2020-12-02-build-haskell-stack-project-using-bazel.html"/>
        <id>https://matsubara0507.github.ioposts/2020-12-02-build-haskell-stack-project-using-bazel.html</id>
        <updated>2020-12-02T00:00:SZ</updated>
        <category term="Haskell"/>
        <category term="Bazel"/>
        <summary></summary>
        <content type="html"><![CDATA[<p>仕事では Bazel を使ってビルドすることが多くなり，自分でも Bazel ルールを自作するようになったので，実験も兼ねて趣味の Haskell Stack プロジェクトを Bazel を使ってビルドしてみることにしました． 本記事はそのメモ書きです．</p>
<h1 id="section"></h1>
<p>あとこれは <a href="https://qiita.com/advent-calendar/2020/haskell">Haskell Advent Calendar 2020</a> の2日目の記事です．</p>
<h2 id="bazel">Bazel</h2>
<p><a href="https://bazel.build/">Bazel</a> は Google のエンジニアが中心になって開発している OSS のビルドツールだ．</p>
<p>以下のような特徴がある：</p>
<ul>
<li>必要なコマンドのインストール・バイナリのビルド・コマンドの実行などを記述できる</li>
<li>それらは全て専用のサンドボックス内で実行されるため再現性が高い</li>
<li>Starlark という Python 風な独自言語で記述する</li>
<li>キャッシュなどが工夫されており二度目以降のビルドが高速になりやすい</li>
<li>依存関係を明確に記述する必要がある</li>
</ul>
<p>また，記述した Bazel ルールを公開したり，それをライブラリのように再利用したりできる． 多くのメジャーな言語や Docker や Kubernetes などのメジャーなツールの Bazel ルールは<a href="https://github.com/search?q=topic%3Abazel-rules+org%3Abazelbuild&amp;type=Repositories">公式が結構提供してくれている</a>．</p>
<h3 id="rules_haskell">rules_haskell</h3>
<p>だがしかし，Haskell の Bazel ルールは不思議なことに公式にはない． 代わりに，<a href="https://www.tweag.io/">Tweag</a> が rules_haskell を精力的に作成してくれているので，今回はこれを利用することにする．</p>
<ul>
<li><a href="https://github.com/tweag/rules_haskell">tweag/rules_haskell - GitHub</a></li>
</ul>
<p>また，GitHub の <a href="https://github.com/github/semantic">semantic</a> が Bazel を利用しており，とても参考になる．</p>
<h2 id="ビルドする">ビルドする</h2>
<p>今回は <a href="https://github.com/matsubara0507/mdium">mdium</a> という自作ツールに Bazel を導入する． これは表題の通り，すでに Stack で管理されたプロジェクトだ． 今回の作業 PR はこれ：</p>
<ul>
<li><a href="https://github.com/matsubara0507/mdium/pull/8">Use Bazel to build by matsubara0507 · Pull Request #8 · matsubara0507/mdium</a></li>
</ul>
<h3 id="bazelisk">bazelisk</h3>
<p>作業を始める前に <a href="https://github.com/bazelbuild/bazelisk">bazelisk</a> について紹介する． bazel コマンドの代わりに bazelisk コマンドを利用することで，<code>.bazelversion</code> ファイルに記述したバージョンの bazel コマンドを勝手に利用してくれる．</p>
<p>rules_haskell は現在の最新バージョンである v0.13 だと（なぜか）サポートしている Bazel のバージョンが 2.1.0〜3.3.1 なので， <code>.bazelversion</code> ファイルで 3.3.1 を指定しておくと良い． ちなみに，現在の最新は 3.7.1．</p>
<h3 id="初期化する">初期化する</h3>
<p>rules<em>haskell の README にある通り，下記のコマンドを実行することでカレントディレクトリのプロジェクトを rules</em>haskell で初期化できる：</p>
<pre><code>$ curl https://haskell.build/start | sh</code></pre>
<p>実行することで以下のファイルが作成される</p>
<ul>
<li><code>WORKSPACE</code></li>
<li><code>BUILD.bazel</code></li>
<li><code>zlib.BUILD.bazel</code></li>
<li><code>Example.hs</code></li>
<li><code>.bazelrc</code></li>
</ul>
<p>WORKSPACE ファイルは外部への依存を記述する（コマンドのインストールなど）ファイルで，Bazel コマンドを実行するときのルートパスにもなる． BUILD ファイルは実行可能な Bazel コマンドを記述する． WORKSPACE が1つの Bazel プロジェクトに1つなのに対して，BUILD ファイルはアプリケーション毎に分ける（ことが多い）． 例えば，zlib.BUILD.bazel は zlib を用意するためのものだ． .bazelrc は Bazel コマンドを実行するときに渡すデフォルトのオプションなどを記述することができる．</p>
<p>Example.hs は例用の <code>Main</code> ファイルなので，これと今回は使わない zlib.BUILD.bazel は削除してしまう． また WORKSPACE に zlib 用の記述があるので，これも消してしまう．</p>
<p>また，gitignore に <code>bazel-*</code> を追記する． これは Bazel を実行したときに生成されるファイル群なのでコミットしない．</p>
<h3 id="依存パッケージの準備">依存パッケージの準備</h3>
<p>Haskell を Bazel でビルドするのにはパッケージの依存関係を Bazel で明示する必要がある（Cabal ファイルなどとは別に）． 厳密にどのバージョンのパッケージを使うかを記述す必要があるのだが，一つ一つやるのはめんどくさい． そこで，Stackage を使うことでだいぶ楽ができる（Stackage のスナップショットには，様々なパッケージのバージョンが固定されている）． 次のような<a href="https://docs.haskellstack.org/en/v1.3.0/custom_snapshot/">カスタムスナップショット</a>を定義してあげると良い：</p>
<div class="sourceCode" id="cb2"><pre class="sourceCode yaml"><code class="sourceCode yaml"><span id="cb2-1"><a href="#cb2-1" aria-hidden="true" tabindex="-1"></a><span class="fu">resolver</span><span class="kw">:</span><span class="at"> lts-16.23</span></span>
<span id="cb2-2"><a href="#cb2-2" aria-hidden="true" tabindex="-1"></a><span class="fu">packages</span><span class="kw">:</span><span class="co"> # 指定した resolver にはないパッケージをここで追記する</span></span>
<span id="cb2-3"><a href="#cb2-3" aria-hidden="true" tabindex="-1"></a><span class="kw">-</span><span class="at"> extensible-0.8.1</span></span>
<span id="cb2-4"><a href="#cb2-4" aria-hidden="true" tabindex="-1"></a><span class="kw">-</span><span class="at"> membership-0</span></span>
<span id="cb2-5"><a href="#cb2-5" aria-hidden="true" tabindex="-1"></a><span class="kw">-</span><span class="at"> fallible-0.1.0</span></span>
<span id="cb2-6"><a href="#cb2-6" aria-hidden="true" tabindex="-1"></a><span class="kw">-</span><span class="at"> incremental-0.3.1</span></span>
<span id="cb2-7"><a href="#cb2-7" aria-hidden="true" tabindex="-1"></a><span class="kw">-</span><span class="at"> </span><span class="fu">github</span><span class="kw">:</span><span class="at"> matsubara0507/mix.hs</span></span>
<span id="cb2-8"><a href="#cb2-8" aria-hidden="true" tabindex="-1"></a><span class="at">  </span><span class="fu">commit</span><span class="kw">:</span><span class="at"> 75714be080db16f6a4f9d0a22e86947ffcdadc57</span></span>
<span id="cb2-9"><a href="#cb2-9" aria-hidden="true" tabindex="-1"></a><span class="at">  </span><span class="fu">subdirs</span><span class="kw">:</span></span>
<span id="cb2-10"><a href="#cb2-10" aria-hidden="true" tabindex="-1"></a><span class="at">  </span><span class="kw">-</span><span class="at"> mix</span></span>
<span id="cb2-11"><a href="#cb2-11" aria-hidden="true" tabindex="-1"></a><span class="at">  </span><span class="kw">-</span><span class="at"> mix-json-logger</span></span></code></pre></div>
<p>このファイルを利用する形で，次のように WORKSPACE ファイルへ依存パッケージを記述する：</p>
<div class="sourceCode" id="cb3"><pre class="sourceCode py"><code class="sourceCode python"><span id="cb3-1"><a href="#cb3-1" aria-hidden="true" tabindex="-1"></a>load(</span>
<span id="cb3-2"><a href="#cb3-2" aria-hidden="true" tabindex="-1"></a>    <span class="st">&quot;@rules_haskell//haskell:cabal.bzl&quot;</span>,</span>
<span id="cb3-3"><a href="#cb3-3" aria-hidden="true" tabindex="-1"></a>    <span class="st">&quot;stack_snapshot&quot;</span></span>
<span id="cb3-4"><a href="#cb3-4" aria-hidden="true" tabindex="-1"></a>)</span>
<span id="cb3-5"><a href="#cb3-5" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb3-6"><a href="#cb3-6" aria-hidden="true" tabindex="-1"></a>stack_snapshot(</span>
<span id="cb3-7"><a href="#cb3-7" aria-hidden="true" tabindex="-1"></a>    name <span class="op">=</span> <span class="st">&quot;stackage&quot;</span>,</span>
<span id="cb3-8"><a href="#cb3-8" aria-hidden="true" tabindex="-1"></a>    <span class="co"># 利用するパッケージを列挙する</span></span>
<span id="cb3-9"><a href="#cb3-9" aria-hidden="true" tabindex="-1"></a>    packages <span class="op">=</span> [</span>
<span id="cb3-10"><a href="#cb3-10" aria-hidden="true" tabindex="-1"></a>        <span class="st">&quot;base&quot;</span>,</span>
<span id="cb3-11"><a href="#cb3-11" aria-hidden="true" tabindex="-1"></a>        <span class="st">&quot;rio&quot;</span>,</span>
<span id="cb3-12"><a href="#cb3-12" aria-hidden="true" tabindex="-1"></a>        <span class="st">&quot;aeson&quot;</span>,</span>
<span id="cb3-13"><a href="#cb3-13" aria-hidden="true" tabindex="-1"></a>        <span class="st">&quot;dotenv&quot;</span>,</span>
<span id="cb3-14"><a href="#cb3-14" aria-hidden="true" tabindex="-1"></a>        <span class="st">&quot;extensible&quot;</span>,</span>
<span id="cb3-15"><a href="#cb3-15" aria-hidden="true" tabindex="-1"></a>        <span class="st">&quot;fallible&quot;</span>,</span>
<span id="cb3-16"><a href="#cb3-16" aria-hidden="true" tabindex="-1"></a>        <span class="st">&quot;mix&quot;</span>,</span>
<span id="cb3-17"><a href="#cb3-17" aria-hidden="true" tabindex="-1"></a>        <span class="st">&quot;mix-json-logger&quot;</span>,</span>
<span id="cb3-18"><a href="#cb3-18" aria-hidden="true" tabindex="-1"></a>        <span class="st">&quot;wreq&quot;</span>,</span>
<span id="cb3-19"><a href="#cb3-19" aria-hidden="true" tabindex="-1"></a>    ],</span>
<span id="cb3-20"><a href="#cb3-20" aria-hidden="true" tabindex="-1"></a>    <span class="co"># 自分で定義したカスタムスナップショットを指定する</span></span>
<span id="cb3-21"><a href="#cb3-21" aria-hidden="true" tabindex="-1"></a>    local_snapshot <span class="op">=</span> <span class="st">&quot;//:stack-snapshot.yaml&quot;</span>,</span>
<span id="cb3-22"><a href="#cb3-22" aria-hidden="true" tabindex="-1"></a>)</span></code></pre></div>
<p>ちなみに，これは github/semantic にあったやり方．</p>
<h3 id="パッケージのビルド">パッケージのビルド</h3>
<p>次に自身で記述したパッケージのビルド方法を記述する． BUILD.bazel に次のようにルールを追記するだけだ：</p>
<div class="sourceCode" id="cb4"><pre class="sourceCode py"><code class="sourceCode python"><span id="cb4-1"><a href="#cb4-1" aria-hidden="true" tabindex="-1"></a>load(<span class="st">&quot;@rules_haskell//haskell:defs.bzl&quot;</span>, <span class="st">&quot;haskell_library&quot;</span>)</span>
<span id="cb4-2"><a href="#cb4-2" aria-hidden="true" tabindex="-1"></a>load(<span class="st">&quot;//:build/common.bzl&quot;</span>, <span class="st">&quot;GHC_FLAGS&quot;</span>)</span>
<span id="cb4-3"><a href="#cb4-3" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb4-4"><a href="#cb4-4" aria-hidden="true" tabindex="-1"></a><span class="co"># You can add your own libraries with haskell_library.</span></span>
<span id="cb4-5"><a href="#cb4-5" aria-hidden="true" tabindex="-1"></a>haskell_library(</span>
<span id="cb4-6"><a href="#cb4-6" aria-hidden="true" tabindex="-1"></a>    name <span class="op">=</span> <span class="st">&quot;mdium-library&quot;</span>,</span>
<span id="cb4-7"><a href="#cb4-7" aria-hidden="true" tabindex="-1"></a>    srcs <span class="op">=</span> glob([<span class="st">&#39;src/**/*.hs&#39;</span>]),</span>
<span id="cb4-8"><a href="#cb4-8" aria-hidden="true" tabindex="-1"></a>    <span class="co"># WORKSPACE の stack_snapshot で明記した依存パッケージを記述している</span></span>
<span id="cb4-9"><a href="#cb4-9" aria-hidden="true" tabindex="-1"></a>    deps <span class="op">=</span> [</span>
<span id="cb4-10"><a href="#cb4-10" aria-hidden="true" tabindex="-1"></a>        <span class="st">&quot;@stackage//:base&quot;</span>,</span>
<span id="cb4-11"><a href="#cb4-11" aria-hidden="true" tabindex="-1"></a>        <span class="st">&quot;@stackage//:rio&quot;</span>,</span>
<span id="cb4-12"><a href="#cb4-12" aria-hidden="true" tabindex="-1"></a>        <span class="st">&quot;@stackage//:aeson&quot;</span>,</span>
<span id="cb4-13"><a href="#cb4-13" aria-hidden="true" tabindex="-1"></a>        <span class="st">&quot;@stackage//:extensible&quot;</span>,</span>
<span id="cb4-14"><a href="#cb4-14" aria-hidden="true" tabindex="-1"></a>        <span class="st">&quot;@stackage//:fallible&quot;</span>,</span>
<span id="cb4-15"><a href="#cb4-15" aria-hidden="true" tabindex="-1"></a>        <span class="st">&quot;@stackage//:mix&quot;</span>,</span>
<span id="cb4-16"><a href="#cb4-16" aria-hidden="true" tabindex="-1"></a>        <span class="st">&quot;@stackage//:mix-json-logger&quot;</span>,</span>
<span id="cb4-17"><a href="#cb4-17" aria-hidden="true" tabindex="-1"></a>        <span class="st">&quot;@stackage//:wreq&quot;</span>,</span>
<span id="cb4-18"><a href="#cb4-18" aria-hidden="true" tabindex="-1"></a>    ],</span>
<span id="cb4-19"><a href="#cb4-19" aria-hidden="true" tabindex="-1"></a>    compiler_flags <span class="op">=</span> GHC_FLAGS,</span>
<span id="cb4-20"><a href="#cb4-20" aria-hidden="true" tabindex="-1"></a>)</span></code></pre></div>
<p>確か，<code>srcs</code> には <code>.hs</code> ファイル以外を指定しても利用できないはず． Template Haskell などで使いたい <code>.hs</code> 以外のファイルをビルド時に利用する場合は <code>extra_srcs</code> を利用する． まぁ詳しくは<a href="https://release.api.haskell.build/haskell/defs.html#haskell_library">公式ドキュメント</a>を参照してください．</p>
<p><code>GHC_FLAGS</code> という定数っぽいのは build/common.bzl というファイルに次のように記述されている：</p>
<div class="sourceCode" id="cb5"><pre class="sourceCode py"><code class="sourceCode python"><span id="cb5-1"><a href="#cb5-1" aria-hidden="true" tabindex="-1"></a>GHC_FLAGS <span class="op">=</span> [</span>
<span id="cb5-2"><a href="#cb5-2" aria-hidden="true" tabindex="-1"></a>    <span class="st">&quot;-v1&quot;</span>,</span>
<span id="cb5-3"><a href="#cb5-3" aria-hidden="true" tabindex="-1"></a>    <span class="st">&quot;-j8&quot;</span>,</span>
<span id="cb5-4"><a href="#cb5-4" aria-hidden="true" tabindex="-1"></a>    <span class="st">&quot;-fdiagnostics-color=always&quot;</span>,</span>
<span id="cb5-5"><a href="#cb5-5" aria-hidden="true" tabindex="-1"></a>    <span class="st">&quot;-ferror-spans&quot;</span>,</span>
<span id="cb5-6"><a href="#cb5-6" aria-hidden="true" tabindex="-1"></a>    <span class="st">&quot;-Wall&quot;</span>,</span>
<span id="cb5-7"><a href="#cb5-7" aria-hidden="true" tabindex="-1"></a>    <span class="st">&quot;-Wcompat&quot;</span>,</span>
<span id="cb5-8"><a href="#cb5-8" aria-hidden="true" tabindex="-1"></a>    <span class="st">&quot;-Wincomplete-record-updates&quot;</span>,</span>
<span id="cb5-9"><a href="#cb5-9" aria-hidden="true" tabindex="-1"></a>    <span class="st">&quot;-Wincomplete-uni-patterns&quot;</span>,</span>
<span id="cb5-10"><a href="#cb5-10" aria-hidden="true" tabindex="-1"></a>    <span class="st">&quot;-Wredundant-constraints&quot;</span>,</span>
<span id="cb5-11"><a href="#cb5-11" aria-hidden="true" tabindex="-1"></a>    <span class="st">&quot;-optP-Wno-nonportable-include-path&quot;</span>,</span>
<span id="cb5-12"><a href="#cb5-12" aria-hidden="true" tabindex="-1"></a>    <span class="st">&quot;-DBAZEL_BUILD=1&quot;</span>,</span>
<span id="cb5-13"><a href="#cb5-13" aria-hidden="true" tabindex="-1"></a>    <span class="st">&quot;-XNoImplicitPrelude&quot;</span>,</span>
<span id="cb5-14"><a href="#cb5-14" aria-hidden="true" tabindex="-1"></a>    <span class="st">&quot;-XConstraintKinds&quot;</span>,</span>
<span id="cb5-15"><a href="#cb5-15" aria-hidden="true" tabindex="-1"></a>    <span class="st">&quot;-XDataKinds&quot;</span>,</span>
<span id="cb5-16"><a href="#cb5-16" aria-hidden="true" tabindex="-1"></a>    <span class="st">&quot;-XFlexibleContexts&quot;</span>,</span>
<span id="cb5-17"><a href="#cb5-17" aria-hidden="true" tabindex="-1"></a>    <span class="st">&quot;-XFlexibleInstances&quot;</span>,</span>
<span id="cb5-18"><a href="#cb5-18" aria-hidden="true" tabindex="-1"></a>    <span class="st">&quot;-XGeneralizedNewtypeDeriving&quot;</span>,</span>
<span id="cb5-19"><a href="#cb5-19" aria-hidden="true" tabindex="-1"></a>    <span class="st">&quot;-XLambdaCase&quot;</span>,</span>
<span id="cb5-20"><a href="#cb5-20" aria-hidden="true" tabindex="-1"></a>    <span class="st">&quot;-XMultiWayIf&quot;</span>,</span>
<span id="cb5-21"><a href="#cb5-21" aria-hidden="true" tabindex="-1"></a>    <span class="st">&quot;-XNumericUnderscores&quot;</span>,</span>
<span id="cb5-22"><a href="#cb5-22" aria-hidden="true" tabindex="-1"></a>    <span class="st">&quot;-XOverloadedLabels&quot;</span>,</span>
<span id="cb5-23"><a href="#cb5-23" aria-hidden="true" tabindex="-1"></a>    <span class="st">&quot;-XOverloadedStrings&quot;</span>,</span>
<span id="cb5-24"><a href="#cb5-24" aria-hidden="true" tabindex="-1"></a>    <span class="st">&quot;-XPolyKinds&quot;</span>,</span>
<span id="cb5-25"><a href="#cb5-25" aria-hidden="true" tabindex="-1"></a>    <span class="st">&quot;-XRankNTypes&quot;</span>,</span>
<span id="cb5-26"><a href="#cb5-26" aria-hidden="true" tabindex="-1"></a>    <span class="st">&quot;-XStandaloneDeriving&quot;</span>,</span>
<span id="cb5-27"><a href="#cb5-27" aria-hidden="true" tabindex="-1"></a>    <span class="st">&quot;-XTypeFamilies&quot;</span>,</span>
<span id="cb5-28"><a href="#cb5-28" aria-hidden="true" tabindex="-1"></a>    <span class="st">&quot;-XTypeOperators&quot;</span>,</span>
<span id="cb5-29"><a href="#cb5-29" aria-hidden="true" tabindex="-1"></a>    <span class="st">&quot;-XTypeSynonymInstances&quot;</span>,</span>
<span id="cb5-30"><a href="#cb5-30" aria-hidden="true" tabindex="-1"></a>]</span></code></pre></div>
<p>これも github/semantic を参考にしたやり方だ．</p>
<p>あとは <code>bazelisk build //:mdium-library</code> というコマンドを実行することでパッケージのビルドができる． なお，初回は30分ぐらい時間がかかるので注意．</p>
<h3 id="バイナリのビルド">バイナリのビルド</h3>
<p>あとはバイナリをビルドするだけだ．バイナリの場合は BUILD.bazel に次のようにルールを追記する：</p>
<div class="sourceCode" id="cb6"><pre class="sourceCode py"><code class="sourceCode python"><span id="cb6-1"><a href="#cb6-1" aria-hidden="true" tabindex="-1"></a>load(<span class="st">&quot;@rules_haskell//haskell:defs.bzl&quot;</span>, <span class="st">&quot;haskell_binary&quot;</span>)</span>
<span id="cb6-2"><a href="#cb6-2" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb6-3"><a href="#cb6-3" aria-hidden="true" tabindex="-1"></a>haskell_binary(</span>
<span id="cb6-4"><a href="#cb6-4" aria-hidden="true" tabindex="-1"></a>    name <span class="op">=</span> <span class="st">&quot;mdium&quot;</span>,</span>
<span id="cb6-5"><a href="#cb6-5" aria-hidden="true" tabindex="-1"></a>    srcs <span class="op">=</span> glob([<span class="st">&quot;app/**/*.hs&quot;</span>]),</span>
<span id="cb6-6"><a href="#cb6-6" aria-hidden="true" tabindex="-1"></a>    deps <span class="op">=</span> [</span>
<span id="cb6-7"><a href="#cb6-7" aria-hidden="true" tabindex="-1"></a>        <span class="st">&quot;:mdium-library&quot;</span>, <span class="co"># 前小節で作ったパッケージ</span></span>
<span id="cb6-8"><a href="#cb6-8" aria-hidden="true" tabindex="-1"></a>        <span class="st">&quot;@stackage//:base&quot;</span>,</span>
<span id="cb6-9"><a href="#cb6-9" aria-hidden="true" tabindex="-1"></a>        <span class="st">&quot;@stackage//:rio&quot;</span>,</span>
<span id="cb6-10"><a href="#cb6-10" aria-hidden="true" tabindex="-1"></a>        <span class="st">&quot;@stackage//:extensible&quot;</span>,</span>
<span id="cb6-11"><a href="#cb6-11" aria-hidden="true" tabindex="-1"></a>        <span class="st">&quot;@stackage//:dotenv&quot;</span>,</span>
<span id="cb6-12"><a href="#cb6-12" aria-hidden="true" tabindex="-1"></a>    ],</span>
<span id="cb6-13"><a href="#cb6-13" aria-hidden="true" tabindex="-1"></a>    compiler_flags <span class="op">=</span> GHC_FLAGS,</span>
<span id="cb6-14"><a href="#cb6-14" aria-hidden="true" tabindex="-1"></a>)</span></code></pre></div>
<p>あとは <code>bazelisk build //:mdium</code> というコマンドでバイナリのビルドができる．</p>
<p>ただし，<code>--version</code> オプションがうまくコンパイルできないので，一旦この部分を削除することにした． というのも，(1) paths_module は自動生成されないのと (2) githash パッケージ（.git からバージョン情報を組み立てる）が動作しないためである． (1) は頑張ってとりあえず解決したので後述する．</p>
<h3 id="github-actions-を設定する">GitHub Actions を設定する</h3>
<p>最後に，CI/CD を回すために GitHub Actions を設定しておく． なんと，bazel と bazelisk コマンドはデフォルトで全てのプラットフォームにインストールされてるので，そのままコマンドを実行できる．</p>
<div class="sourceCode" id="cb7"><pre class="sourceCode yaml"><code class="sourceCode yaml"><span id="cb7-1"><a href="#cb7-1" aria-hidden="true" tabindex="-1"></a><span class="fu">name</span><span class="kw">:</span><span class="at"> Build Application</span></span>
<span id="cb7-2"><a href="#cb7-2" aria-hidden="true" tabindex="-1"></a><span class="fu">on</span><span class="kw">:</span></span>
<span id="cb7-3"><a href="#cb7-3" aria-hidden="true" tabindex="-1"></a><span class="at">  </span><span class="fu">pull_request</span><span class="kw">:</span><span class="at"> </span><span class="ch">null</span></span>
<span id="cb7-4"><a href="#cb7-4" aria-hidden="true" tabindex="-1"></a><span class="at">  </span><span class="fu">push</span><span class="kw">:</span></span>
<span id="cb7-5"><a href="#cb7-5" aria-hidden="true" tabindex="-1"></a><span class="at">    </span><span class="fu">branches</span><span class="kw">:</span></span>
<span id="cb7-6"><a href="#cb7-6" aria-hidden="true" tabindex="-1"></a><span class="at">    </span><span class="kw">-</span><span class="at"> master</span></span>
<span id="cb7-7"><a href="#cb7-7" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb7-8"><a href="#cb7-8" aria-hidden="true" tabindex="-1"></a><span class="fu">jobs</span><span class="kw">:</span></span>
<span id="cb7-9"><a href="#cb7-9" aria-hidden="true" tabindex="-1"></a><span class="at">  </span><span class="fu">build</span><span class="kw">:</span></span>
<span id="cb7-10"><a href="#cb7-10" aria-hidden="true" tabindex="-1"></a><span class="at">    </span><span class="fu">runs-on</span><span class="kw">:</span><span class="at"> ubuntu-18.04</span></span>
<span id="cb7-11"><a href="#cb7-11" aria-hidden="true" tabindex="-1"></a><span class="at">    </span><span class="fu">steps</span><span class="kw">:</span></span>
<span id="cb7-12"><a href="#cb7-12" aria-hidden="true" tabindex="-1"></a><span class="at">    </span><span class="kw">-</span><span class="at"> </span><span class="fu">uses</span><span class="kw">:</span><span class="at"> actions/checkout@v2</span></span>
<span id="cb7-13"><a href="#cb7-13" aria-hidden="true" tabindex="-1"></a><span class="at">    </span><span class="kw">-</span><span class="at"> </span><span class="fu">name</span><span class="kw">:</span><span class="at"> Cache Bazel</span></span>
<span id="cb7-14"><a href="#cb7-14" aria-hidden="true" tabindex="-1"></a><span class="at">      </span><span class="fu">uses</span><span class="kw">:</span><span class="at"> actions/cache@v2</span></span>
<span id="cb7-15"><a href="#cb7-15" aria-hidden="true" tabindex="-1"></a><span class="at">      </span><span class="fu">with</span><span class="kw">:</span></span>
<span id="cb7-16"><a href="#cb7-16" aria-hidden="true" tabindex="-1"></a><span class="fu">        path</span><span class="kw">: </span><span class="ch">|</span></span>
<span id="cb7-17"><a href="#cb7-17" aria-hidden="true" tabindex="-1"></a>          ~/.cache/bazel</span>
<span id="cb7-18"><a href="#cb7-18" aria-hidden="true" tabindex="-1"></a><span class="at">        </span><span class="fu">key</span><span class="kw">:</span><span class="at"> ${{ runner.os }}-${{ hashFiles(&#39;WORKSPACE&#39;) }}</span></span>
<span id="cb7-19"><a href="#cb7-19" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb7-20"><a href="#cb7-20" aria-hidden="true" tabindex="-1"></a><span class="at">    </span><span class="kw">-</span><span class="at"> </span><span class="fu">name</span><span class="kw">:</span><span class="at"> Build binary</span></span>
<span id="cb7-21"><a href="#cb7-21" aria-hidden="true" tabindex="-1"></a><span class="fu">      run</span><span class="kw">: </span><span class="ch">|</span></span>
<span id="cb7-22"><a href="#cb7-22" aria-hidden="true" tabindex="-1"></a>        bazelisk build //:mdium</span>
<span id="cb7-23"><a href="#cb7-23" aria-hidden="true" tabindex="-1"></a>        bazel-bin/mdium --help</span></code></pre></div>
<p>キャッシュは1G以上あったが，30分近くかかったビルドが2分ぐらいで終わるようになるのでできれば設定した方がいいんじゃないかな．</p>
<h2 id="バージョン情報を埋め込む">バージョン情報を埋め込む</h2>
<p>かなり苦戦した． 色々試した結果，まずは path_module を自分で生成することにした． build/rules/haskell/def.bzl というファイルを作成し，そこに自作ルールを次のように記述した：</p>
<div class="sourceCode" id="cb8"><pre class="sourceCode py"><code class="sourceCode python"><span id="cb8-1"><a href="#cb8-1" aria-hidden="true" tabindex="-1"></a>load(<span class="st">&quot;@rules_haskell//haskell:defs.bzl&quot;</span>, <span class="st">&quot;haskell_library&quot;</span>)</span>
<span id="cb8-2"><a href="#cb8-2" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb8-3"><a href="#cb8-3" aria-hidden="true" tabindex="-1"></a><span class="kw">def</span> paths_module(name, package, version, <span class="bu">dir</span> <span class="op">=</span> <span class="st">&quot;gen_paths&quot;</span>, deps <span class="op">=</span> [<span class="st">&quot;@stackage//:base&quot;</span>], <span class="op">**</span>kwargs):</span>
<span id="cb8-4"><a href="#cb8-4" aria-hidden="true" tabindex="-1"></a>    module_name <span class="op">=</span> <span class="st">&quot;Paths_&quot;</span> <span class="op">+</span> package.replace(<span class="st">&quot;-&quot;</span>, <span class="st">&quot;_&quot;</span>)</span>
<span id="cb8-5"><a href="#cb8-5" aria-hidden="true" tabindex="-1"></a>    paths_file <span class="op">=</span> <span class="bu">dir</span> <span class="op">+</span> <span class="st">&quot;/&quot;</span> <span class="op">+</span> module_name <span class="op">+</span> <span class="st">&quot;.hs&quot;</span></span>
<span id="cb8-6"><a href="#cb8-6" aria-hidden="true" tabindex="-1"></a>    _generate_paths_module(name <span class="op">=</span> paths_file, module <span class="op">=</span> module_name, version <span class="op">=</span> version)</span>
<span id="cb8-7"><a href="#cb8-7" aria-hidden="true" tabindex="-1"></a>    haskell_library(name <span class="op">=</span> name, srcs <span class="op">=</span> [paths_file], deps <span class="op">=</span> deps, <span class="op">**</span>kwargs)</span>
<span id="cb8-8"><a href="#cb8-8" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb8-9"><a href="#cb8-9" aria-hidden="true" tabindex="-1"></a>_generate_paths_module <span class="op">=</span> rule(</span>
<span id="cb8-10"><a href="#cb8-10" aria-hidden="true" tabindex="-1"></a>    _generate_paths_module_impl,</span>
<span id="cb8-11"><a href="#cb8-11" aria-hidden="true" tabindex="-1"></a>    attrs <span class="op">=</span> {</span>
<span id="cb8-12"><a href="#cb8-12" aria-hidden="true" tabindex="-1"></a>        <span class="st">&quot;module&quot;</span>: attr.string(),</span>
<span id="cb8-13"><a href="#cb8-13" aria-hidden="true" tabindex="-1"></a>        <span class="st">&quot;version&quot;</span>: attr.string(),</span>
<span id="cb8-14"><a href="#cb8-14" aria-hidden="true" tabindex="-1"></a>        <span class="st">&quot;_template&quot;</span>: attr.label(</span>
<span id="cb8-15"><a href="#cb8-15" aria-hidden="true" tabindex="-1"></a>            default <span class="op">=</span> <span class="st">&quot;:Paths_module.hs&quot;</span>,</span>
<span id="cb8-16"><a href="#cb8-16" aria-hidden="true" tabindex="-1"></a>            allow_single_file <span class="op">=</span> <span class="va">True</span>,</span>
<span id="cb8-17"><a href="#cb8-17" aria-hidden="true" tabindex="-1"></a>        ),</span>
<span id="cb8-18"><a href="#cb8-18" aria-hidden="true" tabindex="-1"></a>    },</span>
<span id="cb8-19"><a href="#cb8-19" aria-hidden="true" tabindex="-1"></a>)</span>
<span id="cb8-20"><a href="#cb8-20" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb8-21"><a href="#cb8-21" aria-hidden="true" tabindex="-1"></a><span class="kw">def</span> _generate_paths_module_impl(ctx):</span>
<span id="cb8-22"><a href="#cb8-22" aria-hidden="true" tabindex="-1"></a>    paths_file <span class="op">=</span> ctx.actions.declare_file(ctx.label.name)</span>
<span id="cb8-23"><a href="#cb8-23" aria-hidden="true" tabindex="-1"></a>    ctx.actions.expand_template(</span>
<span id="cb8-24"><a href="#cb8-24" aria-hidden="true" tabindex="-1"></a>        template <span class="op">=</span> ctx.<span class="bu">file</span>._template,</span>
<span id="cb8-25"><a href="#cb8-25" aria-hidden="true" tabindex="-1"></a>        output <span class="op">=</span> paths_file,</span>
<span id="cb8-26"><a href="#cb8-26" aria-hidden="true" tabindex="-1"></a>        substitutions <span class="op">=</span> {</span>
<span id="cb8-27"><a href="#cb8-27" aria-hidden="true" tabindex="-1"></a>            <span class="st">&quot;%</span><span class="sc">{module_name}</span><span class="st">&quot;</span>: ctx.attr.module,</span>
<span id="cb8-28"><a href="#cb8-28" aria-hidden="true" tabindex="-1"></a>            <span class="st">&quot;%</span><span class="sc">{version}</span><span class="st">&quot;</span>: <span class="bu">str</span>(ctx.attr.version.replace(<span class="st">&quot;.&quot;</span>, <span class="st">&quot;,&quot;</span>)),</span>
<span id="cb8-29"><a href="#cb8-29" aria-hidden="true" tabindex="-1"></a>        },</span>
<span id="cb8-30"><a href="#cb8-30" aria-hidden="true" tabindex="-1"></a>    )</span>
<span id="cb8-31"><a href="#cb8-31" aria-hidden="true" tabindex="-1"></a>    <span class="cf">return</span> struct(files <span class="op">=</span> depset([paths_file]))</span></code></pre></div>
<p>やってることは単純で，<code>_generate_paths_module</code> という自作ルールで <code>Paths_xxx.hs</code> というファイルを生成し（普段は Cabal とかがやってるはず），それを <code>haskell_library</code> を利用して Bazel で参照できるパッケージにしている．</p>
<h3 id="ルールの自作">ルールの自作</h3>
<p>ルールの自作は，結構慣れてこないと難しいのだが簡単に説明する． ルールを自作するには，<code>rule_name = rule(...)</code> というふうにメソッドっぽいものを定義する． このルールで使える引数を <code>attrs</code> という名前付き引数で指定している．<code>_generate_paths_module</code> の場合は：</p>
<div class="sourceCode" id="cb9"><pre class="sourceCode py"><code class="sourceCode python"><span id="cb9-1"><a href="#cb9-1" aria-hidden="true" tabindex="-1"></a>_generate_paths_module <span class="op">=</span> rule(</span>
<span id="cb9-2"><a href="#cb9-2" aria-hidden="true" tabindex="-1"></a>    _generate_paths_module_impl,</span>
<span id="cb9-3"><a href="#cb9-3" aria-hidden="true" tabindex="-1"></a>    attrs <span class="op">=</span> {</span>
<span id="cb9-4"><a href="#cb9-4" aria-hidden="true" tabindex="-1"></a>        <span class="st">&quot;module&quot;</span>: attr.string(),</span>
<span id="cb9-5"><a href="#cb9-5" aria-hidden="true" tabindex="-1"></a>        <span class="st">&quot;version&quot;</span>: attr.string(),</span>
<span id="cb9-6"><a href="#cb9-6" aria-hidden="true" tabindex="-1"></a>        <span class="st">&quot;_template&quot;</span>: attr.label(</span>
<span id="cb9-7"><a href="#cb9-7" aria-hidden="true" tabindex="-1"></a>            default <span class="op">=</span> <span class="st">&quot;:Paths_module.hs&quot;</span>,</span>
<span id="cb9-8"><a href="#cb9-8" aria-hidden="true" tabindex="-1"></a>            allow_single_file <span class="op">=</span> <span class="va">True</span>,</span>
<span id="cb9-9"><a href="#cb9-9" aria-hidden="true" tabindex="-1"></a>        ),</span>
<span id="cb9-10"><a href="#cb9-10" aria-hidden="true" tabindex="-1"></a>    },</span>
<span id="cb9-11"><a href="#cb9-11" aria-hidden="true" tabindex="-1"></a>)</span></code></pre></div>
<p><code>module</code> と <code>version</code> がある（アンダースコアから始まる引数は普通デフォルト値でしか利用しないみたい）． 実際のルールの実装は1引数目（あるいは <code>implementation</code> という名前付き引数）で指定する． つまり <code>_generate_paths_module_impl</code> というのが，<code>_generate_paths_module</code> の実装部分である（名前の通りですね）．</p>
<p>ルールの実装に当たるメソッドの引数には ctx というのが割り当てられる． 詳しくは<a href="https://docs.bazel.build/versions/master/skylark/lib/ctx.html">公式ドキュメント</a>を参照して欲しいが，この引数からルールに与えられた引数を参照したり（<code>ctx.attr</code>），ファイルのダウンロードやテンプレートの展開をしたりができる（<code>ctx.actions</code>）． <code>_generate_paths_module_impl</code> の場合は：</p>
<div class="sourceCode" id="cb10"><pre class="sourceCode py"><code class="sourceCode python"><span id="cb10-1"><a href="#cb10-1" aria-hidden="true" tabindex="-1"></a><span class="kw">def</span> _generate_paths_module_impl(ctx):</span>
<span id="cb10-2"><a href="#cb10-2" aria-hidden="true" tabindex="-1"></a>    paths_file <span class="op">=</span> ctx.actions.declare_file(ctx.label.name)</span>
<span id="cb10-3"><a href="#cb10-3" aria-hidden="true" tabindex="-1"></a>    ctx.actions.expand_template(</span>
<span id="cb10-4"><a href="#cb10-4" aria-hidden="true" tabindex="-1"></a>        template <span class="op">=</span> ctx.<span class="bu">file</span>._template,</span>
<span id="cb10-5"><a href="#cb10-5" aria-hidden="true" tabindex="-1"></a>        output <span class="op">=</span> paths_file,</span>
<span id="cb10-6"><a href="#cb10-6" aria-hidden="true" tabindex="-1"></a>        substitutions <span class="op">=</span> {</span>
<span id="cb10-7"><a href="#cb10-7" aria-hidden="true" tabindex="-1"></a>            <span class="st">&quot;%</span><span class="sc">{module_name}</span><span class="st">&quot;</span>: ctx.attr.module,</span>
<span id="cb10-8"><a href="#cb10-8" aria-hidden="true" tabindex="-1"></a>            <span class="st">&quot;%</span><span class="sc">{version}</span><span class="st">&quot;</span>: <span class="bu">str</span>(ctx.attr.version.replace(<span class="st">&quot;.&quot;</span>, <span class="st">&quot;,&quot;</span>)),</span>
<span id="cb10-9"><a href="#cb10-9" aria-hidden="true" tabindex="-1"></a>        },</span>
<span id="cb10-10"><a href="#cb10-10" aria-hidden="true" tabindex="-1"></a>    )</span>
<span id="cb10-11"><a href="#cb10-11" aria-hidden="true" tabindex="-1"></a>    <span class="cf">return</span> struct(files <span class="op">=</span> depset([paths_file]))</span></code></pre></div>
<p><code>ctx.actions.expand_template</code> で，テンプレートの展開をしている． <code>substitutions</code> はテンプレートファイル内にある文字列の置換用辞書だ． テンプレートファイルは <code>_template</code> という引数のデフォルト値で指定しており，build/rules/haskell/Paths_module.hs という次のようなファイルを使っている：</p>
<div class="sourceCode" id="cb11"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span id="cb11-1"><a href="#cb11-1" aria-hidden="true" tabindex="-1"></a><span class="kw">module</span> <span class="op">%</span>{module_name} <span class="kw">where</span></span>
<span id="cb11-2"><a href="#cb11-2" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb11-3"><a href="#cb11-3" aria-hidden="true" tabindex="-1"></a><span class="kw">import</span> <span class="dt">Prelude</span></span>
<span id="cb11-4"><a href="#cb11-4" aria-hidden="true" tabindex="-1"></a><span class="kw">import</span> <span class="dt">Data.Version</span> (<span class="dt">Version</span> (..))</span>
<span id="cb11-5"><a href="#cb11-5" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb11-6"><a href="#cb11-6" aria-hidden="true" tabindex="-1"></a><span class="ot">version ::</span> <span class="dt">Version</span></span>
<span id="cb11-7"><a href="#cb11-7" aria-hidden="true" tabindex="-1"></a>version <span class="ot">=</span> <span class="dt">Version</span> [<span class="op">%</span>{version}] []</span></code></pre></div>
<p>モジュール名はパッケージ名の区切りもじを <code>_</code> に置換して，<code>Paths_</code> というプレフィックスをつけたものだ（最初の <code>paths_module</code> メソッドの冒頭でやっている）． バージョンは <code>1.2.3</code> などのままでは使えないので，<code>.</code> を <code>,</code> に置換してからテンプレートに埋め込んでいる． ちなみに，テンプレートファイルのように <code>BUILD</code> ファイル外のファイルを利用するには次のような <code>BUILD</code> ファイルを記述して公開設定をしておく必要がある：</p>
<div class="sourceCode" id="cb12"><pre class="sourceCode py"><code class="sourceCode python"><span id="cb12-1"><a href="#cb12-1" aria-hidden="true" tabindex="-1"></a><span class="co"># build/rules/haskell/BUILD.bazel</span></span>
<span id="cb12-2"><a href="#cb12-2" aria-hidden="true" tabindex="-1"></a>filegroup(name <span class="op">=</span> <span class="st">&quot;all&quot;</span>, srcs <span class="op">=</span> glob([<span class="st">&quot;*&quot;</span>]), visibility <span class="op">=</span> [<span class="st">&quot;//visibility:public&quot;</span>])</span>
<span id="cb12-3"><a href="#cb12-3" aria-hidden="true" tabindex="-1"></a>exports_files([<span class="st">&quot;Paths_module.hs&quot;</span>], visibility <span class="op">=</span> [<span class="st">&quot;//visibility:public&quot;</span>])</span></code></pre></div>
<h3 id="自作ルールを利用する">自作ルールを利用する</h3>
<p>あとは BUILD.bazel に次のように追記することで paths_module が生成される：</p>
<div class="sourceCode" id="cb13"><pre class="sourceCode py"><code class="sourceCode python"><span id="cb13-1"><a href="#cb13-1" aria-hidden="true" tabindex="-1"></a>load(<span class="st">&quot;//build/rules/haskell:def.bzl&quot;</span>, <span class="st">&quot;paths_module&quot;</span>)</span>
<span id="cb13-2"><a href="#cb13-2" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb13-3"><a href="#cb13-3" aria-hidden="true" tabindex="-1"></a>paths_module(</span>
<span id="cb13-4"><a href="#cb13-4" aria-hidden="true" tabindex="-1"></a>    name <span class="op">=</span> <span class="st">&quot;paths_module&quot;</span>,</span>
<span id="cb13-5"><a href="#cb13-5" aria-hidden="true" tabindex="-1"></a>    package <span class="op">=</span> <span class="st">&quot;mdium&quot;</span>,</span>
<span id="cb13-6"><a href="#cb13-6" aria-hidden="true" tabindex="-1"></a>    version <span class="op">=</span> <span class="st">&quot;1.0.0&quot;</span>,</span>
<span id="cb13-7"><a href="#cb13-7" aria-hidden="true" tabindex="-1"></a>)</span></code></pre></div>
<p><code>haskell_binary</code> の方の <code>deps</code> に <code>:paths_module</code> を追記することで <code>Paths_mdium</code> モジュールを利用できるようになる． これを利用して <code>--version</code> オプションを復活させた．</p>
<h2 id="github-container-registry-にプッシュする">GitHub Container Registry にプッシュする</h2>
<p>最後に Bazel で Docker イメージのビルドを行い，それを GitHub Container Registry にプッシュできるようにしておく．</p>
<h3 id="rules_docker-の準備">rules_docker の準備</h3>
<p>Docker の操作を行うには rules<em>docker を利用する．rules</em>docker を利用するためにまずは WORKSPACE に rules_docker の設定を追記しよう：</p>
<div class="sourceCode" id="cb14"><pre class="sourceCode py"><code class="sourceCode python"><span id="cb14-1"><a href="#cb14-1" aria-hidden="true" tabindex="-1"></a>http_archive(</span>
<span id="cb14-2"><a href="#cb14-2" aria-hidden="true" tabindex="-1"></a>    name <span class="op">=</span> <span class="st">&quot;io_bazel_rules_docker&quot;</span>,</span>
<span id="cb14-3"><a href="#cb14-3" aria-hidden="true" tabindex="-1"></a>    sha256 <span class="op">=</span> <span class="st">&quot;1698624e878b0607052ae6131aa216d45ebb63871ec497f26c67455b34119c80&quot;</span>,</span>
<span id="cb14-4"><a href="#cb14-4" aria-hidden="true" tabindex="-1"></a>    strip_prefix <span class="op">=</span> <span class="st">&quot;rules_docker-0.15.0&quot;</span>,</span>
<span id="cb14-5"><a href="#cb14-5" aria-hidden="true" tabindex="-1"></a>    urls <span class="op">=</span> [<span class="st">&quot;https://github.com/bazelbuild/rules_docker/releases/download/v0.15.0/rules_docker-v0.15.0.tar.gz&quot;</span>],</span>
<span id="cb14-6"><a href="#cb14-6" aria-hidden="true" tabindex="-1"></a>)</span>
<span id="cb14-7"><a href="#cb14-7" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb14-8"><a href="#cb14-8" aria-hidden="true" tabindex="-1"></a>load(</span>
<span id="cb14-9"><a href="#cb14-9" aria-hidden="true" tabindex="-1"></a>    <span class="st">&quot;@io_bazel_rules_docker//repositories:repositories.bzl&quot;</span>,</span>
<span id="cb14-10"><a href="#cb14-10" aria-hidden="true" tabindex="-1"></a>    container_repositories <span class="op">=</span> <span class="st">&quot;repositories&quot;</span>,</span>
<span id="cb14-11"><a href="#cb14-11" aria-hidden="true" tabindex="-1"></a>)</span>
<span id="cb14-12"><a href="#cb14-12" aria-hidden="true" tabindex="-1"></a>container_repositories()</span>
<span id="cb14-13"><a href="#cb14-13" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb14-14"><a href="#cb14-14" aria-hidden="true" tabindex="-1"></a>load(<span class="st">&quot;@io_bazel_rules_docker//repositories:deps.bzl&quot;</span>, container_deps <span class="op">=</span> <span class="st">&quot;deps&quot;</span>)</span>
<span id="cb14-15"><a href="#cb14-15" aria-hidden="true" tabindex="-1"></a>container_deps()</span></code></pre></div>
<p>これは rules_docker の README に書いてある追記の仕方なのだが，このままビルドしようとすると次のようなエラーが出た：</p>
<div class="sourceCode" id="cb15"><pre class="sourceCode sh"><code class="sourceCode bash"><span id="cb15-1"><a href="#cb15-1" aria-hidden="true" tabindex="-1"></a><span class="ex">$</span> bazel build //:image</span>
<span id="cb15-2"><a href="#cb15-2" aria-hidden="true" tabindex="-1"></a><span class="ex">ERROR:</span> error loading package <span class="st">&#39;&#39;</span>: in /path/to/external/io_bazel_rules_docker/repositories/deps.bzl: in /path/to/external/io_bazel_rules_docker/repositories/py_repositories.bzl: Label <span class="st">&#39;@rules_python//python/legacy_pip_import:pip.bzl&#39;</span> is invalid because <span class="st">&#39;python/legacy_pip_import&#39;</span> is not a package<span class="kw">;</span> <span class="ex">perhaps</span> you meant to put the colon here: <span class="st">&#39;@rules_python//python:legacy_pip_import/pip.bzl&#39;</span><span class="pp">?</span></span>
<span id="cb15-3"><a href="#cb15-3" aria-hidden="true" tabindex="-1"></a><span class="ex">INFO:</span> Elapsed time: 0.235s</span>
<span id="cb15-4"><a href="#cb15-4" aria-hidden="true" tabindex="-1"></a><span class="ex">INFO:</span> 0 processes.</span>
<span id="cb15-5"><a href="#cb15-5" aria-hidden="true" tabindex="-1"></a><span class="ex">FAILED:</span> Build did NOT complete successfully <span class="er">(</span><span class="ex">0</span> packages loaded<span class="kw">)</span></span>
<span id="cb15-6"><a href="#cb15-6" aria-hidden="true" tabindex="-1"></a>    <span class="ex">Fetching</span> @bazel_gazelle<span class="kw">;</span> <span class="ex">fetching</span></span></code></pre></div>
<p>色々調べたところ，これはどうやら <a href="https://github.com/bazelbuild/rules_docker/issues/1670#issuecomment-734249355">rules<em>docker が依存している rules</em>python v0.1.0 より古い rules_python を利用しようとしてエラーが起きている</a>ようだった． 実は rules<em>haskell が古い rules</em>python v0.0.1 に依存しており，rules<em>docker が最新をダウンロードするよりも先に古いほうの rules</em>python をダウンロードしてしまう（WORKSPACE ファイル内で先に書いてあるので）． なので，rules<em>haskell よりも先に，明示的に rules</em>python v0.1.0 を自分でダウンロードするようにした：</p>
<div class="sourceCode" id="cb16"><pre class="sourceCode py"><code class="sourceCode python"><span id="cb16-1"><a href="#cb16-1" aria-hidden="true" tabindex="-1"></a>http_archive(</span>
<span id="cb16-2"><a href="#cb16-2" aria-hidden="true" tabindex="-1"></a>    name <span class="op">=</span> <span class="st">&quot;rules_python&quot;</span>,</span>
<span id="cb16-3"><a href="#cb16-3" aria-hidden="true" tabindex="-1"></a>    sha256 <span class="op">=</span> <span class="st">&quot;b6d46438523a3ec0f3cead544190ee13223a52f6a6765a29eae7b7cc24cc83a0&quot;</span>,</span>
<span id="cb16-4"><a href="#cb16-4" aria-hidden="true" tabindex="-1"></a>    urls <span class="op">=</span> [<span class="st">&quot;https://github.com/bazelbuild/rules_python/releases/download/0.1.0/rules_python-0.1.0.tar.gz&quot;</span>],</span>
<span id="cb16-5"><a href="#cb16-5" aria-hidden="true" tabindex="-1"></a>)</span>
<span id="cb16-6"><a href="#cb16-6" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb16-7"><a href="#cb16-7" aria-hidden="true" tabindex="-1"></a><span class="co"># Download rules_haskell and make it accessible as &quot;@rules_haskell&quot;.</span></span>
<span id="cb16-8"><a href="#cb16-8" aria-hidden="true" tabindex="-1"></a>http_archive(</span>
<span id="cb16-9"><a href="#cb16-9" aria-hidden="true" tabindex="-1"></a>    name <span class="op">=</span> <span class="st">&quot;rules_haskell&quot;</span>,</span>
<span id="cb16-10"><a href="#cb16-10" aria-hidden="true" tabindex="-1"></a>    ...</span>
<span id="cb16-11"><a href="#cb16-11" aria-hidden="true" tabindex="-1"></a>)</span></code></pre></div>
<p>幸いにも，rules<em>haskell は v0.1.0 の rules</em>python を使っても動作している． 今のところは．</p>
<h3 id="ベースイメージのプル">ベースイメージのプル</h3>
<p>ベースイメージの準備は WORKSPACE に次のように記述する：</p>
<div class="sourceCode" id="cb17"><pre class="sourceCode py"><code class="sourceCode python"><span id="cb17-1"><a href="#cb17-1" aria-hidden="true" tabindex="-1"></a>load(</span>
<span id="cb17-2"><a href="#cb17-2" aria-hidden="true" tabindex="-1"></a>    <span class="st">&quot;@io_bazel_rules_docker//container:container.bzl&quot;</span>,</span>
<span id="cb17-3"><a href="#cb17-3" aria-hidden="true" tabindex="-1"></a>    <span class="st">&quot;container_pull&quot;</span>,</span>
<span id="cb17-4"><a href="#cb17-4" aria-hidden="true" tabindex="-1"></a>)</span>
<span id="cb17-5"><a href="#cb17-5" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb17-6"><a href="#cb17-6" aria-hidden="true" tabindex="-1"></a>container_pull(</span>
<span id="cb17-7"><a href="#cb17-7" aria-hidden="true" tabindex="-1"></a>    name <span class="op">=</span> <span class="st">&quot;haskell_base&quot;</span>,</span>
<span id="cb17-8"><a href="#cb17-8" aria-hidden="true" tabindex="-1"></a>    registry <span class="op">=</span> <span class="st">&quot;registry.hub.docker.com&quot;</span>,</span>
<span id="cb17-9"><a href="#cb17-9" aria-hidden="true" tabindex="-1"></a>    repository <span class="op">=</span> <span class="st">&quot;matsubara0507/ubuntu-for-haskell&quot;</span>,</span>
<span id="cb17-10"><a href="#cb17-10" aria-hidden="true" tabindex="-1"></a>    digest <span class="op">=</span> <span class="st">&quot;sha256:5967c5908a6c79dc4f4253badfe90326aaf4584a3eaa42d9c9ecc5ae8ba4d133&quot;</span>,</span>
<span id="cb17-11"><a href="#cb17-11" aria-hidden="true" tabindex="-1"></a>)</span></code></pre></div>
<p>ちなみにこれは<a href="https://hub.docker.com/r/matsubara0507/ubuntu-for-haskell">自作しているやつ</a>です．</p>
<h3 id="イメージのビルドとプッシュ">イメージのビルドとプッシュ</h3>
<p>ここからは BUILD.bazel の方に記述する． イメージの設定を追加する前に，バイナリをパッケージ化しておこう：</p>
<div class="sourceCode" id="cb18"><pre class="sourceCode py"><code class="sourceCode python"><span id="cb18-1"><a href="#cb18-1" aria-hidden="true" tabindex="-1"></a>load(<span class="st">&quot;@rules_pkg//:pkg.bzl&quot;</span>, <span class="st">&quot;pkg_tar&quot;</span>)</span>
<span id="cb18-2"><a href="#cb18-2" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb18-3"><a href="#cb18-3" aria-hidden="true" tabindex="-1"></a>pkg_tar(</span>
<span id="cb18-4"><a href="#cb18-4" aria-hidden="true" tabindex="-1"></a>    name <span class="op">=</span> <span class="st">&quot;mdium-bin&quot;</span>,</span>
<span id="cb18-5"><a href="#cb18-5" aria-hidden="true" tabindex="-1"></a>    srcs <span class="op">=</span> [<span class="st">&quot;:mdium&quot;</span>],</span>
<span id="cb18-6"><a href="#cb18-6" aria-hidden="true" tabindex="-1"></a>    mode <span class="op">=</span> <span class="st">&quot;0755&quot;</span>,</span>
<span id="cb18-7"><a href="#cb18-7" aria-hidden="true" tabindex="-1"></a>    package_dir <span class="op">=</span> <span class="st">&quot;/usr/local/bin&quot;</span>,</span>
<span id="cb18-8"><a href="#cb18-8" aria-hidden="true" tabindex="-1"></a>)</span></code></pre></div>
<p>こうすることで，バイナリのイメージへの展開先などが指定できて便利だ． イメージのビルドとプッシュの設定はこんな感じだ：</p>
<div class="sourceCode" id="cb19"><pre class="sourceCode py"><code class="sourceCode python"><span id="cb19-1"><a href="#cb19-1" aria-hidden="true" tabindex="-1"></a>load(</span>
<span id="cb19-2"><a href="#cb19-2" aria-hidden="true" tabindex="-1"></a>    <span class="st">&quot;@io_bazel_rules_docker//container:container.bzl&quot;</span>,</span>
<span id="cb19-3"><a href="#cb19-3" aria-hidden="true" tabindex="-1"></a>    <span class="st">&quot;container_image&quot;</span>,</span>
<span id="cb19-4"><a href="#cb19-4" aria-hidden="true" tabindex="-1"></a>    <span class="st">&quot;container_push&quot;</span>,</span>
<span id="cb19-5"><a href="#cb19-5" aria-hidden="true" tabindex="-1"></a>)</span>
<span id="cb19-6"><a href="#cb19-6" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb19-7"><a href="#cb19-7" aria-hidden="true" tabindex="-1"></a>container_image(</span>
<span id="cb19-8"><a href="#cb19-8" aria-hidden="true" tabindex="-1"></a>    name <span class="op">=</span> <span class="st">&quot;mdium-image&quot;</span>,</span>
<span id="cb19-9"><a href="#cb19-9" aria-hidden="true" tabindex="-1"></a>    base <span class="op">=</span> <span class="st">&quot;@haskell_base//image&quot;</span>,</span>
<span id="cb19-10"><a href="#cb19-10" aria-hidden="true" tabindex="-1"></a>    tars <span class="op">=</span> [<span class="st">&quot;:mdium-bin&quot;</span>],</span>
<span id="cb19-11"><a href="#cb19-11" aria-hidden="true" tabindex="-1"></a>    entrypoint <span class="op">=</span> [<span class="st">&quot;/usr/local/bin/mdium&quot;</span>],</span>
<span id="cb19-12"><a href="#cb19-12" aria-hidden="true" tabindex="-1"></a>)</span>
<span id="cb19-13"><a href="#cb19-13" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb19-14"><a href="#cb19-14" aria-hidden="true" tabindex="-1"></a>container_push(</span>
<span id="cb19-15"><a href="#cb19-15" aria-hidden="true" tabindex="-1"></a>    name <span class="op">=</span> <span class="st">&quot;push&quot;</span>,</span>
<span id="cb19-16"><a href="#cb19-16" aria-hidden="true" tabindex="-1"></a>    <span class="bu">format</span> <span class="op">=</span> <span class="st">&quot;Docker&quot;</span>,</span>
<span id="cb19-17"><a href="#cb19-17" aria-hidden="true" tabindex="-1"></a>    image <span class="op">=</span> <span class="st">&quot;:mdium-image&quot;</span>,</span>
<span id="cb19-18"><a href="#cb19-18" aria-hidden="true" tabindex="-1"></a>    registry <span class="op">=</span> <span class="st">&quot;ghcr.io&quot;</span>,</span>
<span id="cb19-19"><a href="#cb19-19" aria-hidden="true" tabindex="-1"></a>    repository <span class="op">=</span> <span class="st">&quot;matsubara0507/mdium&quot;</span>,</span>
<span id="cb19-20"><a href="#cb19-20" aria-hidden="true" tabindex="-1"></a>)</span></code></pre></div>
<p>これで <code>bazelisk run //:push</code> で GitHub Container Registry へプッシュできる（先に <code>docker login</code> などの設定は済んでいる前提です）． ただ問題が1つある． 実はベースイメージは ubuntu だが，バイナリはビルド環境のものになっている． 例えば，Mac でこのコマンドを実行してしまうと，プッシュされたイメージでの <code>docker run</code> は次のようなエラーとなる：</p>
<div class="sourceCode" id="cb20"><pre class="sourceCode sh"><code class="sourceCode bash"><span id="cb20-1"><a href="#cb20-1" aria-hidden="true" tabindex="-1"></a><span class="ex">$</span> docker run <span class="at">--rm</span> bazel:mdium-image</span>
<span id="cb20-2"><a href="#cb20-2" aria-hidden="true" tabindex="-1"></a><span class="ex">standard_init_linux.go:211:</span> exec user process caused <span class="st">&quot;exec format error&quot;</span></span></code></pre></div>
<p><a href="https://github.com/tweag/rules_haskell/issues/32">rules_haskell はどうやらまだ，クロスコンパイルをサポートしていない</a>ようなのでこれは仕方ない（そもそも Haskell のクロスコンパイルは難しい）． Haskell Stack なら Docker インテグレーションを使って割と簡単にできるが，，，どうしたものか． ということで，GitHub Actions に頼ることにした．</p>
<h3 id="github-actions-からプッシュする">GitHub Actions からプッシュする</h3>
<p>GitHub Actions の ubuntu イメージでイメージのビルドとプッシュをしてしまえば，正しい Docker イメージを構築できそうだ． ということで，その設定を次のように追記する：</p>
<div class="sourceCode" id="cb21"><pre class="sourceCode yaml"><code class="sourceCode yaml"><span id="cb21-1"><a href="#cb21-1" aria-hidden="true" tabindex="-1"></a><span class="fu">name</span><span class="kw">:</span><span class="at"> Build Application</span></span>
<span id="cb21-2"><a href="#cb21-2" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb21-3"><a href="#cb21-3" aria-hidden="true" tabindex="-1"></a><span class="fu">on</span><span class="kw">:</span></span>
<span id="cb21-4"><a href="#cb21-4" aria-hidden="true" tabindex="-1"></a><span class="at">  </span><span class="fu">pull_request</span><span class="kw">:</span><span class="at"> </span><span class="ch">null</span></span>
<span id="cb21-5"><a href="#cb21-5" aria-hidden="true" tabindex="-1"></a><span class="at">  </span><span class="fu">push</span><span class="kw">:</span></span>
<span id="cb21-6"><a href="#cb21-6" aria-hidden="true" tabindex="-1"></a><span class="at">    </span><span class="fu">branches</span><span class="kw">:</span></span>
<span id="cb21-7"><a href="#cb21-7" aria-hidden="true" tabindex="-1"></a><span class="at">    </span><span class="kw">-</span><span class="at"> master</span></span>
<span id="cb21-8"><a href="#cb21-8" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb21-9"><a href="#cb21-9" aria-hidden="true" tabindex="-1"></a><span class="fu">jobs</span><span class="kw">:</span></span>
<span id="cb21-10"><a href="#cb21-10" aria-hidden="true" tabindex="-1"></a><span class="at">  </span><span class="fu">build</span><span class="kw">:</span></span>
<span id="cb21-11"><a href="#cb21-11" aria-hidden="true" tabindex="-1"></a><span class="at">    ...</span></span>
<span id="cb21-12"><a href="#cb21-12" aria-hidden="true" tabindex="-1"></a><span class="at">    </span><span class="fu">steps</span><span class="kw">:</span></span>
<span id="cb21-13"><a href="#cb21-13" aria-hidden="true" tabindex="-1"></a><span class="at">    ...</span></span>
<span id="cb21-14"><a href="#cb21-14" aria-hidden="true" tabindex="-1"></a><span class="at">    </span><span class="kw">-</span><span class="at"> </span><span class="fu">name</span><span class="kw">:</span><span class="at"> Build image</span></span>
<span id="cb21-15"><a href="#cb21-15" aria-hidden="true" tabindex="-1"></a><span class="at">      </span><span class="fu">run</span><span class="kw">:</span><span class="at"> bazelisk build //:mdium-image</span></span>
<span id="cb21-16"><a href="#cb21-16" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb21-17"><a href="#cb21-17" aria-hidden="true" tabindex="-1"></a><span class="at">    </span><span class="kw">-</span><span class="at"> </span><span class="fu">name</span><span class="kw">:</span><span class="at"> Setup QEMU</span><span class="co"> # ここはいらないかも</span></span>
<span id="cb21-18"><a href="#cb21-18" aria-hidden="true" tabindex="-1"></a><span class="at">      </span><span class="fu">uses</span><span class="kw">:</span><span class="at"> docker/setup-qemu-action@master</span></span>
<span id="cb21-19"><a href="#cb21-19" aria-hidden="true" tabindex="-1"></a><span class="at">      </span><span class="fu">with</span><span class="kw">:</span></span>
<span id="cb21-20"><a href="#cb21-20" aria-hidden="true" tabindex="-1"></a><span class="at">        </span><span class="fu">platforms</span><span class="kw">:</span><span class="at"> all</span></span>
<span id="cb21-21"><a href="#cb21-21" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb21-22"><a href="#cb21-22" aria-hidden="true" tabindex="-1"></a><span class="at">    </span><span class="kw">-</span><span class="at"> </span><span class="fu">name</span><span class="kw">:</span><span class="at"> Login to GitHub Container Registry</span></span>
<span id="cb21-23"><a href="#cb21-23" aria-hidden="true" tabindex="-1"></a><span class="at">      </span><span class="fu">uses</span><span class="kw">:</span><span class="at"> docker/login-action@v1</span></span>
<span id="cb21-24"><a href="#cb21-24" aria-hidden="true" tabindex="-1"></a><span class="at">      </span><span class="fu">with</span><span class="kw">:</span></span>
<span id="cb21-25"><a href="#cb21-25" aria-hidden="true" tabindex="-1"></a><span class="at">        </span><span class="fu">registry</span><span class="kw">:</span><span class="at"> ghcr.io</span></span>
<span id="cb21-26"><a href="#cb21-26" aria-hidden="true" tabindex="-1"></a><span class="at">        </span><span class="fu">username</span><span class="kw">:</span><span class="at"> matsubara0507</span></span>
<span id="cb21-27"><a href="#cb21-27" aria-hidden="true" tabindex="-1"></a><span class="at">        </span><span class="fu">password</span><span class="kw">:</span><span class="at"> ${{ secrets.CR_PAT }}</span></span>
<span id="cb21-28"><a href="#cb21-28" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb21-29"><a href="#cb21-29" aria-hidden="true" tabindex="-1"></a><span class="at">    </span><span class="kw">-</span><span class="at"> </span><span class="fu">name</span><span class="kw">:</span><span class="at"> Push image</span></span>
<span id="cb21-30"><a href="#cb21-30" aria-hidden="true" tabindex="-1"></a><span class="at">      </span><span class="fu">if</span><span class="kw">:</span><span class="at"> ${{ github.event_name != &#39;pull_request&#39; }}</span></span>
<span id="cb21-31"><a href="#cb21-31" aria-hidden="true" tabindex="-1"></a><span class="at">      </span><span class="fu">run</span><span class="kw">:</span><span class="at"> bazelisk run //:push</span></span></code></pre></div>
<p><a href="https://github.com/docker/login-action"><code>docker/login-action</code></a> を使うことで，様々なレジストリの <code>docker login</code> を済ましてくれる． それ以外はただシンプルに bazel コマンドを実行しているだけだ．</p>
<h2 id="おしまい">おしまい</h2>
<p>Bazel を利用することで，Haskell コードのビルドの他に Docker イメージのビルドなどの設定も同じビルドツールで管理できるようになります． 正直，Docker だけだとあまりメリットを感じませんが，例えば Web アプリケーションを作るためにフロント用言語（例えば TypeScript や Elm など）も Bazel でビルドしたり，k8s でのデプロイも Bazel で行えるようになったりすればメリットがどんどん大きくなってきますね．</p>
<p>しかし，Bazel の「やってみた・使ってみた」記事は少なく，Haskell 関連や日本語記事となると本当にちょっとしかありません． ので，できるだけ増やして行こうかなーっていう野心です．</p>]]></content>
    </entry>
    <entry>
        <title>Hacktoberfest 2020 なので PR を4つ出してみた</title>
        <link href="https://matsubara0507.github.ioposts/2020-10-27-join-hacktoberfest-2020.html"/>
        <id>https://matsubara0507.github.ioposts/2020-10-27-join-hacktoberfest-2020.html</id>
        <updated>2020-10-27T00:00:SZ</updated>
        <category term="event"/>
        <category term="Haskell"/>
        <category term="Egison"/>
        <summary></summary>
        <content type="html"><![CDATA[<p>Hacktoberfest 2020 がきたので今年もPRを出してきました．</p>
<p><img src="/assets/join-hacktoberfest-2020/status.jpg" /></p>
<h2 id="hacktoberfest-2020">Hacktoberfest 2020</h2>
<p>例年と異なり，PR のカウントの仕方が（途中から）変わった． もともとは Public なリポジトリに対する PR ならなんでもよかったが，途中から次のいずれかのみカウントされるようになった：</p>
<ul>
<li><code>hacktoberfest</code> topic のついた Public リポジトリに対する PR で，Approve か Merge されたもの</li>
<li>Public リポジトリの PR で <code>hacktoberfest-accepted</code> ラベルがついたもの</li>
</ul>
<p>普段使っているパッケージのリポジトリなどには軒並み <code>hacktoberfest</code> topic がついていなかったので，ついてるリポジトリを1つ選んで献上しようかなと考えた． <code>hacktoberfest</code> topic と Haskell で検索したところ，昔から興味のあった Egison 言語にも <code>hacktoberfest</code> topic がついていたので，これにコミットすることにした．</p>
<h3 id="egison">Egison</h3>
<p><a href="https://github.com/egison/egison">Egison</a> はパターンマッチ指向プログラミング言語というもので，他のプログラミング言語とは比べ物にならないほど強力なパターンマッチ機能を持っている：</p>
<div class="sourceCode" id="cb1"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span id="cb1-1"><a href="#cb1-1" aria-hidden="true" tabindex="-1"></a><span class="co">-- 素数の無限リストから全ての双子素数をパターンマッチにより抽出</span></span>
<span id="cb1-2"><a href="#cb1-2" aria-hidden="true" tabindex="-1"></a>def twinPrimes <span class="op">:=</span></span>
<span id="cb1-3"><a href="#cb1-3" aria-hidden="true" tabindex="-1"></a>  matchAll primes as list integer with</span>
<span id="cb1-4"><a href="#cb1-4" aria-hidden="true" tabindex="-1"></a>    <span class="op">|</span> _ <span class="op">++</span> <span class="op">$</span><span class="ot">p ::</span> <span class="op">#</span>(p <span class="op">+</span> <span class="dv">2</span>)<span class="ot"> ::</span> _ <span class="ot">-&gt;</span> (p, p <span class="op">+</span> <span class="dv">2</span>)</span>
<span id="cb1-5"><a href="#cb1-5" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb1-6"><a href="#cb1-6" aria-hidden="true" tabindex="-1"></a><span class="co">-- 最初の5個の双子素数を列挙</span></span>
<span id="cb1-7"><a href="#cb1-7" aria-hidden="true" tabindex="-1"></a><span class="fu">take</span> <span class="dv">5</span> twinPrimes</span>
<span id="cb1-8"><a href="#cb1-8" aria-hidden="true" tabindex="-1"></a><span class="co">-- =&gt; [(3, 5), (5, 7), (11, 13), (17, 19), (29, 31)]</span></span></code></pre></div>
<p>これは <a href="https://www.egison.org">Egison の公式サイト</a>に載っている例だ． 素数の無限リスト <code>primes</code> 自体は標準パッケージに（なぜか）入っているものだ． 双子素数は差が 2 しかない素数の組である．</p>
<p>最近だと数式処理などにも力を入れているようだ．</p>
<h3 id="出した-pr">出した PR</h3>
<ol>
<li><a href="https://github.com/egison/egison/pull/255">コマンドオプションのテスト</a></li>
<li><a href="https://github.com/egison/egison/pull/258">ドキュメントの修正（<code>def</code> キーワードの追加）</a></li>
<li><a href="https://github.com/egison/egison/pull/260">中置関数の導入</a></li>
<li><a href="https://github.com/egison/egison/pull/261">テストの個別実行を可能にする</a></li>
</ol>
<h2 id="1-コマンドオプションのテスト">1. コマンドオプションのテスト</h2>
<p>これは <code>good first issue</code> としてすでにあったやつだ．</p>
<p><a href="https://github.com/egison/egison/issues/244"><img src="/assets/join-hacktoberfest-2020/test-cli-opts-issue.jpg" /></a></p>
<p>どうしようかなと考えた結果 <a href="http://hackage.haskell.org/package/process-1.6.10.0/docs/System-Process.html#v:readProcess"><code>readProcess</code></a> を使うことにした． <code>stack exec -- egison</code> をこの関数で実行して，その出力が意図通りかをテストする：</p>
<div class="sourceCode" id="cb2"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span id="cb2-1"><a href="#cb2-1" aria-hidden="true" tabindex="-1"></a><span class="kw">import</span> <span class="dt">Test.Framework</span>                 (defaultMain)</span>
<span id="cb2-2"><a href="#cb2-2" aria-hidden="true" tabindex="-1"></a><span class="kw">import</span> <span class="dt">Test.Framework.Providers.HUnit</span> (hUnitTestToTests)</span>
<span id="cb2-3"><a href="#cb2-3" aria-hidden="true" tabindex="-1"></a><span class="kw">import</span> <span class="dt">Test.HUnit</span></span>
<span id="cb2-4"><a href="#cb2-4" aria-hidden="true" tabindex="-1"></a><span class="kw">import</span> <span class="dt">System.Process</span>                 (readProcess)</span>
<span id="cb2-5"><a href="#cb2-5" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb2-6"><a href="#cb2-6" aria-hidden="true" tabindex="-1"></a>main <span class="ot">=</span> defaultMain <span class="op">.</span> hUnitTestToTests <span class="op">.</span> test <span class="op">$</span> <span class="dt">TestList</span></span>
<span id="cb2-7"><a href="#cb2-7" aria-hidden="true" tabindex="-1"></a>    [ <span class="dt">TestLabel</span> <span class="st">&quot;eval option&quot;</span> <span class="op">.</span> <span class="dt">TestCase</span> <span class="op">$</span> assertEgisonCmd</span>
<span id="cb2-8"><a href="#cb2-8" aria-hidden="true" tabindex="-1"></a>        <span class="st">&quot;[[], [1], [1, 2], [1, 2, 3]]\n&quot;</span></span>
<span id="cb2-9"><a href="#cb2-9" aria-hidden="true" tabindex="-1"></a>        [<span class="st">&quot;--eval&quot;</span>, <span class="st">&quot;matchAll [1,2,3] as list something with $x ++ _ -&gt; x&quot;</span>]</span>
<span id="cb2-10"><a href="#cb2-10" aria-hidden="true" tabindex="-1"></a>        <span class="st">&quot;&quot;</span></span>
<span id="cb2-11"><a href="#cb2-11" aria-hidden="true" tabindex="-1"></a>    ]</span>
<span id="cb2-12"><a href="#cb2-12" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb2-13"><a href="#cb2-13" aria-hidden="true" tabindex="-1"></a>assertEgisonCmd</span>
<span id="cb2-14"><a href="#cb2-14" aria-hidden="true" tabindex="-1"></a><span class="ot">  ::</span> <span class="dt">String</span>   <span class="co">-- The expected value</span></span>
<span id="cb2-15"><a href="#cb2-15" aria-hidden="true" tabindex="-1"></a>  <span class="ot">-&gt;</span> [<span class="dt">String</span>] <span class="co">-- any arguments for egison command</span></span>
<span id="cb2-16"><a href="#cb2-16" aria-hidden="true" tabindex="-1"></a>  <span class="ot">-&gt;</span> <span class="dt">String</span>   <span class="co">-- standard input for egison command</span></span>
<span id="cb2-17"><a href="#cb2-17" aria-hidden="true" tabindex="-1"></a>  <span class="ot">-&gt;</span> <span class="dt">Assertion</span></span>
<span id="cb2-18"><a href="#cb2-18" aria-hidden="true" tabindex="-1"></a>assertEgisonCmd expected args input <span class="ot">=</span> <span class="kw">do</span></span>
<span id="cb2-19"><a href="#cb2-19" aria-hidden="true" tabindex="-1"></a>  actual <span class="ot">&lt;-</span> readProcess <span class="st">&quot;stack&quot;</span> (<span class="st">&quot;exec&quot;</span> <span class="op">:</span> <span class="st">&quot;--&quot;</span> <span class="op">:</span> <span class="st">&quot;egison&quot;</span> <span class="op">:</span> args) input</span>
<span id="cb2-20"><a href="#cb2-20" aria-hidden="true" tabindex="-1"></a>  assertEqual <span class="st">&quot;&quot;</span> expected actual</span></code></pre></div>
<p>こういうことをやってくれるライブラリもあるかもしれないが，あまり依存パッケージを増やすのも嫌だったので既に使われてるパッケージで実現できる方法にした． ちなみに，<code>egison</code> コマンドは <code>--eval</code> オプションなどを使わない場合はREPLが起動する：</p>
<pre><code>$ stack exec -- egison
Egison Version 4.1.1
https://www.egison.org
Welcome to Egison Interpreter!
&gt; 1 + 1
2
&gt;
Leaving Egison Interpreter.</code></pre>
<p><code>readProcess</code> は標準入力も与えることができるので，これを使ってREPLを介したテストも可能だ：</p>
<div class="sourceCode" id="cb4"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span id="cb4-1"><a href="#cb4-1" aria-hidden="true" tabindex="-1"></a><span class="kw">import</span> <span class="dt">Data.Version</span>    (showVersion)</span>
<span id="cb4-2"><a href="#cb4-2" aria-hidden="true" tabindex="-1"></a><span class="kw">import</span> <span class="dt">Language.Egison</span> (version)</span>
<span id="cb4-3"><a href="#cb4-3" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb4-4"><a href="#cb4-4" aria-hidden="true" tabindex="-1"></a><span class="op">...</span></span>
<span id="cb4-5"><a href="#cb4-5" aria-hidden="true" tabindex="-1"></a>    [ <span class="dt">TestLabel</span> <span class="st">&quot;load-file option&quot;</span> <span class="op">.</span> <span class="dt">TestCase</span> <span class="op">$</span> assertEgisonCmd</span>
<span id="cb4-6"><a href="#cb4-6" aria-hidden="true" tabindex="-1"></a>        (interpreter <span class="st">&quot;1\n&quot;</span>)</span>
<span id="cb4-7"><a href="#cb4-7" aria-hidden="true" tabindex="-1"></a>        [<span class="st">&quot;--load-file&quot;</span>, <span class="st">&quot;test/fixture/a.egi&quot;</span>]</span>
<span id="cb4-8"><a href="#cb4-8" aria-hidden="true" tabindex="-1"></a>        <span class="st">&quot;x&quot;</span></span>
<span id="cb4-9"><a href="#cb4-9" aria-hidden="true" tabindex="-1"></a>    ]</span>
<span id="cb4-10"><a href="#cb4-10" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb4-11"><a href="#cb4-11" aria-hidden="true" tabindex="-1"></a><span class="ot">interpreter ::</span> <span class="dt">String</span> <span class="ot">-&gt;</span> <span class="dt">String</span></span>
<span id="cb4-12"><a href="#cb4-12" aria-hidden="true" tabindex="-1"></a>interpreter output <span class="ot">=</span> <span class="fu">concat</span></span>
<span id="cb4-13"><a href="#cb4-13" aria-hidden="true" tabindex="-1"></a>  [ <span class="st">&quot;Egison Version &quot;</span>, showVersion version, <span class="st">&quot;\n&quot;</span></span>
<span id="cb4-14"><a href="#cb4-14" aria-hidden="true" tabindex="-1"></a>  , <span class="st">&quot;https://www.egison.org\n&quot;</span></span>
<span id="cb4-15"><a href="#cb4-15" aria-hidden="true" tabindex="-1"></a>  , <span class="st">&quot;Welcome to Egison Interpreter!\n&quot;</span></span>
<span id="cb4-16"><a href="#cb4-16" aria-hidden="true" tabindex="-1"></a>  , <span class="st">&quot;&gt; &quot;</span>, output</span>
<span id="cb4-17"><a href="#cb4-17" aria-hidden="true" tabindex="-1"></a>  , <span class="st">&quot;&gt; Leaving Egison Interpreter.\n&quot;</span></span>
<span id="cb4-18"><a href="#cb4-18" aria-hidden="true" tabindex="-1"></a>  ]</span></code></pre></div>
<h2 id="2-ドキュメントの修正def-キーワードの追加">2. ドキュメントの修正（<code>def</code> キーワードの追加）</h2>
<p>コマンドオプションのテストケースは <a href="https://egison.readthedocs.io/en/latest/reference/command-line-options.html">Issue にあったドキュメント</a>を参考に実装した． そのドキュメントの通りに実装したらコンパイルエラーになった：</p>
<div class="sourceCode" id="cb5"><pre class="sourceCode sh"><code class="sourceCode bash"><span id="cb5-1"><a href="#cb5-1" aria-hidden="true" tabindex="-1"></a><span class="ex">$</span> stack exec <span class="at">--</span> egison <span class="at">-l</span> test/fixture/name-of-file-to-load.egi</span>
<span id="cb5-2"><a href="#cb5-2" aria-hidden="true" tabindex="-1"></a><span class="ex">Parse</span> error at: egison:1:3:</span>
<span id="cb5-3"><a href="#cb5-3" aria-hidden="true" tabindex="-1"></a>  <span class="kw">|</span></span>
<span id="cb5-4"><a href="#cb5-4" aria-hidden="true" tabindex="-1"></a><span class="ex">1</span> <span class="kw">|</span> <span class="ex">x</span> := 1</span>
<span id="cb5-5"><a href="#cb5-5" aria-hidden="true" tabindex="-1"></a>  <span class="kw">|</span>   <span class="ex">^</span></span>
<span id="cb5-6"><a href="#cb5-6" aria-hidden="true" tabindex="-1"></a><span class="ex">unexpected</span> <span class="st">&#39;:&#39;</span></span>
<span id="cb5-7"><a href="#cb5-7" aria-hidden="true" tabindex="-1"></a><span class="ex">expecting</span> <span class="st">&quot;...&quot;</span>, <span class="st">&quot;where&quot;</span>, atomic expression, end of input, index, or infix</span></code></pre></div>
<p>これは，Egison のバージョン4.1.0から変わった記法で，変数や関数定義のときに <code>def</code> キーワードが必要になったのだ． コマンドオプションのテスト追加PRで「ついでにこのPRでドキュメントも修正しますか？それとも別で出した方が良いですか？」と聞いたところ「余力があるならぜひ別で良いので出してください」と返って来たので別PRで出した次第．</p>
<h2 id="3-中置関数の導入">3. 中置関数の導入</h2>
<p>Haskell に関数の中置記法がある． 任意の関数に対して，バッククォートで囲ってあげることで二項演算子のように使うことができる：</p>
<div class="sourceCode" id="cb6"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span id="cb6-1"><a href="#cb6-1" aria-hidden="true" tabindex="-1"></a><span class="ot">add ::</span> <span class="dt">Int</span> <span class="ot">-&gt;</span> <span class="dt">Int</span> <span class="ot">-&gt;</span> <span class="dt">Int</span></span>
<span id="cb6-2"><a href="#cb6-2" aria-hidden="true" tabindex="-1"></a>add x y <span class="ot">=</span> x <span class="op">+</span> y</span>
<span id="cb6-3"><a href="#cb6-3" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb6-4"><a href="#cb6-4" aria-hidden="true" tabindex="-1"></a>main <span class="ot">=</span> <span class="fu">print</span> <span class="op">$</span> <span class="dv">1</span> <span class="ot">`add`</span> <span class="dv">2</span> <span class="co">-- =&gt; display `3`</span></span></code></pre></div>
<p>これを Egison にも導入して欲しいという Issue が既にあった：</p>
<p><a href="https://github.com/egison/egison/issues/135"><img src="/assets/join-hacktoberfest-2020/infix-func-issue.jpg" /></a></p>
<p>他の出したPRと異なりガッツリ処理系をいじる必要がある． 言わずもがな，一番難しかった．</p>
<p>Issue には注意点として，右に閉じバッククォートがない場合は <code>QuoteSymbolExpr</code> となると書いてあった（おそらくLispのマクロ由来の逆クォート）． 試しに，現状の Egison で中置関数を記述してみると：</p>
<div class="sourceCode" id="cb7"><pre class="sourceCode sh"><code class="sourceCode bash"><span id="cb7-1"><a href="#cb7-1" aria-hidden="true" tabindex="-1"></a><span class="ex">$</span> stack exec <span class="at">--</span> egison</span>
<span id="cb7-2"><a href="#cb7-2" aria-hidden="true" tabindex="-1"></a><span class="ex">Egison</span> Version 4.1.1</span>
<span id="cb7-3"><a href="#cb7-3" aria-hidden="true" tabindex="-1"></a><span class="ex">https://www.egison.org</span></span>
<span id="cb7-4"><a href="#cb7-4" aria-hidden="true" tabindex="-1"></a><span class="ex">Welcome</span> to Egison Interpreter!</span>
<span id="cb7-5"><a href="#cb7-5" aria-hidden="true" tabindex="-1"></a><span class="op">&gt;</span> 1 <span class="ex">+</span> 2</span>
<span id="cb7-6"><a href="#cb7-6" aria-hidden="true" tabindex="-1"></a><span class="ex">3</span></span>
<span id="cb7-7"><a href="#cb7-7" aria-hidden="true" tabindex="-1"></a><span class="op">&gt;</span> def <span class="ex">add</span> x y := x + y</span>
<span id="cb7-8"><a href="#cb7-8" aria-hidden="true" tabindex="-1"></a><span class="op">&gt;</span> add <span class="ex">1</span> 2</span>
<span id="cb7-9"><a href="#cb7-9" aria-hidden="true" tabindex="-1"></a><span class="ex">3</span></span>
<span id="cb7-10"><a href="#cb7-10" aria-hidden="true" tabindex="-1"></a><span class="op">&gt;</span> 1 <span class="kw">`</span><span class="ex">add</span><span class="kw">`</span> 2</span>
<span id="cb7-11"><a href="#cb7-11" aria-hidden="true" tabindex="-1"></a><span class="ex">Parse</span> error at: egison:1:8:</span>
<span id="cb7-12"><a href="#cb7-12" aria-hidden="true" tabindex="-1"></a>  <span class="kw">|</span></span>
<span id="cb7-13"><a href="#cb7-13" aria-hidden="true" tabindex="-1"></a><span class="ex">1</span> <span class="kw">|</span> <span class="ex">1</span> <span class="kw">`</span><span class="ex">add</span><span class="kw">`</span> 2</span>
<span id="cb7-14"><a href="#cb7-14" aria-hidden="true" tabindex="-1"></a>  <span class="kw">|</span>        <span class="ex">^^</span></span>
<span id="cb7-15"><a href="#cb7-15" aria-hidden="true" tabindex="-1"></a><span class="ex">unexpected</span> <span class="st">&quot; 2&quot;</span></span>
<span id="cb7-16"><a href="#cb7-16" aria-hidden="true" tabindex="-1"></a><span class="ex">expecting</span> atomic expression</span></code></pre></div>
<p>もちろんダメだった．</p>
<h3 id="演算子のパーサーはどこか">演算子のパーサーはどこか</h3>
<p>Egison はパーサーに megaparsec を利用しており，演算子のパーサーは次のようになっている：</p>
<div class="sourceCode" id="cb8"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span id="cb8-1"><a href="#cb8-1" aria-hidden="true" tabindex="-1"></a><span class="kw">type</span> <span class="dt">Parser</span> <span class="ot">=</span> <span class="dt">ParsecT</span> <span class="dt">CustomError</span> <span class="dt">String</span> <span class="dt">RuntimeM</span></span>
<span id="cb8-2"><a href="#cb8-2" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb8-3"><a href="#cb8-3" aria-hidden="true" tabindex="-1"></a><span class="ot">opExpr ::</span> <span class="dt">Parser</span> <span class="dt">Expr</span></span>
<span id="cb8-4"><a href="#cb8-4" aria-hidden="true" tabindex="-1"></a>opExpr <span class="ot">=</span> <span class="kw">do</span></span>
<span id="cb8-5"><a href="#cb8-5" aria-hidden="true" tabindex="-1"></a>  ops <span class="ot">&lt;-</span> gets exprOps</span>
<span id="cb8-6"><a href="#cb8-6" aria-hidden="true" tabindex="-1"></a>  makeExprParser exprInOp (makeExprTable ops)</span>
<span id="cb8-7"><a href="#cb8-7" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb8-8"><a href="#cb8-8" aria-hidden="true" tabindex="-1"></a><span class="ot">exprInOp ::</span> <span class="dt">Parser</span> <span class="dt">Expr</span></span>
<span id="cb8-9"><a href="#cb8-9" aria-hidden="true" tabindex="-1"></a>exprInOp <span class="ot">=</span> <span class="op">...</span></span>
<span id="cb8-10"><a href="#cb8-10" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb8-11"><a href="#cb8-11" aria-hidden="true" tabindex="-1"></a><span class="ot">makeExprTable ::</span> [<span class="dt">Op</span>] <span class="ot">-&gt;</span> [[<span class="dt">Operator</span> <span class="dt">Parser</span> <span class="dt">Expr</span>]]</span>
<span id="cb8-12"><a href="#cb8-12" aria-hidden="true" tabindex="-1"></a>makeExprTable ops <span class="ot">=</span></span>
<span id="cb8-13"><a href="#cb8-13" aria-hidden="true" tabindex="-1"></a>  <span class="fu">map</span> (<span class="fu">map</span> toOperator) (groupBy (\x y <span class="ot">-&gt;</span> priority x <span class="op">==</span> priority y) ops)</span>
<span id="cb8-14"><a href="#cb8-14" aria-hidden="true" tabindex="-1"></a>  <span class="kw">where</span></span>
<span id="cb8-15"><a href="#cb8-15" aria-hidden="true" tabindex="-1"></a>    <span class="co">-- 実装は割愛</span></span>
<span id="cb8-16"><a href="#cb8-16" aria-hidden="true" tabindex="-1"></a><span class="ot">    unary ::</span> <span class="dt">String</span> <span class="ot">-&gt;</span> <span class="dt">Parser</span> (<span class="dt">Expr</span> <span class="ot">-&gt;</span> <span class="dt">Expr</span>)</span>
<span id="cb8-17"><a href="#cb8-17" aria-hidden="true" tabindex="-1"></a><span class="ot">    binary ::</span> <span class="dt">Op</span> <span class="ot">-&gt;</span> <span class="dt">Parser</span> (<span class="dt">Expr</span> <span class="ot">-&gt;</span> <span class="dt">Expr</span> <span class="ot">-&gt;</span> <span class="dt">Expr</span>)</span>
<span id="cb8-18"><a href="#cb8-18" aria-hidden="true" tabindex="-1"></a><span class="ot">    toOperator ::</span> <span class="dt">Op</span> <span class="ot">-&gt;</span> <span class="dt">Operator</span> <span class="dt">Parser</span> <span class="dt">Expr</span></span></code></pre></div>
<p><code>makeExprParser</code> は <a href="https://hackage.haskell.org/package/parser-combinators-1.2.1/docs/Control-Monad-Combinators-Expr.html#v:makeExprParser">megaparsec（が依存している parser-combinators パッケージ）の関数</a>である．</p>
<div class="sourceCode" id="cb9"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span id="cb9-1"><a href="#cb9-1" aria-hidden="true" tabindex="-1"></a>makeExprParser</span>
<span id="cb9-2"><a href="#cb9-2" aria-hidden="true" tabindex="-1"></a><span class="ot">  ::</span> <span class="dt">MonadPlus</span> m	 </span>
<span id="cb9-3"><a href="#cb9-3" aria-hidden="true" tabindex="-1"></a>  <span class="ot">=&gt;</span> m a              <span class="co">-- 二項演算子の引数に当たる部分のパーサー</span></span>
<span id="cb9-4"><a href="#cb9-4" aria-hidden="true" tabindex="-1"></a>  <span class="ot">-&gt;</span> [[<span class="dt">Operator</span> m a]] <span class="co">-- 演算子のパーサーのテーブル</span></span>
<span id="cb9-5"><a href="#cb9-5" aria-hidden="true" tabindex="-1"></a>  <span class="ot">-&gt;</span> m a</span></code></pre></div>
<p>2引数目の <code>[[Operator m a]]</code> が今回のキモだ． <code>Operator m a</code> は演算子のパーサーで，<code>[[Operator m a]]</code> は演算子の優先順位（<code>priority</code>）の高い順に <code>Operator m a</code> のリストが並んでいる． <code>gets exprOps</code> は <code>Parser</code> が保持している演算子（<code>Op</code> 型）の集合を返している（<code>ReaderT</code> で保持している）：</p>
<div class="sourceCode" id="cb10"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span id="cb10-1"><a href="#cb10-1" aria-hidden="true" tabindex="-1"></a><span class="kw">data</span> <span class="dt">Op</span></span>
<span id="cb10-2"><a href="#cb10-2" aria-hidden="true" tabindex="-1"></a>  <span class="ot">=</span> <span class="dt">Op</span> {<span class="ot"> repr     ::</span> <span class="dt">String</span>  <span class="co">-- representation</span></span>
<span id="cb10-3"><a href="#cb10-3" aria-hidden="true" tabindex="-1"></a>       ,<span class="ot"> priority ::</span> <span class="dt">Int</span></span>
<span id="cb10-4"><a href="#cb10-4" aria-hidden="true" tabindex="-1"></a>       ,<span class="ot"> assoc    ::</span> <span class="dt">Assoc</span></span>
<span id="cb10-5"><a href="#cb10-5" aria-hidden="true" tabindex="-1"></a>       ,<span class="ot"> isWedge  ::</span> <span class="dt">Bool</span>    <span class="co">-- これはよくわからない</span></span>
<span id="cb10-6"><a href="#cb10-6" aria-hidden="true" tabindex="-1"></a>       }</span>
<span id="cb10-7"><a href="#cb10-7" aria-hidden="true" tabindex="-1"></a>  <span class="kw">deriving</span> (<span class="dt">Eq</span>, <span class="dt">Ord</span>, <span class="dt">Show</span>)</span>
<span id="cb10-8"><a href="#cb10-8" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb10-9"><a href="#cb10-9" aria-hidden="true" tabindex="-1"></a><span class="kw">data</span> <span class="dt">Assoc</span></span>
<span id="cb10-10"><a href="#cb10-10" aria-hidden="true" tabindex="-1"></a>  <span class="ot">=</span> <span class="dt">InfixL</span></span>
<span id="cb10-11"><a href="#cb10-11" aria-hidden="true" tabindex="-1"></a>  <span class="op">|</span> <span class="dt">InfixR</span></span>
<span id="cb10-12"><a href="#cb10-12" aria-hidden="true" tabindex="-1"></a>  <span class="op">|</span> <span class="dt">InfixN</span></span>
<span id="cb10-13"><a href="#cb10-13" aria-hidden="true" tabindex="-1"></a>  <span class="op">|</span> <span class="dt">Prefix</span></span>
<span id="cb10-14"><a href="#cb10-14" aria-hidden="true" tabindex="-1"></a>  <span class="kw">deriving</span> (<span class="dt">Eq</span>, <span class="dt">Ord</span>)</span></code></pre></div>
<p>そして，<code>makeExprTable</code> はこの演算子のリストをもらって，<code>makeExprParser</code> 関数に渡すための演算子パーサー群を生成するための関数だ．</p>
<h3 id="中置関数のパーサーを作る">中置関数のパーサーを作る</h3>
<p>最初は愚直に，関数定義のたびに演算子（<code>Op</code> 型）を生成して，<code>Parser</code> にセットしてあげれば良いかなと雑に考えていたが、これを網羅的にやるのはめんどくさいコトに気づいた． <code>makeExprTable</code> では演算子（<code>Op</code> 型）と演算子パーサーが一対一対応するように作っているが，よく考えたら <code>Operator m a</code> 型はただのパーサーなのでもっと自由に書けるはずだということに気づいた． ということで，中置関数を追加するために <code>makeExprTable</code> へ新しい中治関数用の演算子パーサーを追加することにした：</p>
<div class="sourceCode" id="cb11"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span id="cb11-1"><a href="#cb11-1" aria-hidden="true" tabindex="-1"></a><span class="ot">makeExprTable ::</span> [<span class="dt">Op</span>] <span class="ot">-&gt;</span> [[<span class="dt">Operator</span> <span class="dt">Parser</span> <span class="dt">Expr</span>]]</span>
<span id="cb11-2"><a href="#cb11-2" aria-hidden="true" tabindex="-1"></a>makeExprTable ops <span class="ot">=</span></span>
<span id="cb11-3"><a href="#cb11-3" aria-hidden="true" tabindex="-1"></a>  <span class="fu">reverse</span> <span class="op">$</span> <span class="fu">map</span> (<span class="fu">map</span> <span class="fu">snd</span>) <span class="op">$</span> groupBy ((<span class="op">==</span>) <span class="ot">`on`</span> <span class="fu">fst</span>) <span class="op">$</span> sortOn <span class="fu">fst</span> <span class="op">$</span></span>
<span id="cb11-4"><a href="#cb11-4" aria-hidden="true" tabindex="-1"></a>    (infixFuncOpPriority, infixFuncOperator) <span class="op">:</span> <span class="fu">map</span> (\op <span class="ot">-&gt;</span> (priority op, toOperator op)) ops</span>
<span id="cb11-5"><a href="#cb11-5" aria-hidden="true" tabindex="-1"></a>  <span class="kw">where</span></span>
<span id="cb11-6"><a href="#cb11-6" aria-hidden="true" tabindex="-1"></a>    <span class="co">-- 実装は割愛</span></span>
<span id="cb11-7"><a href="#cb11-7" aria-hidden="true" tabindex="-1"></a><span class="ot">    unary ::</span> <span class="dt">String</span> <span class="ot">-&gt;</span> <span class="dt">Parser</span> (<span class="dt">Expr</span> <span class="ot">-&gt;</span> <span class="dt">Expr</span>)</span>
<span id="cb11-8"><a href="#cb11-8" aria-hidden="true" tabindex="-1"></a><span class="ot">    binary ::</span> <span class="dt">Op</span> <span class="ot">-&gt;</span> <span class="dt">Parser</span> (<span class="dt">Expr</span> <span class="ot">-&gt;</span> <span class="dt">Expr</span> <span class="ot">-&gt;</span> <span class="dt">Expr</span>)</span>
<span id="cb11-9"><a href="#cb11-9" aria-hidden="true" tabindex="-1"></a><span class="ot">    toOperator ::</span> <span class="dt">Op</span> <span class="ot">-&gt;</span> <span class="dt">Operator</span> <span class="dt">Parser</span> <span class="dt">Expr</span></span>
<span id="cb11-10"><a href="#cb11-10" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb11-11"><a href="#cb11-11" aria-hidden="true" tabindex="-1"></a><span class="ot">    infixFuncOperator ::</span> <span class="dt">Operator</span> <span class="dt">Parser</span> <span class="dt">Expr</span></span>
<span id="cb11-12"><a href="#cb11-12" aria-hidden="true" tabindex="-1"></a>    infixFuncOperator <span class="ot">=</span> <span class="dt">InfixL</span> <span class="op">$</span> <span class="dt">InfixExpr</span> <span class="op">&lt;$&gt;</span> infixFuncOp</span>
<span id="cb11-13"><a href="#cb11-13" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb11-14"><a href="#cb11-14" aria-hidden="true" tabindex="-1"></a><span class="ot">infixFuncOp ::</span> <span class="dt">Parser</span> <span class="dt">Op</span></span>
<span id="cb11-15"><a href="#cb11-15" aria-hidden="true" tabindex="-1"></a>infixFuncOp <span class="ot">=</span> <span class="kw">do</span></span>
<span id="cb11-16"><a href="#cb11-16" aria-hidden="true" tabindex="-1"></a>  func <span class="ot">&lt;-</span> try (indented <span class="op">&gt;&gt;</span> between (symbol <span class="st">&quot;`&quot;</span>) (symbol <span class="st">&quot;`&quot;</span>) ident)</span>
<span id="cb11-17"><a href="#cb11-17" aria-hidden="true" tabindex="-1"></a>  <span class="fu">return</span> <span class="op">$</span> <span class="dt">Op</span> { repr <span class="ot">=</span> func, priority <span class="ot">=</span> infixFuncOpPriority, assoc <span class="ot">=</span> <span class="dt">E.InfixL</span>, isWedge <span class="ot">=</span> <span class="dt">False</span> }</span>
<span id="cb11-18"><a href="#cb11-18" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb11-19"><a href="#cb11-19" aria-hidden="true" tabindex="-1"></a><span class="ot">infixFuncOpPriority ::</span> <span class="dt">Int</span></span>
<span id="cb11-20"><a href="#cb11-20" aria-hidden="true" tabindex="-1"></a>infixFuncOpPriority <span class="ot">=</span> <span class="dv">7</span></span></code></pre></div>
<p>優先順位をいい感じに組み立てるために，少しわかりにくい実装をしているが，順に読んでいけばわかるはずだ：</p>
<div class="sourceCode" id="cb12"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span id="cb12-1"><a href="#cb12-1" aria-hidden="true" tabindex="-1"></a><span class="fu">map</span> (\op <span class="ot">-&gt;</span> (priority op, toOperator op)) ops    <span class="co">-- [(優先順位 (Int), Op から生成した演算子パーサー)]</span></span>
<span id="cb12-2"><a href="#cb12-2" aria-hidden="true" tabindex="-1"></a>  <span class="op">&amp;</span> ((infixFuncOpPriority, infixFuncOperator) <span class="op">:</span>) <span class="co">-- 中置関数の演算子パーサーを追加</span></span>
<span id="cb12-3"><a href="#cb12-3" aria-hidden="true" tabindex="-1"></a>  <span class="op">&amp;</span> sortOn <span class="fu">fst</span>                                   <span class="co">-- 優先順位でソート (groupBy するため)</span></span>
<span id="cb12-4"><a href="#cb12-4" aria-hidden="true" tabindex="-1"></a>  <span class="op">&amp;</span> groupBy ((<span class="op">==</span>) <span class="ot">`on`</span> <span class="fu">fst</span>)                      <span class="co">-- 優先順位でグループ化 ([[(優先順位, 演算子パーサー)]])</span></span>
<span id="cb12-5"><a href="#cb12-5" aria-hidden="true" tabindex="-1"></a>  <span class="op">&amp;</span> <span class="fu">map</span> (<span class="fu">map</span> <span class="fu">snd</span>)                                <span class="co">-- 演算子パーサーだけ取り出す ([[演算子パーサー]])</span></span>
<span id="cb12-6"><a href="#cb12-6" aria-hidden="true" tabindex="-1"></a>  <span class="op">&amp;</span> <span class="fu">reverse</span>                                      <span class="co">-- 優先順位の低い順になっているので反転  </span></span></code></pre></div>
<p>中置関数のパーサーはシンプルでバッククォートで囲まれた識別子（<code>ident</code>）をとってきているだけだ（<code>ident</code> は変数のパーサーなどで使われている）． <code>symbol</code> を使っているのでバッククォート前後にスペースがあっても動作する． これは Haskell がそうなっていたのでそうしたが，<code>QuoteSymbolExpr</code> のある Egison ではやめた方がいいかもしれない：</p>
<div class="sourceCode" id="cb13"><pre class="sourceCode sh"><code class="sourceCode bash"><span id="cb13-1"><a href="#cb13-1" aria-hidden="true" tabindex="-1"></a><span class="ex">ghci</span><span class="op">&gt;</span> 13 <span class="kw">`</span><span class="ex">mod</span><span class="kw">`</span> 10 :: Int</span>
<span id="cb13-2"><a href="#cb13-2" aria-hidden="true" tabindex="-1"></a><span class="ex">3</span></span>
<span id="cb13-3"><a href="#cb13-3" aria-hidden="true" tabindex="-1"></a><span class="ex">ghci</span><span class="op">&gt;</span> 13<span class="kw">`</span><span class="ex">mod</span><span class="kw">`</span>10 :: Int</span>
<span id="cb13-4"><a href="#cb13-4" aria-hidden="true" tabindex="-1"></a><span class="ex">3</span></span>
<span id="cb13-5"><a href="#cb13-5" aria-hidden="true" tabindex="-1"></a><span class="ex">ghci</span><span class="op">&gt;</span> 13<span class="kw">`</span> <span class="ex">mod</span> <span class="kw">`</span>10 :: Int</span>
<span id="cb13-6"><a href="#cb13-6" aria-hidden="true" tabindex="-1"></a><span class="ex">3</span></span>
<span id="cb13-7"><a href="#cb13-7" aria-hidden="true" tabindex="-1"></a><span class="ex">ghci</span><span class="op">&gt;</span> 13<span class="kw">`</span> <span class="ex">mod</span>    <span class="kw">`</span>10 :: Int</span>
<span id="cb13-8"><a href="#cb13-8" aria-hidden="true" tabindex="-1"></a><span class="ex">3</span></span></code></pre></div>
<h3 id="quotesymbolexpr-の対応">QuoteSymbolExpr の対応</h3>
<p>あとは，注意点にあった <code>QuoteSymbolExpr</code> の部分をなんとかするだけだ：</p>
<div class="sourceCode" id="cb14"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span id="cb14-1"><a href="#cb14-1" aria-hidden="true" tabindex="-1"></a><span class="co">-- Atomic expressions without index</span></span>
<span id="cb14-2"><a href="#cb14-2" aria-hidden="true" tabindex="-1"></a><span class="ot">atomExpr&#39; ::</span> <span class="dt">Parser</span> <span class="dt">Expr</span></span>
<span id="cb14-3"><a href="#cb14-3" aria-hidden="true" tabindex="-1"></a>atomExpr&#39; <span class="ot">=</span> anonParamFuncExpr</span>
<span id="cb14-4"><a href="#cb14-4" aria-hidden="true" tabindex="-1"></a>        <span class="op">&lt;|&gt;</span> <span class="dt">ConstantExpr</span> <span class="op">&lt;$&gt;</span> constantExpr</span>
<span id="cb14-5"><a href="#cb14-5" aria-hidden="true" tabindex="-1"></a>        <span class="op">&lt;|&gt;</span> <span class="dt">FreshVarExpr</span> <span class="op">&lt;$</span> symbol <span class="st">&quot;#&quot;</span></span>
<span id="cb14-6"><a href="#cb14-6" aria-hidden="true" tabindex="-1"></a>        <span class="op">&lt;|&gt;</span> <span class="dt">VarExpr</span> <span class="op">&lt;$&gt;</span> ident</span>
<span id="cb14-7"><a href="#cb14-7" aria-hidden="true" tabindex="-1"></a>        <span class="op">&lt;|&gt;</span> vectorExpr</span>
<span id="cb14-8"><a href="#cb14-8" aria-hidden="true" tabindex="-1"></a>        <span class="op">&lt;|&gt;</span> collectionExpr</span>
<span id="cb14-9"><a href="#cb14-9" aria-hidden="true" tabindex="-1"></a>        <span class="op">&lt;|&gt;</span> tupleOrParenExpr</span>
<span id="cb14-10"><a href="#cb14-10" aria-hidden="true" tabindex="-1"></a>        <span class="op">&lt;|&gt;</span> hashExpr</span>
<span id="cb14-11"><a href="#cb14-11" aria-hidden="true" tabindex="-1"></a>        <span class="op">&lt;|&gt;</span> <span class="dt">QuoteExpr</span> <span class="op">&lt;$&gt;</span> (char <span class="ch">&#39;\&#39;&#39;</span> <span class="op">&gt;&gt;</span> atomExpr&#39;)</span>
<span id="cb14-12"><a href="#cb14-12" aria-hidden="true" tabindex="-1"></a> <span class="co">-- 元々 &lt;|&gt; QuoteSymbolExpr &lt;$&gt; (char &#39;`&#39; &gt;&gt; atomExpr&#39;)</span></span>
<span id="cb14-13"><a href="#cb14-13" aria-hidden="true" tabindex="-1"></a>        <span class="op">&lt;|&gt;</span> <span class="dt">QuoteSymbolExpr</span> <span class="op">&lt;$&gt;</span> try (char <span class="ch">&#39;`&#39;</span> <span class="op">&gt;&gt;</span> atomExpr&#39; <span class="op">&lt;*</span> notFollowedBy (char <span class="ch">&#39;`&#39;</span>))</span>
<span id="cb14-14"><a href="#cb14-14" aria-hidden="true" tabindex="-1"></a>        <span class="op">&lt;|&gt;</span> <span class="dt">AnonParamExpr</span>  <span class="op">&lt;$&gt;</span> try (char <span class="ch">&#39;%&#39;</span> <span class="op">&gt;&gt;</span> positiveIntegerLiteral)</span>
<span id="cb14-15"><a href="#cb14-15" aria-hidden="true" tabindex="-1"></a>        <span class="op">&lt;?&gt;</span> <span class="st">&quot;atomic expression&quot;</span></span></code></pre></div>
<p><a href="https://hackage.haskell.org/package/megaparsec-9.0.0/docs/Text-Megaparsec.html#v:notFollowedBy"><code>notFollowedBy</code></a> 関数を使って後ろにバッククォートがないかをチェックしている（<code>try</code> を付けないとパーサーが入力を消費してしまう）．</p>
<h3 id="セクション記法">セクション記法</h3>
<p>実はもう1つやることがある． セクション記法に対応する必要がある（<code>(+ 1)</code> とか <code>(1 +)</code>って感じのやつ）． セクション記法のパーサーはそれぞれ <code>leftSection</code> と <code>rightSection</code> があるので，これに <code>infixFuncOp</code> を追記してあげるだけだ：</p>
<div class="sourceCode" id="cb15"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span id="cb15-1"><a href="#cb15-1" aria-hidden="true" tabindex="-1"></a><span class="ot">leftSection ::</span> <span class="dt">Parser</span> <span class="dt">Expr</span></span>
<span id="cb15-2"><a href="#cb15-2" aria-hidden="true" tabindex="-1"></a>leftSection <span class="ot">=</span> <span class="kw">do</span></span>
<span id="cb15-3"><a href="#cb15-3" aria-hidden="true" tabindex="-1"></a>  ops  <span class="ot">&lt;-</span> gets exprOps</span>
<span id="cb15-4"><a href="#cb15-4" aria-hidden="true" tabindex="-1"></a>  op   <span class="ot">&lt;-</span> choice <span class="op">$</span> <span class="fu">map</span> (infixLiteral <span class="op">.</span> repr) ops</span>
<span id="cb15-5"><a href="#cb15-5" aria-hidden="true" tabindex="-1"></a>  op   <span class="ot">&lt;-</span> choice <span class="op">$</span> infixFuncOp <span class="op">:</span> <span class="fu">map</span> (infixLiteral <span class="op">.</span> repr) ops <span class="co">-- この (infixFuncOp :)</span></span>
<span id="cb15-6"><a href="#cb15-6" aria-hidden="true" tabindex="-1"></a>  rarg <span class="ot">&lt;-</span> optional expr</span>
<span id="cb15-7"><a href="#cb15-7" aria-hidden="true" tabindex="-1"></a>  <span class="kw">case</span> rarg <span class="kw">of</span></span>
<span id="cb15-8"><a href="#cb15-8" aria-hidden="true" tabindex="-1"></a>    _ <span class="ot">-&gt;</span> <span class="fu">return</span> (<span class="dt">SectionExpr</span> op <span class="dt">Nothing</span> rarg)</span></code></pre></div>
<p>あとはよしなにテストを追加して完成．</p>
<h2 id="4-テストの個別実行を可能にする">4. テストの個別実行を可能にする</h2>
<p>中置関数の導入で実際は，先にテストを追加して TDD っぽく実装をしていた． その際に，<code>stack test</code> で全部のテストが実行されると非常に遅いのでテストケースを適当に指定して実行したい． ということで，そういうことができるようにした PR が最後のやつだ．</p>
<p><code>stack test</code> は <code>--test-arguments</code> オプションで実行されるテストプログラムにコマンドライン引数を渡すことができる． さらに，テストで使われている test-framework では <a href="https://hackage.haskell.org/package/test-framework-0.8.2.0/docs/Test-Framework-Runners-Console.html#v:defaultMainWithArgs"><code>defaultMainWithArgs</code></a> を使うことで簡単にリッチなオプションを追加できる：</p>
<div class="sourceCode" id="cb16"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span id="cb16-1"><a href="#cb16-1" aria-hidden="true" tabindex="-1"></a><span class="kw">import</span> <span class="dt">Test.Framework</span>                 (defaultMain)</span>
<span id="cb16-2"><a href="#cb16-2" aria-hidden="true" tabindex="-1"></a><span class="kw">import</span> <span class="dt">Test.Framework</span>                 (defaultMainWithArgs)</span>
<span id="cb16-3"><a href="#cb16-3" aria-hidden="true" tabindex="-1"></a><span class="kw">import</span> <span class="dt">Test.Framework.Providers.HUnit</span> (hUnitTestToTests)</span>
<span id="cb16-4"><a href="#cb16-4" aria-hidden="true" tabindex="-1"></a><span class="kw">import</span> <span class="dt">Test.HUnit</span></span>
<span id="cb16-5"><a href="#cb16-5" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb16-6"><a href="#cb16-6" aria-hidden="true" tabindex="-1"></a><span class="ot">main ::</span> <span class="dt">IO</span> ()</span>
<span id="cb16-7"><a href="#cb16-7" aria-hidden="true" tabindex="-1"></a>main <span class="ot">=</span> <span class="kw">do</span></span>
<span id="cb16-8"><a href="#cb16-8" aria-hidden="true" tabindex="-1"></a>  args <span class="ot">&lt;-</span> getArgs</span>
<span id="cb16-9"><a href="#cb16-9" aria-hidden="true" tabindex="-1"></a>  <span class="fu">flip</span> defaultMainWithArgs args <span class="op">$</span></span>
<span id="cb16-10"><a href="#cb16-10" aria-hidden="true" tabindex="-1"></a>    hUnitTestToTests <span class="op">$</span> test <span class="op">$</span> <span class="fu">map</span> runTestCase testCases</span>
<span id="cb16-11"><a href="#cb16-11" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb16-12"><a href="#cb16-12" aria-hidden="true" tabindex="-1"></a><span class="ot">testCases ::</span> [<span class="dt">FilePath</span>]</span>
<span id="cb16-13"><a href="#cb16-13" aria-hidden="true" tabindex="-1"></a>testCases <span class="ot">=</span> <span class="op">...</span></span>
<span id="cb16-14"><a href="#cb16-14" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb16-15"><a href="#cb16-15" aria-hidden="true" tabindex="-1"></a><span class="ot">runTestCase ::</span> <span class="dt">FilePath</span> <span class="ot">-&gt;</span> <span class="dt">Test</span></span>
<span id="cb16-16"><a href="#cb16-16" aria-hidden="true" tabindex="-1"></a>runTestCase <span class="ot">=</span> <span class="op">...</span></span></code></pre></div>
<p>こんなふうに実行できる（ちなみに，<code>--ta=--help</code> とすれば色々見れる）：</p>
<div class="sourceCode" id="cb17"><pre class="sourceCode sh"><code class="sourceCode bash"><span id="cb17-1"><a href="#cb17-1" aria-hidden="true" tabindex="-1"></a><span class="ex">$</span> stack test egison:test <span class="at">--ta</span><span class="op">=</span>--select-tests=<span class="st">&quot;test/syntax.egi&quot;</span></span>
<span id="cb17-2"><a href="#cb17-2" aria-hidden="true" tabindex="-1"></a><span class="ex">egison</span><span class="op">&gt;</span> test <span class="er">(</span><span class="ex">suite:</span> test, args: <span class="at">--select-tests</span><span class="op">=</span>test/syntax.egi<span class="kw">)</span></span>
<span id="cb17-3"><a href="#cb17-3" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb17-4"><a href="#cb17-4" aria-hidden="true" tabindex="-1"></a><span class="ex">io</span> and do expression</span>
<span id="cb17-5"><a href="#cb17-5" aria-hidden="true" tabindex="-1"></a><span class="ex">io</span> and do expression without newline</span>
<span id="cb17-6"><a href="#cb17-6" aria-hidden="true" tabindex="-1"></a><span class="ex">:test/syntax.egi:</span> [OK]</span>
<span id="cb17-7"><a href="#cb17-7" aria-hidden="true" tabindex="-1"></a></span>
<span id="cb17-8"><a href="#cb17-8" aria-hidden="true" tabindex="-1"></a>         <span class="ex">Test</span> Cases  Total      </span>
<span id="cb17-9"><a href="#cb17-9" aria-hidden="true" tabindex="-1"></a> <span class="ex">Passed</span>  1           1          </span>
<span id="cb17-10"><a href="#cb17-10" aria-hidden="true" tabindex="-1"></a> <span class="ex">Failed</span>  0           0          </span>
<span id="cb17-11"><a href="#cb17-11" aria-hidden="true" tabindex="-1"></a> <span class="ex">Total</span>   1           1          </span></code></pre></div>
<p><code>egison:test</code> の部分は Cabal ファイルに複数の <code>Test-Suite</code> が書いてある場合に指定することができる（Egison にはCLIオプションの <code>Test-Suite</code> が増えているので）．</p>
<h2 id="おしまい">おしまい</h2>
<p>今年の Hacktoberfest はちょっと炎上（このイベントをクリアするためにスパムなPRが乱立した）してて，最初はモチベーション下がっていました。 しかし，こういう時こそ正しい形で参加するのは Hacktoberfest 側にとって喜ばしいことかなと思い参加することにしました． 無事OSSに献上できてよかったです（レビューしてくれた方ありがとうございます）．</p>]]></content>
    </entry>
</feed>
