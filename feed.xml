<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
    <title>ひげメモ</title>
    <link href="https://matsubara0507.github.io/feed.xml" rel="self" />
    <link href="https://matsubara0507.github.io" />
    <id>https://matsubara0507.github.io/feed.xml</id>
    <author>
        <name>MATSUBARA Nobutada</name>
        <email></email>
    </author>
    <updated>2018-04-02T00:00:00Z</updated>
    <entry>
    <title>ML Day ＃1 に行ってきた</title>
    <link href="https://matsubara0507.github.io/posts/2018-04-02-ml-day-1.html" />
    <id>https://matsubara0507.github.io/posts/2018-04-02-ml-day-1.html</id>
    <published>2018-04-02T00:00:00Z</published>
    <updated>2018-04-02T00:00:00Z</updated>
    <summary type="html"><![CDATA[<article class="post card" itemscope itemtype="http://schema.org/BlogPosting">
 <div class="card-content">
  <header class="post-header">
    <h1 class="post-title" itemprop="name headline">ML Day ＃1 に行ってきた</h1>
    <p class="post-meta">
      <time datetime="2018-04-02" itemprop="datePublished">
        Apr 2, 2018
      </time>
      
      
      <div class="tags">
          <i class="fa fa-tags"></i> <a href="/tags/event.html">event</a>
      </div>
      
    </p>
  </header>

  <div class="post-content" itemprop="articleBody">
    <p><a href="https://ml-lang.connpass.com/event/78199/">ML Day #1</a> というイベントに参加してきたので，そのメモ？まとめ？みたいな感じの記事です．</p>
<h2 id="section"></h2>
<p>ML Day は毎年やってるML勉強会というML系の発表会形式の勉強会のこと． (なぜか)名前を変えたらしい． ちなみに，今後は半年に一回ペースでやりたいらしい．</p>
<h2 id="ぼくのはなし">ぼくのはなし</h2>
<p>新設された LT 枠で発表してきた．</p>
<p>スライドはこれ</p>
<iframe src="//www.slideshare.net/slideshow/embed_code/key/o84VhGTUREO4No" width="595" height="485" frameborder="0" marginwidth="0" marginheight="0" scrolling="no" style="border:1px solid #CCC; border-width:1px; margin-bottom:5px; max-width: 100%;" allowfullscreen>
</iframe>
<p>さすがに Haskell の話をするのはアレだったので，Haskell の新しいモジュールシステム Backpack のベースになった MixML の話をした． この日までに(Haskellで)実装完了してドヤ顔する予定だったのだが全然終わらなかった orz (Alt braif*ck じゃなくて)ちゃんとした規模の処理系を実装するのって，大変なんですね…</p>
<h2 id="section-1"></h2>
<p>ちなみに，<a href="https://github.com/rossberg/mixml">SML/NJ で実装されたもの</a>があり，実質これを参考に Haskell で書き直すだけの作業． だけど SML -&gt; Haskell に直すのって大変，非純粋なものを純粋な世界にするって大変(そりゃそう)． 気軽に状態を持ちやがって…</p>
<h2 id="自分的ハイライト">自分的ハイライト</h2>
<p>濃い目の話が多かったのでざっくりと．</p>
<p>資料は既に<a href="https://ml-lang.connpass.com/event/78199/presentation/">ほとんど上がっている</a>．</p>
<h3 id="ml型付の基礎の基礎">ML型付の基礎の基礎</h3>
<ul>
<li>発表者は <a href="https://twitter.com/haochenxie">Haochen</a> くん
<ul>
<li>名〇屋で <a href="https://sicss.connpass.com/event/71199/">TaPL の読書会</a>を主催してるひと</li>
<li>こんど<a href="https://nupsc.sicss.org/">名古屋でプロコン</a>やるんだって</li>
</ul></li>
<li><a href="https://haochenxie.name/dl/the_introduction_of_foundation_of_ml_type_checking.pdf">資料はコレ</a></li>
<li>基礎 (foundation) の 基礎 (introduction) の話
<ol type="1">
<li>型は素晴らしい</li>
<li>でも型を書きたくない
<ul>
<li>プログラマは怠惰を美徳にしている生き物だもんね</li>
</ul></li>
<li>再構築すればいいじゃない！
<ul>
<li><del>型検査無しにもどるなんてのは論外</del></li>
</ul></li>
</ol></li>
<li>素晴らしい本(TaPL)と素晴らしい先生(ピアース先生)
<ul>
<li><del>ML Day 出る以上読め</del></li>
</ul></li>
<li>おまけとして let 多相の話もしてた</li>
<li><a href="https://sicss.connpass.com/event/83801/">5/6に論理プログラミング言語の第一人者の講演</a>を企画しているらしい
<ul>
<li><a href="https://readcoqart.connpass.com/event/83722/">Coq 勉強会</a>と被ってるのがなぁぁぁぁ</li>
</ul></li>
</ul>
<h2 id="tba">TBA</h2>
<ul>
<li>発表者は<a href="https://twitter.com/pi8027">坂口和彦</a>さん
<ul>
<li>PPL2018 のポスター賞の人でその話を</li>
</ul></li>
<li>発表スライドは上がってないけど <a href="http://logic.cs.tsukuba.ac.jp/~sakaguchi/posters/ppl2018.pdf">PPL2018 のポスター</a>はあった</li>
<li>Coq でリストの置換(permutation)の自動証明(だったかな)
<ul>
<li>証明の過程をいろいろ話してくれた</li>
<li>(がぼくはよくわかってない)</li>
</ul></li>
<li><a href="http://www.sqlab.jp/FLOPS2018/">FLOPS’18</a> に通ったので発表するらしい</li>
<li>質問: 項書き換えでできないの？
<ul>
<li>中野先生に聞かれた(PPLで？？)</li>
<li>出来たら教えてといって何もないのでできないんじゃない？</li>
</ul></li>
</ul>
<h2 id="型つき組版処理システムsatysfi">型つき組版処理システムSATySFi</h2>
<ul>
<li>発表者は <a href="https://twitter.com/bd_gfngfn">bd_gfngfn</a> 氏</li>
<li>資料は<a href="https://drive.google.com/file/d/1BB7ZAiwPO3hVtq7PGImPtMs1-kOd7SzW/view">コレ</a></li>
<li>彼の有名な <a href="https://github.com/gfngfn/SATySFi">型つき組版処理システムSATySFi</a> の話
<ul>
<li>目標: L〇TeX を倒す</li>
<li>目標: エラーの可読性向上(大事)</li>
<li>ML系に似た組版用型システムが載っている
<ul>
<li>let 多相もレコード多相もある</li>
<li>しかし GADT や Functor はまだ</li>
</ul></li>
<li>「いきなり PDF がでまして」をよく言っていた(笑)<br />
</li>
</ul></li>
<li>質問: 構文にポリシーはあるの？
<ul>
<li>ML系の文法にしたい(けど LaTeX に寄せたほうが…)</li>
</ul></li>
</ul>
<h2 id="mlでつくる拡張可能インタプリタ">MLでつくる拡張可能インタプリタ</h2>
<ul>
<li>発表者は <a href="https://twitter.com/linerlock">linerlock</a> 氏
<ul>
<li>今日までつくば大生
<ul>
<li><del>これのせいで二番煎じに</del></li>
</ul></li>
</ul></li>
<li>資料は<a href="https://speakerdeck.com/takahisa/extensible-interpreter-in-ml">コレ</a></li>
<li>言語開発 <strong>も</strong> モジュラーにしたいので拡張可能なインタプリタを作ればいいじゃない
<ul>
<li><a href="https://github.com/takahisa/kennel">コレ</a>のことかな？</li>
<li>例えば超簡易的な自作言語に新しくリスト追加してと言われても簡単にできるように</li>
<li>評価器は楽しいので(拡張可能な評価器の)研究が多い</li>
<li>構文解析は無い…なのでここをサイボウズラボユースでやった(？)
<ul>
<li>構文解析の無い言語なんてないのにね</li>
<li>作ったの<a href="https://github.com/takahisa/finale">コレ</a>かな？</li>
</ul></li>
<li>「(BNFに新しい構文を)上に足すか下に足すか、花火じゃないけど」
<ul>
<li>上に足すか下に足すかで意味が変わることが…</li>
<li>そこで最長一致法 : 全部試して一番長いのをとる</li>
</ul></li>
<li>型とか最適化とかできてない</li>
</ul></li>
</ul>
<h3 id="lt">LT</h3>
<p>は割愛(つかれた)． ラインナップは</p>
<ul>
<li>自作言語を OCaml で作り直したら ML みたいなコア言語になってしまったという話</li>
<li>Elm の紹介</li>
<li>OCaml の祖先 CAML の解説</li>
<li>自作したパーサージェネレーターの紹介</li>
<li>Verifastの辛い話(<del>古いOCamlを使うのつらいという愚痴</del>)</li>
</ul>
<p>LT の資料は全部 connpass にあがっている．</p>
<h3 id="コンパイラバックエンド">コンパイラバックエンド</h3>
<ul>
<li>発表者は<a href="">インターネットの闇</a>さん
<ul>
<li>この会の主催者(？)</li>
</ul></li>
<li>OCaml のソースコードを皆で読もうの会
<ul>
<li><strong>バックエンドはコンパイラのコト</strong>
<ul>
<li>not Webバックエンド</li>
</ul></li>
<li>ガリグ先生しか読めない化け物(type系)</li>
<li>OCaml のバックは副作用ガンガン使う、FPとは？GC付きのC</li>
</ul></li>
</ul>
<h3 id="bucklescriptでノベルゲームdslを作る">BuckleScriptでノベルゲームDSLを作る</h3>
<ul>
<li>発表者は[pocketberserker]氏
<ul>
<li>普段は F# の人</li>
<li>F# ネタが切れた</li>
</ul></li>
<li>資料は<a href="https://github.com/pocketberserker/ml_day_1">ココ</a>
<ul>
<li>資料もこの DSL で書かれたもの(？？)</li>
<li>ノベルゲーなのでバックができない(笑)</li>
<li>発表者はデバッグモードで戻ってた</li>
</ul></li>
<li>ノベルゲーDSLを作りたい遺伝子を持ってしまったので作るという話
<ul>
<li><a href="https://github.com/cowlick/cowlick">つくったやつ</a></li>
<li>自分が今書いてるのはS式なのか？？？？S式が分からなくなる</li>
<li><del><strong>Reason を ML ユーザーが触るべきではない！</strong></del></li>
</ul></li>
</ul>
<h2 id="感想">感想</h2>
<ul>
<li>濃い(誉め言葉)</li>
<li>後半は疲れてしまった(ごめん)</li>
<li><strong>質問時間を含めて発表時間(律儀に終わる必要はない)</strong></li>
</ul>
<h2 id="おしまい">おしまい</h2>
<p>MixML 完成させてリベンジ発表したい</p>
  </div>
</div>
</article>
]]></summary>
</entry>
<entry>
    <title>多相バリアントを使いこなそう with Haskell</title>
    <link href="https://matsubara0507.github.io/posts/2018-03-24-poly-variant-with-haskell.html" />
    <id>https://matsubara0507.github.io/posts/2018-03-24-poly-variant-with-haskell.html</id>
    <published>2018-03-24T00:00:00Z</published>
    <updated>2018-03-24T00:00:00Z</updated>
    <summary type="html"><![CDATA[<article class="post card" itemscope itemtype="http://schema.org/BlogPosting">
 <div class="card-content">
  <header class="post-header">
    <h1 class="post-title" itemprop="name headline">多相バリアントを使いこなそう with Haskell</h1>
    <p class="post-meta">
      <time datetime="2018-03-24" itemprop="datePublished">
        Mar 24, 2018
      </time>
      
      
      <div class="tags">
          <i class="fa fa-tags"></i> <a href="/tags/Haskell.html">Haskell</a> <a href="/tags/extensible-package.html">extensible-package</a>
      </div>
      
    </p>
  </header>

  <div class="post-content" itemprop="articleBody">
    <p><a href="https://sampou.connpass.com/event/80492/">この前の「『Haskellによる関数プログラミングの思考法』読書会」</a>の後の懇親会(？)で <strong>多相バリアント</strong> の話になりまして，その時に以下の記事が話題にあがった．</p>
<ul>
<li><a href="http://osiire.hatenablog.com/entry/20090510/1241957550">多相バリアントを使いこなそう(1) - osiire’s blog</a></li>
<li><a href="http://osiire.hatenablog.com/entry/20090512/1242055541">多相バリアントを使いこなそう(2) - osiire’s blog</a></li>
<li><a href="http://osiire.hatenablog.com/entry/20090514/1242235108">多相バリアントを使いこなそう(3) - osiire’s blog</a></li>
<li><a href="http://osiire.hatenablog.com/entry/20090516/1242456737">多相バリアントを使いこなそう(4) - osiire’s blog</a></li>
</ul>
<p>これらの記事は OCaml で多相バリアントの紹介をしています． ということで，同様の議論を Haskell でもしてみた！というのが，この記事の内容です．</p>
<h3 id="haskell-と多相バリアント">Haskell と多相バリアント</h3>
<p>悲しいことに，Haskell には組み込みで多相バリアントは無い(バリアントとは Haskell の代数的データ型における直和型と概ね一緒)． なので，多相バリアントを Haskell で模倣するために，毎度おなじみ <a href="https://hackage.haskell.org/package/extensible"><code>extensible</code></a> パッケージを用いる．</p>
<h2 id="section"></h2>
<p>ネタバレをすると Haskell で同じことをするのは難しかった． なので，本質的な議論は osiire’s blog の方を読んだ方がいいと思うよ． 結局，本記事は osiire’s blog のと同様のことを Haskell もとい，<code>extensible</code> パッケージでどのように行うか，という記事って感じになった．</p>
<h2 id="多相バリアントの基本">多相バリアントの基本</h2>
<p>多相バリアントとは，名前の通り，多相的なバリアントである． バリアントは前述したとおり，直和型と基本的に同じ．</p>
<p>例えば，普通の直和型として次のようなものがあったとする．</p>
<div class="sourceCode" id="cb1"><pre class="sourceCode haskell"><code class="sourceCode haskell"><a class="sourceLine" id="cb1-1" data-line-number="1"><span class="kw">data</span> <span class="dt">Card</span> <span class="fu">=</span> <span class="dt">Joker</span> <span class="fu">|</span> <span class="dt">Number</span> <span class="dt">Int</span></a>
<a class="sourceLine" id="cb1-2" data-line-number="2"><span class="kw">data</span> <span class="dt">InData</span> <span class="fu">=</span> <span class="dt">Str</span> <span class="dt">String</span> <span class="fu">|</span> <span class="dt">Number</span> <span class="dt">Int</span></a></code></pre></div>
<p>「最初の型はジョーカーと数字札があるトランプの型，次の型は何かファイルからデータを読み込む時に文字列と数字のデータを統一的に扱うための型」だそうです(<a href="http://osiire.hatenablog.com/entry/20090510/1241957550">多相バリアントを使いこなそう(1)</a> より)． どちらの型にも <code>Number Int</code> という部分があるので次のような関数を両方に適用できそうな気がする．</p>
<div class="sourceCode" id="cb2"><pre class="sourceCode haskell"><code class="sourceCode haskell"><a class="sourceLine" id="cb2-1" data-line-number="1">getNumber (<span class="dt">Number</span> n) <span class="fu">=</span> <span class="dt">Just</span> n</a>
<a class="sourceLine" id="cb2-2" data-line-number="2">getNumber _ <span class="fu">=</span> <span class="dt">Nothing</span></a></code></pre></div>
<p>もちろん，そんなことはできない(そもそも，Haskell の値コンストラクタは名前空間を共有してしまうので同時に利用はできないのだが…)． そこで多相バリアントを用いれば，このような関数を実装することが出来るようになる．</p>
<h3 id="多相バリアントを定義">多相バリアントを定義</h3>
<p><code>extensible</code> パッケージを使って多相バリアント(拡張可能バリアント)を定義すると次のようになる(<code>DataKinds</code> と <code>TypeOperators</code> 言語拡張が必要)．</p>
<div class="sourceCode" id="cb3"><pre class="sourceCode haskell"><code class="sourceCode haskell"><a class="sourceLine" id="cb3-1" data-line-number="1"><span class="kw">type</span> <span class="dt">Card</span> <span class="fu">=</span> <span class="dt">Variant</span> <span class="ch">&#39;[ &quot;joker&quot; &gt;: (), &quot;number&quot; &gt;: Int ]</span></a>
<a class="sourceLine" id="cb3-2" data-line-number="2"><span class="kw">type</span> <span class="dt">InData</span> <span class="fu">=</span> <span class="dt">Variant</span> <span class="ch">&#39;[ &quot;str&quot; &gt;: String, &quot;number&quot; &gt;: Int ]</span></a></code></pre></div>
<p>とくに細かい説明はしないが，なんとなく意味が読み取れるだろう． <code>getNumber</code> 関数の実装は難しいので後回しにするとして，<code>getNumber</code> 関数の型は <code>extensible</code> パッケージの <a href="https://hackage.haskell.org/package/extensible-0.4.8/docs/Data-Extensible-Inclusion.html#t:-8838-"><code>⊆</code></a> 型クラスを用いて次のように書ける(意味は見た通り)．</p>
<div class="sourceCode" id="cb4"><pre class="sourceCode haskell"><code class="sourceCode haskell"><a class="sourceLine" id="cb4-1" data-line-number="1"><span class="ot">{-# LANGUAGE FlexibleContexts #-}</span></a>
<a class="sourceLine" id="cb4-2" data-line-number="2"></a>
<a class="sourceLine" id="cb4-3" data-line-number="3"><span class="ot">getNumber ::</span> (<span class="ch">&#39;[&quot;number&quot; &gt;: Int] ⊆ xs) =&gt; Variant xs -&gt; Maybe Int</span></a>
<a class="sourceLine" id="cb4-4" data-line-number="4">getNumber <span class="fu">=</span> undefined</a></code></pre></div>
<p>GHCi で試してみる．</p>
<div class="sourceCode" id="cb5"><pre class="sourceCode haskell"><code class="sourceCode haskell"><a class="sourceLine" id="cb5-1" data-line-number="1"><span class="fu">&gt;&gt;</span> <span class="fu">:</span>t getNumber (undefined<span class="ot"> ::</span> <span class="dt">Card</span>)</a>
<a class="sourceLine" id="cb5-2" data-line-number="2">getNumber (undefined<span class="ot"> ::</span> <span class="dt">Card</span>)<span class="ot"> ::</span> <span class="dt">Maybe</span> <span class="dt">Int</span></a>
<a class="sourceLine" id="cb5-3" data-line-number="3"><span class="fu">&gt;&gt;</span> <span class="fu">:</span>t getNumber (undefined<span class="ot"> ::</span> <span class="dt">InData</span>)</a>
<a class="sourceLine" id="cb5-4" data-line-number="4">getNumber (undefined<span class="ot"> ::</span> <span class="dt">InData</span>)<span class="ot"> ::</span> <span class="dt">Maybe</span> <span class="dt">Int</span></a></code></pre></div>
<p>確かに動作する．</p>
<h2 id="包含関係">包含関係</h2>
<p>さて，<code>getNumber</code> 関数をどのように実装するかだが，その前に多相バリアントの包含関係を議論しておく(この議論は<a href="http://osiire.hatenablog.com/entry/20090514/1242235108">多相バリアントを使いこなそう(3)</a>に対応する)．</p>
<p>次のような簡単なバリアント型を考える．</p>
<div class="sourceCode" id="cb6"><pre class="sourceCode haskell"><code class="sourceCode haskell"><a class="sourceLine" id="cb6-1" data-line-number="1"><span class="kw">type</span> <span class="dt">Hoge</span> <span class="fu">=</span> <span class="dt">Variant</span> <span class="dt">HogeFields</span></a>
<a class="sourceLine" id="cb6-2" data-line-number="2"><span class="kw">type</span> <span class="dt">HogeFields</span> <span class="fu">=</span></a>
<a class="sourceLine" id="cb6-3" data-line-number="3">  <span class="ch">&#39;[ &quot;hoge&quot; &gt;: ()</span></a>
<a class="sourceLine" id="cb6-4" data-line-number="4">   , <span class="st">&quot;fuga&quot;</span> <span class="fu">&gt;:</span> ()</a>
<a class="sourceLine" id="cb6-5" data-line-number="5">   ]</a></code></pre></div>
<p>このバリアント型に対し，<code>⊆</code> を用いて多相的な関数は2種類考えれる．</p>
<div class="sourceCode" id="cb7"><pre class="sourceCode haskell"><code class="sourceCode haskell"><a class="sourceLine" id="cb7-1" data-line-number="1"><span class="ot">toInt1 ::</span> (<span class="dt">HogeFields</span> ⊆ xs) <span class="ot">=&gt;</span> <span class="dt">Variant</span> xs <span class="ot">-&gt;</span> <span class="dt">Int</span></a>
<a class="sourceLine" id="cb7-2" data-line-number="2">toInt1 <span class="fu">=</span> undefined</a>
<a class="sourceLine" id="cb7-3" data-line-number="3"></a>
<a class="sourceLine" id="cb7-4" data-line-number="4"><span class="ot">toInt2 ::</span> (xs ⊆ <span class="dt">HogeFields</span>) <span class="ot">=&gt;</span> <span class="dt">Variant</span> xs <span class="ot">-&gt;</span> <span class="dt">Int</span></a>
<a class="sourceLine" id="cb7-5" data-line-number="5">toInt2 <span class="fu">=</span> undefined</a></code></pre></div>
<p><code>toInt1</code> は <code>&quot;hoge&quot; &gt;: ()</code> と <code>&quot;fuga&quot; &gt;: ()</code> を要素に持つバリアント型全てが利用できる関数である(さっきの <code>getNumber</code> と同じ)． <code>toInt2</code> は <code>&quot;hoge&quot; &gt;: ()</code> か <code>&quot;fuga&quot; &gt;: ()</code> のどれかを要素に持つ(それ以外は持ってはいけない)バリアント型全てに利用できる関数である． 試しに，次の3つのバリアント型の値を定義し，GHCi で試してみよう．</p>
<div class="sourceCode" id="cb8"><pre class="sourceCode haskell"><code class="sourceCode haskell"><a class="sourceLine" id="cb8-1" data-line-number="1"><span class="ot">hoge1 ::</span> <span class="dt">Hoge</span></a>
<a class="sourceLine" id="cb8-2" data-line-number="2">hoge1 <span class="fu">=</span> embedAssoc <span class="fu">$</span> <span class="fu">#</span>hoge <span class="fu">@=</span> ()</a>
<a class="sourceLine" id="cb8-3" data-line-number="3"></a>
<a class="sourceLine" id="cb8-4" data-line-number="4"><span class="ot">hoge2 ::</span> <span class="dt">Variant</span> (<span class="st">&quot;piyo&quot;</span> <span class="fu">&gt;:</span> () <span class="ch">&#39;: HogeFields)</span></a>
<a class="sourceLine" id="cb8-5" data-line-number="5">hoge2 <span class="fu">=</span> embedAssoc <span class="fu">$</span> <span class="fu">#</span>piyo <span class="fu">@=</span> ()</a>
<a class="sourceLine" id="cb8-6" data-line-number="6"></a>
<a class="sourceLine" id="cb8-7" data-line-number="7"><span class="ot">hoge3 ::</span> <span class="dt">Variant</span> <span class="ch">&#39;[&quot;hoge&quot; &gt;: ()]</span></a>
<a class="sourceLine" id="cb8-8" data-line-number="8">hoge3 <span class="fu">=</span> embedAssoc <span class="fu">$</span> <span class="fu">#</span>hoge <span class="fu">@=</span> ()</a></code></pre></div>
<p>見てわかるように(？)，<code>hoge3 ⊆ hoge1 ⊆ hoge2</code> である(厳密にはバリアントの要素の集合で成り立つ関係だが)．</p>
<div class="sourceCode" id="cb9"><pre class="sourceCode haskell"><code class="sourceCode haskell"><a class="sourceLine" id="cb9-1" data-line-number="1"><span class="fu">&gt;&gt;</span> <span class="fu">:</span>t toInt1 hoge1</a>
<a class="sourceLine" id="cb9-2" data-line-number="2">toInt1<span class="ot"> hoge1 ::</span> <span class="dt">Int</span></a>
<a class="sourceLine" id="cb9-3" data-line-number="3"><span class="fu">&gt;&gt;</span> <span class="fu">:</span>t toInt1 hoge2</a>
<a class="sourceLine" id="cb9-4" data-line-number="4">toInt1<span class="ot"> hoge2 ::</span> <span class="dt">Int</span></a>
<a class="sourceLine" id="cb9-5" data-line-number="5"><span class="fu">&gt;&gt;</span> <span class="fu">:</span>t toInt1 hoge3</a>
<a class="sourceLine" id="cb9-6" data-line-number="6"></a>
<a class="sourceLine" id="cb9-7" data-line-number="7"><span class="fu">&lt;</span>interactive<span class="fu">&gt;:</span><span class="dv">1</span><span class="fu">:</span><span class="dv">1</span><span class="fu">:</span> error<span class="fu">:</span></a>
<a class="sourceLine" id="cb9-8" data-line-number="8">    <span class="fu">?</span> <span class="dt">Couldn&#39;t</span> match <span class="kw">type</span> ‘<span class="ch">&#39;Missing (&quot;fuga&quot; &#39;</span><span class="fu">:&gt;</span> ())’</a>
<a class="sourceLine" id="cb9-9" data-line-number="9">                     with ‘<span class="ch">&#39;Expecting pos0’</span></a>
<a class="sourceLine" id="cb9-10" data-line-number="10">        arising from a use <span class="kw">of</span> ‘toInt1’</a>
<a class="sourceLine" id="cb9-11" data-line-number="11">    <span class="fu">?</span> <span class="dt">In</span> the expression<span class="fu">:</span> toInt1 hoge3</a>
<a class="sourceLine" id="cb9-12" data-line-number="12"><span class="fu">&gt;&gt;</span> <span class="fu">:</span>t toInt2 hoge1</a>
<a class="sourceLine" id="cb9-13" data-line-number="13">toInt2<span class="ot"> hoge1 ::</span> <span class="dt">Int</span></a>
<a class="sourceLine" id="cb9-14" data-line-number="14"><span class="fu">&gt;&gt;</span> <span class="fu">:</span>t toInt2 hoge2</a>
<a class="sourceLine" id="cb9-15" data-line-number="15"></a>
<a class="sourceLine" id="cb9-16" data-line-number="16"><span class="fu">&lt;</span>interactive<span class="fu">&gt;:</span><span class="dv">1</span><span class="fu">:</span><span class="dv">1</span><span class="fu">:</span> error<span class="fu">:</span></a>
<a class="sourceLine" id="cb9-17" data-line-number="17">    <span class="fu">?</span> <span class="dt">Couldn&#39;t</span> match <span class="kw">type</span> ‘<span class="ch">&#39;Missing (&quot;piyo&quot; &#39;</span><span class="fu">:&gt;</span> ())’</a>
<a class="sourceLine" id="cb9-18" data-line-number="18">                     with ‘<span class="ch">&#39;Expecting pos0’</span></a>
<a class="sourceLine" id="cb9-19" data-line-number="19">        arising from a use <span class="kw">of</span> ‘toInt2’</a>
<a class="sourceLine" id="cb9-20" data-line-number="20">    <span class="fu">?</span> <span class="dt">In</span> the expression<span class="fu">:</span> toInt2 hoge2</a>
<a class="sourceLine" id="cb9-21" data-line-number="21"><span class="fu">&gt;&gt;</span> <span class="fu">:</span>t toInt2 hoge3</a>
<a class="sourceLine" id="cb9-22" data-line-number="22">toInt2<span class="ot"> hoge3 ::</span> <span class="dt">Int</span></a></code></pre></div>
<p>確かに，<code>toInt1</code> は <code>hoge1</code> と <code>hoge2</code> に適用でき，<code>toInt2</code> は <code>hoge1</code> と <code>hoge3</code> に適用できている．</p>
<h2 id="section-1"></h2>
<p>さて，<code>toInt1</code> と <code>toInt2</code> の実装を与えてみる． 実は簡単なのは後者 <code>toInt2</code> だ．</p>
<div class="sourceCode" id="cb10"><pre class="sourceCode haskell"><code class="sourceCode haskell"><a class="sourceLine" id="cb10-1" data-line-number="1"><span class="ot">{-# LANGUAGE OverloadedLabels #-}</span></a>
<a class="sourceLine" id="cb10-2" data-line-number="2"></a>
<a class="sourceLine" id="cb10-3" data-line-number="3"><span class="ot">toInt2 ::</span> (xs ⊆ <span class="dt">HogeFields</span>) <span class="ot">=&gt;</span> <span class="dt">Variant</span> xs <span class="ot">-&gt;</span> <span class="dt">Int</span></a>
<a class="sourceLine" id="cb10-4" data-line-number="4">toInt2 <span class="fu">=</span> flip matchField (spread<span class="ot"> xs ::</span> <span class="dt">Hoge</span>)</a>
<a class="sourceLine" id="cb10-5" data-line-number="5">    <span class="fu">$</span> <span class="fu">#</span>hoge <span class="fu">@=</span> (const <span class="dv">1</span>)</a>
<a class="sourceLine" id="cb10-6" data-line-number="6">   <span class="fu">&lt;:</span> <span class="fu">#</span>fuga <span class="fu">@=</span> (const <span class="dv">2</span>)</a>
<a class="sourceLine" id="cb10-7" data-line-number="7">   <span class="fu">&lt;:</span> nil</a></code></pre></div>
<p>(<a href="https://matsubara0507.github.io/posts/2017-11-28-fun-of-extensible-1.html">昔の記事</a>でも紹介した) <a href="https://hackage.haskell.org/package/extensible-0.4.8/docs/Data-Extensible-Inclusion.html#v:spread"><code>spread</code></a> 関数を用いることで <strong>バリアント型を拡張できる</strong> (<a href="https://hackage.haskell.org/package/extensible-0.4.8/docs/Data-Extensible-Field.html#v:matchField"><code>matchField</code></a> 関数の使い方についてはこの<a href="https://matsubara0507.github.io/posts/2018-01-31-fun-of-extensible-2.html">記事</a>を参照して)．</p>
<div class="sourceCode" id="cb11"><pre class="sourceCode haskell"><code class="sourceCode haskell"><a class="sourceLine" id="cb11-1" data-line-number="1"><span class="ot">shrink ::</span> (xs ⊆ ys) <span class="ot">=&gt;</span> <span class="dt">Record</span> ys <span class="ot">-&gt;</span> <span class="dt">Record</span> xs</a>
<a class="sourceLine" id="cb11-2" data-line-number="2"><span class="ot">spread ::</span> (xs ⊆ ys) <span class="ot">=&gt;</span> <span class="dt">Variant</span> xs <span class="ot">-&gt;</span> <span class="dt">Variant</span> ys</a></code></pre></div>
<p>拡縮する関数 <code>spread</code> や <code>shrink</code> は強力なのだが，多相的すぎて前後の型が分からないとエラーになる(気がする(パッケージの作者じゃないので細かいことはよくわからん))ので，型注釈 (<code>spread xs :: Hoge</code> の部分)を与える必要がある．</p>
<h3 id="必殺-coinclusion">必殺 Coinclusion</h3>
<p>前者が難しいのは，<code>spread</code> や <code>shrink</code> とは逆の振る舞いを要求するからだ． そのために(この前作者から教えてもらった隠し技(別に隠してない)) <a href="https://hackage.haskell.org/package/extensible-0.4.8/docs/Data-Extensible-Nullable.html"><code>Nullable</code></a> を使う！ <code>Nullable</code> を使うとバリアントやレコードの全ての要素を簡単に <code>Maybe</code> でラップできる(なんかいいテーマがあったら，そのうち解説する)． さらに <code>Nullable</code> を用いることで，Coinclusion を定義できる！</p>
<div class="sourceCode" id="cb12"><pre class="sourceCode haskell"><code class="sourceCode haskell"><a class="sourceLine" id="cb12-1" data-line-number="1"><span class="ot">wrench ::</span> (<span class="dt">Generate</span> ys, xs ⊆ ys) <span class="ot">=&gt;</span> (h <span class="fu">:*</span> xs) <span class="ot">-&gt;</span> <span class="dt">Nullable</span> h <span class="fu">:*</span> ys</a>
<a class="sourceLine" id="cb12-2" data-line-number="2"><span class="ot">retrench ::</span> (<span class="dt">Generate</span> ys, xs ⊆ ys) <span class="ot">=&gt;</span> (h <span class="fu">:|</span> ys) <span class="ot">-&gt;</span> <span class="dt">Nullable</span> ((<span class="fu">:|</span>) h) xs</a></code></pre></div>
<p><code>wrench</code> や <code>retrench</code> は <code>shrink</code> と <code>spread</code> の逆向きの変換になっているのが分かるだろうか？ 逆向きにしたせいで足りない部分は <code>Nullable</code> によって <code>Nothing</code> となる． 例えば <code>Variant (&quot;piyo&quot; &gt;: () ': HogeFields)</code> から <code>Hoge</code> に縮小する場合は，<code>embedAssoc (#piyo @= ())</code> が <code>Nothing</code> となり，他が <code>Just</code> でラップされる．</p>
<h2 id="section-2"></h2>
<p>Coinclusion を用いて <code>toInt2</code> 関数を実装してみると次のようになる．</p>
<div class="sourceCode" id="cb13"><pre class="sourceCode haskell"><code class="sourceCode haskell"><a class="sourceLine" id="cb13-1" data-line-number="1"><span class="ot">{-# LANGUAGE PolyKinds           #-}</span></a>
<a class="sourceLine" id="cb13-2" data-line-number="2"><span class="ot">{-# LANGUAGE RankNTypes          #-}</span></a>
<a class="sourceLine" id="cb13-3" data-line-number="3"><span class="ot">{-# LANGUAGE ScopedTypeVariables #-}</span></a>
<a class="sourceLine" id="cb13-4" data-line-number="4"></a>
<a class="sourceLine" id="cb13-5" data-line-number="5"><span class="ot">toInt1 ::</span> (<span class="dt">Generate</span> xs, <span class="dt">HogeFields</span> ⊆ xs) <span class="ot">=&gt;</span> <span class="dt">Variant</span> xs <span class="ot">-&gt;</span> <span class="dt">Int</span></a>
<a class="sourceLine" id="cb13-6" data-line-number="6">toInt1 <span class="fu">=</span> matchFieldWithDefault <span class="dv">0</span></a>
<a class="sourceLine" id="cb13-7" data-line-number="7">    <span class="fu">$</span> <span class="fu">#</span>hoge <span class="fu">@=</span> (const <span class="dv">1</span><span class="ot"> ::</span> () <span class="ot">-&gt;</span> <span class="dt">Int</span>)</a>
<a class="sourceLine" id="cb13-8" data-line-number="8">   <span class="fu">&lt;:</span> <span class="fu">#</span>fuga <span class="fu">@=</span> (const <span class="dv">2</span><span class="ot"> ::</span> () <span class="ot">-&gt;</span> <span class="dt">Int</span>)</a>
<a class="sourceLine" id="cb13-9" data-line-number="9">   <span class="fu">&lt;:</span> nil</a>
<a class="sourceLine" id="cb13-10" data-line-number="10"></a>
<a class="sourceLine" id="cb13-11" data-line-number="11"><span class="ot">matchFieldWithDefault ::</span> forall xs ys h r <span class="fu">.</span></a>
<a class="sourceLine" id="cb13-12" data-line-number="12">  (<span class="dt">Generate</span> ys, xs ⊆ ys) <span class="ot">=&gt;</span> r <span class="ot">-&gt;</span> <span class="dt">RecordOf</span> (<span class="dt">Match</span> h r) xs <span class="ot">-&gt;</span> <span class="dt">VariantOf</span> h ys <span class="ot">-&gt;</span> r</a>
<a class="sourceLine" id="cb13-13" data-line-number="13">matchFieldWithDefault defaultValue pat <span class="fu">=</span></a>
<a class="sourceLine" id="cb13-14" data-line-number="14">  fromMaybe defaultValue <span class="fu">.</span> matchFieldWithMaybe pat</a>
<a class="sourceLine" id="cb13-15" data-line-number="15"></a>
<a class="sourceLine" id="cb13-16" data-line-number="16"><span class="ot">matchFieldWithMaybe ::</span> forall xs ys h r <span class="fu">.</span></a>
<a class="sourceLine" id="cb13-17" data-line-number="17">  (<span class="dt">Generate</span> ys, xs ⊆ ys) <span class="ot">=&gt;</span> <span class="dt">RecordOf</span> (<span class="dt">Match</span> h r) xs <span class="ot">-&gt;</span> <span class="dt">VariantOf</span> h ys <span class="ot">-&gt;</span> <span class="dt">Maybe</span> r</a>
<a class="sourceLine" id="cb13-18" data-line-number="18">matchFieldWithMaybe pat <span class="fu">=</span> matchWith func (wrench pat)</a>
<a class="sourceLine" id="cb13-19" data-line-number="19">  <span class="kw">where</span></a>
<a class="sourceLine" id="cb13-20" data-line-number="20"><span class="ot">    func ::</span> forall x <span class="fu">.</span> <span class="dt">Nullable</span> (<span class="dt">Field</span> (<span class="dt">Match</span> h r)) x <span class="ot">-&gt;</span> <span class="dt">Field</span> h x <span class="ot">-&gt;</span> <span class="dt">Maybe</span> r</a>
<a class="sourceLine" id="cb13-21" data-line-number="21">    func fx gx <span class="fu">=</span> (\x <span class="ot">-&gt;</span> runMatch (getField x) <span class="fu">$</span> getField gx) <span class="fu">&lt;$&gt;</span> getNullable fx</a></code></pre></div>
<p>めんどくさいので細かい解説はしない(そもそももっといい方法があるかもしれない)． この <code>matchFieldWithMaybe</code> を用いれば <code>getNumber</code> も簡単に実装できるだろう．</p>
<div class="sourceCode" id="cb14"><pre class="sourceCode haskell"><code class="sourceCode haskell"><a class="sourceLine" id="cb14-1" data-line-number="1"><span class="ot">getNumber ::</span> (<span class="dt">Generate</span> xs, <span class="ch">&#39;[&quot;number&quot; &gt;: Int] ⊆ xs) =&gt; Variant xs -&gt; Maybe Int</span></a>
<a class="sourceLine" id="cb14-2" data-line-number="2">getNumber <span class="fu">=</span> matchFieldWithMaybe <span class="fu">$</span> <span class="fu">#</span>number <span class="fu">@=</span> id <span class="fu">&lt;:</span> nil</a></code></pre></div>
<h2 id="例-イベントを拡張する">例 : イベントを拡張する</h2>
<p>ここからは「多相バリアントを使いこなそう」で取り上げられてた例を Haskell で示そう． ひとつ目は次のふたつのイベント型を考える．</p>
<div class="sourceCode" id="cb15"><pre class="sourceCode haskell"><code class="sourceCode haskell"><a class="sourceLine" id="cb15-1" data-line-number="1"><span class="kw">type</span> <span class="dt">KeyboardEvent</span> <span class="fu">=</span> <span class="dt">Variant</span> <span class="dt">KeyboardEventFields</span></a>
<a class="sourceLine" id="cb15-2" data-line-number="2"><span class="kw">type</span> <span class="dt">KeyboardEventFields</span> <span class="fu">=</span></a>
<a class="sourceLine" id="cb15-3" data-line-number="3">  <span class="ch">&#39;[ &quot;keyPress&quot; &gt;: Char</span></a>
<a class="sourceLine" id="cb15-4" data-line-number="4">   , <span class="st">&quot;keyRelease&quot;</span> <span class="fu">&gt;:</span> <span class="dt">Char</span></a>
<a class="sourceLine" id="cb15-5" data-line-number="5">   ]</a>
<a class="sourceLine" id="cb15-6" data-line-number="6"></a>
<a class="sourceLine" id="cb15-7" data-line-number="7"><span class="kw">type</span> <span class="dt">MouseEvent</span> <span class="fu">=</span> <span class="dt">Variant</span> <span class="dt">MouseEventFields</span></a>
<a class="sourceLine" id="cb15-8" data-line-number="8"><span class="kw">type</span> <span class="dt">MouseEventFields</span> <span class="fu">=</span></a>
<a class="sourceLine" id="cb15-9" data-line-number="9">  <span class="ch">&#39;[ &quot;mousePress&quot; &gt;: (Int, Int)</span></a>
<a class="sourceLine" id="cb15-10" data-line-number="10">   , <span class="st">&quot;mouseRelease&quot;</span> <span class="fu">&gt;:</span> (<span class="dt">Int</span>, <span class="dt">Int</span>)</a>
<a class="sourceLine" id="cb15-11" data-line-number="11">   , <span class="st">&quot;click&quot;</span> <span class="fu">&gt;:</span> (<span class="dt">Int</span>, <span class="dt">Int</span>)</a>
<a class="sourceLine" id="cb15-12" data-line-number="12">   ]</a></code></pre></div>
<p>さて，これらの両方の型許容する型 <code>Event</code> を作りたい． 普通の直和型を用いて次のように書くことが出来る．</p>
<div class="sourceCode" id="cb16"><pre class="sourceCode haskell"><code class="sourceCode haskell"><a class="sourceLine" id="cb16-1" data-line-number="1"><span class="kw">data</span> <span class="dt">Event</span> <span class="fu">=</span> <span class="dt">Key</span> <span class="dt">KeyboardEvent</span> <span class="fu">|</span> <span class="dt">Mouse</span> <span class="dt">MouseEvent</span></a></code></pre></div>
<p>もちろん，これでは元のふたつの型をうまく再利用できていない． 既に何度か登場している型レベルリストの連結 <a href="https://hackage.haskell.org/package/extensible-0.4.8/docs/Data-Extensible-Product.html#t:-43--43-"><code>++</code></a> を使って次のように書くこともできる．</p>
<div class="sourceCode" id="cb17"><pre class="sourceCode haskell"><code class="sourceCode haskell"><a class="sourceLine" id="cb17-1" data-line-number="1"><span class="kw">type</span> <span class="dt">Event</span> <span class="fu">=</span> <span class="dt">Variant</span> (<span class="dt">KeyboardEventFields</span> <span class="fu">++</span> <span class="dt">MouseEventFields</span>)</a></code></pre></div>
<p>こうすると，<code>Event</code> 型と <code>KeyboardEvent</code> 型・<code>MouseEvent</code> 型には包含関係ができ，前述した <code>Hoge</code> 型で示した方法により各々で関数を共有することが出来る． 例えば次の <code>getCharFromEvent</code> 関数は <code>KeyboardEvent</code> 型と <code>Event</code> 型の両方で利用できる．</p>
<div class="sourceCode" id="cb18"><pre class="sourceCode haskell"><code class="sourceCode haskell"><a class="sourceLine" id="cb18-1" data-line-number="1"><span class="ot">getCharFromEvent ::</span></a>
<a class="sourceLine" id="cb18-2" data-line-number="2">  (<span class="dt">Generate</span> xs, <span class="dt">KeyboardEventFields</span> ⊆ xs) <span class="ot">=&gt;</span> <span class="dt">Variant</span> xs <span class="ot">-&gt;</span> <span class="dt">Char</span></a>
<a class="sourceLine" id="cb18-3" data-line-number="3">getCharFromEvent <span class="fu">=</span> matchFieldWithDefault (error <span class="st">&quot;not a key&quot;</span>)</a>
<a class="sourceLine" id="cb18-4" data-line-number="4">    <span class="fu">$</span> <span class="fu">#</span>keyPress   <span class="fu">@=</span> id</a>
<a class="sourceLine" id="cb18-5" data-line-number="5">   <span class="fu">&lt;:</span> <span class="fu">#</span>keyRelease <span class="fu">@=</span> id</a>
<a class="sourceLine" id="cb18-6" data-line-number="6">   <span class="fu">&lt;:</span> nil</a></code></pre></div>
<h2 id="例-トランプで-expression-problem">例 : トランプで Expression Problem</h2>
<p>Expression Problem が何なのかは各位ググってもらうとして，「多相バリアントを使いこなそう」の最後で紹介されていた，多相バリアントによる Expression Problem の解法を Haskell でもやってみる．</p>
<p>次のような型と関数があったとする．</p>
<div class="sourceCode" id="cb19"><pre class="sourceCode haskell"><code class="sourceCode haskell"><a class="sourceLine" id="cb19-1" data-line-number="1"><span class="kw">type</span> <span class="dt">Card</span> <span class="fu">=</span> <span class="dt">Variant</span> <span class="dt">CardFields</span></a>
<a class="sourceLine" id="cb19-2" data-line-number="2"><span class="kw">type</span> <span class="dt">CardFields</span> <span class="fu">=</span></a>
<a class="sourceLine" id="cb19-3" data-line-number="3">  <span class="ch">&#39;[ &quot;number&quot; &gt;: Int</span></a>
<a class="sourceLine" id="cb19-4" data-line-number="4">   , <span class="st">&quot;jack&quot;</span>   <span class="fu">&gt;:</span> ()</a>
<a class="sourceLine" id="cb19-5" data-line-number="5">   , <span class="st">&quot;queen&quot;</span>  <span class="fu">&gt;:</span> ()</a>
<a class="sourceLine" id="cb19-6" data-line-number="6">   , <span class="st">&quot;king&quot;</span>   <span class="fu">&gt;:</span> ()</a>
<a class="sourceLine" id="cb19-7" data-line-number="7">   ]</a>
<a class="sourceLine" id="cb19-8" data-line-number="8"></a>
<a class="sourceLine" id="cb19-9" data-line-number="9"><span class="ot">cardNum ::</span> <span class="dt">Card</span> <span class="ot">-&gt;</span> <span class="dt">Int</span></a>
<a class="sourceLine" id="cb19-10" data-line-number="10">cardNum <span class="fu">=</span> matchField cardNumPattern</a>
<a class="sourceLine" id="cb19-11" data-line-number="11"></a>
<a class="sourceLine" id="cb19-12" data-line-number="12"><span class="ot">cardNumPattern ::</span> <span class="dt">RecordOf</span> (<span class="dt">Match</span> <span class="dt">Identity</span> <span class="dt">Int</span>) <span class="dt">CardFields</span></a>
<a class="sourceLine" id="cb19-13" data-line-number="13">cardNumPattern</a>
<a class="sourceLine" id="cb19-14" data-line-number="14">    <span class="fu">=</span> <span class="fu">#</span>number <span class="fu">@=</span> id</a>
<a class="sourceLine" id="cb19-15" data-line-number="15">   <span class="fu">&lt;:</span> <span class="fu">#</span>jack   <span class="fu">@=</span> const <span class="dv">11</span></a>
<a class="sourceLine" id="cb19-16" data-line-number="16">   <span class="fu">&lt;:</span> <span class="fu">#</span>queen  <span class="fu">@=</span> const <span class="dv">12</span></a>
<a class="sourceLine" id="cb19-17" data-line-number="17">   <span class="fu">&lt;:</span> <span class="fu">#</span>king   <span class="fu">@=</span> const <span class="dv">13</span></a>
<a class="sourceLine" id="cb19-18" data-line-number="18">   <span class="fu">&lt;:</span> nil</a></code></pre></div>
<p>(<code>cardNumPattern</code> を切り出しているのがあからさまに恣意的だが…)これに以下のことは可能だろうか？</p>
<ol type="1">
<li>静的で安全に(キャストせず)</li>
<li>元のコードを一切変更せず</li>
<li>新しい場合分けを加え</li>
<li>新しい操作も加えた</li>
<li>新しい場合分け構造を定義する</li>
</ol>
<p>最後の「構造」というのは今回は置いておいて(OCaml ではモジュールとして定義してたが，Haskell でモジュールに切り分けるにはファイルを切り分ける必要があるので…めんどい…)，1-4を考えてみよう． <code>Card</code> 型やその関数を拡張したものとして，次のような <code>CardExt</code> 型とその関数を定義した．</p>
<div class="sourceCode" id="cb20"><pre class="sourceCode haskell"><code class="sourceCode haskell"><a class="sourceLine" id="cb20-1" data-line-number="1"><span class="kw">type</span> <span class="dt">CardExt</span> <span class="fu">=</span> <span class="dt">Variant</span> <span class="dt">CardExtFields</span></a>
<a class="sourceLine" id="cb20-2" data-line-number="2"><span class="kw">type</span> <span class="dt">CardExtFields</span> <span class="fu">=</span> <span class="dt">CardFields</span> <span class="fu">++</span> <span class="ch">&#39;[&quot;joker&quot; &gt;: ()]</span></a>
<a class="sourceLine" id="cb20-3" data-line-number="3"></a>
<a class="sourceLine" id="cb20-4" data-line-number="4"><span class="ot">cardExtNum ::</span> <span class="dt">CardExt</span> <span class="ot">-&gt;</span> <span class="dt">Int</span></a>
<a class="sourceLine" id="cb20-5" data-line-number="5">cardExtNum <span class="fu">=</span></a>
<a class="sourceLine" id="cb20-6" data-line-number="6">  matchField <span class="fu">$</span> shrink (<span class="fu">#</span>joker <span class="fu">@=</span> (const <span class="dv">0</span><span class="ot"> ::</span> () <span class="ot">-&gt;</span> <span class="dt">Int</span>) <span class="fu">&lt;:</span> cardNumPattern)</a>
<a class="sourceLine" id="cb20-7" data-line-number="7"></a>
<a class="sourceLine" id="cb20-8" data-line-number="8"><span class="ot">nextCardExt ::</span> <span class="dt">CardExt</span> <span class="ot">-&gt;</span> <span class="dt">CardExt</span></a>
<a class="sourceLine" id="cb20-9" data-line-number="9">nextCardExt <span class="fu">=</span> matchField</a>
<a class="sourceLine" id="cb20-10" data-line-number="10">    <span class="fu">$</span> <span class="fu">#</span>number <span class="fu">@=</span> (\n <span class="ot">-&gt;</span> <span class="kw">if</span> n <span class="fu">&lt;</span> <span class="dv">10</span> <span class="kw">then</span> embedAssoc <span class="fu">$</span> <span class="fu">#</span>number <span class="fu">@=</span> n <span class="fu">+</span> <span class="dv">1</span> <span class="kw">else</span> embedAssoc <span class="fu">$</span> <span class="fu">#</span>jack <span class="fu">@=</span> ())</a>
<a class="sourceLine" id="cb20-11" data-line-number="11">   <span class="fu">&lt;:</span> <span class="fu">#</span>jack   <span class="fu">@=</span> const (embedAssoc <span class="fu">$</span> <span class="fu">#</span>queen  <span class="fu">@=</span> ())</a>
<a class="sourceLine" id="cb20-12" data-line-number="12">   <span class="fu">&lt;:</span> <span class="fu">#</span>queen  <span class="fu">@=</span> const (embedAssoc <span class="fu">$</span> <span class="fu">#</span>king   <span class="fu">@=</span> ())</a>
<a class="sourceLine" id="cb20-13" data-line-number="13">   <span class="fu">&lt;:</span> <span class="fu">#</span>king   <span class="fu">@=</span> const (embedAssoc <span class="fu">$</span> <span class="fu">#</span>joker  <span class="fu">@=</span> ())</a>
<a class="sourceLine" id="cb20-14" data-line-number="14">   <span class="fu">&lt;:</span> <span class="fu">#</span>joker  <span class="fu">@=</span> const (embedAssoc <span class="fu">$</span> <span class="fu">#</span>number <span class="fu">@=</span> <span class="dv">1</span>)</a>
<a class="sourceLine" id="cb20-15" data-line-number="15">   <span class="fu">&lt;:</span> nil</a></code></pre></div>
<p>これで一応</p>
<ol type="1">
<li>静的で安全に(もちろん!)</li>
<li>既存のコードを改造せず</li>
<li><code>&quot;joker&quot; &gt;: ()</code> という新しい場合分けを加え</li>
<li><code>nextCardExt</code> という新しい操作(関数)を加える</li>
</ol>
<p>ことができた．</p>
<h2 id="おしまい">おしまい</h2>
<p>組込みでこれらの機能がある OCaml はいいなぁとなった．</p>
  </div>
</div>
</article>
]]></summary>
</entry>
<entry>
    <title>tasty-discover が Windows+日本語環境で動かなかったので直す</title>
    <link href="https://matsubara0507.github.io/posts/2018-03-04-fix-tasty-discover-windows.html" />
    <id>https://matsubara0507.github.io/posts/2018-03-04-fix-tasty-discover-windows.html</id>
    <published>2018-03-04T00:00:00Z</published>
    <updated>2018-03-04T00:00:00Z</updated>
    <summary type="html"><![CDATA[<article class="post card" itemscope itemtype="http://schema.org/BlogPosting">
 <div class="card-content">
  <header class="post-header">
    <h1 class="post-title" itemprop="name headline">tasty-discover が Windows+日本語環境で動かなかったので直す</h1>
    <p class="post-meta">
      <time datetime="2018-03-04" itemprop="datePublished">
        Mar 4, 2018
      </time>
      
      
      <div class="tags">
          <i class="fa fa-tags"></i> <a href="/tags/Haskell.html">Haskell</a>
      </div>
      
    </p>
  </header>

  <div class="post-content" itemprop="articleBody">
    <p>おそらく少数派であろう Windows + 日本語環境の Haskeller のひげです．</p>
<p>最近は知人のすゝめで，Haskell のテストフレームワークに <a href="https://hackage.haskell.org/package/tasty"><code>tasty</code></a> を使ってます． <code>tasty</code> にも例に漏れず <a href="http://hackage.haskell.org/package/tasty-discover"><code>tasty-discover</code></a> というテスト用の関数を <code>.hs</code> ファイルから集めてきてくれるツールがある． しかし，悲しいことに <code>tasty-discover</code> がマルチバイト文字(日本語とか)を Windows で読み込むと <strong>いつもの</strong> エラーで死んでしまう．</p>
<p>なので，直して PR 出した． この記事はそのメモです．</p>
<h2 id="問題のエラー">問題のエラー</h2>
<pre><code>Building test suite &#39;test&#39; for tasty-discover-4.1.3..
tasty-discover: test\ConfigTest.hs: hGetContents: invalid argument (invalid byte sequence)
`tasty-discover&#39; failed in phase `Haskell pre-processor&#39;. (Exit code: 1)
Progress: 1/2
--  While building custom Setup.hs for package tasty-discover-4.1.3 using:
      C:\Users\Hoge\AppData\Roaming\stack\setup-exe-cache\i386-windows\Cabal-simple_Z6RU0evB_2.0.1.0_ghc-8.2.2.exe --builddir=.stack-work\dist\010ee936 build lib:tasty-discover exe:tasty-discover test:test --ghc-options &quot; -ddump-hi -ddump-to-file -fdiagnostics-color=always&quot;
    Process exited with code: ExitFailure 1</code></pre>
<p><code>hGetContents: invalid argument (invalid byte sequence)</code> は 日本語 Windows Haskeller なら親の顔より良く見るエラーメッセージですね(そんなことは無い)． このエラーは <code>hGetContents</code> で読み込もうとしているファイルの文字コードが，<code>hGetContents</code> で設定されている文字コードと違うために起きている(<code>hGetContents</code> 関数は，例えば <code>readFile</code> 関数などで呼び出されている)．</p>
<h2 id="対処法">対処法</h2>
<p>日本語 Windows Haskeller 筆頭の igrep 氏が Haskell-jp Blog に投稿してくれてる．</p>
<ul>
<li><a href="https://haskell.jp/blog/posts/2017/windows-gotchas.html">WindowsでHaskellを扱う時によく遭遇するエラーと対処法 - Haskell-jp</a></li>
</ul>
<p>今回は(孫プロセスとして読んでるせいか)「それでもダメな場合」に当たる． つまり，場当たり的な解決方法(<code>chcp 65001</code> と打つとか)ではダメで，プログラムを修正するしかない．</p>
<h2 id="section"></h2>
<p>神な igrep 氏は，この場合の解決策も書いておいてくれた． この <a href="https://github.com/haskell/haddock/pull/566">PR</a> を参考にして書き換えてやればよい．</p>
<p><code>tasty-discover</code> も<a href="https://github.com/lwm/tasty-discover/pull/138/files">こんな感じに書き加えた</a>．</p>
<h2 id="pr-を出す">PR を出す</h2>
<p>修正自体は1時間ほどで終わり(移動中の新幹線の中で直した)，これでテストを実行できるようになったので PR を出さずに満足してしまった(あるある)． 半月ほどほっといてたら，同じケースで困った知り合いに <a href="https://github.com/lwm/tasty-discover/issues/135">Issue</a> を出されてしまった(笑)</p>
<p>しょうがないので PR を出そうとしたら，「Windows は良く分からないから，ぜひ Windows 環境用の自動テストも欲しい！」と<a href="https://github.com/lwm/tasty-discover/issues/127">作者に言われてしまった</a>(「時間があればやって」とね)．</p>
<h2 id="section-1"></h2>
<p><a href="https://www.appveyor.com/">AppVeyor</a> と言うのを使えばいいみたい． 調べたらサクッとできそうなので，やってみた．</p>
<ul>
<li><a href="https://www.snoyman.com/blog/2016/08/appveyor-haskell-windows-ci">Using AppVeyor for Haskell+Windows CI</a></li>
</ul>
<p>記事にある設定ファイルをそのままコピペしてやってみたが，問題がふたつあった． ひとつ目は，<code>tasty-discover</code> のテスト自体に <code>tasty-discover</code> を使っている点だ． 最初に <code>stack test</code> を実行するときにはまだ <code>tasty-discover</code> はインストールされてないのでテストが落ちてしまう．</p>
<pre><code>[2 of 2] Compiling Paths_tasty_discover ( .stack-work\dist\010ee936\build\tasty-discover\autogen\Paths_tasty_discover.hs, .stack-work\dist\010ee936\build\tasty-discover\tasty-discover-tmp\Paths_tasty_discover.o )
Linking .stack-work\dist\010ee936\build\tasty-discover\tasty-discover.exe ...
Preprocessing test suite &#39;test&#39; for tasty-discover-4.1.3..
Building test suite &#39;test&#39; for tasty-discover-4.1.3..
ghc.EXE: could not execute: tasty-discover</code></pre>
<p>なので，<code>stack test</code> する前に <code>stack install</code> することにした．</p>
<h2 id="section-2"></h2>
<p>ふたつ目は，そもそも WIndows のビルドが落ちる点． <code>System.FilePath</code> に関するバグだったので，<a href="https://github.com/lwm/tasty-discover/pull/136/files#diff-383b12983902facd1ce205458e1061b6">サクッと直した</a>． Windows のテストに関する <a href="https://github.com/lwm/tasty-discover/pull/136">PR</a> もマージされたので，本命の <a href="https://github.com/lwm/tasty-discover/pull/138">PR</a> も出した(これもマージされた)．</p>
<h2 id="今回の問題をテストする">今回の問題をテストする(？)</h2>
<p>今回の問題のテストも欲しいと言われた． <code>tasty-discover</code> のテスト自体が <code>tasty-discover</code> を使うため，ユニットテストとして表現できない． <code>stack test</code> そのものが落ちるか落ちないかのテストはできるが，それはなんか違うなぁと思い，結局コミットはしていない．</p>
<p>ただし，いちおう AppVeyor で<a href="https://ci.appveyor.com/project/matsubara0507/tasty-discover/build/1.0.9">再現できるようにはした</a>． AppVeyor はデフォルトだと日本語環境になっていない(即ち Shift-JIS じゃない)ため落ちない． なので，以下を参考にして日本語環境にして実行した．</p>
<ul>
<li><a href="https://github.com/appveyor/ci/issues/846">Support a different code page · Issue #846 · appveyor/ci</a></li>
</ul>
<pre><code>init:
- ps: Set-WinSystemLocale ja-JP
- ps: Start-Sleep -s 5
- ps: Restart-Computer</code></pre>
<p>というのを <code>appveyor.yml</code> に書き加えるだけで良い．</p>
<h2 id="おしまい">おしまい</h2>
<p>なんか <a href="https://github.com/lwm/tasty-discover/issues/139">Push 権限を貰った</a>． こういうこともあるんですね(OSS歴が浅いので驚いた)．</p>
  </div>
</div>
</article>
]]></summary>
</entry>
<entry>
    <title>拡張可能タングルでDo記法レスプログラミング♪ (Haskell)</title>
    <link href="https://matsubara0507.github.io/posts/2018-02-22-fun-of-extensible-3.html" />
    <id>https://matsubara0507.github.io/posts/2018-02-22-fun-of-extensible-3.html</id>
    <published>2018-02-22T00:00:00Z</published>
    <updated>2018-02-22T00:00:00Z</updated>
    <summary type="html"><![CDATA[<article class="post card" itemscope itemtype="http://schema.org/BlogPosting">
 <div class="card-content">
  <header class="post-header">
    <h1 class="post-title" itemprop="name headline">拡張可能タングルでDo記法レスプログラミング♪ (Haskell)</h1>
    <p class="post-meta">
      <time datetime="2018-02-22" itemprop="datePublished">
        Feb 22, 2018
      </time>
      
      
      <div class="tags">
          <i class="fa fa-tags"></i> <a href="/tags/Haskell.html">Haskell</a> <a href="/tags/extensible-package.html">extensible-package</a>
      </div>
      
    </p>
  </header>

  <div class="post-content" itemprop="articleBody">
    <p>「<a href="https://hackage.haskell.org/package/extensible"><code>extensible</code></a> パッケージの楽しみ その３」です．</p>
<p>拡張可能レコードやら Extensible Effect やら，Haskell の Extensible なものを全て統一された仕組みで提供する化け物パッケージ <a href="https://hackage.haskell.org/package/extensible-0.4.7.1"><code>extensible</code></a> について，割とドキュメントには無い(？)ネタを書いておくシリーズ第三弾です． ぼく自身は作者ではないし，間違っているかもなのでこの記事を完全には当てにしないでください．</p>
<p>また，現在の最新バージョンは 0.4.7.1 です(そのバージョンでハナシをしてる)．</p>
<h2 id="section"></h2>
<p><a href="/posts/2017-11-28-fun-of-extensible-1.html">前々回</a>は拡張可能レコードの拡縮の話を，<a href="/posts/2018-01-31-fun-of-extensible-2.html">前回</a>は拡張可能直和型(バリアント)を引数に取る関数の話を書きました．</p>
<p>今回は <strong>拡張可能タングル</strong> で遊んでみます． 今回の Haskell コードは基本的に<a href="https://gist.github.com/matsubara0507/be20aa514016c991f19f2e604409cd96">コレ</a>．</p>
<h2 id="拡張可能タングル">拡張可能タングル</h2>
<p>作者さんの拡張可能タングルについての記事があり，非常に分かりやすいです．</p>
<ul>
<li><a href="http://fumieval.hatenablog.com/entry/2016/12/18/181540">波打たせるものの正体(エクステンシブル・タングル) - モナドとわたしとコモナド</a></li>
</ul>
<p>拡張可能タングルを用いれば，文脈付き(<code>IO</code> などの <code>Monad</code> 型クラスのインスタンス)で拡張可能レコードを生成し，更にフィールド間で依存関係を持つ際に，型クラスを用いて各フィールドごとに振る舞いを記述できるようになる． まぁこのヒトコトでは伝わらないですよね．</p>
<p>百聞は一見に如かず．例えば</p>
<div class="sourceCode" id="cb1"><pre class="sourceCode haskell"><code class="sourceCode haskell"><a class="sourceLine" id="cb1-1" data-line-number="1"><span class="kw">type</span> <span class="dt">Rec</span> <span class="fu">=</span> <span class="dt">Record</span> <span class="dt">Fields</span></a>
<a class="sourceLine" id="cb1-2" data-line-number="2"><span class="kw">type</span> <span class="dt">Fields</span> <span class="fu">=</span></a>
<a class="sourceLine" id="cb1-3" data-line-number="3">    <span class="ch">&#39;[ &quot;hoge1&quot; &gt;: String</span></a>
<a class="sourceLine" id="cb1-4" data-line-number="4">     , <span class="st">&quot;hoge2&quot;</span> <span class="fu">&gt;:</span> <span class="dt">Bool</span></a>
<a class="sourceLine" id="cb1-5" data-line-number="5">     , <span class="st">&quot;hoge3&quot;</span> <span class="fu">&gt;:</span> <span class="dt">Int</span></a>
<a class="sourceLine" id="cb1-6" data-line-number="6">     ]</a>
<a class="sourceLine" id="cb1-7" data-line-number="7"></a>
<a class="sourceLine" id="cb1-8" data-line-number="8"><span class="ot">makeRec ::</span> <span class="dt">IO</span> <span class="dt">Rec</span></a>
<a class="sourceLine" id="cb1-9" data-line-number="9">makeRec <span class="fu">=</span> <span class="kw">do</span></a>
<a class="sourceLine" id="cb1-10" data-line-number="10">  hoge1 <span class="ot">&lt;-</span> getLine</a>
<a class="sourceLine" id="cb1-11" data-line-number="11">  hoge3 <span class="ot">&lt;-</span> randomRIO (<span class="dv">0</span>, <span class="dv">2</span> <span class="fu">*</span> length hoge1)</a>
<a class="sourceLine" id="cb1-12" data-line-number="12">  pure</a>
<a class="sourceLine" id="cb1-13" data-line-number="13">     <span class="fu">$</span> <span class="fu">#</span>hoge1 <span class="fu">@=</span> hoge1</a>
<a class="sourceLine" id="cb1-14" data-line-number="14">    <span class="fu">&lt;:</span> <span class="fu">#</span>hoge2 <span class="fu">@=</span> (length hoge1 <span class="fu">&lt;=</span> hoge3)</a>
<a class="sourceLine" id="cb1-15" data-line-number="15">    <span class="fu">&lt;:</span> <span class="fu">#</span>hoge3 <span class="fu">@=</span> hoge3</a>
<a class="sourceLine" id="cb1-16" data-line-number="16">    <span class="fu">&lt;:</span> emptyRecord</a></code></pre></div>
<p>というような関数があったとする． これを拡張可能タングルを使って書き直すと次のようになります．</p>
<div class="sourceCode" id="cb2"><pre class="sourceCode haskell"><code class="sourceCode haskell"><a class="sourceLine" id="cb2-1" data-line-number="1"><span class="ot">makeRec ::</span> <span class="dt">IO</span> <span class="dt">Rec</span></a>
<a class="sourceLine" id="cb2-2" data-line-number="2">makeRec <span class="fu">=</span> runTangles tangles (wrench emptyRecord)</a>
<a class="sourceLine" id="cb2-3" data-line-number="3"></a>
<a class="sourceLine" id="cb2-4" data-line-number="4"><span class="kw">type</span> <span class="dt">FieldI</span> <span class="fu">=</span> <span class="dt">Field</span> <span class="dt">Identity</span></a>
<a class="sourceLine" id="cb2-5" data-line-number="5"></a>
<a class="sourceLine" id="cb2-6" data-line-number="6"><span class="ot">tangles ::</span> <span class="dt">Comp</span> (<span class="dt">TangleT</span> <span class="dt">FieldI</span> <span class="dt">Fields</span> <span class="dt">IO</span>) <span class="dt">FieldI</span> <span class="fu">:*</span> <span class="dt">Fields</span></a>
<a class="sourceLine" id="cb2-7" data-line-number="7">tangles <span class="fu">=</span> htabulateFor (<span class="dt">Proxy</span><span class="ot"> ::</span> <span class="dt">Proxy</span> <span class="dt">MakeRec</span>) <span class="fu">$</span></a>
<a class="sourceLine" id="cb2-8" data-line-number="8">  \m <span class="ot">-&gt;</span> <span class="dt">Comp</span> <span class="fu">$</span> <span class="dt">Field</span> <span class="fu">.</span> pure <span class="fu">&lt;$&gt;</span> make m</a>
<a class="sourceLine" id="cb2-9" data-line-number="9"></a>
<a class="sourceLine" id="cb2-10" data-line-number="10"><span class="kw">class</span> <span class="dt">MakeRec</span> kv <span class="kw">where</span></a>
<a class="sourceLine" id="cb2-11" data-line-number="11"><span class="ot">  make ::</span> proxy kv <span class="ot">-&gt;</span> <span class="dt">TangleT</span> <span class="dt">FieldI</span> <span class="dt">Fields</span> <span class="dt">IO</span> (<span class="dt">AssocValue</span> kv)</a>
<a class="sourceLine" id="cb2-12" data-line-number="12"></a>
<a class="sourceLine" id="cb2-13" data-line-number="13"><span class="kw">instance</span> <span class="dt">MakeRec</span> (<span class="st">&quot;hoge1&quot;</span> <span class="fu">&gt;:</span> <span class="dt">String</span>) <span class="kw">where</span></a>
<a class="sourceLine" id="cb2-14" data-line-number="14">  make _ <span class="fu">=</span> lift getLine</a>
<a class="sourceLine" id="cb2-15" data-line-number="15"></a>
<a class="sourceLine" id="cb2-16" data-line-number="16"><span class="kw">instance</span> <span class="dt">MakeRec</span> (<span class="st">&quot;hoge2&quot;</span> <span class="fu">&gt;:</span> <span class="dt">Bool</span>) <span class="kw">where</span></a>
<a class="sourceLine" id="cb2-17" data-line-number="17">  make _ <span class="fu">=</span> (<span class="fu">&lt;=</span>) <span class="fu">&lt;$&gt;</span> (length <span class="fu">&lt;$&gt;</span> lasso <span class="fu">#</span>hoge1) <span class="fu">&lt;*&gt;</span> lasso <span class="fu">#</span>hoge3</a>
<a class="sourceLine" id="cb2-18" data-line-number="18"></a>
<a class="sourceLine" id="cb2-19" data-line-number="19"><span class="kw">instance</span> <span class="dt">MakeRec</span> (<span class="st">&quot;hoge3&quot;</span> <span class="fu">&gt;:</span> <span class="dt">Int</span>) <span class="kw">where</span></a>
<a class="sourceLine" id="cb2-20" data-line-number="20">  make _ <span class="fu">=</span> <span class="kw">do</span></a>
<a class="sourceLine" id="cb2-21" data-line-number="21">    ml <span class="ot">&lt;-</span> length <span class="fu">&lt;$&gt;</span> lasso <span class="fu">#</span>hoge1</a>
<a class="sourceLine" id="cb2-22" data-line-number="22">    lift <span class="fu">$</span> randomRIO (<span class="dv">0</span>, <span class="dv">2</span> <span class="fu">*</span> ml)</a></code></pre></div>
<p>コード量そのものは倍近くなっている． しかし，フィールドの構築方法ごとにインスタンスメソッドとして切り分けることが出来ている． しかも，<strong>摩訶不思議な <a href="https://hackage.haskell.org/package/extensible-0.4.7.1/docs/Data-Extensible-Tangle.html#v:lasso"><code>lasso</code></a> 関数により依存関係も勝手に解決してくれる</strong> ． もちろん，フィールドのインスタンスが足りないときは，足りないというコンパイルエラーになるよ．</p>
<h2 id="do記法レスプログラミング">Do記法レスプログラミング</h2>
<p>Haskell はなんらかの作用付きの振る舞いは次のように <code>Monad</code> と <code>do</code> 記法を用いて書くのが一般的だ． しかし，便利な Do 記法に甘えて無駄に長い，数十行もある Do 式を書いたことは無いだろうか？ たしかに(関数合成だけで記述するより)読みやすいが，なんかこう…ちがうじゃないですか！？</p>
<h2 id="section-1"></h2>
<p>そこで，先述した拡張可能タングルを用いて長いDo式をフィールドごとに切り分けてみよう． 例題として次のようなログ(っぽいなにか)を読み込む関数を考える．</p>
<div class="sourceCode" id="cb3"><pre class="sourceCode haskell"><code class="sourceCode haskell"><a class="sourceLine" id="cb3-1" data-line-number="1"><span class="kw">type</span> <span class="dt">Log</span> <span class="fu">=</span> <span class="dt">Record</span> <span class="dt">LogFields</span></a>
<a class="sourceLine" id="cb3-2" data-line-number="2"><span class="kw">type</span> <span class="dt">LogFields</span> <span class="fu">=</span></a>
<a class="sourceLine" id="cb3-3" data-line-number="3">    <span class="ch">&#39;[ &quot;path&quot;    &gt;: FilePath</span></a>
<a class="sourceLine" id="cb3-4" data-line-number="4">     , <span class="st">&quot;time&quot;</span>    <span class="fu">&gt;:</span> <span class="dt">Time</span></a>
<a class="sourceLine" id="cb3-5" data-line-number="5">     , <span class="st">&quot;code&quot;</span>    <span class="fu">&gt;:</span> <span class="dt">Int</span></a>
<a class="sourceLine" id="cb3-6" data-line-number="6">     , <span class="st">&quot;message&quot;</span> <span class="fu">&gt;:</span> <span class="dt">Text</span></a>
<a class="sourceLine" id="cb3-7" data-line-number="7">     ]</a>
<a class="sourceLine" id="cb3-8" data-line-number="8"></a>
<a class="sourceLine" id="cb3-9" data-line-number="9"><span class="kw">type</span> <span class="dt">Time</span> <span class="fu">=</span> <span class="dt">Text</span></a>
<a class="sourceLine" id="cb3-10" data-line-number="10"></a>
<a class="sourceLine" id="cb3-11" data-line-number="11"><span class="kw">type</span> <span class="dt">LogCsv</span> <span class="fu">=</span> <span class="dt">Record</span> <span class="dt">CsvFields</span></a>
<a class="sourceLine" id="cb3-12" data-line-number="12"></a>
<a class="sourceLine" id="cb3-13" data-line-number="13"><span class="kw">type</span> <span class="dt">CsvFields</span> <span class="fu">=</span></a>
<a class="sourceLine" id="cb3-14" data-line-number="14">    <span class="ch">&#39;[ &quot;time&quot;    &gt;: Time</span></a>
<a class="sourceLine" id="cb3-15" data-line-number="15">     , <span class="st">&quot;info&quot;</span>    <span class="fu">&gt;:</span> <span class="dt">LB.ByteString</span></a>
<a class="sourceLine" id="cb3-16" data-line-number="16">     ]</a>
<a class="sourceLine" id="cb3-17" data-line-number="17"></a>
<a class="sourceLine" id="cb3-18" data-line-number="18"><span class="kw">type</span> <span class="dt">Info</span> <span class="fu">=</span> <span class="dt">Record</span></a>
<a class="sourceLine" id="cb3-19" data-line-number="19">    <span class="ch">&#39;[ &quot;code&quot;    &gt;: Int</span></a>
<a class="sourceLine" id="cb3-20" data-line-number="20">     , <span class="st">&quot;message&quot;</span> <span class="fu">&gt;:</span> <span class="dt">Text</span></a>
<a class="sourceLine" id="cb3-21" data-line-number="21">     ]</a>
<a class="sourceLine" id="cb3-22" data-line-number="22"></a>
<a class="sourceLine" id="cb3-23" data-line-number="23"><span class="kw">type</span> <span class="dt">EIO</span> <span class="fu">=</span> <span class="dt">Eff</span></a>
<a class="sourceLine" id="cb3-24" data-line-number="24">    <span class="ch">&#39;[ EitherDef String</span></a>
<a class="sourceLine" id="cb3-25" data-line-number="25">     , <span class="st">&quot;IO&quot;</span> <span class="fu">&gt;:</span> <span class="dt">IO</span></a>
<a class="sourceLine" id="cb3-26" data-line-number="26">     ]</a>
<a class="sourceLine" id="cb3-27" data-line-number="27"></a>
<a class="sourceLine" id="cb3-28" data-line-number="28"><span class="ot">runEIO ::</span> <span class="dt">EIO</span> a <span class="ot">-&gt;</span> <span class="dt">IO</span> (<span class="dt">Either</span> <span class="dt">String</span> a)</a>
<a class="sourceLine" id="cb3-29" data-line-number="29">runEIO <span class="fu">=</span> retractEff <span class="fu">.</span> runEitherDef</a>
<a class="sourceLine" id="cb3-30" data-line-number="30"></a>
<a class="sourceLine" id="cb3-31" data-line-number="31"><span class="ot">main ::</span> <span class="dt">IO</span> ()</a>
<a class="sourceLine" id="cb3-32" data-line-number="32">main <span class="fu">=</span> <span class="kw">do</span></a>
<a class="sourceLine" id="cb3-33" data-line-number="33">  result <span class="ot">&lt;-</span> runEIO <span class="fu">$</span> <span class="kw">do</span></a>
<a class="sourceLine" id="cb3-34" data-line-number="34">    (path<span class="fu">:</span>_) <span class="ot">&lt;-</span> liftIO getArgs</a>
<a class="sourceLine" id="cb3-35" data-line-number="35">    file <span class="ot">&lt;-</span>  liftIO (LB.readFile path)</a>
<a class="sourceLine" id="cb3-36" data-line-number="36">    <span class="kw">let</span></a>
<a class="sourceLine" id="cb3-37" data-line-number="37">      csv <span class="fu">=</span> mconcat [header, <span class="st">&quot;\n&quot;</span>, file]</a>
<a class="sourceLine" id="cb3-38" data-line-number="38">    (_, logs) <span class="ot">&lt;-</span> either throwError pure (decodeByName csv)<span class="ot"> ::</span> <span class="dt">EIO</span> (<span class="dt">Header</span>, <span class="dt">LogCsv</span>)</a>
<a class="sourceLine" id="cb3-39" data-line-number="39">    <span class="kw">let</span></a>
<a class="sourceLine" id="cb3-40" data-line-number="40">      log&#39; <span class="fu">=</span> V.head logs</a>
<a class="sourceLine" id="cb3-41" data-line-number="41">    info <span class="ot">&lt;-</span> either throwError pure (eitherDecode <span class="fu">$</span> log&#39; <span class="fu">^.</span> <span class="fu">#</span>info)<span class="ot"> ::</span> <span class="dt">EIO</span> <span class="dt">Info</span></a>
<a class="sourceLine" id="cb3-42" data-line-number="42">    pure <span class="fu">$</span></a>
<a class="sourceLine" id="cb3-43" data-line-number="43">      <span class="fu">#</span>path <span class="fu">@=</span> path <span class="fu">&lt;:</span> <span class="fu">#</span>time <span class="fu">@=</span> (log&#39; <span class="fu">^.</span> <span class="fu">#</span>time) <span class="fu">&lt;:</span> info</a>
<a class="sourceLine" id="cb3-44" data-line-number="44">  either error print result</a>
<a class="sourceLine" id="cb3-45" data-line-number="45"></a>
<a class="sourceLine" id="cb3-46" data-line-number="46"><span class="ot">header ::</span> <span class="dt">LB.ByteString</span></a>
<a class="sourceLine" id="cb3-47" data-line-number="47">header <span class="fu">=</span> LB.intercalate <span class="st">&quot;,&quot;</span> <span class="fu">.</span> fmap fromString <span class="fu">$</span> henumerateFor</a>
<a class="sourceLine" id="cb3-48" data-line-number="48">  (<span class="dt">Proxy</span><span class="ot"> ::</span> <span class="dt">Proxy</span> (<span class="dt">KeyValue</span> <span class="dt">KnownSymbol</span> <span class="dt">Show</span>))</a>
<a class="sourceLine" id="cb3-49" data-line-number="49">  (<span class="dt">Proxy</span><span class="ot"> ::</span> <span class="dt">Proxy</span> <span class="dt">CsvFields</span>)</a>
<a class="sourceLine" id="cb3-50" data-line-number="50">  ((<span class="fu">:</span>) <span class="fu">.</span> symbolVal <span class="fu">.</span> proxyAssocKey)</a>
<a class="sourceLine" id="cb3-51" data-line-number="51">  []</a></code></pre></div>
<p>このメイン関数は次のような CSV をログデータとして読み込んで，2行目の JSON もパースしたうえで，ひとつの拡張可能レコードとして吐き出す．</p>
<pre class="csv"><code>2018-02-23T03:10:00,&quot;{&quot;&quot;code&quot;&quot;:123,&quot;&quot;message&quot;&quot;:&quot;&quot;hello&quot;&quot;}&quot;</code></pre>
<p>正直，この例だと大した長さではないので切り分けるメリットはなーーんにもないんですけど．</p>
<h3 id="stack-script-とカスタムスナップショット"><code>stack script</code> とカスタムスナップショット</h3>
<p>その前に，このメイン関数をどうやって実行するか． この程度のモノをいちいち stack プロジェクトにしていてはスペースの無駄なので，<code>stack script</code> を使う．</p>
<p><code>stack script</code> コマンド知っていますか？ <code>stack runghc</code> と基本的には一緒なのだが，違いは2点(たぶん)．</p>
<ol type="1">
<li>resolver の指定が必須 (たしか <code>runghc</code> は指定しなければプロジェクトのを使うはず)</li>
<li><strong>パッケージを引数で指定する必要が無い</strong></li>
</ol>
<p>(2)がすごいよね． <code>runghc</code> の場合，使ってるパッケージを <code>--package hoge</code> と一つずつ指定しなければならない(今回は<a href="https://gist.github.com/matsubara0507/be20aa514016c991f19f2e604409cd96#file-fun-of-tangle-hs-L13">使ってるパッケージが多い</a>ので尚更大変)が，<code>script</code> なら指定した resolver から自動で解決してくれる．</p>
<h2 id="section-2"></h2>
<p>ただ問題がひとつ． 今回は <a href="https://hackage.haskell.org/package/aeson"><code>aeson</code></a> や <a href="https://hackage.haskell.org/package/cassava"><code>cassava</code></a> の型クラスのインスタンスを拡張可能レコードで使いたいので，Stackage に登録していない <a href="https://github.com/matsubara0507/extensible-instances"><code>matsubara0507/extensible-instances</code></a> にも依存したい． そこで，カスタムスナップショットだ． 日本語で詳しくは下記のサイトにまとまっていた．</p>
<ul>
<li><a href="https://haskell.e-bigmoon.com/posts/2017-12-23-stack161.html">カスタムスナップショットの紹介</a></li>
</ul>
<p>ここには書いてないが，カスタムスナップショットは <code>stack script</code> にも使える． 例えば今回は次のようなカスタムスナップショットを作った．</p>
<div class="sourceCode" id="cb5"><pre class="sourceCode yaml"><code class="sourceCode yaml"><a class="sourceLine" id="cb5-1" data-line-number="1"><span class="fu">resolver:</span><span class="at"> lts-10.6</span></a>
<a class="sourceLine" id="cb5-2" data-line-number="2"><span class="fu">name:</span><span class="at"> matsubara0507</span></a>
<a class="sourceLine" id="cb5-3" data-line-number="3"><span class="fu">packages:</span></a>
<a class="sourceLine" id="cb5-4" data-line-number="4"><span class="kw">-</span> <span class="fu">git:</span><span class="at"> https://github.com/matsubara0507/extensible-instances.git</span></a>
<a class="sourceLine" id="cb5-5" data-line-number="5">  <span class="fu">commit:</span><span class="at"> 8dabe7a3dd9cf162e2d81e4ca16dbe73b98a3809</span></a></code></pre></div>
<p>これを <code>snapshot.yaml</code> とし，例題のコードを <code>fun-of-tangle.hs</code> とすると次のように実行できる</p>
<div class="sourceCode" id="cb6"><pre class="sourceCode bash"><code class="sourceCode bash"><a class="sourceLine" id="cb6-1" data-line-number="1">$ <span class="fu">cat</span> sampleLog.csv</a>
<a class="sourceLine" id="cb6-2" data-line-number="2"><span class="ex">2018-02-23T03</span>:10:00,<span class="st">&quot;{&quot;&quot;code&quot;&quot;:123,&quot;&quot;message&quot;&quot;:&quot;&quot;hello&quot;&quot;}&quot;</span></a>
<a class="sourceLine" id="cb6-3" data-line-number="3"></a>
<a class="sourceLine" id="cb6-4" data-line-number="4">$ <span class="ex">stack</span> script --resolver ./snapshot.yaml -- fun-of-tangle.hs sampleLog.csv</a>
<a class="sourceLine" id="cb6-5" data-line-number="5"><span class="ex">Using</span> resolver: custom: ./snapshot.yaml specified on command line</a>
<a class="sourceLine" id="cb6-6" data-line-number="6"><span class="ex">path</span> @= <span class="st">&quot;sampleLog.csv&quot;</span> <span class="op">&lt;</span>: time @= <span class="st">&quot;2018-02-23T03:10:00&quot;</span> <span class="op">&lt;</span>: code @= 123 <span class="op">&lt;</span>: message @= <span class="st">&quot;hello&quot;</span> <span class="op">&lt;</span>: nil</a></code></pre></div>
<h3 id="ヘッダの生成">ヘッダの生成</h3>
<p>CSV の読み込みには <code>cassava</code> というパッケージを使っている． このパッケージには <code>FromRecord</code> と <code>FromNamedRecord</code> 型クラスがある． 前者は前から順に勝手に取っていくのに対し，後者はフィールド名と CSV の列名を対応させて取ってきてくれる．</p>
<p><code>cassava</code> 系の拡張可能レコードのインスタンスを書いてるときは <code>extensible</code> 力がまだ低く，フィールドからインデックスをとっていくる方法が分からなかった． そのため <code>FromRecord</code> 型クラスのインスタンスが <code>extensible-instances</code> にはない(何故かついこの前，<a href="https://github.com/fumieval/extensible/commit/074210e76ed5bd35f62d452f66c940a40d821534">本家へコミット</a>されたけど)．</p>
<p>なので，型から列名のヘッダーを生成してしまおう，というのが <code>header</code> 関数．</p>
<div class="sourceCode" id="cb7"><pre class="sourceCode haskell"><code class="sourceCode haskell"><a class="sourceLine" id="cb7-1" data-line-number="1"><span class="ot">header ::</span> <span class="dt">LB.ByteString</span></a>
<a class="sourceLine" id="cb7-2" data-line-number="2">header <span class="fu">=</span> LB.intercalate <span class="st">&quot;,&quot;</span> <span class="fu">.</span> fmap fromString <span class="fu">$</span> henumerateFor</a>
<a class="sourceLine" id="cb7-3" data-line-number="3">  (<span class="dt">Proxy</span><span class="ot"> ::</span> <span class="dt">Proxy</span> (<span class="dt">KeyValue</span> <span class="dt">KnownSymbol</span> <span class="dt">Show</span>))</a>
<a class="sourceLine" id="cb7-4" data-line-number="4">  (<span class="dt">Proxy</span><span class="ot"> ::</span> <span class="dt">Proxy</span> <span class="dt">CsvFields</span>)</a>
<a class="sourceLine" id="cb7-5" data-line-number="5">  ((<span class="fu">:</span>) <span class="fu">.</span> symbolVal <span class="fu">.</span> proxyAssocKey)</a>
<a class="sourceLine" id="cb7-6" data-line-number="6">  []</a></code></pre></div>
<p><code>Proxy (KeyValue KnownSymbol Show)</code> ってのが悲しいですよね…(<code>Show</code> は全く無意味)． キー側だけ型クラスを指定する方法は無いような気がしたんだよなぁ．</p>
<h2 id="分割しましょう">分割しましょう</h2>
<p>では本題．</p>
<p>まずは型クラスを考えよう．</p>
<div class="sourceCode" id="cb8"><pre class="sourceCode haskell"><code class="sourceCode haskell"><a class="sourceLine" id="cb8-1" data-line-number="1"><span class="kw">class</span> <span class="dt">MakeLog</span> kv <span class="kw">where</span></a>
<a class="sourceLine" id="cb8-2" data-line-number="2"><span class="ot">  make ::</span> proxy kv <span class="ot">-&gt;</span> <span class="dt">TangleT</span> <span class="dt">FieldI</span> <span class="dt">LogFields</span> <span class="dt">EIO</span> (<span class="dt">AssocValue</span> kv)</a></code></pre></div>
<p>試しに，<code>&quot;path&quot; &gt;: FilePath</code> のインスタンスを書いてみる．</p>
<div class="sourceCode" id="cb9"><pre class="sourceCode haskell"><code class="sourceCode haskell"><a class="sourceLine" id="cb9-1" data-line-number="1"><span class="kw">instance</span> <span class="dt">MakeLog</span> (<span class="st">&quot;path&quot;</span> <span class="fu">&gt;:</span> FilePath) <span class="kw">where</span></a>
<a class="sourceLine" id="cb9-2" data-line-number="2">  make _ <span class="fu">=</span> lift <span class="fu">$</span> liftIO getArgs <span class="fu">&gt;&gt;=</span> \<span class="kw">case</span></a>
<a class="sourceLine" id="cb9-3" data-line-number="3">    (path <span class="fu">:</span> _) <span class="ot">-&gt;</span> pure path</a>
<a class="sourceLine" id="cb9-4" data-line-number="4">    _          <span class="ot">-&gt;</span> throwError <span class="st">&quot;please path.&quot;</span></a></code></pre></div>
<p>他のはできるだろうか？ 元のメイン関数を見ればわかると思うが，たぶん無理だと思う． 他のフィールドは <code>log'</code> 変数に保存した中間状態を共有するからだ．</p>
<h3 id="中間状態をどうするか">中間状態をどうするか</h3>
<p>他にもっといい手はあるかもしれないが，今回は <strong>レコードを中間状態も加えて拡張する</strong> ことにする．</p>
<div class="sourceCode" id="cb10"><pre class="sourceCode haskell"><code class="sourceCode haskell"><a class="sourceLine" id="cb10-1" data-line-number="1"><span class="kw">type</span> <span class="dt">MidFields</span> <span class="fu">=</span> <span class="ch">&#39;[&quot;log&quot; &gt;: LogCsv &#39;</span><span class="fu">:</span> <span class="st">&quot;info&quot;</span> <span class="fu">&gt;:</span> <span class="dt">Info</span>] <span class="fu">++</span> <span class="dt">LogFields</span></a>
<a class="sourceLine" id="cb10-2" data-line-number="2"></a>
<a class="sourceLine" id="cb10-3" data-line-number="3"><span class="kw">class</span> <span class="dt">MakeLog</span> kv <span class="kw">where</span></a>
<a class="sourceLine" id="cb10-4" data-line-number="4"><span class="ot">  make ::</span> proxy kv <span class="ot">-&gt;</span> <span class="dt">TangleT</span> <span class="dt">FieldI</span> <span class="dt">MidFields</span> <span class="dt">EIO</span> (<span class="dt">AssocValue</span> kv)</a></code></pre></div>
<p><a href="https://hackage.haskell.org/package/extensible-0.4.7.1/docs/Data-Extensible-Product.html#t:-43--43-"><code>(++)</code></a> は型レベルリストの連結演算子だ． <code>'[&quot;log&quot; &gt;: LogCsv ': &quot;info&quot; &gt;: Info]</code> が追加する中間状態にあたる． これを最後にどうやって外すかと言うと，実は簡単で <a href="https://hackage.haskell.org/package/extensible-0.4.7.1/docs/Data-Extensible-Inclusion.html#v:shrink"><code>shrink</code></a> 関数で縮小してやればよい．</p>
<div class="sourceCode" id="cb11"><pre class="sourceCode haskell"><code class="sourceCode haskell"><a class="sourceLine" id="cb11-1" data-line-number="1"><span class="ot">makeLog ::</span> <span class="dt">EIO</span> <span class="dt">Log</span></a>
<a class="sourceLine" id="cb11-2" data-line-number="2">makeLog <span class="fu">=</span> shrink <span class="fu">&lt;$&gt;</span> runTangles tangles (wrench emptyRecord)</a>
<a class="sourceLine" id="cb11-3" data-line-number="3"></a>
<a class="sourceLine" id="cb11-4" data-line-number="4"><span class="ot">tangles ::</span> <span class="dt">Comp</span> (<span class="dt">TangleT</span> <span class="dt">FieldI</span> <span class="dt">MidFields</span> <span class="dt">EIO</span>) <span class="dt">FieldI</span> <span class="fu">:*</span> <span class="dt">MidFields</span></a>
<a class="sourceLine" id="cb11-5" data-line-number="5">tangles <span class="fu">=</span> htabulateFor (<span class="dt">Proxy</span><span class="ot"> ::</span> <span class="dt">Proxy</span> <span class="dt">MakeLog</span>) <span class="fu">$</span></a>
<a class="sourceLine" id="cb11-6" data-line-number="6">  \m <span class="ot">-&gt;</span> <span class="dt">Comp</span> <span class="fu">$</span> <span class="dt">Field</span> <span class="fu">.</span> pure <span class="fu">&lt;$&gt;</span> make m</a></code></pre></div>
<p>中間状態のインスタンス定義してしまう．</p>
<div class="sourceCode" id="cb12"><pre class="sourceCode haskell"><code class="sourceCode haskell"><a class="sourceLine" id="cb12-1" data-line-number="1"><span class="kw">instance</span> <span class="dt">MakeLog</span> (<span class="st">&quot;log&quot;</span> <span class="fu">&gt;:</span> <span class="dt">LogCsv</span>) <span class="kw">where</span></a>
<a class="sourceLine" id="cb12-2" data-line-number="2">  make _ <span class="fu">=</span> <span class="kw">do</span></a>
<a class="sourceLine" id="cb12-3" data-line-number="3">    file <span class="ot">&lt;-</span> lift <span class="fu">.</span> liftIO <span class="fu">.</span> LB.readFile <span class="fu">=&lt;&lt;</span> lasso <span class="fu">#</span>path</a>
<a class="sourceLine" id="cb12-4" data-line-number="4">    (_, log&#39;) <span class="ot">&lt;-</span> lift <span class="fu">$</span></a>
<a class="sourceLine" id="cb12-5" data-line-number="5">      either throwError pure (decodeByName <span class="fu">$</span> mconcat [header, <span class="st">&quot;\n&quot;</span>, file])</a>
<a class="sourceLine" id="cb12-6" data-line-number="6">    pure <span class="fu">$</span> V.head log&#39;</a>
<a class="sourceLine" id="cb12-7" data-line-number="7"></a>
<a class="sourceLine" id="cb12-8" data-line-number="8"><span class="kw">instance</span> <span class="dt">MakeLog</span> (<span class="st">&quot;info&quot;</span> <span class="fu">&gt;:</span> <span class="dt">Info</span>) <span class="kw">where</span></a>
<a class="sourceLine" id="cb12-9" data-line-number="9">  make _ <span class="fu">=</span> <span class="kw">do</span></a>
<a class="sourceLine" id="cb12-10" data-line-number="10">    log&#39; <span class="ot">&lt;-</span> lasso <span class="fu">#</span>log</a>
<a class="sourceLine" id="cb12-11" data-line-number="11">    lift <span class="fu">$</span> either throwError pure (eitherDecode <span class="fu">$</span> log&#39; <span class="fu">^.</span> <span class="fu">#</span>info)</a></code></pre></div>
<p>うん…まぁ…読みやすさのためにね，多少は <code>do</code> を残しましたよ(タイトル詐欺)．</p>
<h3 id="残りは簡単">残りは簡単</h3>
<p>あとは，フィールドを取り出すだけなので簡単．</p>
<div class="sourceCode" id="cb13"><pre class="sourceCode haskell"><code class="sourceCode haskell"><a class="sourceLine" id="cb13-1" data-line-number="1"><span class="kw">instance</span> <span class="dt">MakeLog</span> (<span class="st">&quot;time&quot;</span> <span class="fu">&gt;:</span> <span class="dt">Time</span>) <span class="kw">where</span></a>
<a class="sourceLine" id="cb13-2" data-line-number="2">  make _ <span class="fu">=</span> view <span class="fu">#</span>time <span class="fu">&lt;$&gt;</span> lasso <span class="fu">#</span>log</a>
<a class="sourceLine" id="cb13-3" data-line-number="3"></a>
<a class="sourceLine" id="cb13-4" data-line-number="4"><span class="kw">instance</span> <span class="dt">MakeLog</span> (<span class="st">&quot;code&quot;</span> <span class="fu">&gt;:</span> <span class="dt">Int</span>) <span class="kw">where</span></a>
<a class="sourceLine" id="cb13-5" data-line-number="5">  make _ <span class="fu">=</span> view <span class="fu">#</span>code <span class="fu">&lt;$&gt;</span> lasso <span class="fu">#</span>info</a>
<a class="sourceLine" id="cb13-6" data-line-number="6"></a>
<a class="sourceLine" id="cb13-7" data-line-number="7"><span class="kw">instance</span> <span class="dt">MakeLog</span> (<span class="st">&quot;message&quot;</span> <span class="fu">&gt;:</span> <span class="dt">Text</span>) <span class="kw">where</span></a>
<a class="sourceLine" id="cb13-8" data-line-number="8">  make _ <span class="fu">=</span> view <span class="fu">#</span>message <span class="fu">&lt;$&gt;</span> lasso <span class="fu">#</span>info</a></code></pre></div>
<p>メイン関数はこんな感じ．</p>
<div class="sourceCode" id="cb14"><pre class="sourceCode haskell"><code class="sourceCode haskell"><a class="sourceLine" id="cb14-1" data-line-number="1"><span class="ot">main ::</span> <span class="dt">IO</span> ()</a>
<a class="sourceLine" id="cb14-2" data-line-number="2">main <span class="fu">=</span> either error print <span class="fu">=&lt;&lt;</span> runEIO makeLog</a></code></pre></div>
<p>わぁすっきり(メイン関数は)．</p>
<h2 id="おしまい">おしまい</h2>
<p>これぐらいの規模だとメリットが皆無なんですが，もっと CSV の列数が多くなったらどうでしょう？ うーーーん，あんまり変わらないかも(笑) まぁ，少なくとも面白い(不思議な)プログラミングが出来るのは確かです．</p>
<p>僕は試しにこの方法で，<a href="https://github.com/matsubara0507/source-gh-pages/blob/tangle/app/Rules.hs">このサイトの Hakyll コード</a>を切り刻んでみました．</p>
  </div>
</div>
</article>
]]></summary>
</entry>
<entry>
    <title>このサイトに機能を追加 2018</title>
    <link href="https://matsubara0507.github.io/posts/2018-02-21-add-feats-mysite-2018.html" />
    <id>https://matsubara0507.github.io/posts/2018-02-21-add-feats-mysite-2018.html</id>
    <published>2018-02-21T00:00:00Z</published>
    <updated>2018-02-21T00:00:00Z</updated>
    <summary type="html"><![CDATA[<article class="post card" itemscope itemtype="http://schema.org/BlogPosting">
 <div class="card-content">
  <header class="post-header">
    <h1 class="post-title" itemprop="name headline">このサイトに機能を追加 2018</h1>
    <p class="post-meta">
      <time datetime="2018-02-21" itemprop="datePublished">
        Feb 21, 2018
      </time>
      
      
      <div class="tags">
          <i class="fa fa-tags"></i> <a href="/tags/site.html">site</a> <a href="/tags/Haskell.html">Haskell</a>
      </div>
      
    </p>
  </header>

  <div class="post-content" itemprop="articleBody">
    <p>このサイトは Haskell の静的サイトジェネレーター <a href="https://jaspervdj.be/hakyll/">Hakyll</a> を使っています．</p>
<ul>
<li><a href="/posts/2016-07-07-started-github-pages.html">GitHub Pages はじめました - ひげメモ</a></li>
</ul>
<p>定期的に自分のサイトをいじってるんだけど，久々に本腰入れて改良した． このサイトを作り始めたころと違い「Haskell力」が段違いなのでサクサクできたぜ．</p>
<h2 id="section"></h2>
<p>追加したのは以下の7つ．</p>
<ul>
<li>リンクチェッカー</li>
<li>LTS 10 に対応</li>
<li>可変なキーバリューストアを aeson で</li>
<li><code>post/</code> 以下のマークダウン置き場を変更</li>
<li>フィードの生成</li>
<li>ページネーションの追加</li>
<li>タグの追加</li>
</ul>
<p>最初のリンクチェッカーは <code>stack test</code> で行うのだが，追加したのは実は結構前． 記事にしてなかったので書き足しておく．</p>
<h2 id="リンクチェッカー">リンクチェッカー</h2>
<p>記事内にあるリンクを実際に ping して，リンクが有効かを検査するテストを作った． もちろん Haskell で書いて <code>stack test</code> で実行できるようにした． コードはこんな感じ</p>
<div class="sourceCode" id="cb1"><pre class="sourceCode haskell"><code class="sourceCode haskell"><a class="sourceLine" id="cb1-1" data-line-number="1"><span class="ot">{-# LANGUAGE OverloadedStrings #-}</span></a>
<a class="sourceLine" id="cb1-2" data-line-number="2"><span class="kw">module</span> <span class="dt">Main</span> <span class="kw">where</span></a>
<a class="sourceLine" id="cb1-3" data-line-number="3"></a>
<a class="sourceLine" id="cb1-4" data-line-number="4"><span class="kw">import</span>           <span class="dt">Prelude</span>                   <span class="kw">hiding</span> (<span class="dt">FilePath</span>, null)</a>
<a class="sourceLine" id="cb1-5" data-line-number="5"><span class="kw">import</span>           <span class="dt">Data.List</span>                 (nub, sort)</a>
<a class="sourceLine" id="cb1-6" data-line-number="6"><span class="kw">import</span>           <span class="dt">Data.Maybe</span>                (fromMaybe)</a>
<a class="sourceLine" id="cb1-7" data-line-number="7"><span class="kw">import</span>           <span class="dt">Data.Text</span>                 (<span class="dt">Text</span>, isPrefixOf, null, unpack)</a>
<a class="sourceLine" id="cb1-8" data-line-number="8"><span class="kw">import</span>           <span class="dt">Data.Traversable</span>          (traverse)</a>
<a class="sourceLine" id="cb1-9" data-line-number="9"><span class="kw">import</span>           <span class="dt">Network.HTTP.Client</span></a>
<a class="sourceLine" id="cb1-10" data-line-number="10"><span class="kw">import</span>           <span class="dt">Network.HTTP.Client.TLS</span></a>
<a class="sourceLine" id="cb1-11" data-line-number="11"><span class="kw">import</span>           <span class="dt">Network.HTTP.Types.Status</span> (<span class="dt">Status</span>, ok200)</a>
<a class="sourceLine" id="cb1-12" data-line-number="12"><span class="kw">import</span>           <span class="dt">Shelly</span></a>
<a class="sourceLine" id="cb1-13" data-line-number="13"><span class="kw">import</span>           <span class="dt">Test.Hspec</span></a>
<a class="sourceLine" id="cb1-14" data-line-number="14"><span class="kw">import</span>           <span class="dt">Text.HTML.Scalpel.Core</span></a>
<a class="sourceLine" id="cb1-15" data-line-number="15"></a>
<a class="sourceLine" id="cb1-16" data-line-number="16"><span class="ot">main ::</span> <span class="dt">IO</span> ()</a>
<a class="sourceLine" id="cb1-17" data-line-number="17">main <span class="fu">=</span> <span class="kw">do</span></a>
<a class="sourceLine" id="cb1-18" data-line-number="18">  urls <span class="ot">&lt;-</span> fmap mconcat <span class="fu">.</span> shelly <span class="fu">$</span> <span class="kw">do</span></a>
<a class="sourceLine" id="cb1-19" data-line-number="19">    run_ <span class="st">&quot;stack&quot;</span> [<span class="st">&quot;exec&quot;</span>, <span class="st">&quot;--&quot;</span>, <span class="st">&quot;site&quot;</span>, <span class="st">&quot;build&quot;</span>]</a>
<a class="sourceLine" id="cb1-20" data-line-number="20">    files <span class="ot">&lt;-</span> ls <span class="st">&quot;_site/posts&quot;</span></a>
<a class="sourceLine" id="cb1-21" data-line-number="21">    traverse (fmap scrapeLinks <span class="fu">.</span> readfile) files</a>
<a class="sourceLine" id="cb1-22" data-line-number="22">  hspec <span class="fu">.</span> mapM_ spec <span class="fu">.</span> nub <span class="fu">.</span> sort <span class="fu">$</span> filter check urls</a>
<a class="sourceLine" id="cb1-23" data-line-number="23"> <span class="kw">where</span></a>
<a class="sourceLine" id="cb1-24" data-line-number="24">  check url <span class="fu">=</span> not <span class="fu">.</span> or <span class="fu">.</span> (<span class="fu">:</span>) (null url) <span class="fu">$</span> fmap</a>
<a class="sourceLine" id="cb1-25" data-line-number="25">    (<span class="ot">`isPrefixOf`</span> url)</a>
<a class="sourceLine" id="cb1-26" data-line-number="26">    [<span class="st">&quot;https://matsubara0507.github.io&quot;</span>, <span class="st">&quot;../&quot;</span>, <span class="st">&quot;#&quot;</span>]</a>
<a class="sourceLine" id="cb1-27" data-line-number="27">  spec url <span class="fu">=</span> it (unpack url) <span class="fu">$</span> linkStatus url <span class="ot">`shouldReturn`</span> ok200</a>
<a class="sourceLine" id="cb1-28" data-line-number="28"></a>
<a class="sourceLine" id="cb1-29" data-line-number="29"><span class="ot">scrapeLinks ::</span> <span class="dt">Text</span> <span class="ot">-&gt;</span> [<span class="dt">Text</span>]</a>
<a class="sourceLine" id="cb1-30" data-line-number="30">scrapeLinks txt <span class="fu">=</span> fromMaybe [] <span class="fu">$</span> scrapeStringLike txt scraper</a>
<a class="sourceLine" id="cb1-31" data-line-number="31">  <span class="kw">where</span> scraper <span class="fu">=</span> attrs <span class="st">&quot;href&quot;</span> <span class="st">&quot;a&quot;</span></a>
<a class="sourceLine" id="cb1-32" data-line-number="32"></a>
<a class="sourceLine" id="cb1-33" data-line-number="33"><span class="ot">linkStatus ::</span> <span class="dt">Text</span> <span class="ot">-&gt;</span> <span class="dt">IO</span> <span class="dt">Status</span></a>
<a class="sourceLine" id="cb1-34" data-line-number="34">linkStatus url <span class="fu">=</span> <span class="kw">do</span></a>
<a class="sourceLine" id="cb1-35" data-line-number="35">  manager <span class="ot">&lt;-</span> newManager tlsManagerSettings</a>
<a class="sourceLine" id="cb1-36" data-line-number="36">  request <span class="ot">&lt;-</span> parseRequest <span class="fu">$</span> unpack url</a>
<a class="sourceLine" id="cb1-37" data-line-number="37">  responseStatus</a>
<a class="sourceLine" id="cb1-38" data-line-number="38">    <span class="fu">&lt;$&gt;</span> httpNoBody (request { requestHeaders <span class="fu">=</span> [(<span class="st">&quot;User-Agent&quot;</span>, <span class="st">&quot;&quot;</span>)] }) manager</a></code></pre></div>
<p>HTTPクライアントには <a href="https://hackage.haskell.org/package/http-client"><code>http-client</code></a> を，スクレイピングには <a href="https://hackage.haskell.org/package/scalpel"><code>scalpel</code></a> を使っている． <a href="https://hackage.haskell.org/package/shelly"><code>shelly</code></a> の <code>ls</code> 関数を使って記事の一覧を取得してきている(これが Windows でも動くからうれしい)． 表示をそれっぽくするために <a href="https://hackage.haskell.org/package/hspec"><code>hspec</code></a> を使っている． <code>check</code> 補助関数で自分のページや空文字を排除している．</p>
<h2 id="section-1"></h2>
<p>これでリンク切れや単純にタイポなんかを検出できるようになったんだが，直すのがめんどくさくて結局放置していること(オイ)．</p>
<h2 id="lts-10-に対応">LTS 10 に対応</h2>
<p>リンクチェッカを回すために TravisCI を使い始めたが，なぜか GHC8 系の LTS だと OUT OF MEMORY してしまう…</p>
<pre><code>--  While building custom Setup.hs for package Cabal-2.0.1.1 using:
      /home/travis/.stack/setup-exe-cache/x86_64-linux/Cabal-simple_mPHDZzAJ_2.0.1.0_ghc-8.2.2 --builddir=.stack-work/dist/x86_64-linux/Cabal-2.0.1.0 build --ghc-options &quot; -ddump-hi -ddump-to-file -fdiagnostics-color=always&quot;
    Process exited with code: ExitFailure (-9) (THIS MAY INDICATE OUT OF MEMORY)
    Logs have been written to: /home/travis/build/matsubara0507/source-gh-pages/.stack-work/logs/Cabal-2.0.1.1.log
    Configuring Cabal-2.0.1.1...
    Preprocessing library for Cabal-2.0.1.1..
    Building library for Cabal-2.0.1.1..</code></pre>
<p>かなーーり古い LTS だとうまくいくので，仕方なくそれを使っていたのだが直すことにした． というか知り合いが直し方を記事にしてくれてたのでやってみた．</p>
<ul>
<li><a href="https://haskell.e-bigmoon.com/posts/2017-12-31-travis-out-of-memory.html">travis-ci の初回ビルドで OUT OF MEMORY が出た時の対処法</a></li>
</ul>
<p>戦犯は <code>Cabal</code> パッケージなので，こいつだけ先に <code>-j 1</code> オプション(メモリを節約するが速度が遅い)でビルドしてしまうという戦略． この記事のサイトの <a href="https://github.com/e-bigmoon/haskell-blog/blob/a229f118f121e0ad843faae1412e938e3e4f3a6b/.travis.yml"><code>.travis.yml</code></a> を <del>コピペ</del> 参考にして次のようにした</p>
<div class="sourceCode" id="cb3"><pre class="sourceCode yaml"><code class="sourceCode yaml"><a class="sourceLine" id="cb3-1" data-line-number="1"><span class="fu">install:</span></a>
<a class="sourceLine" id="cb3-2" data-line-number="2">  <span class="kw">-</span> mkdir -p ~/.local/bin</a>
<a class="sourceLine" id="cb3-3" data-line-number="3">  <span class="kw">-</span> <span class="fu">export PATH=$HOME/.local/bin:</span><span class="at">$PATH</span></a>
<a class="sourceLine" id="cb3-4" data-line-number="4">  <span class="kw">-</span> <span class="fu">travis_retry curl -L https:</span><span class="at">//www.stackage.org/stack/linux-x86_64 | tar xz --wildcards --strip-components=1 -C ~/.local/bin &#39;*/stack&#39;</span></a>
<a class="sourceLine" id="cb3-5" data-line-number="5"><span class="fu">jobs:</span></a>
<a class="sourceLine" id="cb3-6" data-line-number="6">  <span class="fu">include:</span></a>
<a class="sourceLine" id="cb3-7" data-line-number="7">    <span class="kw">-</span> <span class="fu">stage:</span><span class="at"> install cabal</span></a>
<a class="sourceLine" id="cb3-8" data-line-number="8">      <span class="fu">script:</span><span class="at"> stack --no-terminal build -j 1 Cabal</span></a>
<a class="sourceLine" id="cb3-9" data-line-number="9">    <span class="kw">-</span> <span class="fu">stage:</span><span class="at"> install pandoc</span></a>
<a class="sourceLine" id="cb3-10" data-line-number="10">      <span class="fu">script:</span><span class="at"> travis_wait 30 stack --no-terminal build pandoc</span></a>
<a class="sourceLine" id="cb3-11" data-line-number="11">    <span class="kw">-</span> <span class="fu">stage:</span><span class="at"> install deprndences</span></a>
<a class="sourceLine" id="cb3-12" data-line-number="12">      <span class="fu">script:</span><span class="at"> stack --no-terminal test --only-dependencies</span></a>
<a class="sourceLine" id="cb3-13" data-line-number="13">    <span class="kw">-</span> <span class="fu">stage:</span><span class="at"> stack test</span></a>
<a class="sourceLine" id="cb3-14" data-line-number="14">      <span class="fu">script:</span><span class="at"> stack --no-terminal test --no-run-benchmarks --no-haddock-deps</span></a></code></pre></div>
<h3 id="hakyll-4.10-が落ちる">hakyll-4.10 が落ちる</h3>
<p>OUT OF MEMORY は突破したが…</p>
<div class="sourceCode" id="cb4"><pre class="sourceCode haskell"><code class="sourceCode haskell"><a class="sourceLine" id="cb4-1" data-line-number="1">    <span class="fu">/</span>tmp<span class="fu">/</span>stack3402<span class="fu">/</span>hakyll<span class="fu">-</span><span class="fl">4.10</span><span class="fu">.</span><span class="fl">0.0</span><span class="fu">/</span>rts<span class="fu">/</span>posix<span class="fu">/</span>OSThreads.c<span class="fu">:</span><span class="dv">137</span><span class="fu">:</span><span class="dv">0</span><span class="fu">:</span> error<span class="fu">:</span></a>
<a class="sourceLine" id="cb4-2" data-line-number="2">         error<span class="fu">:</span> undefined reference to <span class="ch">&#39;pthread_create&#39;</span></a></code></pre></div>
<p>なぜだ… 最新の <a href="https://github.com/jaspervdj/hakyll/commit/480da307d22aff8ab3817d1586710c5f4ff6d779"><code>hakyll-4.11</code> では直ってるみたい</a>なので，<code>stack.yaml</code> に追加したら上手くいった．</p>
<div class="sourceCode" id="cb5"><pre class="sourceCode yaml"><code class="sourceCode yaml"><a class="sourceLine" id="cb5-1" data-line-number="1"><span class="fu">extra-deps:</span></a>
<a class="sourceLine" id="cb5-2" data-line-number="2"><span class="kw">-</span> hakyll-4.11.0.0</a>
<a class="sourceLine" id="cb5-3" data-line-number="3"><span class="kw">-</span> pandoc-citeproc-0.13.0.1</a></code></pre></div>
<h3 id="シンタックスハイライトが">シンタックスハイライトが…</h3>
<p>おかしくなった． 理由は簡単で，Hakyll というか Pandoc がシンタックスハイライトにもともと使っていた <a href="https://hackage.haskell.org/package/highlighting-kate"><code>highlighting-kate</code></a> をやめて <a href="https://hackage.haskell.org/package/skylighting"><code>skylighting</code></a> に対応したからみたいだ．</p>
<ul>
<li><a href="http://fixpt.de/blog/2017-12-03-hakyll-highlighting-themes.html">fixpt - Hakyll Code Highlighting Themes</a></li>
</ul>
<p>なので，パッケージを変えたら元に戻った．</p>
<h2 id="可変なキーバリューストアを-aeson-で">可変なキーバリューストアを aeson で</h2>
<p>テンプレートの方だけで出てくる変数(e.g. <code>$github$</code> とか)は <code>site.hs</code> の実装に依存したくなくて，Hakyll をビルドせずとも <code>config.yaml</code> に好きに追加できるようにしたかった． <a href="https://hackage.haskell.org/package/yaml">yaml</a> パッケージ(というか <a href="https://hackage.haskell.org/package/aeson"><code>aeson</code></a>)ではそういうのを出来ないと <strong>思い込んでいたが <code>Map k v</code> 型を使えばできる</strong> と最近分かった(インスタンスのリストを眺めてたら気づいた)． なので，今まで使ってた <a href="https://hackage.haskell.org/package/yaml-light"><code>yaml-light</code></a> パッケージを捨てて <code>yaml</code> パッケージで次のように実装した．</p>
<div class="sourceCode" id="cb6"><pre class="sourceCode haskell"><code class="sourceCode haskell"><a class="sourceLine" id="cb6-1" data-line-number="1"><span class="kw">import</span>           <span class="dt">Data.Yaml</span>   (decodeFileEither)</a>
<a class="sourceLine" id="cb6-2" data-line-number="2"><span class="kw">import</span>           <span class="dt">Data.Map</span>    (<span class="dt">Map</span>, foldMapWithKey)</a>
<a class="sourceLine" id="cb6-3" data-line-number="3"><span class="kw">import</span>           <span class="dt">Hakyll</span></a>
<a class="sourceLine" id="cb6-4" data-line-number="4"></a>
<a class="sourceLine" id="cb6-5" data-line-number="5"><span class="ot">main ::</span> <span class="dt">IO</span> ()</a>
<a class="sourceLine" id="cb6-6" data-line-number="6">main <span class="fu">=</span> <span class="kw">do</span></a>
<a class="sourceLine" id="cb6-7" data-line-number="7">  configYaml <span class="ot">&lt;-</span> either (error <span class="fu">.</span> show) id <span class="fu">&lt;$&gt;</span> decodeFileEither <span class="st">&quot;config.yaml&quot;</span></a>
<a class="sourceLine" id="cb6-8" data-line-number="8">  <span class="kw">let</span></a>
<a class="sourceLine" id="cb6-9" data-line-number="9">    siteCtx <span class="fu">=</span> mkSiteCtx configYaml</a>
<a class="sourceLine" id="cb6-10" data-line-number="10">  hakyllWith config <span class="fu">$</span> <span class="kw">do</span></a>
<a class="sourceLine" id="cb6-11" data-line-number="11">    <span class="fu">...</span></a>
<a class="sourceLine" id="cb6-12" data-line-number="12"></a>
<a class="sourceLine" id="cb6-13" data-line-number="13"><span class="kw">type</span> <span class="dt">Config</span> <span class="fu">=</span> <span class="dt">Map</span> <span class="dt">String</span> <span class="dt">String</span></a>
<a class="sourceLine" id="cb6-14" data-line-number="14"></a>
<a class="sourceLine" id="cb6-15" data-line-number="15"><span class="ot">mkSiteCtx ::</span> <span class="dt">Config</span> <span class="ot">-&gt;</span> <span class="dt">Context</span> <span class="dt">String</span></a>
<a class="sourceLine" id="cb6-16" data-line-number="16">mkSiteCtx <span class="fu">=</span> foldMapWithKey constField</a></code></pre></div>
<p>こういう <code>config.yaml</code> を書いておくと，全てテンプレートの中で参照できる．</p>
<div class="sourceCode" id="cb7"><pre class="sourceCode yaml"><code class="sourceCode yaml"><a class="sourceLine" id="cb7-1" data-line-number="1"><span class="fu">site_title:</span><span class="at"> ひげメモ</span></a>
<a class="sourceLine" id="cb7-2" data-line-number="2"><span class="fu">description:</span><span class="at"> </span><span class="st">&quot;自分用のメモ書きだったり，イロイロといじって遊ぶようだったり&quot;</span></a>
<a class="sourceLine" id="cb7-3" data-line-number="3"><span class="fu">baseurl:</span><span class="at"> </span><span class="st">&quot;https://matsubara0507.github.io&quot;</span></a>
<a class="sourceLine" id="cb7-4" data-line-number="4"><span class="fu">github:</span><span class="at">  matsubara0507</span></a></code></pre></div>
<h2 id="post-以下のマークダウン置き場を変更"><code>post/</code> 以下のマークダウン置き場を変更</h2>
<p>記事のマークダウンは全て <code>posts/</code> 以下に置いていたのだが，各年ごとにディレクトリを切りたいなぁと思った． 例えば <code>posts/2018/02-21-add-feats-mysite-2018.md</code> といった具合に． しかし，出力は今まで通り <code>posts/2018-02-21-add-feats-mysite-2018.html</code> としたい(リンクが変わっちゃうからね)． まんま<a href="http://daimatz.net/text/2014/0126-hakyll.html">同じことをしてくれている記事</a>があったので，参考にして次のように書き換えた．</p>
<div class="sourceCode" id="cb8"><pre class="sourceCode haskell"><code class="sourceCode haskell"><a class="sourceLine" id="cb8-1" data-line-number="1"><span class="ot">main ::</span> <span class="dt">IO</span> ()</a>
<a class="sourceLine" id="cb8-2" data-line-number="2">main <span class="fu">=</span> <span class="kw">do</span></a>
<a class="sourceLine" id="cb8-3" data-line-number="3">  <span class="fu">...</span></a>
<a class="sourceLine" id="cb8-4" data-line-number="4">  match <span class="st">&quot;posts/*/*&quot;</span> <span class="fu">$</span> <span class="kw">do</span></a>
<a class="sourceLine" id="cb8-5" data-line-number="5">    route <span class="fu">$</span> composeRoutes (gsubRoute <span class="st">&quot;/[0-9]{4}/&quot;</span> <span class="fu">$</span> (<span class="fu">++</span> <span class="st">&quot;-&quot;</span>) <span class="fu">.</span> init)</a>
<a class="sourceLine" id="cb8-6" data-line-number="6">                          (setExtension <span class="st">&quot;html&quot;</span>)</a>
<a class="sourceLine" id="cb8-7" data-line-number="7">    compile</a>
<a class="sourceLine" id="cb8-8" data-line-number="8">      <span class="fu">$</span>   pandocCompiler</a>
<a class="sourceLine" id="cb8-9" data-line-number="9">      <span class="fu">&gt;&gt;=</span> loadAndApplyTemplate <span class="st">&quot;templates/post.html&quot;</span> postCtx</a>
<a class="sourceLine" id="cb8-10" data-line-number="10">      <span class="fu">&gt;&gt;=</span> loadAndApplyTemplate <span class="st">&quot;templates/default.html&quot;</span> (postCtx <span class="fu">&lt;&gt;</span> siteCtx)</a>
<a class="sourceLine" id="cb8-11" data-line-number="11">      <span class="fu">&gt;&gt;=</span> relativizeUrls</a></code></pre></div>
<p><code>gsubRoute</code> 関数を使うことで，ファイル名を特有のパターン記法(？)でマッチさせ置換できる． <code>gsubRoute &quot;/[0-9]{4}/&quot; $ (++ &quot;-&quot;) . init</code> の場合，<code>/2018/</code> をマッチさせ <code>init</code> して <code>/2018</code> となり，末尾に <code>&quot;-&quot;</code> を追加している．</p>
<h2 id="section-2"></h2>
<p>さて実はもう一つ問題があって，Hakyll は日時を表すテンプレート変数(<code>$date$</code> とか)を次のように取得する．</p>
<div class="sourceCode" id="cb9"><pre class="sourceCode haskell"><code class="sourceCode haskell"><a class="sourceLine" id="cb9-1" data-line-number="1"><span class="ot">postCtx ::</span> <span class="dt">Context</span> <span class="dt">String</span></a>
<a class="sourceLine" id="cb9-2" data-line-number="2">postCtx <span class="fu">=</span> mconcat</a>
<a class="sourceLine" id="cb9-3" data-line-number="3">  [ dateField <span class="st">&quot;time&quot;</span> <span class="st">&quot;%Y-%m-%d&quot;</span></a>
<a class="sourceLine" id="cb9-4" data-line-number="4">  , dateField <span class="st">&quot;date&quot;</span> <span class="st">&quot;%b %-d, %Y&quot;</span></a>
<a class="sourceLine" id="cb9-5" data-line-number="5">  , defaultContext</a>
<a class="sourceLine" id="cb9-6" data-line-number="6">  ]</a></code></pre></div>
<p><code>dateField</code> 関数が記事のファイル名(<code>yyyy-mm-dd-*.md</code> の部分)かマークダウンのメタ変数から取得している． つまり，<code>posts/2018/02-21-add-feats-mysite-2018.md</code> というファイル名じゃ日時の変数を取得できない． しょうがないので Hakyll のソースコードを読んで無理やり書き換えた．</p>
<div class="sourceCode" id="cb10"><pre class="sourceCode haskell"><code class="sourceCode haskell"><a class="sourceLine" id="cb10-1" data-line-number="1"><span class="kw">import</span>           <span class="dt">Data.Time</span></a>
<a class="sourceLine" id="cb10-2" data-line-number="2"><span class="kw">import</span>           <span class="dt">System.FilePath</span></a>
<a class="sourceLine" id="cb10-3" data-line-number="3"></a>
<a class="sourceLine" id="cb10-4" data-line-number="4"><span class="ot">dateField&#39; ::</span> <span class="dt">String</span> <span class="ot">-&gt;</span> <span class="dt">String</span> <span class="ot">-&gt;</span> <span class="dt">Context</span> a</a>
<a class="sourceLine" id="cb10-5" data-line-number="5">dateField&#39; key format <span class="fu">=</span> field key <span class="fu">$</span> \item <span class="ot">-&gt;</span> <span class="kw">do</span></a>
<a class="sourceLine" id="cb10-6" data-line-number="6">  time <span class="ot">&lt;-</span> getItemUTC&#39; defaultTimeLocale <span class="fu">$</span> itemIdentifier item</a>
<a class="sourceLine" id="cb10-7" data-line-number="7">  return <span class="fu">$</span> formatTime defaultTimeLocale format time</a>
<a class="sourceLine" id="cb10-8" data-line-number="8"></a>
<a class="sourceLine" id="cb10-9" data-line-number="9"><span class="ot">getItemUTC&#39; ::</span> <span class="dt">MonadMetadata</span> m <span class="ot">=&gt;</span> <span class="dt">TimeLocale</span> <span class="ot">-&gt;</span> <span class="dt">Identifier</span> <span class="ot">-&gt;</span> m <span class="dt">UTCTime</span></a>
<a class="sourceLine" id="cb10-10" data-line-number="10">getItemUTC&#39; locale ident <span class="fu">=</span></a>
<a class="sourceLine" id="cb10-11" data-line-number="11">  pure <span class="fu">$</span> parseTimeOrError <span class="dt">True</span> locale <span class="st">&quot;%Y%m-%d&quot;</span> (yyyy <span class="fu">++</span> mmdd)</a>
<a class="sourceLine" id="cb10-12" data-line-number="12">  <span class="kw">where</span></a>
<a class="sourceLine" id="cb10-13" data-line-number="13">    path <span class="fu">=</span> toFilePath ident</a>
<a class="sourceLine" id="cb10-14" data-line-number="14">    yyyy <span class="fu">=</span> takeFileName <span class="fu">$</span> takeDirectory path</a>
<a class="sourceLine" id="cb10-15" data-line-number="15">    mmdd <span class="fu">=</span> take <span class="dv">5</span> <span class="fu">$</span> takeBaseName path</a></code></pre></div>
<p>さっきの <code>dateField</code> の部分を <code>dateField'</code> にすれば記事のビルドが出来る！</p>
<h3 id="vs-recentfirst-関数">vs <code>recentFirst</code> 関数</h3>
<p>記事を日時順に並び変えてくれる <code>recentFirst</code> 関数もファイル名に依存してる． しょうがないので力技で書き換える．</p>
<div class="sourceCode" id="cb11"><pre class="sourceCode haskell"><code class="sourceCode haskell"><a class="sourceLine" id="cb11-1" data-line-number="1"><span class="kw">import</span>           <span class="dt">Data.List</span>       (sortBy)</a>
<a class="sourceLine" id="cb11-2" data-line-number="2"><span class="kw">import</span>           <span class="dt">Data.Ord</span>        (comparing)</a>
<a class="sourceLine" id="cb11-3" data-line-number="3"></a>
<a class="sourceLine" id="cb11-4" data-line-number="4"><span class="ot">recentFirst&#39; ::</span> <span class="dt">MonadMetadata</span> m <span class="ot">=&gt;</span> [<span class="dt">Item</span> a] <span class="ot">-&gt;</span> m [<span class="dt">Item</span> a]</a>
<a class="sourceLine" id="cb11-5" data-line-number="5">recentFirst&#39; <span class="fu">=</span> fmap reverse <span class="fu">.</span> chronological&#39;</a>
<a class="sourceLine" id="cb11-6" data-line-number="6"></a>
<a class="sourceLine" id="cb11-7" data-line-number="7"><span class="ot">chronological&#39; ::</span> <span class="dt">MonadMetadata</span> m <span class="ot">=&gt;</span> [<span class="dt">Item</span> a] <span class="ot">-&gt;</span> m [<span class="dt">Item</span> a]</a>
<a class="sourceLine" id="cb11-8" data-line-number="8">chronological&#39; <span class="fu">=</span></a>
<a class="sourceLine" id="cb11-9" data-line-number="9">  sortByM <span class="fu">$</span> getItemUTC&#39; defaultTimeLocale <span class="fu">.</span> itemIdentifier</a>
<a class="sourceLine" id="cb11-10" data-line-number="10"></a>
<a class="sourceLine" id="cb11-11" data-line-number="11"><span class="ot">sortByM ::</span> (<span class="dt">Monad</span> m, <span class="dt">Ord</span> k) <span class="ot">=&gt;</span> (a <span class="ot">-&gt;</span> m k) <span class="ot">-&gt;</span> [a] <span class="ot">-&gt;</span> m [a]</a>
<a class="sourceLine" id="cb11-12" data-line-number="12">sortByM f <span class="fu">=</span> fmap (map fst <span class="fu">.</span> sortBy (comparing snd)) <span class="fu">.</span> mapM (fmap <span class="fu">&lt;$&gt;</span> (,) <span class="fu">&lt;*&gt;</span> f)</a></code></pre></div>
<p><code>sortByM</code> 関数は <code>sortBy</code> の <code>Monad</code> 版． <code>[a]</code> を <code>[(a, m k)]</code> とし <code>[m (a, k)]</code> にして <code>m [(a, k)]</code> にしてから <code>k</code> でソートし最後に <code>a</code> だけ取り出している． ちなみに，<code>fmap &lt;$&gt; (,) &lt;*&gt; f</code> の部分は分かりますか？ <code>\x -&gt; (,) x &lt;$&gt; f x</code> をしてるだけですよ．</p>
<h2 id="フィードページネーションタグ">フィード・ページネーション・タグ</h2>
<p>実はフィード生成・ページネーション・タグは，もとから Hakyll で提供されている機能だ． どれもこの記事に日本語で書いてある．</p>
<ul>
<li><a href="https://imokuri123.com/blog/2015/12/how-to-create-blog-with-hakyll-part2.html">Hakyllでブログを作る(実践編2) - Wake up! Good night*</a></li>
<li><a href="https://imokuri123.com/blog/2015/12/how-to-create-blog-with-hakyll-part3.html">Hakyllでブログを作る(実践編3) - Wake up! Good night*</a></li>
</ul>
<p>だが躓きポイントはいくつかあった(だいたい日時のやつだけど…)．</p>
<h3 id="フィードを生成">フィードを生成</h3>
<p>記事の通りに作っても <code>$published$</code> 変数が無いと怒られる． <code>renderAtom</code> 関数の中で <code>dateField</code> 関数を使っているからだ． さすがに書き換えるのはめんどいので，自分で取ってくることにした．</p>
<div class="sourceCode" id="cb12"><pre class="sourceCode haskell"><code class="sourceCode haskell"><a class="sourceLine" id="cb12-1" data-line-number="1"><span class="ot">postCtx ::</span> <span class="dt">Context</span> <span class="dt">String</span></a>
<a class="sourceLine" id="cb12-2" data-line-number="2">postCtx <span class="fu">=</span> mconcat</a>
<a class="sourceLine" id="cb12-3" data-line-number="3">  [ dateField <span class="st">&quot;time&quot;</span> <span class="st">&quot;%Y-%m-%d&quot;</span></a>
<a class="sourceLine" id="cb12-4" data-line-number="4">  , dateField <span class="st">&quot;date&quot;</span> <span class="st">&quot;%b %-d, %Y&quot;</span></a>
<a class="sourceLine" id="cb12-5" data-line-number="5">  , dateField&#39; <span class="st">&quot;published&quot;</span> <span class="st">&quot;%Y-%m-%dT%H:%M:%SZ&quot;</span></a>
<a class="sourceLine" id="cb12-6" data-line-number="6">  , dateField&#39; <span class="st">&quot;updated&quot;</span> <span class="st">&quot;%Y-%m-%dT%H:%M:%SZ&quot;</span></a>
<a class="sourceLine" id="cb12-7" data-line-number="7">  , defaultContext</a>
<a class="sourceLine" id="cb12-8" data-line-number="8">  ]</a></code></pre></div>
<p>あと，<a href="https://hackage.haskell.org/package/hakyll-4.11.0.0/docs/Hakyll-Web-Feed.html#t:FeedConfiguration">フィードに渡す変数</a>は <code>config.yaml</code> に書くことにした．</p>
<div class="sourceCode" id="cb13"><pre class="sourceCode yaml"><code class="sourceCode yaml"><a class="sourceLine" id="cb13-1" data-line-number="1"><span class="fu">site_title:</span><span class="at"> ひげメモ</span></a>
<a class="sourceLine" id="cb13-2" data-line-number="2"><span class="fu">author:</span><span class="at"> MATSUBARA Nobutada</span></a>
<a class="sourceLine" id="cb13-3" data-line-number="3"><span class="fu">email:</span><span class="at"> </span><span class="st">&quot;&quot;</span></a>
<a class="sourceLine" id="cb13-4" data-line-number="4"><span class="fu">description:</span><span class="at"> </span><span class="st">&quot;自分用のメモ書きだったり，イロイロといじって遊ぶようだったり&quot;</span></a>
<a class="sourceLine" id="cb13-5" data-line-number="5"><span class="fu">baseurl:</span><span class="at"> </span><span class="st">&quot;https://matsubara0507.github.io&quot;</span></a>
<a class="sourceLine" id="cb13-6" data-line-number="6"><span class="fu">val:</span></a>
<a class="sourceLine" id="cb13-7" data-line-number="7">  <span class="fu">github:</span><span class="at"> matsubara0507</span></a></code></pre></div>
<p>これを <code>Config</code> 型という拡張可能レコードにマッピングし，そのあとに <code>FeedConfiguration</code> 型に変換する．</p>
<div class="sourceCode" id="cb14"><pre class="sourceCode haskell"><code class="sourceCode haskell"><a class="sourceLine" id="cb14-1" data-line-number="1"><span class="kw">import</span> <span class="dt">Control.Lens</span> ((^.))</a>
<a class="sourceLine" id="cb14-2" data-line-number="2"><span class="kw">import</span> <span class="dt">Data.Extensible</span></a>
<a class="sourceLine" id="cb14-3" data-line-number="3"></a>
<a class="sourceLine" id="cb14-4" data-line-number="4"><span class="kw">type</span> <span class="dt">Config</span> <span class="fu">=</span> <span class="dt">Record</span></a>
<a class="sourceLine" id="cb14-5" data-line-number="5">  <span class="ch">&#39;[ &quot;site_title&quot; &gt;: String</span></a>
<a class="sourceLine" id="cb14-6" data-line-number="6">   , <span class="st">&quot;author&quot;</span> <span class="fu">&gt;:</span> <span class="dt">String</span></a>
<a class="sourceLine" id="cb14-7" data-line-number="7">   , <span class="st">&quot;email&quot;</span> <span class="fu">&gt;:</span> <span class="dt">String</span></a>
<a class="sourceLine" id="cb14-8" data-line-number="8">   , <span class="st">&quot;description&quot;</span> <span class="fu">&gt;:</span> <span class="dt">String</span></a>
<a class="sourceLine" id="cb14-9" data-line-number="9">   , <span class="st">&quot;baseurl&quot;</span> <span class="fu">&gt;:</span> <span class="dt">String</span></a>
<a class="sourceLine" id="cb14-10" data-line-number="10">   , <span class="st">&quot;val&quot;</span> <span class="fu">&gt;:</span> <span class="dt">Map</span> <span class="dt">String</span> <span class="dt">String</span></a>
<a class="sourceLine" id="cb14-11" data-line-number="11">   ]</a>
<a class="sourceLine" id="cb14-12" data-line-number="12"></a>
<a class="sourceLine" id="cb14-13" data-line-number="13"><span class="ot">mkFeedConfig ::</span> <span class="dt">Config</span> <span class="ot">-&gt;</span> <span class="dt">FeedConfiguration</span></a>
<a class="sourceLine" id="cb14-14" data-line-number="14">mkFeedConfig conf <span class="fu">=</span> <span class="dt">FeedConfiguration</span></a>
<a class="sourceLine" id="cb14-15" data-line-number="15">  { feedTitle       <span class="fu">=</span> conf <span class="fu">^.</span> <span class="fu">#</span>site_title</a>
<a class="sourceLine" id="cb14-16" data-line-number="16">  , feedDescription <span class="fu">=</span> conf <span class="fu">^.</span> <span class="fu">#</span>description</a>
<a class="sourceLine" id="cb14-17" data-line-number="17">  , feedAuthorName  <span class="fu">=</span> conf <span class="fu">^.</span> <span class="fu">#</span>author</a>
<a class="sourceLine" id="cb14-18" data-line-number="18">  , feedAuthorEmail <span class="fu">=</span> conf <span class="fu">^.</span> <span class="fu">#</span>email</a>
<a class="sourceLine" id="cb14-19" data-line-number="19">  , feedRoot        <span class="fu">=</span> conf <span class="fu">^.</span> <span class="fu">#</span>baseurl</a>
<a class="sourceLine" id="cb14-20" data-line-number="20">  }</a></code></pre></div>
<p>もちろん，<code>siteCtx</code> も書き換える必要がある．</p>
<div class="sourceCode" id="cb15"><pre class="sourceCode haskell"><code class="sourceCode haskell"><a class="sourceLine" id="cb15-1" data-line-number="1"><span class="ot">mkSiteCtx ::</span> <span class="dt">Config</span> <span class="ot">-&gt;</span> <span class="dt">Context</span> <span class="dt">String</span></a>
<a class="sourceLine" id="cb15-2" data-line-number="2">mkSiteCtx <span class="fu">=</span> hfoldMapFor</a>
<a class="sourceLine" id="cb15-3" data-line-number="3">  (<span class="dt">Proxy</span><span class="ot"> ::</span> <span class="dt">Proxy</span> (<span class="dt">KeyValue</span> <span class="dt">KnownSymbol</span> <span class="dt">ToContext</span>))</a>
<a class="sourceLine" id="cb15-4" data-line-number="4">  (toContext <span class="fu">&lt;$&gt;</span> symbolVal <span class="fu">.</span> proxyAssocKey <span class="fu">&lt;*&gt;</span> getField)</a>
<a class="sourceLine" id="cb15-5" data-line-number="5"></a>
<a class="sourceLine" id="cb15-6" data-line-number="6"><span class="kw">class</span> <span class="dt">ToContext</span> a <span class="kw">where</span></a>
<a class="sourceLine" id="cb15-7" data-line-number="7"><span class="ot">  toContext ::</span> <span class="dt">String</span> <span class="ot">-&gt;</span> a <span class="ot">-&gt;</span> <span class="dt">Context</span> <span class="dt">String</span></a>
<a class="sourceLine" id="cb15-8" data-line-number="8"></a>
<a class="sourceLine" id="cb15-9" data-line-number="9"><span class="kw">instance</span> <span class="dt">ToContext</span> <span class="dt">String</span> <span class="kw">where</span></a>
<a class="sourceLine" id="cb15-10" data-line-number="10">  toContext _ <span class="st">&quot;&quot;</span> <span class="fu">=</span> mempty</a>
<a class="sourceLine" id="cb15-11" data-line-number="11">  toContext k v  <span class="fu">=</span> constField k v</a>
<a class="sourceLine" id="cb15-12" data-line-number="12"></a>
<a class="sourceLine" id="cb15-13" data-line-number="13"><span class="kw">instance</span> <span class="dt">ToContext</span> a <span class="ot">=&gt;</span> <span class="dt">ToContext</span> (<span class="dt">Map</span> <span class="dt">String</span> a) <span class="kw">where</span></a>
<a class="sourceLine" id="cb15-14" data-line-number="14">  toContext _ <span class="fu">=</span> foldMapWithKey toContext</a>
<a class="sourceLine" id="cb15-15" data-line-number="15"></a>
<a class="sourceLine" id="cb15-16" data-line-number="16"><span class="kw">instance</span> <span class="dt">ToContext</span> a <span class="ot">=&gt;</span> <span class="dt">ToContext</span> (<span class="dt">Identity</span> a) <span class="kw">where</span></a>
<a class="sourceLine" id="cb15-17" data-line-number="17">  toContext k <span class="fu">=</span> toContext k <span class="fu">.</span> runIdentity</a></code></pre></div>
<p>拡張可能レコード最高です．</p>
<h3 id="ページネーションを追加">ページネーションを追加</h3>
<p><a href="https://imokuri123.com/blog/2015/12/how-to-create-blog-with-hakyll-part2.html#%E3%83%9A%E3%83%BC%E3%82%B8%E3%83%8D%E3%83%BC%E3%82%B7%E3%83%A7%E3%83%B3">参考記事</a>の中で使われている <code>sortRecentFirst</code> も日時を取得しているので書き換える．</p>
<div class="sourceCode" id="cb16"><pre class="sourceCode haskell"><code class="sourceCode haskell"><a class="sourceLine" id="cb16-1" data-line-number="1"><span class="ot">sortRecentFirst&#39; ::</span> <span class="dt">MonadMetadata</span> m <span class="ot">=&gt;</span> [<span class="dt">Identifier</span>] <span class="ot">-&gt;</span> m [<span class="dt">Identifier</span>]</a>
<a class="sourceLine" id="cb16-2" data-line-number="2">sortRecentFirst&#39; <span class="fu">=</span></a>
<a class="sourceLine" id="cb16-3" data-line-number="3">  fmap (fmap itemIdentifier) <span class="fu">.</span> recentFirst&#39; <span class="fu">.</span> fmap (flip <span class="dt">Item</span> ())</a></code></pre></div>
<h3 id="タグを追加">タグを追加</h3>
<p>躓きと言うかデザインの問題なのだが，タグのテンプレート変数を生成する <a href="https://hackage.haskell.org/package/hakyll-4.11.0.0/docs/Hakyll-Web-Tags.html#v:tagsField"><code>tagsField</code></a> 関数が，タグをカンマ区切りの文字列にしちゃうのがあった． 個人的には空白区切りにして欲しいので書き換えた．</p>
<div class="sourceCode" id="cb17"><pre class="sourceCode haskell"><code class="sourceCode haskell"><a class="sourceLine" id="cb17-1" data-line-number="1"><span class="kw">import</span>           <span class="dt">Data.List</span>                   (intersperse)</a>
<a class="sourceLine" id="cb17-2" data-line-number="2"><span class="kw">import</span>           <span class="dt">Text.Blaze.Html</span>             (toHtml, toValue, (!))</a>
<a class="sourceLine" id="cb17-3" data-line-number="3"><span class="kw">import</span> <span class="kw">qualified</span> <span class="dt">Text.Blaze.Html5</span>            <span class="kw">as</span> <span class="dt">H</span></a>
<a class="sourceLine" id="cb17-4" data-line-number="4"><span class="kw">import</span> <span class="kw">qualified</span> <span class="dt">Text.Blaze.Html5.Attributes</span> <span class="kw">as</span> <span class="dt">A</span></a>
<a class="sourceLine" id="cb17-5" data-line-number="5"></a>
<a class="sourceLine" id="cb17-6" data-line-number="6"><span class="ot">tagsFieldWithSep ::</span> <span class="dt">H.Html</span> <span class="ot">-&gt;</span> <span class="dt">String</span> <span class="ot">-&gt;</span> <span class="dt">Tags</span> <span class="ot">-&gt;</span> <span class="dt">Context</span> a</a>
<a class="sourceLine" id="cb17-7" data-line-number="7">tagsFieldWithSep sep <span class="fu">=</span></a>
<a class="sourceLine" id="cb17-8" data-line-number="8">  tagsFieldWith getTags simpleRenderLink (mconcat <span class="fu">.</span> intersperse sep)</a>
<a class="sourceLine" id="cb17-9" data-line-number="9"></a>
<a class="sourceLine" id="cb17-10" data-line-number="10"><span class="ot">simpleRenderLink ::</span> <span class="dt">String</span> <span class="ot">-&gt;</span> <span class="dt">Maybe</span> FilePath <span class="ot">-&gt;</span> <span class="dt">Maybe</span> <span class="dt">H.Html</span></a>
<a class="sourceLine" id="cb17-11" data-line-number="11">simpleRenderLink tag <span class="fu">=</span></a>
<a class="sourceLine" id="cb17-12" data-line-number="12">  fmap (\path <span class="ot">-&gt;</span> H.a <span class="fu">!</span> A.href (toValue <span class="fu">$</span> toUrl path) <span class="fu">$</span> toHtml tag)</a></code></pre></div>
<p><code>tagsFieldWithSep &quot; &quot;</code> とすれば空白区切りになる．</p>
<h2 id="おしまい">おしまい</h2>
<p>ずーーとやろうやろうと思ってたことをいっきに片したぜ．</p>
  </div>
</div>
</article>
]]></summary>
</entry>
<entry>
    <title>自己紹介ページを生成する whoami CLI を作った (Haskell)</title>
    <link href="https://matsubara0507.github.io/posts/2018-02-19-create-whoami-cli.html" />
    <id>https://matsubara0507.github.io/posts/2018-02-19-create-whoami-cli.html</id>
    <published>2018-02-19T00:00:00Z</published>
    <updated>2018-02-19T00:00:00Z</updated>
    <summary type="html"><![CDATA[<article class="post card" itemscope itemtype="http://schema.org/BlogPosting">
 <div class="card-content">
  <header class="post-header">
    <h1 class="post-title" itemprop="name headline">自己紹介ページを生成する whoami CLI を作った (Haskell)</h1>
    <p class="post-meta">
      <time datetime="2018-02-19" itemprop="datePublished">
        Feb 19, 2018
      </time>
      
      
      <div class="tags">
          <i class="fa fa-tags"></i> <a href="/tags/Haskell.html">Haskell</a> <a href="/tags/application.html">application</a> <a href="/tags/extensible-package.html">extensible-package</a>
      </div>
      
    </p>
  </header>

  <div class="post-content" itemprop="articleBody">
    <p><a href="https://github.com/matsubara0507/whoami">whoami</a> という CLI を作りました． こんな感じの Yaml ファイルから</p>
<div class="sourceCode" id="cb1"><pre class="sourceCode yaml"><code class="sourceCode yaml"><a class="sourceLine" id="cb1-1" data-line-number="1"><span class="fu">name:</span><span class="at"> MATSUBARA Nobutada</span></a>
<a class="sourceLine" id="cb1-2" data-line-number="2"><span class="fu">account:</span></a>
<a class="sourceLine" id="cb1-3" data-line-number="3">  <span class="fu">github:</span><span class="at"> matsubara0507</span></a>
<a class="sourceLine" id="cb1-4" data-line-number="4">  <span class="fu">qiita:</span><span class="at"> matsubara0507</span></a>
<a class="sourceLine" id="cb1-5" data-line-number="5"><span class="fu">site:</span></a>
<a class="sourceLine" id="cb1-6" data-line-number="6">  <span class="kw">-</span> <span class="fu">name:</span><span class="at"> ひげメモ</span></a>
<a class="sourceLine" id="cb1-7" data-line-number="7">    <span class="fu">url:</span><span class="at"> http://matsubara0507.github.io</span></a>
<a class="sourceLine" id="cb1-8" data-line-number="8">    <span class="fu">description:</span><span class="at"> メモ書きブログ</span></a>
<a class="sourceLine" id="cb1-9" data-line-number="9"><span class="fu">post:</span></a>
<a class="sourceLine" id="cb1-10" data-line-number="10">  <span class="fu">latest:</span><span class="at"> 10</span></a>
<a class="sourceLine" id="cb1-11" data-line-number="11">  <span class="fu">posts:</span></a>
<a class="sourceLine" id="cb1-12" data-line-number="12">    <span class="kw">-</span> <span class="fu">url:</span><span class="at"> http://haskell.jp/blog/posts/2017/advent-calendar-2017.html</span></a>
<a class="sourceLine" id="cb1-13" data-line-number="13">      <span class="fu">date:</span><span class="at"> 2017-12-31</span></a>
<a class="sourceLine" id="cb1-14" data-line-number="14">    <span class="kw">-</span> <span class="fu">url:</span><span class="at"> http://iggg.github.io/2017/06/01/make-tweet-slack-bot</span></a>
<a class="sourceLine" id="cb1-15" data-line-number="15"><span class="fu">library:</span></a>
<a class="sourceLine" id="cb1-16" data-line-number="16">  <span class="kw">-</span> <span class="fu">name:</span><span class="at"> chatwork</span></a>
<a class="sourceLine" id="cb1-17" data-line-number="17">    <span class="fu">url:</span><span class="at"> http://hackage.haskell.org/package/chatwork</span></a>
<a class="sourceLine" id="cb1-18" data-line-number="18">    <span class="fu">description:</span><span class="at"> The ChatWork API in Haskell</span></a>
<a class="sourceLine" id="cb1-19" data-line-number="19">    <span class="fu">language:</span><span class="at"> haskell</span></a>
<a class="sourceLine" id="cb1-20" data-line-number="20">  <span class="kw">-</span> <span class="fu">name:</span><span class="at"> thank_you_stars</span></a>
<a class="sourceLine" id="cb1-21" data-line-number="21">    <span class="fu">url:</span><span class="at"> http://hex.pm/packages/thank_you_stars</span></a>
<a class="sourceLine" id="cb1-22" data-line-number="22">    <span class="fu">language:</span><span class="at"> elixir</span></a>
<a class="sourceLine" id="cb1-23" data-line-number="23"><span class="fu">qiita:</span></a>
<a class="sourceLine" id="cb1-24" data-line-number="24">  <span class="fu">posts:</span><span class="at"> true</span></a>
<a class="sourceLine" id="cb1-25" data-line-number="25"><span class="fu">app:</span></a>
<a class="sourceLine" id="cb1-26" data-line-number="26">  <span class="kw">-</span> <span class="fu">name:</span><span class="at"> AnaQRam</span></a>
<a class="sourceLine" id="cb1-27" data-line-number="27">    <span class="fu">url:</span><span class="at"> http://github.com/matsubara0507/AnaQRam</span></a>
<a class="sourceLine" id="cb1-28" data-line-number="28">    <span class="fu">description:</span><span class="at"> QRコードを利用したアナグラム(並び替えパズル)</span></a></code></pre></div>
<p>こんな感じの Markdown を生成する．</p>
<div class="sourceCode" id="cb2"><pre class="sourceCode markdown"><code class="sourceCode markdown"><a class="sourceLine" id="cb2-1" data-line-number="1"><span class="fu"># MATSUBARA Nobutada</span></a>
<a class="sourceLine" id="cb2-2" data-line-number="2">- <span class="ot">[GitHub](https://github.com/matsubara0507)</span></a>
<a class="sourceLine" id="cb2-3" data-line-number="3"><span class="fl">- </span><span class="ot">[Qiita](https://qiita.com/matsubara0507)</span></a>
<a class="sourceLine" id="cb2-4" data-line-number="4"></a>
<a class="sourceLine" id="cb2-5" data-line-number="5"><span class="fu">## My Sites</span></a>
<a class="sourceLine" id="cb2-6" data-line-number="6">- <span class="ot">[ひげメモ](http://matsubara0507.github.io)</span></a>
<a class="sourceLine" id="cb2-7" data-line-number="7"><span class="fl">    - メモ書きブログ</span></a>
<a class="sourceLine" id="cb2-8" data-line-number="8"></a>
<a class="sourceLine" id="cb2-9" data-line-number="9"><span class="fu">## My Posts</span></a>
<a class="sourceLine" id="cb2-10" data-line-number="10">- <span class="ot">[Haskell Advent Calendar 2017 まとめ - Haskell-jp](http://haskell.jp/blog/posts/2017/advent-calendar-2017.html)</span></a>
<a class="sourceLine" id="cb2-11" data-line-number="11"><span class="fl">    - posted on 2017-12-31</span></a>
<a class="sourceLine" id="cb2-12" data-line-number="12"><span class="fl">- </span><span class="ot">[LINE の Echo Bot を Google Cloud Functions に作る](https://qiita.com/matsubara0507/items/04ab3c2197aa5f68e499)</span></a>
<a class="sourceLine" id="cb2-13" data-line-number="13"><span class="fl">    - posted on 2017-11-21</span></a>
<a class="sourceLine" id="cb2-14" data-line-number="14"><span class="fl">- </span><span class="ot">[GitHub にチャット機能のようなものが追加された (team discussions)](https://qiita.com/matsubara0507/items/47d2e2545553e415f969)</span></a>
<a class="sourceLine" id="cb2-15" data-line-number="15"><span class="fl">    - posted on 2017-11-21</span></a>
<a class="sourceLine" id="cb2-16" data-line-number="16"><span class="fl">- </span><span class="ot">[GitHub Project に自動でカードのカラム遷移をする機能が追加された](https://qiita.com/matsubara0507/items/f384991b4854aa28745a)</span></a>
<a class="sourceLine" id="cb2-17" data-line-number="17"><span class="fl">    - posted on 2017-10-31</span></a>
<a class="sourceLine" id="cb2-18" data-line-number="18"><span class="fl">- </span><span class="ot">[Slack から特定のアカウントでツイートする Bot を作った｜群馬大学電子計算機研究会 IGGG](http://iggg.github.io/2017/06/01/make-tweet-slack-bot)</span></a>
<a class="sourceLine" id="cb2-19" data-line-number="19"><span class="fl">    - posted on 2017-06-01</span></a>
<a class="sourceLine" id="cb2-20" data-line-number="20"></a>
<a class="sourceLine" id="cb2-21" data-line-number="21"><span class="fu">## Applications</span></a>
<a class="sourceLine" id="cb2-22" data-line-number="22">- <span class="ot">[AnaQRam](http://github.com/matsubara0507/AnaQRam)</span></a>
<a class="sourceLine" id="cb2-23" data-line-number="23"><span class="fl">    - QRコードを利用したアナグラム(並び替えパズル)</span></a>
<a class="sourceLine" id="cb2-24" data-line-number="24"></a>
<a class="sourceLine" id="cb2-25" data-line-number="25"><span class="fu">## Libraries</span></a>
<a class="sourceLine" id="cb2-26" data-line-number="26">- <span class="ot">[chatwork](http://hackage.haskell.org/package/chatwork)</span></a>
<a class="sourceLine" id="cb2-27" data-line-number="27"><span class="fl">    - The ChatWork API in Haskell</span></a>
<a class="sourceLine" id="cb2-28" data-line-number="28"><span class="fl">- </span><span class="ot">[thank_you_stars](http://hex.pm/packages/thank_you_stars)</span></a>
<a class="sourceLine" id="cb2-29" data-line-number="29"><span class="fl">    - A tool for starring GitHub repositories.</span></a></code></pre></div>
<p>Yaml ファイルでは足りない情報をスクレイピングや各種 Web サービスの API で拾ってくる． なんか自分のアクティビティを紹介するページを SNS にリンクしてる人が多いと思うんだけど，そのページをできるだけ楽して生成したいなぁというのがモチベーション．</p>
<h2 id="section"></h2>
<p>ホントはバイト先で作ってる Haskell 製の社内用 CLI ツールを公開したくて，内容を公開できるようにしたツールです． こんな感じのデータ処理をするツールを，バイト先では Haskell で作ってた．</p>
<h2 id="extensible">extensible</h2>
<p>このツールの(まぁまぁ)面白いところは，<a href="https://hackage.haskell.org/package/extensible">extensible</a> というパッケージの機能をふんだんに使っている． 拡張可能レコード，バリアント，作用を使い，ついでに <a href="https://hackage.haskell.org/package/extensible/docs/Data-Extensible-GetOpt.html">GetOpt</a> も使ってみた． 軽く補足しておく(<strong>但し，作者ではないので間違っている部分はあるかも</strong>)．</p>
<h3 id="拡張可能レコード">拡張可能レコード</h3>
<p>Haskell のレコード構文</p>
<div class="sourceCode" id="cb3"><pre class="sourceCode haskell"><code class="sourceCode haskell"><a class="sourceLine" id="cb3-1" data-line-number="1"><span class="kw">data</span> <span class="dt">Hoge</span> <span class="fu">=</span> {<span class="ot"> hoge1 ::</span> <span class="dt">Int</span>,<span class="ot"> hoge2 ::</span> <span class="dt">Text</span> }</a></code></pre></div>
<p>を，型レベル辞書を用いて次のように書ける．</p>
<div class="sourceCode" id="cb4"><pre class="sourceCode haskell"><code class="sourceCode haskell"><a class="sourceLine" id="cb4-1" data-line-number="1"><span class="kw">type</span> <span class="dt">Hoge</span> <span class="fu">=</span> <span class="dt">Record</span> <span class="ch">&#39;[ &quot;hoge1&quot; &gt;: Int, &quot;hoge2&quot; &gt;: Text ]</span></a></code></pre></div>
<p><code>OverloadedLabels</code> 言語拡張と組み合わせて，名前衝突の無いフィールド名を扱えたり，<code>lens</code> を用いた OOP のような参照(e.g. <code>hoge ^. #hoge1</code>)が出来る． また，<a href="/posts/2017-11-28-fun-of-extensible-1.html">レコードの拡縮もできる</a>．</p>
<h3 id="拡張可能バリアント">拡張可能バリアント</h3>
<p>次のような直和型</p>
<div class="sourceCode" id="cb5"><pre class="sourceCode haskell"><code class="sourceCode haskell"><a class="sourceLine" id="cb5-1" data-line-number="1"><span class="kw">data</span> <span class="dt">Hoge</span> <span class="fu">=</span> <span class="dt">Hoge1</span> <span class="dt">Int</span> <span class="fu">|</span> <span class="dt">Hoge2</span> <span class="dt">Text</span></a></code></pre></div>
<p>を，型レベル辞書を用いて，バリアント型のように書ける．</p>
<div class="sourceCode" id="cb6"><pre class="sourceCode haskell"><code class="sourceCode haskell"><a class="sourceLine" id="cb6-1" data-line-number="1"><span class="kw">type</span> <span class="dt">Hoge</span> <span class="fu">=</span> <span class="dt">Variant</span> <span class="ch">&#39;[ &quot;hoge1&quot; &gt;: Int, &quot;hoge2&quot; &gt;: Text ]</span></a></code></pre></div>
<p>(正直あんまり利点が分かってないけど)拡縮はもちろん，<a href="/posts/2018-01-31-fun-of-extensible-2.html">バリアントの操作関数をファイル分割して実装</a>もできる．</p>
<h3 id="拡張可能作用">拡張可能作用</h3>
<p>型レベル辞書によってモナドスタックを表現する． 今回は次のようなモナドを定義した．</p>
<div class="sourceCode" id="cb7"><pre class="sourceCode haskell"><code class="sourceCode haskell"><a class="sourceLine" id="cb7-1" data-line-number="1"><span class="kw">type</span> <span class="dt">ServiceM</span> <span class="fu">=</span> <span class="dt">Eff</span></a>
<a class="sourceLine" id="cb7-2" data-line-number="2">  <span class="ch">&#39;[ ReaderDef Config</span></a>
<a class="sourceLine" id="cb7-3" data-line-number="3">   , <span class="dt">EitherDef</span> <span class="dt">ServiceException</span></a>
<a class="sourceLine" id="cb7-4" data-line-number="4">   , <span class="dt">LoggerDef</span></a>
<a class="sourceLine" id="cb7-5" data-line-number="5">   , <span class="st">&quot;IO&quot;</span> <span class="fu">&gt;:</span> <span class="dt">IO</span></a>
<a class="sourceLine" id="cb7-6" data-line-number="6">   ]</a></code></pre></div>
<p>基本的に<a href="/posts/2017-12-09-extensible-effects-step-by-step.html">普通のモナドトランスフォーマーのように扱える</a>． じゃぁ素直にモナドトランスフォーマー使えよって感じかもしれないけど気にしないで．</p>
<h3 id="getopt-ラッパー"><code>GetOpt</code> ラッパー</h3>
<p>GHCには標準で <code>--output hoge</code> みたいな CLI のオプション引数をパースしてくれるモジュール <a href="https://hackage.haskell.org/package/base-4.10.1.0/docs/System-Console-GetOpt.html"><code>GetOpt</code></a> がある(ぼくは初めて使った)． extensible では，パース結果を拡張可能レコードにマッピングするための補助関数が<a href="https://hackage.haskell.org/package/extensible-0.4.7.1/docs/Data-Extensible-GetOpt.html">提供されている</a>．</p>
<p>キモになるのは <code>withGetOpt</code> 関数である．</p>
<div class="sourceCode" id="cb8"><pre class="sourceCode haskell"><code class="sourceCode haskell"><a class="sourceLine" id="cb8-1" data-line-number="1">withGetOpt</a>
<a class="sourceLine" id="cb8-2" data-line-number="2"><span class="ot">  ::</span> <span class="dt">MonadIO</span> m</a>
<a class="sourceLine" id="cb8-3" data-line-number="3">  <span class="ot">=&gt;</span> <span class="dt">String</span></a>
<a class="sourceLine" id="cb8-4" data-line-number="4">  <span class="ot">-&gt;</span> <span class="dt">RecordOf</span> (<span class="dt">OptionDescr</span> h) xs</a>
<a class="sourceLine" id="cb8-5" data-line-number="5">  <span class="ot">-&gt;</span> (<span class="dt">RecordOf</span> h xs <span class="ot">-&gt;</span> [<span class="dt">String</span>] <span class="ot">-&gt;</span> m a)</a>
<a class="sourceLine" id="cb8-6" data-line-number="6">  <span class="ot">-&gt;</span> m a</a></code></pre></div>
<p>一引数目の文字列はパース失敗したとき(要するにオプションが間違ってるとき)に表示する「使い方」に使われる． 例えば，whoami だと</p>
<pre><code>whoami [options] [input-file]
  -o FILE               --output=FILE                Write output to FILE instead of stdout.
  -t FORMAT, -w FORMAT  --to=FORMAT, --write=FORMAT  Specify output format. default is `markdown`.</code></pre>
<p>の <code>[options] [input-file]</code> が一引数目だ． 二引数目はオプションのパーサー(？)の定義を拡張可能レコードで与えており，三引数目がパース結果の拡張可能レコードと残りの(空白区切りの)文字列を受け取ってどうするかの振る舞いを与える．</p>
<p>まぁ詳しくは<a href="https://www.schoolofhaskell.com/user/fumieval/extensible/getopt-and-extensible-records">作者さんの記事</a>で紹介されている(英語だけど，あと一引数目の文字列はこの記事以降に追加された機能らしく，サンプルコードにはない)．</p>
<h3 id="extensible-instances">extensible-instances</h3>
<p>拡張可能レコードは全て <code>Record '[...]</code> の型エイリアスで定義する． つまり，拡張可能レコードの何らかの型クラスのインスタンスは <code>Record '[...]</code> に適用しておけば全部で使える(逆に影響力がでかいともいえる)．</p>
<p>いくつかの自作アプリーケーションでインスタンスを作っていて，ダブってたのでひとつのリポジトリにまとめた．</p>
<ul>
<li><a href="https://github.com/matsubara0507/extensible-instances">matsubara0507/extensible-instances - GitHub</a></li>
</ul>
<p>(なんか作者本人じゃないから気が引けて) Hackage にはあげてないがパッケージの体はしてるので，<a href="https://docs.haskellstack.org/en/stable/yaml_configuration/#git-and-mercurial-repos"><code>stack.yaml</code> の <code>extra-deps</code> に記述</a>することで使えるはず．</p>
<h2 id="section-1"></h2>
<p>注意点として <a href="https://github.com/fumieval/extensible">fumieval/extensible</a> の<a href="https://github.com/fumieval/extensible/blob/master/examples/aeson.hs">例にある <code>FromJSON</code> のインスタンス</a>とは微妙に実装が違う． 作者さんのは <code>Maybe a</code> にしてもキーが存在しないといけないのだが，<code>aeson</code> の <code>Generics</code> は <code>Maybe a</code> ならキーが無くても良いので，そっちに合わせた．</p>
<h2 id="仕組み">仕組み</h2>
<p>コード自体は<a href="https://github.com/matsubara0507/whoami">このリポジトリ</a>にある．</p>
<h3 id="基本的な部分">基本的な部分</h3>
<p>基本的に Yaml ファイルにはサイト・記事・ライブラリ・アプリケーションを列挙してもらう． それらは次のような型になっている(型の値として取り出せる)．</p>
<div class="sourceCode" id="cb10"><pre class="sourceCode haskell"><code class="sourceCode haskell"><a class="sourceLine" id="cb10-1" data-line-number="1"><span class="kw">type</span> <span class="dt">Config</span> <span class="fu">=</span> <span class="dt">Record</span></a>
<a class="sourceLine" id="cb10-2" data-line-number="2">  <span class="ch">&#39;[ &quot;name&quot;    &gt;: Text</span></a>
<a class="sourceLine" id="cb10-3" data-line-number="3">   , <span class="st">&quot;account&quot;</span> <span class="fu">&gt;:</span> <span class="dt">Accounts</span></a>
<a class="sourceLine" id="cb10-4" data-line-number="4">   , <span class="st">&quot;site&quot;</span>    <span class="fu">&gt;:</span> [<span class="dt">SiteConfig</span>]</a>
<a class="sourceLine" id="cb10-5" data-line-number="5">   , <span class="st">&quot;post&quot;</span>    <span class="fu">&gt;:</span> <span class="dt">Record</span> <span class="ch">&#39;[ &quot;latest&quot; &gt;: Maybe Int, &quot;posts&quot; &gt;: [PostConfig]]</span></a>
<a class="sourceLine" id="cb10-6" data-line-number="6">   , <span class="st">&quot;library&quot;</span> <span class="fu">&gt;:</span> [<span class="dt">LibConfig</span>]</a>
<a class="sourceLine" id="cb10-7" data-line-number="7">   , <span class="st">&quot;app&quot;</span>     <span class="fu">&gt;:</span> [<span class="dt">AppConfig</span>]</a>
<a class="sourceLine" id="cb10-8" data-line-number="8">   , <span class="st">&quot;qiita&quot;</span>   <span class="fu">&gt;:</span> <span class="dt">QiitaConfig</span></a>
<a class="sourceLine" id="cb10-9" data-line-number="9">   ]</a>
<a class="sourceLine" id="cb10-10" data-line-number="10"></a>
<a class="sourceLine" id="cb10-11" data-line-number="11"><span class="kw">type</span> <span class="dt">Accounts</span> <span class="fu">=</span> <span class="dt">Map</span> <span class="dt">Text</span> <span class="dt">Text</span></a>
<a class="sourceLine" id="cb10-12" data-line-number="12"><span class="kw">type</span> <span class="dt">Url</span> <span class="fu">=</span> <span class="dt">Text</span></a>
<a class="sourceLine" id="cb10-13" data-line-number="13"><span class="kw">type</span> <span class="dt">Date</span> <span class="fu">=</span> <span class="dt">Text</span></a>
<a class="sourceLine" id="cb10-14" data-line-number="14"></a>
<a class="sourceLine" id="cb10-15" data-line-number="15"><span class="kw">type</span> <span class="dt">SiteConfig</span> <span class="fu">=</span> <span class="dt">Record</span></a>
<a class="sourceLine" id="cb10-16" data-line-number="16">  <span class="ch">&#39;[ &quot;name&quot; &gt;: Text</span></a>
<a class="sourceLine" id="cb10-17" data-line-number="17">   , <span class="st">&quot;url&quot;</span>  <span class="fu">&gt;:</span> <span class="dt">Url</span></a>
<a class="sourceLine" id="cb10-18" data-line-number="18">   , <span class="st">&quot;description&quot;</span> <span class="fu">&gt;:</span> <span class="dt">Text</span></a>
<a class="sourceLine" id="cb10-19" data-line-number="19">   ]</a>
<a class="sourceLine" id="cb10-20" data-line-number="20"></a>
<a class="sourceLine" id="cb10-21" data-line-number="21"><span class="kw">type</span> <span class="dt">PostConfig</span> <span class="fu">=</span> <span class="dt">Record</span></a>
<a class="sourceLine" id="cb10-22" data-line-number="22">  <span class="ch">&#39;[ &quot;title&quot; &gt;: Maybe Text</span></a>
<a class="sourceLine" id="cb10-23" data-line-number="23">   , <span class="st">&quot;url&quot;</span>  <span class="fu">&gt;:</span> <span class="dt">Url</span></a>
<a class="sourceLine" id="cb10-24" data-line-number="24">   , <span class="st">&quot;date&quot;</span> <span class="fu">&gt;:</span> <span class="dt">Maybe</span> <span class="dt">Date</span></a>
<a class="sourceLine" id="cb10-25" data-line-number="25">   ]</a>
<a class="sourceLine" id="cb10-26" data-line-number="26"></a>
<a class="sourceLine" id="cb10-27" data-line-number="27"><span class="kw">type</span> <span class="dt">LibConfig</span> <span class="fu">=</span> <span class="dt">Record</span></a>
<a class="sourceLine" id="cb10-28" data-line-number="28">  <span class="ch">&#39;[ &quot;name&quot; &gt;: Text</span></a>
<a class="sourceLine" id="cb10-29" data-line-number="29">   , <span class="st">&quot;url&quot;</span>  <span class="fu">&gt;:</span> <span class="dt">Url</span></a>
<a class="sourceLine" id="cb10-30" data-line-number="30">   , <span class="st">&quot;description&quot;</span> <span class="fu">&gt;:</span> <span class="dt">Maybe</span> <span class="dt">Text</span></a>
<a class="sourceLine" id="cb10-31" data-line-number="31">   , <span class="st">&quot;language&quot;</span> <span class="fu">&gt;:</span> <span class="dt">Text</span></a>
<a class="sourceLine" id="cb10-32" data-line-number="32">   ]</a>
<a class="sourceLine" id="cb10-33" data-line-number="33"></a>
<a class="sourceLine" id="cb10-34" data-line-number="34"><span class="kw">type</span> <span class="dt">AppConfig</span> <span class="fu">=</span> <span class="dt">Record</span></a>
<a class="sourceLine" id="cb10-35" data-line-number="35">  <span class="ch">&#39;[ &quot;name&quot; &gt;: Text</span></a>
<a class="sourceLine" id="cb10-36" data-line-number="36">   , <span class="st">&quot;url&quot;</span>  <span class="fu">&gt;:</span> <span class="dt">Url</span></a>
<a class="sourceLine" id="cb10-37" data-line-number="37">   , <span class="st">&quot;description&quot;</span> <span class="fu">&gt;:</span> <span class="dt">Maybe</span> <span class="dt">Text</span></a>
<a class="sourceLine" id="cb10-38" data-line-number="38">   ]</a></code></pre></div>
<p><a href="https://hackage.haskell.org/package/yaml">yaml</a>パッケージを使って，Yaml ファイルから <code>Config</code> 型にデコードしてもらう． <code>Maybe a</code> になっているところは書いてあっても無くても良い項目だ．</p>
<p>そしてサイト・記事・ライブラリ・アプリケーション固有の <code>Config</code> 型を共通のフォーマットである <code>Info</code> 型に変換する手続きを型クラスを用いて定義した．</p>
<div class="sourceCode" id="cb11"><pre class="sourceCode haskell"><code class="sourceCode haskell"><a class="sourceLine" id="cb11-1" data-line-number="1"><span class="kw">type</span> <span class="dt">Info</span> <span class="fu">=</span> <span class="dt">Record</span></a>
<a class="sourceLine" id="cb11-2" data-line-number="2">  <span class="ch">&#39;[ &quot;name&quot; &gt;: Text</span></a>
<a class="sourceLine" id="cb11-3" data-line-number="3">   , <span class="st">&quot;url&quot;</span> <span class="fu">&gt;:</span> <span class="dt">Url</span></a>
<a class="sourceLine" id="cb11-4" data-line-number="4">   , <span class="st">&quot;description&quot;</span> <span class="fu">&gt;:</span> <span class="dt">Text</span></a>
<a class="sourceLine" id="cb11-5" data-line-number="5">   , <span class="st">&quot;type&quot;</span> <span class="fu">&gt;:</span> <span class="dt">ServiceType</span></a>
<a class="sourceLine" id="cb11-6" data-line-number="6">   ]</a>
<a class="sourceLine" id="cb11-7" data-line-number="7"></a>
<a class="sourceLine" id="cb11-8" data-line-number="8"><span class="kw">type</span> <span class="dt">ServiceType</span> <span class="fu">=</span> <span class="dt">Variant</span></a>
<a class="sourceLine" id="cb11-9" data-line-number="9">  <span class="ch">&#39;[ &quot;post&quot; &gt;: Post</span></a>
<a class="sourceLine" id="cb11-10" data-line-number="10">   , <span class="st">&quot;app&quot;</span>  <span class="fu">&gt;:</span> <span class="dt">Application</span></a>
<a class="sourceLine" id="cb11-11" data-line-number="11">   , <span class="st">&quot;lib&quot;</span>  <span class="fu">&gt;:</span> <span class="dt">Library</span></a>
<a class="sourceLine" id="cb11-12" data-line-number="12">   , <span class="st">&quot;site&quot;</span> <span class="fu">&gt;:</span> <span class="dt">Site</span></a>
<a class="sourceLine" id="cb11-13" data-line-number="13">   ]</a>
<a class="sourceLine" id="cb11-14" data-line-number="14"></a>
<a class="sourceLine" id="cb11-15" data-line-number="15"><span class="kw">class</span> <span class="dt">Uniform</span> a <span class="kw">where</span></a>
<a class="sourceLine" id="cb11-16" data-line-number="16"><span class="ot">  fetch ::</span> a <span class="ot">-&gt;</span> <span class="dt">ServiceM</span> <span class="dt">Data</span></a>
<a class="sourceLine" id="cb11-17" data-line-number="17"><span class="ot">  fill ::</span> a <span class="ot">-&gt;</span> <span class="dt">Data</span> <span class="ot">-&gt;</span> <span class="dt">ServiceM</span> a</a>
<a class="sourceLine" id="cb11-18" data-line-number="18"><span class="ot">  uniform ::</span> a <span class="ot">-&gt;</span> <span class="dt">ServiceM</span> <span class="dt">Info</span></a>
<a class="sourceLine" id="cb11-19" data-line-number="19"></a>
<a class="sourceLine" id="cb11-20" data-line-number="20"><span class="kw">type</span> <span class="dt">Data</span> <span class="fu">=</span> <span class="dt">Text</span></a>
<a class="sourceLine" id="cb11-21" data-line-number="21"></a>
<a class="sourceLine" id="cb11-22" data-line-number="22"><span class="ot">toInfo ::</span> <span class="dt">Uniform</span> a <span class="ot">=&gt;</span> a <span class="ot">-&gt;</span> <span class="dt">ServiceM</span> <span class="dt">Info</span></a>
<a class="sourceLine" id="cb11-23" data-line-number="23">toInfo conf <span class="fu">=</span> uniform <span class="fu">=&lt;&lt;</span> fill conf <span class="fu">=&lt;&lt;</span> fetch conf</a></code></pre></div>
<p><code>Uniform</code> 型クラスに3つの関数は</p>
<ul>
<li><code>fill</code> 関数は共通のフォーマットにするための足りない情報(<code>Maybe a</code> で <code>Nothing</code> だったところ)をスクレイピングなどで補完</li>
<li><code>fetch</code> 関数はスクレイピングするための HTML などを取ってくる</li>
<li><code>uniform</code> 関数は実際に共通フォーマットに変換する</li>
</ul>
<p>といった具合だ(正直分けなくてもいい)．</p>
<h2 id="section-2"></h2>
<p>他にも GitHub・BitBacket・GitLab なんかを全部一緒に取り扱う <code>Repo</code> とかも作ってもいいかもしれない． 問題は，自分が GitHub 以外に使ってないのでテストできない点だ．</p>
<h3 id="qiita-とか">Qiita とか</h3>
<p>Qiita とかは RESTful API を叩いて記事を集めてる． そもそも記事自体を集めるところと，<code>Uniform</code> 型クラスのインスタンスを共通化するのに <code>Service</code> 型クラスを作った(名前が微妙)．</p>
<div class="sourceCode" id="cb12"><pre class="sourceCode haskell"><code class="sourceCode haskell"><a class="sourceLine" id="cb12-1" data-line-number="1"><span class="kw">class</span> <span class="dt">Service</span> a <span class="kw">where</span></a>
<a class="sourceLine" id="cb12-2" data-line-number="2"><span class="ot">  genInfo ::</span> <span class="dt">Proxy</span> a <span class="ot">-&gt;</span> <span class="dt">ServiceM</span> [<span class="dt">Info</span>]</a></code></pre></div>
<p><code>Proxy a</code> なのはしょうがない． お好きなサービス(自分のサイトとかでも)を <code>Service</code> 型クラスのインスタンスにして，<code>Whoami</code> 型のインスタンスを書き換えれば，いろんなサイトを共通の形式で扱える．</p>
<h2 id="on-github-pages">on GitHub Pages</h2>
<p>GitHub Pages で簡単に使えるようにした． サンプルのリポジトリを作ったので，これをフォークして Travis CI と GitHub Pages を設定するだけで使えるはずだ(もちろん <code>whoami.yaml</code> を書き換えて)．</p>
<ul>
<li><a href="https://github.com/matsubara0507/whoami-example">matsubara0507/whoami-example - GitHub</a></li>
</ul>
<p>Stackage (というか Hackage)に置いていないツールを <code>stack install</code> するために，<code>package.yaml</code> と <code>stack.yaml</code> と <code>.gitignore</code> を置いてるけど気にしないで． Travis CI の定期実行を設定しておけば定期的に Qita の記事とかを更新してくれる．</p>
<h2 id="おしまい">おしまい</h2>
<p>そーいえば，UNIX 系には <code>whoami</code> というコマンドがあるんでしたね(Windowsユーザー)． 紛らわしい名前にしてしまった．</p>
  </div>
</div>
</article>
]]></summary>
</entry>
<entry>
    <title>「積み木の水槽」問題の Haskell での回答を読み解く</title>
    <link href="https://matsubara0507.github.io/posts/2018-02-04-water-towers-hs.html" />
    <id>https://matsubara0507.github.io/posts/2018-02-04-water-towers-hs.html</id>
    <published>2018-02-04T00:00:00Z</published>
    <updated>2018-02-04T00:00:00Z</updated>
    <summary type="html"><![CDATA[<article class="post card" itemscope itemtype="http://schema.org/BlogPosting">
 <div class="card-content">
  <header class="post-header">
    <h1 class="post-title" itemprop="name headline">「積み木の水槽」問題の Haskell での回答を読み解く</h1>
    <p class="post-meta">
      <time datetime="2018-02-04" itemprop="datePublished">
        Feb 4, 2018
      </time>
      
      
      <div class="tags">
          <i class="fa fa-tags"></i> <a href="/tags/Haskell.html">Haskell</a>
      </div>
      
    </p>
  </header>

  <div class="post-content" itemprop="articleBody">
    <p>今朝，バイト先で<a href="http://nabetani.sakura.ne.jp/hena/ord13blocktup/">「積み木の水槽」問題</a>の <a href="https://rosettacode.org/wiki/Water_collected_between_towers#Haskell">Haskell での回答</a>について話題になりました． リンク先の解答を見ると，恐ろしいことに，一行で書けてしまいます(正しくは，この解答では <code>nabetani</code> さんの問題は解けませんが…)．</p>
<div class="sourceCode" id="cb1"><pre class="sourceCode haskell"><code class="sourceCode haskell"><a class="sourceLine" id="cb1-1" data-line-number="1"><span class="co">-- 2 == solve [1,5,3,7,2]</span></a>
<a class="sourceLine" id="cb1-2" data-line-number="2">solve <span class="fu">=</span> sum <span class="fu">.</span> filter (<span class="fu">&gt;</span> <span class="dv">0</span>) <span class="fu">.</span> (zipWith (<span class="fu">-</span>) <span class="fu">=&lt;&lt;</span> (zipWith min <span class="fu">.</span> scanl1 max <span class="fu">&lt;*&gt;</span> scanr1 max))</a></code></pre></div>
<p>普通の Haskeller であれば，これぐらい目コンパイルして振る舞いを読み解くのは朝飯前でしょうが，Haskell 初学者のために簡単な解説を残しておこうかなと思います．</p>
<h2 id="手直し">手直し</h2>
<p>前述したとおり，そもそもこれでは <code>nabetani</code> さんの問題は解けないので，解けるように手直しします． もちろん <strong>1行で</strong> ．</p>
<div class="sourceCode" id="cb2"><pre class="sourceCode haskell"><code class="sourceCode haskell"><a class="sourceLine" id="cb2-1" data-line-number="1">solve <span class="fu">=</span> sum <span class="fu">.</span> fmap (sum <span class="fu">.</span> (zipWith (<span class="fu">-</span>) <span class="fu">=&lt;&lt;</span> (zipWith min <span class="fu">.</span> scanl1 max <span class="fu">&lt;*&gt;</span> scanr1 max)) <span class="fu">.</span> fmap (read <span class="fu">.</span> (<span class="fu">:</span> []))) <span class="fu">.</span> words <span class="fu">.</span> fmap (bool <span class="ch">&#39; &#39;</span> <span class="fu">&lt;*&gt;</span> (<span class="fu">/=</span>) <span class="ch">&#39;0&#39;</span>)</a></code></pre></div>
<p><code>Data.List</code> と <code>Data.Bool</code> を <code>import</code> してる前提だが，一応一行で書けた． 雑に直したのでもう少し短くできるような気もしますが，まぁそもそも本質的なところでないので勘弁してください．</p>
<p>ちなみに，そもそもなんで元のコードでは解けないのかというと，<code>nabetani</code> さんの問題には <code>0</code> が含むからだ． しかし，<code>0</code> で水槽を切り分けてあげて，元の解答を <code>map</code> してあげれば良いだけなのでコアのところはそのまんま(<code>filter (&gt; 0)</code> は要らない気がしたので消したけど)．</p>
<h2 id="読み解く">読み解く</h2>
<p>手直しした最終的なコードはテストコードと共に<a href="https://gist.github.com/matsubara0507/10a44fb2a9676bde9658c3eeec456676">ココ</a>にあげた．</p>
<h3 id="トップダウンに">トップダウンに</h3>
<p>順に読み解く． Haskell でプログラミングするとき(というか関数型プログラミング)はトップダウンに書いていくのが基本なので，読み解くときも上から順に切り分けてく．</p>
<div class="sourceCode" id="cb3"><pre class="sourceCode haskell"><code class="sourceCode haskell"><a class="sourceLine" id="cb3-1" data-line-number="1"><span class="ot">solve ::</span> <span class="dt">String</span> <span class="ot">-&gt;</span> <span class="dt">Int</span></a>
<a class="sourceLine" id="cb3-2" data-line-number="2">solve <span class="fu">=</span> sum <span class="fu">.</span> fmap countWater <span class="fu">.</span> splitTank</a>
<a class="sourceLine" id="cb3-3" data-line-number="3"></a>
<a class="sourceLine" id="cb3-4" data-line-number="4"><span class="ot">splitTank ::</span> <span class="dt">String</span> <span class="ot">-&gt;</span> [<span class="dt">String</span>]</a>
<a class="sourceLine" id="cb3-5" data-line-number="5">splitTank <span class="fu">=</span>  words <span class="fu">.</span> fmap (bool <span class="ch">&#39; &#39;</span> <span class="fu">&lt;*&gt;</span> (<span class="fu">/=</span>) <span class="ch">&#39;0&#39;</span>)</a>
<a class="sourceLine" id="cb3-6" data-line-number="6"></a>
<a class="sourceLine" id="cb3-7" data-line-number="7"><span class="ot">countWater ::</span> <span class="dt">String</span> <span class="ot">-&gt;</span> <span class="dt">Int</span></a>
<a class="sourceLine" id="cb3-8" data-line-number="8">countWater <span class="fu">=</span> sum <span class="fu">.</span> (zipWith (<span class="fu">-</span>) <span class="fu">=&lt;&lt;</span> (zipWith min <span class="fu">.</span> scanl1 max <span class="fu">&lt;*&gt;</span> scanr1 max)) <span class="fu">.</span> fmap (read <span class="fu">.</span> (<span class="fu">:</span> []))</a></code></pre></div>
<p><code>splitTank</code> 関数は <code>0</code> を区切り文字として文字列を切り分けてるだけだ． 悲しいことに，Haskell (というか GHC)の標準モジュールには「任意の文字で文字列を切り分ける」関数がない． なので，<code>0</code> だけを空白 <code>' '</code> に置換してから，<code>words</code> で切り分けている(空白で切り分ける関数 <code>words</code> は何故か標準にある)．</p>
<p><code>countWater</code> 関数が各水槽の水の数を数え上げており，それを最後に総和 <code>sum</code> しているだけだ．</p>
<h3 id="fmap-はわかるよね"><code>fmap</code> はわかるよね？</h3>
<p>ちなみに，さっきから出てきている <code>fmap</code> という関数はわかりますよね？ 多くの言語でも導入されている，リストや配列の各要素に関数を適用する関数(あるいはメソッド) <code>map :: (a -&gt; b) -&gt; [a] -&gt; [b]</code> をより一般化したものだ． 今回はリストにしか使わないので <code>map</code> と同義だと考えてくれていい(hlint で注意されるので，<code>fmap</code> と書く癖がついた)．</p>
<h3 id="コアの部分">コアの部分</h3>
<p>さて，本題でもある <code>countWater</code> 関数を読み解く． まずは切り分けよう．</p>
<div class="sourceCode" id="cb4"><pre class="sourceCode haskell"><code class="sourceCode haskell"><a class="sourceLine" id="cb4-1" data-line-number="1"><span class="ot">countWater ::</span> <span class="dt">String</span> <span class="ot">-&gt;</span> <span class="dt">Int</span></a>
<a class="sourceLine" id="cb4-2" data-line-number="2">countWater <span class="fu">=</span> sum <span class="fu">.</span> toWaterLine <span class="fu">.</span> toInts</a>
<a class="sourceLine" id="cb4-3" data-line-number="3"></a>
<a class="sourceLine" id="cb4-4" data-line-number="4"><span class="ot">toInts ::</span> <span class="dt">String</span> <span class="ot">-&gt;</span> [<span class="dt">Int</span>]</a>
<a class="sourceLine" id="cb4-5" data-line-number="5">toInts <span class="fu">=</span> fmap (read <span class="fu">.</span> (<span class="fu">:</span> []))</a>
<a class="sourceLine" id="cb4-6" data-line-number="6"></a>
<a class="sourceLine" id="cb4-7" data-line-number="7"><span class="ot">toWaterLine ::</span> [<span class="dt">Int</span>] <span class="ot">-&gt;</span> [<span class="dt">Int</span>]</a>
<a class="sourceLine" id="cb4-8" data-line-number="8">toWaterLine <span class="fu">=</span> zipWith (<span class="fu">-</span>) <span class="fu">=&lt;&lt;</span> (zipWith min <span class="fu">.</span> scanl1 max <span class="fu">&lt;*&gt;</span> scanr1 max)</a></code></pre></div>
<p><code>toInts</code> 関数は数列の文字列から数値のリストに変換している． Haskell で文字列を任意の型に変換するには <code>read :: String -&gt; a</code> 関数を使う． Haskell において <code>String = [Char]</code> なので，<code>fmap (: [])</code> をして <code>String</code> のリストに変換し，各文字列を <code>read</code> をしているというわけだ(<code>singleton</code> みたいな関数が標準にあればいいのに)．</p>
<p><code>toWaterLine</code> 関数が水槽の各列の水の量を計算し，<code>sum</code> で総和している． なので，重要なのは <code>toWaterLine</code> 関数だ． <code>(&lt;*&gt;)</code> 演算子や <code>(=&lt;&lt;)</code> 演算子などがあって意味不明かもしれないが，この辺りはポイントフリーにするためのツールみたいなもので，アルゴリズムの本質的な部分ではないよ．</p>
<h3 id="関数も-monad-型クラスのインスタンス">関数も <code>Monad</code> 型クラスのインスタンス</h3>
<p><code>(&lt;*&gt;)</code> 演算子や <code>(=&lt;&lt;)</code> 演算子が何をしているかと言うのは <strong>関数型 <code>(-&gt;) a</code> も <code>Monad</code> 型クラスのインスタンス</strong> だという事実を知っていれば簡単に読めますね． Haskell 界隈では常識(要出典)なので，説明しなくても良いかもしれないが，初学者のために念のためしておく．</p>
<p>それぞれの演算子の型は以下の通り(めんどいので <code>Monad</code> で統一)．</p>
<div class="sourceCode" id="cb5"><pre class="sourceCode haskell"><code class="sourceCode haskell"><a class="sourceLine" id="cb5-1" data-line-number="1"><span class="ot">(&lt;*&gt;) ::</span> <span class="dt">Monad</span> m <span class="ot">=&gt;</span> m (a <span class="ot">-&gt;</span> b) <span class="ot">-&gt;</span> m a <span class="ot">-&gt;</span> m b</a>
<a class="sourceLine" id="cb5-2" data-line-number="2"><span class="ot">(=&lt;&lt;) ::</span> <span class="dt">Monad</span> m <span class="ot">=&gt;</span> (a <span class="ot">-&gt;</span> m b) <span class="ot">-&gt;</span> m a <span class="ot">-&gt;</span> m b</a></code></pre></div>
<p>で，前述したとおり，関数型 <code>(c -&gt;)</code> も <code>Monad</code> 型クラスのインスタンスなので，<code>m = (c -&gt;)</code> と置き換えれる．</p>
<div class="sourceCode" id="cb6"><pre class="sourceCode haskell"><code class="sourceCode haskell"><a class="sourceLine" id="cb6-1" data-line-number="1"><span class="ot">(&lt;*&gt;) ::</span> (c <span class="ot">-&gt;</span> a <span class="ot">-&gt;</span> b) <span class="ot">-&gt;</span> (c <span class="ot">-&gt;</span> a) <span class="ot">-&gt;</span> (c <span class="ot">-&gt;</span> b)</a>
<a class="sourceLine" id="cb6-2" data-line-number="2"><span class="ot">(=&lt;&lt;) ::</span> (a <span class="ot">-&gt;</span> c <span class="ot">-&gt;</span> b) <span class="ot">-&gt;</span> (c <span class="ot">-&gt;</span> a) <span class="ot">-&gt;</span> (c <span class="ot">-&gt;</span> b)</a></code></pre></div>
<p>便利そうなコンビネーターになった． なので，<code>toWaterLine</code> 関数のこれらの演算子を同様のラムダ式で置き換えてあげよう．</p>
<div class="sourceCode" id="cb7"><pre class="sourceCode haskell"><code class="sourceCode haskell"><a class="sourceLine" id="cb7-1" data-line-number="1"><span class="ot">toWaterLine ::</span> [<span class="dt">Int</span>] <span class="ot">-&gt;</span> [<span class="dt">Int</span>]</a>
<a class="sourceLine" id="cb7-2" data-line-number="2">toWaterLine</a>
<a class="sourceLine" id="cb7-3" data-line-number="3">  <span class="fu">=</span> \xs <span class="ot">-&gt;</span> zipWith (<span class="fu">-</span>) ((\ys <span class="ot">-&gt;</span> (zipWith min <span class="fu">.</span> scanl1 max <span class="fu">$</span> ys) (scanr1 max ys)) xs) xs</a>
<a class="sourceLine" id="cb7-4" data-line-number="4">  <span class="fu">=</span> \xs <span class="ot">-&gt;</span> zipWith (<span class="fu">-</span>) ((\ys <span class="ot">-&gt;</span> zipWith min (scanl1 max ys) (scanr1 max ys)) xs) xs</a>
<a class="sourceLine" id="cb7-5" data-line-number="5">  <span class="fu">=</span> \xs <span class="ot">-&gt;</span> zipWith (<span class="fu">-</span>) (zipWith min (scanl1 max xs) (scanr1 max xs)) xs</a></code></pre></div>
<p>ついでに，他の言語の人では分かりにくい演算子も置き換えたので，これでどの言語の人でも読めるはずだ．</p>
<h3 id="アルゴリズム">アルゴリズム</h3>
<p>ここからは Haskell 関係ない． ひとつひとつ見ていこう．</p>
<p><code>scanl :: (b -&gt; a -&gt; b) -&gt; b -&gt; [a] -&gt; [b]</code> 関数は左畳み込み関数 <code>foldl :: (b -&gt; a -&gt; b) -&gt; b -&gt; [a] -&gt; b</code> の途中経過もリストで残したような関数だ． つまり <code>foldl f x xs = last $ scanl f x xs</code> が成り立つ． <code>scanl1 :: (a -&gt; a -&gt; a) -&gt; [a] -&gt; [a]</code> 関数は初期値を無くしたバージョンだ． <code>scanr1</code> は <code>scanl1</code> の右畳み込みバージョン．</p>
<h2 id="section"></h2>
<p><code>scanl max xs</code> は左から順に，水槽の高さを比較して高い方を残しているので，各列の最も高い左側が残る． <code>scanr1 max xs</code> は各列の最も高い右側が残る．</p>
<p><img src="/assets/water-towers-hs/water1.gif" /></p>
<p>そして，それらの低い方を残して，もとの高さを引く．</p>
<p><img src="/assets/water-towers-hs/water2.gif" /></p>
<p>すごいできた！</p>
<h2 id="試しに">試しに</h2>
<p>次のテストコードを走らせてみた．</p>
<div class="sourceCode" id="cb8"><pre class="sourceCode haskell"><code class="sourceCode haskell"><a class="sourceLine" id="cb8-1" data-line-number="1"><span class="co">-- WalterTowers.hs</span></a>
<a class="sourceLine" id="cb8-2" data-line-number="2"><span class="ot">main ::</span> <span class="dt">IO</span> ()</a>
<a class="sourceLine" id="cb8-3" data-line-number="3">main <span class="fu">=</span> print <span class="fu">$</span> all ((<span class="fu">==</span>) <span class="fu">&lt;$&gt;</span> snd <span class="fu">&lt;*&gt;</span> (show <span class="fu">.</span> solve <span class="fu">.</span> fst)) testSet</a>
<a class="sourceLine" id="cb8-4" data-line-number="4"></a>
<a class="sourceLine" id="cb8-5" data-line-number="5">solve <span class="fu">=</span> <span class="fu">...</span></a>
<a class="sourceLine" id="cb8-6" data-line-number="6"></a>
<a class="sourceLine" id="cb8-7" data-line-number="7"><span class="ot">testSet ::</span> [(<span class="dt">String</span>, <span class="dt">String</span>)]</a>
<a class="sourceLine" id="cb8-8" data-line-number="8">testSet <span class="fu">=</span></a>
<a class="sourceLine" id="cb8-9" data-line-number="9">  [ (<span class="st">&quot;83141310145169154671122&quot;</span>, <span class="st">&quot;24&quot;</span>)</a>
<a class="sourceLine" id="cb8-10" data-line-number="10">  , (<span class="st">&quot;923111128&quot;</span>, <span class="st">&quot;45&quot;</span>)</a>
<a class="sourceLine" id="cb8-11" data-line-number="11">  , (<span class="st">&quot;923101128&quot;</span>, <span class="st">&quot;1&quot;</span>)</a>
<a class="sourceLine" id="cb8-12" data-line-number="12">  , (<span class="st">&quot;903111128&quot;</span>, <span class="st">&quot;9&quot;</span>)</a>
<a class="sourceLine" id="cb8-13" data-line-number="13">  , (<span class="st">&quot;3&quot;</span>, <span class="st">&quot;0&quot;</span>)</a>
<a class="sourceLine" id="cb8-14" data-line-number="14">  , (<span class="st">&quot;31&quot;</span>, <span class="st">&quot;0&quot;</span>)</a>
<a class="sourceLine" id="cb8-15" data-line-number="15">  , (<span class="st">&quot;412&quot;</span>, <span class="st">&quot;1&quot;</span>)</a>
<a class="sourceLine" id="cb8-16" data-line-number="16">  , (<span class="st">&quot;3124&quot;</span>, <span class="st">&quot;3&quot;</span>)</a>
<a class="sourceLine" id="cb8-17" data-line-number="17">  , (<span class="st">&quot;11111&quot;</span>, <span class="st">&quot;0&quot;</span>)</a>
<a class="sourceLine" id="cb8-18" data-line-number="18">  , (<span class="st">&quot;222111&quot;</span>, <span class="st">&quot;0&quot;</span>)</a>
<a class="sourceLine" id="cb8-19" data-line-number="19">  , (<span class="st">&quot;335544&quot;</span>, <span class="st">&quot;0&quot;</span>)</a>
<a class="sourceLine" id="cb8-20" data-line-number="20">  , (<span class="st">&quot;1223455321&quot;</span>, <span class="st">&quot;0&quot;</span>)</a>
<a class="sourceLine" id="cb8-21" data-line-number="21">  , (<span class="st">&quot;000&quot;</span>, <span class="st">&quot;0&quot;</span>)</a>
<a class="sourceLine" id="cb8-22" data-line-number="22">  , (<span class="st">&quot;000100020003121&quot;</span>, <span class="st">&quot;1&quot;</span>)</a>
<a class="sourceLine" id="cb8-23" data-line-number="23">  , (<span class="st">&quot;1213141516171819181716151413121&quot;</span>, <span class="st">&quot;56&quot;</span>)</a>
<a class="sourceLine" id="cb8-24" data-line-number="24">  , (<span class="st">&quot;712131415161718191817161514131216&quot;</span>, <span class="st">&quot;117&quot;</span>)</a>
<a class="sourceLine" id="cb8-25" data-line-number="25">  , (<span class="st">&quot;712131405161718191817161514031216&quot;</span>, <span class="st">&quot;64&quot;</span>)</a>
<a class="sourceLine" id="cb8-26" data-line-number="26">  , (<span class="st">&quot;03205301204342100&quot;</span>, <span class="st">&quot;1&quot;</span>)</a>
<a class="sourceLine" id="cb8-27" data-line-number="27">  , (<span class="st">&quot;0912830485711120342&quot;</span>, <span class="st">&quot;18&quot;</span>)</a>
<a class="sourceLine" id="cb8-28" data-line-number="28">  , (<span class="st">&quot;1113241120998943327631001&quot;</span>, <span class="st">&quot;20&quot;</span>)</a>
<a class="sourceLine" id="cb8-29" data-line-number="29">  , (<span class="st">&quot;7688167781598943035023813337019904732&quot;</span>, <span class="st">&quot;41&quot;</span>)</a>
<a class="sourceLine" id="cb8-30" data-line-number="30">  , (<span class="st">&quot;2032075902729233234129146823006063388&quot;</span>, <span class="st">&quot;79&quot;</span>)</a>
<a class="sourceLine" id="cb8-31" data-line-number="31">  , (<span class="st">&quot;8323636570846582397534533&quot;</span>, <span class="st">&quot;44&quot;</span>)</a>
<a class="sourceLine" id="cb8-32" data-line-number="32">  , (<span class="st">&quot;2142555257761672319599209190604843&quot;</span>, <span class="st">&quot;41&quot;</span>)</a>
<a class="sourceLine" id="cb8-33" data-line-number="33">  , (<span class="st">&quot;06424633785085474133925235&quot;</span>, <span class="st">&quot;51&quot;</span>)</a>
<a class="sourceLine" id="cb8-34" data-line-number="34">  , (<span class="st">&quot;503144400846933212134&quot;</span>, <span class="st">&quot;21&quot;</span>)</a>
<a class="sourceLine" id="cb8-35" data-line-number="35">  , (<span class="st">&quot;1204706243676306476295999864&quot;</span>, <span class="st">&quot;21&quot;</span>)</a>
<a class="sourceLine" id="cb8-36" data-line-number="36">  , (<span class="st">&quot;050527640248767717738306306596466224&quot;</span>, <span class="st">&quot;29&quot;</span>)</a>
<a class="sourceLine" id="cb8-37" data-line-number="37">  , (<span class="st">&quot;5926294098216193922825&quot;</span>, <span class="st">&quot;65&quot;</span>)</a>
<a class="sourceLine" id="cb8-38" data-line-number="38">  , (<span class="st">&quot;655589141599534035&quot;</span>, <span class="st">&quot;29&quot;</span>)</a>
<a class="sourceLine" id="cb8-39" data-line-number="39">  , (<span class="st">&quot;7411279689677738&quot;</span>, <span class="st">&quot;34&quot;</span>)</a>
<a class="sourceLine" id="cb8-40" data-line-number="40">  , (<span class="st">&quot;268131111165754619136819109839402&quot;</span>, <span class="st">&quot;102&quot;</span>)</a>
<a class="sourceLine" id="cb8-41" data-line-number="41">  ]</a></code></pre></div>
<p><code>stack runghc</code> で走らせると．</p>
<pre><code>$ stack runghc WalterTowers.hs
True</code></pre>
<h2 id="おしまい">おしまい</h2>
<p>こういうのを自分で思いつけるようになりたいね…</p>
  </div>
</div>
</article>
]]></summary>
</entry>
<entry>
    <title>拡張可能直和型を引数に取る関数の定義 (Haskell)</title>
    <link href="https://matsubara0507.github.io/posts/2018-01-31-fun-of-extensible-2.html" />
    <id>https://matsubara0507.github.io/posts/2018-01-31-fun-of-extensible-2.html</id>
    <published>2018-01-31T00:00:00Z</published>
    <updated>2018-01-31T00:00:00Z</updated>
    <summary type="html"><![CDATA[<article class="post card" itemscope itemtype="http://schema.org/BlogPosting">
 <div class="card-content">
  <header class="post-header">
    <h1 class="post-title" itemprop="name headline">拡張可能直和型を引数に取る関数の定義 (Haskell)</h1>
    <p class="post-meta">
      <time datetime="2018-01-31" itemprop="datePublished">
        Jan 31, 2018
      </time>
      
      
      <div class="tags">
          <i class="fa fa-tags"></i> <a href="/tags/Haskell.html">Haskell</a> <a href="/tags/extensible-package.html">extensible-package</a>
      </div>
      
    </p>
  </header>

  <div class="post-content" itemprop="articleBody">
    <p>「<a href="https://hackage.haskell.org/package/extensible"><code>extensible</code></a> パッケージの楽しみ その２」です．</p>
<p>拡張可能レコードやら Extensible Effect やら，Haskell の Extensible なものを全て統一された仕組みで提供する化け物パッケージ <a href="https://hackage.haskell.org/package/extensible-0.4.7.1"><code>extensible</code></a> について，割とドキュメントには無い(？)ネタを書いておくシリーズ第二弾です． ぼく自身は作者ではないし，間違っているかもなのでこの記事を完全には当てにしないでください．</p>
<p>また，現在の最新バージョンは 0.4.7.1 です(そのバージョンでハナシをしてる)．</p>
<h2 id="section"></h2>
<p><a href="/posts/2017-11-28-fun-of-extensible-1.html">前回</a>は拡張可能レコードの拡縮の話を書きました． その最後の方に，おまけとして拡張可能直和型の話を書きました． 実際に自分のプログラムで，この拡張可能直和型を使おうとしてみたんですが，パターンマッチが分からず分岐が出来なかったので調べました，ってのが今回のハナシ．</p>
<p>今回の Haskell コードは基本的に<a href="https://github.com/matsubara0507/test-extensible/blob/master/src/Sample/Variant.hs">コレ</a>．</p>
<h2 id="拡張可能直和型">拡張可能直和型</h2>
<p>ここでは，Haskell の代数的データ型において</p>
<div class="sourceCode" id="cb1"><pre class="sourceCode haskell"><code class="sourceCode haskell"><a class="sourceLine" id="cb1-1" data-line-number="1"><span class="kw">data</span> <span class="dt">Color</span></a>
<a class="sourceLine" id="cb1-2" data-line-number="2">  <span class="fu">=</span> <span class="dt">RGB</span> <span class="dt">Int</span> <span class="dt">Int</span> <span class="dt">Int</span></a>
<a class="sourceLine" id="cb1-3" data-line-number="3">  <span class="fu">|</span> <span class="dt">CMYK</span> <span class="dt">Int</span> <span class="dt">Int</span> <span class="dt">Int</span> <span class="dt">Int</span></a></code></pre></div>
<p>のように複数の値コンストラクタをとり得る型を直和型ということにします(あんまり一般的ではない？)． このようなデータ型を extensible を使って書くと次のようになる．</p>
<div class="sourceCode" id="cb2"><pre class="sourceCode haskell"><code class="sourceCode haskell"><a class="sourceLine" id="cb2-1" data-line-number="1"><span class="kw">type</span> <span class="dt">Color</span> <span class="fu">=</span> <span class="dt">Variant</span></a>
<a class="sourceLine" id="cb2-2" data-line-number="2">  <span class="ch">&#39;[ &quot;rgb&quot;  &gt;: (Int,Int,Int)</span></a>
<a class="sourceLine" id="cb2-3" data-line-number="3">   , <span class="st">&quot;cmyk&quot;</span> <span class="fu">&gt;:</span> (<span class="dt">Int</span>,<span class="dt">Int</span>,<span class="dt">Int</span>,<span class="dt">Int</span>)</a>
<a class="sourceLine" id="cb2-4" data-line-number="4">   ]</a></code></pre></div>
<p>これが拡張可能直和型である(と呼んでいる)． 例えば次のような，<code>Color</code> 型の構造的に部分型である <code>RGB</code> 型の値を <a href="https://hackage.haskell.org/package/extensible-0.4.7.1/docs/Data-Extensible-Inclusion.html#v:spread"><code>spread</code></a> という関数を使って持ち上げることが出来る．</p>
<div class="sourceCode" id="cb3"><pre class="sourceCode haskell"><code class="sourceCode haskell"><a class="sourceLine" id="cb3-1" data-line-number="1">ghci<span class="fu">&gt;</span> <span class="kw">type</span> <span class="dt">RGB</span> <span class="fu">=</span> <span class="dt">Variant</span> <span class="ch">&#39;[ &quot;rgb&quot; &gt;: (Int,Int,Int) ]</span></a>
<a class="sourceLine" id="cb3-2" data-line-number="2">ghci<span class="fu">&gt;</span> color1 <span class="fu">=</span> embedAssoc <span class="fu">$</span> <span class="fu">#</span>rgb <span class="fu">@=</span> (<span class="dv">0</span>,<span class="dv">0</span>,<span class="dv">0</span>)<span class="ot"> ::</span> <span class="dt">RGB</span></a>
<a class="sourceLine" id="cb3-3" data-line-number="3">ghci<span class="fu">&gt;</span> color2 <span class="fu">=</span> spread<span class="ot"> color1 ::</span> <span class="dt">Color</span></a></code></pre></div>
<p>ちなみに「拡張可能直和型」って単語は，ほぼほぼ造語です(すいません)． 作者さんは <strong>Extensible Variants</strong> と書いているので，正確には拡張可能バリアント型ですかね． ML 系では「バリアント型」って単語は良く使われてますが，Haskell では馴染みが無いので「直和型」って単語を用います．</p>
<h2 id="パターンマッチ">パターンマッチ</h2>
<p>ここからが本題． 例として次のような図形の型を用いる．</p>
<div class="sourceCode" id="cb4"><pre class="sourceCode haskell"><code class="sourceCode haskell"><a class="sourceLine" id="cb4-1" data-line-number="1"><span class="kw">data</span> <span class="dt">Shape</span></a>
<a class="sourceLine" id="cb4-2" data-line-number="2">  <span class="fu">=</span> <span class="dt">Circle</span> <span class="dt">Point</span> <span class="dt">Double</span></a>
<a class="sourceLine" id="cb4-3" data-line-number="3">  <span class="fu">|</span> <span class="dt">Rect</span> <span class="dt">Point</span> <span class="dt">Point</span></a>
<a class="sourceLine" id="cb4-4" data-line-number="4"><span class="kw">type</span> <span class="dt">Point</span> <span class="fu">=</span> (<span class="dt">Double</span>, <span class="dt">Double</span>)</a></code></pre></div>
<p><code>Circle</code> が円で中心点の座標と半径を持ち，<code>Rect</code> が矩形で左下と右上の座標を持つ． 例えば，図形の面積を求める関数 <code>area</code> を書くときはパターンマッチを用いて次のように書きますよね．</p>
<div class="sourceCode" id="cb5"><pre class="sourceCode haskell"><code class="sourceCode haskell"><a class="sourceLine" id="cb5-1" data-line-number="1"><span class="ot">area ::</span> <span class="dt">Shape</span> <span class="ot">-&gt;</span> <span class="dt">Double</span></a>
<a class="sourceLine" id="cb5-2" data-line-number="2">area (<span class="dt">Circle</span> _ r) <span class="fu">=</span> pi <span class="fu">*</span> (r <span class="fu">^</span> <span class="dv">2</span>)</a>
<a class="sourceLine" id="cb5-3" data-line-number="3">area (<span class="dt">Rect</span> (x1,y1) (x2,y2)) <span class="fu">=</span> abs (x2 <span class="fu">-</span> x1) <span class="fu">*</span> abs (y2 <span class="fu">-</span> y1)</a></code></pre></div>
<p>では，この <code>Shape</code> 型を拡張可能直和型で書いてみる．</p>
<div class="sourceCode" id="cb6"><pre class="sourceCode haskell"><code class="sourceCode haskell"><a class="sourceLine" id="cb6-1" data-line-number="1"><span class="kw">type</span> <span class="dt">Shape</span> <span class="fu">=</span> <span class="dt">Variant</span></a>
<a class="sourceLine" id="cb6-2" data-line-number="2">  <span class="ch">&#39;[ &quot;circle&quot; &gt;: Circle</span></a>
<a class="sourceLine" id="cb6-3" data-line-number="3">   , <span class="st">&quot;rect&quot;</span>   <span class="fu">&gt;:</span> <span class="dt">Rect</span></a>
<a class="sourceLine" id="cb6-4" data-line-number="4">   ]</a>
<a class="sourceLine" id="cb6-5" data-line-number="5"></a>
<a class="sourceLine" id="cb6-6" data-line-number="6"><span class="kw">type</span> <span class="dt">Point</span> <span class="fu">=</span> <span class="dt">Record</span> <span class="ch">&#39;[ &quot;x&quot; &gt;: Double, &quot;y&quot; &gt;: Double ]</span></a>
<a class="sourceLine" id="cb6-7" data-line-number="7"><span class="kw">newtype</span> <span class="dt">Circle</span> <span class="fu">=</span></a>
<a class="sourceLine" id="cb6-8" data-line-number="8">  <span class="dt">Circle</span> (<span class="dt">Record</span> <span class="ch">&#39;[ &quot;mid&quot; &gt;: Point, &quot;r&quot; &gt;: Double ]) deriving (Show, Eq)</span></a>
<a class="sourceLine" id="cb6-9" data-line-number="9"><span class="kw">newtype</span> <span class="dt">Rect</span> <span class="fu">=</span></a>
<a class="sourceLine" id="cb6-10" data-line-number="10">  <span class="dt">Rect</span> (<span class="dt">Record</span> <span class="ch">&#39;[ &quot;ll&quot; &gt;: Point, &quot;ur&quot; &gt;: Point ]) deriving (Show, Eq)</span></a></code></pre></div>
<p><code>Record</code> は拡張可能レコードだ． 後の話の流れのために <code>newtype</code> で <code>Circle</code> 型と <code>Rect</code> 型を定義したが，別に型エイリアスでもいい．</p>
<p>問題はココからで，どうやって <code>area</code> 関数を定義するか． (作者さんに聞いてしまえば早いんだけど)パッケージを漁ってたらそれらしい関数 <a href="https://hackage.haskell.org/package/extensible-0.4.7.1/docs/Data-Extensible-Match.html#v:match"><code>match</code></a> があった． イロイロ試した結果，<code>match</code> よりも <a href="https://hackage.haskell.org/package/extensible-0.4.7.1/docs/Data-Extensible-Field.html#v:matchField"><code>matchField</code></a> の方が使いやすかったので，こっちを使って次のように書ける．</p>
<div class="sourceCode" id="cb7"><pre class="sourceCode haskell"><code class="sourceCode haskell"><a class="sourceLine" id="cb7-1" data-line-number="1"><span class="ot">area ::</span> <span class="dt">Shape</span> <span class="ot">-&gt;</span> <span class="dt">Double</span></a>
<a class="sourceLine" id="cb7-2" data-line-number="2">area <span class="fu">=</span> matchField</a>
<a class="sourceLine" id="cb7-3" data-line-number="3">    <span class="fu">$</span> <span class="fu">#</span>circle <span class="fu">@=</span> (\(<span class="dt">Circle</span> s) <span class="ot">-&gt;</span> pi <span class="fu">*</span> (s <span class="fu">^.</span> <span class="fu">#</span>r) <span class="fu">^</span> <span class="dv">2</span>)</a>
<a class="sourceLine" id="cb7-4" data-line-number="4">   <span class="fu">&lt;:</span> <span class="fu">#</span>rect   <span class="fu">@=</span> ((<span class="fu">*</span>) <span class="fu">&lt;$&gt;</span> width <span class="fu">&lt;*&gt;</span> height)</a>
<a class="sourceLine" id="cb7-5" data-line-number="5">   <span class="fu">&lt;:</span> nil</a>
<a class="sourceLine" id="cb7-6" data-line-number="6"></a>
<a class="sourceLine" id="cb7-7" data-line-number="7">width,<span class="ot"> height ::</span> <span class="dt">Rect</span> <span class="ot">-&gt;</span> <span class="dt">Double</span></a>
<a class="sourceLine" id="cb7-8" data-line-number="8">width  (<span class="dt">Rect</span> s) <span class="fu">=</span> abs <span class="fu">$</span> s <span class="fu">^.</span> <span class="fu">#</span>ur <span class="fu">^.</span> <span class="fu">#</span>x <span class="fu">-</span> s <span class="fu">^.</span> <span class="fu">#</span>ll <span class="fu">^.</span> <span class="fu">#</span>x</a>
<a class="sourceLine" id="cb7-9" data-line-number="9">height (<span class="dt">Rect</span> s) <span class="fu">=</span> abs <span class="fu">$</span> s <span class="fu">^.</span> <span class="fu">#</span>ur <span class="fu">^.</span> <span class="fu">#</span>y <span class="fu">-</span> s <span class="fu">^.</span> <span class="fu">#</span>ll <span class="fu">^.</span> <span class="fu">#</span>y</a></code></pre></div>
<p>意外と簡単にできた！</p>
<p>(なんでこれでうまくいくかを説明しようと思ったけど，ぼくには説明するのが難しすぎてやめた．) (ちなみに，すごい簡潔に書けるのは <a href="https://hackage.haskell.org/package/extensible-0.4.7.1/docs/Data-Extensible-Wrapper.html#t:Wrapper"><code>Wrapper</code></a> 型クラスのおかげだと思う．)</p>
<h2 id="型クラスを使う">型クラスを使う</h2>
<p>ここからが拡張可能直和型のすごいところ(パターンマッチしかできないなら普通の直和型でもいいもんね…)． 型クラスを用いて次のようにも <code>area</code> 関数を定義できる．</p>
<div class="sourceCode" id="cb8"><pre class="sourceCode haskell"><code class="sourceCode haskell"><a class="sourceLine" id="cb8-1" data-line-number="1"><span class="kw">class</span> <span class="dt">Area</span> a <span class="kw">where</span></a>
<a class="sourceLine" id="cb8-2" data-line-number="2"><span class="ot">  area ::</span> a <span class="ot">-&gt;</span> <span class="dt">Double</span></a>
<a class="sourceLine" id="cb8-3" data-line-number="3"></a>
<a class="sourceLine" id="cb8-4" data-line-number="4"><span class="kw">instance</span> <span class="dt">Area</span> <span class="dt">Circle</span> <span class="kw">where</span></a>
<a class="sourceLine" id="cb8-5" data-line-number="5">  area (<span class="dt">Circle</span> s) <span class="fu">=</span> pi <span class="fu">*</span> (s <span class="fu">^.</span> <span class="fu">#</span>r) <span class="fu">^</span> <span class="dv">2</span></a>
<a class="sourceLine" id="cb8-6" data-line-number="6"></a>
<a class="sourceLine" id="cb8-7" data-line-number="7"><span class="kw">instance</span> <span class="dt">Area</span> <span class="dt">Rect</span> <span class="kw">where</span></a>
<a class="sourceLine" id="cb8-8" data-line-number="8">  area <span class="fu">=</span> (<span class="fu">*</span>) <span class="fu">&lt;$&gt;</span> width <span class="fu">&lt;*&gt;</span> height</a>
<a class="sourceLine" id="cb8-9" data-line-number="9"></a>
<a class="sourceLine" id="cb8-10" data-line-number="10"><span class="kw">instance</span> <span class="dt">Forall</span> (<span class="dt">KeyValue</span> <span class="dt">KnownSymbol</span> <span class="dt">Area</span>) xs <span class="ot">=&gt;</span> <span class="dt">Area</span> (<span class="dt">Variant</span> xs) <span class="kw">where</span></a>
<a class="sourceLine" id="cb8-11" data-line-number="11">  area <span class="fu">=</span> matchField <span class="fu">$</span></a>
<a class="sourceLine" id="cb8-12" data-line-number="12">    htabulateFor (<span class="dt">Proxy</span><span class="ot"> ::</span> <span class="dt">Proxy</span> (<span class="dt">KeyValue</span> <span class="dt">KnownSymbol</span> <span class="dt">Area</span>)) <span class="fu">$</span></a>
<a class="sourceLine" id="cb8-13" data-line-number="13">      \_ <span class="ot">-&gt;</span> <span class="dt">Field</span> (<span class="dt">Match</span> <span class="fu">$</span> area <span class="fu">.</span> runIdentity)</a></code></pre></div>
<p><code>Forall (KeyValue KnownSymbol Area) xs</code> という型制約の直観的な解釈は，型レベルリスト <code>xs</code> の全ての要素 <code>k &gt;: v</code> が <code>KnownSymbol k</code> と <code>Area v</code> を満たす，という意味だ． 即ち，拡張可能直和型の全ての要素が <code>Area</code> 型クラスのインスタンスであれば，その拡張可能直和型は <code>Area</code> 型クラスのインスタンスになり得るのだ． ちゃんと次のように動作する．</p>
<div class="sourceCode" id="cb9"><pre class="sourceCode haskell"><code class="sourceCode haskell"><a class="sourceLine" id="cb9-1" data-line-number="1">ghci<span class="fu">&gt;</span> shape1</a>
<a class="sourceLine" id="cb9-2" data-line-number="2"><span class="dt">EmbedAt</span> <span class="fu">$</span>(mkMembership <span class="dv">0</span>) (circle <span class="fu">@=</span> <span class="dt">Circle</span> (mid <span class="fu">@=</span> (x <span class="fu">@=</span> <span class="fl">1.0</span> <span class="fu">&lt;:</span> y <span class="fu">@=</span> <span class="fl">2.0</span> <span class="fu">&lt;:</span> nil) <span class="fu">&lt;:</span> r <span class="fu">@=</span> <span class="fl">2.0</span> <span class="fu">&lt;:</span> nil))</a>
<a class="sourceLine" id="cb9-3" data-line-number="3">ghci<span class="fu">&gt;</span> <span class="fu">:</span>t shape1</a>
<a class="sourceLine" id="cb9-4" data-line-number="4"><span class="ot">shape1 ::</span> <span class="dt">Shape</span></a>
<a class="sourceLine" id="cb9-5" data-line-number="5">ghci<span class="fu">&gt;</span> area shape1</a>
<a class="sourceLine" id="cb9-6" data-line-number="6"><span class="fl">12.566370614359172</span></a></code></pre></div>
<p>これの何がすごいかと言うと，例えば次のように <code>Shape</code> 型を拡張しよう．</p>
<div class="sourceCode" id="cb10"><pre class="sourceCode haskell"><code class="sourceCode haskell"><a class="sourceLine" id="cb10-1" data-line-number="1"><span class="kw">newtype</span> <span class="dt">Triangle</span> <span class="fu">=</span></a>
<a class="sourceLine" id="cb10-2" data-line-number="2">  <span class="dt">Triangle</span> (<span class="dt">Point</span>, <span class="dt">Point</span>, <span class="dt">Point</span>) <span class="kw">deriving</span> (<span class="dt">Show</span>, <span class="dt">Eq</span>)</a>
<a class="sourceLine" id="cb10-3" data-line-number="3"></a>
<a class="sourceLine" id="cb10-4" data-line-number="4"><span class="kw">type</span> <span class="dt">Shape</span> <span class="fu">=</span> <span class="dt">Variant</span></a>
<a class="sourceLine" id="cb10-5" data-line-number="5">  <span class="ch">&#39;[ &quot;circle&quot; &gt;: Circle</span></a>
<a class="sourceLine" id="cb10-6" data-line-number="6">   , <span class="st">&quot;rect&quot;</span> <span class="fu">&gt;:</span> <span class="dt">Rect</span></a>
<a class="sourceLine" id="cb10-7" data-line-number="7">   , <span class="st">&quot;triangle&quot;</span> <span class="fu">&gt;:</span> <span class="dt">Triangle</span></a>
<a class="sourceLine" id="cb10-8" data-line-number="8">   ]</a></code></pre></div>
<p>一般的な直和型の場合は，<code>Shape</code> 型のパターンマッチしている部分を全て増やさないといけない． しかし，型クラスを用いた拡張可能直和型の関数であれば，次のようにインスタンスを増やすだけで良い．</p>
<div class="sourceCode" id="cb11"><pre class="sourceCode haskell"><code class="sourceCode haskell"><a class="sourceLine" id="cb11-1" data-line-number="1"><span class="kw">instance</span> <span class="dt">Area</span> <span class="dt">Triangle</span> <span class="kw">where</span></a>
<a class="sourceLine" id="cb11-2" data-line-number="2">  area (<span class="dt">Triangle</span> (p1, p2, p3)) <span class="fu">=</span></a>
<a class="sourceLine" id="cb11-3" data-line-number="3">    abs ((p1 <span class="fu">^.</span> <span class="fu">#</span>x <span class="fu">-</span> p3 <span class="fu">^.</span> <span class="fu">#</span>x) <span class="fu">*</span> (p2 <span class="fu">^.</span> <span class="fu">#</span>y <span class="fu">-</span> p3 <span class="fu">^.</span> <span class="fu">#</span>y) <span class="fu">-</span> (p2 <span class="fu">^.</span> <span class="fu">#</span>x <span class="fu">-</span> p3 <span class="fu">^.</span> <span class="fu">#</span>x) <span class="fu">*</span> (p1 <span class="fu">^.</span> <span class="fu">#</span>y <span class="fu">-</span> p3 <span class="fu">^.</span> <span class="fu">#</span>y)) <span class="fu">/</span> <span class="dv">2</span></a></code></pre></div>
<p>書き込んでる行数は大差ないかもしれないが，例えばファイルを分けたりなど，より柔軟に関数を定義できる！</p>
<h2 id="おしまい">おしまい</h2>
<p>ちなみに，<code>area</code> 関数は <code>a -&gt; Double</code> で返り値の型が <code>Double</code> だったから楽だった． これが，例えば座標移動をする <code>nudge :: a -&gt; Point -&gt; a</code> のように，返り値が <code>a</code> なものは <code>Variant</code> のインスタンスを定義するのが大変(<a href="https://github.com/matsubara0507/test-extensible/blob/d5e58f59ad4b1a2f4809bbecd79eeffbe04eec51/src/Sample/Variant.hs#L94">頑張った</a>)．</p>
  </div>
</div>
</article>
]]></summary>
</entry>
<entry>
    <title>AdC の Haskell 記事を Haskell で集めた</title>
    <link href="https://matsubara0507.github.io/posts/2018-01-30-scraping-posts-on-adc.html" />
    <id>https://matsubara0507.github.io/posts/2018-01-30-scraping-posts-on-adc.html</id>
    <published>2018-01-30T00:00:00Z</published>
    <updated>2018-01-30T00:00:00Z</updated>
    <summary type="html"><![CDATA[<article class="post card" itemscope itemtype="http://schema.org/BlogPosting">
 <div class="card-content">
  <header class="post-header">
    <h1 class="post-title" itemprop="name headline">AdC の Haskell 記事を Haskell で集めた</h1>
    <p class="post-meta">
      <time datetime="2018-01-30" itemprop="datePublished">
        Jan 30, 2018
      </time>
      
      
      <div class="tags">
          <i class="fa fa-tags"></i> <a href="/tags/Haskell.html">Haskell</a> <a href="/tags/application.html">application</a> <a href="/tags/scraping.html">scraping</a>
      </div>
      
    </p>
  </header>

  <div class="post-content" itemprop="articleBody">
    <p>昨年最後に，Haskell-jp へ以下の記事を寄稿しました．</p>
<ul>
<li><a href="https://haskell.jp/blog/posts/2017/advent-calendar-2017.html">Haskell Advent Calendar 2017 まとめ - Haskell-jp</a></li>
</ul>
<p>2017年のアドベントカレンダーに投稿された Haskell 記事を分類して紹介してるだけです． <a href="https://scrapbox.io/miyamoen/Elm_Advent_Calendar_2017_まとめ">Elm のやつ</a>を見かけて <del>パクリ</del> オマージュしました．</p>
<h2 id="section"></h2>
<p>分類は温もりのある手作業ですが，Haskell 記事は機械的にあ集めました． 本記事はそのために作った Haskell プログラムに関するメモ書きです．</p>
<p>全てのコードは以下のリポジトリにあります．</p>
<ul>
<li><a href="https://github.com/matsubara0507/haskell-advent-calendar">matsubara0507/haskell-advent-calendar - GitHub</a></li>
</ul>
<p>特に本質的な意味は無いんですが CLI として作っています．</p>
<h2 id="作る">作る</h2>
<p>ゴールとしては，<strong>年を指定すると Qiita と ADVENTAR の全てのカレンダーをスクレイピングして，結果(Haskell 記事のリスト)を JSON ファイルに書き出す</strong> プログラムを作る． Haskell に関する記事かどうかは，単純にカレンダーか記事のタイトルに “Haskell” という単語か含まれているかどうかで判断する．</p>
<h3 id="パッケージ">パッケージ</h3>
<p>お世話になった主要なパッケージ達を先に示しておく(<a href="https://github.com/matsubara0507/haskell-advent-calendar/blob/master/package.yaml">package.yaml</a> を見れば十分なんだけどね)．</p>
<ul>
<li><a href="https://hackage.haskell.org/package/extensible">extensible</a> : フィールド数の多いレコード型は拡張可能レコードにしちゃえ
<ul>
<li>フィールドへのアクセスには <a href="https://hackage.haskell.org/package/lens">lens</a> を用いる</li>
</ul></li>
<li><a href="https://hackage.haskell.org/package/aeson">aeson</a> : JSON の読み書きパッケージの金字塔
<ul>
<li><a href="https://hackage.haskell.org/package/aeson-pretty">aeson-pretty</a> : JSON を綺麗にインデントしてくれる</li>
</ul></li>
<li><a href="https://hackage.haskell.org/package/scalpel-core">scalpel-core</a> : スクレイパーパッケージ(core じゃなくて <a href="https://hackage.haskell.org/package/scalpel">scalpel</a> は Windows だとビルドめんどい)
<ul>
<li>Qiita の HTML の取得には <a href="https://hackage.haskell.org/package/wreq">wreq</a> を使った(操作が簡単なので)</li>
<li>ADVENTAR は React 製なので <a href="https://hackage.haskell.org/package/webdriver">webdriver</a> で Selenium を使う</li>
<li><a href="https://hackage.haskell.org/package/shelly">shelly</a> : スクレイピングが攻撃にならんよう1秒スリープ(OSに依存せずに書ける)</li>
</ul></li>
<li><a href="https://hackage.haskell.org/package/conduit-combinators">conduit-combinators</a> : ストリーミングパッケージの金字塔
<ul>
<li>コッチの方が <a href="https://hackage.haskell.org/package/conduit">conduit</a> より名前の衝突なく関数が使えるので(大本は同じ)</li>
</ul></li>
<li><a href="https://hackage.haskell.org/package/optparse-applicative">optparse-applicative</a> : CLI の引数をいい感じに処理してくれる</li>
</ul>
<p>今回の主目的ではないが，このプログラムは extensible の拡張可能レコードを用いた optparse-applicative のサンプルコードにもなっていると思う．</p>
<h3 id="記事の型を考える">記事の型を考える</h3>
<p>最低限必要なのは，記事のタイトルと URL である． 他に，記事の著者と記事が投稿されたカレンダー・日付があった方が，あとで列挙するときに映えるだろう． ということで，以下の型を考えた．</p>
<div class="sourceCode" id="cb1"><pre class="sourceCode haskell"><code class="sourceCode haskell"><a class="sourceLine" id="cb1-1" data-line-number="1"><span class="ot">{-# LANGUAGE DataKinds         #-}</span></a>
<a class="sourceLine" id="cb1-2" data-line-number="2"><span class="ot">{-# LANGUAGE TypeOperators     #-}</span></a>
<a class="sourceLine" id="cb1-3" data-line-number="3"></a>
<a class="sourceLine" id="cb1-4" data-line-number="4"><span class="kw">import</span> <span class="dt">Data.Extensible</span></a>
<a class="sourceLine" id="cb1-5" data-line-number="5"><span class="kw">import</span> <span class="dt">Data.Text</span> (<span class="dt">Text</span>)</a>
<a class="sourceLine" id="cb1-6" data-line-number="6"></a>
<a class="sourceLine" id="cb1-7" data-line-number="7"><span class="kw">type</span> <span class="dt">Post</span> <span class="fu">=</span> <span class="dt">Record</span></a>
<a class="sourceLine" id="cb1-8" data-line-number="8">   <span class="ch">&#39;[ &quot;title&quot; &gt;: Text</span></a>
<a class="sourceLine" id="cb1-9" data-line-number="9">    , <span class="st">&quot;auther&quot;</span> <span class="fu">&gt;:</span> <span class="dt">Text</span></a>
<a class="sourceLine" id="cb1-10" data-line-number="10">    , <span class="st">&quot;url&quot;</span> <span class="fu">&gt;:</span> <span class="dt">URL</span></a>
<a class="sourceLine" id="cb1-11" data-line-number="11">    , <span class="st">&quot;date&quot;</span> <span class="fu">&gt;:</span> <span class="dt">Date</span></a>
<a class="sourceLine" id="cb1-12" data-line-number="12">    , <span class="st">&quot;calendar&quot;</span> <span class="fu">&gt;:</span> <span class="dt">Calendar</span></a>
<a class="sourceLine" id="cb1-13" data-line-number="13">    , <span class="st">&quot;category&quot;</span> <span class="fu">&gt;:</span> <span class="dt">Text</span></a>
<a class="sourceLine" id="cb1-14" data-line-number="14">    ]</a>
<a class="sourceLine" id="cb1-15" data-line-number="15"></a>
<a class="sourceLine" id="cb1-16" data-line-number="16"><span class="kw">type</span> <span class="dt">URL</span> <span class="fu">=</span> <span class="dt">Text</span></a>
<a class="sourceLine" id="cb1-17" data-line-number="17"><span class="kw">type</span> <span class="dt">Date</span> <span class="fu">=</span> <span class="dt">Text</span></a>
<a class="sourceLine" id="cb1-18" data-line-number="18"></a>
<a class="sourceLine" id="cb1-19" data-line-number="19"><span class="kw">type</span> <span class="dt">Calendar</span> <span class="fu">=</span> <span class="dt">Record</span></a>
<a class="sourceLine" id="cb1-20" data-line-number="20">   <span class="ch">&#39;[ &quot;title&quot; &gt;: Text</span></a>
<a class="sourceLine" id="cb1-21" data-line-number="21">    , <span class="st">&quot;url&quot;</span> <span class="fu">&gt;:</span> <span class="dt">URL</span></a>
<a class="sourceLine" id="cb1-22" data-line-number="22">    ]</a></code></pre></div>
<p><code>&quot;category&quot;</code> は後の(手作業による)分類で用いる． extensible による拡張可能レコードな型だが，何となく読めるだろう(分からなかったググって)．</p>
<h2 id="section-1"></h2>
<p>インターフェースを揃えるために，<code>Qiita</code> や <code>ADVENTAR</code> って感じの型から 記事のリスト <code>[Post]</code> を返す型クラスを定義しておく(正直あんまり意味はない)．</p>
<div class="sourceCode" id="cb2"><pre class="sourceCode haskell"><code class="sourceCode haskell"><a class="sourceLine" id="cb2-1" data-line-number="1"><span class="kw">class</span> <span class="dt">ToPosts</span> a <span class="kw">where</span></a>
<a class="sourceLine" id="cb2-2" data-line-number="2"><span class="ot">  getPosts ::</span> a <span class="ot">-&gt;</span> <span class="dt">IO</span> [<span class="dt">Post</span>]</a></code></pre></div>
<p>順にインスタンスを定義していく．</p>
<h3 id="adventar">ADVENTAR</h3>
<p><a href="/posts/2017-12-02-re-adventar-slack-bot-part1.html">ADVENTAR は昔集めた</a>ので簡単だ．</p>
<h4 id="カレンダーの記事を集める">カレンダーの記事を集める</h4>
<p>まずは，カレンダーの URL を与えたら記事のリストを返す関数を書く．</p>
<div class="sourceCode" id="cb3"><pre class="sourceCode haskell"><code class="sourceCode haskell"><a class="sourceLine" id="cb3-1" data-line-number="1"><span class="kw">import</span> <span class="kw">qualified</span> <span class="dt">Data.Text.IO</span> <span class="kw">as</span> <span class="dt">TIO</span></a>
<a class="sourceLine" id="cb3-2" data-line-number="2"><span class="kw">import</span> <span class="dt">Shelly</span> (shelly, sleep)</a>
<a class="sourceLine" id="cb3-3" data-line-number="3"><span class="kw">import</span> <span class="dt">Test.WebDriver</span> (<span class="dt">WDConfig</span>)</a>
<a class="sourceLine" id="cb3-4" data-line-number="4"><span class="kw">import</span> <span class="dt">Text.HTML.Scalpel.Core</span></a>
<a class="sourceLine" id="cb3-5" data-line-number="5"></a>
<a class="sourceLine" id="cb3-6" data-line-number="6"><span class="kw">data</span> <span class="dt">Adventar</span> <span class="fu">=</span> <span class="dt">Adventar</span> <span class="dt">URL</span> <span class="dt">WDConfig</span></a>
<a class="sourceLine" id="cb3-7" data-line-number="7"></a>
<a class="sourceLine" id="cb3-8" data-line-number="8"><span class="kw">instance</span> <span class="dt">ToPosts</span> <span class="dt">Adventar</span> <span class="kw">where</span></a>
<a class="sourceLine" id="cb3-9" data-line-number="9">  getPosts (<span class="dt">Adventar</span> url conf) <span class="fu">=</span> <span class="kw">do</span></a>
<a class="sourceLine" id="cb3-10" data-line-number="10">    html <span class="ot">&lt;-</span> fetchHtmlWith conf url</a>
<a class="sourceLine" id="cb3-11" data-line-number="11">  <span class="kw">let</span></a>
<a class="sourceLine" id="cb3-12" data-line-number="12">    posts <span class="fu">=</span> fromMaybe [] <span class="fu">$</span> scrapeHtml postsScraper html</a>
<a class="sourceLine" id="cb3-13" data-line-number="13">  TIO.putStrLn <span class="fu">$</span> <span class="st">&quot;get posts on &quot;</span> <span class="ot">`mappend`</span> url</a>
<a class="sourceLine" id="cb3-14" data-line-number="14">  shelly <span class="fu">$</span> sleep <span class="dv">1</span></a>
<a class="sourceLine" id="cb3-15" data-line-number="15">  return posts</a>
<a class="sourceLine" id="cb3-16" data-line-number="16"></a>
<a class="sourceLine" id="cb3-17" data-line-number="17"><span class="ot">scrapeHtml ::</span> <span class="dt">Scraper</span> <span class="dt">Html</span> a <span class="ot">-&gt;</span> <span class="dt">Html</span> <span class="ot">-&gt;</span> <span class="dt">Maybe</span> a</a>
<a class="sourceLine" id="cb3-18" data-line-number="18">scrapeHtml <span class="fu">=</span> flip scrapeStringLike</a>
<a class="sourceLine" id="cb3-19" data-line-number="19"></a>
<a class="sourceLine" id="cb3-20" data-line-number="20"><span class="kw">type</span> <span class="dt">Html</span> <span class="fu">=</span> <span class="dt">Text</span></a>
<a class="sourceLine" id="cb3-21" data-line-number="21"></a>
<a class="sourceLine" id="cb3-22" data-line-number="22"><span class="ot">fetchHtmlWith ::</span> <span class="dt">WDConfig</span> <span class="ot">-&gt;</span> <span class="dt">URL</span> <span class="ot">-&gt;</span> <span class="dt">IO</span> <span class="dt">Html</span></a>
<a class="sourceLine" id="cb3-23" data-line-number="23">fetchHtmlWith <span class="fu">=</span> undefined</a>
<a class="sourceLine" id="cb3-24" data-line-number="24"></a>
<a class="sourceLine" id="cb3-25" data-line-number="25"><span class="ot">postsScraper ::</span> <span class="dt">Scraper</span> <span class="dt">Html</span> [<span class="dt">Post</span>]</a>
<a class="sourceLine" id="cb3-26" data-line-number="26">postsScraper <span class="fu">=</span> undefined</a></code></pre></div>
<p>ADVENTAR のカレンダーのページは React 製(?)かなんからしく，静的な HTML からでは記事を参照することが出来ない そのために，Selenium などのヘッドレスブラウザを使ってアクセスする． <code>WDConfig</code> は Haskell から Selenium などを操作するための Web Driver の設定値の型である．</p>
<p><code>shelly $ sleep 1</code> はDOS攻撃にならないように，ここで処理を1秒止めるために書いている．</p>
<h2 id="section-2"></h2>
<p><code>fetchHtmlWith</code> と <code>postsScraper</code> はこんな感じ．</p>
<div class="sourceCode" id="cb4"><pre class="sourceCode haskell"><code class="sourceCode haskell"><a class="sourceLine" id="cb4-1" data-line-number="1"><span class="ot">fetchHtmlWith ::</span> <span class="dt">WDConfig</span> <span class="ot">-&gt;</span> <span class="dt">URL</span> <span class="ot">-&gt;</span> <span class="dt">IO</span> <span class="dt">Html</span></a>
<a class="sourceLine" id="cb4-2" data-line-number="2">fetchHtmlWith config url <span class="fu">=</span> runSession config <span class="fu">$</span> <span class="kw">do</span></a>
<a class="sourceLine" id="cb4-3" data-line-number="3">  openPage (unpack url)</a>
<a class="sourceLine" id="cb4-4" data-line-number="4">  html <span class="ot">&lt;-</span> getSource</a>
<a class="sourceLine" id="cb4-5" data-line-number="5">  closeSession</a>
<a class="sourceLine" id="cb4-6" data-line-number="6">  return html</a></code></pre></div>
<div class="sourceCode" id="cb5"><pre class="sourceCode haskell"><code class="sourceCode haskell"><a class="sourceLine" id="cb5-1" data-line-number="1"><span class="kw">import</span> <span class="dt">Data.Default</span> (def)</a>
<a class="sourceLine" id="cb5-2" data-line-number="2"></a>
<a class="sourceLine" id="cb5-3" data-line-number="3"><span class="ot">postsScraper ::</span> <span class="dt">Scraper</span> <span class="dt">Html</span> [<span class="dt">Post</span>]</a>
<a class="sourceLine" id="cb5-4" data-line-number="4">postsScraper <span class="fu">=</span></a>
<a class="sourceLine" id="cb5-5" data-line-number="5">  chroots (<span class="st">&quot;table&quot;</span> <span class="fu">@:</span> [hasClass <span class="st">&quot;mod-entryList&quot;</span>] <span class="fu">//</span> <span class="st">&quot;tr&quot;</span>) entryScraper</a>
<a class="sourceLine" id="cb5-6" data-line-number="6"></a>
<a class="sourceLine" id="cb5-7" data-line-number="7"><span class="ot">entryScraper ::</span> <span class="dt">Scraper</span> <span class="dt">Text</span> <span class="dt">Post</span></a>
<a class="sourceLine" id="cb5-8" data-line-number="8">entryScraper <span class="fu">=</span> hsequence</a>
<a class="sourceLine" id="cb5-9" data-line-number="9">    <span class="fu">$</span> <span class="fu">#</span>title    <span class="fu">&lt;@=&gt;</span> titleScraper</a>
<a class="sourceLine" id="cb5-10" data-line-number="10">   <span class="fu">&lt;:</span> <span class="fu">#</span>auther   <span class="fu">&lt;@=&gt;</span> autherScraper</a>
<a class="sourceLine" id="cb5-11" data-line-number="11">   <span class="fu">&lt;:</span> <span class="fu">#</span>url      <span class="fu">&lt;@=&gt;</span> urlScraper</a>
<a class="sourceLine" id="cb5-12" data-line-number="12">   <span class="fu">&lt;:</span> <span class="fu">#</span>date     <span class="fu">&lt;@=&gt;</span> dateScraper</a>
<a class="sourceLine" id="cb5-13" data-line-number="13">   <span class="fu">&lt;:</span> <span class="fu">#</span>calendar <span class="fu">&lt;@=&gt;</span> pure def</a>
<a class="sourceLine" id="cb5-14" data-line-number="14">   <span class="fu">&lt;:</span> <span class="fu">#</span>category <span class="fu">&lt;@=&gt;</span> pure <span class="st">&quot;&quot;</span></a>
<a class="sourceLine" id="cb5-15" data-line-number="15">   <span class="fu">&lt;:</span> nil</a>
<a class="sourceLine" id="cb5-16" data-line-number="16"></a>
<a class="sourceLine" id="cb5-17" data-line-number="17"><span class="ot">autherScraper ::</span> <span class="dt">Scraper</span> <span class="dt">Text</span> <span class="dt">Text</span></a>
<a class="sourceLine" id="cb5-18" data-line-number="18">autherScraper <span class="fu">=</span> text <span class="fu">$</span> <span class="st">&quot;td&quot;</span> <span class="fu">@:</span> [hasClass <span class="st">&quot;mod-entryList-user&quot;</span>] <span class="fu">//</span> <span class="st">&quot;span&quot;</span></a>
<a class="sourceLine" id="cb5-19" data-line-number="19"></a>
<a class="sourceLine" id="cb5-20" data-line-number="20"><span class="fu">...</span></a></code></pre></div>
<p><code>xxxScraper</code> を全部書いてると長くなるので割愛(<a href="https://github.com/matsubara0507/haskell-advent-calendar/blob/f6d6a097c08e741239f576693e3d6b2b7ae21a29/src/AdventCalendar/Adventar/Scraper.hs">ココ</a>に全部ある)．</p>
<h4 id="脱線-拡張可能レコードの-etc..">脱線 : 拡張可能レコードの etc..</h4>
<p><a href="https://hackage.haskell.org/package/extensible-0.4.7/docs/Data-Extensible-Field.html#v:-60--64--61--62-"><code>(&lt;@=&gt;)</code></a> 演算子は拡張可能レコードの値を設定する演算子 <a href="https://hackage.haskell.org/package/extensible-0.4.7/docs/Data-Extensible-Field.html#v:-64--61-"><code>(@=)</code></a> のモナディック版(正確には <code>Functor</code>)というイメージだ． <strong>かなり</strong> 直感的に型を書くと次のようになる．</p>
<div class="sourceCode" id="cb6"><pre class="sourceCode haskell"><code class="sourceCode haskell"><a class="sourceLine" id="cb6-1" data-line-number="1"><span class="ot">(@=) ::</span> k <span class="ot">-&gt;</span> v <span class="ot">-&gt;</span> (k <span class="fu">:&gt;</span> v)</a>
<a class="sourceLine" id="cb6-2" data-line-number="2"><span class="ot">(&lt;@=&gt;) ::</span> <span class="dt">Functor</span> f <span class="ot">=&gt;</span> k <span class="ot">-&gt;</span> f v <span class="ot">-&gt;</span> f (k <span class="fu">:&gt;</span> v)</a></code></pre></div>
<p>拡張可能レコードはフィールド名とフィールドの値の型レベル辞書みたいなモノであり，<code>k :&gt; v</code> が辞書のイチ要素というイメージだ． <a href="https://hackage.haskell.org/package/extensible-0.4.7/docs/Data-Extensible-Product.html#v:-60-:"><code>(&lt;:)</code></a> で <code>[kv1, kv2, ... kvn]</code> のような辞書を構築する(<a href="https://hackage.haskell.org/package/extensible-0.4.7/docs/Data-Extensible-Product.html#v:nil"><code>nil</code></a> が空リスト)．</p>
<p><a href="https://hackage.haskell.org/package/extensible-0.4.7/docs/Data-Extensible-Product.html#v:hsequence"><code>hsequence</code></a> 関数で <code>[f (k1 :&gt; v1), ..., f (kn :&gt; vn)] -&gt; f [(k1 :&gt; v1), ... (kn :&gt; vn)]</code> という型の変換をしているイメージだ(あくまでイメージね)．</p>
<h2 id="section-3"></h2>
<p><code>def</code> は <a href="https://hackage.haskell.org/package/data-default">data-default</a> パッケージの値で，<a href="https://hackage.haskell.org/package/data-default-0.7.1.1/docs/Data-Default.html#t:Default"><code>Default</code></a> 型クラスのインスタンスにしないと使えない． 拡張可能レコードのインスタンス化の説明はめんどくさいので割愛する． <a href="https://github.com/matsubara0507/haskell-advent-calendar/blob/f6d6a097c08e741239f576693e3d6b2b7ae21a29/src/Data/Extensible/Instance/Default.hs">ココ</a>に書いてあるので参照してください．</p>
<h4 id="カレンダーを加える">カレンダーを加える</h4>
<p>このままだとカレンダーが <code>def</code> のまま(URL もカレンダー名も <code>&quot;&quot;</code>)なので，スクレイピングしたカレンダーの情報を加えよう．</p>
<div class="sourceCode" id="cb7"><pre class="sourceCode haskell"><code class="sourceCode haskell"><a class="sourceLine" id="cb7-1" data-line-number="1"><span class="kw">import</span> <span class="dt">Control.Lens</span> (set)</a>
<a class="sourceLine" id="cb7-2" data-line-number="2"><span class="kw">import</span> <span class="dt">Data.Text</span> (strip)</a>
<a class="sourceLine" id="cb7-3" data-line-number="3"></a>
<a class="sourceLine" id="cb7-4" data-line-number="4">getPosts (<span class="dt">Adventar</span> url conf) <span class="fu">=</span> <span class="kw">do</span></a>
<a class="sourceLine" id="cb7-5" data-line-number="5">  html <span class="ot">&lt;-</span> fetchHtmlWith conf url</a>
<a class="sourceLine" id="cb7-6" data-line-number="6">  <span class="kw">let</span></a>
<a class="sourceLine" id="cb7-7" data-line-number="7">    posts <span class="fu">=</span> fromMaybe [] <span class="fu">$</span> scrapeHtml postsScraper html</a>
<a class="sourceLine" id="cb7-8" data-line-number="8">    calendar</a>
<a class="sourceLine" id="cb7-9" data-line-number="9">        <span class="fu">=</span> <span class="fu">#</span>title <span class="fu">@=</span> fromMaybe <span class="st">&quot;&quot;</span> (scrapeHtml headerTitleScraper html)</a>
<a class="sourceLine" id="cb7-10" data-line-number="10">       <span class="fu">&lt;:</span> <span class="fu">#</span>url   <span class="fu">@=</span> url</a>
<a class="sourceLine" id="cb7-11" data-line-number="11">       <span class="fu">&lt;:</span> emptyRecord</a>
<a class="sourceLine" id="cb7-12" data-line-number="12">  TIO.putStrLn <span class="fu">$</span> <span class="st">&quot;get posts on &quot;</span> <span class="ot">`mappend`</span> url</a>
<a class="sourceLine" id="cb7-13" data-line-number="13">  shelly <span class="fu">$</span> sleep <span class="dv">1</span></a>
<a class="sourceLine" id="cb7-14" data-line-number="14">  return <span class="fu">$</span> fmap (set <span class="fu">#</span>calendar calendar) posts</a>
<a class="sourceLine" id="cb7-15" data-line-number="15"></a>
<a class="sourceLine" id="cb7-16" data-line-number="16"><span class="ot">headerTitleScraper ::</span> <span class="dt">Scraper</span> <span class="dt">Html</span> <span class="dt">Text</span></a>
<a class="sourceLine" id="cb7-17" data-line-number="17">headerTitleScraper <span class="fu">=</span> strip <span class="fu">&lt;$&gt;</span> text (<span class="st">&quot;head&quot;</span> <span class="fu">//</span> <span class="st">&quot;title&quot;</span>)</a></code></pre></div>
<p><code>strip</code> は文字列の前後の空白などを排除してくれる．</p>
<h4 id="カレンダーを集める">カレンダーを集める</h4>
<p>カレンダーから記事を集めるだとまだ半分． カレンダー自体を集めないと全ての記事を確認できない．</p>
<p>ADVENTAR の場合は，<code>&quot;https://adventar.org/calendars?year=2017</code> という URL で任意の年のカレンダーの一覧を取得できる． この URL からカレンダーの URL のリストを返す関数を定義する．</p>
<div class="sourceCode" id="cb8"><pre class="sourceCode haskell"><code class="sourceCode haskell"><a class="sourceLine" id="cb8-1" data-line-number="1"><span class="ot">getUrls ::</span> <span class="dt">URL</span> <span class="ot">-&gt;</span> <span class="dt">IO</span> [<span class="dt">URL</span>]</a>
<a class="sourceLine" id="cb8-2" data-line-number="2">getUrls url <span class="fu">=</span> <span class="kw">do</span></a>
<a class="sourceLine" id="cb8-3" data-line-number="3">  html <span class="ot">&lt;-</span> fetchHtml url</a>
<a class="sourceLine" id="cb8-4" data-line-number="4">  return <span class="fu">$</span> fromMaybe [] (scrapeHtml calendarUrlsScraper html)</a>
<a class="sourceLine" id="cb8-5" data-line-number="5"></a>
<a class="sourceLine" id="cb8-6" data-line-number="6"><span class="ot">fetchHtml ::</span> <span class="dt">URL</span> <span class="ot">-&gt;</span> <span class="dt">IO</span> <span class="dt">Html</span></a>
<a class="sourceLine" id="cb8-7" data-line-number="7">fetchHtml url <span class="fu">=</span> <span class="kw">do</span></a>
<a class="sourceLine" id="cb8-8" data-line-number="8">  response <span class="ot">&lt;-</span> get <span class="fu">$</span> unpack url</a>
<a class="sourceLine" id="cb8-9" data-line-number="9">  return <span class="fu">$</span> fromMaybe <span class="st">&quot;&quot;</span> (decodeConvertText <span class="fu">.</span> <span class="dt">UTF8</span> <span class="fu">$</span> response <span class="fu">^.</span> responseBody)</a>
<a class="sourceLine" id="cb8-10" data-line-number="10"></a>
<a class="sourceLine" id="cb8-11" data-line-number="11"><span class="ot">calendarUrlsScraper ::</span> <span class="dt">Scraper</span> <span class="dt">Html</span> [<span class="dt">URL</span>]</a>
<a class="sourceLine" id="cb8-12" data-line-number="12">calendarUrlsScraper <span class="fu">=</span></a>
<a class="sourceLine" id="cb8-13" data-line-number="13">  chroots (<span class="st">&quot;div&quot;</span> <span class="fu">@:</span> [hasClass <span class="st">&quot;mod-calendarList&quot;</span>] <span class="fu">//</span> <span class="st">&quot;ul&quot;</span> <span class="fu">//</span> <span class="st">&quot;li&quot;</span>) <span class="fu">$</span> <span class="kw">do</span></a>
<a class="sourceLine" id="cb8-14" data-line-number="14">    url <span class="ot">&lt;-</span> attr <span class="st">&quot;href&quot;</span> <span class="fu">$</span></a>
<a class="sourceLine" id="cb8-15" data-line-number="15">      (<span class="st">&quot;div&quot;</span> <span class="fu">@:</span> [hasClass <span class="st">&quot;mod-calendarList-title&quot;</span>]) <span class="fu">//</span> <span class="st">&quot;a&quot;</span></a>
<a class="sourceLine" id="cb8-16" data-line-number="16">    return <span class="fu">$</span> append <span class="st">&quot;http://adventar.org&quot;</span> url</a></code></pre></div>
<p>こっちは静的な HTML で動作するのでヘッドレスブラウザは使わない． ただ単に HTML の文字列さへ手に入ればいいので，扱うのが簡単な wreq を今回は使った． <code>get</code> という関数に URL を適用するだけで，HTML (型は <code>ByteString</code>) を返してくれる．</p>
<h5 id="vs.文字コード">vs. 文字コード</h5>
<p><code>ByteString</code> から <code>Text</code> への変換はかなりめんどくさい． というのも，文字コード回りで簡単に例外を投げるからだ．</p>
<p>例えば，記事のリンク先が PDF のようなバイナリファイルだと UTF-8 の <code>Text</code> に変換できなくて例外を投げてくる． もちろん，カレンダーの URL を集める場合は，そんな心配は無いんだけど，Qiita のところで困る…</p>
<h2 id="section-4"></h2>
<p>ちゃんとやるなら例外に合わせて処理を分けるべきだが，めんどくさいので例外を返す場合は <code>Nothing</code> が返ってくる <a href="https://hackage.haskell.org/package/text-conversions">text-conversions</a> パッケージを文字列変換に用いた．</p>
<div class="sourceCode" id="cb9"><pre class="sourceCode haskell"><code class="sourceCode haskell"><a class="sourceLine" id="cb9-1" data-line-number="1"><span class="fu">&gt;&gt;</span> decodeConvertText (<span class="dt">UTF8</span> (<span class="st">&quot;hello&quot;</span><span class="ot"> ::</span> <span class="dt">ByteString</span>))<span class="ot"> ::</span> <span class="dt">Maybe</span> <span class="dt">Text</span></a>
<a class="sourceLine" id="cb9-2" data-line-number="2"><span class="dt">Just</span> <span class="st">&quot;hello&quot;</span></a>
<a class="sourceLine" id="cb9-3" data-line-number="3"><span class="fu">&gt;&gt;</span> decodeConvertText (<span class="dt">UTF8</span> (<span class="st">&quot;\xc3\x28&quot;</span><span class="ot"> ::</span> <span class="dt">ByteString</span>))<span class="ot"> ::</span> <span class="dt">Maybe</span> <span class="dt">Text</span></a>
<a class="sourceLine" id="cb9-4" data-line-number="4"><span class="dt">Nothing</span></a></code></pre></div>
<h4 id="インスタンスの更新">インスタンスの更新</h4>
<p><code>getUrls</code> を使ってインスタンスを書き換える．</p>
<div class="sourceCode" id="cb10"><pre class="sourceCode haskell"><code class="sourceCode haskell"><a class="sourceLine" id="cb10-1" data-line-number="1"><span class="kw">instance</span> <span class="dt">ToPosts</span> <span class="dt">Adventar</span> <span class="kw">where</span></a>
<a class="sourceLine" id="cb10-2" data-line-number="2">  getPosts (<span class="dt">Adventar</span> url conf) <span class="fu">=</span> <span class="kw">do</span></a>
<a class="sourceLine" id="cb10-3" data-line-number="3">    urls <span class="ot">&lt;-</span> getUrls url</a>
<a class="sourceLine" id="cb10-4" data-line-number="4">    mconcat <span class="fu">&lt;$&gt;</span> mapM (getPosts&#39; conf) urls</a>
<a class="sourceLine" id="cb10-5" data-line-number="5"></a>
<a class="sourceLine" id="cb10-6" data-line-number="6"><span class="ot">getPosts&#39; ::</span> <span class="dt">WDConfig</span> <span class="ot">-&gt;</span> <span class="dt">URL</span> <span class="ot">-&gt;</span> <span class="dt">IO</span> [<span class="dt">Post</span>]</a>
<a class="sourceLine" id="cb10-7" data-line-number="7">getPosts&#39; conf url <span class="fu">=</span> <span class="kw">do</span></a>
<a class="sourceLine" id="cb10-8" data-line-number="8">  <span class="fu">...</span></a></code></pre></div>
<p><code>getPosts'</code> は，もともとの <code>getPosts</code> 関数と同じ実装である． 扱うのが楽になるように，スマートコンストラクタを定義しておく．</p>
<div class="sourceCode" id="cb11"><pre class="sourceCode haskell"><code class="sourceCode haskell"><a class="sourceLine" id="cb11-1" data-line-number="1"><span class="ot">adventar ::</span> <span class="dt">Text</span> <span class="ot">-&gt;</span> <span class="dt">WDConfig</span> <span class="ot">-&gt;</span> <span class="dt">Adventar</span></a>
<a class="sourceLine" id="cb11-2" data-line-number="2">adventar year <span class="fu">=</span></a>
<a class="sourceLine" id="cb11-3" data-line-number="3">  <span class="dt">Adventar</span> <span class="fu">$</span> <span class="st">&quot;https://adventar.org/calendars?year=&quot;</span> <span class="ot">`mappend`</span> year</a>
<a class="sourceLine" id="cb11-4" data-line-number="4"></a>
<a class="sourceLine" id="cb11-5" data-line-number="5"><span class="ot">mkDriver ::</span> <span class="dt">Text</span> <span class="ot">-&gt;</span> <span class="dt">Int</span> <span class="ot">-&gt;</span> <span class="dt">WDConfig</span></a>
<a class="sourceLine" id="cb11-6" data-line-number="6">mkDriver host port <span class="fu">=</span> useBrowser chrome <span class="fu">$</span></a>
<a class="sourceLine" id="cb11-7" data-line-number="7">  defaultConfig { wdHost <span class="fu">=</span> T.unpack host, wdPort <span class="fu">=</span> port }</a></code></pre></div>
<h4 id="haskell-の記事か否か">Haskell の記事か否か</h4>
<p>分類はカレンダーか記事のタイトルに「Haskell」という単語か含まれるか否かで判断する． 雑だけど，自然言語処理とか良く分からないので勘弁して．</p>
<div class="sourceCode" id="cb12"><pre class="sourceCode haskell"><code class="sourceCode haskell"><a class="sourceLine" id="cb12-1" data-line-number="1"><span class="ot">isHaskellPost ::</span> <span class="dt">Post</span> <span class="ot">-&gt;</span> <span class="dt">Bool</span></a>
<a class="sourceLine" id="cb12-2" data-line-number="2">isHaskellPost post <span class="fu">=</span> any (<span class="st">&quot;Haskell&quot;</span> <span class="ot">`isInfixOf`</span>)</a>
<a class="sourceLine" id="cb12-3" data-line-number="3">  [ post <span class="fu">^.</span> <span class="fu">#</span>title</a>
<a class="sourceLine" id="cb12-4" data-line-number="4">  , post <span class="fu">^.</span> <span class="fu">#</span>calendar <span class="fu">^.</span> <span class="fu">#</span>title</a>
<a class="sourceLine" id="cb12-5" data-line-number="5">  ]</a></code></pre></div>
<p>この関数を使って <code>filter</code> すれば良い．</p>
<h4 id="実行">実行</h4>
<p>Selenium を <code>localhost:4444</code> として何らかの方法で起動しておく．</p>
<div class="sourceCode" id="cb13"><pre class="sourceCode haskell"><code class="sourceCode haskell"><a class="sourceLine" id="cb13-1" data-line-number="1"><span class="fu">$</span> stack ghci</a>
<a class="sourceLine" id="cb13-2" data-line-number="2"><span class="fu">&gt;&gt;</span> <span class="fu">:</span>set <span class="fu">-</span><span class="dt">XOverloadedStrings</span></a>
<a class="sourceLine" id="cb13-3" data-line-number="3"><span class="fu">&gt;&gt;</span> fmap (filter isHaskellPost) <span class="fu">.</span> getPosts <span class="fu">$</span> adventar <span class="st">&quot;2017&quot;</span> (mkDriver <span class="st">&quot;localhost&quot;</span> <span class="dv">4444</span>)</a>
<a class="sourceLine" id="cb13-4" data-line-number="4">get posts on http<span class="fu">://</span>adventar<span class="fu">.</span>org<span class="fu">/</span><span class="dv">1111</span></a>
<a class="sourceLine" id="cb13-5" data-line-number="5"><span class="fu">...</span></a></code></pre></div>
<p>すっごい時間かかるよ(笑)</p>
<h3 id="qiita">Qiita</h3>
<p>やることは基本同じなのでサクッと．</p>
<h4 id="カレンダーの-url-を集める">カレンダーの URL を集める</h4>
<p>Qiita の場合，カレンダーの一覧は複数ページに分かれている(URL は <code>https://qiita.com/advent-calendar/2017/calendars?page=1</code> って感じ)． 無限リストで試しにカレンダーの一覧を取得し，ひとつも取得できなければ止めるようにする．</p>
<div class="sourceCode" id="cb14"><pre class="sourceCode haskell"><code class="sourceCode haskell"><a class="sourceLine" id="cb14-1" data-line-number="1"><span class="ot">getUrls ::</span> <span class="dt">URL</span> <span class="ot">-&gt;</span> [<span class="dt">Int</span>] <span class="ot">-&gt;</span> <span class="dt">IO</span> [<span class="dt">URL</span>]</a>
<a class="sourceLine" id="cb14-2" data-line-number="2">getUrls _ [] <span class="fu">=</span> pure []</a>
<a class="sourceLine" id="cb14-3" data-line-number="3">getUrls url (n<span class="fu">:</span>ns) <span class="fu">=</span> <span class="kw">do</span></a>
<a class="sourceLine" id="cb14-4" data-line-number="4">  result <span class="ot">&lt;-</span> func n</a>
<a class="sourceLine" id="cb14-5" data-line-number="5">  <span class="kw">case</span> result <span class="kw">of</span></a>
<a class="sourceLine" id="cb14-6" data-line-number="6">    [] <span class="ot">-&gt;</span> pure result</a>
<a class="sourceLine" id="cb14-7" data-line-number="7">    _  <span class="ot">-&gt;</span> mappend result <span class="fu">&lt;$&gt;</span> getUrls url ns</a>
<a class="sourceLine" id="cb14-8" data-line-number="8">  <span class="kw">where</span></a>
<a class="sourceLine" id="cb14-9" data-line-number="9">    func index <span class="fu">=</span> <span class="kw">do</span></a>
<a class="sourceLine" id="cb14-10" data-line-number="10">      html <span class="ot">&lt;-</span> fetchHtml <span class="fu">$</span> calendarsUrl url index</a>
<a class="sourceLine" id="cb14-11" data-line-number="11">      shelly <span class="fu">$</span> sleep <span class="dv">1</span></a>
<a class="sourceLine" id="cb14-12" data-line-number="12">      return <span class="fu">$</span> fromMaybe [] (scrapeHtml calendarUrlsScraper html)</a>
<a class="sourceLine" id="cb14-13" data-line-number="13"></a>
<a class="sourceLine" id="cb14-14" data-line-number="14"><span class="ot">calendarsUrl ::</span> <span class="dt">URL</span> <span class="ot">-&gt;</span> <span class="dt">Int</span> <span class="ot">-&gt;</span> <span class="dt">URL</span></a>
<a class="sourceLine" id="cb14-15" data-line-number="15">calendarsUrl url index <span class="fu">=</span> mconcat [url, <span class="st">&quot;?page=&quot;</span>, pack <span class="fu">$</span> show index]</a>
<a class="sourceLine" id="cb14-16" data-line-number="16"></a>
<a class="sourceLine" id="cb14-17" data-line-number="17"><span class="ot">calendarUrlsScraper ::</span> <span class="dt">Scraper</span> <span class="dt">Html</span> [<span class="dt">URL</span>]</a>
<a class="sourceLine" id="cb14-18" data-line-number="18">calendarUrlsScraper <span class="fu">=</span></a>
<a class="sourceLine" id="cb14-19" data-line-number="19">  chroots (<span class="st">&quot;table&quot;</span> <span class="fu">@:</span> [hasClass <span class="st">&quot;adventCalendarList&quot;</span>] <span class="fu">//</span> <span class="st">&quot;tbody&quot;</span> <span class="fu">//</span> <span class="st">&quot;tr&quot;</span>) <span class="fu">$</span> <span class="kw">do</span></a>
<a class="sourceLine" id="cb14-20" data-line-number="20">    url <span class="ot">&lt;-</span> attr <span class="st">&quot;href&quot;</span> <span class="fu">$</span></a>
<a class="sourceLine" id="cb14-21" data-line-number="21">      (<span class="st">&quot;td&quot;</span> <span class="fu">@:</span> [hasClass <span class="st">&quot;adventCalendarList_calendarTitle&quot;</span>]) <span class="fu">//</span> <span class="st">&quot;a&quot;</span></a>
<a class="sourceLine" id="cb14-22" data-line-number="22">    return <span class="fu">$</span> append <span class="st">&quot;http://qiita.com&quot;</span> url</a></code></pre></div>
<p>なんかもっといい方法ありそう．</p>
<h4 id="カレンダーを集める-1">カレンダーを集める</h4>
<p>インスタンスを定義しよう．</p>
<div class="sourceCode" id="cb15"><pre class="sourceCode haskell"><code class="sourceCode haskell"><a class="sourceLine" id="cb15-1" data-line-number="1"><span class="kw">newtype</span> <span class="dt">Qiita</span> <span class="fu">=</span> <span class="dt">Qiita</span> <span class="dt">URL</span></a>
<a class="sourceLine" id="cb15-2" data-line-number="2"></a>
<a class="sourceLine" id="cb15-3" data-line-number="3"><span class="kw">instance</span> <span class="dt">ToPosts</span> <span class="dt">Qiita</span> <span class="kw">where</span></a>
<a class="sourceLine" id="cb15-4" data-line-number="4">  getPosts (<span class="dt">Qiita</span> url) <span class="fu">=</span> <span class="kw">do</span></a>
<a class="sourceLine" id="cb15-5" data-line-number="5">    urls <span class="ot">&lt;-</span> getUrls url [<span class="dv">1</span><span class="fu">..</span><span class="dv">1</span>]</a>
<a class="sourceLine" id="cb15-6" data-line-number="6">    mconcat <span class="fu">&lt;$&gt;</span> mapM getPosts&#39; urls</a>
<a class="sourceLine" id="cb15-7" data-line-number="7"></a>
<a class="sourceLine" id="cb15-8" data-line-number="8"><span class="ot">getPosts&#39; ::</span> <span class="dt">URL</span> <span class="ot">-&gt;</span> <span class="dt">IO</span> [<span class="dt">Post</span>]</a>
<a class="sourceLine" id="cb15-9" data-line-number="9">getPosts&#39; url <span class="fu">=</span> <span class="kw">do</span></a>
<a class="sourceLine" id="cb15-10" data-line-number="10">  html <span class="ot">&lt;-</span> fetchHtml url</a>
<a class="sourceLine" id="cb15-11" data-line-number="11">  <span class="kw">let</span></a>
<a class="sourceLine" id="cb15-12" data-line-number="12">    posts <span class="fu">=</span> fromMaybe [] <span class="fu">$</span> scrapeHtml postsScraper html</a>
<a class="sourceLine" id="cb15-13" data-line-number="13">    calendar</a>
<a class="sourceLine" id="cb15-14" data-line-number="14">        <span class="fu">=</span> <span class="fu">#</span>title <span class="fu">@=</span> fromMaybe <span class="st">&quot;&quot;</span> (scrapeHtml headerTitleScraper html)</a>
<a class="sourceLine" id="cb15-15" data-line-number="15">       <span class="fu">&lt;:</span> <span class="fu">#</span>url   <span class="fu">@=</span> url</a>
<a class="sourceLine" id="cb15-16" data-line-number="16">       <span class="fu">&lt;:</span> emptyRecord</a>
<a class="sourceLine" id="cb15-17" data-line-number="17">  TIO.putStrLn <span class="fu">$</span> <span class="st">&quot;get posts on &quot;</span> <span class="ot">`mappend`</span> url</a>
<a class="sourceLine" id="cb15-18" data-line-number="18">  shelly <span class="fu">$</span> sleep <span class="dv">1</span></a>
<a class="sourceLine" id="cb15-19" data-line-number="19">  return <span class="fu">$</span> fmap (set <span class="fu">#</span>calendar calendar) posts</a>
<a class="sourceLine" id="cb15-20" data-line-number="20"></a>
<a class="sourceLine" id="cb15-21" data-line-number="21"><span class="ot">postsScraper ::</span> <span class="dt">Scraper</span> <span class="dt">Html</span> [<span class="dt">Post</span>]</a>
<a class="sourceLine" id="cb15-22" data-line-number="22">postsScraper <span class="fu">=</span> <span class="fu">...</span></a></code></pre></div>
<p>長いのでスクレイパーは割愛(<a href="https://github.com/matsubara0507/haskell-advent-calendar/blob/f6d6a097c08e741239f576693e3d6b2b7ae21a29/src/AdventCalendar/Qiita/Scraper.hs">ココ</a>にある)． <code>fetchHtml</code> 関数は ADVENTAR のと同じ．</p>
<h4 id="記事のタイトルを取得">記事のタイトルを取得</h4>
<p>ADVENTAR と違い，Qiita のカレンダーには各記事のタイトルが書いてない． さすがに「なんか書く」で Haskell 記事か否かを判断するのもなぁと思い，どーーーー考えても時間がかかるけど，記事をひとつひとつスクレイピングしてタイトルを取ってくることにした．</p>
<div class="sourceCode" id="cb16"><pre class="sourceCode haskell"><code class="sourceCode haskell"><a class="sourceLine" id="cb16-1" data-line-number="1"><span class="ot">getPosts&#39; ::</span> <span class="dt">URL</span> <span class="ot">-&gt;</span> <span class="dt">IO</span> [<span class="dt">Post</span>]</a>
<a class="sourceLine" id="cb16-2" data-line-number="2">getPosts&#39; url <span class="fu">=</span> <span class="kw">do</span></a>
<a class="sourceLine" id="cb16-3" data-line-number="3">  <span class="fu">...</span></a>
<a class="sourceLine" id="cb16-4" data-line-number="4">  TIO.putStrLn <span class="fu">$</span> <span class="st">&quot;get posts on &quot;</span> <span class="ot">`mappend`</span> url</a>
<a class="sourceLine" id="cb16-5" data-line-number="5">  shelly <span class="fu">$</span> sleep <span class="dv">1</span></a>
<a class="sourceLine" id="cb16-6" data-line-number="6">  mapM updatePostTitle&#39; <span class="fu">$</span> set <span class="fu">#</span>calendar calendar <span class="fu">&lt;$&gt;</span> posts</a>
<a class="sourceLine" id="cb16-7" data-line-number="7"></a>
<a class="sourceLine" id="cb16-8" data-line-number="8"><span class="ot">updatePostTitle ::</span> <span class="dt">Post</span> <span class="ot">-&gt;</span> <span class="dt">IO</span> <span class="dt">Post</span></a>
<a class="sourceLine" id="cb16-9" data-line-number="9">updatePostTitle post <span class="fu">=</span> <span class="kw">do</span></a>
<a class="sourceLine" id="cb16-10" data-line-number="10">html <span class="ot">&lt;-</span> fetchHtml&#39; <span class="fu">$</span> post <span class="fu">^.</span> <span class="fu">#</span>url</a>
<a class="sourceLine" id="cb16-11" data-line-number="11"><span class="kw">let</span></a>
<a class="sourceLine" id="cb16-12" data-line-number="12">  title <span class="fu">=</span> fromMaybe (post <span class="fu">^.</span> <span class="fu">#</span>title) <span class="fu">$</span> scrapeHtml headerTitleScraper html</a>
<a class="sourceLine" id="cb16-13" data-line-number="13">return <span class="fu">$</span> post <span class="fu">&amp;</span> <span class="fu">#</span>title <span class="fu">.~</span> title</a>
<a class="sourceLine" id="cb16-14" data-line-number="14"></a>
<a class="sourceLine" id="cb16-15" data-line-number="15"><span class="ot">updatePostTitle&#39; ::</span> <span class="dt">Post</span> <span class="ot">-&gt;</span> <span class="dt">IO</span> <span class="dt">Post</span></a>
<a class="sourceLine" id="cb16-16" data-line-number="16">updatePostTitle&#39; post <span class="fu">=</span> shelly (sleep <span class="dv">1</span>) <span class="fu">&gt;&gt;</span> updatePostTitle post</a></code></pre></div>
<p><code>updatePostTitle'</code> 関数で(1秒だけスリープしつつ)タイトルをスクレイピングして更新している．</p>
<h4 id="実行してみる">実行してみる</h4>
<p>スマートコンストラクタを作って．</p>
<div class="sourceCode" id="cb17"><pre class="sourceCode haskell"><code class="sourceCode haskell"><a class="sourceLine" id="cb17-1" data-line-number="1"><span class="ot">qiita ::</span> <span class="dt">Text</span> <span class="ot">-&gt;</span> <span class="dt">Qiita</span></a>
<a class="sourceLine" id="cb17-2" data-line-number="2">qiita year <span class="fu">=</span></a>
<a class="sourceLine" id="cb17-3" data-line-number="3">  <span class="dt">Qiita</span> <span class="fu">$</span> mconcat [<span class="st">&quot;https://qiita.com/advent-calendar/&quot;</span>, year, <span class="st">&quot;/calendars&quot;</span>]</a></code></pre></div>
<p>実行してみる．</p>
<div class="sourceCode" id="cb18"><pre class="sourceCode haskell"><code class="sourceCode haskell"><a class="sourceLine" id="cb18-1" data-line-number="1"><span class="fu">$</span> stack ghci</a>
<a class="sourceLine" id="cb18-2" data-line-number="2"><span class="fu">&gt;&gt;</span> <span class="fu">:</span>set <span class="fu">-</span><span class="dt">XOverloadedStrings</span></a>
<a class="sourceLine" id="cb18-3" data-line-number="3"><span class="fu">&gt;&gt;</span> fmap (filter isHaskellPost) <span class="fu">.</span> getPosts <span class="fu">$</span> qiita <span class="st">&quot;2017&quot;</span></a>
<a class="sourceLine" id="cb18-4" data-line-number="4"><span class="fu">...</span></a></code></pre></div>
<p>悲しいことに，鬼のように時間がかかるのに…メモリダンプします… まぁわかってたけどね！</p>
<h3 id="ストリーミング">ストリーミング</h3>
<p>こういうパフォーマンス的なことは自分は詳しくない． しかしこういうのはたぶん，要らないデータ(<code>filter</code> して捨てるデータ)をいつ迄も保持してるのが悪いので(たぶん)，ストリーミングパッケージを使って効率よくリソース管理してもらおう．</p>
<p>今回は Conduit を使う． 最初は Pipes を使ってみたけど，よくわからなくてやめた．</p>
<h2 id="section-5"></h2>
<p>まずはインターフェースの型クラスを書き換える．</p>
<div class="sourceCode" id="cb19"><pre class="sourceCode haskell"><code class="sourceCode haskell"><a class="sourceLine" id="cb19-1" data-line-number="1"><span class="kw">import</span> <span class="dt">Conduit</span> (<span class="dt">Source</span>)</a>
<a class="sourceLine" id="cb19-2" data-line-number="2"></a>
<a class="sourceLine" id="cb19-3" data-line-number="3"><span class="kw">class</span> <span class="dt">ToPosts</span> a <span class="kw">where</span></a>
<a class="sourceLine" id="cb19-4" data-line-number="4"><span class="ot">  getPosts ::</span> a <span class="ot">-&gt;</span> <span class="dt">Source</span> <span class="dt">IO</span> <span class="dt">Post</span></a></code></pre></div>
<p>あとはそれぞれのインスタンスを書き換えるだけ．</p>
<div class="sourceCode" id="cb20"><pre class="sourceCode haskell"><code class="sourceCode haskell"><a class="sourceLine" id="cb20-1" data-line-number="1"><span class="kw">instance</span> <span class="dt">ToPosts</span> <span class="dt">Adventar</span> <span class="kw">where</span></a>
<a class="sourceLine" id="cb20-2" data-line-number="2">  getPosts (<span class="dt">Adventar</span> url conf) <span class="fu">=</span> <span class="kw">do</span></a>
<a class="sourceLine" id="cb20-3" data-line-number="3">    urls <span class="ot">&lt;-</span> lift <span class="fu">$</span> getUrls url</a>
<a class="sourceLine" id="cb20-4" data-line-number="4">    yieldMany urls <span class="fu">=$=</span> concatMapMC (getPosts&#39; conf)</a></code></pre></div>
<div class="sourceCode" id="cb21"><pre class="sourceCode haskell"><code class="sourceCode haskell"><a class="sourceLine" id="cb21-1" data-line-number="1"><span class="kw">instance</span> <span class="dt">ToPosts</span> <span class="dt">Qiita</span> <span class="kw">where</span></a>
<a class="sourceLine" id="cb21-2" data-line-number="2">  getPosts (<span class="dt">Qiita</span> url) <span class="fu">=</span> <span class="kw">do</span></a>
<a class="sourceLine" id="cb21-3" data-line-number="3">    urls <span class="ot">&lt;-</span> lift <span class="fu">$</span> getUrls url [<span class="dv">1</span><span class="fu">..</span>]</a>
<a class="sourceLine" id="cb21-4" data-line-number="4">    yieldMany urls <span class="fu">=$=</span> concatMapMC getPosts&#39;</a></code></pre></div>
<p>使うときは以下のようにすればよい．</p>
<div class="sourceCode" id="cb22"><pre class="sourceCode haskell"><code class="sourceCode haskell"><a class="sourceLine" id="cb22-1" data-line-number="1"><span class="fu">$</span> stack ghci</a>
<a class="sourceLine" id="cb22-2" data-line-number="2"><span class="fu">&gt;&gt;</span> <span class="fu">:</span>set <span class="fu">-</span><span class="dt">XOverloadedStrings</span></a>
<a class="sourceLine" id="cb22-3" data-line-number="3"><span class="fu">&gt;&gt;</span> <span class="kw">import</span> <span class="dt">Conduit</span> (($$), (=$=), sinkList)</a>
<a class="sourceLine" id="cb22-4" data-line-number="4"><span class="fu">&gt;&gt;</span> getPosts (qiita <span class="st">&quot;2017&quot;</span>) <span class="fu">$=</span> filterC isHaskellPost <span class="fu">$$</span> sinkList</a></code></pre></div>
<h3 id="json-に書き出す">JSON に書き出す</h3>
<p>前にやったものをそのままコピペした．</p>
<div class="sourceCode" id="cb23"><pre class="sourceCode haskell"><code class="sourceCode haskell"><a class="sourceLine" id="cb23-1" data-line-number="1"><span class="kw">import</span> <span class="dt">Data.Aeson.Encode.Pretty</span> (encodePrettyToTextBuilder)</a>
<a class="sourceLine" id="cb23-2" data-line-number="2"><span class="kw">import</span> <span class="dt">Data.Text</span> (<span class="dt">Text</span>, unpack)</a>
<a class="sourceLine" id="cb23-3" data-line-number="3"><span class="kw">import</span> <span class="dt">Data.Text.Lazy.Builder</span> (toLazyText)</a>
<a class="sourceLine" id="cb23-4" data-line-number="4"><span class="kw">import</span> <span class="kw">qualified</span> <span class="dt">Data.Text.Lazy.IO</span> <span class="kw">as</span> <span class="dt">LT</span></a>
<a class="sourceLine" id="cb23-5" data-line-number="5"></a>
<a class="sourceLine" id="cb23-6" data-line-number="6"><span class="ot">writeJson ::</span> <span class="dt">ToJSON</span> a <span class="ot">=&gt;</span> <span class="dt">Text</span> <span class="ot">-&gt;</span> a <span class="ot">-&gt;</span> <span class="dt">IO</span> ()</a>
<a class="sourceLine" id="cb23-7" data-line-number="7">writeJson jsonPath <span class="fu">=</span></a>
<a class="sourceLine" id="cb23-8" data-line-number="8">  <span class="dt">LT</span><span class="fu">.</span>writeFile (unpack jsonPath) <span class="fu">.</span> toLazyText <span class="fu">.</span> encodePrettyToTextBuilder</a></code></pre></div>
<p>拡張可能レコードの <code>ToJSON</code> のインスタンス化の部分は割愛(<a href="https://github.com/matsubara0507/haskell-advent-calendar/blob/f6d6a097c08e741239f576693e3d6b2b7ae21a29/src/Data/Extensible/Instance/Aeson.hs">ココ</a>にある)．</p>
<h3 id="コマンド化">コマンド化</h3>
<p>CLI のオプション(引数)のパースには optparse-applicative パッケージを使う． スクレイピングには，次のようなオプションの型を考える．</p>
<div class="sourceCode" id="cb24"><pre class="sourceCode haskell"><code class="sourceCode haskell"><a class="sourceLine" id="cb24-1" data-line-number="1"><span class="kw">data</span> <span class="dt">Cmd</span></a>
<a class="sourceLine" id="cb24-2" data-line-number="2">  <span class="fu">=</span> <span class="dt">Fetch</span> <span class="dt">FetchOptions</span></a>
<a class="sourceLine" id="cb24-3" data-line-number="3"></a>
<a class="sourceLine" id="cb24-4" data-line-number="4"><span class="kw">type</span> <span class="dt">FetchOptions</span> <span class="fu">=</span> <span class="dt">Record</span></a>
<a class="sourceLine" id="cb24-5" data-line-number="5">   <span class="ch">&#39;[ &quot;year&quot; &gt;: Text</span></a>
<a class="sourceLine" id="cb24-6" data-line-number="6">    , <span class="st">&quot;qiita&quot;</span> <span class="fu">&gt;:</span> <span class="dt">Bool</span></a>
<a class="sourceLine" id="cb24-7" data-line-number="7">    , <span class="st">&quot;adventar&quot;</span> <span class="fu">&gt;:</span> <span class="dt">Bool</span></a>
<a class="sourceLine" id="cb24-8" data-line-number="8">    , <span class="st">&quot;wdHost&quot;</span> <span class="fu">&gt;:</span> <span class="dt">Text</span></a>
<a class="sourceLine" id="cb24-9" data-line-number="9">    , <span class="st">&quot;wdPort&quot;</span> <span class="fu">&gt;:</span> <span class="dt">Int</span></a>
<a class="sourceLine" id="cb24-10" data-line-number="10">    , <span class="st">&quot;output&quot;</span> <span class="fu">&gt;:</span> <span class="dt">Text</span></a>
<a class="sourceLine" id="cb24-11" data-line-number="11">    ]</a></code></pre></div>
<p><code>year</code> はスクレイピングして欲しい年． <code>qiita</code> や <code>adventar</code> は <code>--qiita</code> って感じのフラグで，フラグが真のものだけ集めてくる(両方偽の場合は，両方真と同じく両方集める)． <code>wdHost</code> と <code>wdPort</code> はヘッドレスブラウザへのオプションで，指定が無ければ <code>localhost:4444</code> をデフォルト値にする． <code>output</code> は <code>-o hoge.json</code> みたいに出力先のファイルを指定する．</p>
<h2 id="section-6"></h2>
<p>例の如く，拡張可能レコードなので，<code>(&lt;@=&gt;)</code> 演算子を使ってパーサーを組み立てていく．</p>
<div class="sourceCode" id="cb25"><pre class="sourceCode haskell"><code class="sourceCode haskell"><a class="sourceLine" id="cb25-1" data-line-number="1"><span class="ot">cmdParser ::</span> <span class="dt">Parser</span> <span class="dt">Cmd</span></a>
<a class="sourceLine" id="cb25-2" data-line-number="2">cmdParser <span class="fu">=</span> subparser <span class="fu">$</span></a>
<a class="sourceLine" id="cb25-3" data-line-number="3">     command <span class="st">&quot;fetch&quot;</span></a>
<a class="sourceLine" id="cb25-4" data-line-number="4">       (<span class="dt">Fetch</span> <span class="fu">&lt;$&gt;</span> fetchOptsParser <span class="ot">`withInfo`</span> <span class="st">&quot;fetch posts on advent calendar to json file.&quot;</span>)</a>
<a class="sourceLine" id="cb25-5" data-line-number="5">  <span class="fu">&lt;&gt;</span> metavar <span class="st">&quot;( fetch )&quot;</span></a>
<a class="sourceLine" id="cb25-6" data-line-number="6">  <span class="fu">&lt;&gt;</span> help <span class="st">&quot;choice subcommand&quot;</span></a>
<a class="sourceLine" id="cb25-7" data-line-number="7"></a>
<a class="sourceLine" id="cb25-8" data-line-number="8"><span class="ot">fetchOptsParser ::</span> <span class="dt">Parser</span> <span class="dt">FetchOptions</span></a>
<a class="sourceLine" id="cb25-9" data-line-number="9">fetchOptsParser <span class="fu">=</span> hsequence</a>
<a class="sourceLine" id="cb25-10" data-line-number="10">    <span class="fu">$</span> <span class="fu">#</span>year     <span class="fu">&lt;@=&gt;</span> yearParser</a>
<a class="sourceLine" id="cb25-11" data-line-number="11">   <span class="fu">&lt;:</span> <span class="fu">#</span>qiita    <span class="fu">&lt;@=&gt;</span> qiitaFlagParser</a>
<a class="sourceLine" id="cb25-12" data-line-number="12">   <span class="fu">&lt;:</span> <span class="fu">#</span>adventar <span class="fu">&lt;@=&gt;</span> adventarFlagParser</a>
<a class="sourceLine" id="cb25-13" data-line-number="13">   <span class="fu">&lt;:</span> <span class="fu">#</span>wdHost   <span class="fu">&lt;@=&gt;</span> wdHostParser</a>
<a class="sourceLine" id="cb25-14" data-line-number="14">   <span class="fu">&lt;:</span> <span class="fu">#</span>wdPort   <span class="fu">&lt;@=&gt;</span> wdPortParser</a>
<a class="sourceLine" id="cb25-15" data-line-number="15">   <span class="fu">&lt;:</span> <span class="fu">#</span>output   <span class="fu">&lt;@=&gt;</span> outputParser</a>
<a class="sourceLine" id="cb25-16" data-line-number="16">   <span class="fu">&lt;:</span> nil</a></code></pre></div>
<p>細かいやつは割愛(<a href="https://github.com/matsubara0507/haskell-advent-calendar/blob/f6d6a097c08e741239f576693e3d6b2b7ae21a29/app/Options.hs">ココ</a>を見て)．</p>
<h2 id="section-7"></h2>
<p><code>main</code> 関数も長いので割愛(<a href="https://github.com/matsubara0507/haskell-advent-calendar/blob/f6d6a097c08e741239f576693e3d6b2b7ae21a29/app/Main.hs">ココ</a>を見て)．</p>
<p>こんな感じに実行する．</p>
<pre><code>$ stack exec -- advent-calendar fetch 2017 --qiita -o &quot;&quot;./out/qiita.json&quot;</code></pre>
<p>スクレイピングの結果は GitHub の<a href="https://github.com/matsubara0507/haskell-advent-calendar/tree/f6d6a097c08e741239f576693e3d6b2b7ae21a29/out/2017">ココ</a>に置いてある．</p>
<h3 id="マークダウンに変換">マークダウンに変換</h3>
<p>最後にマークダウンへ変換する部分を書く． 次のようなサブコマンドを追加する想定だ．</p>
<pre><code>$ stack exec -- advent-calendar markdown &quot;./out/qiita.json&quot; &quot;./out/adventar.json&quot; -o &quot;./out/posts.md&quot;</code></pre>
<p>そのために次のような型とパーサーを定義した．</p>
<div class="sourceCode" id="cb28"><pre class="sourceCode haskell"><code class="sourceCode haskell"><a class="sourceLine" id="cb28-1" data-line-number="1"><span class="kw">data</span> <span class="dt">Cmd</span></a>
<a class="sourceLine" id="cb28-2" data-line-number="2">  <span class="fu">=</span> <span class="dt">Fetch</span> <span class="dt">FetchOptions</span></a>
<a class="sourceLine" id="cb28-3" data-line-number="3">  <span class="fu">|</span> <span class="dt">Markdown</span> <span class="dt">MarkdownOptions</span></a>
<a class="sourceLine" id="cb28-4" data-line-number="4"></a>
<a class="sourceLine" id="cb28-5" data-line-number="5"><span class="kw">type</span> <span class="dt">MarkdownOptions</span> <span class="fu">=</span> <span class="dt">Record</span></a>
<a class="sourceLine" id="cb28-6" data-line-number="6">   <span class="ch">&#39;[ &quot;inputs&quot; &gt;: [Text]</span></a>
<a class="sourceLine" id="cb28-7" data-line-number="7">    , <span class="st">&quot;output&quot;</span> <span class="fu">&gt;:</span> <span class="dt">Maybe</span> <span class="dt">Text</span></a>
<a class="sourceLine" id="cb28-8" data-line-number="8">    , <span class="st">&quot;noCategory&quot;</span> <span class="fu">&gt;:</span> <span class="dt">Bool</span></a>
<a class="sourceLine" id="cb28-9" data-line-number="9">    ]</a>
<a class="sourceLine" id="cb28-10" data-line-number="10"></a>
<a class="sourceLine" id="cb28-11" data-line-number="11"><span class="ot">cmdParser ::</span> <span class="dt">Parser</span> <span class="dt">Cmd</span></a>
<a class="sourceLine" id="cb28-12" data-line-number="12">cmdParser <span class="fu">=</span> subparser <span class="fu">$</span></a>
<a class="sourceLine" id="cb28-13" data-line-number="13">     command <span class="st">&quot;fetch&quot;</span></a>
<a class="sourceLine" id="cb28-14" data-line-number="14">       (<span class="dt">Fetch</span> <span class="fu">&lt;$&gt;</span> fetchOptsParser <span class="ot">`withInfo`</span> <span class="st">&quot;fetch posts on advent calendar to json file.&quot;</span>)</a>
<a class="sourceLine" id="cb28-15" data-line-number="15">  <span class="fu">&lt;&gt;</span> command <span class="st">&quot;markdown&quot;</span></a>
<a class="sourceLine" id="cb28-16" data-line-number="16">       (<span class="dt">Markdown</span> <span class="fu">&lt;$&gt;</span> mdOptsParser <span class="ot">`withInfo`</span> <span class="st">&quot;convert markdown from posts json file.&quot;</span>)</a>
<a class="sourceLine" id="cb28-17" data-line-number="17">  <span class="fu">&lt;&gt;</span> metavar <span class="st">&quot;( fetch | markdown )&quot;</span></a>
<a class="sourceLine" id="cb28-18" data-line-number="18">  <span class="fu">&lt;&gt;</span> help <span class="st">&quot;choice subcommand&quot;</span></a>
<a class="sourceLine" id="cb28-19" data-line-number="19"></a>
<a class="sourceLine" id="cb28-20" data-line-number="20"><span class="ot">mdOptsParser ::</span> <span class="dt">Parser</span> <span class="dt">MarkdownOptions</span></a>
<a class="sourceLine" id="cb28-21" data-line-number="21">mdOptsParser <span class="fu">=</span> hsequence</a>
<a class="sourceLine" id="cb28-22" data-line-number="22">    <span class="fu">$</span> <span class="fu">#</span>inputs     <span class="fu">&lt;@=&gt;</span> inputsParser</a>
<a class="sourceLine" id="cb28-23" data-line-number="23">   <span class="fu">&lt;:</span> <span class="fu">#</span>output     <span class="fu">&lt;@=&gt;</span> outputParser&#39;</a>
<a class="sourceLine" id="cb28-24" data-line-number="24">   <span class="fu">&lt;:</span> <span class="fu">#</span>noCategory <span class="fu">&lt;@=&gt;</span> noCategoryParser</a>
<a class="sourceLine" id="cb28-25" data-line-number="25">   <span class="fu">&lt;:</span> nil</a>
<a class="sourceLine" id="cb28-26" data-line-number="26"></a>
<a class="sourceLine" id="cb28-27" data-line-number="27"><span class="ot">inputsParser ::</span> <span class="dt">Parser</span> [<span class="dt">Text</span>]</a>
<a class="sourceLine" id="cb28-28" data-line-number="28">inputsParser <span class="fu">=</span> some <span class="fu">$</span></a>
<a class="sourceLine" id="cb28-29" data-line-number="29">  textArgument (metavar <span class="st">&quot;inputs&quot;</span> <span class="fu">&lt;&gt;</span> help <span class="st">&quot;Input json file paths&quot;</span>)</a></code></pre></div>
<p><code>some</code> を使うことで，ひとつ以上の入力ファイルのパスを与える部分(<code>markdown &quot;./out/qiita.json&quot; &quot;./out/adventar.json&quot;</code>)のパーサーを簡単に書ける．</p>
<h2 id="section-8"></h2>
<p>マークダウンへの変換部分はこんな感じ．</p>
<div class="sourceCode" id="cb29"><pre class="sourceCode haskell"><code class="sourceCode haskell"><a class="sourceLine" id="cb29-1" data-line-number="1"><span class="ot">toMarkdown ::</span> <span class="dt">Post</span> <span class="ot">-&gt;</span> [<span class="dt">Text</span>]</a>
<a class="sourceLine" id="cb29-2" data-line-number="2">toMarkdown post <span class="fu">=</span> mconcat <span class="fu">&lt;$&gt;</span></a>
<a class="sourceLine" id="cb29-3" data-line-number="3">  [ [ <span class="st">&quot;**[&quot;</span>, post <span class="fu">^.</span> <span class="fu">#</span>title, <span class="st">&quot;](&quot;</span>, post <span class="fu">^.</span> <span class="fu">#</span>url, <span class="st">&quot;)**  &quot;</span> ]</a>
<a class="sourceLine" id="cb29-4" data-line-number="4">  , [ <span class="st">&quot; by &quot;</span>, post <span class="fu">^.</span> <span class="fu">#</span>auther</a>
<a class="sourceLine" id="cb29-5" data-line-number="5">    , <span class="st">&quot; on [&quot;</span>, post <span class="fu">^.</span> <span class="fu">#</span>calendar <span class="fu">^.</span> <span class="fu">#</span>title, <span class="st">&quot;](&quot;</span>, post <span class="fu">^.</span> <span class="fu">#</span>calendar <span class="fu">^.</span> <span class="fu">#</span>url, <span class="st">&quot;) &quot;</span></a>
<a class="sourceLine" id="cb29-6" data-line-number="6">    , post <span class="fu">^.</span> <span class="fu">#</span>date</a>
<a class="sourceLine" id="cb29-7" data-line-number="7">    ]</a>
<a class="sourceLine" id="cb29-8" data-line-number="8">  ]</a></code></pre></div>
<p>この関数の結果 <code>[Text]</code> を <code>unlines</code> してファイルに書き出せばよい． ちなみに，Haskell-jp のブログは，末尾に空白2つで改行となり，空行で HTML にも空行が入るようになっている．</p>
<h4 id="出力結果">出力結果</h4>
<p>は <a href="https://github.com/haskell-jp/blog/blob/02a2b1c68cd75a15d72eedd3148fc803c103a0b7/preprocessed-site/posts/2017/advent-calendar-2017.md#%E3%83%9D%E3%82%A8%E3%83%A0">Haskell-jp ブログのソースコード</a>(もちろん前半部分は手書き)を見ればいいと思うよ．</p>
<h2 id="おしまい">おしまい</h2>
<p>結局，<strong>全ての記事を集めてくるのに半日近くかかった(笑)</strong> 来年は投票機能とか，少しずつ集めたりとかできるといいよね．</p>
  </div>
</div>
</article>
]]></summary>
</entry>
<entry>
    <title>Elm でマークダウンプレゼンテーションエディタを作ってみた (その２)</title>
    <link href="https://matsubara0507.github.io/posts/2017-12-22-create-elmdeck-part2.html" />
    <id>https://matsubara0507.github.io/posts/2017-12-22-create-elmdeck-part2.html</id>
    <published>2017-12-22T00:00:00Z</published>
    <updated>2017-12-22T00:00:00Z</updated>
    <summary type="html"><![CDATA[<article class="post card" itemscope itemtype="http://schema.org/BlogPosting">
 <div class="card-content">
  <header class="post-header">
    <h1 class="post-title" itemprop="name headline">Elm でマークダウンプレゼンテーションエディタを作ってみた (その２)</h1>
    <p class="post-meta">
      <time datetime="2017-12-22" itemprop="datePublished">
        Dec 22, 2017
      </time>
      
      
      <div class="tags">
          <i class="fa fa-tags"></i> <a href="/tags/Elm.html">Elm</a> <a href="/tags/application.html">application</a>
      </div>
      
    </p>
  </header>

  <div class="post-content" itemprop="articleBody">
    <p><a href="https://qiita.com/advent-calendar/2017/electron">Electron Advent Calendar 2017</a> の22日目の記事です．</p>
<p><a href="https://qiita.com/advent-calendar/2017/elm2">Elm2 アドカレ</a>で 「Elm でマークダウンプレゼンテーションエディタを作るハナシ」を書いたのですが，長くなったので分けました． 前半は<a href="/posts/2017-12-18-create-elmdeck-part1.html">コチラ</a>(前半は Electron 関係ないけどね)．</p>
<h2 id="section"></h2>
<p>今回はローカルファイルの読み書きをするために Electron を導入します(Elm もといブラウザでいい感じにする方法が分からなかった)． 今回のコードは以下のリポジトリにあります．</p>
<ul>
<li><a href="https://github.com/matsubara0507/elmdeck/tree/electron">matsubara0507/elmdeck - GitHub</a></li>
</ul>
<h2 id="elm-と-electron">Elm と Electron</h2>
<p>結構いろんな人が挑戦してて，資料は豊富にある． ぼくは以下のリポジトリを参考にした．</p>
<ul>
<li><a href="https://github.com/yasuyuky/elmtrn">yasuyuky/elmtrn - GitHub</a></li>
</ul>
<p>アナログ時計を表示する Electron プログラムだったはず．</p>
<h2 id="つくる">つくる</h2>
<p>少しずつ拡張していく．</p>
<h3 id="electron-化">Electron 化</h3>
<p>まずは Electron 化する． <a href="https://github.com/matsubara0507/elmdeck/tree/6ff0520f65080c9a94ac85c99fc01e0374ca250e">もともと</a>は次のような構成だった(<code>main.js</code> は Elm ファイル群から生成)．</p>
<pre class="txt"><code>/
 |-- elm-package.json
 |-- index.html
 |-- src/
 |    |-- Main.elm
 |    \-- ..
 \-- js/
      |-- main.js
      \-- highlight.js</code></pre>
<p>これ，elmtrn を参考に次のような構成に変更した．</p>
<pre class="txt"><code>/
 |-- elm-package.json
 |-- gulpfile.js
 |-- package.json
 \-- app
      |-- index.html
      |-- src/
      |    |-- Main.elm
      |    \-- ..
      \-- js/
           |-- app.js
           |-- main.js
           \-- ..</code></pre>
<p><a href="https://github.com/matsubara0507/elmdeck/blob/97607bc1c2f069101d7d6012dcd46470d3a2d3fe/package.json">package.json</a> は elmtrn をほぼそのまんま(<code>main</code> の場所だけ違う)． gulp を使って，Elm のコードを監視・コンパイルし，生成した JS コードを Electron から呼び出す． elmtrn の gulpfile.js の設定では，各 Elm ファイルに対しひとつの JS ファイルを生成していたが，自分はひとまとめにした JS を生成したかったので，次のように gulpfile.js を書き換えた．</p>
<div class="sourceCode" id="cb3"><pre class="sourceCode javascript"><code class="sourceCode javascript"><a class="sourceLine" id="cb3-1" data-line-number="1"><span class="kw">const</span> g <span class="op">=</span> <span class="at">require</span>(<span class="st">&#39;gulp&#39;</span>)<span class="op">;</span></a>
<a class="sourceLine" id="cb3-2" data-line-number="2"><span class="kw">const</span> electron <span class="op">=</span> <span class="at">require</span>(<span class="st">&#39;electron-connect&#39;</span>).<span class="va">server</span>.<span class="at">create</span>()<span class="op">;</span></a>
<a class="sourceLine" id="cb3-3" data-line-number="3"><span class="kw">const</span> packager <span class="op">=</span> <span class="at">require</span>(<span class="st">&#39;electron-packager&#39;</span>)<span class="op">;</span></a>
<a class="sourceLine" id="cb3-4" data-line-number="4"><span class="kw">const</span> $ <span class="op">=</span> <span class="at">require</span>(<span class="st">&#39;gulp-load-plugins&#39;</span>)()<span class="op">;</span></a>
<a class="sourceLine" id="cb3-5" data-line-number="5"><span class="kw">const</span> packageJson <span class="op">=</span> <span class="at">require</span>(<span class="st">&#39;./package.json&#39;</span>)<span class="op">;</span></a>
<a class="sourceLine" id="cb3-6" data-line-number="6"><span class="kw">const</span> extend <span class="op">=</span> <span class="at">require</span>(<span class="st">&#39;util&#39;</span>).<span class="at">_extend</span><span class="op">;</span></a>
<a class="sourceLine" id="cb3-7" data-line-number="7"></a>
<a class="sourceLine" id="cb3-8" data-line-number="8"><span class="va">g</span>.<span class="at">task</span>(<span class="st">&#39;watch&#39;</span><span class="op">,</span> () <span class="op">=&gt;</span> <span class="op">{</span></a>
<a class="sourceLine" id="cb3-9" data-line-number="9">  <span class="va">g</span>.<span class="at">watch</span>([<span class="st">&#39;app/src/**/*.elm&#39;</span>]<span class="op">,</span>[<span class="st">&#39;elm&#39;</span>])<span class="op">;</span></a>
<a class="sourceLine" id="cb3-10" data-line-number="10">  <span class="va">electron</span>.<span class="at">start</span>()<span class="op">;</span></a>
<a class="sourceLine" id="cb3-11" data-line-number="11">  <span class="va">g</span>.<span class="at">watch</span>([<span class="st">&#39;app/js/*.js&#39;</span><span class="op">,</span> <span class="st">&#39;app/index.html&#39;</span>]<span class="op">,</span> <span class="va">electron</span>.<span class="at">restart</span>)<span class="op">;</span></a>
<a class="sourceLine" id="cb3-12" data-line-number="12">  <span class="va">g</span>.<span class="at">watch</span>([]<span class="op">,</span> <span class="va">electron</span>.<span class="at">reload</span>)<span class="op">;</span></a>
<a class="sourceLine" id="cb3-13" data-line-number="13"><span class="op">}</span>)</a>
<a class="sourceLine" id="cb3-14" data-line-number="14"></a>
<a class="sourceLine" id="cb3-15" data-line-number="15"><span class="va">g</span>.<span class="at">task</span>(<span class="st">&#39;elm&#39;</span><span class="op">,</span> () <span class="op">=&gt;{</span></a>
<a class="sourceLine" id="cb3-16" data-line-number="16">  <span class="va">g</span>.<span class="at">src</span>([<span class="st">&#39;app/src/**/*.elm&#39;</span>])</a>
<a class="sourceLine" id="cb3-17" data-line-number="17">    .<span class="at">pipe</span>(<span class="va">$</span>.<span class="at">logger</span>())</a>
<a class="sourceLine" id="cb3-18" data-line-number="18">    .<span class="at">pipe</span>(<span class="va">$</span>.<span class="at">plumber</span>())</a>
<a class="sourceLine" id="cb3-19" data-line-number="19">    .<span class="at">pipe</span>(<span class="va">$</span>.<span class="va">elm</span>.<span class="at">bundle</span>(<span class="st">&#39;main.js&#39;</span><span class="op">,</span> debug<span class="op">=</span><span class="kw">true</span>))</a>
<a class="sourceLine" id="cb3-20" data-line-number="20">    .<span class="at">pipe</span>(<span class="va">g</span>.<span class="at">dest</span>(<span class="st">&quot;app/js&quot;</span>))<span class="op">;</span></a>
<a class="sourceLine" id="cb3-21" data-line-number="21"><span class="op">}</span>)</a>
<a class="sourceLine" id="cb3-22" data-line-number="22"></a>
<a class="sourceLine" id="cb3-23" data-line-number="23"><span class="va">g</span>.<span class="at">task</span>(<span class="st">&#39;default&#39;</span><span class="op">,</span> [<span class="st">&#39;watch&#39;</span>])</a></code></pre></div>
<p><a href="https://github.com/philopon/gulp-elm">philopon/gulp-elm の README</a> が参考になった．</p>
<h2 id="section-1"></h2>
<p>あとは，次のように elmtrn の app.js を適当に書き直した．</p>
<div class="sourceCode" id="cb4"><pre class="sourceCode javascript"><code class="sourceCode javascript"><a class="sourceLine" id="cb4-1" data-line-number="1"><span class="kw">const</span> <span class="op">{</span>app<span class="op">,</span> BrowserWindow<span class="op">}</span> <span class="op">=</span> <span class="at">require</span>(<span class="st">&#39;electron&#39;</span>)<span class="op">;</span></a>
<a class="sourceLine" id="cb4-2" data-line-number="2"><span class="kw">var</span> mainWindow <span class="op">=</span> <span class="kw">null</span><span class="op">;</span></a>
<a class="sourceLine" id="cb4-3" data-line-number="3"></a>
<a class="sourceLine" id="cb4-4" data-line-number="4"><span class="va">app</span>.<span class="at">on</span>(<span class="st">&#39;window-all-closed&#39;</span><span class="op">,</span> <span class="kw">function</span>() <span class="op">{</span></a>
<a class="sourceLine" id="cb4-5" data-line-number="5">    <span class="va">app</span>.<span class="at">quit</span>()<span class="op">;</span></a>
<a class="sourceLine" id="cb4-6" data-line-number="6"><span class="op">}</span>)<span class="op">;</span></a>
<a class="sourceLine" id="cb4-7" data-line-number="7"></a>
<a class="sourceLine" id="cb4-8" data-line-number="8"><span class="va">app</span>.<span class="at">on</span>(<span class="st">&#39;ready&#39;</span><span class="op">,</span> <span class="kw">function</span>() <span class="op">{</span></a>
<a class="sourceLine" id="cb4-9" data-line-number="9">  mainWindow <span class="op">=</span> <span class="kw">new</span> <span class="at">BrowserWindow</span>(<span class="op">{</span></a>
<a class="sourceLine" id="cb4-10" data-line-number="10">    <span class="st">&quot;frame&quot;</span><span class="op">:</span> <span class="kw">true</span><span class="op">,</span></a>
<a class="sourceLine" id="cb4-11" data-line-number="11">    <span class="st">&quot;always-on-top&quot;</span><span class="op">:</span> <span class="kw">true</span><span class="op">,</span></a>
<a class="sourceLine" id="cb4-12" data-line-number="12">    <span class="st">&quot;resizable&quot;</span><span class="op">:</span> <span class="kw">true</span></a>
<a class="sourceLine" id="cb4-13" data-line-number="13">  <span class="op">}</span>)<span class="op">;</span></a>
<a class="sourceLine" id="cb4-14" data-line-number="14">  <span class="va">mainWindow</span>.<span class="at">maximize</span>()<span class="op">;</span></a>
<a class="sourceLine" id="cb4-15" data-line-number="15">  <span class="va">mainWindow</span>.<span class="at">loadURL</span>(<span class="st">&#39;file://&#39;</span> <span class="op">+</span> __dirname <span class="op">+</span> <span class="st">&#39;/../index.html&#39;</span>)<span class="op">;</span></a>
<a class="sourceLine" id="cb4-16" data-line-number="16">  <span class="va">mainWindow</span>.<span class="at">on</span>(<span class="st">&#39;closed&#39;</span><span class="op">,</span> <span class="kw">function</span>() <span class="op">{</span></a>
<a class="sourceLine" id="cb4-17" data-line-number="17">    mainWindow <span class="op">=</span> <span class="kw">null</span><span class="op">;</span></a>
<a class="sourceLine" id="cb4-18" data-line-number="18">  <span class="op">}</span>)<span class="op">;</span></a>
<a class="sourceLine" id="cb4-19" data-line-number="19"><span class="op">}</span>)<span class="op">;</span></a></code></pre></div>
<p>これで <code>gulp</code> を実行すればブラウザ版 elmdeck がそのまんま electron で実行できる． やったぁ．</p>
<h3 id="ファイルの読み込み">ファイルの読み込み</h3>
<p>ココからが本番．</p>
<p>設計として，デスクトップでよくある感じに，左上の <code>File</code> から <code>Open</code> とかしたい． こんな感じ(これは Atom だけど)．</p>
<p><img src="/assets/create-elmdeck/atom-file-open.jpg" /></p>
<p>Electron でファイルの呼び出しをする方法は以下の記事を参考にした．</p>
<ul>
<li><a href="https://qiita.com/_takwat/items/6544342fd4141345bb19">Electronでファイルやフォルダの選択 - Qiita</a></li>
</ul>
<p>Node の fs ライブラリを使えばよいようだ(Electron に限らないハナシかな)． <a href="https://nodejs.org/api/fs.html">fs の公式ドキュメント</a>とにらめっこして <a href="https://nodejs.org/api/fs.html#fs_fs_readfile_path_options_callback"><code>fs.readFile</code></a> を呼び出せば良いみたいなのは分かった． 取りあえず，次のような <code>files.js</code> ファイルを書いた．</p>
<div class="sourceCode" id="cb5"><pre class="sourceCode javascript"><code class="sourceCode javascript"><a class="sourceLine" id="cb5-1" data-line-number="1"><span class="st">&#39;use strict&#39;</span><span class="op">;</span></a>
<a class="sourceLine" id="cb5-2" data-line-number="2"></a>
<a class="sourceLine" id="cb5-3" data-line-number="3"><span class="kw">const</span> <span class="op">{</span>remote<span class="op">}</span> <span class="op">=</span> <span class="at">require</span>(<span class="st">&#39;electron&#39;</span>)<span class="op">;</span></a>
<a class="sourceLine" id="cb5-4" data-line-number="4"><span class="kw">const</span> <span class="op">{</span>dialog<span class="op">,</span> BrowserWindow<span class="op">}</span> <span class="op">=</span> remote<span class="op">;</span></a>
<a class="sourceLine" id="cb5-5" data-line-number="5"><span class="kw">const</span> fs <span class="op">=</span> <span class="at">require</span>(<span class="st">&#39;fs&#39;</span>)<span class="op">;</span></a>
<a class="sourceLine" id="cb5-6" data-line-number="6"></a>
<a class="sourceLine" id="cb5-7" data-line-number="7"><span class="va">module</span>.<span class="at">exports</span> <span class="op">=</span> <span class="op">{</span></a>
<a class="sourceLine" id="cb5-8" data-line-number="8">  <span class="dt">readFile</span><span class="op">:</span> <span class="kw">function</span> (app) <span class="op">{</span></a>
<a class="sourceLine" id="cb5-9" data-line-number="9">    <span class="va">dialog</span>.<span class="at">showOpenDialog</span>(<span class="kw">null</span><span class="op">,</span> <span class="op">{</span></a>
<a class="sourceLine" id="cb5-10" data-line-number="10">        <span class="dt">properties</span><span class="op">:</span> [<span class="st">&#39;openFile&#39;</span>]<span class="op">,</span></a>
<a class="sourceLine" id="cb5-11" data-line-number="11">        <span class="dt">title</span><span class="op">:</span> <span class="st">&#39;File&#39;</span><span class="op">,</span></a>
<a class="sourceLine" id="cb5-12" data-line-number="12">        <span class="dt">defaultPath</span><span class="op">:</span> <span class="st">&#39;.&#39;</span><span class="op">,</span></a>
<a class="sourceLine" id="cb5-13" data-line-number="13">        <span class="dt">filters</span><span class="op">:</span> [</a>
<a class="sourceLine" id="cb5-14" data-line-number="14">            <span class="op">{</span><span class="dt">name</span><span class="op">:</span> <span class="st">&#39;マークダウン&#39;</span><span class="op">,</span> <span class="dt">extensions</span><span class="op">:</span> [<span class="st">&#39;md&#39;</span><span class="op">,</span> <span class="st">&#39;markdown&#39;</span>]<span class="op">},</span></a>
<a class="sourceLine" id="cb5-15" data-line-number="15">        ]</a>
<a class="sourceLine" id="cb5-16" data-line-number="16">    <span class="op">},</span> (fileNames) <span class="op">=&gt;</span> <span class="op">{</span></a>
<a class="sourceLine" id="cb5-17" data-line-number="17">        <span class="va">fs</span>.<span class="at">readFile</span>(fileNames[<span class="dv">0</span>]<span class="op">,</span> <span class="st">&#39;utf8&#39;</span><span class="op">,</span> (err<span class="op">,</span> data) <span class="op">=&gt;</span> <span class="op">{</span></a>
<a class="sourceLine" id="cb5-18" data-line-number="18">          <span class="cf">if</span> (err) <span class="va">console</span>.<span class="at">log</span>(err)<span class="op">;</span></a>
<a class="sourceLine" id="cb5-19" data-line-number="19">          <span class="va">console</span>.<span class="at">log</span>(data)<span class="op">;</span></a>
<a class="sourceLine" id="cb5-20" data-line-number="20">        <span class="op">}</span>)</a>
<a class="sourceLine" id="cb5-21" data-line-number="21">    <span class="op">}</span>)<span class="op">;</span></a>
<a class="sourceLine" id="cb5-22" data-line-number="22">  <span class="op">}</span></a>
<a class="sourceLine" id="cb5-23" data-line-number="23"><span class="op">}</span></a></code></pre></div>
<p>次にこれをメニューバーから呼べるようにする． Electron のメニューバーを拡張するには <a href="https://electronjs.org/docs/api/menu"><code>Menu</code> クラス</a>を使えば良いらしい． サンプルやらを参考にしながらイロイロ試行錯誤してみた結果，次のような <code>menuItems.js</code> ファイルを書き，</p>
<div class="sourceCode" id="cb6"><pre class="sourceCode javascript"><code class="sourceCode javascript"><a class="sourceLine" id="cb6-1" data-line-number="1"><span class="kw">const</span> <span class="op">{</span>app<span class="op">,</span> Menu<span class="op">,</span> dialog<span class="op">}</span> <span class="op">=</span> <span class="at">require</span>(<span class="st">&#39;electron&#39;</span>)<span class="op">;</span></a>
<a class="sourceLine" id="cb6-2" data-line-number="2"></a>
<a class="sourceLine" id="cb6-3" data-line-number="3"><span class="kw">const</span> template <span class="op">=</span> [</a>
<a class="sourceLine" id="cb6-4" data-line-number="4">  <span class="op">{</span></a>
<a class="sourceLine" id="cb6-5" data-line-number="5">    <span class="dt">label</span><span class="op">:</span> <span class="st">&#39;Edit&#39;</span><span class="op">,</span></a>
<a class="sourceLine" id="cb6-6" data-line-number="6">    <span class="dt">submenu</span><span class="op">:</span> [</a>
<a class="sourceLine" id="cb6-7" data-line-number="7">      <span class="op">{</span><span class="dt">role</span><span class="op">:</span> <span class="st">&#39;undo&#39;</span><span class="op">},</span></a>
<a class="sourceLine" id="cb6-8" data-line-number="8">      <span class="op">{</span><span class="dt">role</span><span class="op">:</span> <span class="st">&#39;redo&#39;</span><span class="op">},</span></a>
<a class="sourceLine" id="cb6-9" data-line-number="9">      <span class="op">{</span><span class="dt">type</span><span class="op">:</span> <span class="st">&#39;separator&#39;</span><span class="op">},</span></a>
<a class="sourceLine" id="cb6-10" data-line-number="10">      <span class="op">{</span><span class="dt">role</span><span class="op">:</span> <span class="st">&#39;cut&#39;</span><span class="op">},</span></a>
<a class="sourceLine" id="cb6-11" data-line-number="11">      <span class="op">{</span><span class="dt">role</span><span class="op">:</span> <span class="st">&#39;copy&#39;</span><span class="op">},</span></a>
<a class="sourceLine" id="cb6-12" data-line-number="12">      <span class="op">{</span><span class="dt">role</span><span class="op">:</span> <span class="st">&#39;paste&#39;</span><span class="op">},</span></a>
<a class="sourceLine" id="cb6-13" data-line-number="13">      <span class="op">{</span><span class="dt">role</span><span class="op">:</span> <span class="st">&#39;pasteandmatchstyle&#39;</span><span class="op">},</span></a>
<a class="sourceLine" id="cb6-14" data-line-number="14">      <span class="op">{</span><span class="dt">role</span><span class="op">:</span> <span class="st">&#39;delete&#39;</span><span class="op">},</span></a>
<a class="sourceLine" id="cb6-15" data-line-number="15">      <span class="op">{</span><span class="dt">role</span><span class="op">:</span> <span class="st">&#39;selectall&#39;</span><span class="op">}</span></a>
<a class="sourceLine" id="cb6-16" data-line-number="16">    ]</a>
<a class="sourceLine" id="cb6-17" data-line-number="17">  <span class="op">},</span></a>
<a class="sourceLine" id="cb6-18" data-line-number="18">  <span class="op">{</span></a>
<a class="sourceLine" id="cb6-19" data-line-number="19">    <span class="dt">label</span><span class="op">:</span> <span class="st">&#39;View&#39;</span><span class="op">,</span></a>
<a class="sourceLine" id="cb6-20" data-line-number="20">    <span class="dt">submenu</span><span class="op">:</span> [</a>
<a class="sourceLine" id="cb6-21" data-line-number="21">      <span class="op">{</span><span class="dt">role</span><span class="op">:</span> <span class="st">&#39;reload&#39;</span><span class="op">},</span></a>
<a class="sourceLine" id="cb6-22" data-line-number="22">      <span class="op">{</span><span class="dt">role</span><span class="op">:</span> <span class="st">&#39;forcereload&#39;</span><span class="op">},</span></a>
<a class="sourceLine" id="cb6-23" data-line-number="23">      <span class="op">{</span><span class="dt">role</span><span class="op">:</span> <span class="st">&#39;toggledevtools&#39;</span><span class="op">},</span></a>
<a class="sourceLine" id="cb6-24" data-line-number="24">      <span class="op">{</span><span class="dt">type</span><span class="op">:</span> <span class="st">&#39;separator&#39;</span><span class="op">},</span></a>
<a class="sourceLine" id="cb6-25" data-line-number="25">      <span class="op">{</span><span class="dt">role</span><span class="op">:</span> <span class="st">&#39;resetzoom&#39;</span><span class="op">},</span></a>
<a class="sourceLine" id="cb6-26" data-line-number="26">      <span class="op">{</span><span class="dt">role</span><span class="op">:</span> <span class="st">&#39;zoomin&#39;</span><span class="op">},</span></a>
<a class="sourceLine" id="cb6-27" data-line-number="27">      <span class="op">{</span><span class="dt">role</span><span class="op">:</span> <span class="st">&#39;zoomout&#39;</span><span class="op">},</span></a>
<a class="sourceLine" id="cb6-28" data-line-number="28">      <span class="op">{</span><span class="dt">type</span><span class="op">:</span> <span class="st">&#39;separator&#39;</span><span class="op">},</span></a>
<a class="sourceLine" id="cb6-29" data-line-number="29">      <span class="op">{</span><span class="dt">role</span><span class="op">:</span> <span class="st">&#39;togglefullscreen&#39;</span><span class="op">},</span></a>
<a class="sourceLine" id="cb6-30" data-line-number="30">      <span class="op">{</span><span class="dt">role</span><span class="op">:</span> <span class="st">&#39;toggledevtools&#39;</span><span class="op">}</span></a>
<a class="sourceLine" id="cb6-31" data-line-number="31">    ]</a>
<a class="sourceLine" id="cb6-32" data-line-number="32">  <span class="op">},</span></a>
<a class="sourceLine" id="cb6-33" data-line-number="33">  <span class="op">{</span></a>
<a class="sourceLine" id="cb6-34" data-line-number="34">    <span class="dt">role</span><span class="op">:</span> <span class="st">&#39;window&#39;</span><span class="op">,</span></a>
<a class="sourceLine" id="cb6-35" data-line-number="35">    <span class="dt">submenu</span><span class="op">:</span> [</a>
<a class="sourceLine" id="cb6-36" data-line-number="36">      <span class="op">{</span><span class="dt">role</span><span class="op">:</span> <span class="st">&#39;minimize&#39;</span><span class="op">},</span></a>
<a class="sourceLine" id="cb6-37" data-line-number="37">      <span class="op">{</span><span class="dt">role</span><span class="op">:</span> <span class="st">&#39;close&#39;</span><span class="op">}</span></a>
<a class="sourceLine" id="cb6-38" data-line-number="38">    ]</a>
<a class="sourceLine" id="cb6-39" data-line-number="39">  <span class="op">},</span></a>
<a class="sourceLine" id="cb6-40" data-line-number="40">  <span class="op">{</span></a>
<a class="sourceLine" id="cb6-41" data-line-number="41">    <span class="dt">role</span><span class="op">:</span> <span class="st">&#39;help&#39;</span><span class="op">,</span></a>
<a class="sourceLine" id="cb6-42" data-line-number="42">    <span class="dt">submenu</span><span class="op">:</span> [</a>
<a class="sourceLine" id="cb6-43" data-line-number="43">      <span class="op">{</span></a>
<a class="sourceLine" id="cb6-44" data-line-number="44">        <span class="dt">label</span><span class="op">:</span> <span class="st">&#39;Learn More&#39;</span><span class="op">,</span></a>
<a class="sourceLine" id="cb6-45" data-line-number="45">        <span class="at">click</span> () <span class="op">{</span> <span class="at">require</span>(<span class="st">&#39;electron&#39;</span>).<span class="va">shell</span>.<span class="at">openExternal</span>(<span class="st">&#39;https://electron.atom.io&#39;</span>) <span class="op">}</span></a>
<a class="sourceLine" id="cb6-46" data-line-number="46">      <span class="op">}</span></a>
<a class="sourceLine" id="cb6-47" data-line-number="47">    ]</a>
<a class="sourceLine" id="cb6-48" data-line-number="48">  <span class="op">}</span></a>
<a class="sourceLine" id="cb6-49" data-line-number="49">]</a>
<a class="sourceLine" id="cb6-50" data-line-number="50"></a>
<a class="sourceLine" id="cb6-51" data-line-number="51"><span class="kw">const</span> items <span class="op">=</span> <span class="va">template</span>.<span class="at">map</span>( option <span class="op">=&gt;</span> <span class="op">{</span> <span class="cf">return</span> <span class="kw">new</span> <span class="at">MenuItem</span>(option) <span class="op">}</span>)<span class="op">;</span></a>
<a class="sourceLine" id="cb6-52" data-line-number="52"></a>
<a class="sourceLine" id="cb6-53" data-line-number="53"><span class="va">module</span>.<span class="at">exports</span> <span class="op">=</span> <span class="op">{</span></a>
<a class="sourceLine" id="cb6-54" data-line-number="54">  <span class="dt">get</span><span class="op">:</span> () <span class="op">=&gt;</span> <span class="op">{</span> <span class="cf">return</span> items<span class="op">;</span> <span class="op">}</span></a>
<a class="sourceLine" id="cb6-55" data-line-number="55"><span class="op">}</span></a></code></pre></div>
<p>これ(module exports した <code>get</code> 関数のコト)を <code>index.html</code> で次のように呼び出した．</p>
<div class="sourceCode" id="cb7"><pre class="sourceCode html"><code class="sourceCode html"><a class="sourceLine" id="cb7-1" data-line-number="1"><span class="kw">&lt;script&gt;</span></a>
<a class="sourceLine" id="cb7-2" data-line-number="2">  <span class="kw">const</span> <span class="op">{</span>remote<span class="op">}</span> <span class="op">=</span> <span class="at">require</span>(<span class="st">&#39;electron&#39;</span>)<span class="op">;</span></a>
<a class="sourceLine" id="cb7-3" data-line-number="3">  <span class="kw">const</span> <span class="op">{</span>Menu<span class="op">,</span> MenuItem<span class="op">}</span> <span class="op">=</span> remote<span class="op">;</span></a>
<a class="sourceLine" id="cb7-4" data-line-number="4">  <span class="kw">const</span> files <span class="op">=</span> <span class="at">require</span>(<span class="st">&#39;./js/files&#39;</span>)<span class="op">;</span></a>
<a class="sourceLine" id="cb7-5" data-line-number="5">  <span class="kw">const</span> menuItems <span class="op">=</span> <span class="at">require</span>(<span class="st">&#39;./js/menuItems&#39;</span>)</a>
<a class="sourceLine" id="cb7-6" data-line-number="6"></a>
<a class="sourceLine" id="cb7-7" data-line-number="7">  <span class="kw">var</span> node <span class="op">=</span> <span class="va">document</span>.<span class="at">getElementById</span>(<span class="st">&#39;main&#39;</span>)<span class="op">;</span></a>
<a class="sourceLine" id="cb7-8" data-line-number="8">  <span class="cf">while</span> (<span class="va">node</span>.<span class="at">firstChild</span>) <span class="op">{</span></a>
<a class="sourceLine" id="cb7-9" data-line-number="9">    <span class="va">node</span>.<span class="at">removeChild</span>(<span class="va">node</span>.<span class="at">firstChild</span>)<span class="op">;</span></a>
<a class="sourceLine" id="cb7-10" data-line-number="10">  <span class="op">}</span></a>
<a class="sourceLine" id="cb7-11" data-line-number="11">  <span class="kw">var</span> app <span class="op">=</span> <span class="va">module</span>.<span class="va">exports</span>.<span class="va">Main</span>.<span class="at">embed</span>(node)<span class="op">;</span></a>
<a class="sourceLine" id="cb7-12" data-line-number="12"></a>
<a class="sourceLine" id="cb7-13" data-line-number="13">  <span class="kw">var</span> menuvar <span class="op">=</span> <span class="kw">new</span> <span class="at">Menu</span>()<span class="op">;</span></a>
<a class="sourceLine" id="cb7-14" data-line-number="14">  <span class="va">menuvar</span>.<span class="at">append</span>(<span class="kw">new</span> <span class="at">MenuItem</span>(</a>
<a class="sourceLine" id="cb7-15" data-line-number="15">    <span class="op">{</span></a>
<a class="sourceLine" id="cb7-16" data-line-number="16">      <span class="dt">label</span><span class="op">:</span> <span class="st">&#39;File&#39;</span><span class="op">,</span></a>
<a class="sourceLine" id="cb7-17" data-line-number="17">      <span class="dt">submenu</span><span class="op">:</span> [</a>
<a class="sourceLine" id="cb7-18" data-line-number="18">        <span class="op">{</span></a>
<a class="sourceLine" id="cb7-19" data-line-number="19">          <span class="dt">label</span><span class="op">:</span> <span class="st">&#39;Open&#39;</span><span class="op">,</span></a>
<a class="sourceLine" id="cb7-20" data-line-number="20">          <span class="at">click</span>() <span class="op">{</span> <span class="va">files</span>.<span class="at">readFile</span>(app) <span class="op">}</span></a>
<a class="sourceLine" id="cb7-21" data-line-number="21">        <span class="op">}</span></a>
<a class="sourceLine" id="cb7-22" data-line-number="22">      ]</a>
<a class="sourceLine" id="cb7-23" data-line-number="23">    <span class="op">}</span></a>
<a class="sourceLine" id="cb7-24" data-line-number="24">  ))<span class="op">;</span></a>
<a class="sourceLine" id="cb7-25" data-line-number="25">  <span class="va">menuItems</span>.<span class="at">get</span>().<span class="at">forEach</span>( item <span class="op">=&gt;</span> <span class="op">{</span> <span class="va">menuvar</span>.<span class="at">append</span>(item) <span class="op">}</span> )<span class="op">;</span></a>
<a class="sourceLine" id="cb7-26" data-line-number="26">  <span class="va">Menu</span>.<span class="at">setApplicationMenu</span>(menuvar)</a>
<a class="sourceLine" id="cb7-27" data-line-number="27"><span class="kw">&lt;/script&gt;</span></a></code></pre></div>
<p><code>var menuvar = new Menu();</code> 以下からがキモです． どーしても，動的に処理を定義しない部分(<code>Edit</code> とか <code>View</code> とか)を別ファイル(<code>menuItems.js</code>)にまとめたうえで，<code>File</code> を先頭に突っ込みたかったのでこうなった． JS は全然詳しくないのでアンチパターンかもしれないけどね．</p>
<h4 id="elm-に繋げる">Elm に繋げる</h4>
<p>ここまでで</p>
<ol type="1">
<li>上部にあるメニューバーの <code>File</code> -&gt; <code>Open</code> を押して</li>
<li>ファイルをダイアログで選択し</li>
<li>コンソールに内容を吐き出す</li>
</ol>
<p>までは書けた． ここからは (3) が「Elm に渡して input エリアに書き出す」になるようにする．</p>
<p>Elm と JS を繋ぐには方法がいくつかあるが，今回は <code>Port</code> を使ってみる(前回はお行儀の悪い <code>Native</code> モジュールを使ったけど)． 次の記事が本当に参考になった．</p>
<ul>
<li><a href="https://qiita.com/jooex/items/5ff2d3b86563cf5dbd84">ElmのPortでJSを使う。 - Qiita</a></li>
</ul>
<p>マークダウンファイルの中身を JS から Elm に投げるので Elm で次のような <code>ports</code> 関数を定義した．</p>
<div class="sourceCode" id="cb8"><pre class="sourceCode haskell"><code class="sourceCode haskell"><a class="sourceLine" id="cb8-1" data-line-number="1"><span class="co">-- src/Port/FS.elm</span></a>
<a class="sourceLine" id="cb8-2" data-line-number="2">port <span class="kw">module</span> <span class="dt">Port.FS</span> exposing (<span class="fu">..</span>)</a>
<a class="sourceLine" id="cb8-3" data-line-number="3"></a>
<a class="sourceLine" id="cb8-4" data-line-number="4">port readFile <span class="fu">:</span> (<span class="dt">String</span> <span class="ot">-&gt;</span> msg) <span class="ot">-&gt;</span> <span class="dt">Sub</span> msg</a></code></pre></div>
<p>これを <code>Main.elm</code> で次のように呼び出す．</p>
<div class="sourceCode" id="cb9"><pre class="sourceCode haskell"><code class="sourceCode haskell"><a class="sourceLine" id="cb9-1" data-line-number="1"><span class="kw">type</span> alias <span class="dt">Model</span> <span class="fu">=</span></a>
<a class="sourceLine" id="cb9-2" data-line-number="2">  { textarea <span class="fu">:</span> <span class="dt">String</span></a>
<a class="sourceLine" id="cb9-3" data-line-number="3">  , window <span class="fu">:</span> <span class="dt">Window.Size</span></a>
<a class="sourceLine" id="cb9-4" data-line-number="4">  }</a>
<a class="sourceLine" id="cb9-5" data-line-number="5"></a>
<a class="sourceLine" id="cb9-6" data-line-number="6"><span class="kw">type</span> <span class="dt">Msg</span></a>
<a class="sourceLine" id="cb9-7" data-line-number="7">  <span class="fu">=</span> <span class="dt">TextAreaInput</span> <span class="dt">String</span></a>
<a class="sourceLine" id="cb9-8" data-line-number="8">  <span class="fu">|</span> <span class="dt">SizeUpdated</span> <span class="dt">Window.Size</span></a>
<a class="sourceLine" id="cb9-9" data-line-number="9"></a>
<a class="sourceLine" id="cb9-10" data-line-number="10">main <span class="fu">:</span> <span class="dt">Program</span> <span class="dt">Never</span> <span class="dt">Model</span> <span class="dt">Msg</span></a>
<a class="sourceLine" id="cb9-11" data-line-number="11">main <span class="fu">=</span></a>
<a class="sourceLine" id="cb9-12" data-line-number="12">  Html.program</a>
<a class="sourceLine" id="cb9-13" data-line-number="13">    { init <span class="fu">=</span> init model</a>
<a class="sourceLine" id="cb9-14" data-line-number="14">    , view <span class="fu">=</span> view</a>
<a class="sourceLine" id="cb9-15" data-line-number="15">    , update <span class="fu">=</span> update</a>
<a class="sourceLine" id="cb9-16" data-line-number="16">    , subscriptions <span class="fu">=</span> subscriptions</a>
<a class="sourceLine" id="cb9-17" data-line-number="17">    }</a>
<a class="sourceLine" id="cb9-18" data-line-number="18"></a>
<a class="sourceLine" id="cb9-19" data-line-number="19">subscriptions <span class="fu">:</span> <span class="dt">Model</span> <span class="ot">-&gt;</span> <span class="dt">Sub</span> <span class="dt">Msg</span></a>
<a class="sourceLine" id="cb9-20" data-line-number="20">subscriptions model <span class="fu">=</span></a>
<a class="sourceLine" id="cb9-21" data-line-number="21">  Sub.batch</a>
<a class="sourceLine" id="cb9-22" data-line-number="22">    [ Window.resizes <span class="dt">SizeUpdated</span></a>
<a class="sourceLine" id="cb9-23" data-line-number="23">    , FS.readFile <span class="dt">TextAreaInput</span></a>
<a class="sourceLine" id="cb9-24" data-line-number="24">    ]</a>
<a class="sourceLine" id="cb9-25" data-line-number="25"></a>
<a class="sourceLine" id="cb9-26" data-line-number="26">update <span class="fu">:</span> <span class="dt">Msg</span> <span class="ot">-&gt;</span> <span class="dt">Model</span> <span class="ot">-&gt;</span> ( <span class="dt">Model</span>, <span class="dt">Cmd</span> <span class="dt">Msg</span> )</a>
<a class="sourceLine" id="cb9-27" data-line-number="27">update msg model <span class="fu">=</span></a>
<a class="sourceLine" id="cb9-28" data-line-number="28">  <span class="kw">case</span> msg <span class="kw">of</span></a>
<a class="sourceLine" id="cb9-29" data-line-number="29">    <span class="dt">TextAreaInput</span> str <span class="ot">-&gt;</span></a>
<a class="sourceLine" id="cb9-30" data-line-number="30">      ( { model <span class="fu">|</span> textarea <span class="fu">=</span> str }, Cmd.none )</a>
<a class="sourceLine" id="cb9-31" data-line-number="31">    <span class="dt">SizeUpdated</span> size <span class="ot">-&gt;</span></a>
<a class="sourceLine" id="cb9-32" data-line-number="32">      ( { model <span class="fu">|</span> window <span class="fu">=</span> size }, Cmd.none )        </a></code></pre></div>
<p><code>Window.Size</code> とか <code>SizeUpdated</code> はブラウザやアプリのウィンドウサイズに合わせて，スライドのサイズを変更するためのサブスクリプションなので気にしないで． <code>TextAreaInput</code> は input エリアにテキストを書き込んだ時にも使っている． 同じ型なので使いまわした．</p>
<p>あとは <code>files.js</code> の <code>console.log(data);</code> としていた部分を <code>app.ports.readFile.send(data);</code> と<a href="https://github.com/matsubara0507/elmdeck/blob/a102ae0d82b162a3f219b7d33f9875c080ff6be9/app/js/files.js#L19">書き換える</a>だけ．</p>
<p><img src="/assets/create-elmdeck/openfile.gif" /></p>
<p>うまくいった．</p>
<h3 id="ファイルの書き込み">ファイルの書き込み</h3>
<p>さて次はファイルの保存を実装する．</p>
<h4 id="ファイルパスも投げておく">ファイルパスも投げておく</h4>
<p>ファイルを保存するには開いてるファイルのファイルパスがあった方が良いだろう(上書き保存とかするなら)． なのでまずは，読み込み時の処理をファイルパスも投げるように書き換える．</p>
<div class="sourceCode" id="cb10"><pre class="sourceCode haskell"><code class="sourceCode haskell"><a class="sourceLine" id="cb10-1" data-line-number="1"><span class="co">-- src/Port/FS.elm</span></a>
<a class="sourceLine" id="cb10-2" data-line-number="2">port <span class="kw">module</span> <span class="dt">Port.FS</span> exposing (<span class="fu">..</span>)</a>
<a class="sourceLine" id="cb10-3" data-line-number="3"></a>
<a class="sourceLine" id="cb10-4" data-line-number="4"><span class="kw">type</span> alias <span class="dt">File</span> <span class="fu">=</span></a>
<a class="sourceLine" id="cb10-5" data-line-number="5">  { path <span class="fu">:</span> <span class="dt">String</span></a>
<a class="sourceLine" id="cb10-6" data-line-number="6">  , body <span class="fu">:</span> <span class="dt">String</span></a>
<a class="sourceLine" id="cb10-7" data-line-number="7">  }</a>
<a class="sourceLine" id="cb10-8" data-line-number="8"></a>
<a class="sourceLine" id="cb10-9" data-line-number="9">port readFile <span class="fu">:</span> (<span class="dt">File</span> <span class="ot">-&gt;</span> msg) <span class="ot">-&gt;</span> <span class="dt">Sub</span> msg</a></code></pre></div>
<div class="sourceCode" id="cb11"><pre class="sourceCode haskell"><code class="sourceCode haskell"><a class="sourceLine" id="cb11-1" data-line-number="1"><span class="kw">type</span> alias <span class="dt">Model</span> <span class="fu">=</span></a>
<a class="sourceLine" id="cb11-2" data-line-number="2">  { textarea <span class="fu">:</span> <span class="dt">String</span></a>
<a class="sourceLine" id="cb11-3" data-line-number="3">  , window <span class="fu">:</span> <span class="dt">Window.Size</span></a>
<a class="sourceLine" id="cb11-4" data-line-number="4">  , filepath <span class="fu">:</span> <span class="dt">String</span></a>
<a class="sourceLine" id="cb11-5" data-line-number="5">  }</a>
<a class="sourceLine" id="cb11-6" data-line-number="6"></a>
<a class="sourceLine" id="cb11-7" data-line-number="7"><span class="kw">type</span> <span class="dt">Msg</span></a>
<a class="sourceLine" id="cb11-8" data-line-number="8">  <span class="fu">=</span> <span class="dt">TextAreaInput</span> <span class="dt">String</span></a>
<a class="sourceLine" id="cb11-9" data-line-number="9">  <span class="fu">|</span> <span class="dt">SizeUpdated</span> <span class="dt">Window.Size</span></a>
<a class="sourceLine" id="cb11-10" data-line-number="10">  <span class="fu">|</span> <span class="dt">ReadFile</span> <span class="dt">FS.File</span></a>
<a class="sourceLine" id="cb11-11" data-line-number="11"></a>
<a class="sourceLine" id="cb11-12" data-line-number="12">update <span class="fu">:</span> <span class="dt">Msg</span> <span class="ot">-&gt;</span> <span class="dt">Model</span> <span class="ot">-&gt;</span> ( <span class="dt">Model</span>, <span class="dt">Cmd</span> <span class="dt">Msg</span> )</a>
<a class="sourceLine" id="cb11-13" data-line-number="13">update msg model <span class="fu">=</span></a>
<a class="sourceLine" id="cb11-14" data-line-number="14">  <span class="kw">case</span> msg <span class="kw">of</span></a>
<a class="sourceLine" id="cb11-15" data-line-number="15">    <span class="dt">TextAreaInput</span> str <span class="ot">-&gt;</span></a>
<a class="sourceLine" id="cb11-16" data-line-number="16">      ( { model <span class="fu">|</span> textarea <span class="fu">=</span> str }, Cmd.none )</a>
<a class="sourceLine" id="cb11-17" data-line-number="17">    <span class="dt">SizeUpdated</span> size <span class="ot">-&gt;</span></a>
<a class="sourceLine" id="cb11-18" data-line-number="18">      ( { model <span class="fu">|</span> window <span class="fu">=</span> size }, Cmd.none )</a>
<a class="sourceLine" id="cb11-19" data-line-number="19">    <span class="dt">ReadFile</span> file <span class="ot">-&gt;</span></a>
<a class="sourceLine" id="cb11-20" data-line-number="20">      ( { model <span class="fu">|</span> textarea <span class="fu">=</span> file<span class="fu">.</span>body, filepath <span class="fu">=</span> file<span class="fu">.</span>path }, Cmd.none )</a>
<a class="sourceLine" id="cb11-21" data-line-number="21"></a>
<a class="sourceLine" id="cb11-22" data-line-number="22">subscriptions <span class="fu">:</span> <span class="dt">Model</span> <span class="ot">-&gt;</span> <span class="dt">Sub</span> <span class="dt">Msg</span></a>
<a class="sourceLine" id="cb11-23" data-line-number="23">subscriptions model <span class="fu">=</span></a>
<a class="sourceLine" id="cb11-24" data-line-number="24">  Sub.batch</a>
<a class="sourceLine" id="cb11-25" data-line-number="25">    [ Window.resizes <span class="dt">SizeUpdated</span></a>
<a class="sourceLine" id="cb11-26" data-line-number="26">    , FS.readFile <span class="dt">ReadFile</span></a>
<a class="sourceLine" id="cb11-27" data-line-number="27">    ]</a></code></pre></div>
<p>レコード型を JS から Elm に投げるには普通のオブジェクトを使えばよいらしい(最初はタプルを使おうとして良くわからなくなり諦めた…)．</p>
<div class="sourceCode" id="cb12"><pre class="sourceCode javascript"><code class="sourceCode javascript"><a class="sourceLine" id="cb12-1" data-line-number="1"><span class="co">// js/files.js</span></a>
<a class="sourceLine" id="cb12-2" data-line-number="2"><span class="va">module</span>.<span class="at">exports</span> <span class="op">=</span> <span class="op">{</span></a>
<a class="sourceLine" id="cb12-3" data-line-number="3">  <span class="dt">readFile</span><span class="op">:</span> <span class="kw">function</span> (app) <span class="op">{</span></a>
<a class="sourceLine" id="cb12-4" data-line-number="4">    <span class="va">dialog</span>.<span class="at">showOpenDialog</span>(<span class="kw">null</span><span class="op">,</span> <span class="op">{</span></a>
<a class="sourceLine" id="cb12-5" data-line-number="5">        <span class="dt">properties</span><span class="op">:</span> [<span class="st">&#39;openFile&#39;</span>]<span class="op">,</span></a>
<a class="sourceLine" id="cb12-6" data-line-number="6">        <span class="dt">title</span><span class="op">:</span> <span class="st">&#39;File&#39;</span><span class="op">,</span></a>
<a class="sourceLine" id="cb12-7" data-line-number="7">        <span class="dt">defaultPath</span><span class="op">:</span> <span class="st">&#39;.&#39;</span><span class="op">,</span></a>
<a class="sourceLine" id="cb12-8" data-line-number="8">        <span class="dt">filters</span><span class="op">:</span> [</a>
<a class="sourceLine" id="cb12-9" data-line-number="9">            <span class="op">{</span><span class="dt">name</span><span class="op">:</span> <span class="st">&#39;マークダウン&#39;</span><span class="op">,</span> <span class="dt">extensions</span><span class="op">:</span> [<span class="st">&#39;md&#39;</span><span class="op">,</span> <span class="st">&#39;markdown&#39;</span>]<span class="op">},</span></a>
<a class="sourceLine" id="cb12-10" data-line-number="10">        ]</a>
<a class="sourceLine" id="cb12-11" data-line-number="11">    <span class="op">},</span> (fileNames) <span class="op">=&gt;</span> <span class="op">{</span></a>
<a class="sourceLine" id="cb12-12" data-line-number="12">        <span class="va">fs</span>.<span class="at">readFile</span>(fileNames[<span class="dv">0</span>]<span class="op">,</span> <span class="st">&#39;utf8&#39;</span><span class="op">,</span> (err<span class="op">,</span> data) <span class="op">=&gt;</span> <span class="op">{</span></a>
<a class="sourceLine" id="cb12-13" data-line-number="13">          <span class="cf">if</span> (err) <span class="va">console</span>.<span class="at">log</span>(err)<span class="op">;</span></a>
<a class="sourceLine" id="cb12-14" data-line-number="14">          <span class="va">app</span>.<span class="va">ports</span>.<span class="va">readFile</span>.<span class="at">send</span>(<span class="op">{</span> <span class="dt">path</span><span class="op">:</span> fileNames[<span class="dv">0</span>]<span class="op">,</span> <span class="dt">body</span><span class="op">:</span> data <span class="op">}</span>)<span class="op">;</span></a>
<a class="sourceLine" id="cb12-15" data-line-number="15">        <span class="op">}</span>)</a>
<a class="sourceLine" id="cb12-16" data-line-number="16">    <span class="op">}</span>)<span class="op">;</span></a>
<a class="sourceLine" id="cb12-17" data-line-number="17">  <span class="op">}</span></a>
<a class="sourceLine" id="cb12-18" data-line-number="18"><span class="op">}</span></a></code></pre></div>
<h4 id="いよいよ書き出し">いよいよ書き出し</h4>
<p>保存するとき，データは Elm 側から投げられるが保存ボタンは Electron 側(JS側)から始めたい． なので</p>
<ol type="1">
<li>保存ボタンを押したら何らかの値を JS から Elm に送信</li>
<li>それを受けたら Elm から JS にマークダウンのデータを送信</li>
</ol>
<p>というお手製同期通信を行うことにした(これもアンチパターンかも…)． 上書き保存のときは <code>null</code> (Elm 側では <code>Nothing</code>) を JS から送り，新規保存ならファイル名を送ることにする．</p>
<h2 id="section-2"></h2>
<p>まずは Elm 側で，以上の戦略から次のような <code>port</code> を書いた．</p>
<div class="sourceCode" id="cb13"><pre class="sourceCode haskell"><code class="sourceCode haskell"><a class="sourceLine" id="cb13-1" data-line-number="1">port writeFileHook <span class="fu">:</span> (<span class="dt">Maybe</span> <span class="dt">String</span> <span class="ot">-&gt;</span> msg) <span class="ot">-&gt;</span> <span class="dt">Sub</span> msg</a>
<a class="sourceLine" id="cb13-2" data-line-number="2">port writeFile <span class="fu">:</span> <span class="dt">File</span> <span class="ot">-&gt;</span> <span class="dt">Cmd</span> msg</a></code></pre></div>
<p>次は JS 側に移る． ファイルの書き出しには <a href="https://nodejs.org/api/fs.html#fs_fs_writefile_file_data_options_callback"><code>fs.writeFile</code></a> 関数を用いた． 前述した <code>port</code> も使って，次のような関数を <code>files.js</code> に追加した．</p>
<div class="sourceCode" id="cb14"><pre class="sourceCode javascript"><code class="sourceCode javascript"><a class="sourceLine" id="cb14-1" data-line-number="1"><span class="kw">function</span> <span class="at">writeFileTo</span>(fileName<span class="op">,</span> data) <span class="op">{</span></a>
<a class="sourceLine" id="cb14-2" data-line-number="2">  <span class="cf">if</span> (fileName) <span class="op">{</span></a>
<a class="sourceLine" id="cb14-3" data-line-number="3">    <span class="va">fs</span>.<span class="at">writeFile</span>(fileName<span class="op">,</span> data<span class="op">,</span> (err) <span class="op">=&gt;</span> <span class="op">{</span></a>
<a class="sourceLine" id="cb14-4" data-line-number="4">      <span class="cf">if</span> (err) <span class="op">{</span></a>
<a class="sourceLine" id="cb14-5" data-line-number="5">        <span class="va">console</span>.<span class="at">log</span>(err)<span class="op">;</span></a>
<a class="sourceLine" id="cb14-6" data-line-number="6">        <span class="va">dialog</span>.<span class="at">showErrorBox</span>(<span class="st">&#39;Can not save fiel: &#39;</span> <span class="op">+</span> fileName<span class="op">,</span> err)<span class="op">;</span></a>
<a class="sourceLine" id="cb14-7" data-line-number="7">      <span class="op">}</span></a>
<a class="sourceLine" id="cb14-8" data-line-number="8">    <span class="op">}</span>)</a>
<a class="sourceLine" id="cb14-9" data-line-number="9">  <span class="op">}</span></a>
<a class="sourceLine" id="cb14-10" data-line-number="10"><span class="op">}</span></a>
<a class="sourceLine" id="cb14-11" data-line-number="11"></a>
<a class="sourceLine" id="cb14-12" data-line-number="12"><span class="va">module</span>.<span class="at">exports</span> <span class="op">=</span> <span class="op">{</span></a>
<a class="sourceLine" id="cb14-13" data-line-number="13">  <span class="dt">readFile</span><span class="op">:</span> <span class="kw">function</span> (app) <span class="op">{</span></a>
<a class="sourceLine" id="cb14-14" data-line-number="14">    ...</a>
<a class="sourceLine" id="cb14-15" data-line-number="15">  <span class="op">},</span></a>
<a class="sourceLine" id="cb14-16" data-line-number="16">  <span class="dt">writeFile</span><span class="op">:</span> <span class="kw">function</span> (app) <span class="op">{</span></a>
<a class="sourceLine" id="cb14-17" data-line-number="17">    <span class="va">app</span>.<span class="va">ports</span>.<span class="va">writeFileHook</span>.<span class="at">send</span>(<span class="kw">null</span>)<span class="op">;</span></a>
<a class="sourceLine" id="cb14-18" data-line-number="18">    <span class="va">app</span>.<span class="va">ports</span>.<span class="va">writeFile</span>.<span class="at">subscribe</span>(args <span class="op">=&gt;</span> <span class="op">{</span> <span class="at">writeFileTo</span>(args[<span class="st">&#39;path&#39;</span>]<span class="op">,</span> args[<span class="st">&#39;body&#39;</span>]) <span class="op">}</span>)<span class="op">;</span></a>
<a class="sourceLine" id="cb14-19" data-line-number="19">  <span class="op">},</span></a>
<a class="sourceLine" id="cb14-20" data-line-number="20">  <span class="dt">writeFileAs</span><span class="op">:</span> <span class="kw">function</span> (app) <span class="op">{</span></a>
<a class="sourceLine" id="cb14-21" data-line-number="21">    <span class="va">dialog</span>.<span class="at">showSaveDialog</span>(<span class="kw">null</span><span class="op">,</span> <span class="op">{</span></a>
<a class="sourceLine" id="cb14-22" data-line-number="22">        <span class="dt">properties</span><span class="op">:</span> [<span class="st">&#39;openFile&#39;</span>]<span class="op">,</span></a>
<a class="sourceLine" id="cb14-23" data-line-number="23">        <span class="dt">title</span><span class="op">:</span> <span class="st">&#39;File&#39;</span><span class="op">,</span></a>
<a class="sourceLine" id="cb14-24" data-line-number="24">        <span class="dt">defaultPath</span><span class="op">:</span> <span class="st">&#39;.&#39;</span><span class="op">,</span></a>
<a class="sourceLine" id="cb14-25" data-line-number="25">        <span class="dt">filters</span><span class="op">:</span> [</a>
<a class="sourceLine" id="cb14-26" data-line-number="26">            <span class="op">{</span><span class="dt">name</span><span class="op">:</span> <span class="st">&#39;Markdown&#39;</span><span class="op">,</span> <span class="dt">extensions</span><span class="op">:</span> [<span class="st">&#39;md&#39;</span><span class="op">,</span> <span class="st">&#39;markdown&#39;</span>]<span class="op">},</span></a>
<a class="sourceLine" id="cb14-27" data-line-number="27">        ]</a>
<a class="sourceLine" id="cb14-28" data-line-number="28">    <span class="op">},</span> (fileName) <span class="op">=&gt;</span> <span class="op">{</span></a>
<a class="sourceLine" id="cb14-29" data-line-number="29">        <span class="cf">if</span> (fileName <span class="op">==</span> <span class="kw">undefined</span>) <span class="op">{</span></a>
<a class="sourceLine" id="cb14-30" data-line-number="30">          <span class="va">console</span>.<span class="at">log</span>(fileName)<span class="op">;</span></a>
<a class="sourceLine" id="cb14-31" data-line-number="31">          <span class="va">dialog</span>.<span class="at">showErrorBox</span>(<span class="st">&#39;Can not save fiel: &#39;</span><span class="op">,</span> <span class="st">&#39;Please select file.&#39;</span>)<span class="op">;</span></a>
<a class="sourceLine" id="cb14-32" data-line-number="32">          <span class="cf">return</span></a>
<a class="sourceLine" id="cb14-33" data-line-number="33">        <span class="op">}</span></a>
<a class="sourceLine" id="cb14-34" data-line-number="34">        <span class="va">app</span>.<span class="va">ports</span>.<span class="va">writeFileHook</span>.<span class="at">send</span>(fileName)<span class="op">;</span></a>
<a class="sourceLine" id="cb14-35" data-line-number="35">        <span class="va">app</span>.<span class="va">ports</span>.<span class="va">writeFile</span>.<span class="at">subscribe</span>(args <span class="op">=&gt;</span> <span class="op">{</span> <span class="at">writeFileTo</span>(args[<span class="st">&#39;path&#39;</span>]<span class="op">,</span> args[<span class="st">&#39;body&#39;</span>]) <span class="op">}</span>)<span class="op">;</span></a>
<a class="sourceLine" id="cb14-36" data-line-number="36">    <span class="op">}</span>)<span class="op">;</span></a>
<a class="sourceLine" id="cb14-37" data-line-number="37">  <span class="op">}</span></a>
<a class="sourceLine" id="cb14-38" data-line-number="38"><span class="op">}</span></a></code></pre></div>
<p>上書き保存 <code>writeFile</code> と新しく保存 <code>writeFileAs</code> を用意し，共通部分は <code>writeFileTo</code> 関数として書き出した．</p>
<p>これをメニューバーに追加する．</p>
<div class="sourceCode" id="cb15"><pre class="sourceCode javascript"><code class="sourceCode javascript"><a class="sourceLine" id="cb15-1" data-line-number="1"><span class="kw">var</span> menuvar <span class="op">=</span> <span class="kw">new</span> <span class="at">Menu</span>()<span class="op">;</span></a>
<a class="sourceLine" id="cb15-2" data-line-number="2"><span class="va">menuvar</span>.<span class="at">append</span>(<span class="kw">new</span> <span class="at">MenuItem</span>(</a>
<a class="sourceLine" id="cb15-3" data-line-number="3">  <span class="op">{</span></a>
<a class="sourceLine" id="cb15-4" data-line-number="4">    <span class="dt">label</span><span class="op">:</span> <span class="st">&#39;File&#39;</span><span class="op">,</span></a>
<a class="sourceLine" id="cb15-5" data-line-number="5">    <span class="dt">submenu</span><span class="op">:</span> [</a>
<a class="sourceLine" id="cb15-6" data-line-number="6">      <span class="op">{</span></a>
<a class="sourceLine" id="cb15-7" data-line-number="7">        <span class="dt">label</span><span class="op">:</span> <span class="st">&#39;Open&#39;</span><span class="op">,</span></a>
<a class="sourceLine" id="cb15-8" data-line-number="8">        <span class="at">click</span>() <span class="op">{</span> <span class="va">files</span>.<span class="at">readFile</span>(app) <span class="op">}</span></a>
<a class="sourceLine" id="cb15-9" data-line-number="9">      <span class="op">},</span></a>
<a class="sourceLine" id="cb15-10" data-line-number="10">      <span class="op">{</span></a>
<a class="sourceLine" id="cb15-11" data-line-number="11">        <span class="dt">label</span><span class="op">:</span> <span class="st">&#39;Save&#39;</span><span class="op">,</span></a>
<a class="sourceLine" id="cb15-12" data-line-number="12">        <span class="at">click</span>() <span class="op">{</span> <span class="va">files</span>.<span class="at">writeFile</span>(app) <span class="op">}</span></a>
<a class="sourceLine" id="cb15-13" data-line-number="13">      <span class="op">},</span></a>
<a class="sourceLine" id="cb15-14" data-line-number="14">      <span class="op">{</span></a>
<a class="sourceLine" id="cb15-15" data-line-number="15">        <span class="dt">label</span><span class="op">:</span> <span class="st">&#39;Save As&#39;</span><span class="op">,</span></a>
<a class="sourceLine" id="cb15-16" data-line-number="16">        <span class="at">click</span>() <span class="op">{</span> <span class="va">files</span>.<span class="at">writeFileAs</span>(app) <span class="op">}</span></a>
<a class="sourceLine" id="cb15-17" data-line-number="17">      <span class="op">}</span></a>
<a class="sourceLine" id="cb15-18" data-line-number="18">    ]</a>
<a class="sourceLine" id="cb15-19" data-line-number="19">  <span class="op">}</span></a>
<a class="sourceLine" id="cb15-20" data-line-number="20">))<span class="op">;</span></a></code></pre></div>
<p>最後に Elm 側に処理を追加した．</p>
<div class="sourceCode" id="cb16"><pre class="sourceCode haskell"><code class="sourceCode haskell"><a class="sourceLine" id="cb16-1" data-line-number="1"><span class="co">-- app/src/Main.elm</span></a>
<a class="sourceLine" id="cb16-2" data-line-number="2"><span class="kw">type</span> <span class="dt">Msg</span></a>
<a class="sourceLine" id="cb16-3" data-line-number="3">  <span class="fu">=</span> <span class="dt">TextAreaInput</span> <span class="dt">String</span></a>
<a class="sourceLine" id="cb16-4" data-line-number="4">  <span class="fu">|</span> <span class="dt">SizeUpdated</span> <span class="dt">Window.Size</span></a>
<a class="sourceLine" id="cb16-5" data-line-number="5">  <span class="fu">|</span> <span class="dt">ReadFile</span> <span class="dt">FS.File</span></a>
<a class="sourceLine" id="cb16-6" data-line-number="6">  <span class="fu">|</span> <span class="dt">WriteFileHook</span> (<span class="dt">Maybe</span> <span class="dt">String</span>)</a>
<a class="sourceLine" id="cb16-7" data-line-number="7"></a>
<a class="sourceLine" id="cb16-8" data-line-number="8">update <span class="fu">:</span> <span class="dt">Msg</span> <span class="ot">-&gt;</span> <span class="dt">Model</span> <span class="ot">-&gt;</span> ( <span class="dt">Model</span>, <span class="dt">Cmd</span> <span class="dt">Msg</span> )</a>
<a class="sourceLine" id="cb16-9" data-line-number="9">update msg model <span class="fu">=</span></a>
<a class="sourceLine" id="cb16-10" data-line-number="10">  <span class="kw">case</span> msg <span class="kw">of</span></a>
<a class="sourceLine" id="cb16-11" data-line-number="11">    <span class="dt">TextAreaInput</span> str <span class="ot">-&gt;</span></a>
<a class="sourceLine" id="cb16-12" data-line-number="12">      ( { model <span class="fu">|</span> textarea <span class="fu">=</span> str }, Cmd.none )</a>
<a class="sourceLine" id="cb16-13" data-line-number="13">    <span class="dt">SizeUpdated</span> size <span class="ot">-&gt;</span></a>
<a class="sourceLine" id="cb16-14" data-line-number="14">      ( { model <span class="fu">|</span> window <span class="fu">=</span> size }, Cmd.none )</a>
<a class="sourceLine" id="cb16-15" data-line-number="15">    <span class="dt">ReadFile</span> file <span class="ot">-&gt;</span></a>
<a class="sourceLine" id="cb16-16" data-line-number="16">      ( { model <span class="fu">|</span> textarea <span class="fu">=</span> file<span class="fu">.</span>body, filepath <span class="fu">=</span> file<span class="fu">.</span>path }, Cmd.none )</a>
<a class="sourceLine" id="cb16-17" data-line-number="17">    <span class="dt">WriteFileHook</span> (<span class="dt">Just</span> filepath) <span class="ot">-&gt;</span></a>
<a class="sourceLine" id="cb16-18" data-line-number="18">      ( { model <span class="fu">|</span> filepath <span class="fu">=</span> filepath }, FS.writeFile { path <span class="fu">=</span> filepath, body <span class="fu">=</span> model<span class="fu">.</span>textarea } )</a>
<a class="sourceLine" id="cb16-19" data-line-number="19">    <span class="dt">WriteFileHook</span> <span class="dt">Nothing</span> <span class="ot">-&gt;</span></a>
<a class="sourceLine" id="cb16-20" data-line-number="20">      ( model, FS.writeFile { path <span class="fu">=</span> model<span class="fu">.</span>filepath, body <span class="fu">=</span> model<span class="fu">.</span>textarea } )</a>
<a class="sourceLine" id="cb16-21" data-line-number="21"></a>
<a class="sourceLine" id="cb16-22" data-line-number="22">subscriptions <span class="fu">:</span> <span class="dt">Model</span> <span class="ot">-&gt;</span> <span class="dt">Sub</span> <span class="dt">Msg</span></a>
<a class="sourceLine" id="cb16-23" data-line-number="23">subscriptions model <span class="fu">=</span></a>
<a class="sourceLine" id="cb16-24" data-line-number="24">  Sub.batch</a>
<a class="sourceLine" id="cb16-25" data-line-number="25">    [ Window.resizes <span class="dt">SizeUpdated</span></a>
<a class="sourceLine" id="cb16-26" data-line-number="26">    , FS.readFile <span class="dt">ReadFile</span></a>
<a class="sourceLine" id="cb16-27" data-line-number="27">    , FS.writeFileHook <span class="dt">WriteFileHook</span></a>
<a class="sourceLine" id="cb16-28" data-line-number="28">    ]</a></code></pre></div>
<p>これでうまく動作するはずだ．</p>
<p><img src="/assets/create-elmdeck/savefile.gif" /></p>
<h3 id="ショートカット">ショートカット</h3>
<p>最後にショートカットだ． 次の記事が参考になった．</p>
<ul>
<li><a href="https://qiita.com/okaxaki/items/8b8942b0c4e13ac67739">Electronに開発用メニューとショートカットを付ける - Qiita</a></li>
</ul>
<p><a href="https://electronjs.org/docs/api/accelerator"><code>Accelerator</code></a> というのを使えばよいらしい．</p>
<div class="sourceCode" id="cb17"><pre class="sourceCode javascript"><code class="sourceCode javascript"><a class="sourceLine" id="cb17-1" data-line-number="1"><span class="kw">var</span> menuvar <span class="op">=</span> <span class="kw">new</span> <span class="at">Menu</span>()<span class="op">;</span></a>
<a class="sourceLine" id="cb17-2" data-line-number="2"><span class="va">menuvar</span>.<span class="at">append</span>(<span class="kw">new</span> <span class="at">MenuItem</span>(</a>
<a class="sourceLine" id="cb17-3" data-line-number="3">  <span class="op">{</span></a>
<a class="sourceLine" id="cb17-4" data-line-number="4">    <span class="dt">label</span><span class="op">:</span> <span class="st">&#39;File&#39;</span><span class="op">,</span></a>
<a class="sourceLine" id="cb17-5" data-line-number="5">    <span class="dt">submenu</span><span class="op">:</span> [</a>
<a class="sourceLine" id="cb17-6" data-line-number="6">      <span class="op">{</span></a>
<a class="sourceLine" id="cb17-7" data-line-number="7">        <span class="dt">label</span><span class="op">:</span> <span class="st">&#39;Open&#39;</span><span class="op">,</span></a>
<a class="sourceLine" id="cb17-8" data-line-number="8">        <span class="dt">accelerator</span><span class="op">:</span> <span class="st">&#39;Ctrl+O&#39;</span><span class="op">,</span></a>
<a class="sourceLine" id="cb17-9" data-line-number="9">        <span class="at">click</span>() <span class="op">{</span> <span class="va">files</span>.<span class="at">readFile</span>(app) <span class="op">}</span></a>
<a class="sourceLine" id="cb17-10" data-line-number="10">      <span class="op">},</span></a>
<a class="sourceLine" id="cb17-11" data-line-number="11">      <span class="op">{</span></a>
<a class="sourceLine" id="cb17-12" data-line-number="12">        <span class="dt">label</span><span class="op">:</span> <span class="st">&#39;Save&#39;</span><span class="op">,</span></a>
<a class="sourceLine" id="cb17-13" data-line-number="13">        <span class="dt">accelerator</span><span class="op">:</span> <span class="st">&#39;Ctrl+S&#39;</span><span class="op">,</span></a>
<a class="sourceLine" id="cb17-14" data-line-number="14">        <span class="at">click</span>() <span class="op">{</span> <span class="va">files</span>.<span class="at">writeFile</span>(app) <span class="op">}</span></a>
<a class="sourceLine" id="cb17-15" data-line-number="15">      <span class="op">},</span></a>
<a class="sourceLine" id="cb17-16" data-line-number="16">      <span class="op">{</span></a>
<a class="sourceLine" id="cb17-17" data-line-number="17">        <span class="dt">label</span><span class="op">:</span> <span class="st">&#39;Save As&#39;</span><span class="op">,</span></a>
<a class="sourceLine" id="cb17-18" data-line-number="18">        <span class="dt">accelerator</span><span class="op">:</span> <span class="st">&#39;Ctrl+Shift+S&#39;</span><span class="op">,</span></a>
<a class="sourceLine" id="cb17-19" data-line-number="19">        <span class="at">click</span>() <span class="op">{</span> <span class="va">files</span>.<span class="at">writeFileAs</span>(app) <span class="op">}</span></a>
<a class="sourceLine" id="cb17-20" data-line-number="20">      <span class="op">}</span></a>
<a class="sourceLine" id="cb17-21" data-line-number="21">    ]</a>
<a class="sourceLine" id="cb17-22" data-line-number="22">  <span class="op">}</span></a>
<a class="sourceLine" id="cb17-23" data-line-number="23">))<span class="op">;</span></a></code></pre></div>
<p>これで目的のモノはできた！</p>
<h2 id="懸念">懸念</h2>
<p>なんか Electron のファイル IO にはセキュリティ的に甘いところがあるらしい…</p>
<ul>
<li><a href="http://utf-8.jp/public/2016/0307/electron.pdf">Electron の倒し方</a></li>
</ul>
<p>個人で使う分にはいいんだけど…対策しなきゃかなぁ… Elm を介してレンダラしたマークダウンを貼り付けてるので問題ないのだろうか… 良く分からない．</p>
<h2 id="思うところ">思うところ</h2>
<p>結局 JS は結構書いてるなーと思った(笑) JS 絶対書きたくないマンは Elm でできることは，まだ制限される印象だ． JS の知識も多少ないとキツソウだし．</p>
<p>まぁ綺麗に分離できるのがうれしいんだけどね．</p>
<h2 id="おしまい">おしまい</h2>
<p>頑張って作っていくぞ．</p>
  </div>
</div>
</article>
]]></summary>
</entry>

</feed>
