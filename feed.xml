<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
    <title>ひげメモ</title>
    <link href="https://matsubara0507.github.io/feed.xml" rel="self" />
    <link href="https://matsubara0507.github.io" />
    <id>https://matsubara0507.github.io/feed.xml</id>
    <author>
        <name>MATSUBARA Nobutada</name>
        <email></email>
    </author>
    <updated>2019-12-06T00:00:00Z</updated>
    <entry>
    <title>Elm で作る TaPL のラムダ計算（その１）</title>
    <link href="https://matsubara0507.github.io/posts/2019-12-06-tapl-with-elm-part1.html" />
    <id>https://matsubara0507.github.io/posts/2019-12-06-tapl-with-elm-part1.html</id>
    <published>2019-12-06T00:00:00Z</published>
    <updated>2019-12-06T00:00:00Z</updated>
    <summary type="html"><![CDATA[<div class="post-content" itemprop="articleBody">
    <p>本記事は「<a href="https://qiita.com/advent-calendar/2019/elm">Elm Advent Calendar 2019</a>」の6日目の記事です．</p>
<h1 id="section"></h1>
<p>表題の通り，TaPL という書籍で紹介されているプログラミング言語の実装例を Elm でやってみたという話です（その１）．</p>
<h2 id="tapl-とプログラミング言語の実装">TaPL とプログラミング言語の実装</h2>
<p>「<a href="https://www.cis.upenn.edu/~bcpierce/tapl/">Type and Programming Language</a>」(翻訳本は「型システム入門 -プログラミング言語と型の理論-」というもの，以下 TaPL)という書籍を知ってますか？ この書籍はプログラミング言語の型システムの理論体系に関するとても有名な書籍だ（学術的なその分野における入門書）． TaPL の多くは数理論理学的な議論や証明で構成されているのだが，いくつかの章では簡易的なプログラミング言語の実装がある:</p>
<ul>
<li>第4章 算術式のML実装 (本記事はココ)
<ul>
<li>自然数と真偽値と if-then-else</li>
<li>変数などもない</li>
</ul></li>
<li>第7章 ラムダ計算のML実装
<ul>
<li>型無しラムダ計算を実装</li>
<li>以降はこれを拡張していく(たしか)</li>
</ul></li>
<li>第10章 単純型のML実装
<ul>
<li>7章のを型付きラムダ計算にする</li>
</ul></li>
<li>第17章 部分型付けのML実装</li>
<li>第25章 System F のML実装
<ul>
<li>最後に型の多相性を追加</li>
</ul></li>
</ul>
<p>本記事では4章の実装を行う．</p>
<h3 id="何で実装するか">何で実装するか</h3>
<p>TaPL では実装にあたり，以下のようなプログラミング言語で行うことをオススメしている:</p>
<ul>
<li>自動メモリ管理 (GC)</li>
<li>代数的データ型 (を容易に記述できる)</li>
<li>パターンマッチ</li>
</ul>
<p>ML系や Haskell，Scala であれば上記の条件にマッチするだろう． タイトルの通り私は Elm でやってみることにした(きっと事例が少ない)．</p>
<p>なお実装は全て下記のリポジトリにあげている:</p>
<ul>
<li><a href="https://github.com/matsubara0507/ELaMbda">matsubara0507/ELaMbda - GitHub</a></li>
</ul>
<p>Elm は Web フロントに特化した DSL だ． ということで，最終的にはパーサーも実装し，<a href="https://matsubara0507.github.io/ELaMbda/?chap=chap4">Web ブラウザから遊べるようにした</a>．</p>
<p><a href="https://matsubara0507.github.io/ELaMbda/?chap=chap4&amp;exp=if%20if%20true%20then%20false%20else%20true%20then%200%20else%20if%20false%20then%202%20else%203"><img src="/assets/tapl-with-elm/chap4.jpg"></img></a></p>
<h2 id="第4章-算術式のml実装">第4章 算術式のML実装</h2>
<p>4章で実装する言語の数理論理学的な議論は3章でやり，4章ではそれを ML で実装している． 以降の章では結構実装が省かれてたりするのだが，4章のは全部書いてあるので ML をお手元の言語に翻訳していくだけど簡単な作業です．</p>
<h3 id="構文規則">構文規則</h3>
<p>プログラミング言語の基本的な構成要素は「構文」と「評価」だ(たぶん)． まずは構文から:</p>
<div class="sourceCode" id="cb1"><pre class="sourceCode txt"><code class="sourceCode default"><span id="cb1-1"><a href="#cb1-1"></a>// 値</span>
<span id="cb1-2"><a href="#cb1-2"></a>v := true</span>
<span id="cb1-3"><a href="#cb1-3"></a>   | false</span>
<span id="cb1-4"><a href="#cb1-4"></a>   | nv</span>
<span id="cb1-5"><a href="#cb1-5"></a></span>
<span id="cb1-6"><a href="#cb1-6"></a>// 自然数</span>
<span id="cb1-7"><a href="#cb1-7"></a>nv := 0 | succ nv</span>
<span id="cb1-8"><a href="#cb1-8"></a></span>
<span id="cb1-9"><a href="#cb1-9"></a>// 項</span>
<span id="cb1-10"><a href="#cb1-10"></a>t := v</span>
<span id="cb1-11"><a href="#cb1-11"></a>   | if t then t else t</span>
<span id="cb1-12"><a href="#cb1-12"></a>   | succ t</span>
<span id="cb1-13"><a href="#cb1-13"></a>   | pred t</span>
<span id="cb1-14"><a href="#cb1-14"></a>   | iszero t</span></code></pre></div>
<p>自然数と真偽値だけの極めてシンプルなものだ． 項は型で表現し，値や自然数かどうかの判定はそう言う関数を用意する:</p>
<div class="sourceCode" id="cb2"><pre class="sourceCode elm"><code class="sourceCode elm"><span id="cb2-1"><a href="#cb2-1"></a><span class="co">-- 構文</span></span>
<span id="cb2-2"><a href="#cb2-2"></a><span class="kw">type</span> <span class="dt">Term</span></span>
<span id="cb2-3"><a href="#cb2-3"></a>    <span class="op">=</span> <span class="dt">TmTrue</span></span>
<span id="cb2-4"><a href="#cb2-4"></a>    <span class="op">|</span> <span class="dt">TmFalse</span></span>
<span id="cb2-5"><a href="#cb2-5"></a>    <span class="op">|</span> <span class="dt">TmIf</span> <span class="dt">Term</span> <span class="dt">Term</span> <span class="dt">Term</span></span>
<span id="cb2-6"><a href="#cb2-6"></a>    <span class="op">|</span> <span class="dt">TmZero</span></span>
<span id="cb2-7"><a href="#cb2-7"></a>    <span class="op">|</span> <span class="dt">TmSucc</span> <span class="dt">Term</span></span>
<span id="cb2-8"><a href="#cb2-8"></a>    <span class="op">|</span> <span class="dt">TmPred</span> <span class="dt">Term</span></span>
<span id="cb2-9"><a href="#cb2-9"></a>    <span class="op">|</span> <span class="dt">TmIsZero</span> <span class="dt">Term</span></span>
<span id="cb2-10"><a href="#cb2-10"></a></span>
<span id="cb2-11"><a href="#cb2-11"></a><span class="co">-- 値かどうか</span></span>
<span id="cb2-12"><a href="#cb2-12"></a><span class="fu">isval</span> : <span class="dt">Term</span> <span class="op">-&gt;</span> <span class="dt">Bool</span></span>
<span id="cb2-13"><a href="#cb2-13"></a><span class="fu">isval</span> <span class="fu">t</span> <span class="op">=</span></span>
<span id="cb2-14"><a href="#cb2-14"></a>    <span class="cf">case</span> <span class="fu">t</span> <span class="cf">of</span></span>
<span id="cb2-15"><a href="#cb2-15"></a>        <span class="dt">TmTrue</span> <span class="op">-&gt;</span></span>
<span id="cb2-16"><a href="#cb2-16"></a>            <span class="dt">True</span></span>
<span id="cb2-17"><a href="#cb2-17"></a></span>
<span id="cb2-18"><a href="#cb2-18"></a>        <span class="dt">TmFalse</span> <span class="op">-&gt;</span></span>
<span id="cb2-19"><a href="#cb2-19"></a>            <span class="dt">True</span></span>
<span id="cb2-20"><a href="#cb2-20"></a></span>
<span id="cb2-21"><a href="#cb2-21"></a>        <span class="fu">_</span> <span class="op">-&gt;</span></span>
<span id="cb2-22"><a href="#cb2-22"></a>            <span class="fu">isnumericval</span> <span class="fu">t</span></span>
<span id="cb2-23"><a href="#cb2-23"></a></span>
<span id="cb2-24"><a href="#cb2-24"></a><span class="co">-- 数値かどうか</span></span>
<span id="cb2-25"><a href="#cb2-25"></a><span class="fu">isnumericval</span> : <span class="dt">Term</span> <span class="op">-&gt;</span> <span class="dt">Bool</span></span>
<span id="cb2-26"><a href="#cb2-26"></a><span class="fu">isnumericval</span> <span class="fu">t</span> <span class="op">=</span></span>
<span id="cb2-27"><a href="#cb2-27"></a>    <span class="cf">case</span> <span class="fu">t</span> <span class="cf">of</span></span>
<span id="cb2-28"><a href="#cb2-28"></a>        <span class="dt">TmZero</span> <span class="op">-&gt;</span></span>
<span id="cb2-29"><a href="#cb2-29"></a>            <span class="dt">True</span></span>
<span id="cb2-30"><a href="#cb2-30"></a></span>
<span id="cb2-31"><a href="#cb2-31"></a>        <span class="dt">TmSucc</span> <span class="fu">t1</span> <span class="op">-&gt;</span></span>
<span id="cb2-32"><a href="#cb2-32"></a>            <span class="fu">isnumericval</span> <span class="fu">t1</span></span>
<span id="cb2-33"><a href="#cb2-33"></a></span>
<span id="cb2-34"><a href="#cb2-34"></a>        <span class="fu">_</span> <span class="op">-&gt;</span></span>
<span id="cb2-35"><a href="#cb2-35"></a>            <span class="dt">False</span></span></code></pre></div>
<p>TaPL では項に <code>Info</code> と言う型を持たせて，もともと何行何列目だったかのような情報を持たせているが，今回はそこまでリッチにする予定はないし煩わしいので省いた．</p>
<h3 id="評価規則">評価規則</h3>
<p>構文が定義できたので，次は評価規則を定義し実装する． 評価規則とは，プログラムコード(項)の実行の仕方そのもので，今回は次のように定義する:</p>
<div class="sourceCode" id="cb3"><pre class="sourceCode txt"><code class="sourceCode default"><span id="cb3-1"><a href="#cb3-1"></a>// if-then-else の評価規則(3つ)</span>
<span id="cb3-2"><a href="#cb3-2"></a></span>
<span id="cb3-3"><a href="#cb3-3"></a> if true then t2 else t3 =&gt; t2</span>
<span id="cb3-4"><a href="#cb3-4"></a></span>
<span id="cb3-5"><a href="#cb3-5"></a> if false then t2 else t3 =&gt; t3</span>
<span id="cb3-6"><a href="#cb3-6"></a></span>
<span id="cb3-7"><a href="#cb3-7"></a> t1 -&gt; t1&#39;</span>
<span id="cb3-8"><a href="#cb3-8"></a>-------------------------------------------------</span>
<span id="cb3-9"><a href="#cb3-9"></a> if t1 then t2 else t3 =&gt; if t1&#39; then t2 else t3</span>
<span id="cb3-10"><a href="#cb3-10"></a></span>
<span id="cb3-11"><a href="#cb3-11"></a>// 自然数の評価規則</span>
<span id="cb3-12"><a href="#cb3-12"></a> t1 -&gt; t1&#39;</span>
<span id="cb3-13"><a href="#cb3-13"></a>---------------------</span>
<span id="cb3-14"><a href="#cb3-14"></a> succ t1 =&gt; succ t1&#39;</span>
<span id="cb3-15"><a href="#cb3-15"></a></span>
<span id="cb3-16"><a href="#cb3-16"></a> pred 0 =&gt; 0</span>
<span id="cb3-17"><a href="#cb3-17"></a></span>
<span id="cb3-18"><a href="#cb3-18"></a> pred (succ nv1) =&gt; nv1</span>
<span id="cb3-19"><a href="#cb3-19"></a></span>
<span id="cb3-20"><a href="#cb3-20"></a> t1 -&gt; t1&#39;</span>
<span id="cb3-21"><a href="#cb3-21"></a>---------------------</span>
<span id="cb3-22"><a href="#cb3-22"></a> pred t1 =&gt; pred t1&#39;</span>
<span id="cb3-23"><a href="#cb3-23"></a></span>
<span id="cb3-24"><a href="#cb3-24"></a> iszero 0 =&gt; true</span>
<span id="cb3-25"><a href="#cb3-25"></a></span>
<span id="cb3-26"><a href="#cb3-26"></a> iszero (succ nv1) =&gt; false</span>
<span id="cb3-27"><a href="#cb3-27"></a></span>
<span id="cb3-28"><a href="#cb3-28"></a> t1 -&gt; t1&#39;</span>
<span id="cb3-29"><a href="#cb3-29"></a>-------------------------</span>
<span id="cb3-30"><a href="#cb3-30"></a> iszero t1 =&gt; iszero t1&#39;</span></code></pre></div>
<p>分数のような記述は上が成り立つならば下も成り立つと言うニュアンス(雑)． 次の <code>eval1</code> というのが評価規則を実装したものだ:</p>
<div class="sourceCode" id="cb4"><pre class="sourceCode elm"><code class="sourceCode elm"><span id="cb4-1"><a href="#cb4-1"></a><span class="co">-- 値になるまで評価する (これは TaPL にはない)</span></span>
<span id="cb4-2"><a href="#cb4-2"></a><span class="fu">eval</span> : <span class="dt">Term</span> <span class="op">-&gt;</span> <span class="dt">Maybe</span> <span class="dt">Term</span></span>
<span id="cb4-3"><a href="#cb4-3"></a><span class="fu">eval</span> <span class="fu">t</span> <span class="op">=</span></span>
<span id="cb4-4"><a href="#cb4-4"></a>    <span class="cf">if</span> <span class="fu">isval</span> <span class="fu">t</span> <span class="cf">then</span></span>
<span id="cb4-5"><a href="#cb4-5"></a>        <span class="dt">Just</span> <span class="fu">t</span></span>
<span id="cb4-6"><a href="#cb4-6"></a>    <span class="cf">else</span></span>
<span id="cb4-7"><a href="#cb4-7"></a>        <span class="dt">Maybe</span><span class="op">.</span><span class="fu">andThen</span> <span class="fu">eval</span> (<span class="fu">eval1</span> <span class="fu">t</span>)</span>
<span id="cb4-8"><a href="#cb4-8"></a></span>
<span id="cb4-9"><a href="#cb4-9"></a><span class="co">-- 評価規則を関数にする</span></span>
<span id="cb4-10"><a href="#cb4-10"></a><span class="fu">eval1</span> : <span class="dt">Term</span> <span class="op">-&gt;</span> <span class="dt">Maybe</span> <span class="dt">Term</span></span>
<span id="cb4-11"><a href="#cb4-11"></a><span class="fu">eval1</span> <span class="fu">t</span> <span class="op">=</span></span>
<span id="cb4-12"><a href="#cb4-12"></a>    <span class="cf">case</span> <span class="fu">t</span> <span class="cf">of</span></span>
<span id="cb4-13"><a href="#cb4-13"></a>        <span class="dt">TmIf</span> <span class="dt">TmTrue</span> <span class="fu">t2</span> <span class="fu">_</span> <span class="op">-&gt;</span></span>
<span id="cb4-14"><a href="#cb4-14"></a>            <span class="dt">Just</span> <span class="fu">t2</span></span>
<span id="cb4-15"><a href="#cb4-15"></a></span>
<span id="cb4-16"><a href="#cb4-16"></a>        <span class="dt">TmIf</span> <span class="dt">TmFalse</span> <span class="fu">_</span> <span class="fu">t3</span> <span class="op">-&gt;</span></span>
<span id="cb4-17"><a href="#cb4-17"></a>            <span class="dt">Just</span> <span class="fu">t3</span></span>
<span id="cb4-18"><a href="#cb4-18"></a></span>
<span id="cb4-19"><a href="#cb4-19"></a>        <span class="dt">TmIf</span> <span class="fu">t1</span> <span class="fu">t2</span> <span class="fu">t3</span> <span class="op">-&gt;</span></span>
<span id="cb4-20"><a href="#cb4-20"></a>            <span class="fu">eval1</span> <span class="fu">t1</span> <span class="op">|&gt;</span> <span class="dt">Maybe</span><span class="op">.</span><span class="fu">map</span> (\<span class="fu">t1_</span> <span class="op">-&gt;</span> <span class="dt">TmIf</span> <span class="fu">t1_</span> <span class="fu">t2</span> <span class="fu">t3</span>)</span>
<span id="cb4-21"><a href="#cb4-21"></a></span>
<span id="cb4-22"><a href="#cb4-22"></a>        <span class="dt">TmSucc</span> <span class="fu">t1</span> <span class="op">-&gt;</span></span>
<span id="cb4-23"><a href="#cb4-23"></a>            <span class="fu">eval1</span> <span class="fu">t1</span> <span class="op">|&gt;</span> <span class="dt">Maybe</span><span class="op">.</span><span class="fu">map</span> <span class="dt">TmSucc</span></span>
<span id="cb4-24"><a href="#cb4-24"></a></span>
<span id="cb4-25"><a href="#cb4-25"></a>        <span class="dt">TmPred</span> <span class="dt">TmZero</span> <span class="op">-&gt;</span></span>
<span id="cb4-26"><a href="#cb4-26"></a>            <span class="dt">Just</span> <span class="dt">TmZero</span></span>
<span id="cb4-27"><a href="#cb4-27"></a></span>
<span id="cb4-28"><a href="#cb4-28"></a>        <span class="dt">TmPred</span> (<span class="dt">TmSucc</span> <span class="fu">nv1</span>) <span class="op">-&gt;</span></span>
<span id="cb4-29"><a href="#cb4-29"></a>            <span class="cf">if</span> <span class="fu">isnumericval</span> <span class="fu">nv1</span> <span class="cf">then</span></span>
<span id="cb4-30"><a href="#cb4-30"></a>                <span class="dt">Just</span> <span class="fu">nv1</span></span>
<span id="cb4-31"><a href="#cb4-31"></a>            <span class="cf">else</span></span>
<span id="cb4-32"><a href="#cb4-32"></a>                <span class="fu">eval1</span> (<span class="dt">TmSucc</span> <span class="fu">nv1</span>) <span class="op">|&gt;</span> <span class="dt">Maybe</span><span class="op">.</span><span class="fu">map</span> <span class="dt">TmPred</span></span>
<span id="cb4-33"><a href="#cb4-33"></a></span>
<span id="cb4-34"><a href="#cb4-34"></a>        <span class="dt">TmPred</span> <span class="fu">t1</span> <span class="op">-&gt;</span></span>
<span id="cb4-35"><a href="#cb4-35"></a>            <span class="fu">eval1</span> <span class="fu">t1</span> <span class="op">|&gt;</span> <span class="dt">Maybe</span><span class="op">.</span><span class="fu">map</span> <span class="dt">TmPred</span></span>
<span id="cb4-36"><a href="#cb4-36"></a></span>
<span id="cb4-37"><a href="#cb4-37"></a>        <span class="dt">TmIsZero</span> <span class="dt">TmZero</span> <span class="op">-&gt;</span></span>
<span id="cb4-38"><a href="#cb4-38"></a>            <span class="dt">Just</span> <span class="dt">TmTrue</span></span>
<span id="cb4-39"><a href="#cb4-39"></a></span>
<span id="cb4-40"><a href="#cb4-40"></a>        <span class="dt">TmIsZero</span> (<span class="dt">TmSucc</span> <span class="fu">nv1</span>) <span class="op">-&gt;</span></span>
<span id="cb4-41"><a href="#cb4-41"></a>            <span class="cf">if</span> <span class="fu">isnumericval</span> <span class="fu">nv1</span> <span class="cf">then</span></span>
<span id="cb4-42"><a href="#cb4-42"></a>                <span class="dt">Just</span> <span class="dt">TmFalse</span></span>
<span id="cb4-43"><a href="#cb4-43"></a>            <span class="cf">else</span></span>
<span id="cb4-44"><a href="#cb4-44"></a>                <span class="fu">eval1</span> (<span class="dt">TmSucc</span> <span class="fu">nv1</span>) <span class="op">|&gt;</span> <span class="dt">Maybe</span><span class="op">.</span><span class="fu">map</span> <span class="dt">TmIsZero</span></span>
<span id="cb4-45"><a href="#cb4-45"></a></span>
<span id="cb4-46"><a href="#cb4-46"></a>        <span class="dt">TmIsZero</span> <span class="fu">t1</span> <span class="op">-&gt;</span></span>
<span id="cb4-47"><a href="#cb4-47"></a>            <span class="fu">eval1</span> <span class="fu">t1</span> <span class="op">|&gt;</span> <span class="dt">Maybe</span><span class="op">.</span><span class="fu">map</span> <span class="dt">TmIsZero</span></span>
<span id="cb4-48"><a href="#cb4-48"></a></span>
<span id="cb4-49"><a href="#cb4-49"></a>        <span class="fu">_</span> <span class="op">-&gt;</span></span>
<span id="cb4-50"><a href="#cb4-50"></a>            <span class="dt">Nothing</span></span></code></pre></div>
<p>TaPL と違い，僕は返り値にいわゆる Optional 型を利用している(TaPL では例外を投げてる)． あと，TaPL で利用している ML やパターンマッチのある多くの言語ではパターンマッチの中に条件式を記述できるが Elm にはない:</p>
<div class="sourceCode" id="cb5"><pre class="sourceCode elm"><code class="sourceCode elm"><span id="cb5-1"><a href="#cb5-1"></a><span class="co">-- こういうのが書きたい</span></span>
<span id="cb5-2"><a href="#cb5-2"></a><span class="fu">eval1</span> <span class="fu">t</span> <span class="op">=</span></span>
<span id="cb5-3"><a href="#cb5-3"></a>    <span class="cf">case</span> <span class="fu">t</span> <span class="cf">of</span></span>
<span id="cb5-4"><a href="#cb5-4"></a>        <span class="op">...</span></span>
<span id="cb5-5"><a href="#cb5-5"></a></span>
<span id="cb5-6"><a href="#cb5-6"></a>        <span class="dt">TmPred</span> (<span class="dt">TmSucc</span> <span class="fu">nv1</span>) <span class="cf">if</span> <span class="fu">isnumericval</span> <span class="fu">nv1</span> <span class="op">-&gt;</span></span>
<span id="cb5-7"><a href="#cb5-7"></a>            <span class="dt">Just</span> <span class="fu">nv1</span></span>
<span id="cb5-8"><a href="#cb5-8"></a></span>
<span id="cb5-9"><a href="#cb5-9"></a>        <span class="dt">TmPred</span> <span class="fu">t1</span> <span class="op">-&gt;</span></span>
<span id="cb5-10"><a href="#cb5-10"></a>            <span class="fu">eval1</span> <span class="fu">t1</span> <span class="op">|&gt;</span> <span class="dt">Maybe</span><span class="op">.</span><span class="fu">map</span> <span class="dt">TmPred</span></span>
<span id="cb5-11"><a href="#cb5-11"></a></span>
<span id="cb5-12"><a href="#cb5-12"></a>        <span class="op">...</span></span></code></pre></div>
<p>これが出来ないため分岐が多くなって冗長になってしまう．辛い． そのうち実装されると良いなぁ．</p>
<h1 id="section-1"></h1>
<p>実はこれで完成． Elm には REPL があるので試しに動かしてみる:</p>
<div class="sourceCode" id="cb6"><pre class="sourceCode elm"><code class="sourceCode elm"><span id="cb6-1"><a href="#cb6-1"></a><span class="op">$</span> <span class="fu">elm</span> <span class="fu">repl</span></span>
<span id="cb6-2"><a href="#cb6-2"></a><span class="co">---- Elm 0.19.1 ----------------------------------------------------------------</span></span>
<span id="cb6-3"><a href="#cb6-3"></a><span class="dt">Say</span> :<span class="fu">help</span> <span class="fu">for</span> <span class="fu">help</span> <span class="fu">and</span> :<span class="fu">exit</span> <span class="fu">to</span> <span class="fu">exit</span><span class="op">!</span> <span class="dt">More</span> <span class="fu">at</span> <span class="op">&lt;</span><span class="fu">https</span>:<span class="op">//</span><span class="fu">elm</span><span class="op">-</span><span class="fu">lang</span><span class="op">.</span><span class="fu">org</span><span class="op">/</span><span class="dv">0</span><span class="op">.</span><span class="dv">19</span><span class="op">.</span><span class="dv">1</span><span class="op">/</span><span class="fu">repl</span><span class="op">&gt;</span></span>
<span id="cb6-4"><a href="#cb6-4"></a><span class="co">--------------------------------------------------------------------------------</span></span>
<span id="cb6-5"><a href="#cb6-5"></a><span class="op">&gt;</span> <span class="kw">import</span> <span class="dt">TaPL</span><span class="op">.</span><span class="dt">Chap4</span> <span class="kw">as</span> <span class="dt">Chap4</span> <span class="kw">exposing</span> (<span class="dt">Term</span> (<span class="op">..</span>))</span>
<span id="cb6-6"><a href="#cb6-6"></a><span class="op">&gt;</span> <span class="dt">Chap4</span><span class="op">.</span><span class="fu">eval</span> (<span class="dt">TmIf</span> (<span class="dt">TmIsZero</span> (<span class="dt">TmPred</span> (<span class="dt">TmSucc</span> <span class="dt">TmZero</span>))) <span class="dt">TmZero</span> (<span class="dt">TmSucc</span> <span class="dt">TmZero</span>))</span>
<span id="cb6-7"><a href="#cb6-7"></a><span class="dt">Just</span> <span class="dt">TmZero</span> : <span class="dt">Maybe</span> <span class="dt">Term</span></span></code></pre></div>
<p>良さそう．</p>
<h3 id="パーサーを実装する">パーサーを実装する</h3>
<p>ここからは TaPL にはない話． 毎回 <code>Term</code> を手書きするのは大変なのでパーサーを実装しちゃおう．</p>
<p>Elm には <a href="https://package.elm-lang.org/packages/elm/parser">elm/parser</a> という(なぜか)公式が提供しているパーサーコンビネーターライブラリがある． もちろんこれを使う． パーサーコンビネーターの極意はトップダウンに考えること(ほんまか？)． まずは頭のインターフェースから:</p>
<div class="sourceCode" id="cb7"><pre class="sourceCode elm"><code class="sourceCode elm"><span id="cb7-1"><a href="#cb7-1"></a><span class="kw">module</span> <span class="dt">TaPL</span><span class="op">.</span><span class="dt">Chap4</span><span class="op">.</span><span class="dt">Parser</span> <span class="kw">exposing</span> (<span class="op">..</span>)</span>
<span id="cb7-2"><a href="#cb7-2"></a></span>
<span id="cb7-3"><a href="#cb7-3"></a><span class="kw">import</span> <span class="dt">Parser</span> <span class="kw">exposing</span> ((<span class="op">|.</span>)<span class="op">,</span> (<span class="op">|=</span>)<span class="op">,</span> <span class="dt">Parser</span>)</span>
<span id="cb7-4"><a href="#cb7-4"></a><span class="kw">import</span> <span class="dt">TaPL</span><span class="op">.</span><span class="dt">Chap4</span> <span class="kw">as</span> <span class="dt">Chap4</span> <span class="kw">exposing</span> (<span class="dt">Term</span>(<span class="op">..</span>))</span>
<span id="cb7-5"><a href="#cb7-5"></a></span>
<span id="cb7-6"><a href="#cb7-6"></a><span class="fu">parse</span> : <span class="dt">String</span> <span class="op">-&gt;</span> <span class="dt">Result</span> (<span class="dt">List</span> <span class="dt">Parser</span><span class="op">.</span><span class="dt">DeadEnd</span>) <span class="dt">Term</span></span>
<span id="cb7-7"><a href="#cb7-7"></a><span class="fu">parse</span> <span class="op">=</span></span>
<span id="cb7-8"><a href="#cb7-8"></a>    <span class="fu">termParser</span> <span class="op">|.</span> <span class="dt">Parser</span><span class="op">.</span><span class="fu">end</span></span>
<span id="cb7-9"><a href="#cb7-9"></a></span>
<span id="cb7-10"><a href="#cb7-10"></a></span>
<span id="cb7-11"><a href="#cb7-11"></a><span class="fu">termParser</span> : <span class="dt">Parser</span> <span class="dt">Term</span></span>
<span id="cb7-12"><a href="#cb7-12"></a><span class="fu">termParser</span> <span class="op">=</span> <span class="op">...</span></span></code></pre></div>
<p><code>Parser Term</code> という型は「パースした結果が <code>Term</code> 型になる」と言う意味(型なんてこう言うふわっとした理解で十分)． <code>parser</code> の <code>|. Parser.end</code> というのは，パースしきった文字列が空文字に達したという関数(達してないとエラーになる)．</p>
<p>で，<code>termParser</code> が項自体のパーサー． elm/parser には <code>oneOf</code> という便利パーサーコンビネーターがあるのでこれを使う:</p>
<div class="sourceCode" id="cb8"><pre class="sourceCode elm"><code class="sourceCode elm"><span id="cb8-1"><a href="#cb8-1"></a><span class="co">-- 与えたパーサーのリストで最初に成功したものをパース結果にする</span></span>
<span id="cb8-2"><a href="#cb8-2"></a><span class="fu">oneOf</span> : <span class="dt">List</span> (<span class="dt">Parser</span> <span class="fu">a</span>) <span class="op">-&gt;</span> <span class="dt">Parser</span> <span class="fu">a</span></span></code></pre></div>
<p>ここで重要なのは一つ一つ実装することができる点だ． まずは簡単な値から:</p>
<div class="sourceCode" id="cb9"><pre class="sourceCode elm"><code class="sourceCode elm"><span id="cb9-1"><a href="#cb9-1"></a><span class="fu">termParser</span> : <span class="dt">Parser</span> <span class="dt">Term</span></span>
<span id="cb9-2"><a href="#cb9-2"></a><span class="fu">termParser</span> <span class="op">=</span></span>
<span id="cb9-3"><a href="#cb9-3"></a>    <span class="dt">Parser</span><span class="op">.</span><span class="fu">oneOf</span></span>
<span id="cb9-4"><a href="#cb9-4"></a>      [ <span class="fu">valParser</span></span>
<span id="cb9-5"><a href="#cb9-5"></a>      ]</span>
<span id="cb9-6"><a href="#cb9-6"></a></span>
<span id="cb9-7"><a href="#cb9-7"></a><span class="fu">valParser</span> : <span class="dt">Parser</span> <span class="dt">Term</span></span>
<span id="cb9-8"><a href="#cb9-8"></a><span class="fu">valParser</span> <span class="op">=</span></span>
<span id="cb9-9"><a href="#cb9-9"></a>    <span class="dt">Parser</span><span class="op">.</span><span class="fu">oneOf</span></span>
<span id="cb9-10"><a href="#cb9-10"></a>        [ <span class="fu">value</span> <span class="st">&quot;true&quot;</span> <span class="dt">TmTrue</span></span>
<span id="cb9-11"><a href="#cb9-11"></a>        <span class="op">,</span> <span class="fu">value</span> <span class="st">&quot;false&quot;</span> <span class="dt">TmFalse</span></span>
<span id="cb9-12"><a href="#cb9-12"></a>        <span class="op">,</span> <span class="dt">Parser</span><span class="op">.</span><span class="fu">int</span> <span class="op">|&gt;</span> <span class="dt">Parser</span><span class="op">.</span><span class="fu">map</span> <span class="fu">fromInt</span></span>
<span id="cb9-13"><a href="#cb9-13"></a>        ]</span>
<span id="cb9-14"><a href="#cb9-14"></a></span>
<span id="cb9-15"><a href="#cb9-15"></a><span class="fu">value</span> : <span class="dt">String</span> <span class="op">-&gt;</span> <span class="dt">Term</span> <span class="op">-&gt;</span> <span class="dt">Parser</span> <span class="dt">Term</span></span>
<span id="cb9-16"><a href="#cb9-16"></a><span class="fu">value</span> <span class="fu">kw</span> <span class="fu">t</span> <span class="op">=</span></span>
<span id="cb9-17"><a href="#cb9-17"></a>    <span class="dt">Parser</span><span class="op">.</span><span class="fu">map</span> (<span class="fu">always</span> <span class="fu">t</span>) (<span class="dt">Parser</span><span class="op">.</span><span class="fu">keyword</span> <span class="fu">kw</span>)</span>
<span id="cb9-18"><a href="#cb9-18"></a></span>
<span id="cb9-19"><a href="#cb9-19"></a><span class="fu">fromInt</span> : <span class="dt">Int</span> <span class="op">-&gt;</span> <span class="dt">Term</span></span>
<span id="cb9-20"><a href="#cb9-20"></a><span class="fu">fromInt</span> <span class="fu">n</span> <span class="op">=</span></span>
<span id="cb9-21"><a href="#cb9-21"></a>    <span class="cf">if</span> <span class="fu">n</span> <span class="op">&gt;</span> <span class="dv">0</span> <span class="cf">then</span></span>
<span id="cb9-22"><a href="#cb9-22"></a>        <span class="dt">TmSucc</span> (<span class="fu">fromInt</span> (<span class="fu">n</span> <span class="op">-</span> <span class="dv">1</span>))</span>
<span id="cb9-23"><a href="#cb9-23"></a>    <span class="cf">else</span></span>
<span id="cb9-24"><a href="#cb9-24"></a>        <span class="dt">TmZero</span></span></code></pre></div>
<p>REPL で確認:</p>
<div class="sourceCode" id="cb10"><pre class="sourceCode elm"><code class="sourceCode elm"><span id="cb10-1"><a href="#cb10-1"></a><span class="op">&gt;</span> <span class="kw">import</span> <span class="dt">TaPL</span><span class="op">.</span><span class="dt">Chap4</span><span class="op">.</span><span class="dt">Parser</span> <span class="kw">as</span> <span class="dt">Parser</span></span>
<span id="cb10-2"><a href="#cb10-2"></a><span class="op">&gt;</span> <span class="dt">Parser</span><span class="op">.</span><span class="fu">parse</span> <span class="st">&quot;true&quot;</span></span>
<span id="cb10-3"><a href="#cb10-3"></a><span class="dt">Ok</span> <span class="dt">TmTrue</span> : <span class="dt">Result</span> (<span class="dt">List</span> <span class="dt">Parser</span><span class="op">.</span><span class="dt">DeadEnd</span>) <span class="dt">Term</span></span>
<span id="cb10-4"><a href="#cb10-4"></a><span class="op">&gt;</span> <span class="dt">Parser</span><span class="op">.</span><span class="fu">parse</span> <span class="st">&quot;false&quot;</span></span>
<span id="cb10-5"><a href="#cb10-5"></a><span class="dt">Ok</span> <span class="dt">TmFalse</span> : <span class="dt">Result</span> (<span class="dt">List</span> <span class="dt">Parser</span><span class="op">.</span><span class="dt">DeadEnd</span>) <span class="dt">Term</span></span>
<span id="cb10-6"><a href="#cb10-6"></a><span class="op">&gt;</span> <span class="dt">Parser</span><span class="op">.</span><span class="fu">parse</span> <span class="st">&quot;10&quot;</span></span>
<span id="cb10-7"><a href="#cb10-7"></a><span class="dt">Ok</span> (<span class="dt">TmSucc</span> (<span class="dt">TmSucc</span> (<span class="dt">TmSucc</span> (<span class="dt">TmSucc</span> (<span class="dt">TmSucc</span> (<span class="dt">TmSucc</span> (<span class="dt">TmSucc</span> (<span class="dt">TmSucc</span> (<span class="dt">TmSucc</span> (<span class="dt">TmSucc</span> <span class="dt">TmZero</span>))))))))))</span>
<span id="cb10-8"><a href="#cb10-8"></a>    : <span class="dt">Result</span> (<span class="dt">List</span> <span class="dt">Parser</span><span class="op">.</span><span class="dt">DeadEnd</span>) <span class="dt">Term</span></span></code></pre></div>
<p>良さそう． 次は if-then-else を書いてみる:</p>
<div class="sourceCode" id="cb11"><pre class="sourceCode elm"><code class="sourceCode elm"><span id="cb11-1"><a href="#cb11-1"></a><span class="fu">termParser</span> : <span class="dt">Parser</span> <span class="dt">Term</span></span>
<span id="cb11-2"><a href="#cb11-2"></a><span class="fu">termParser</span> <span class="op">=</span></span>
<span id="cb11-3"><a href="#cb11-3"></a>    <span class="dt">Parser</span><span class="op">.</span><span class="fu">oneOf</span></span>
<span id="cb11-4"><a href="#cb11-4"></a>      [ <span class="fu">valParser</span></span>
<span id="cb11-5"><a href="#cb11-5"></a>      <span class="op">,</span> <span class="fu">ifParser</span></span>
<span id="cb11-6"><a href="#cb11-6"></a>      ]</span>
<span id="cb11-7"><a href="#cb11-7"></a></span>
<span id="cb11-8"><a href="#cb11-8"></a><span class="fu">ifParser</span> : <span class="dt">Parser</span> <span class="dt">Term</span></span>
<span id="cb11-9"><a href="#cb11-9"></a><span class="fu">ifParser</span> <span class="op">=</span></span>
<span id="cb11-10"><a href="#cb11-10"></a>    <span class="dt">Parser</span><span class="op">.</span><span class="fu">succeed</span> <span class="dt">TmIf</span></span>
<span id="cb11-11"><a href="#cb11-11"></a>        <span class="op">|.</span> <span class="dt">Parser</span><span class="op">.</span><span class="fu">keyword</span> <span class="st">&quot;if&quot;</span></span>
<span id="cb11-12"><a href="#cb11-12"></a>        <span class="op">|.</span> <span class="dt">Parser</span><span class="op">.</span><span class="fu">spaces</span></span>
<span id="cb11-13"><a href="#cb11-13"></a>        <span class="op">|=</span> <span class="dt">Parser</span><span class="op">.</span><span class="fu">lazy</span> (\<span class="fu">_</span> <span class="op">-&gt;</span> <span class="fu">termParser</span>)</span>
<span id="cb11-14"><a href="#cb11-14"></a>        <span class="op">|.</span> <span class="dt">Parser</span><span class="op">.</span><span class="fu">spaces</span></span>
<span id="cb11-15"><a href="#cb11-15"></a>        <span class="op">|.</span> <span class="dt">Parser</span><span class="op">.</span><span class="fu">keyword</span> <span class="st">&quot;then&quot;</span></span>
<span id="cb11-16"><a href="#cb11-16"></a>        <span class="op">|.</span> <span class="dt">Parser</span><span class="op">.</span><span class="fu">spaces</span></span>
<span id="cb11-17"><a href="#cb11-17"></a>        <span class="op">|=</span> <span class="dt">Parser</span><span class="op">.</span><span class="fu">lazy</span> (\<span class="fu">_</span> <span class="op">-&gt;</span> <span class="fu">termParser</span>)</span>
<span id="cb11-18"><a href="#cb11-18"></a>        <span class="op">|.</span> <span class="dt">Parser</span><span class="op">.</span><span class="fu">spaces</span></span>
<span id="cb11-19"><a href="#cb11-19"></a>        <span class="op">|.</span> <span class="dt">Parser</span><span class="op">.</span><span class="fu">keyword</span> <span class="st">&quot;else&quot;</span></span>
<span id="cb11-20"><a href="#cb11-20"></a>        <span class="op">|.</span> <span class="dt">Parser</span><span class="op">.</span><span class="fu">spaces</span></span>
<span id="cb11-21"><a href="#cb11-21"></a>        <span class="op">|=</span> <span class="dt">Parser</span><span class="op">.</span><span class="fu">lazy</span> (\<span class="fu">_</span> <span class="op">-&gt;</span> <span class="fu">termParser</span>)</span></code></pre></div>
<p>Elm は普通に正格評価なので <code>Parser.lazy</code> などで遅延させてあげないと先に <code>termParser</code> を実行してしまう． REPL で確認:</p>
<div class="sourceCode" id="cb12"><pre class="sourceCode elm"><code class="sourceCode elm"><span id="cb12-1"><a href="#cb12-1"></a><span class="op">&gt;</span> <span class="dt">Parser</span><span class="op">.</span><span class="fu">parse</span> <span class="st">&quot;if true then 1 else 0&quot;</span></span>
<span id="cb12-2"><a href="#cb12-2"></a><span class="dt">Ok</span> (<span class="dt">TmIf</span> <span class="dt">TmTrue</span> (<span class="dt">TmSucc</span> <span class="dt">TmZero</span>) <span class="dt">TmZero</span>)</span>
<span id="cb12-3"><a href="#cb12-3"></a>    : <span class="dt">Result</span> (<span class="dt">List</span> <span class="dt">Parser</span><span class="op">.</span><span class="dt">DeadEnd</span>) <span class="dt">Term</span></span>
<span id="cb12-4"><a href="#cb12-4"></a><span class="co">-- どう見ても評価できないけどパースはできる</span></span>
<span id="cb12-5"><a href="#cb12-5"></a><span class="op">&gt;</span> <span class="dt">Parser</span><span class="op">.</span><span class="fu">parse</span> <span class="st">&quot;if 1 then true else false&quot;</span></span>
<span id="cb12-6"><a href="#cb12-6"></a><span class="dt">Ok</span> (<span class="dt">TmIf</span> (<span class="dt">TmSucc</span> <span class="dt">TmZero</span>) <span class="dt">TmTrue</span> <span class="dt">TmFalse</span>)</span>
<span id="cb12-7"><a href="#cb12-7"></a>    : <span class="dt">Result</span> (<span class="dt">List</span> <span class="dt">Parser</span><span class="op">.</span><span class="dt">DeadEnd</span>) <span class="dt">Term</span></span>
<span id="cb12-8"><a href="#cb12-8"></a><span class="co">-- 入れ子もOK</span></span>
<span id="cb12-9"><a href="#cb12-9"></a><span class="op">&gt;</span> <span class="dt">Parser</span><span class="op">.</span><span class="fu">parse</span> <span class="st">&quot;if if true then 0 else 1 then true else if false then 2 else 3&quot;</span></span>
<span id="cb12-10"><a href="#cb12-10"></a><span class="dt">Ok</span> (<span class="dt">TmIf</span> (<span class="dt">TmIf</span> <span class="dt">TmTrue</span> <span class="dt">TmZero</span> (<span class="dt">TmSucc</span> <span class="dt">TmZero</span>)) <span class="dt">TmTrue</span> (<span class="dt">TmIf</span> <span class="dt">TmFalse</span> (<span class="dt">TmSucc</span> (<span class="dt">TmSucc</span> <span class="dt">TmZero</span>)) (<span class="dt">TmSucc</span> (<span class="dt">TmSucc</span> (<span class="dt">TmSucc</span> <span class="dt">TmZero</span>)))))</span>
<span id="cb12-11"><a href="#cb12-11"></a>    : <span class="dt">Result</span> (<span class="dt">List</span> <span class="dt">Parser</span><span class="op">.</span><span class="dt">DeadEnd</span>) <span class="dt">Term</span></span></code></pre></div>
<p>はい． あとは同じようーに書くだけなので割愛:</p>
<div class="sourceCode" id="cb13"><pre class="sourceCode elm"><code class="sourceCode elm"><span id="cb13-1"><a href="#cb13-1"></a><span class="fu">termParser</span> : <span class="dt">Parser</span> <span class="dt">Term</span></span>
<span id="cb13-2"><a href="#cb13-2"></a><span class="fu">termParser</span> <span class="op">=</span></span>
<span id="cb13-3"><a href="#cb13-3"></a>    <span class="dt">Parser</span><span class="op">.</span><span class="fu">oneOf</span></span>
<span id="cb13-4"><a href="#cb13-4"></a>        [ <span class="fu">valParser</span></span>
<span id="cb13-5"><a href="#cb13-5"></a>        <span class="op">,</span> <span class="fu">ifParser</span></span>
<span id="cb13-6"><a href="#cb13-6"></a>        <span class="op">,</span> <span class="fu">succParser</span></span>
<span id="cb13-7"><a href="#cb13-7"></a>        <span class="op">,</span> <span class="fu">predParser</span></span>
<span id="cb13-8"><a href="#cb13-8"></a>        <span class="op">,</span> <span class="fu">isZeroParser</span></span>
<span id="cb13-9"><a href="#cb13-9"></a>        <span class="op">,</span> <span class="fu">parParser</span>    <span class="co">-- カッコ</span></span>
<span id="cb13-10"><a href="#cb13-10"></a>        ]</span></code></pre></div>
<p>ついでに <code>Term</code> から文字列に変換する関数も書いておこう:</p>
<div class="sourceCode" id="cb14"><pre class="sourceCode elm"><code class="sourceCode elm"><span id="cb14-1"><a href="#cb14-1"></a><span class="fu">display</span> : <span class="dt">Term</span> <span class="op">-&gt;</span> <span class="dt">String</span></span>
<span id="cb14-2"><a href="#cb14-2"></a><span class="fu">display</span> <span class="fu">t</span> <span class="op">=</span></span>
<span id="cb14-3"><a href="#cb14-3"></a>    <span class="fu">displayR</span> <span class="fu">t</span></span>
<span id="cb14-4"><a href="#cb14-4"></a>        <span class="op">|&gt;</span> <span class="fu">dropIfStartsWith</span> <span class="st">&quot;(&quot;</span> <span class="co">-- かっこ悪いので最後のカッコを消す</span></span>
<span id="cb14-5"><a href="#cb14-5"></a>        <span class="op">|&gt;</span> <span class="fu">dropIfEndsWith</span> <span class="st">&quot;)&quot;</span>   <span class="co">-- カッコだけに</span></span>
<span id="cb14-6"><a href="#cb14-6"></a></span>
<span id="cb14-7"><a href="#cb14-7"></a></span>
<span id="cb14-8"><a href="#cb14-8"></a><span class="fu">displayR</span> : <span class="dt">Term</span> <span class="op">-&gt;</span> <span class="dt">String</span></span>
<span id="cb14-9"><a href="#cb14-9"></a><span class="fu">displayR</span> <span class="fu">t</span> <span class="op">=</span></span>
<span id="cb14-10"><a href="#cb14-10"></a>    <span class="co">-- 分岐するのが面倒なので toInt も同時に</span></span>
<span id="cb14-11"><a href="#cb14-11"></a>    <span class="cf">case</span> ( <span class="fu">toInt</span> <span class="fu">t</span><span class="op">,</span> <span class="fu">t</span> ) <span class="cf">of</span></span>
<span id="cb14-12"><a href="#cb14-12"></a>        ( <span class="dt">Just</span> <span class="fu">n</span><span class="op">,</span> <span class="fu">_</span> ) <span class="op">-&gt;</span></span>
<span id="cb14-13"><a href="#cb14-13"></a>            <span class="dt">String</span><span class="op">.</span><span class="fu">fromInt</span> <span class="fu">n</span></span>
<span id="cb14-14"><a href="#cb14-14"></a></span>
<span id="cb14-15"><a href="#cb14-15"></a>        ( <span class="fu">_</span><span class="op">,</span> <span class="dt">TmTrue</span> ) <span class="op">-&gt;</span></span>
<span id="cb14-16"><a href="#cb14-16"></a>            <span class="st">&quot;true&quot;</span></span>
<span id="cb14-17"><a href="#cb14-17"></a></span>
<span id="cb14-18"><a href="#cb14-18"></a>        ( <span class="fu">_</span><span class="op">,</span> <span class="dt">TmFalse</span> ) <span class="op">-&gt;</span></span>
<span id="cb14-19"><a href="#cb14-19"></a>            <span class="st">&quot;false&quot;</span></span>
<span id="cb14-20"><a href="#cb14-20"></a></span>
<span id="cb14-21"><a href="#cb14-21"></a>        ( <span class="fu">_</span><span class="op">,</span> <span class="dt">TmIf</span> <span class="fu">t1</span> <span class="fu">t2</span> <span class="fu">t3</span> ) <span class="op">-&gt;</span></span>
<span id="cb14-22"><a href="#cb14-22"></a>            <span class="dt">String</span><span class="op">.</span><span class="fu">concat</span></span>
<span id="cb14-23"><a href="#cb14-23"></a>                [ <span class="st">&quot;(if &quot;</span></span>
<span id="cb14-24"><a href="#cb14-24"></a>                <span class="op">,</span> <span class="fu">displayR</span> <span class="fu">t1</span></span>
<span id="cb14-25"><a href="#cb14-25"></a>                <span class="op">,</span> <span class="st">&quot; then &quot;</span></span>
<span id="cb14-26"><a href="#cb14-26"></a>                <span class="op">,</span> <span class="fu">displayR</span> <span class="fu">t2</span></span>
<span id="cb14-27"><a href="#cb14-27"></a>                <span class="op">,</span> <span class="st">&quot; else &quot;</span></span>
<span id="cb14-28"><a href="#cb14-28"></a>                <span class="op">,</span> <span class="fu">displayR</span> <span class="fu">t3</span></span>
<span id="cb14-29"><a href="#cb14-29"></a>                <span class="op">,</span> <span class="st">&quot;)&quot;</span></span>
<span id="cb14-30"><a href="#cb14-30"></a>                ]</span>
<span id="cb14-31"><a href="#cb14-31"></a></span>
<span id="cb14-32"><a href="#cb14-32"></a>        <span class="co">-- あとは割愛</span></span>
<span id="cb14-33"><a href="#cb14-33"></a>        <span class="op">...</span></span>
<span id="cb14-34"><a href="#cb14-34"></a></span>
<span id="cb14-35"><a href="#cb14-35"></a><span class="fu">toInt</span> : <span class="dt">Term</span> <span class="op">-&gt;</span> <span class="dt">Maybe</span> <span class="dt">Int</span></span>
<span id="cb14-36"><a href="#cb14-36"></a><span class="fu">toInt</span> <span class="fu">t</span> <span class="op">=</span></span>
<span id="cb14-37"><a href="#cb14-37"></a>    <span class="cf">case</span> <span class="fu">t</span> <span class="cf">of</span></span>
<span id="cb14-38"><a href="#cb14-38"></a>        <span class="dt">TmZero</span> <span class="op">-&gt;</span></span>
<span id="cb14-39"><a href="#cb14-39"></a>            <span class="dt">Just</span> <span class="dv">0</span></span>
<span id="cb14-40"><a href="#cb14-40"></a></span>
<span id="cb14-41"><a href="#cb14-41"></a>        <span class="dt">TmSucc</span> <span class="fu">t1</span> <span class="op">-&gt;</span></span>
<span id="cb14-42"><a href="#cb14-42"></a>            <span class="dt">Maybe</span><span class="op">.</span><span class="fu">map</span> (\<span class="fu">n</span> <span class="op">-&gt;</span> <span class="dv">1</span> <span class="op">+</span> <span class="fu">n</span>) (<span class="fu">toInt</span> <span class="fu">t1</span>)</span>
<span id="cb14-43"><a href="#cb14-43"></a></span>
<span id="cb14-44"><a href="#cb14-44"></a>        <span class="fu">_</span> <span class="op">-&gt;</span></span>
<span id="cb14-45"><a href="#cb14-45"></a>            <span class="dt">Nothing</span></span></code></pre></div>
<p>REPL で確認:</p>
<div class="sourceCode" id="cb15"><pre class="sourceCode elm"><code class="sourceCode elm"><span id="cb15-1"><a href="#cb15-1"></a><span class="op">&gt;</span> <span class="fu">x</span> <span class="op">=</span></span>
<span id="cb15-2"><a href="#cb15-2"></a><span class="op">|</span>   <span class="dt">Parser</span><span class="op">.</span><span class="fu">parse</span> <span class="st">&quot;if if true then false else true then 0 else if false then 2 else 3&quot;</span></span>
<span id="cb15-3"><a href="#cb15-3"></a><span class="op">|</span>   <span class="op">|&gt;</span> <span class="dt">Result</span><span class="op">.</span><span class="fu">toMaybe</span></span>
<span id="cb15-4"><a href="#cb15-4"></a><span class="op">|</span>   <span class="op">|&gt;</span> <span class="dt">Maybe</span><span class="op">.</span><span class="fu">andThen</span> <span class="dt">Chap4</span><span class="op">.</span><span class="fu">eval</span></span>
<span id="cb15-5"><a href="#cb15-5"></a><span class="op">|</span>   <span class="op">|&gt;</span> <span class="dt">Maybe</span><span class="op">.</span><span class="fu">map</span> <span class="dt">Chap4</span><span class="op">.</span><span class="fu">display</span></span>
<span id="cb15-6"><a href="#cb15-6"></a><span class="op">|</span></span>
<span id="cb15-7"><a href="#cb15-7"></a><span class="dt">Just</span> <span class="st">&quot;3&quot;</span> : <span class="dt">Maybe</span> <span class="dt">String</span></span></code></pre></div>
<p>完璧！</p>
<h2 id="おまけ-spa-にする">おまけ: SPA にする</h2>
<p>せっかく Elm 使ってるので:</p>
<ul>
<li>文字列を入力してもらって</li>
<li>「パースボタン」を押したらパースして</li>
<li>さらに「評価ボタン」を押したら１ステップだけ評価する</li>
</ul>
<p>という簡単なものを作る． まぁこれぐらいならググれば出てくるサンプルコードを組み合わせるだけでできますね:</p>
<div class="sourceCode" id="cb16"><pre class="sourceCode elm"><code class="sourceCode elm"><span id="cb16-1"><a href="#cb16-1"></a><span class="fu">main</span> : <span class="dt">Program</span> () <span class="dt">Model</span> <span class="dt">Msg</span></span>
<span id="cb16-2"><a href="#cb16-2"></a><span class="fu">main</span> <span class="op">=</span></span>
<span id="cb16-3"><a href="#cb16-3"></a>    <span class="dt">Browser</span><span class="op">.</span><span class="fu">element</span></span>
<span id="cb16-4"><a href="#cb16-4"></a>        { <span class="fu">init</span> <span class="op">=</span> ( <span class="dt">Model</span> <span class="st">&quot;&quot;</span> [] <span class="st">&quot;&quot;</span><span class="op">,</span> <span class="dt">Cmd</span><span class="op">.</span><span class="fu">none</span> )</span>
<span id="cb16-5"><a href="#cb16-5"></a>        <span class="op">,</span> <span class="fu">view</span> <span class="op">=</span> <span class="fu">view</span></span>
<span id="cb16-6"><a href="#cb16-6"></a>        <span class="op">,</span> <span class="fu">update</span> <span class="op">=</span> <span class="fu">update</span></span>
<span id="cb16-7"><a href="#cb16-7"></a>        <span class="op">,</span> <span class="fu">subscriptions</span> <span class="op">=</span> \<span class="fu">_</span> <span class="op">-&gt;</span> <span class="dt">Sub</span><span class="op">.</span><span class="fu">none</span></span>
<span id="cb16-8"><a href="#cb16-8"></a>        }</span>
<span id="cb16-9"><a href="#cb16-9"></a></span>
<span id="cb16-10"><a href="#cb16-10"></a><span class="kw">type</span> <span class="kw">alias</span> <span class="dt">Model</span> <span class="op">=</span></span>
<span id="cb16-11"><a href="#cb16-11"></a>    { <span class="fu">input</span> : <span class="dt">String</span>           <span class="co">-- 入力文字列を保存</span></span>
<span id="cb16-12"><a href="#cb16-12"></a>    <span class="op">,</span> <span class="fu">exps</span> : <span class="dt">List</span> <span class="dt">Lambda</span><span class="op">.</span><span class="dt">Term</span>  <span class="co">-- 1ステップごとの評価結果を全部</span></span>
<span id="cb16-13"><a href="#cb16-13"></a>    <span class="op">,</span> <span class="fu">error</span> : <span class="dt">String</span></span>
<span id="cb16-14"><a href="#cb16-14"></a>    }</span>
<span id="cb16-15"><a href="#cb16-15"></a></span>
<span id="cb16-16"><a href="#cb16-16"></a><span class="kw">type</span> <span class="dt">Msg</span></span>
<span id="cb16-17"><a href="#cb16-17"></a>    <span class="co">-- 文字列の入力</span></span>
<span id="cb16-18"><a href="#cb16-18"></a>    <span class="op">=</span> <span class="dt">InputText</span> <span class="dt">String</span></span>
<span id="cb16-19"><a href="#cb16-19"></a>    <span class="co">-- パースボタン</span></span>
<span id="cb16-20"><a href="#cb16-20"></a>    <span class="op">|</span> <span class="dt">ParseInput</span> (<span class="dt">Result</span> (<span class="dt">List</span> <span class="dt">Parser</span><span class="op">.</span><span class="dt">DeadEnd</span>) <span class="dt">Term</span>)</span>
<span id="cb16-21"><a href="#cb16-21"></a>    <span class="co">-- 評価ボタン</span></span>
<span id="cb16-22"><a href="#cb16-22"></a>    <span class="op">|</span> <span class="dt">EvalTerm</span> (<span class="dt">Maybe</span> <span class="dt">Term</span>)</span>
<span id="cb16-23"><a href="#cb16-23"></a></span>
<span id="cb16-24"><a href="#cb16-24"></a><span class="fu">update</span> : <span class="dt">Msg</span> <span class="op">-&gt;</span> <span class="dt">Model</span> <span class="op">-&gt;</span> ( <span class="dt">Model</span><span class="op">,</span> <span class="dt">Cmd</span> <span class="dt">Msg</span> )</span>
<span id="cb16-25"><a href="#cb16-25"></a><span class="fu">update</span> <span class="fu">msg</span> <span class="fu">model</span> <span class="op">=</span></span>
<span id="cb16-26"><a href="#cb16-26"></a>    <span class="cf">case</span> <span class="fu">msg</span> <span class="cf">of</span></span>
<span id="cb16-27"><a href="#cb16-27"></a>        <span class="dt">InputText</span> <span class="fu">txt</span> <span class="op">-&gt;</span></span>
<span id="cb16-28"><a href="#cb16-28"></a>            ( { <span class="fu">model</span> <span class="op">|</span> <span class="fu">input</span> <span class="op">=</span> <span class="fu">txt</span> }<span class="op">,</span> <span class="dt">Cmd</span><span class="op">.</span><span class="fu">none</span> )</span>
<span id="cb16-29"><a href="#cb16-29"></a></span>
<span id="cb16-30"><a href="#cb16-30"></a>        <span class="dt">ParseInput</span> (<span class="dt">Ok</span> <span class="fu">t</span>) <span class="op">-&gt;</span></span>
<span id="cb16-31"><a href="#cb16-31"></a>            ( { <span class="fu">model</span> <span class="op">|</span> <span class="fu">exps</span> <span class="op">=</span> [ <span class="fu">t</span> ]<span class="op">,</span> <span class="fu">error</span> <span class="op">=</span> <span class="st">&quot;&quot;</span> }<span class="op">,</span> <span class="dt">Cmd</span><span class="op">.</span><span class="fu">none</span> )</span>
<span id="cb16-32"><a href="#cb16-32"></a></span>
<span id="cb16-33"><a href="#cb16-33"></a>        <span class="dt">ParseInput</span> (<span class="dt">Err</span> <span class="fu">_</span>) <span class="op">-&gt;</span></span>
<span id="cb16-34"><a href="#cb16-34"></a>            ( { <span class="fu">model</span> <span class="op">|</span> <span class="fu">exps</span> <span class="op">=</span> []<span class="op">,</span> <span class="fu">error</span> <span class="op">=</span> <span class="st">&quot;Can not parse&quot;</span> }<span class="op">,</span> <span class="dt">Cmd</span><span class="op">.</span><span class="fu">none</span> )</span>
<span id="cb16-35"><a href="#cb16-35"></a></span>
<span id="cb16-36"><a href="#cb16-36"></a>        <span class="dt">EvalTerm</span> (<span class="dt">Just</span> <span class="fu">t</span>) <span class="op">-&gt;</span></span>
<span id="cb16-37"><a href="#cb16-37"></a>            ( { <span class="fu">model</span> <span class="op">|</span> <span class="fu">exps</span> <span class="op">=</span> <span class="fu">t</span> <span class="op">::</span> <span class="fu">model</span><span class="op">.</span><span class="fu">exps</span> }<span class="op">,</span> <span class="dt">Cmd</span><span class="op">.</span><span class="fu">none</span> )</span>
<span id="cb16-38"><a href="#cb16-38"></a></span>
<span id="cb16-39"><a href="#cb16-39"></a>        <span class="dt">EvalTerm</span> <span class="fu">_</span> <span class="op">-&gt;</span></span>
<span id="cb16-40"><a href="#cb16-40"></a>            ( { <span class="fu">model</span> <span class="op">|</span> <span class="fu">error</span> <span class="op">=</span> <span class="st">&quot;Can not eval&quot;</span> }<span class="op">,</span> <span class="dt">Cmd</span><span class="op">.</span><span class="fu">none</span> )</span>
<span id="cb16-41"><a href="#cb16-41"></a></span>
<span id="cb16-42"><a href="#cb16-42"></a><span class="co">-- いくつかの見た目の実装は割愛してます(class とか)</span></span>
<span id="cb16-43"><a href="#cb16-43"></a><span class="fu">view</span> : <span class="dt">Model</span> <span class="op">-&gt;</span> <span class="dt">Html</span> <span class="dt">Msg</span></span>
<span id="cb16-44"><a href="#cb16-44"></a><span class="fu">view</span> <span class="fu">model</span> <span class="op">=</span></span>
<span id="cb16-45"><a href="#cb16-45"></a>    <span class="fu">div</span> []</span>
<span id="cb16-46"><a href="#cb16-46"></a>        [ <span class="fu">button</span></span>
<span id="cb16-47"><a href="#cb16-47"></a>            <span class="co">-- ここでボタンの前にパースしてるのはナンセンスな気もするけど...</span></span>
<span id="cb16-48"><a href="#cb16-48"></a>            [ <span class="fu">onClick</span> (<span class="dt">ParseInput</span> <span class="op">&lt;|</span> <span class="dt">Lambda</span><span class="op">.</span><span class="fu">parse</span> <span class="fu">model</span><span class="op">.</span><span class="fu">input</span>)<span class="op">,</span> <span class="fu">type_</span> <span class="st">&quot;button&quot;</span> ]</span>
<span id="cb16-49"><a href="#cb16-49"></a>            [ <span class="fu">text</span> <span class="st">&quot;Parse!&quot;</span> ]</span>
<span id="cb16-50"><a href="#cb16-50"></a>        <span class="op">,</span> <span class="fu">input</span></span>
<span id="cb16-51"><a href="#cb16-51"></a>            [ <span class="fu">onInput</span> <span class="dt">InputText</span><span class="op">,</span> <span class="fu">type_</span> <span class="st">&quot;text&quot;</span> ]</span>
<span id="cb16-52"><a href="#cb16-52"></a>            []</span>
<span id="cb16-53"><a href="#cb16-53"></a>        <span class="op">,</span> <span class="fu">div</span> [] (<span class="fu">viewExps</span> <span class="fu">model</span>)</span>
<span id="cb16-54"><a href="#cb16-54"></a>        <span class="op">,</span> <span class="cf">if</span> <span class="dt">String</span><span class="op">.</span><span class="fu">isEmpty</span> <span class="fu">model</span><span class="op">.</span><span class="fu">error</span> <span class="cf">then</span></span>
<span id="cb16-55"><a href="#cb16-55"></a>            <span class="fu">div</span> [] []</span>
<span id="cb16-56"><a href="#cb16-56"></a>          <span class="cf">else</span></span>
<span id="cb16-57"><a href="#cb16-57"></a>            <span class="fu">div</span> [ <span class="fu">class</span> <span class="st">&quot;flash flash-error&quot;</span> ] [ <span class="fu">text</span> <span class="fu">model</span><span class="op">.</span><span class="fu">error</span> ]</span>
<span id="cb16-58"><a href="#cb16-58"></a>        ]</span>
<span id="cb16-59"><a href="#cb16-59"></a></span>
<span id="cb16-60"><a href="#cb16-60"></a><span class="fu">viewExps</span> : <span class="dt">Model</span> <span class="op">-&gt;</span> <span class="dt">List</span> (<span class="dt">Html</span> <span class="dt">Msg</span>)</span>
<span id="cb16-61"><a href="#cb16-61"></a><span class="fu">viewExps</span> <span class="fu">model</span> <span class="op">=</span></span>
<span id="cb16-62"><a href="#cb16-62"></a>    <span class="cf">case</span> <span class="fu">model</span><span class="op">.</span><span class="fu">exps</span> <span class="cf">of</span></span>
<span id="cb16-63"><a href="#cb16-63"></a>        [] <span class="op">-&gt;</span></span>
<span id="cb16-64"><a href="#cb16-64"></a>            []</span>
<span id="cb16-65"><a href="#cb16-65"></a></span>
<span id="cb16-66"><a href="#cb16-66"></a>        <span class="fu">x</span> <span class="op">::</span> <span class="fu">xs</span> <span class="op">-&gt;</span></span>
<span id="cb16-67"><a href="#cb16-67"></a>            [ <span class="dt">List</span><span class="op">.</span><span class="fu">reverse</span> <span class="fu">model</span><span class="op">.</span><span class="fu">exps</span></span>
<span id="cb16-68"><a href="#cb16-68"></a>                <span class="op">|&gt;</span> <span class="dt">List</span><span class="op">.</span><span class="fu">map</span> <span class="fu">viewExp</span></span>
<span id="cb16-69"><a href="#cb16-69"></a>                <span class="op">|&gt;</span> <span class="dt">List</span><span class="op">.</span><span class="fu">intersperse</span> (<span class="fu">div</span> [ <span class="fu">class</span> <span class="st">&quot;my-1&quot;</span> ] [ <span class="fu">text</span> <span class="st">&quot;↓&quot;</span> ])</span>
<span id="cb16-70"><a href="#cb16-70"></a>                <span class="op">|&gt;</span> <span class="fu">div</span> []</span>
<span id="cb16-71"><a href="#cb16-71"></a>            <span class="op">,</span> <span class="fu">button</span></span>
<span id="cb16-72"><a href="#cb16-72"></a>                <span class="co">-- ここもボタンの前に評価してるのは(ry</span></span>
<span id="cb16-73"><a href="#cb16-73"></a>                [ <span class="fu">onClick</span> (<span class="dt">EvalTerm</span> <span class="op">&lt;|</span> <span class="dt">Lambda</span><span class="op">.</span><span class="fu">eval1</span> <span class="fu">x</span>)<span class="op">,</span> <span class="fu">type_</span> <span class="st">&quot;button&quot;</span>　]</span>
<span id="cb16-74"><a href="#cb16-74"></a>                [ <span class="fu">text</span> <span class="st">&quot;Eval!&quot;</span> ]</span>
<span id="cb16-75"><a href="#cb16-75"></a>            ]</span>
<span id="cb16-76"><a href="#cb16-76"></a></span>
<span id="cb16-77"><a href="#cb16-77"></a><span class="fu">viewExp</span> : <span class="dt">Lambda</span><span class="op">.</span><span class="dt">Term</span> <span class="op">-&gt;</span> <span class="dt">Html</span> <span class="dt">Msg</span></span>
<span id="cb16-78"><a href="#cb16-78"></a><span class="fu">viewExp</span> <span class="fu">t</span> <span class="op">=</span></span>
<span id="cb16-79"><a href="#cb16-79"></a>    <span class="fu">div</span> [ <span class="fu">class</span> <span class="st">&quot;my-1&quot;</span> ] [ <span class="fu">text</span> (<span class="dt">Lambda</span><span class="op">.</span><span class="fu">display</span> <span class="fu">t</span>) ]</span></code></pre></div>
<p>色々ととりあえずで作ったので雑だ（現在のは改良したあとなのでこのコードとは少し違う）．</p>
<h2 id="おしまい">おしまい</h2>
<p>ちなみに，会社で同期と TaPL (雑な)読書会をしており，このシリーズはその成果です． すでに半年ぐらいやってるが未だに10章です笑</p>
  </div>]]></summary>
</entry>
<entry>
    <title>Haskell で GitHub Actions する</title>
    <link href="https://matsubara0507.github.io/posts/2019-12-02-haskell-with-gh-actions.html" />
    <id>https://matsubara0507.github.io/posts/2019-12-02-haskell-with-gh-actions.html</id>
    <published>2019-12-02T00:00:00Z</published>
    <updated>2019-12-02T00:00:00Z</updated>
    <summary type="html"><![CDATA[<div class="post-content" itemprop="articleBody">
    <p>本記事は「<a href="https://qiita.com/advent-calendar/2019/haskell">Haskell Advent Calendar 2019</a>」の2日目の記事です．</p>
<h1 id="section"></h1>
<p>2019/11/13 に GA された GitHub Actions を使って，Haskell プロジェクト，とりわけ Haskell Stack を使ったプロジェクトを CI/CD します．</p>
<p>ちなみに，試すために導入した PR はこれです:</p>
<ul>
<li><a href="https://github.com/matsubara0507/octbook/pull/1">自動ビルドを追加 by matsubara0507 · Pull Request #1 · matsubara0507/octbook</a></li>
</ul>
<p>これは適当な設定ファイルから GitHub の Organization や Organization の Team 機能にユーザーを招待したりキックしたりするための CLI ツールです．</p>
<h2 id="cabal-の場合">Cabal の場合</h2>
<p>はわりかし簡単． Haskell のセットアップは公式がすでに用意してくれてるのでこれを使えば良い:</p>
<ul>
<li><a href="https://github.com/actions/setup-haskell">actions/setup-haskell: Set up your GitHub Actions workflow with a specific version of Haskell (GHC and Cabal)</a></li>
</ul>
<p>こんな感じ:</p>
<div class="sourceCode" id="cb1"><pre class="sourceCode yaml"><code class="sourceCode yaml"><span id="cb1-1"><a href="#cb1-1"></a><span class="fu">jobs</span><span class="kw">:</span></span>
<span id="cb1-2"><a href="#cb1-2"></a><span class="at">  </span><span class="fu">build</span><span class="kw">:</span></span>
<span id="cb1-3"><a href="#cb1-3"></a><span class="at">    </span><span class="fu">name</span><span class="kw">:</span><span class="at"> ghc ${{ matrix.ghc }}</span></span>
<span id="cb1-4"><a href="#cb1-4"></a><span class="at">    </span><span class="fu">runs-on</span><span class="kw">:</span><span class="at"> ubuntu-16.04</span></span>
<span id="cb1-5"><a href="#cb1-5"></a><span class="at">    </span><span class="fu">strategy</span><span class="kw">:</span></span>
<span id="cb1-6"><a href="#cb1-6"></a><span class="at">      </span><span class="fu">matrix</span><span class="kw">:</span></span>
<span id="cb1-7"><a href="#cb1-7"></a><span class="at">        </span><span class="fu">ghc</span><span class="kw">:</span><span class="at"> </span><span class="kw">[</span><span class="st">&quot;8.2.2&quot;</span><span class="kw">,</span><span class="at"> </span><span class="st">&quot;8.4.4&quot;</span><span class="kw">,</span><span class="at"> </span><span class="st">&quot;8.6.5&quot;</span><span class="kw">,</span><span class="at"> </span><span class="st">&quot;8.8.1&quot;</span><span class="kw">]</span></span>
<span id="cb1-8"><a href="#cb1-8"></a><span class="at">        </span><span class="fu">cabal</span><span class="kw">:</span><span class="at"> </span><span class="kw">[</span><span class="st">&quot;3.0&quot;</span><span class="kw">]</span></span>
<span id="cb1-9"><a href="#cb1-9"></a></span>
<span id="cb1-10"><a href="#cb1-10"></a><span class="at">    </span><span class="fu">steps</span><span class="kw">:</span></span>
<span id="cb1-11"><a href="#cb1-11"></a><span class="at">    </span><span class="kw">-</span><span class="at"> </span><span class="fu">uses</span><span class="kw">:</span><span class="at"> actions/checkout@master</span></span>
<span id="cb1-12"><a href="#cb1-12"></a><span class="at">      </span><span class="fu">with</span><span class="kw">:</span></span>
<span id="cb1-13"><a href="#cb1-13"></a><span class="at">        </span><span class="fu">fetch-depth</span><span class="kw">:</span><span class="at"> </span><span class="dv">1</span></span>
<span id="cb1-14"><a href="#cb1-14"></a><span class="at">    </span><span class="kw">-</span><span class="at"> </span><span class="fu">uses</span><span class="kw">:</span><span class="at"> actions/setup-haskell@v1</span></span>
<span id="cb1-15"><a href="#cb1-15"></a><span class="at">      </span><span class="fu">name</span><span class="kw">:</span><span class="at"> Setup Haskell</span></span>
<span id="cb1-16"><a href="#cb1-16"></a><span class="at">      </span><span class="fu">with</span><span class="kw">:</span></span>
<span id="cb1-17"><a href="#cb1-17"></a><span class="at">        </span><span class="fu">ghc-version</span><span class="kw">:</span><span class="at"> ${{ matrix.ghc }}</span></span>
<span id="cb1-18"><a href="#cb1-18"></a><span class="at">        </span><span class="fu">cabal-version</span><span class="kw">:</span><span class="at"> ${{ matrix.cabal }}</span></span></code></pre></div>
<p>Haskell パッケージ系のリポジトリなら，こんな感じに matrix の設定をすると良い． で，キャッシュする場合は，この matrix ごとに <code>~/.cabal/store</code> だけをキャッシュすれば十分らしい（教えてもらった）:</p>
<div class="sourceCode" id="cb2"><pre class="sourceCode yaml"><code class="sourceCode yaml"><span id="cb2-1"><a href="#cb2-1"></a><span class="at">   </span><span class="fu">steps</span><span class="kw">:</span></span>
<span id="cb2-2"><a href="#cb2-2"></a><span class="at">   ...</span></span>
<span id="cb2-3"><a href="#cb2-3"></a><span class="at">    </span><span class="kw">-</span><span class="at"> </span><span class="fu">name</span><span class="kw">:</span><span class="at"> Cache .cabal</span></span>
<span id="cb2-4"><a href="#cb2-4"></a><span class="at">      </span><span class="fu">uses</span><span class="kw">:</span><span class="at"> actions/cache@preview</span></span>
<span id="cb2-5"><a href="#cb2-5"></a><span class="at">      </span><span class="fu">with</span><span class="kw">:</span></span>
<span id="cb2-6"><a href="#cb2-6"></a><span class="at">        </span><span class="fu">path</span><span class="kw">:</span><span class="at"> ~/.cabal/store</span></span>
<span id="cb2-7"><a href="#cb2-7"></a><span class="at">        </span><span class="fu">key</span><span class="kw">:</span><span class="at"> ${{ matrix.ghc }}-cabal-${{ hashFiles(&#39;**/fallible.cabal&#39;) }}</span></span>
<span id="cb2-8"><a href="#cb2-8"></a><span class="fu">        restore-keys</span><span class="kw">: </span><span class="ch">|</span></span>
<span id="cb2-9"><a href="#cb2-9"></a>          ${{ matrix.ghc }}-cabal-</span>
<span id="cb2-10"><a href="#cb2-10"></a><span class="at">    </span><span class="kw">-</span><span class="at"> </span><span class="fu">uses</span><span class="kw">:</span><span class="at"> actions/setup-haskell@v1</span></span>
<span id="cb2-11"><a href="#cb2-11"></a><span class="at">      </span><span class="fu">name</span><span class="kw">:</span><span class="at"> Setup Haskell</span></span>
<span id="cb2-12"><a href="#cb2-12"></a><span class="at">      </span><span class="fu">with</span><span class="kw">:</span></span>
<span id="cb2-13"><a href="#cb2-13"></a><span class="at">        </span><span class="fu">ghc-version</span><span class="kw">:</span><span class="at"> ${{ matrix.ghc }}</span></span>
<span id="cb2-14"><a href="#cb2-14"></a><span class="at">        </span><span class="fu">cabal-version</span><span class="kw">:</span><span class="at"> ${{ matrix.cabal }}</span></span>
<span id="cb2-15"><a href="#cb2-15"></a><span class="at">    </span><span class="kw">-</span><span class="at"> </span><span class="fu">name</span><span class="kw">:</span><span class="at"> Install dependencies</span></span>
<span id="cb2-16"><a href="#cb2-16"></a><span class="fu">      run</span><span class="kw">: </span><span class="ch">|</span></span>
<span id="cb2-17"><a href="#cb2-17"></a>        cabal v2-update</span>
<span id="cb2-18"><a href="#cb2-18"></a>        cabal v2-build --only-dependencies</span>
<span id="cb2-19"><a href="#cb2-19"></a><span class="at">    </span><span class="kw">-</span><span class="at"> </span><span class="fu">name</span><span class="kw">:</span><span class="at"> Build &amp; test</span></span>
<span id="cb2-20"><a href="#cb2-20"></a><span class="fu">      run</span><span class="kw">: </span><span class="ch">|</span></span>
<span id="cb2-21"><a href="#cb2-21"></a>        cabal v2-build</span>
<span id="cb2-22"><a href="#cb2-22"></a>        cabal v2-test</span></code></pre></div>
<p>Cabal の方はちゃんと調査してないのでこんでお終い（すいません）．</p>
<h2 id="stack-の場合">Stack の場合</h2>
<p>こっからが本題．</p>
<p>Stack はキャッシュすべきディレクトリ <code>~/.stack</code> がでかすぎる． 下記は試しに GitHub Actions 上で <code>du</code> して見た結果だ:</p>
<pre><code>$ du -sh ~/.stack/*
4.0K    /home/runner/.stack/config.yaml
1.3G    /home/runner/.stack/pantry
553M    /home/runner/.stack/pantry.sqlite3
0       /home/runner/.stack/pantry.sqlite3.pantry-write-lock
1.8G    /home/runner/.stack/programs
16M     /home/runner/.stack/setup-exe-cache
64K     /home/runner/.stack/setup-exe-src
462M    /home/runner/.stack/snapshots
192K    /home/runner/.stack/stack.sqlite3
0       /home/runner/.stack/stack.sqlite3.pantry-write-lock</code></pre>
<p>現在，<code>actions/cache@v1</code> では一度にキャッシュできるディレクトリの最大サイズは400MBしかない（今後緩和される可能性はあるが）． <code>actions/cache</code> は内部で gzip かなんかで圧縮しているので，この数字まんまではない． 試しに，このまんまキャッシュしてみたら次のような警告が出た:</p>
<pre><code>Post job cleanup.
/bin/tar -cz -f /home/runner/work/_temp/2706cc23-8789-4ed4-b4ec-4e7143b1cc98/cache.tgz -C /home/runner/.stack .
##[warning]Cache size of 814014541 bytes is over the 400MB limit, not saving cache.</code></pre>
<p>800MB強，意外と少ない！</p>
<p>余談だが，<del>そのうち</del> v1.0.2 から<a href="https://github.com/actions/cache/pull/85">毎回キャッシュサイズが見れるようになる</a>はず（今でも <code>ACTIONS_STEP_DEBUG</code> を Secret に設定すると見れる）．</p>
<h3 id="system-ghc-を使う">system-ghc を使う</h3>
<p>stack は <code>--system-ghc</code> オプションを使うことで stack がインストールした GHC の代わりに，ホストマシンの GHC を直接使ってくれる:</p>
<div class="sourceCode" id="cb5"><pre class="sourceCode yaml"><code class="sourceCode yaml"><span id="cb5-1"><a href="#cb5-1"></a><span class="fu">jobs</span><span class="kw">:</span></span>
<span id="cb5-2"><a href="#cb5-2"></a><span class="at">  </span><span class="fu">build</span><span class="kw">:</span></span>
<span id="cb5-3"><a href="#cb5-3"></a><span class="at">    </span><span class="fu">runs-on</span><span class="kw">:</span><span class="at"> ubuntu-18.04</span></span>
<span id="cb5-4"><a href="#cb5-4"></a><span class="at">    </span><span class="fu">strategy</span><span class="kw">:</span></span>
<span id="cb5-5"><a href="#cb5-5"></a><span class="at">      </span><span class="fu">matrix</span><span class="kw">:</span></span>
<span id="cb5-6"><a href="#cb5-6"></a><span class="at">        </span><span class="fu">ghc</span><span class="kw">:</span><span class="at"> </span><span class="kw">[</span><span class="st">&quot;8.6.5&quot;</span><span class="kw">]</span></span>
<span id="cb5-7"><a href="#cb5-7"></a><span class="at">        </span><span class="fu">cabal</span><span class="kw">:</span><span class="at"> </span><span class="kw">[</span><span class="st">&quot;3.0&quot;</span><span class="kw">]</span></span>
<span id="cb5-8"><a href="#cb5-8"></a><span class="at">        </span><span class="fu">cache-version</span><span class="kw">:</span><span class="at"> </span><span class="kw">[</span><span class="st">&quot;v4&quot;</span><span class="kw">]</span></span>
<span id="cb5-9"><a href="#cb5-9"></a></span>
<span id="cb5-10"><a href="#cb5-10"></a><span class="at">    </span><span class="fu">steps</span><span class="kw">:</span></span>
<span id="cb5-11"><a href="#cb5-11"></a><span class="at">    </span><span class="kw">-</span><span class="at"> </span><span class="fu">uses</span><span class="kw">:</span><span class="at"> actions/checkout@v1</span></span>
<span id="cb5-12"><a href="#cb5-12"></a><span class="at">      </span><span class="fu">with</span><span class="kw">:</span></span>
<span id="cb5-13"><a href="#cb5-13"></a><span class="at">        </span><span class="fu">fetch-depth</span><span class="kw">:</span><span class="at"> </span><span class="dv">1</span></span>
<span id="cb5-14"><a href="#cb5-14"></a><span class="at">    </span><span class="kw">-</span><span class="at"> </span><span class="fu">name</span><span class="kw">:</span><span class="at"> Setup Haskell</span></span>
<span id="cb5-15"><a href="#cb5-15"></a><span class="at">      </span><span class="fu">uses</span><span class="kw">:</span><span class="at"> actions/setup-haskell@v1</span></span>
<span id="cb5-16"><a href="#cb5-16"></a><span class="at">      </span><span class="fu">with</span><span class="kw">:</span></span>
<span id="cb5-17"><a href="#cb5-17"></a><span class="at">        </span><span class="fu">ghc-version</span><span class="kw">:</span><span class="at"> ${{ matrix.ghc }}</span></span>
<span id="cb5-18"><a href="#cb5-18"></a><span class="at">        </span><span class="fu">cabal-version</span><span class="kw">:</span><span class="at"> ${{ matrix.cabal }}</span></span>
<span id="cb5-19"><a href="#cb5-19"></a><span class="at">    </span><span class="kw">-</span><span class="at"> </span><span class="fu">uses</span><span class="kw">:</span><span class="at"> mstksg/setup-stack@v1</span></span>
<span id="cb5-20"><a href="#cb5-20"></a><span class="at">    </span><span class="kw">-</span><span class="at"> </span><span class="fu">name</span><span class="kw">:</span><span class="at"> Install dependencies</span></span>
<span id="cb5-21"><a href="#cb5-21"></a><span class="at">      </span><span class="fu">run</span><span class="kw">:</span><span class="at"> stack --system-ghc build --only-dependencies</span></span>
<span id="cb5-22"><a href="#cb5-22"></a><span class="at">    </span><span class="kw">-</span><span class="at"> </span><span class="fu">name</span><span class="kw">:</span><span class="at"> Build binary</span></span>
<span id="cb5-23"><a href="#cb5-23"></a><span class="at">      </span><span class="fu">run</span><span class="kw">:</span><span class="at"> stack --system-ghc install --local-bin-path=./bin</span></span></code></pre></div>
<p>なんと system-ghc を使うことで <code>~/.stack/programs</code> が保存されなくなった（ここには stack がインストールした GHC が保存されてた）． これで，半分弱の削減に成功．残り約500MB．</p>
<h3 id="必殺奥義-分割キャッシュ">必殺奥義: 分割キャッシュ</h3>
<p>実は，キャッシュの最大サイズ 400MB は <strong>一つのディレクトリ毎の最大サイズ</strong> だ． なので，別々のディレクトリを別々にキャッシュすれば，最大 2GB までキャッシュできる（これがリポジトリ単位での最大サイズ）．</p>
<p><code>~/.stack/pantry</code> というのが単体で 1.3GB ある． なので，これだけとそれ以外をキャッシュするようにしてみる． ちなみに，<a href="https://docs.haskellstack.org/en/stable/pantry">Pantry というのが Stack の依存パッケージのキャッシュシステム</a>だ．</p>
<p>ここで問題が1つ． actions/cache はディレクトリを1つ指定して，それを圧縮しキャッシュしする． 複数のディレクトリを指定したり，中の一部のファイルだけを除外したりなどはできない（少なくとも現在のバージョンでは）． もちろん，一旦 <code>mv</code> してキャッシュし，restore したら <code>mv</code> し直せば良い． が，めんどいね． 単純なことはソフトウェアで解決しよう． ソフトウェアエンジニアの精神です（？）．</p>
<p>ということで，それをやってくれるアクションがこちら:</p>
<ul>
<li><a href="https://github.com/matsubara0507/actions/tree/master/move-files">actions/move-files at master · matsubara0507/actions</a></li>
</ul>
<p>ついに TypeScript デビューした． はい，actions/cache を参考にしてきていい感じに書き直しただけです． <code>mkdir</code> や <code>mv</code> は <a href="https://github.com/actions/toolkit/tree/master/packages/io">actions/toolkit</a> にあるので簡単に実装できた:</p>
<div class="sourceCode" id="cb6"><pre class="sourceCode typescript"><code class="sourceCode typescript"><span id="cb6-1"><a href="#cb6-1"></a><span class="im">import</span> <span class="op">*</span> <span class="im">as</span> core <span class="im">from</span> <span class="st">&quot;@actions/core&quot;</span><span class="op">;</span></span>
<span id="cb6-2"><a href="#cb6-2"></a><span class="im">import</span> <span class="op">*</span> <span class="im">as</span> io <span class="im">from</span> <span class="st">&quot;@actions/io&quot;</span><span class="op">;</span></span>
<span id="cb6-3"><a href="#cb6-3"></a><span class="im">import</span> <span class="op">*</span> <span class="im">as</span> utils <span class="im">from</span> <span class="st">&quot;./utils/actionUtils&quot;</span><span class="op">;</span></span>
<span id="cb6-4"><a href="#cb6-4"></a></span>
<span id="cb6-5"><a href="#cb6-5"></a><span class="kw">async</span> <span class="kw">function</span> <span class="fu">run</span>()<span class="op">:</span> <span class="bu">Promise</span><span class="op">&lt;</span><span class="dt">void</span><span class="op">&gt;</span> <span class="op">{</span></span>
<span id="cb6-6"><a href="#cb6-6"></a>    <span class="cf">try</span> <span class="op">{</span></span>
<span id="cb6-7"><a href="#cb6-7"></a>        <span class="kw">const</span> source <span class="op">=</span> <span class="va">utils</span><span class="op">.</span><span class="fu">resolvePath</span>(</span>
<span id="cb6-8"><a href="#cb6-8"></a>            <span class="va">core</span><span class="op">.</span><span class="fu">getInput</span>(<span class="st">&quot;source_dir&quot;</span><span class="op">,</span> <span class="op">{</span> required<span class="op">:</span> <span class="kw">true</span> <span class="op">}</span>)</span>
<span id="cb6-9"><a href="#cb6-9"></a>        )<span class="op">;</span></span>
<span id="cb6-10"><a href="#cb6-10"></a>        <span class="co">// 残念ながら inputs は文字列しか渡せないので改行で分割してる</span></span>
<span id="cb6-11"><a href="#cb6-11"></a>        <span class="kw">const</span> files <span class="op">=</span> core</span>
<span id="cb6-12"><a href="#cb6-12"></a>            .<span class="fu">getInput</span>(<span class="st">&quot;source_files&quot;</span><span class="op">,</span> <span class="op">{</span> required<span class="op">:</span> <span class="kw">true</span> <span class="op">}</span>)</span>
<span id="cb6-13"><a href="#cb6-13"></a>            .<span class="fu">split</span>(<span class="ss">/</span><span class="sc">\r?\n</span><span class="ss">/</span>)</span>
<span id="cb6-14"><a href="#cb6-14"></a>            .<span class="fu">filter</span>(pat <span class="kw">=&gt;</span> pat)</span>
<span id="cb6-15"><a href="#cb6-15"></a>            .<span class="fu">map</span>(pat <span class="kw">=&gt;</span> <span class="va">pat</span><span class="op">.</span><span class="fu">trim</span>())<span class="op">;</span></span>
<span id="cb6-16"><a href="#cb6-16"></a>        <span class="kw">const</span> target <span class="op">=</span> <span class="va">utils</span><span class="op">.</span><span class="fu">resolvePath</span>(</span>
<span id="cb6-17"><a href="#cb6-17"></a>            <span class="va">core</span><span class="op">.</span><span class="fu">getInput</span>(<span class="st">&quot;target_dir&quot;</span><span class="op">,</span> <span class="op">{</span> required<span class="op">:</span> <span class="kw">true</span> <span class="op">}</span>)</span>
<span id="cb6-18"><a href="#cb6-18"></a>        )<span class="op">;</span></span>
<span id="cb6-19"><a href="#cb6-19"></a></span>
<span id="cb6-20"><a href="#cb6-20"></a>        <span class="cf">await</span> <span class="va">io</span><span class="op">.</span><span class="fu">mkdirP</span>(target)<span class="op">;</span></span>
<span id="cb6-21"><a href="#cb6-21"></a>        <span class="va">core</span><span class="op">.</span><span class="fu">debug</span>(<span class="vs">`mkdir -p </span><span class="sc">${</span>target<span class="sc">}</span><span class="vs">`</span>)<span class="op">;</span></span>
<span id="cb6-22"><a href="#cb6-22"></a></span>
<span id="cb6-23"><a href="#cb6-23"></a>        <span class="va">files</span><span class="op">.</span><span class="fu">forEach</span>(<span class="kw">async</span> <span class="fu">function</span>(file) <span class="op">{</span></span>
<span id="cb6-24"><a href="#cb6-24"></a>            <span class="cf">try</span> <span class="op">{</span></span>
<span id="cb6-25"><a href="#cb6-25"></a>                <span class="kw">const</span> path <span class="op">=</span> <span class="va">source</span><span class="op">.</span><span class="fu">concat</span>(<span class="st">&quot;/&quot;</span><span class="op">,</span> file)<span class="op">;</span></span>
<span id="cb6-26"><a href="#cb6-26"></a>                <span class="cf">await</span> <span class="va">io</span><span class="op">.</span><span class="fu">mv</span>(path<span class="op">,</span> target)<span class="op">;</span></span>
<span id="cb6-27"><a href="#cb6-27"></a>                <span class="va">core</span><span class="op">.</span><span class="fu">debug</span>(<span class="vs">`mv </span><span class="sc">${</span>path<span class="sc">}</span><span class="vs"> to </span><span class="sc">${</span>target<span class="sc">}</span><span class="vs">`</span>)<span class="op">;</span></span>
<span id="cb6-28"><a href="#cb6-28"></a>            <span class="op">}</span> <span class="fu">catch</span> (error) <span class="op">{</span></span>
<span id="cb6-29"><a href="#cb6-29"></a>                <span class="va">core</span><span class="op">.</span><span class="fu">warning</span>(<span class="va">error</span><span class="op">.</span><span class="at">message</span>)<span class="op">;</span></span>
<span id="cb6-30"><a href="#cb6-30"></a>            <span class="op">}</span></span>
<span id="cb6-31"><a href="#cb6-31"></a>        <span class="op">}</span>)<span class="op">;</span></span>
<span id="cb6-32"><a href="#cb6-32"></a>    <span class="op">}</span> <span class="fu">catch</span> (error) <span class="op">{</span></span>
<span id="cb6-33"><a href="#cb6-33"></a>        <span class="va">core</span><span class="op">.</span><span class="fu">warning</span>(<span class="va">error</span><span class="op">.</span><span class="at">message</span>)<span class="op">;</span></span>
<span id="cb6-34"><a href="#cb6-34"></a>    <span class="op">}</span></span>
<span id="cb6-35"><a href="#cb6-35"></a><span class="op">}</span></span>
<span id="cb6-36"><a href="#cb6-36"></a></span>
<span id="cb6-37"><a href="#cb6-37"></a><span class="fu">run</span>()<span class="op">;</span></span>
<span id="cb6-38"><a href="#cb6-38"></a></span>
<span id="cb6-39"><a href="#cb6-39"></a><span class="im">export</span> <span class="im">default</span> run<span class="op">;</span></span></code></pre></div>
<p>使うときはこんな感じ:</p>
<div class="sourceCode" id="cb7"><pre class="sourceCode yaml"><code class="sourceCode yaml"><span id="cb7-1"><a href="#cb7-1"></a><span class="at">    </span><span class="kw">-</span><span class="at"> </span><span class="fu">name</span><span class="kw">:</span><span class="at"> Move .stack/pantry to temp</span></span>
<span id="cb7-2"><a href="#cb7-2"></a><span class="at">      </span><span class="fu">uses</span><span class="kw">:</span><span class="at"> matsubara0507/actions/move-files@master</span></span>
<span id="cb7-3"><a href="#cb7-3"></a><span class="at">      </span><span class="fu">with</span><span class="kw">:</span></span>
<span id="cb7-4"><a href="#cb7-4"></a><span class="at">        </span><span class="fu">source_dir</span><span class="kw">:</span><span class="at"> ~/.stack-temp/pantry</span></span>
<span id="cb7-5"><a href="#cb7-5"></a><span class="fu">        source_files</span><span class="kw">: </span><span class="ch">|</span></span>
<span id="cb7-6"><a href="#cb7-6"></a>          pantry</span>
<span id="cb7-7"><a href="#cb7-7"></a><span class="at">        </span><span class="fu">target_dir</span><span class="kw">:</span><span class="at"> ~/.stack</span></span></code></pre></div>
<p>実は，GitHub Actions には隠し機能（現状ドキュメントには書いてない）として <code>post</code> と <code>post-if</code> というのがある（<code>actions.yml</code> に設定できる）:</p>
<div class="sourceCode" id="cb8"><pre class="sourceCode yaml"><code class="sourceCode yaml"><span id="cb8-1"><a href="#cb8-1"></a><span class="fu">name</span><span class="kw">:</span><span class="at"> </span><span class="st">&#39;Move Files&#39;</span></span>
<span id="cb8-2"><a href="#cb8-2"></a><span class="fu">description</span><span class="kw">:</span><span class="at"> </span><span class="st">&#39;move files to other direcotory&#39;</span></span>
<span id="cb8-3"><a href="#cb8-3"></a><span class="fu">inputs</span><span class="kw">:</span></span>
<span id="cb8-4"><a href="#cb8-4"></a><span class="at">  </span><span class="fu">source_dir</span><span class="kw">:</span></span>
<span id="cb8-5"><a href="#cb8-5"></a><span class="at">    </span><span class="fu">required</span><span class="kw">:</span><span class="at"> </span><span class="ch">true</span></span>
<span id="cb8-6"><a href="#cb8-6"></a><span class="at">  </span><span class="fu">source_files</span><span class="kw">:</span></span>
<span id="cb8-7"><a href="#cb8-7"></a><span class="at">    </span><span class="fu">required</span><span class="kw">:</span><span class="at"> </span><span class="ch">true</span></span>
<span id="cb8-8"><a href="#cb8-8"></a><span class="at">  </span><span class="fu">target_dir</span><span class="kw">:</span></span>
<span id="cb8-9"><a href="#cb8-9"></a><span class="at">    </span><span class="fu">require</span><span class="kw">:</span><span class="at"> </span><span class="ch">true</span></span>
<span id="cb8-10"><a href="#cb8-10"></a><span class="fu">runs</span><span class="kw">:</span></span>
<span id="cb8-11"><a href="#cb8-11"></a><span class="at">  </span><span class="fu">using</span><span class="kw">:</span><span class="at"> </span><span class="st">&#39;node12&#39;</span></span>
<span id="cb8-12"><a href="#cb8-12"></a><span class="at">  </span><span class="fu">main</span><span class="kw">:</span><span class="at"> </span><span class="st">&#39;dist/move/index.js&#39;</span></span>
<span id="cb8-13"><a href="#cb8-13"></a><span class="at">  </span><span class="fu">post</span><span class="kw">:</span><span class="at"> </span><span class="st">&#39;dist/restore/index.js&#39;</span><span class="co"> # move.ts とは全く逆のことをするだけ</span></span>
<span id="cb8-14"><a href="#cb8-14"></a><span class="at">  </span><span class="fu">post-if</span><span class="kw">:</span><span class="at"> </span><span class="st">&#39;success()&#39;</span><span class="co">          # move が成功したときにだけ</span></span></code></pre></div>
<p>これは <a href="https://github.com/actions/cache">actions/cache</a> や <a href="https://github.com/actions/checkout">actions/checkout</a> がやっているやつで，ジョブステップの最後にデストラクタのように指定したアクションを実行してくれる機能だ． ちなみに，実行したステップとは逆順にポストステップは実行する．</p>
<p>これと actions/cache を組み合わせることで，自由にキャッシュしたいディレクトリを分割してキャッシュすることができるようになった！</p>
<div class="sourceCode" id="cb9"><pre class="sourceCode yaml"><code class="sourceCode yaml"><span id="cb9-1"><a href="#cb9-1"></a><span class="at">    </span><span class="fu">steps</span><span class="kw">:</span></span>
<span id="cb9-2"><a href="#cb9-2"></a><span class="at">    </span><span class="kw">-</span><span class="at"> </span><span class="fu">uses</span><span class="kw">:</span><span class="at"> actions/checkout@v1</span></span>
<span id="cb9-3"><a href="#cb9-3"></a><span class="at">      </span><span class="fu">with</span><span class="kw">:</span></span>
<span id="cb9-4"><a href="#cb9-4"></a><span class="at">        </span><span class="fu">fetch-depth</span><span class="kw">:</span><span class="at"> </span><span class="dv">1</span></span>
<span id="cb9-5"><a href="#cb9-5"></a></span>
<span id="cb9-6"><a href="#cb9-6"></a><span class="at">    </span><span class="kw">-</span><span class="at"> </span><span class="fu">name</span><span class="kw">:</span><span class="at"> Cache .stack</span></span>
<span id="cb9-7"><a href="#cb9-7"></a><span class="at">      </span><span class="fu">id</span><span class="kw">:</span><span class="at"> cache-stack</span></span>
<span id="cb9-8"><a href="#cb9-8"></a><span class="at">      </span><span class="fu">uses</span><span class="kw">:</span><span class="at"> actions/cache@v1</span></span>
<span id="cb9-9"><a href="#cb9-9"></a><span class="at">      </span><span class="fu">with</span><span class="kw">:</span></span>
<span id="cb9-10"><a href="#cb9-10"></a><span class="at">        </span><span class="fu">path</span><span class="kw">:</span><span class="at"> ~/.stack</span></span>
<span id="cb9-11"><a href="#cb9-11"></a><span class="at">        </span><span class="fu">key</span><span class="kw">:</span><span class="at"> ${{ runner.os }}-stack-${{ hashFiles(&#39;**/stack.yaml.lock&#39;) }}</span></span>
<span id="cb9-12"><a href="#cb9-12"></a><span class="fu">        restore-keys</span><span class="kw">: </span><span class="ch">|</span></span>
<span id="cb9-13"><a href="#cb9-13"></a>          ${{ runner.os }}-stack-</span>
<span id="cb9-14"><a href="#cb9-14"></a></span>
<span id="cb9-15"><a href="#cb9-15"></a><span class="at">    </span><span class="kw">-</span><span class="at"> </span><span class="fu">name</span><span class="kw">:</span><span class="at"> Cache .stack/pantry</span></span>
<span id="cb9-16"><a href="#cb9-16"></a><span class="at">      </span><span class="fu">id</span><span class="kw">:</span><span class="at"> cache-pantry</span></span>
<span id="cb9-17"><a href="#cb9-17"></a><span class="at">      </span><span class="fu">uses</span><span class="kw">:</span><span class="at"> actions/cache@v1</span></span>
<span id="cb9-18"><a href="#cb9-18"></a><span class="at">      </span><span class="fu">with</span><span class="kw">:</span></span>
<span id="cb9-19"><a href="#cb9-19"></a><span class="at">        </span><span class="fu">path</span><span class="kw">:</span><span class="at"> ~/.stack-temp/pantry</span></span>
<span id="cb9-20"><a href="#cb9-20"></a><span class="at">        </span><span class="fu">key</span><span class="kw">:</span><span class="at"> ${{ runner.os }}-pantry-${{ hashFiles(&#39;**/stack.yaml.lock&#39;) }}</span></span>
<span id="cb9-21"><a href="#cb9-21"></a><span class="fu">        restore-keys</span><span class="kw">: </span><span class="ch">|</span></span>
<span id="cb9-22"><a href="#cb9-22"></a>          ${{ runner.os }}-pantry-</span>
<span id="cb9-23"><a href="#cb9-23"></a></span>
<span id="cb9-24"><a href="#cb9-24"></a><span class="at">    </span><span class="kw">-</span><span class="at"> </span><span class="fu">name</span><span class="kw">:</span><span class="at"> Move .stack/pantry to temp</span></span>
<span id="cb9-25"><a href="#cb9-25"></a><span class="at">      </span><span class="fu">uses</span><span class="kw">:</span><span class="at"> matsubara0507/actions/move-files@master</span></span>
<span id="cb9-26"><a href="#cb9-26"></a><span class="at">      </span><span class="fu">with</span><span class="kw">:</span></span>
<span id="cb9-27"><a href="#cb9-27"></a><span class="at">        </span><span class="fu">source_dir</span><span class="kw">:</span><span class="at"> ~/.stack-temp/pantry</span></span>
<span id="cb9-28"><a href="#cb9-28"></a><span class="fu">        source_files</span><span class="kw">: </span><span class="ch">|</span></span>
<span id="cb9-29"><a href="#cb9-29"></a>          pantry</span>
<span id="cb9-30"><a href="#cb9-30"></a><span class="at">        </span><span class="fu">target_dir</span><span class="kw">:</span><span class="at"> ~/.stack</span></span>
<span id="cb9-31"><a href="#cb9-31"></a></span>
<span id="cb9-32"><a href="#cb9-32"></a><span class="at">    </span><span class="kw">-</span><span class="at"> </span><span class="fu">uses</span><span class="kw">:</span><span class="at"> actions/setup-haskell@v1</span></span>
<span id="cb9-33"><a href="#cb9-33"></a><span class="at">    ...</span></span></code></pre></div>
<p>ちょっとわかりにくいですが，別々にキャッシュしたディレクトリを <code>move-files</code> で合体させるイメージ．</p>
<h3 id="キャッシュバージョンを付ける">キャッシュバージョンを付ける</h3>
<p>今回の PR のコミット履歴を見るとわかるのだが迷走してる． なぜかというと，actions/cache の「cache save は cache key が <strong>ヒットしなかったときにだけ</strong> 行う」という性質に気づくのに時間がかかったから． <code>key</code> にはヒットせず <code>restore-keys</code> でヒットしたときには restore をして更にキャッシュを更新する． しかし，key に変更が無いとズーーーット古いキャッシュを使い続けてしまった． 変だと思った．</p>
<p><a href="https://github.com/actions/cache/issues/2">現状キャッシュを手動でクリアする方法が無い</a>． まぁなんでも良かったので cache-version というサフィックスを付けることにした笑:</p>
<div class="sourceCode" id="cb10"><pre class="sourceCode yaml"><code class="sourceCode yaml"><span id="cb10-1"><a href="#cb10-1"></a><span class="at">    </span><span class="fu">strategy</span><span class="kw">:</span></span>
<span id="cb10-2"><a href="#cb10-2"></a><span class="at">      </span><span class="fu">matrix</span><span class="kw">:</span></span>
<span id="cb10-3"><a href="#cb10-3"></a><span class="at">        </span><span class="fu">ghc</span><span class="kw">:</span><span class="at"> </span><span class="kw">[</span><span class="st">&quot;8.6.5&quot;</span><span class="kw">]</span></span>
<span id="cb10-4"><a href="#cb10-4"></a><span class="at">        </span><span class="fu">cabal</span><span class="kw">:</span><span class="at"> </span><span class="kw">[</span><span class="st">&quot;3.0&quot;</span><span class="kw">]</span></span>
<span id="cb10-5"><a href="#cb10-5"></a><span class="at">        </span><span class="fu">cache-version</span><span class="kw">:</span><span class="at"> </span><span class="kw">[</span><span class="st">&quot;v4&quot;</span><span class="kw">]</span></span>
<span id="cb10-6"><a href="#cb10-6"></a></span>
<span id="cb10-7"><a href="#cb10-7"></a><span class="at">    </span><span class="fu">steps</span><span class="kw">:</span></span>
<span id="cb10-8"><a href="#cb10-8"></a><span class="at">    </span><span class="kw">-</span><span class="at"> </span><span class="fu">uses</span><span class="kw">:</span><span class="at"> actions/checkout@v1</span></span>
<span id="cb10-9"><a href="#cb10-9"></a><span class="at">      </span><span class="fu">with</span><span class="kw">:</span></span>
<span id="cb10-10"><a href="#cb10-10"></a><span class="at">        </span><span class="fu">fetch-depth</span><span class="kw">:</span><span class="at"> </span><span class="dv">1</span></span>
<span id="cb10-11"><a href="#cb10-11"></a></span>
<span id="cb10-12"><a href="#cb10-12"></a><span class="at">    </span><span class="kw">-</span><span class="at"> </span><span class="fu">name</span><span class="kw">:</span><span class="at"> Cache .stack</span></span>
<span id="cb10-13"><a href="#cb10-13"></a><span class="at">      </span><span class="fu">id</span><span class="kw">:</span><span class="at"> cache-stack</span></span>
<span id="cb10-14"><a href="#cb10-14"></a><span class="at">      </span><span class="fu">uses</span><span class="kw">:</span><span class="at"> actions/cache@v1</span></span>
<span id="cb10-15"><a href="#cb10-15"></a><span class="at">      </span><span class="fu">with</span><span class="kw">:</span></span>
<span id="cb10-16"><a href="#cb10-16"></a><span class="at">        </span><span class="fu">path</span><span class="kw">:</span><span class="at"> ~/.stack</span></span>
<span id="cb10-17"><a href="#cb10-17"></a><span class="at">        </span><span class="fu">key</span><span class="kw">:</span><span class="at"> ${{ runner.os }}-stack-${{ hashFiles(&#39;**/stack.yaml.lock&#39;) }}-${{ matrix.cache-version }}</span></span>
<span id="cb10-18"><a href="#cb10-18"></a><span class="fu">        restore-keys</span><span class="kw">: </span><span class="ch">|</span></span>
<span id="cb10-19"><a href="#cb10-19"></a>          ${{ runner.os }}-stack-</span></code></pre></div>
<p>少なくとも，キャッシュを試行錯誤してるときには便利だ．</p>
<h3 id="ビフォーアフター">ビフォーアフター</h3>
<p>もともと25分以上かかかっていたビルドが:</p>
<p><img src="/assets/haskell-with-gh-actions/before.jpg"></img></p>
<p>なんと2分まで減った！</p>
<p><img src="/assets/haskell-with-gh-actions/after.jpg"></img></p>
<h2 id="おまけ-github-packages">おまけ: GitHub Packages</h2>
<p>Haskell プログラムのバイナリを配布するために，僕は普段 Docker Image にして Docker Hub に置いてた． しかし，先日 GitHub の 2019年のもう一つの目玉機能「GitHub Packages」も GA されたので，こっちに置いてみることにした（なんと Docker レジストリにもなる）．</p>
<p><a href="https://github.com/matsubara0507/octbook/packages"><img src="/assets/haskell-with-gh-actions/image.jpg"></img></a></p>
<p>ちなみに，現状パブリックリポジトリのパッケージであっても <code>docker pull</code> するのに認証が必要である． その点がとても残念(改善されることを祈る)．</p>
<h3 id="ログイン">ログイン</h3>
<p>意外と手間取った． どうやら MFA 設定してるとトークンを使う他ないらしい． しかも，新しく（？）追加された <code>write:packages</code> というスコープをオンしないとダメっぽい．</p>
<h3 id="github-actions-からプッシュ">GitHub Actions からプッシュ</h3>
<p>こんな感じ</p>
<div class="sourceCode" id="cb11"><pre class="sourceCode yaml"><code class="sourceCode yaml"><span id="cb11-1"><a href="#cb11-1"></a><span class="at">    </span><span class="kw">-</span><span class="at"> </span><span class="fu">name</span><span class="kw">:</span><span class="at"> Build binary</span></span>
<span id="cb11-2"><a href="#cb11-2"></a><span class="at">      </span><span class="fu">run</span><span class="kw">:</span><span class="at"> stack --system-ghc install --local-bin-path=./bin</span></span>
<span id="cb11-3"><a href="#cb11-3"></a></span>
<span id="cb11-4"><a href="#cb11-4"></a><span class="at">    </span><span class="kw">-</span><span class="at"> </span><span class="fu">name</span><span class="kw">:</span><span class="at"> Build Docker Image</span></span>
<span id="cb11-5"><a href="#cb11-5"></a><span class="at">      </span><span class="fu">run</span><span class="kw">:</span><span class="at"> docker build -t octbook . --build-arg local_bin_path=./bin</span></span>
<span id="cb11-6"><a href="#cb11-6"></a></span>
<span id="cb11-7"><a href="#cb11-7"></a><span class="at">    </span><span class="kw">-</span><span class="at"> </span><span class="fu">name</span><span class="kw">:</span><span class="at"> Push Docker Image</span></span>
<span id="cb11-8"><a href="#cb11-8"></a><span class="at">      </span><span class="fu">if</span><span class="kw">:</span><span class="at"> github.ref == &#39;refs/heads/master&#39;</span></span>
<span id="cb11-9"><a href="#cb11-9"></a><span class="fu">      run</span><span class="kw">: </span><span class="ch">|</span></span>
<span id="cb11-10"><a href="#cb11-10"></a>        echo ${{ secrets.GITHUB_TOKEN }} | docker login docker.pkg.github.com -u matsubara0507 --password-stdin</span>
<span id="cb11-11"><a href="#cb11-11"></a>        docker tag octbook docker.pkg.github.com/matsubara0507/octbook/cli</span>
<span id="cb11-12"><a href="#cb11-12"></a>        docker push docker.pkg.github.com/matsubara0507/octbook/cli:latest</span>
<span id="cb11-13"><a href="#cb11-13"></a></span>
<span id="cb11-14"><a href="#cb11-14"></a><span class="at">    </span><span class="kw">-</span><span class="at"> </span><span class="fu">name</span><span class="kw">:</span><span class="at"> Push Docker Image (tag)</span></span>
<span id="cb11-15"><a href="#cb11-15"></a><span class="at">      </span><span class="fu">if</span><span class="kw">:</span><span class="at"> startsWith(github.ref, &#39;refs/tags/&#39;)</span></span>
<span id="cb11-16"><a href="#cb11-16"></a><span class="fu">      run</span><span class="kw">: </span><span class="ch">|</span></span>
<span id="cb11-17"><a href="#cb11-17"></a>        echo ${{ secrets.GITHUB_TOKEN }} | docker login docker.pkg.github.com -u matsubara0507 --password-stdin</span>
<span id="cb11-18"><a href="#cb11-18"></a>        docker tag octbook docker.pkg.github.com/matsubara0507/octbook/cli:${GITHUB_REF#refs/tags/}</span>
<span id="cb11-19"><a href="#cb11-19"></a>        docker push docker.pkg.github.com/matsubara0507/octbook/cli:${GITHUB_REF#refs/tags/}</span></code></pre></div>
<p><code>if: github.ref == &#39;refs/heads/master&#39;</code> とすることで master ブランチのときだけ，<code>if: startsWith(github.ref, &#39;refs/tags/&#39;)</code> とすることで tag のときだけ，それぞれのステップを評価させることができる．</p>
<p>ちなみに，<code>GITHUB_TOKEN</code> という Secret はデフォルトで用意されてる． <a href="https://help.github.com/en/actions/automating-your-workflow-with-github-actions/authenticating-with-the-github_token#permissions-for-the-github_token">スコープについてはここに書いてある</a>． packages の read/write があるのでそのまま利用できるね．</p>
<h2 id="おしまい">おしまい</h2>
<p>まぁきっと数ヶ月後ぐらいにはキャッシュ容量の制限が緩和されてこんなことしなくても良くなると思うけど．</p>
  </div>]]></summary>
</entry>
<entry>
    <title>Elm で line charts する</title>
    <link href="https://matsubara0507.github.io/posts/2019-11-15-line-charts-with-elm.html" />
    <id>https://matsubara0507.github.io/posts/2019-11-15-line-charts-with-elm.html</id>
    <published>2019-11-15T00:00:00Z</published>
    <updated>2019-11-15T00:00:00Z</updated>
    <summary type="html"><![CDATA[<div class="post-content" itemprop="articleBody">
    <p>Elm で作っているスコアボードにスコアの線グラフを追加したかったので <a href="https://package.elm-lang.org/packages/terezka/line-charts/"><code>terezka/line-charts</code></a> というパッケージを使って追加した． っていうメモ書き。 追加の PR はこれです:</p>
<ul>
<li><a href="https://github.com/matsubara0507/git-plantation/pull/49">スコアボードにグラフを描写するページを追加 by matsubara0507 · Pull Request #49 · matsubara0507/git-plantation</a></li>
</ul>
<p>最終的に出来上がったグラフがこんな感じ:</p>
<p><img src="/assets/line-charts-with-elm/graph.jpg"></img></p>
<p>実は色をランダムに生成している部分がキモ(?)です． ちなみに，本記事で扱う <code>terezka/line-charts</code> パッケージのバージョンは 2.0 です．</p>
<h2 id="terezkaline-charts">terezka/line-charts</h2>
<p>どんなグラフが書けるかは作者が用意してる<a href="https://terezka.github.io/line-charts">サンプルページ</a>を見ると良い． ただし，<code>see source</code> ボタンで右からニュッっと出てくるソースコードは Elm 0.19 では動かない点に注意． サンプルページのコードはおそらく<a href="https://github.com/terezka/line-charts/blob/2.0.0/docs/src">ココ</a>にある．</p>
<p>今回は競技プログラミングのスコア変遷をグラフ化したかったので <a href="https://github.com/terezka/line-charts/blob/2.0.0/docs/src/Stepped.elm"><code>Steeped</code></a> というグラフを使うことにする(段々になっているやつ)．</p>
<h3 id="linechart.viewcustom-を使ってみる"><code>LineChart.viewCustom</code> を使ってみる</h3>
<p>グラフを描写するには <code>LineChart.viewCustom</code> 関数を使う:</p>
<div class="sourceCode" id="cb1"><pre class="sourceCode elm"><code class="sourceCode elm"><span id="cb1-1"><a href="#cb1-1"></a><span class="fu">viewCustom</span></span>
<span id="cb1-2"><a href="#cb1-2"></a>  : <span class="dt">Config</span> <span class="fu">data</span> <span class="fu">msg</span></span>
<span id="cb1-3"><a href="#cb1-3"></a>  <span class="op">-&gt;</span> <span class="dt">List</span> (<span class="dt">Series</span> <span class="fu">data</span>)</span>
<span id="cb1-4"><a href="#cb1-4"></a>  <span class="op">-&gt;</span> <span class="dt">Svg</span> <span class="fu">msg</span></span></code></pre></div>
<p>1引数めがどうのように描写するかの設定で，2引数目は描写する(プロットする)データのリストをである． <code>Config data msg</code> 型は次のようになっている:</p>
<div class="sourceCode" id="cb2"><pre class="sourceCode elm"><code class="sourceCode elm"><span id="cb2-1"><a href="#cb2-1"></a><span class="kw">type</span> <span class="kw">alias</span> <span class="dt">Config</span> <span class="fu">data</span> <span class="fu">msg</span> <span class="op">=</span></span>
<span id="cb2-2"><a href="#cb2-2"></a>    { <span class="fu">x</span> : <span class="dt">Axis</span><span class="op">.</span><span class="dt">Config</span> <span class="fu">data</span> <span class="fu">msg</span></span>
<span id="cb2-3"><a href="#cb2-3"></a>    <span class="op">,</span> <span class="fu">y</span> : <span class="dt">Axis</span><span class="op">.</span><span class="dt">Config</span> <span class="fu">data</span> <span class="fu">msg</span></span>
<span id="cb2-4"><a href="#cb2-4"></a>    <span class="op">,</span> <span class="fu">container</span> : <span class="dt">Container</span><span class="op">.</span><span class="dt">Config</span> <span class="fu">msg</span></span>
<span id="cb2-5"><a href="#cb2-5"></a>    <span class="op">,</span> <span class="fu">intersection</span> : <span class="dt">Axis</span><span class="op">.</span><span class="dt">Intersection</span><span class="op">.</span><span class="dt">Config</span></span>
<span id="cb2-6"><a href="#cb2-6"></a>    <span class="op">,</span> <span class="fu">interpolation</span> : <span class="dt">Interpolation</span><span class="op">.</span><span class="dt">Config</span></span>
<span id="cb2-7"><a href="#cb2-7"></a>    <span class="op">,</span> <span class="fu">legends</span> : <span class="dt">Legends</span><span class="op">.</span><span class="dt">Config</span> <span class="fu">data</span> <span class="fu">msg</span></span>
<span id="cb2-8"><a href="#cb2-8"></a>    <span class="op">,</span> <span class="fu">events</span> : <span class="dt">Events</span><span class="op">.</span><span class="dt">Config</span> <span class="fu">data</span> <span class="fu">msg</span></span>
<span id="cb2-9"><a href="#cb2-9"></a>    <span class="op">,</span> <span class="fu">area</span> : <span class="dt">Area</span><span class="op">.</span><span class="dt">Config</span></span>
<span id="cb2-10"><a href="#cb2-10"></a>    <span class="op">,</span> <span class="fu">grid</span> : <span class="dt">Grid</span><span class="op">.</span><span class="dt">Config</span></span>
<span id="cb2-11"><a href="#cb2-11"></a>    <span class="op">,</span> <span class="fu">line</span> : <span class="dt">Line</span><span class="op">.</span><span class="dt">Config</span> <span class="fu">data</span></span>
<span id="cb2-12"><a href="#cb2-12"></a>    <span class="op">,</span> <span class="fu">dots</span> : <span class="dt">Dots</span><span class="op">.</span><span class="dt">Config</span> <span class="fu">data</span></span>
<span id="cb2-13"><a href="#cb2-13"></a>    <span class="op">,</span> <span class="fu">junk</span> : <span class="dt">Junk</span><span class="op">.</span><span class="dt">Config</span> <span class="fu">data</span> <span class="fu">msg</span></span>
<span id="cb2-14"><a href="#cb2-14"></a>    }</span></code></pre></div>
<p>それぞれサブモジュールの設定をしている(例えば <code>container</code> フィールドは <code>LineChart.Container</code> モジュール):</p>
<ul>
<li><code>x</code>,<code>y</code> はX軸とY軸の設定</li>
<li><code>container</code> はグラフを描写する外枠の設定(たぶん)</li>
<li><code>intersection</code> は両軸の交点の設定(真ん中にするとか左下にするとか)</li>
<li><code>interpolation</code> は点と点を結ぶ線の引き方を設定(直線か曲線かなど)</li>
<li><code>legends</code> はグラフの凡例のを設定(どの線が何のグラフかなど)</li>
<li><code>events</code> はグラフ上でのイベント(<code>Msg</code>)を設定(クリックとかマウスホバーとか)</li>
<li><code>area</code> は線の下の部分の描写の仕方を設定
<ul>
<li><code>default</code> だと何も描写しないのでただの線グラフになる</li>
<li><code>normal</code> だと同じ色で塗りつぶしてくれる(引数は <code>opacity</code>)</li>
</ul></li>
<li><code>grid</code> はグラフのグリッドを設定(そのまんま)</li>
<li><code>line</code> は線の幅やホバーした時の動作を設定</li>
<li><code>dots</code> は点の大きさやホバーした時の動作を設定</li>
<li><code>junk</code> は点や線にホバーした時にモーダル(?)かなんかを表示する設定(たぶん)</li>
</ul>
<p>今回は基本的にサンプルコードのまんまで，軸や <code>junk</code> の設定を少しだけいじった．</p>
<h3 id="プロットデータを用意する">プロットデータを用意する</h3>
<p>2引数目の <code>Series data</code> はプロットしたいデータ型(<code>data</code>)に描写するための情報を付与したデータ型だ． 次の関数などで変換する:</p>
<div class="sourceCode" id="cb3"><pre class="sourceCode elm"><code class="sourceCode elm"><span id="cb3-1"><a href="#cb3-1"></a><span class="fu">line</span> : <span class="dt">Color</span> <span class="op">-&gt;</span> <span class="dt">Shape</span> <span class="op">-&gt;</span> <span class="dt">String</span> <span class="op">-&gt;</span> <span class="dt">List</span> <span class="fu">data</span> <span class="op">-&gt;</span> <span class="dt">Series</span> <span class="fu">data</span></span>
<span id="cb3-2"><a href="#cb3-2"></a><span class="fu">dash</span> : <span class="dt">Color</span> <span class="op">-&gt;</span> <span class="dt">Shape</span> <span class="op">-&gt;</span> <span class="dt">String</span> <span class="op">-&gt;</span> <span class="dt">List</span> <span class="dt">Float</span> <span class="op">-&gt;</span> <span class="dt">List</span> <span class="fu">data</span> <span class="op">-&gt;</span> <span class="dt">Series</span> <span class="fu">data</span></span></code></pre></div>
<p><code>line</code> は直線で <code>dash</code> はたぶん破線． <code>Color</code> は色を，<code>Shape</code> は <code>LineChart.Dots</code> にある関数で点の形を，<code>String</code> は線の凡例名を与える． で，実際のプロットデータは <code>List data</code> だ． <code>data</code> から何をX軸にして，何をY軸にするかは <code>Config</code> の <code>x</code>・<code>y</code> で指定する(<code>variable</code>)．</p>
<p>今回は，各チームのスコアデータの時間毎での遷移を描写したいので，X軸に正解時間をY軸に総ポイントを割り当てる． そのためのデータ型を用意した:</p>
<div class="sourceCode" id="cb4"><pre class="sourceCode elm"><code class="sourceCode elm"><span id="cb4-1"><a href="#cb4-1"></a><span class="kw">type</span> <span class="kw">alias</span> <span class="dt">ScoreHistory</span> <span class="op">=</span></span>
<span id="cb4-2"><a href="#cb4-2"></a>    { <span class="fu">point</span> : <span class="dt">Int</span>                <span class="co">-- 総ポイント</span></span>
<span id="cb4-3"><a href="#cb4-3"></a>    <span class="op">,</span> <span class="fu">latest</span> : <span class="dt">Maybe</span> <span class="dt">API</span><span class="op">.</span><span class="dt">Status</span>  <span class="co">-- 最後にクリアステータス</span></span>
<span id="cb4-4"><a href="#cb4-4"></a>    }</span>
<span id="cb4-5"><a href="#cb4-5"></a></span>
<span id="cb4-6"><a href="#cb4-6"></a><span class="kw">type</span> <span class="kw">alias</span> <span class="dt">Status</span> <span class="op">=</span></span>
<span id="cb4-7"><a href="#cb4-7"></a>    { <span class="fu">problem_id</span> : <span class="dt">Int</span></span>
<span id="cb4-8"><a href="#cb4-8"></a>    <span class="op">,</span> <span class="fu">correct</span> : <span class="dt">Bool</span>           <span class="co">-- クリアしてると True</span></span>
<span id="cb4-9"><a href="#cb4-9"></a>    <span class="op">,</span> <span class="fu">corrected_at</span> : <span class="dt">Maybe</span> <span class="dt">Int</span> <span class="co">-- まだクリアしてないと Nothing</span></span>
<span id="cb4-10"><a href="#cb4-10"></a>    }</span></code></pre></div>
<p><code>Status</code> はもともとある型で，サーバーサイドからスコア(<code>Score</code>)を取得する際に用いる． このサーバーからのスコアから <code>Series ScoreHistory</code> を構築する関数を用意した:</p>
<div class="sourceCode" id="cb5"><pre class="sourceCode elm"><code class="sourceCode elm"><span id="cb5-1"><a href="#cb5-1"></a><span class="kw">type</span> <span class="kw">alias</span> <span class="dt">Score</span> <span class="op">=</span></span>
<span id="cb5-2"><a href="#cb5-2"></a>    { <span class="fu">team</span> : <span class="dt">String</span></span>
<span id="cb5-3"><a href="#cb5-3"></a>    <span class="op">,</span> <span class="fu">point</span> : <span class="dt">Int</span></span>
<span id="cb5-4"><a href="#cb5-4"></a>    <span class="op">,</span> <span class="fu">stats</span> : <span class="dt">List</span> <span class="dt">Status</span></span>
<span id="cb5-5"><a href="#cb5-5"></a>    }</span>
<span id="cb5-6"><a href="#cb5-6"></a></span>
<span id="cb5-7"><a href="#cb5-7"></a><span class="fu">buildScoreHistories</span> : <span class="dt">Model</span> <span class="op">-&gt;</span> <span class="dt">Color</span> <span class="op">-&gt;</span> <span class="dt">API</span><span class="op">.</span><span class="dt">Score</span> <span class="op">-&gt;</span> <span class="dt">LineChart</span><span class="op">.</span><span class="dt">Series</span> <span class="dt">ScoreHistory</span></span>
<span id="cb5-8"><a href="#cb5-8"></a><span class="fu">buildScoreHistories</span> <span class="fu">model</span> <span class="fu">color</span> <span class="fu">score</span> <span class="op">=</span></span>
<span id="cb5-9"><a href="#cb5-9"></a>    <span class="fu">score</span><span class="op">.</span><span class="fu">stats</span></span>
<span id="cb5-10"><a href="#cb5-10"></a>        <span class="op">|&gt;</span> <span class="dt">List</span><span class="op">.</span><span class="fu">filter</span> <span class="op">.</span><span class="fu">correct</span></span>
<span id="cb5-11"><a href="#cb5-11"></a>        <span class="op">|&gt;</span> <span class="dt">List</span><span class="op">.</span><span class="fu">sortBy</span> (<span class="dt">Maybe</span><span class="op">.</span><span class="fu">withDefault</span> <span class="dv">0</span> <span class="op">&lt;&lt;</span> <span class="op">.</span><span class="fu">corrected_at</span>)</span>
<span id="cb5-12"><a href="#cb5-12"></a>        <span class="op">|&gt;</span> <span class="dt">List</span><span class="op">.</span><span class="fu">scanl</span> (<span class="op">::</span>) []</span>
<span id="cb5-13"><a href="#cb5-13"></a>        <span class="op">|&gt;</span> <span class="dt">List</span><span class="op">.</span><span class="fu">map</span> (<span class="fu">buildScoreHistory</span> <span class="fu">model</span>)</span>
<span id="cb5-14"><a href="#cb5-14"></a>        <span class="op">|&gt;</span> <span class="dt">LineChart</span><span class="op">.</span><span class="fu">line</span> <span class="fu">color</span> <span class="dt">Dots</span><span class="op">.</span><span class="fu">circle</span> <span class="fu">score</span><span class="op">.</span><span class="fu">team</span></span>
<span id="cb5-15"><a href="#cb5-15"></a></span>
<span id="cb5-16"><a href="#cb5-16"></a><span class="fu">buildScoreHistory</span> : <span class="dt">Model</span> <span class="op">-&gt;</span> <span class="dt">List</span> <span class="dt">API</span><span class="op">.</span><span class="dt">Status</span> <span class="op">-&gt;</span> <span class="dt">ScoreHistory</span></span>
<span id="cb5-17"><a href="#cb5-17"></a><span class="fu">buildScoreHistory</span> <span class="fu">model</span> <span class="fu">stats</span> <span class="op">=</span></span>
<span id="cb5-18"><a href="#cb5-18"></a>    { <span class="fu">point</span> <span class="op">=</span> <span class="dt">List</span><span class="op">.</span><span class="fu">sum</span> (<span class="dt">List</span><span class="op">.</span><span class="fu">map</span> (<span class="fu">findProblemPoint</span> <span class="fu">model</span>) <span class="fu">stats</span>)</span>
<span id="cb5-19"><a href="#cb5-19"></a>    <span class="op">,</span> <span class="fu">latest</span> <span class="op">=</span> <span class="dt">List</span><span class="op">.</span><span class="fu">head</span> <span class="fu">stats</span></span>
<span id="cb5-20"><a href="#cb5-20"></a>    }</span>
<span id="cb5-21"><a href="#cb5-21"></a></span>
<span id="cb5-22"><a href="#cb5-22"></a><span class="co">-- どの問題が何点かは `Model.problems` にしか書いてない</span></span>
<span id="cb5-23"><a href="#cb5-23"></a><span class="fu">findProblemPoint</span> : <span class="dt">Model</span> <span class="op">-&gt;</span> <span class="dt">API</span><span class="op">.</span><span class="dt">Status</span> <span class="op">-&gt;</span> <span class="dt">Int</span></span>
<span id="cb5-24"><a href="#cb5-24"></a><span class="fu">findProblemPoint</span> <span class="fu">model</span> <span class="fu">status</span> <span class="op">=</span></span>
<span id="cb5-25"><a href="#cb5-25"></a>    <span class="fu">model</span><span class="op">.</span><span class="fu">problems</span></span>
<span id="cb5-26"><a href="#cb5-26"></a>        <span class="op">|&gt;</span> <span class="dt">List</span><span class="op">.</span><span class="fu">find</span> (\<span class="fu">p</span> <span class="op">-&gt;</span> <span class="fu">p</span><span class="op">.</span><span class="fu">id</span> <span class="op">==</span> <span class="fu">status</span><span class="op">.</span><span class="fu">problem_id</span>)</span>
<span id="cb5-27"><a href="#cb5-27"></a>        <span class="op">|&gt;</span> <span class="dt">Maybe</span><span class="op">.</span><span class="fu">map</span> <span class="op">.</span><span class="fu">difficulty</span></span>
<span id="cb5-28"><a href="#cb5-28"></a>        <span class="op">|&gt;</span> <span class="dt">Maybe</span><span class="op">.</span><span class="fu">withDefault</span> <span class="dv">0</span></span></code></pre></div>
<p><code>scanl</code> で綺麗になってるのが気持ちいい． また，<code>variable</code> は次のように設定した:</p>
<div class="sourceCode" id="cb6"><pre class="sourceCode elm"><code class="sourceCode elm"><span id="cb6-1"><a href="#cb6-1"></a><span class="fu">chart</span> : <span class="dt">Model</span> <span class="op">-&gt;</span> <span class="dt">Html</span><span class="op">.</span><span class="dt">Html</span> <span class="dt">Msg</span></span>
<span id="cb6-2"><a href="#cb6-2"></a><span class="fu">chart</span> <span class="fu">model</span> <span class="op">=</span></span>
<span id="cb6-3"><a href="#cb6-3"></a>    <span class="dt">LineChart</span><span class="op">.</span><span class="fu">viewCustom</span></span>
<span id="cb6-4"><a href="#cb6-4"></a>        { <span class="fu">y</span> <span class="op">=</span></span>
<span id="cb6-5"><a href="#cb6-5"></a>            <span class="dt">Axis</span><span class="op">.</span><span class="fu">custom</span></span>
<span id="cb6-6"><a href="#cb6-6"></a>                { <span class="fu">title</span> <span class="op">=</span> <span class="dt">Title</span><span class="op">.</span><span class="fu">default</span> <span class="st">&quot;Point&quot;</span></span>
<span id="cb6-7"><a href="#cb6-7"></a>                <span class="op">,</span> <span class="fu">variable</span> <span class="op">=</span> <span class="dt">Just</span> <span class="op">&lt;&lt;</span> <span class="fu">toFloat</span> <span class="op">&lt;&lt;</span> <span class="op">.</span><span class="fu">point</span></span>
<span id="cb6-8"><a href="#cb6-8"></a>                <span class="op">,</span> <span class="fu">pixels</span> <span class="op">=</span> <span class="dv">380</span></span>
<span id="cb6-9"><a href="#cb6-9"></a>                <span class="op">,</span> <span class="fu">range</span> <span class="op">=</span> <span class="dt">Range</span><span class="op">.</span><span class="fu">padded</span> <span class="dv">20</span> <span class="dv">20</span></span>
<span id="cb6-10"><a href="#cb6-10"></a>                <span class="op">,</span> <span class="fu">axisLine</span> <span class="op">=</span> <span class="dt">AxisLine</span><span class="op">.</span><span class="fu">full</span> <span class="dt">Colors</span><span class="op">.</span><span class="fu">gray</span></span>
<span id="cb6-11"><a href="#cb6-11"></a>                <span class="op">,</span> <span class="fu">ticks</span> <span class="op">=</span> <span class="dt">Ticks</span><span class="op">.</span><span class="fu">float</span> <span class="dv">5</span> <span class="co">-- これは軸に表示する数字の間隔</span></span>
<span id="cb6-12"><a href="#cb6-12"></a>                }</span>
<span id="cb6-13"><a href="#cb6-13"></a>        <span class="op">,</span> <span class="fu">x</span> <span class="op">=</span></span>
<span id="cb6-14"><a href="#cb6-14"></a>            <span class="dt">Axis</span><span class="op">.</span><span class="fu">custom</span></span>
<span id="cb6-15"><a href="#cb6-15"></a>                { <span class="fu">title</span> <span class="op">=</span> <span class="dt">Title</span><span class="op">.</span><span class="fu">default</span> <span class="st">&quot;Time&quot;</span></span>
<span id="cb6-16"><a href="#cb6-16"></a>                <span class="op">,</span> <span class="fu">variable</span> <span class="op">=</span></span>
<span id="cb6-17"><a href="#cb6-17"></a>                    <span class="dt">Maybe</span><span class="op">.</span><span class="fu">map</span> <span class="fu">toFloat</span></span>
<span id="cb6-18"><a href="#cb6-18"></a>                      <span class="op">&lt;&lt;</span> <span class="dt">Maybe</span><span class="op">.</span><span class="fu">map</span> (\<span class="fu">n</span> <span class="op">-&gt;</span> <span class="fu">n</span> <span class="op">*</span> <span class="dv">1000</span>) <span class="co">-- 確かデフォルト millisec</span></span>
<span id="cb6-19"><a href="#cb6-19"></a>                      <span class="op">&lt;&lt;</span> <span class="dt">Maybe</span><span class="op">.</span><span class="fu">andThen</span> <span class="op">.</span><span class="fu">corrected_at</span></span>
<span id="cb6-20"><a href="#cb6-20"></a>                      <span class="op">&lt;&lt;</span> <span class="op">.</span><span class="fu">latest</span></span>
<span id="cb6-21"><a href="#cb6-21"></a>                <span class="op">,</span> <span class="fu">pixels</span> <span class="op">=</span> <span class="dv">1270</span></span>
<span id="cb6-22"><a href="#cb6-22"></a>                <span class="op">,</span> <span class="fu">range</span> <span class="op">=</span> <span class="dt">Range</span><span class="op">.</span><span class="fu">padded</span> <span class="dv">20</span> <span class="dv">20</span></span>
<span id="cb6-23"><a href="#cb6-23"></a>                <span class="op">,</span> <span class="fu">axisLine</span> <span class="op">=</span> <span class="dt">AxisLine</span><span class="op">.</span><span class="fu">full</span> <span class="dt">Colors</span><span class="op">.</span><span class="fu">gray</span></span>
<span id="cb6-24"><a href="#cb6-24"></a>                <span class="op">,</span> <span class="fu">ticks</span> <span class="op">=</span> <span class="dt">Ticks</span><span class="op">.</span><span class="fu">time</span> <span class="fu">model</span><span class="op">.</span><span class="fu">zone</span> <span class="dv">10</span></span>
<span id="cb6-25"><a href="#cb6-25"></a>                }</span>
<span id="cb6-26"><a href="#cb6-26"></a>        <span class="op">...</span></span>
<span id="cb6-27"><a href="#cb6-27"></a>        }</span></code></pre></div>
<p>さて，ここまではいい感じにできた． 問題は <code>buildScoreHistories</code> の <code>Color</code> にどうやってチームごとに違う色を渡すか． <code>LineChart.Colors</code> には事前に色が用意されていたが全部で22色ぐらいしかない． できればチーム数に応じて可変にしたい．</p>
<h2 id="color-を付け変える">Color を付け変える</h2>
<p>グラフ描写に使うグラフの色はチーム数によって可変にしたい． 色を任意個数だけ生成する方法はないか調べてみたところ，<a href="https://package.elm-lang.org/packages/tesk9/palette"><code>tesk9/palette</code></a> の <code>Palette.Cubehelix.generate</code> を使えば実現できそうだ:</p>
<div class="sourceCode" id="cb7"><pre class="sourceCode elm"><code class="sourceCode elm"><span id="cb7-1"><a href="#cb7-1"></a><span class="op">#</span> ただし <span class="dv">0</span><span class="op">-</span><span class="dv">256</span> の間だけ有効</span>
<span id="cb7-2"><a href="#cb7-2"></a><span class="fu">generate</span> : <span class="dt">Int</span> <span class="op">-&gt;</span> <span class="dt">List</span> <span class="dt">Color</span></span></code></pre></div>
<p>ここで問題が一つ． line-charts は別の <code>Color</code> パッケージに依存しており，<code>Color</code> モジュールが衝突して使うことができない！</p>
<p>困った． とりあえず，フォークして差し替えるしかない． 差し替えたものがコチラ:</p>
<ul>
<li><a href="https://github.com/matsubara0507/line-charts/tree/color-palette">matsubara0507/line-charts at color-palette</a></li>
</ul>
<p>Elm のビルドツールにはパッケージをいい感じにフォーク先などに変更する方法がない． ざっくり調べてみたところ，フォークしたもの elm-packages にあげて使うか，プロジェクト内にフォークしたリポジトリを直接置いて参照するか． Elm-jp でも相談してみたところ，後者の方が良さそうなのでそうすることにした．</p>
<h3 id="elm-のパッケージをフォークしたのにa差し替える">Elm のパッケージをフォークしたのにa差し替える</h3>
<p>まずは普通に <code>git submodule</code> をします:</p>
<pre><code>$ mkdir elm-lib
$ git submodule add git@github.com:matsubara0507/line-charts.git elm-lib/line-charts
$ elm-lib/line-charts
$ git checkout color-palette</code></pre>
<p>そしてこのディレクトリも見るように <code>elm.json</code> を書き換えます:</p>
<div class="sourceCode" id="cb9"><pre class="sourceCode diff"><code class="sourceCode diff"><span id="cb9-1"><a href="#cb9-1"></a><span class="dt">@@ -1,30 +1,40 @@</span></span>
<span id="cb9-2"><a href="#cb9-2"></a>  {</span>
<span id="cb9-3"><a href="#cb9-3"></a>      &quot;type&quot;: &quot;application&quot;,</span>
<span id="cb9-4"><a href="#cb9-4"></a>      &quot;source-directories&quot;: [</span>
<span id="cb9-5"><a href="#cb9-5"></a><span class="st">-         &quot;elm-src&quot;</span></span>
<span id="cb9-6"><a href="#cb9-6"></a><span class="va">+         &quot;elm-src&quot;,</span></span>
<span id="cb9-7"><a href="#cb9-7"></a><span class="va">+         &quot;elm-lib/line-charts/src&quot;</span></span>
<span id="cb9-8"><a href="#cb9-8"></a>      ],</span></code></pre></div>
<p>そして，適当に <code>import LineChart</code> を追記して <code>elm make</code> するとどうなるでしょうか？ 残念ながらうまくいきません:</p>
<pre><code>$ elm make elm-src/Main.elm --output=static/main.js
-- UNKNOWN IMPORT -------- elm-lib/line-charts/src/Internal/Axis/Values/Time.elm

The Internal.Axis.Values.Time module has a bad import:

    import Time.Extra

I cannot find that module! Is there a typo in the module name?

The &quot;source-directories&quot; field of your elm.json tells me to look in directories
like elm-src, but it is not in any of them. Maybe it is in a package that is not
installed yet?</code></pre>
<p><code>Time.Extra</code> は line-charts が依存しているパッケージで，それが <code>elm.json</code> に書かれてないというエラーメッセージです． サブモジュール側の依存パッケージは自動で解決してくれない(単純にローカルのソースコードが増えてるだけなので，そりゃそうって感じだ)． なので，自分で書き足す必要がある:</p>
<div class="sourceCode" id="cb11"><pre class="sourceCode diff"><code class="sourceCode diff"><span id="cb11-1"><a href="#cb11-1"></a><span class="kw">diff --git a/elm.json b/elm.json</span></span>
<span id="cb11-2"><a href="#cb11-2"></a>index 30d0662..7c32604 100644</span>
<span id="cb11-3"><a href="#cb11-3"></a><span class="dt">--- a/elm.json</span></span>
<span id="cb11-4"><a href="#cb11-4"></a><span class="dt">+++ b/elm.json</span></span>
<span id="cb11-5"><a href="#cb11-5"></a><span class="dt">@@ -1,36 +1,36 @@</span></span>
<span id="cb11-6"><a href="#cb11-6"></a>     &quot;dependencies&quot;: {</span>
<span id="cb11-7"><a href="#cb11-7"></a>         &quot;direct&quot;: {</span>
<span id="cb11-8"><a href="#cb11-8"></a>             &quot;avh4/elm-color&quot;: &quot;1.0.0&quot;,</span>
<span id="cb11-9"><a href="#cb11-9"></a>             &quot;bartavelle/json-helpers&quot;: &quot;2.0.2&quot;,</span>
<span id="cb11-10"><a href="#cb11-10"></a><span class="va">+            &quot;debois/elm-dom&quot;: &quot;1.3.0&quot;,</span></span>
<span id="cb11-11"><a href="#cb11-11"></a>             &quot;elm/browser&quot;: &quot;1.0.1&quot;,</span>
<span id="cb11-12"><a href="#cb11-12"></a>             &quot;elm/core&quot;: &quot;1.0.2&quot;,</span>
<span id="cb11-13"><a href="#cb11-13"></a>             &quot;elm/html&quot;: &quot;1.0.0&quot;,</span>
<span id="cb11-14"><a href="#cb11-14"></a>             &quot;elm/http&quot;: &quot;2.0.0&quot;,</span>
<span id="cb11-15"><a href="#cb11-15"></a>             &quot;elm/json&quot;: &quot;1.1.3&quot;,</span>
<span id="cb11-16"><a href="#cb11-16"></a><span class="va">+            &quot;elm/svg&quot;: &quot;1.0.1&quot;,</span></span>
<span id="cb11-17"><a href="#cb11-17"></a>             &quot;elm/time&quot;: &quot;1.0.0&quot;,</span>
<span id="cb11-18"><a href="#cb11-18"></a>             &quot;elm/url&quot;: &quot;1.0.0&quot;,</span>
<span id="cb11-19"><a href="#cb11-19"></a>             &quot;elm-community/list-extra&quot;: &quot;8.2.2&quot;,</span>
<span id="cb11-20"><a href="#cb11-20"></a><span class="va">+            &quot;justinmimbs/time-extra&quot;: &quot;1.1.0&quot;,</span></span>
<span id="cb11-21"><a href="#cb11-21"></a>             &quot;justinmimbs/timezone-data&quot;: &quot;2.1.4&quot;,</span>
<span id="cb11-22"><a href="#cb11-22"></a>             &quot;krisajenkins/remotedata&quot;: &quot;6.0.1&quot;,</span>
<span id="cb11-23"><a href="#cb11-23"></a><span class="st">-            &quot;terezka/line-charts&quot;: &quot;2.0.0&quot;</span></span>
<span id="cb11-24"><a href="#cb11-24"></a><span class="va">+            &quot;myrho/elm-round&quot;: &quot;1.0.4&quot;,</span></span>
<span id="cb11-25"><a href="#cb11-25"></a><span class="va">+            &quot;ryannhg/date-format&quot;: &quot;2.3.0&quot;</span></span>
<span id="cb11-26"><a href="#cb11-26"></a>         },</span>
<span id="cb11-27"><a href="#cb11-27"></a>         &quot;indirect&quot;: {</span>
<span id="cb11-28"><a href="#cb11-28"></a><span class="st">-            &quot;debois/elm-dom&quot;: &quot;1.3.0&quot;,</span></span>
<span id="cb11-29"><a href="#cb11-29"></a>             &quot;elm/bytes&quot;: &quot;1.0.8&quot;,</span>
<span id="cb11-30"><a href="#cb11-30"></a>             &quot;elm/file&quot;: &quot;1.0.5&quot;,</span>
<span id="cb11-31"><a href="#cb11-31"></a>             &quot;elm/parser&quot;: &quot;1.1.0&quot;,</span>
<span id="cb11-32"><a href="#cb11-32"></a><span class="st">-            &quot;elm/svg&quot;: &quot;1.0.1&quot;,</span></span>
<span id="cb11-33"><a href="#cb11-33"></a>             &quot;elm/virtual-dom&quot;: &quot;1.0.0&quot;,</span>
<span id="cb11-34"><a href="#cb11-34"></a><span class="st">-            &quot;justinmimbs/date&quot;: &quot;3.2.0&quot;,</span></span>
<span id="cb11-35"><a href="#cb11-35"></a><span class="st">-            &quot;justinmimbs/time-extra&quot;: &quot;1.1.0&quot;,</span></span>
<span id="cb11-36"><a href="#cb11-36"></a><span class="st">-            &quot;myrho/elm-round&quot;: &quot;1.0.4&quot;,</span></span>
<span id="cb11-37"><a href="#cb11-37"></a><span class="st">-            &quot;ryannhg/date-format&quot;: &quot;2.3.0&quot;</span></span>
<span id="cb11-38"><a href="#cb11-38"></a><span class="va">+            &quot;justinmimbs/date&quot;: &quot;3.2.0&quot;</span></span>
<span id="cb11-39"><a href="#cb11-39"></a>         }</span>
<span id="cb11-40"><a href="#cb11-40"></a>     },</span>
<span id="cb11-41"><a href="#cb11-41"></a>     &quot;test-dependencies&quot;: {</span></code></pre></div>
<p>これで無事 <code>elm make</code> をすることができるようになった．</p>
<h3 id="palette.cubehelix-を使ってみる"><code>Palette.Cubehelix</code> を使ってみる</h3>
<p>いよいよ <code>Palette.Cubehelix</code> を使ってみる． そもそも Cubehelix とはなんなのか．</p>
<p><a href="http://www.mrao.cam.ac.uk/~dag/CUBEHELIX/">ググった感じこれっぽい</a>． 宇宙を撮影した画像を描写するときのためのカラースキーマーっぽい(なにが課題なのかはよくわからなんだw)． <code>Palette.Cubehelix.generate :: Int -&gt; List Color</code> を使うことで最大で256色を返してくれる． 更にどんな感じの色を返してくれるかは <code>generateAdvanced</code> の方を使い，<code>AdvancedConfig</code> 型の値を自作することでコントロールできる:</p>
<div class="sourceCode" id="cb12"><pre class="sourceCode elm"><code class="sourceCode elm"><span id="cb12-1"><a href="#cb12-1"></a><span class="kw">type</span> <span class="kw">alias</span> <span class="dt">AdvancedConfig</span> <span class="op">=</span></span>
<span id="cb12-2"><a href="#cb12-2"></a>    { <span class="fu">start</span> : <span class="dt">Color</span></span>
<span id="cb12-3"><a href="#cb12-3"></a>    <span class="op">,</span> <span class="fu">rotationDirection</span> : <span class="dt">RotationDirection</span></span>
<span id="cb12-4"><a href="#cb12-4"></a>    <span class="op">,</span> <span class="fu">rotations</span> : <span class="dt">Float</span></span>
<span id="cb12-5"><a href="#cb12-5"></a>    <span class="op">,</span> <span class="fu">gamma</span> : <span class="dt">Float</span></span>
<span id="cb12-6"><a href="#cb12-6"></a>    }</span></code></pre></div>
<p>色々試したところ各引数はこんな感じだった:</p>
<ul>
<li><code>start</code> は HSL の Hue + Saturation を元に起点を決める</li>
<li><code>rotationDirection</code> は回転方向 (RGB or BGR)</li>
<li><code>rotation</code> は回転角を 0-1.5 で指定（小さいほど似た色になる）</li>
<li><code>gamma</code> は明暗な色のバランスを 0-2 で指定（0は明るい、2は暗い色が長くなる）</li>
</ul>
<p>HSLとは RGB とは違う色の表現のし方で，色相（Hue）・彩度（Saturation）・輝度（Lightness）を指定する． 直感的なイメートして，黒から白へこうぐるっと指定した螺旋でカラーパレットを表現する感じ．</p>
<p>物は試し，repl で色々と試すと良い(色だけに):</p>
<div class="sourceCode" id="cb13"><pre class="sourceCode elm"><code class="sourceCode elm"><span id="cb13-1"><a href="#cb13-1"></a><span class="op">&gt;</span> <span class="dt">List</span><span class="op">.</span><span class="fu">map</span> <span class="dt">Color</span><span class="op">.</span><span class="fu">toHex</span> <span class="op">&lt;|</span> <span class="dt">Palette</span><span class="op">.</span><span class="fu">generateAdvanced</span> <span class="dv">10</span> { <span class="fu">start</span> <span class="op">=</span> <span class="dt">Color</span><span class="op">.</span><span class="fu">fromHSL</span> (<span class="op">-</span><span class="dv">60</span><span class="op">,</span><span class="dv">100</span><span class="op">,</span><span class="dv">0</span>)<span class="op">,</span> <span class="fu">rotationDirection</span> <span class="op">=</span> <span class="dt">Palette</span><span class="op">.</span><span class="dt">RGB</span><span class="op">,</span> <span class="fu">rotations</span> <span class="op">=</span> <span class="dv">1</span><span class="op">.</span><span class="dv">5</span><span class="op">,</span> <span class="fu">gamma</span> <span class="op">=</span> <span class="dv">1</span><span class="op">.</span><span class="dv">0</span> }</span>
<span id="cb13-2"><a href="#cb13-2"></a>[<span class="st">&quot;#000000&quot;</span><span class="op">,</span><span class="st">&quot;#311410&quot;</span><span class="op">,</span><span class="st">&quot;#3C3F0D&quot;</span><span class="op">,</span><span class="st">&quot;#2B6F39&quot;</span><span class="op">,</span><span class="st">&quot;#3E8590&quot;</span><span class="op">,</span><span class="st">&quot;#8984CC&quot;</span><span class="op">,</span><span class="st">&quot;#D490C6&quot;</span><span class="op">,</span><span class="st">&quot;#EAB8B1&quot;</span><span class="op">,</span><span class="st">&quot;#E5E6CA&quot;</span><span class="op">,</span><span class="st">&quot;#FFFFFF&quot;</span>]</span>
<span id="cb13-3"><a href="#cb13-3"></a>   : <span class="dt">List</span> <span class="dt">String</span></span></code></pre></div>
<p>なんとこれを Slack に貼ると色を確認できる(賢い)． で，最終的には最初と最後の黒白を抜いて適当に使った．</p>
<h2 id="おしまい">おしまい</h2>
<p>submodule のやつしんどいし，なんか自動で <code>elm.json</code> を書き換えてくれる CLI ツールでも作ろうかしら．</p>
  </div>]]></summary>
</entry>
<entry>
    <title>Haskell Day 2019 に参加してきた</title>
    <link href="https://matsubara0507.github.io/posts/2019-11-10-join-haskell-day-2019.html" />
    <id>https://matsubara0507.github.io/posts/2019-11-10-join-haskell-day-2019.html</id>
    <published>2019-11-10T00:00:00Z</published>
    <updated>2019-11-10T00:00:00Z</updated>
    <summary type="html"><![CDATA[<div class="post-content" itemprop="articleBody">
    <p>11月9日にあった「<a href="https://techplay.jp/event/727059">Haskell Day 2019</a>」に参加してきたのでメモ書きです． 裏方もほんの少しだけ手伝ったけど，裏方については公式のブログで(誰かが)書くと思うので割愛． ただ，全部オープンな場でやりとりしてるの気になる方は Haskell-jp slack を見に行くか Haskell-jp の GitHub を漁るといいと思う．</p>
<h3 id="関数型function-typeを見つめるプログラミング">関数型(function type)を見つめるプログラミング</h3>
<p><a href="https://github.com/nobsun">山下</a>氏の発表． <a href="https://github.com/nobsun/hday2019/blob/master/doc/ftype.pdf">発表資料はこちら</a>．</p>
<p>関数型(プログラミング)の話かとずっと思ってたら関数「型」の話だった(よく読め)． 今回で唯一の Basics なセッション． 特別動くコードは出てこないとのこと． 話の中で <code>A -&gt; B</code> という関数型があるときに，ドメイン(<code>A</code> 側)がさらに関数型なのは多くの人たちも慣れて来てる(他の言語の人たちも含め)が，コドメイン(<code>B</code> 側)が関数型になるのはしっくりこない人が多いらしい．</p>
<pre><code>f :: (X -&gt; Y) -&gt; Z -- は平気
g :: X -&gt; (Y -&gt; Z) -- はダメらしい(もちろん Haskell はカッコいらない)</code></pre>
<p>まぁ確かに，他の言語ではあんまり使わないですね． 自分は学生の頃に，なんかのプログラミング言語に慣れる前に C/C++/Java/Ruby/Haskell を学んだから困った記憶ないけど． ちなみに「拡張適用演算子」っていう用語は山下氏の造語らしい．</p>
<h3 id="hkdhigher-kinded-datatype">HKD(Higher Kinded Datatype)</h3>
<p><a href="https://github.com/fumieval">fumieval</a> 氏の発表． <a href="https://assets.adobe.com/public/b93f214d-58c2-482f-5528-a939d3e83660">発表資料はこちら</a>．</p>
<p>Haskell のレコードの各フィールドに共通の性質を付加したいことはしばしばある． 多相な型パラメータ <code>h :: Type -&gt; Type</code> を付けてあげれば実現可能． <a href="https://hackage.haskell.org/package/barbies">barbies</a>パッケージを使うと自動でやってくれるし，fumieval 氏が作った <a href="https://hackage.haskell.org/package/extensible">extensible</a> パッケージはその機能もサポートしてる(2014~)． 僕は2017年ぐらいから愛用していますありがとうございます．</p>
<p>他にも <code>TangleT</code> という機能を紹介してましたが，なんとこのサイトを生成してる Hakyll プログラムにも <code>TangleT</code> を使ってます笑． <code>TangleT</code> はレコードのフィールド間に依存関係がある場合に有用で，フィールドの評価順を制御できるようになる． これと，静的サイトのレンダリング順を組み合わせたらいいんじゃね？ってなってやってみた(別段効果があったわけじゃないけど)．</p>
<h3 id="しんさんきぼうghcのderivingテクノロジー">「しんさんきぼう」GHCのderivingテクノロジー</h3>
<p><a href="https://github.com/aiya000">aiya000</a> 氏の発表． <a href="https://aiya000.github.io/Maid/haskell-day-2019-deriving/#/">発表資料はこちら</a></p>
<p>表題の通り，型クラスのインスタンス宣言を容易にしてくれる <code>deriving</code> 機能の最近の話． 標準のを含め，現在 GHC には <code>deriving</code> は4種類もあり，特に <code>DerivingVia</code> GHC 拡張はすごいぞ！って感じです． で，さらに4種類の <code>deriving</code> を整理して綺麗に記述するために <code>DerivingStrategies</code> という GHC 拡張があるとのこと．</p>
<div class="sourceCode" id="cb2"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span id="cb2-1"><a href="#cb2-1"></a><span class="ot">{-# LANGUAGE DerivingStrategies #-}</span></span>
<span id="cb2-2"><a href="#cb2-2"></a><span class="kw">newtype</span> <span class="dt">SomeBody</span> <span class="ot">=</span> <span class="dt">SomeBody</span> <span class="dt">Person</span></span>
<span id="cb2-3"><a href="#cb2-3"></a>  <span class="kw">deriving</span>          (<span class="dt">Show</span>)                <span class="co">-- 標準</span></span>
<span id="cb2-4"><a href="#cb2-4"></a>  <span class="kw">deriving</span> stock    (<span class="dt">Eq</span>)                  <span class="co">-- 標準</span></span>
<span id="cb2-5"><a href="#cb2-5"></a>  <span class="kw">deriving</span> anyclass (<span class="dt">Visible</span>)             <span class="co">-- DeriveAnyClass</span></span>
<span id="cb2-6"><a href="#cb2-6"></a>  <span class="kw">deriving</span> <span class="kw">newtype</span>  (<span class="dt">Enum</span>)                <span class="co">-- GeneralizedNewtypeDeriving</span></span>
<span id="cb2-7"><a href="#cb2-7"></a>  <span class="kw">deriving</span>          (<span class="dt">Bounded</span>) via <span class="dt">Person</span>  <span class="co">-- DerivingVia</span></span></code></pre></div>
<p>(発表資料より引用)ここまでのコードは書いたことも見たこともないけど笑</p>
<p>ちなみに，<code>DerivingVia</code> は僕も前に「<a href="https://speakerdeck.com/konn/ben-dang-hasugoi-newtype">本当はすごい newtype</a>」っていう資料を読んでびっくりした記憶． 今回紹介した git-plantation では CLI の「なんらかの型の ID を列挙する」引数から「なんらかの型」を探す部分の ID 側に <code>DerivingVia</code> を使った． 思うにただの <code>Int</code> や <code>String</code> になりやすい ID 系の型は <code>DerivingVia</code> との相性がいい気がする．</p>
<h3 id="haskellメタプログラミングによるegisonのパターンマッチの実装">HaskellメタプログラミングによるEgisonのパターンマッチの実装</h3>
<p><a href="https://github.com/egisatoshi">江木</a>氏の発表． <a href="https://www.egison.org/download/20191109HaskellDay.pdf">発表資料はこちら</a>．</p>
<p>egisatoshi 氏が学生時代(?)から作成し続けてるプログラミング言語 <a href="https://www.egison.org">Egison</a> の強力なパターンマッチング機能を Haskell に導入した話． <a href="https://github.com/egison/egison-haskell">リポジトリは多分これ</a>． Egison の機能を他の言語に突っ込むというのは Scheme ですでにやっていたが，Haskell の場合は型付けをしなくちゃいけないらしく苦労したとのこと． もう，すっごい GHC の型拡張機能をふんだんに使ってました(多くの人に手伝ってもらったらしい)．</p>
<p>なお，スライドはめっちゃ長く，時間が足りなかったので全部のページを丁寧に説明してはなかった笑． あとで読んでだって．</p>
<p>僕は Egison を学生の頃から知ってて，ずーっと何かに使えないかなぁって考えてるけど思いつかない． Egison パターンマッチングは，再帰の「全探索する部分」と「条件付けて絞り込む部分」の前者をサボることができるようになるらしい． つまり，順番を無視するために似たようなパターンを記述しなくて済むようになる． 順番を無視したい場合，うーん，CLI の引数とか？ 今度試してみるか(なんか違う気もする)．</p>
<p>あ，ちなみに，最後にステマ(?)してた Egison Jornal は全部買ってます． 面白いです．</p>
<h3 id="関数と型で理解する自動微分">関数と型で理解する自動微分</h3>
<p><a href="https://github.com/lotz84">lotz</a> 氏の発表． <a href="https://speakerdeck.com/lotz84/guan-shu-toxing-deli-jie-suruzi-dong-wei-fen">発表資料はこちら</a>．</p>
<p>ぱっと見，一番好評だった気がする． 急に導関数が欲しくなる時がありますよね？ってことで自動で導関数を導出する方法を紹介します，って感じの話です(?)． Haskell で自動微分するためには <a href="https://github.com/ekmett/ad">ad</a> パッケージを使うといいらしい． ちなみにこのパッケージは，今回の Haskell Day のスペシャルゲストとしていらしゃった ekmett 氏が作ったものだ． で，動作を理解するために <code>diff</code> 関数を自作してみたっていう流れでした．</p>
<p>本来，型エラーになって欲しい部分が型エラーにならないので，幽霊型や存在型を使って実現している． といった Haskell 型機能のアドバンスドな話から，自動微分というアカデミックな話まで，盛りだくさんでした． というか話が上手．</p>
<h3 id="ghcjs-による-web-フロントエンド開発">GHCJS による Web フロントエンド開発</h3>
<p><a href="https://github.com/y-taka-23">チャシャ猫</a>氏の発表． <a href="https://guide.elm-lang.jp/architecture/">The Elm Architecture</a> を表現した GHCJS の <a href="https://github.com/dmjio/miso">Miso</a> パッケージをライブコーデイング形式で紹介． 基本ライブコーディングだった結果，スライドはないのかな．</p>
<h3 id="haskell-で作る競技型イベントの裏側">Haskell で作る競技型イベントの裏側</h3>
<p>僕の発表． <a href="https://www.slideshare.net/noob00/haskell-191796924">発表資料はこちら</a>．</p>
<p>去年の6月ぐらいから少しずーつ作ってた <a href="https://github.com/matsubara0507/git-plantation">git-plantation</a> の紹介． 話題が逸れるから言わなかったけど「作り直すか〜」ってやり始めたのは技術書典5のネタ用でした笑． もちろん，作り直す意義は発表した通りですよ．</p>
<p>extensible・Servant・Elm・STM・Dhall など前回・今回の Haskell Day で出たような話題をふんだんに使ってるので「詳しくは〜」って形で引用させてもらった． この発表以外の多くは，Haskell の強力な「型」でいろんな問題を解決したよって感じの話でしたが，僕はその解決した機能をふんだんに使ってリアルアプリケーションをサクッと作ったって感じなのです． 巨人の肩に乗ろう．</p>
<h3 id="大規模数値計算を支える-haskell-pragmatic-haskell-in-large-scale-numerical-computation">大規模数値計算を支える Haskell ── Pragmatic Haskell in Large-Scale Numerical Computation</h3>
<p><a href="https://github.com/konn">石井</a>氏の発表． <del>内容があれなので写真は最初のスライドだけで，的なこと言ってたのでスライドは公開されないんじゃないかな</del><a href="https://speakerdeck.com/konn/da-gui-mo-shu-zhi-ji-suan-wozhi-eru-haskell-nil-nil-pragmatic-haskell-in-large-scale-numerical-computation-nil-nil">公開されました</a>．</p>
<p>GoS2014(?)で ekmett 氏にメンターをしてもらったとのこと．すごい． で，発表の内容は社長(?)が前に言っていた「<a href="https://twitter.com/hiroki_f/status/1135160082373652480">弊社のプロダクトはモナドで各々知っているべき領域を区分して仕事を分けています。ですので、全部知ってなくても、仕事ができます。</a>」というツイートの詳しい話(代弁)． どうやら，物理系ソルバを(Haskellで)記述してる人たちが，それに注力できるように本質的な部分以外は Haskell の魔法(モナド)で隠蔽しているという感じの話らしい． 今回はその魔法についてたくさん紹介してくれた． 例えば，前にも出てきた依存型や拡張可能レコード，他にも Tagless final など． 高度な Haskell (というか GHC)の機能を Real World に消化しておりすごかった(小並感)．</p>
<h3 id="special-talk-cadenza-building-fast-functional-languages-on-the-jvm">Special Talk: Cadenza: Building fast functional languages on the JVM</h3>
<p><a href="https://github.com/ekmett/">ekmett</a> 氏の特別講演． これまたライブコーデイングでした(まさかの被り)． タイトルでも言及してる <a href="https://github.com/ekmett/cadenza">Cadenza ってのはこれっぽい</a>． JVM の方は最近よく耳にする(?) <a href="https://www.graalvm.org/">GraalVM</a> のことだった． ライブコーデイングの内容は単純型付きラムダ計算をささっと作ってるみたいだった．</p>
<h3 id="lt">LT</h3>
<p>だいたい間に合ってない笑 特にメモも何も取ってなかったのでリンクの列挙だけ．</p>
<ul>
<li><a href="https://github.com/as-capabl">アズなんとかさん</a>氏の「<a href="https://docs.google.com/presentation/d/1TiDWz3zLUwEWgpzXfgVZFIib6JtYriB03TVgHsimJC0">3D Model in Haskell</a>」</li>
<li><a href="https://github.com/cyclone-t">CycloneT</a>氏の「HaskellでIoTやってます」
<ul>
<li>業務の紹介なのでスライドは公開されてないかも</li>
</ul></li>
<li><a href="https://github.com/jabaraster">河野</a>氏の「<a href="https://docs.google.com/presentation/d/1xcdZ42lF64b_S0wZfi1Er-3YTs8H_Ob15BO3kpuRSMU">QuoraでHaskellへの愛を語る</a>」</li>
<li><a href="https://github.com/coord-e">coord_e</a> 氏の「<a href="https://gitpitch.com/coord-e/slide-type-class-impl">Haskellで作ってわかる型クラス</a>」
<ul>
<li>型クラス機能自体を作る方の話だった笑(間に合ってはない)</li>
</ul></li>
<li><a href="https://github.com/minoki">mod_poppo</a> 氏の「<a href="https://drive.google.com/file/d/1YGKjl8S-LlfuB8yrHnKSK5G5MGsP9xd3/view">Abstract Typeclasses</a>」</li>
<li><a href="https://github.com/kazu-yamamoto">kazu_yamamoto</a> 氏の「<a href="http://www.mew.org/~kazu/material/2019-gc.pdf">GHCのGC</a>」</li>
</ul>
<h2 id="おしまい">おしまい</h2>
<p>さて，来年のネタ仕込みを始めるか(発表するかはさておき)．</p>
  </div>]]></summary>
</entry>
<entry>
    <title>Hacktoberfest 2019 なので PR を4つ以上出してみた</title>
    <link href="https://matsubara0507.github.io/posts/2019-10-31-join-hacktoberfest-2019.html" />
    <id>https://matsubara0507.github.io/posts/2019-10-31-join-hacktoberfest-2019.html</id>
    <published>2019-10-31T00:00:00Z</published>
    <updated>2019-10-31T00:00:00Z</updated>
    <summary type="html"><![CDATA[<div class="post-content" itemprop="articleBody">
    <p>毎年恒例，去年に引き続き Hacktoberfest に参加しました．</p>
<p><img src="/assets/join-hacktoberfest-2019/status.jpg"></img></p>
<p>すごい量になっているけど個人のリポジトリや参加してる Org アカウントにも PR を作ってやっていたのでこんな量になった. 実際に、自分の所属となんも関係のない PR は以下の4つ:</p>
<ul>
<li><a href="https://github.com/phadej/github/pull/407">Update EditRepo type by matsubara0507 · Pull Request #407 · phadej/github</a></li>
<li><a href="https://github.com/drone/drone-go/pull/47">Change <code>RepoPatch.Counter</code> type to <code>int64</code> from <code>int</code> by matsubara0507 · Pull Request #47 · drone/drone-go</a></li>
<li><a href="https://github.com/elm-jp/guide/pull/170">「型: 型を読む」の原文を追従して翻訳 by matsubara0507 · Pull Request #170 · elm-jp/guide</a></li>
<li><a href="https://github.com/orangain/textlint-plugin-review/pull/16">Update textlint version to 11.4 by matsubara0507 · Pull Request #16 · orangain/textlint-plugin-review</a></li>
</ul>
<h2 id="phadejgithub">phadej/github</h2>
<p>このリポジトリは Haskell の GitHub API クライアントライブラリだ． 愛用している． ただ，GitHub API の開発速度はそこそこ速く，機能が追いついてないことが多々あり，自分はよく<a href="https://github.com/matsubara0507/github/tree/myext">フォークして必要なものを雑に足したブランチ</a>を利用している． もっとマメに本家へ PR を出せば良いのだが，ついついサボってしまい… ということで，一つだけだが出してみた．</p>
<p>この PR はリポジトリを編集する API に使うための PATCH 用のデータ型が古くなっており，僕が必要なフィールドが足りなかったので作った差分だ． ついでに，リポジトリ自体の型やリポジトリを作る型のフィールドも古くなっていることに気づいた． 僕は必要ではないし，めんどくさかったから最初はそのまま出したが，「直した方がいいですか？」と尋ねたら「ぜひ」と返ってきたので直した． ちょっと差分が大きくなってしまったのでコメントを書いているうちにマージされた笑</p>
<h2 id="dronedrone-go">drone/drone-go</h2>
<p>これは <a href="https://drone.io">Drone CI</a> という OSS の CI/CD プラットフォームの，本家が提供している Go 言語の API クライアントだ． 同様の <a href="https://github.com/matsubara0507/drone-haskell">Haskell 用 API クライアント</a>を整備していた(ドキュメントが少ないので Go の実装を参照している)ら型が間違っているような気がしたので PR にした．</p>
<p>PR に拙い英語でコメントしている通り，<code>Counter</code> というフィールドは <code>Repo</code> 型では <code>int64</code> だが，<code>RepoPatch</code> では <code>int</code> だった． <a href="https://github.com/drone/drone/blob/0b4e5156ae1111463145e522e206eacb6d036960/handler/api/repos/update.go#L30-L40">API サーバー側の実装</a>を見てみると <code>int64</code> として扱っていたので <code>RepoPatch</code> 側を修正する PR を出した． 無事マージされるといいなぁ．</p>
<h2 id="elm-jpguide">elm-jp/guide</h2>
<p>これは <a href="https://guide.elm-lang.org/">Elm Guide</a> というサイトの翻訳リポジトリだ． 翻訳元は Elm の作者がメンテナンスしている，Elm のチュートリアルである． Elm-jp という日本ユーザーグループで翻訳をしている(僕も所属してるので無関係ではなかった)．</p>
<p>最近，大量の本家との差分を <a href="https://github.com/negiboudu">negiboudu</a> 氏が取り込んでくれた． その結果，差分ができたので1ページだけ翻訳したという PR だ． ちなみに，まだまだあるので誰でも翻訳 PR お待ちしております．</p>
<h2 id="orangaintextlint-plugin-review">orangain/textlint-plugin-review</h2>
<p>これは文章用の linter ツール，textlint の <a href="https://github.com/kmuto/review">Re:VIEW</a> プラグインのリポジトリだ． Re:VIEW は技術書典用の頒布物作成の折に使っており，textlint で軽い静的検査をしている． 技術書典7のときに，このプラグインで「plugin-review が依存している textlint が古い」という警告が出ているので直した． そのときのものを PR にしただけだ．</p>
<p>ちょっと差分がでかいし，長く更新がないのでマージされないような気がする しかし，まぁ同じような警告が気になった人が辿り着いて助けになればいいなぁぐらいの温度感．</p>
<h2 id="おしまい">おしまい</h2>
<p>いろんなジャンルのリポジトリに PR が出せて満足． あとでTシャツの出さなきゃ．</p>
  </div>]]></summary>
</entry>
<entry>
    <title>CI で Haskell Stack の Docker Integration するために</title>
    <link href="https://matsubara0507.github.io/posts/2019-09-21-stack-build-image.html" />
    <id>https://matsubara0507.github.io/posts/2019-09-21-stack-build-image.html</id>
    <published>2019-09-21T00:00:00Z</published>
    <updated>2019-09-21T00:00:00Z</updated>
    <summary type="html"><![CDATA[<div class="post-content" itemprop="articleBody">
    <p>Haskell のビルドツール Stack の Docker Integration を使うことで，指定したイメージ内でホストマシンと全く同じように別の OS のバイナリをビルドできます． さらに一工夫をすることで，そのバイナリを埋め込んだ Docker Image を作ることができます(一工夫については「<a href="/posts/2019-06-10-build-haskell-app-docker-image-without-stack-image-cmd.html">stack image コマンドなしに Haskell アプリの Docker イメージを作る</a>」に書いた)</p>
<p>僕はこのプロセスを TravisCI で行い，<code>master</code> プッシュした時に <code>latest</code> イメージを更新してました． が，どうしても CI のビルド時間が長すぎた(1ステップ30分かかることもしばしば)ので改善しました． っていう話です．</p>
<h2 id="何が遅いのか">何が遅いのか</h2>
<p>TravisCI のログを見てみる:</p>
<p><img src="/assets/stack-build-image/ci-log-1.jpg"></img></p>
<p><code>1571.75s</code> もかかってるのは依存パッケージのみをビルドしているステップだ． 現状の主原因は単純に Haskell Stack のビルドがゲキオモなせい(巷でもよく言われてる)． でもこれは初回だけで，Stack v2 からは <a href="https://www.fpcomplete.com/blog/2018/08/pantry-part-3/specifying-dependencies">Pantry</a> というシステムを導入して効率よく依存パッケージを SQLite にキャッシュしている(2回目以降でキャッシュを使うのは v1 もだったが v2 からは別のプロジェクトでも共有できるようになった)． なので，TravisCI にうまくキャッシュをする設定をすることで CI 中のビルド時間は劇的に改善する:</p>
<div class="sourceCode" id="cb1"><pre class="sourceCode yaml"><code class="sourceCode yaml"><span id="cb1-1"><a href="#cb1-1"></a><span class="co"># .travis.yml の一部</span></span>
<span id="cb1-2"><a href="#cb1-2"></a><span class="fu">cache</span><span class="kw">:</span></span>
<span id="cb1-3"><a href="#cb1-3"></a><span class="at">  </span><span class="fu">timeout</span><span class="kw">:</span><span class="at"> </span><span class="dv">360</span></span>
<span id="cb1-4"><a href="#cb1-4"></a><span class="at">  </span><span class="fu">directories</span><span class="kw">:</span></span>
<span id="cb1-5"><a href="#cb1-5"></a><span class="at">    </span><span class="kw">-</span><span class="at"> </span><span class="st">&quot;$HOME/.stack/&quot;</span><span class="co">     # Pantry のキャッシュはココ</span></span>
<span id="cb1-6"><a href="#cb1-6"></a><span class="at">    </span><span class="kw">-</span><span class="at"> </span><span class="st">&quot;$HOME/.local/bin/&quot;</span><span class="co"> # ココには stack が入る</span></span>
<span id="cb1-7"><a href="#cb1-7"></a><span class="at">    </span><span class="kw">-</span><span class="at"> </span><span class="st">&quot;.stack-work/&quot;</span><span class="co">      # プロジェクト固有のキャッシュはココ</span></span></code></pre></div>
<p><img src="/assets/stack-build-image/ci-log-2.jpg"></img></p>
<p>さて残りの <code>371.27s</code> はなんと <code>docker pull</code> にかかってる時間だ．</p>
<h3 id="fpcostack-build">fpco/stack-build</h3>
<p>Stack の Docker Integration を利用することで指定した Docker Image 内でビルドを実行する． つまり，指定した Docker Image をプルしてくる必要がある． ログからわかるようにこの時点では <a href="https://hub.docker.com/r/fpco/stack-build/"><code>fpco/stack-build</code></a> という Stack の開発チームが提供している公式イメージを使っている:</p>
<div class="sourceCode" id="cb2"><pre class="sourceCode yaml"><code class="sourceCode yaml"><span id="cb2-1"><a href="#cb2-1"></a><span class="co"># stack.yaml の一部</span></span>
<span id="cb2-2"><a href="#cb2-2"></a><span class="fu">docker</span><span class="kw">:</span></span>
<span id="cb2-3"><a href="#cb2-3"></a><span class="at">  </span><span class="fu">repo</span><span class="kw">:</span><span class="at"> fpco/stack-build</span></span>
<span id="cb2-4"><a href="#cb2-4"></a><span class="at">  </span><span class="fu">enable</span><span class="kw">:</span><span class="at"> </span><span class="ch">false</span></span></code></pre></div>
<p>Docker Hub を見てみるとわかるのだが，なんと3GBもある(<a href="https://github.com/docker/hub-feedback/issues/331#issuecomment-141544523">Docker Hub に書いてあるのは圧縮されたサイズ</a>なので，手元での実際のサイズはなんと8.5GBもある)． もちろんローカルなら同じイメージを何度もプルすることはないので問題ないのだが，残念ながら TravisCI には Docker Image をキャッシュしない． 無理やり固めてキャッシュすることは可能だが，試してみたらそっちの方が時間がかかった(8.5GBもあるからね)．</p>
<h2 id="軽いイメージを作る">軽いイメージを作る</h2>
<p>なんでこんなにもあるのかは知らないけど，大きいなら小さくすれば良い． ということで自作することにした:</p>
<ul>
<li><a href="https://hub.docker.com/r/matsubara0507/stack-build">matsubara0507/stack-build - Docker Hub</a></li>
</ul>
<p>イメージサイズは125MB(非圧縮サイズは380MB)． とりあえず，必要そうなものだけを <code>apt-get</code> して，自分のプログラムがビルドできるのだけ試した:</p>
<div class="sourceCode" id="cb3"><pre class="sourceCode dockerfile"><code class="sourceCode dockerfile"><span id="cb3-1"><a href="#cb3-1"></a><span class="kw">FROM</span> ubuntu:18.04</span>
<span id="cb3-2"><a href="#cb3-2"></a><span class="kw">RUN</span> apt-get update &amp;&amp; apt-get install -y \</span>
<span id="cb3-3"><a href="#cb3-3"></a>    curl \</span>
<span id="cb3-4"><a href="#cb3-4"></a>    gcc \</span>
<span id="cb3-5"><a href="#cb3-5"></a>    g++ \</span>
<span id="cb3-6"><a href="#cb3-6"></a>    git \</span>
<span id="cb3-7"><a href="#cb3-7"></a>    gnupg \</span>
<span id="cb3-8"><a href="#cb3-8"></a>    libc6-dev \</span>
<span id="cb3-9"><a href="#cb3-9"></a>    libffi-dev \</span>
<span id="cb3-10"><a href="#cb3-10"></a>    libgmp-dev \</span>
<span id="cb3-11"><a href="#cb3-11"></a>    make \</span>
<span id="cb3-12"><a href="#cb3-12"></a>    netbase \</span>
<span id="cb3-13"><a href="#cb3-13"></a>    xz-utils \</span>
<span id="cb3-14"><a href="#cb3-14"></a>    zlib1g-dev \</span>
<span id="cb3-15"><a href="#cb3-15"></a> &amp;&amp; apt-get clean \</span>
<span id="cb3-16"><a href="#cb3-16"></a> &amp;&amp; rm -rf /var/lib/apt/lists/*</span>
<span id="cb3-17"><a href="#cb3-17"></a><span class="kw">ENV</span> STACK_VERSION=<span class="st">&quot;2.1.3&quot;</span></span>
<span id="cb3-18"><a href="#cb3-18"></a><span class="kw">RUN</span> curl -sSL https://get.haskellstack.org/ | sh \</span>
<span id="cb3-19"><a href="#cb3-19"></a> &amp;&amp; stack upgrade --binary-version=${STACK_VERSION}</span></code></pre></div>
<p>なので，他の人が使ってもちゃんとビルドできる保証はない． もちろん，これで CI の時間も <code>30s</code> ぐらいに短縮した(キャッシュの解凍・圧縮に3分ぐらいかかっちゃうんだけど)．</p>
<h2 id="section"></h2>
<p>ちなみに，一通りできてから気づいたのだが，ちゃんと公式にも小さいイメージができてた(半年ぐらい前からっぽい)．</p>
<ul>
<li><a href="https://hub.docker.com/r/fpco/stack-build-small">fpco/stack-build-small - Docker Hub</a></li>
</ul>
<p>圧縮サイズが390MBなので，自作の方が小さいから自分のをとりあえず困るまでは使うことにします．</p>
<h3 id="docker-integration-と-resolver">Docker Integration と Resolver</h3>
<p>Stack はビルド可能なパッケージのバージョンをまとめた Resolver を提供している． Resolver は設定ファイルで指定し，Docker Integration でイメージタグを指定しないと Resolver と同じ名前のタグを自動で利用してくれる．</p>
<div class="sourceCode" id="cb4"><pre class="sourceCode yaml"><code class="sourceCode yaml"><span id="cb4-1"><a href="#cb4-1"></a><span class="co"># stack.yaml</span></span>
<span id="cb4-2"><a href="#cb4-2"></a><span class="fu">resolver</span><span class="kw">:</span><span class="at"> lts-14.6</span></span>
<span id="cb4-3"><a href="#cb4-3"></a><span class="fu">packages</span><span class="kw">:</span></span>
<span id="cb4-4"><a href="#cb4-4"></a><span class="kw">-</span><span class="at"> .</span></span>
<span id="cb4-5"><a href="#cb4-5"></a><span class="fu">extra-deps</span><span class="kw">:</span><span class="at"> </span><span class="kw">[]</span></span>
<span id="cb4-6"><a href="#cb4-6"></a></span>
<span id="cb4-7"><a href="#cb4-7"></a><span class="fu">docker</span><span class="kw">:</span></span>
<span id="cb4-8"><a href="#cb4-8"></a><span class="at">  </span><span class="fu">repo</span><span class="kw">:</span><span class="at"> matsubara0507/stack-build</span></span>
<span id="cb4-9"><a href="#cb4-9"></a><span class="at">  </span><span class="fu">enable</span><span class="kw">:</span><span class="at"> </span><span class="ch">false</span></span></code></pre></div>
<p>この場合は <code>matsubara0507/stack-build:lts-14.6</code> イメージを利用する． この Resolver の更新頻度は結構高く，Resolver が出るたびに <code>matsubara0507/stack-build</code> のタグを増やさないといけない． 困った．</p>
<p>(先にネタバレをすると，<code>docker.repo</code> でタグまで指定すれば更新する必要は微塵もなかった)</p>
<h2 id="どうやって更新するか">どうやって更新するか</h2>
<p>外のソフトウェアのバージョンアップを検知して自分の Docker Image を更新するのって結構大変なんだが，昔同じようなシチュエーションで支援プログラムを作ったのを思い出した:</p>
<h1 id="section-1"><iframe width="320" height="163" scrolling="no" frameborder="0" src="https://matsubara0507.github.io/my-github-cards/?target=matsubara0507/dockwright"></iframe></h1>
<p>こいつを改良してバージョンを追うことにした．</p>
<h3 id="dockwright">Dockwright</h3>
<p>もともと利用したのはこれ:</p>
<ul>
<li><a href="/posts/2018-06-15-introduce-elchemy-part1.html">Elchemy 入門 : その１</a></li>
</ul>
<p>Elchemy というプログラミング言語のバージョンを追って Dockerfile を作り直す． そのために GitHub のリリースなどをチェックして，Dockerfile の <code>ENV</code> を書き換えるような動作をしている． ちなみに，Docker Image の作成自体は DockerHub の自動ビルドを使っていた．</p>
<p>今回の要件は2つ:</p>
<ol type="1">
<li><code>ENV</code> ではなく Docker Image タグとして利用したい</li>
<li>GitHub ではなく <a href="https://www.stackage.org/download/snapshots.json">Stackage の API</a> の特定のキーの値を見たい</li>
</ol>
<p>そのためにタグをいじるための機能を追加した(実装それ自体に面白さは特にないので割愛):</p>
<pre><code># 設定したイメージの DockarHub 上の全てのタグを取得
$ dockwright --tags

# 設定した `tags` からタグを取得し DockerHub のタグにないものを出力
# dockwright --new-tags</code></pre>
<p><code>tags</code> の設定は次のような感じ:</p>
<div class="sourceCode" id="cb6"><pre class="sourceCode yaml"><code class="sourceCode yaml"><span id="cb6-1"><a href="#cb6-1"></a><span class="co"># .dockwright.yaml の一部</span></span>
<span id="cb6-2"><a href="#cb6-2"></a><span class="fu">tags</span><span class="kw">:</span></span>
<span id="cb6-3"><a href="#cb6-3"></a><span class="co"># latest は常に</span></span>
<span id="cb6-4"><a href="#cb6-4"></a><span class="kw">-</span><span class="at"> </span><span class="fu">type</span><span class="kw">:</span><span class="at"> value</span></span>
<span id="cb6-5"><a href="#cb6-5"></a><span class="at">  </span><span class="fu">keys</span><span class="kw">:</span></span>
<span id="cb6-6"><a href="#cb6-6"></a><span class="at">  </span><span class="kw">-</span><span class="at"> latest</span></span>
<span id="cb6-7"><a href="#cb6-7"></a><span class="at">  </span><span class="fu">always</span><span class="kw">:</span><span class="at"> </span><span class="ch">true</span></span>
<span id="cb6-8"><a href="#cb6-8"></a><span class="co"># 前述した API の返り値 JSON の特定のキーの値</span></span>
<span id="cb6-9"><a href="#cb6-9"></a><span class="kw">-</span><span class="at"> </span><span class="fu">type</span><span class="kw">:</span><span class="at"> refer</span></span>
<span id="cb6-10"><a href="#cb6-10"></a><span class="at">  </span><span class="fu">ref</span><span class="kw">:</span><span class="at"> https://www.stackage.org/download/snapshots.json</span></span>
<span id="cb6-11"><a href="#cb6-11"></a><span class="at">  </span><span class="fu">keys</span><span class="kw">:</span></span>
<span id="cb6-12"><a href="#cb6-12"></a><span class="at">  </span><span class="kw">-</span><span class="at"> nightly</span></span>
<span id="cb6-13"><a href="#cb6-13"></a><span class="at">  </span><span class="kw">-</span><span class="at"> lts</span></span></code></pre></div>
<p>そして次のような Makefile とシェルスクリプトを書いて更新している:</p>
<div class="sourceCode" id="cb7"><pre class="sourceCode makefile"><code class="sourceCode makefile"><span id="cb7-1"><a href="#cb7-1"></a><span class="co"># Makefile</span></span>
<span id="cb7-2"><a href="#cb7-2"></a><span class="dt">DOCKER_CMD   </span><span class="ch">=</span><span class="st"> docker run --rm</span></span>
<span id="cb7-3"><a href="#cb7-3"></a><span class="dt">IMAGE        </span><span class="ch">=</span><span class="st"> matsubara0507/dockwright:1.1.0</span></span>
<span id="cb7-4"><a href="#cb7-4"></a><span class="dt">BUILD_CMD    </span><span class="ch">=</span><span class="st"> dockwright .dockwright.yaml</span></span>
<span id="cb7-5"><a href="#cb7-5"></a></span>
<span id="cb7-6"><a href="#cb7-6"></a><span class="dv">tags:</span></span>
<span id="cb7-7"><a href="#cb7-7"></a>	<span class="ch">${</span><span class="dt">DOCKER_CMD</span><span class="ch">}</span> -v `pwd`/<span class="ch">${</span><span class="kw">dir</span><span class="ch">}</span>:/work <span class="ch">${</span><span class="dt">IMAGE</span><span class="ch">}</span> <span class="ch">${</span><span class="dt">BUILD_CMD</span><span class="ch">}</span> --tags --with-name</span>
<span id="cb7-8"><a href="#cb7-8"></a></span>
<span id="cb7-9"><a href="#cb7-9"></a><span class="dv">new-tags:</span></span>
<span id="cb7-10"><a href="#cb7-10"></a>	<span class="ch">${</span><span class="dt">DOCKER_CMD</span><span class="ch">}</span> -v `pwd`/<span class="ch">${</span><span class="kw">dir</span><span class="ch">}</span>:/work <span class="ch">${</span><span class="dt">IMAGE</span><span class="ch">}</span> <span class="ch">${</span><span class="dt">BUILD_CMD</span><span class="ch">}</span> --new-tags --with-name</span>
<span id="cb7-11"><a href="#cb7-11"></a></span>
<span id="cb7-12"><a href="#cb7-12"></a><span class="dv">dockerfile:</span></span>
<span id="cb7-13"><a href="#cb7-13"></a>	<span class="ch">${</span><span class="dt">DOCKER_CMD</span><span class="ch">}</span> -v `pwd`/<span class="ch">${</span><span class="kw">dir</span><span class="ch">}</span>:/work <span class="ch">${</span><span class="dt">IMAGE</span><span class="ch">}</span> <span class="ch">${</span><span class="dt">BUILD_CMD</span><span class="ch">}</span></span>
<span id="cb7-14"><a href="#cb7-14"></a></span>
<span id="cb7-15"><a href="#cb7-15"></a><span class="dv">image:</span></span>
<span id="cb7-16"><a href="#cb7-16"></a>	docker build -t <span class="ch">${</span><span class="dt">tag</span><span class="ch">}</span> <span class="ch">${</span><span class="kw">dir</span><span class="ch">}</span></span>
<span id="cb7-17"><a href="#cb7-17"></a></span>
<span id="cb7-18"><a href="#cb7-18"></a><span class="dv">push:</span><span class="dt"> image</span></span>
<span id="cb7-19"><a href="#cb7-19"></a>	docker push <span class="ch">${</span><span class="dt">tag</span><span class="ch">}</span></span></code></pre></div>
<div class="sourceCode" id="cb8"><pre class="sourceCode sh"><code class="sourceCode bash"><span id="cb8-1"><a href="#cb8-1"></a><span class="co"># update-image.sh</span></span>
<span id="cb8-2"><a href="#cb8-2"></a><span class="va">target=$1</span></span>
<span id="cb8-3"><a href="#cb8-3"></a><span class="fu">make</span> dockerfile dir=<span class="va">${target}</span></span>
<span id="cb8-4"><a href="#cb8-4"></a><span class="fu">git</span> status</span>
<span id="cb8-5"><a href="#cb8-5"></a><span class="fu">git</span> add -A <span class="va">${target}</span></span>
<span id="cb8-6"><a href="#cb8-6"></a><span class="fu">git</span> diff --quiet <span class="kw">&amp;&amp;</span> <span class="fu">git</span> diff --staged --quiet <span class="kw">||</span> <span class="fu">git</span> commit -m <span class="st">&quot;[skip ci] Update </span><span class="va">${target}</span><span class="st"> image&quot;</span></span>
<span id="cb8-7"><a href="#cb8-7"></a><span class="fu">make</span> -s new-tags dir=<span class="va">${target}</span> <span class="kw">|</span> <span class="fu">xargs</span> -ITAG make push dir=<span class="va">${target}</span> tag=TAG</span></code></pre></div>
<p>実際に使っているリポジトリは<a href="https://github.com/matsubara0507/haskell-dockerfiles">コレ</a>．</p>
<h2 id="おまけ-結局どこが重い">おまけ: 結局どこが重い？</h2>
<p>なんで <code>fpco/stack-build</code> がこんなに重いのか，調べてみた:</p>
<pre><code>$ docker history fpco/stack-build:lts-14.4
IMAGE               CREATED             CREATED BY                                      SIZE
9adc774bb5e5        5 weeks ago         /bin/sh -c #(nop)  CMD [&quot;bash&quot;]                 0B
&lt;missing&gt;           5 weeks ago         /bin/sh -c #(nop)  ENTRYPOINT [&quot;/usr/local/s…   0B
&lt;missing&gt;           5 weeks ago         |11 BOOTSTRAP_COMMIT=d4143f1845f26e8e99d0a1a…   391kB
&lt;missing&gt;           5 weeks ago         |11 BOOTSTRAP_COMMIT=d4143f1845f26e8e99d0a1a…   93.5MB
&lt;missing&gt;           5 weeks ago         |11 BOOTSTRAP_COMMIT=d4143f1845f26e8e99d0a1a…   17B
&lt;missing&gt;           5 weeks ago         |11 BOOTSTRAP_COMMIT=d4143f1845f26e8e99d0a1a…   8.12GB
&lt;missing&gt;           5 weeks ago         |11 BOOTSTRAP_COMMIT=d4143f1845f26e8e99d0a1a…   239MB
&lt;missing&gt;           5 weeks ago         /bin/sh -c #(nop)  ENV LANG=C.UTF-8 LC_ALL=C…   0B
&lt;missing&gt;           5 weeks ago         /bin/sh -c #(nop)  ARG STACK_ROOT=/home/stac…   0B
&lt;missing&gt;           5 weeks ago         /bin/sh -c #(nop)  ARG VARIANT=build            0B
&lt;missing&gt;           5 weeks ago         /bin/sh -c #(nop)  ARG DEBIAN_FRONTEND=nonin…   0B
&lt;missing&gt;           5 weeks ago         /bin/sh -c #(nop)  ARG BOOTSTRAP_COMMIT=d414…   0B
&lt;missing&gt;           5 weeks ago         /bin/sh -c #(nop)  ARG LLVM_VERSION=3.9         0B
&lt;missing&gt;           5 weeks ago         /bin/sh -c #(nop)  ARG JVM_PATH=/usr/lib/jvm…   0B
&lt;missing&gt;           5 weeks ago         /bin/sh -c #(nop)  ARG CUDA_VERSION=10.0        0B
&lt;missing&gt;           5 weeks ago         /bin/sh -c #(nop)  ARG STACK_VERSION=2.1.3      0B
&lt;missing&gt;           5 weeks ago         /bin/sh -c #(nop)  ARG PID1_VERSION=0.1.2.0     0B
&lt;missing&gt;           5 weeks ago         /bin/sh -c #(nop)  ARG LTS_SLUG=lts-14.0        0B
&lt;missing&gt;           5 weeks ago         /bin/sh -c #(nop)  ARG GHC_VERSION=8.6.5        0B
&lt;missing&gt;           5 weeks ago         /bin/sh -c #(nop)  LABEL maintainer=manny@fp…   0B
&lt;missing&gt;           8 weeks ago         /bin/sh -c #(nop)  CMD [&quot;/bin/bash&quot;]            0B
&lt;missing&gt;           8 weeks ago         /bin/sh -c mkdir -p /run/systemd &amp;&amp; echo &#39;do…   7B
&lt;missing&gt;           8 weeks ago         /bin/sh -c set -xe   &amp;&amp; echo &#39;#!/bin/sh&#39; &gt; /…   745B
&lt;missing&gt;           8 weeks ago         /bin/sh -c [ -z &quot;$(apt-get indextargets)&quot; ]     987kB
&lt;missing&gt;           8 weeks ago         /bin/sh -c #(nop) ADD file:3ddd02d976792b6c6…   63.2MB</code></pre>
<p>上から6番目，<code>--no-trunc</code> 付けて確認してみたら<a href="https://github.com/commercialhaskell/stack/blob/b8f8ec203209fccb1a86b9e8705f16125845254b/etc/dockerfiles/stack-build/lts-13.20/Dockerfile#L29-L46">ココ</a>だった． そう，犯人は <a href="https://github.com/commercialhaskell/stackage/blob/f5d1776c9c5d311469f889d251faa97bdd62e625/debian-bootstrap.sh"><code>debian-bootstrap.sh</code></a> です．</p>
<p>要するに，Stackage にある全てのパッケージを利用するための全ての <code>apt-get install</code> やらなんやらをしている． そりゃ重いわけだ．</p>
<h2 id="おしまい">おしまい</h2>
<p>CI が爆速になったし，自動で Resolver の追従もしてくれるし，私は満足です． ちょこっとずつ古いプロジェクトの置き換えしている．</p>
  </div>]]></summary>
</entry>
<entry>
    <title>Elm で QR コードリーダー</title>
    <link href="https://matsubara0507.github.io/posts/2019-08-26-qr-code-reader-with-elm.html" />
    <id>https://matsubara0507.github.io/posts/2019-08-26-qr-code-reader-with-elm.html</id>
    <published>2019-08-26T00:00:00Z</published>
    <updated>2019-08-26T00:00:00Z</updated>
    <summary type="html"><![CDATA[<div class="post-content" itemprop="articleBody">
    <p>タイトル通りです． ただし，jsQR とポートを使ってるだけです． Elm 側で QR コードのデコードをするわけじゃないので，そういうのを期待した人はすいません．</p>
<p>今回の実装は下記のリポジトリにあります:</p>
<h4 id="section"><iframe width="320" height="215" scrolling="no" frameborder="0" src="https://matsubara0507.github.io/my-github-cards/?target=matsubara0507/anaqram-web-samples"></iframe></h4>
<p>リポジトリの詳細のとこを読むとわかるんですけど，実はこの話は書典7のネタの一部を抜粋したものです(典の方はもっと丁寧に書いてます)．</p>
<h2 id="elm-からカメラを使う">Elm からカメラを使う</h2>
<p>ブラウザからカメラを使うには JavaScript の <a href="https://developer.mozilla.org/ja/docs/Web/API/MediaDevices/getUserMedia"><code>MediaDevices.getUserMedia()</code></a> を使う． このメソッドを使うには <a href="https://webrtc.github.io/samples/src/content/getusermedia/gum">WebRTC のサンプルコード</a>を参考に次のように書く:</p>
<div class="sourceCode" id="cb1"><pre class="sourceCode javascript"><code class="sourceCode javascript"><span id="cb1-1"><a href="#cb1-1"></a><span class="kw">const</span> constraints <span class="op">=</span> <span class="op">{</span> <span class="dt">audio</span><span class="op">:</span> <span class="kw">false</span><span class="op">,</span> <span class="dt">video</span><span class="op">:</span> <span class="kw">true</span> <span class="op">};</span></span>
<span id="cb1-2"><a href="#cb1-2"></a></span>
<span id="cb1-3"><a href="#cb1-3"></a><span class="kw">async</span> <span class="kw">function</span> <span class="at">initCamera</span>(videoId) <span class="op">{</span></span>
<span id="cb1-4"><a href="#cb1-4"></a>  <span class="cf">try</span> <span class="op">{</span></span>
<span id="cb1-5"><a href="#cb1-5"></a>    <span class="kw">const</span> stream <span class="op">=</span> <span class="cf">await</span> <span class="va">navigator</span>.<span class="va">mediaDevices</span>.<span class="at">getUserMedia</span>(constraints)<span class="op">;</span></span>
<span id="cb1-6"><a href="#cb1-6"></a>    <span class="va">document</span>.<span class="at">getElementById</span>(videoId).<span class="at">srcObject</span> <span class="op">=</span> stream<span class="op">;</span></span>
<span id="cb1-7"><a href="#cb1-7"></a>  <span class="op">}</span> <span class="cf">catch</span> (e) <span class="op">{</span></span>
<span id="cb1-8"><a href="#cb1-8"></a>    <span class="at">handleError</span>(e)<span class="op">;</span> <span class="co">// ここの実装は割愛</span></span>
<span id="cb1-9"><a href="#cb1-9"></a>  <span class="op">}</span></span>
<span id="cb1-10"><a href="#cb1-10"></a><span class="op">}</span></span></code></pre></div>
<p>HTML 側は <code>id=videoId</code> を設定した <code>video</code> タグを用意するだけで良い． <code>initCamera</code> メソッドを Elm から使うにはポート機能を使って呼び出す:</p>
<div class="sourceCode" id="cb2"><pre class="sourceCode elm"><code class="sourceCode elm"><span id="cb2-1"><a href="#cb2-1"></a><span class="co">-- QRCode.elm</span></span>
<span id="cb2-2"><a href="#cb2-2"></a><span class="kw">port</span> <span class="kw">module</span> <span class="dt">QRCode</span> <span class="kw">exposing</span> (<span class="op">..</span>)</span>
<span id="cb2-3"><a href="#cb2-3"></a></span>
<span id="cb2-4"><a href="#cb2-4"></a><span class="kw">port</span> <span class="fu">startCamera</span> : () <span class="op">-&gt;</span> <span class="dt">Cmd</span> <span class="fu">msg</span></span></code></pre></div>
<p>純粋関数型プログラミング言語である Elm にとって JavaScript のコードを直接呼び出すことは非純粋な行為(<code>Cmd a</code> 型は非純粋な型)であり，<code>port</code> プレフィックスを使って普通の関数とは全く別に管理される(<code>port</code> が付くモジュール・関数はパッケージに含めることができない)． より詳しいポート機能については <a href="https://guide.elm-lang.jp/interop/ports.html">guide.elm-lang.jp のポートのページ</a>を読むと良いだろう．</p>
<p>さて，<code>startCamera</code> 関数の実装は JavaScript 側で次のように行った:</p>
<div class="sourceCode" id="cb3"><pre class="sourceCode javascript"><code class="sourceCode javascript"><span id="cb3-1"><a href="#cb3-1"></a><span class="co">// flags は Elm コードの JavaScript 側から与える初期値</span></span>
<span id="cb3-2"><a href="#cb3-2"></a><span class="kw">const</span> flags <span class="op">=</span> <span class="op">{</span></span>
<span id="cb3-3"><a href="#cb3-3"></a>  <span class="dt">ids</span><span class="op">:</span> <span class="op">{</span> <span class="dt">video</span><span class="op">:</span> <span class="st">&#39;video_area&#39;</span> <span class="op">},</span></span>
<span id="cb3-4"><a href="#cb3-4"></a>  <span class="dt">size</span><span class="op">:</span> <span class="op">{</span> <span class="dt">width</span><span class="op">:</span> <span class="dv">300</span><span class="op">,</span> <span class="dt">height</span><span class="op">:</span> <span class="dv">300</span> <span class="op">}</span></span>
<span id="cb3-5"><a href="#cb3-5"></a><span class="op">};</span></span>
<span id="cb3-6"><a href="#cb3-6"></a></span>
<span id="cb3-7"><a href="#cb3-7"></a><span class="co">// true だけではなくカメラのサイズとリアカメラ優先フラグ(facingMode)を与える</span></span>
<span id="cb3-8"><a href="#cb3-8"></a><span class="kw">const</span> constraints <span class="op">=</span> <span class="op">{</span></span>
<span id="cb3-9"><a href="#cb3-9"></a>  <span class="dt">audio</span><span class="op">:</span> <span class="kw">false</span><span class="op">,</span></span>
<span id="cb3-10"><a href="#cb3-10"></a>  <span class="dt">video</span><span class="op">:</span> <span class="op">{</span>...<span class="va">flags</span>.<span class="at">size</span><span class="op">,</span> <span class="dt">facingMode</span><span class="op">:</span> <span class="st">&quot;environment&quot;</span> <span class="op">}</span></span>
<span id="cb3-11"><a href="#cb3-11"></a><span class="op">};</span></span>
<span id="cb3-12"><a href="#cb3-12"></a></span>
<span id="cb3-13"><a href="#cb3-13"></a><span class="kw">const</span> app <span class="op">=</span> <span class="va">Elm</span>.<span class="va">Main</span>.<span class="at">init</span>(<span class="op">{</span></span>
<span id="cb3-14"><a href="#cb3-14"></a>  <span class="dt">node</span><span class="op">:</span> <span class="va">document</span>.<span class="at">getElementById</span>(<span class="st">&#39;main&#39;</span>)<span class="op">,</span></span>
<span id="cb3-15"><a href="#cb3-15"></a>  <span class="dt">flags</span><span class="op">:</span> flags</span>
<span id="cb3-16"><a href="#cb3-16"></a><span class="op">}</span>)<span class="op">;</span></span>
<span id="cb3-17"><a href="#cb3-17"></a><span class="va">app</span>.<span class="va">ports</span>.<span class="va">startCamera</span>.<span class="at">subscribe</span>(<span class="kw">function</span>() <span class="op">{</span> <span class="at">initCamera</span>(<span class="va">flags</span>.<span class="va">ids</span>.<span class="at">video</span>) <span class="op">}</span>)<span class="op">;</span></span></code></pre></div>
<p>あとはこんな感じに Elm 側で呼び出す:</p>
<div class="sourceCode" id="cb4"><pre class="sourceCode elm"><code class="sourceCode elm"><span id="cb4-1"><a href="#cb4-1"></a><span class="kw">module</span> <span class="dt">Main</span> <span class="kw">exposing</span> (<span class="fu">main</span>)</span>
<span id="cb4-2"><a href="#cb4-2"></a></span>
<span id="cb4-3"><a href="#cb4-3"></a><span class="kw">import</span> <span class="dt">QRCode</span></span>
<span id="cb4-4"><a href="#cb4-4"></a><span class="kw">import</span> <span class="dt">Browser</span></span>
<span id="cb4-5"><a href="#cb4-5"></a><span class="kw">import</span> <span class="dt">Html</span> <span class="kw">exposing</span> (<span class="op">..</span>)</span>
<span id="cb4-6"><a href="#cb4-6"></a><span class="kw">import</span> <span class="dt">Html</span><span class="op">.</span><span class="dt">Attributes</span> <span class="kw">exposing</span> (<span class="op">..</span>)</span>
<span id="cb4-7"><a href="#cb4-7"></a><span class="kw">import</span> <span class="dt">Html</span><span class="op">.</span><span class="dt">Events</span> <span class="kw">exposing</span> (<span class="fu">onClick</span>)</span>
<span id="cb4-8"><a href="#cb4-8"></a></span>
<span id="cb4-9"><a href="#cb4-9"></a><span class="fu">main</span> : <span class="dt">Program</span> <span class="dt">Config</span> <span class="dt">Model</span> <span class="dt">Msg</span></span>
<span id="cb4-10"><a href="#cb4-10"></a><span class="fu">main</span> <span class="op">=</span></span>
<span id="cb4-11"><a href="#cb4-11"></a>  <span class="dt">Browser</span><span class="op">.</span><span class="fu">element</span></span>
<span id="cb4-12"><a href="#cb4-12"></a>    { <span class="fu">init</span> <span class="op">=</span> <span class="fu">init</span></span>
<span id="cb4-13"><a href="#cb4-13"></a>    <span class="op">,</span> <span class="fu">view</span> <span class="op">=</span> <span class="fu">view</span></span>
<span id="cb4-14"><a href="#cb4-14"></a>    <span class="op">,</span> <span class="fu">update</span> <span class="op">=</span> <span class="fu">update</span></span>
<span id="cb4-15"><a href="#cb4-15"></a>    <span class="op">,</span> <span class="fu">subscriptions</span> <span class="op">=</span> \<span class="fu">_</span> <span class="op">-&gt;</span> <span class="dt">Sub</span><span class="op">.</span><span class="fu">none</span></span>
<span id="cb4-16"><a href="#cb4-16"></a>    }</span>
<span id="cb4-17"><a href="#cb4-17"></a></span>
<span id="cb4-18"><a href="#cb4-18"></a><span class="kw">type</span> <span class="kw">alias</span> <span class="dt">Config</span> <span class="op">=</span></span>
<span id="cb4-19"><a href="#cb4-19"></a>  { <span class="fu">ids</span> : { <span class="fu">video</span> : <span class="dt">String</span> }<span class="op">,</span> <span class="fu">size</span> : { <span class="fu">width</span> : <span class="dt">Int</span><span class="op">,</span> <span class="fu">height</span> : <span class="dt">Int</span> } }</span>
<span id="cb4-20"><a href="#cb4-20"></a></span>
<span id="cb4-21"><a href="#cb4-21"></a><span class="kw">type</span> <span class="kw">alias</span> <span class="dt">Model</span> <span class="op">=</span> { <span class="fu">config</span> : <span class="dt">Config</span> }</span>
<span id="cb4-22"><a href="#cb4-22"></a></span>
<span id="cb4-23"><a href="#cb4-23"></a><span class="fu">init</span> : <span class="dt">Config</span> <span class="op">-&gt;</span> (<span class="dt">Model</span><span class="op">,</span> <span class="dt">Cmd</span> <span class="dt">Msg</span>)</span>
<span id="cb4-24"><a href="#cb4-24"></a><span class="fu">init</span> <span class="fu">config</span> <span class="op">=</span> (<span class="dt">Model</span> <span class="fu">config</span><span class="op">,</span> <span class="dt">Cmd</span><span class="op">.</span><span class="fu">none</span>)</span>
<span id="cb4-25"><a href="#cb4-25"></a></span>
<span id="cb4-26"><a href="#cb4-26"></a><span class="kw">type</span> <span class="dt">Msg</span> <span class="op">=</span> <span class="dt">EnableCamera</span></span>
<span id="cb4-27"><a href="#cb4-27"></a></span>
<span id="cb4-28"><a href="#cb4-28"></a><span class="fu">update</span> : <span class="dt">Msg</span> <span class="op">-&gt;</span> <span class="dt">Model</span> <span class="op">-&gt;</span> (<span class="dt">Model</span><span class="op">,</span> <span class="dt">Cmd</span> <span class="dt">Msg</span>)</span>
<span id="cb4-29"><a href="#cb4-29"></a><span class="fu">update</span> <span class="fu">msg</span> <span class="fu">model</span> <span class="op">=</span></span>
<span id="cb4-30"><a href="#cb4-30"></a>  <span class="cf">case</span> <span class="fu">msg</span> <span class="cf">of</span></span>
<span id="cb4-31"><a href="#cb4-31"></a>    <span class="dt">EnableCamera</span> <span class="op">-&gt;</span> (<span class="fu">model</span><span class="op">,</span> <span class="dt">QRCode</span><span class="op">.</span><span class="fu">startCamera</span> ())</span>
<span id="cb4-32"><a href="#cb4-32"></a></span>
<span id="cb4-33"><a href="#cb4-33"></a><span class="fu">view</span> : <span class="dt">Model</span> <span class="op">-&gt;</span> <span class="dt">Html</span> <span class="dt">Msg</span></span>
<span id="cb4-34"><a href="#cb4-34"></a><span class="fu">view</span> <span class="fu">model</span> <span class="op">=</span></span>
<span id="cb4-35"><a href="#cb4-35"></a>  <span class="fu">div</span> []</span>
<span id="cb4-36"><a href="#cb4-36"></a>    [ <span class="fu">video</span></span>
<span id="cb4-37"><a href="#cb4-37"></a>        [ <span class="fu">id</span> <span class="fu">model</span><span class="op">.</span><span class="fu">config</span><span class="op">.</span><span class="fu">ids</span><span class="op">.</span><span class="fu">video</span><span class="op">,</span> <span class="fu">style</span> <span class="st">&quot;background-color&quot;</span> <span class="st">&quot;#000&quot;</span><span class="op">,</span> <span class="fu">autoplay</span> <span class="dt">True</span></span>
<span id="cb4-38"><a href="#cb4-38"></a>        <span class="op">,</span> <span class="fu">width</span> <span class="fu">model</span><span class="op">.</span><span class="fu">config</span><span class="op">.</span><span class="fu">size</span><span class="op">.</span><span class="fu">width</span><span class="op">,</span> <span class="fu">height</span> <span class="fu">model</span><span class="op">.</span><span class="fu">config</span><span class="op">.</span><span class="fu">size</span><span class="op">.</span><span class="fu">height</span></span>
<span id="cb4-39"><a href="#cb4-39"></a>        <span class="co">-- iOS のために必要</span></span>
<span id="cb4-40"><a href="#cb4-40"></a>        <span class="op">,</span> <span class="fu">attribute</span> <span class="st">&quot;playsinline&quot;</span> <span class="st">&quot;&quot;</span></span>
<span id="cb4-41"><a href="#cb4-41"></a>        ] []</span>
<span id="cb4-42"><a href="#cb4-42"></a>    <span class="op">,</span> <span class="fu">p</span> [] [ <span class="fu">button</span> [ <span class="fu">onClick</span> <span class="dt">EnableCamera</span> ] [ <span class="fu">text</span> <span class="st">&quot;Enable Camera&quot;</span> ] ]</span>
<span id="cb4-43"><a href="#cb4-43"></a>    ]</span></code></pre></div>
<p>ボタンの <code>onClick</code> でイベントハンドラを受け取り，<code>startCamera</code> ポート関数を呼び出しているだけ． また，<code>Flags</code> 機能を使って <code>video</code> タグに必要な id を JavaScript 側と共有している． <a href="https://matsubara0507.github.io/anaqram-web-samples/step1/">ここ</a>で実際にビルド結果を触れる．</p>
<h2 id="qr-コードを読み取る">QR コードを読み取る</h2>
<p>Elm からカメラを起動できたので，次に QR コードを読み取る． 冒頭で述べた通り，QR コードのでコードには <a href="https://github.com/cozmo/jsQR">jsQR</a> という JavaScript のライブラリを利用する． jsQR の使い方は簡単で，<code>jsQR</code> というメソッドに <code>ImageData</code> オブジェクト(とサイズ)を渡してあげるだけ:</p>
<div class="sourceCode" id="cb5"><pre class="sourceCode javascript"><code class="sourceCode javascript"><span id="cb5-1"><a href="#cb5-1"></a><span class="co">// jsQR の README に載っているサンプルコード</span></span>
<span id="cb5-2"><a href="#cb5-2"></a><span class="kw">const</span> code <span class="op">=</span> <span class="at">jsQR</span>(imageData<span class="op">,</span> width<span class="op">,</span> height)<span class="op">;</span></span>
<span id="cb5-3"><a href="#cb5-3"></a><span class="co">// QR コードがなければ null になるようです</span></span>
<span id="cb5-4"><a href="#cb5-4"></a><span class="cf">if</span> (code) <span class="op">{</span></span>
<span id="cb5-5"><a href="#cb5-5"></a>  <span class="va">console</span>.<span class="at">log</span>(<span class="st">&quot;Found QR code&quot;</span><span class="op">,</span> code)<span class="op">;</span></span>
<span id="cb5-6"><a href="#cb5-6"></a><span class="op">}</span></span></code></pre></div>
<p><code>ImageData</code> オブジェクトはカメラ画像をいったん Canvas に退避させることで取得できる:</p>
<div class="sourceCode" id="cb6"><pre class="sourceCode javascript"><code class="sourceCode javascript"><span id="cb6-1"><a href="#cb6-1"></a><span class="kw">function</span> <span class="at">captureImage</span>(videoId<span class="op">,</span> captureId) <span class="op">{</span></span>
<span id="cb6-2"><a href="#cb6-2"></a>  <span class="kw">var</span> canvas <span class="op">=</span> <span class="va">document</span>.<span class="at">getElementById</span>(captureId)<span class="op">;</span></span>
<span id="cb6-3"><a href="#cb6-3"></a>  <span class="kw">var</span> video <span class="op">=</span> <span class="va">document</span>.<span class="at">getElementById</span>(videoId)<span class="op">;</span></span>
<span id="cb6-4"><a href="#cb6-4"></a>  <span class="va">canvas</span>.<span class="at">width</span>  <span class="op">=</span> <span class="va">video</span>.<span class="at">videoWidth</span><span class="op">;</span></span>
<span id="cb6-5"><a href="#cb6-5"></a>  <span class="va">canvas</span>.<span class="at">height</span> <span class="op">=</span> <span class="va">video</span>.<span class="at">videoHeight</span><span class="op">;</span></span>
<span id="cb6-6"><a href="#cb6-6"></a></span>
<span id="cb6-7"><a href="#cb6-7"></a>  <span class="kw">const</span> ctx <span class="op">=</span> <span class="va">canvas</span>.<span class="at">getContext</span>(<span class="st">&#39;2d&#39;</span>)<span class="op">;</span></span>
<span id="cb6-8"><a href="#cb6-8"></a>  <span class="va">ctx</span>.<span class="at">drawImage</span>(video<span class="op">,</span> <span class="dv">0</span><span class="op">,</span> <span class="dv">0</span>)<span class="op">;</span></span>
<span id="cb6-9"><a href="#cb6-9"></a>  <span class="cf">return</span> <span class="va">ctx</span>.<span class="at">getImageData</span>(<span class="dv">0</span><span class="op">,</span> <span class="dv">0</span><span class="op">,</span> <span class="va">video</span>.<span class="at">videoWidth</span><span class="op">,</span> <span class="va">video</span>.<span class="at">videoHeight</span>)<span class="op">;</span></span>
<span id="cb6-10"><a href="#cb6-10"></a><span class="op">}</span></span></code></pre></div>
<p>さて，後はこれを Elm で呼び出す． ただし，カメラを起動する <code>startCamera</code> 関数の時と違い，ボタンを押したらQRコードのデコード結果の文字列を取得したい． なので JavaScript 側から実行されることを想定した「内向き」のポート関数も定義する:</p>
<div class="sourceCode" id="cb7"><pre class="sourceCode elm"><code class="sourceCode elm"><span id="cb7-1"><a href="#cb7-1"></a><span class="co">-- QRCode.elm</span></span>
<span id="cb7-2"><a href="#cb7-2"></a><span class="kw">port</span> <span class="kw">module</span> <span class="dt">QRCode</span> <span class="kw">exposing</span> (<span class="op">..</span>)</span>
<span id="cb7-3"><a href="#cb7-3"></a></span>
<span id="cb7-4"><a href="#cb7-4"></a><span class="kw">import</span> <span class="dt">Json</span><span class="op">.</span><span class="dt">Decode</span> <span class="kw">as</span> <span class="dt">D</span> <span class="kw">exposing</span> (<span class="dt">Decoder</span>)</span>
<span id="cb7-5"><a href="#cb7-5"></a><span class="kw">import</span> <span class="dt">Json</span><span class="op">.</span><span class="dt">Encode</span> <span class="kw">as</span> <span class="dt">E</span></span>
<span id="cb7-6"><a href="#cb7-6"></a></span>
<span id="cb7-7"><a href="#cb7-7"></a><span class="kw">type</span> <span class="kw">alias</span> <span class="dt">QRCode</span> <span class="op">=</span> { <span class="fu">data</span> : <span class="dt">String</span> }</span>
<span id="cb7-8"><a href="#cb7-8"></a></span>
<span id="cb7-9"><a href="#cb7-9"></a><span class="fu">decoder</span> : <span class="dt">Decoder</span> <span class="dt">QRCode</span></span>
<span id="cb7-10"><a href="#cb7-10"></a><span class="fu">decoder</span> <span class="op">=</span> <span class="dt">D</span><span class="op">.</span><span class="fu">map</span> <span class="dt">QRCode</span> (<span class="dt">D</span><span class="op">.</span><span class="fu">field</span> <span class="st">&quot;data&quot;</span> <span class="dt">D</span><span class="op">.</span><span class="fu">string</span>)</span>
<span id="cb7-11"><a href="#cb7-11"></a></span>
<span id="cb7-12"><a href="#cb7-12"></a><span class="kw">port</span> <span class="fu">startCamera</span> : () <span class="op">-&gt;</span> <span class="dt">Cmd</span> <span class="fu">msg</span></span>
<span id="cb7-13"><a href="#cb7-13"></a></span>
<span id="cb7-14"><a href="#cb7-14"></a><span class="kw">port</span> <span class="fu">captureImage</span> : () <span class="op">-&gt;</span> <span class="dt">Cmd</span> <span class="fu">msg</span></span>
<span id="cb7-15"><a href="#cb7-15"></a></span>
<span id="cb7-16"><a href="#cb7-16"></a><span class="co">-- JS とは JSON データでやり取りするのが良いらしい</span></span>
<span id="cb7-17"><a href="#cb7-17"></a><span class="kw">port</span> <span class="fu">updateQRCode</span> : (<span class="dt">E</span><span class="op">.</span><span class="dt">Value</span> <span class="op">-&gt;</span> <span class="fu">msg</span>) <span class="op">-&gt;</span> <span class="dt">Sub</span> <span class="fu">msg</span></span>
<span id="cb7-18"><a href="#cb7-18"></a></span>
<span id="cb7-19"><a href="#cb7-19"></a><span class="fu">updateQRCodeWithDecode</span> : (<span class="dt">Result</span> <span class="dt">D</span><span class="op">.</span><span class="dt">Error</span> (<span class="dt">Maybe</span> <span class="dt">QRCode</span>) <span class="op">-&gt;</span> <span class="fu">msg</span>) <span class="op">-&gt;</span> <span class="dt">Sub</span> <span class="fu">msg</span></span>
<span id="cb7-20"><a href="#cb7-20"></a><span class="fu">updateQRCodeWithDecode</span> <span class="fu">msg</span> <span class="op">=</span></span>
<span id="cb7-21"><a href="#cb7-21"></a>  <span class="fu">updateQRCode</span> (<span class="fu">msg</span> <span class="op">&lt;&lt;</span> <span class="dt">D</span><span class="op">.</span><span class="fu">decodeValue</span> (<span class="dt">D</span><span class="op">.</span><span class="fu">nullable</span> <span class="fu">decoder</span>))</span></code></pre></div>
<p><code>updateQRCode</code> 関数が内向きのポート関数だ． <code>Sub a</code> 型はタイマーやマウスの動作など外部から非同期に送られてくるメッセージを取得するための型だ． 次のように，JS 側で実装する <code>captureImage</code> 関数の最後で <code>updateQRCode</code> 関数が呼ばれ <code>QRCode</code> 型を表す JS オブジェクトが送られてくる:</p>
<div class="sourceCode" id="cb8"><pre class="sourceCode javascript"><code class="sourceCode javascript"><span id="cb8-1"><a href="#cb8-1"></a><span class="co">// canvas の id を追加</span></span>
<span id="cb8-2"><a href="#cb8-2"></a><span class="kw">const</span> flags <span class="op">=</span> <span class="op">{</span></span>
<span id="cb8-3"><a href="#cb8-3"></a>  <span class="dt">ids</span><span class="op">:</span> <span class="op">{</span> <span class="dt">video</span><span class="op">:</span> <span class="st">&#39;video_area&#39;</span><span class="op">,</span> <span class="dt">capture</span><span class="op">:</span> <span class="st">&#39;capture_image&#39;</span> <span class="op">},</span></span>
<span id="cb8-4"><a href="#cb8-4"></a>  <span class="dt">size</span><span class="op">:</span> <span class="op">{</span> <span class="dt">width</span><span class="op">:</span> <span class="dv">300</span><span class="op">,</span> <span class="dt">height</span><span class="op">:</span> <span class="dv">300</span> <span class="op">}</span></span>
<span id="cb8-5"><a href="#cb8-5"></a><span class="op">};</span></span>
<span id="cb8-6"><a href="#cb8-6"></a></span>
<span id="cb8-7"><a href="#cb8-7"></a><span class="va">app</span>.<span class="va">ports</span>.<span class="va">captureImage</span>.<span class="at">subscribe</span>(<span class="kw">function</span>() <span class="op">{</span></span>
<span id="cb8-8"><a href="#cb8-8"></a>  <span class="kw">const</span> imageData <span class="op">=</span> <span class="at">captureImage</span>(<span class="va">flags</span>.<span class="va">ids</span>.<span class="at">video</span><span class="op">,</span> <span class="va">flags</span>.<span class="va">ids</span>.<span class="at">capture</span>)<span class="op">;</span></span>
<span id="cb8-9"><a href="#cb8-9"></a>  <span class="kw">const</span> qrcode <span class="op">=</span> <span class="at">jsQR</span>(<span class="va">imageData</span>.<span class="at">data</span><span class="op">,</span> <span class="va">imageData</span>.<span class="at">width</span><span class="op">,</span> <span class="va">imageData</span>.<span class="at">height</span>)</span>
<span id="cb8-10"><a href="#cb8-10"></a>  <span class="va">app</span>.<span class="va">ports</span>.<span class="va">updateQRCode</span>.<span class="at">send</span>(qrcode)<span class="op">;</span> <span class="co">// ココ</span></span>
<span id="cb8-11"><a href="#cb8-11"></a><span class="op">}</span>)</span></code></pre></div>
<p>Elm 側は次のように書き換える:</p>
<div class="sourceCode" id="cb9"><pre class="sourceCode elm"><code class="sourceCode elm"><span id="cb9-1"><a href="#cb9-1"></a><span class="kw">module</span> <span class="dt">Main</span> <span class="kw">exposing</span> (<span class="fu">main</span>)</span>
<span id="cb9-2"><a href="#cb9-2"></a></span>
<span id="cb9-3"><a href="#cb9-3"></a><span class="kw">import</span> <span class="dt">AnaQRam</span><span class="op">.</span><span class="dt">QRCode</span> <span class="kw">as</span> <span class="dt">QRCode</span> <span class="kw">exposing</span> (<span class="dt">QRCode</span>)</span>
<span id="cb9-4"><a href="#cb9-4"></a><span class="kw">import</span> <span class="dt">Json</span><span class="op">.</span><span class="dt">Decode</span> <span class="kw">exposing</span> (<span class="dt">Error</span><span class="op">,</span> <span class="fu">errorToString</span>)</span>
<span id="cb9-5"><a href="#cb9-5"></a></span>
<span id="cb9-6"><a href="#cb9-6"></a><span class="fu">main</span> : <span class="dt">Program</span> <span class="dt">Config</span> <span class="dt">Model</span> <span class="dt">Msg</span></span>
<span id="cb9-7"><a href="#cb9-7"></a><span class="fu">main</span> <span class="op">=</span></span>
<span id="cb9-8"><a href="#cb9-8"></a>  <span class="dt">Browser</span><span class="op">.</span><span class="fu">element</span></span>
<span id="cb9-9"><a href="#cb9-9"></a>    { <span class="op">..</span> <span class="co">-- 割愛</span></span>
<span id="cb9-10"><a href="#cb9-10"></a>    <span class="op">,</span> <span class="fu">subscriptions</span> <span class="op">=</span> <span class="fu">subscriptions</span></span>
<span id="cb9-11"><a href="#cb9-11"></a>    }</span>
<span id="cb9-12"><a href="#cb9-12"></a></span>
<span id="cb9-13"><a href="#cb9-13"></a><span class="co">-- capture を追加</span></span>
<span id="cb9-14"><a href="#cb9-14"></a><span class="kw">type</span> <span class="kw">alias</span> <span class="dt">Config</span> <span class="op">=</span></span>
<span id="cb9-15"><a href="#cb9-15"></a>  { <span class="fu">ids</span> : { <span class="fu">video</span> : <span class="dt">String</span><span class="op">,</span> <span class="fu">capture</span> : <span class="dt">String</span> }</span>
<span id="cb9-16"><a href="#cb9-16"></a>  <span class="op">,</span> <span class="fu">size</span> : { <span class="fu">width</span> : <span class="dt">Int</span><span class="op">,</span> <span class="fu">height</span> : <span class="dt">Int</span> }</span>
<span id="cb9-17"><a href="#cb9-17"></a>  }</span>
<span id="cb9-18"><a href="#cb9-18"></a></span>
<span id="cb9-19"><a href="#cb9-19"></a><span class="kw">type</span> <span class="kw">alias</span> <span class="dt">Model</span> <span class="op">=</span></span>
<span id="cb9-20"><a href="#cb9-20"></a>  { <span class="fu">config</span> : <span class="dt">Config</span></span>
<span id="cb9-21"><a href="#cb9-21"></a>  <span class="op">,</span> <span class="fu">qrcode</span> : <span class="dt">Maybe</span> <span class="dt">QRCode</span> <span class="co">-- QRコードのデコード結果</span></span>
<span id="cb9-22"><a href="#cb9-22"></a>  <span class="op">,</span> <span class="fu">error</span> : <span class="dt">String</span>        <span class="co">-- JSONのデコード失敗結果</span></span>
<span id="cb9-23"><a href="#cb9-23"></a>  }</span>
<span id="cb9-24"><a href="#cb9-24"></a></span>
<span id="cb9-25"><a href="#cb9-25"></a><span class="fu">init</span> : <span class="dt">Config</span> <span class="op">-&gt;</span> (<span class="dt">Model</span><span class="op">,</span> <span class="dt">Cmd</span> <span class="dt">Msg</span>)</span>
<span id="cb9-26"><a href="#cb9-26"></a><span class="fu">init</span> <span class="fu">config</span> <span class="op">=</span> (<span class="dt">Model</span> <span class="fu">config</span> <span class="dt">Nothing</span> <span class="st">&quot;&quot;</span><span class="op">,</span> <span class="dt">Cmd</span><span class="op">.</span><span class="fu">none</span>)</span>
<span id="cb9-27"><a href="#cb9-27"></a></span>
<span id="cb9-28"><a href="#cb9-28"></a><span class="kw">type</span> <span class="dt">Msg</span></span>
<span id="cb9-29"><a href="#cb9-29"></a>  <span class="op">=</span> <span class="dt">EnableCamera</span></span>
<span id="cb9-30"><a href="#cb9-30"></a>  <span class="op">|</span> <span class="dt">CaptureImage</span></span>
<span id="cb9-31"><a href="#cb9-31"></a>  <span class="op">|</span> <span class="dt">UpdateQRCode</span> (<span class="dt">Result</span> <span class="dt">Error</span> (<span class="dt">Maybe</span> <span class="dt">QRCode</span>))</span>
<span id="cb9-32"><a href="#cb9-32"></a></span>
<span id="cb9-33"><a href="#cb9-33"></a><span class="fu">update</span> : <span class="dt">Msg</span> <span class="op">-&gt;</span> <span class="dt">Model</span> <span class="op">-&gt;</span> (<span class="dt">Model</span><span class="op">,</span> <span class="dt">Cmd</span> <span class="dt">Msg</span>)</span>
<span id="cb9-34"><a href="#cb9-34"></a><span class="fu">update</span> <span class="fu">msg</span> <span class="fu">model</span> <span class="op">=</span></span>
<span id="cb9-35"><a href="#cb9-35"></a>  <span class="cf">case</span> <span class="fu">msg</span> <span class="cf">of</span></span>
<span id="cb9-36"><a href="#cb9-36"></a>    <span class="op">...</span> <span class="co">-- 割愛</span></span>
<span id="cb9-37"><a href="#cb9-37"></a></span>
<span id="cb9-38"><a href="#cb9-38"></a>    <span class="dt">CaptureImage</span> <span class="op">-&gt;</span> (<span class="fu">model</span><span class="op">,</span> <span class="dt">QRCode</span><span class="op">.</span><span class="fu">captureImage</span> ())</span>
<span id="cb9-39"><a href="#cb9-39"></a></span>
<span id="cb9-40"><a href="#cb9-40"></a>    <span class="co">-- QRコードがなかった場合(null が返ってくるので)</span></span>
<span id="cb9-41"><a href="#cb9-41"></a>    <span class="dt">UpdateQRCode</span> (<span class="dt">Ok</span> <span class="dt">Nothing</span>) <span class="op">-&gt;</span> ({ <span class="fu">model</span> <span class="op">|</span> <span class="fu">error</span> <span class="op">=</span> <span class="st">&quot;QR code is not found&quot;</span> }<span class="op">,</span> <span class="dt">Cmd</span><span class="op">.</span><span class="fu">none</span>)</span>
<span id="cb9-42"><a href="#cb9-42"></a></span>
<span id="cb9-43"><a href="#cb9-43"></a>    <span class="co">-- QRコードのデコード成功</span></span>
<span id="cb9-44"><a href="#cb9-44"></a>    <span class="dt">UpdateQRCode</span> (<span class="dt">Ok</span> <span class="fu">qrcode</span>) <span class="op">-&gt;</span> ({ <span class="fu">model</span> <span class="op">|</span> <span class="fu">qrcode</span> <span class="op">=</span> <span class="fu">qrcode</span><span class="op">,</span> <span class="fu">error</span> <span class="op">=</span> <span class="st">&quot;&quot;</span> }<span class="op">,</span> <span class="dt">Cmd</span><span class="op">.</span><span class="fu">none</span>)</span>
<span id="cb9-45"><a href="#cb9-45"></a></span>
<span id="cb9-46"><a href="#cb9-46"></a>    <span class="co">-- JSONのデコード失敗</span></span>
<span id="cb9-47"><a href="#cb9-47"></a>    <span class="dt">UpdateQRCode</span> (<span class="dt">Err</span> <span class="fu">message</span>) <span class="op">-&gt;</span> ({ <span class="fu">model</span> <span class="op">|</span> <span class="fu">error</span> <span class="op">=</span> <span class="fu">errorToString</span> <span class="fu">message</span> }<span class="op">,</span> <span class="dt">Cmd</span><span class="op">.</span><span class="fu">none</span>)</span>
<span id="cb9-48"><a href="#cb9-48"></a></span>
<span id="cb9-49"><a href="#cb9-49"></a><span class="fu">view</span> : <span class="dt">Model</span> <span class="op">-&gt;</span> <span class="dt">Html</span> <span class="dt">Msg</span></span>
<span id="cb9-50"><a href="#cb9-50"></a><span class="fu">view</span> <span class="fu">model</span> <span class="op">=</span></span>
<span id="cb9-51"><a href="#cb9-51"></a>  <span class="fu">div</span> []</span>
<span id="cb9-52"><a href="#cb9-52"></a>    [ <span class="fu">video</span> <span class="co">-- 割愛</span></span>
<span id="cb9-53"><a href="#cb9-53"></a>    <span class="op">,</span> <span class="fu">p</span> [] [ <span class="fu">button</span> [ <span class="fu">onClick</span> <span class="dt">EnableCamera</span> ] [ <span class="fu">text</span> <span class="st">&quot;Enable Camera&quot;</span> ] ]</span>
<span id="cb9-54"><a href="#cb9-54"></a>    <span class="op">,</span> <span class="fu">p</span> [] [ <span class="fu">button</span> [ <span class="fu">onClick</span> <span class="dt">CaptureImage</span> ] [ <span class="fu">text</span> <span class="st">&quot;Decode QR&quot;</span> ] ]</span>
<span id="cb9-55"><a href="#cb9-55"></a>    <span class="op">,</span> <span class="fu">canvas</span> [ <span class="fu">id</span> <span class="fu">model</span><span class="op">.</span><span class="fu">config</span><span class="op">.</span><span class="fu">ids</span><span class="op">.</span><span class="fu">capture</span><span class="op">,</span> <span class="fu">hidden</span> <span class="dt">True</span> ] [] <span class="co">-- カメラ画像退避用</span></span>
<span id="cb9-56"><a href="#cb9-56"></a>    <span class="op">,</span> <span class="fu">viewResult</span> <span class="fu">model</span></span>
<span id="cb9-57"><a href="#cb9-57"></a>    ]</span>
<span id="cb9-58"><a href="#cb9-58"></a></span>
<span id="cb9-59"><a href="#cb9-59"></a><span class="fu">viewResult</span> : <span class="dt">Model</span> <span class="op">-&gt;</span> <span class="dt">Html</span> <span class="dt">Msg</span></span>
<span id="cb9-60"><a href="#cb9-60"></a><span class="fu">viewResult</span> <span class="fu">model</span> <span class="op">=</span></span>
<span id="cb9-61"><a href="#cb9-61"></a>  <span class="cf">if</span> <span class="dt">String</span><span class="op">.</span><span class="fu">isEmpty</span> <span class="fu">model</span><span class="op">.</span><span class="fu">error</span> <span class="cf">then</span></span>
<span id="cb9-62"><a href="#cb9-62"></a>    <span class="fu">p</span> [] [ <span class="fu">text</span> (<span class="st">&quot;QR code: &quot;</span> <span class="op">++</span> <span class="dt">Maybe</span><span class="op">.</span><span class="fu">withDefault</span> <span class="st">&quot;&quot;</span> (<span class="dt">Maybe</span><span class="op">.</span><span class="fu">map</span> <span class="op">.</span><span class="fu">data</span> <span class="fu">model</span><span class="op">.</span><span class="fu">qrcode</span>)) ]</span>
<span id="cb9-63"><a href="#cb9-63"></a>  <span class="cf">else</span></span>
<span id="cb9-64"><a href="#cb9-64"></a>    <span class="fu">p</span> [] [ <span class="fu">text</span> <span class="fu">model</span><span class="op">.</span><span class="fu">error</span> ]</span>
<span id="cb9-65"><a href="#cb9-65"></a></span>
<span id="cb9-66"><a href="#cb9-66"></a><span class="fu">subscriptions</span> : <span class="dt">Model</span> <span class="op">-&gt;</span> <span class="dt">Sub</span> <span class="dt">Msg</span></span>
<span id="cb9-67"><a href="#cb9-67"></a><span class="fu">subscriptions</span> <span class="fu">_</span> <span class="op">=</span> <span class="dt">QRCode</span><span class="op">.</span><span class="fu">updateQRCodeWithDecode</span> <span class="dt">UpdateQRCode</span></span></code></pre></div>
<p>出来上がったのが<a href="https://matsubara0507.github.io/anaqram-web-samples/step2">こんな感じ</a>． ほんとはここがゴールじゃないんだが結果的に QR コードリーダーができた．</p>
<h2 id="おしまい">おしまい</h2>
<p>Elm 側でデコードする話は気が向いたらそのうち頑張るかもしれない(画像データをポートでやりとりするのは，あまり効率的ではないと思うけど)．</p>
  </div>]]></summary>
</entry>
<entry>
    <title>elmap.hs プロジェクトを作りました</title>
    <link href="https://matsubara0507.github.io/posts/2019-08-05-create-elmap-project.html" />
    <id>https://matsubara0507.github.io/posts/2019-08-05-create-elmap-project.html</id>
    <published>2019-08-05T00:00:00Z</published>
    <updated>2019-08-05T00:00:00Z</updated>
    <summary type="html"><![CDATA[<div class="post-content" itemprop="articleBody">
    <p>GUI 付きのツールを作成したい時、普段は Elm を使います． さらにバックエンドを付けるときは Haskell + Elm で実装し，Elm 側で呼び出す API クライアントは <a href="http://hackage.haskell.org/package/elm-export">elm-export</a> と <a href="http://hackage.haskell.org/package/servant-elm">servant-elm</a> というパッケージを使い，Haskell Servant の API 定義から自動生成させていました．</p>
<p>elm-export は Elm 0.19 に追いつけてなかったので独自にフォークして運用し，また愛用している extensible パッケージにも独自で対応していました． しかし，servant-elm が Elm 0.19 に対応するために依存パッケージを elm-export から <a href="http://hackage.haskell.org/package/elm-bridge">elm-bridge</a> に変更したところ，独自で対応してた部分と色々都合が悪かったので，それらのクッションとなる薄いラッパーパッケージ群として elmap.hs プロジェクトを作成しました:</p>
<h2 id="section"><iframe width="320" height="184" scrolling="no" frameborder="0" src="https://matsubara0507.github.io/my-github-cards/?target=matsubara0507/elmap.hs"></iframe></h2>
<p>この記事は elmap.hs を作る上で色々したことのメモ書きです．</p>
<h2 id="なぜ-elm-bridgeservant-elm-ではダメか">なぜ elm-bridge/servant-elm ではダメか</h2>
<p>を説明するためにまずは elm-bridge パッケージについて紹介する．</p>
<h3 id="elm-bridge-パッケージ">elm-bridge パッケージ</h3>
<p>elm-bridge は Haskell の型定義から Elm の型定義などを生成するためのパッケージだ． 型定義の他にも，Elm 側の JSON デコーダー・エンコーダーも自動生成してくれる(メタプログラミングなどが無い Elm にとってこれは大変嬉しい)．</p>
<p>仕組みは簡単で，簡易的な Elm の型定義などを Haskell で表現している．</p>
<div class="sourceCode" id="cb1"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span id="cb1-1"><a href="#cb1-1"></a><span class="co">-- Elm の型定義そのもの</span></span>
<span id="cb1-2"><a href="#cb1-2"></a><span class="kw">data</span> <span class="dt">ETypeDef</span></span>
<span id="cb1-3"><a href="#cb1-3"></a>   <span class="ot">=</span> <span class="dt">ETypeAlias</span> <span class="dt">EAlias</span>         <span class="co">-- レコードの型エイリアス</span></span>
<span id="cb1-4"><a href="#cb1-4"></a>   <span class="op">|</span> <span class="dt">ETypePrimAlias</span> <span class="dt">EPrimAlias</span> <span class="co">-- 普通の型エイリアス</span></span>
<span id="cb1-5"><a href="#cb1-5"></a>   <span class="op">|</span> <span class="dt">ETypeSum</span> <span class="dt">ESum</span>             <span class="co">-- 直和型</span></span>
<span id="cb1-6"><a href="#cb1-6"></a></span>
<span id="cb1-7"><a href="#cb1-7"></a><span class="co">-- Elm の型自身</span></span>
<span id="cb1-8"><a href="#cb1-8"></a><span class="kw">data</span> <span class="dt">EType</span></span>
<span id="cb1-9"><a href="#cb1-9"></a>   <span class="ot">=</span> <span class="dt">ETyVar</span> <span class="dt">ETVar</span>       <span class="co">-- 型変数</span></span>
<span id="cb1-10"><a href="#cb1-10"></a>   <span class="op">|</span> <span class="dt">ETyCon</span> <span class="dt">ETCon</span>       <span class="co">-- コンストラクタ</span></span>
<span id="cb1-11"><a href="#cb1-11"></a>   <span class="op">|</span> <span class="dt">ETyApp</span> <span class="dt">EType</span> <span class="dt">EType</span> <span class="co">-- 型適用</span></span>
<span id="cb1-12"><a href="#cb1-12"></a>   <span class="op">|</span> <span class="dt">ETyTuple</span> <span class="dt">Int</span>       <span class="co">-- タプル型</span></span></code></pre></div>
<p>Elm での型定義の構文を表したのが <code>ETypeDef</code> 型で，関数の型を書くときなどの型を表現する構文を表したのが <code>EType</code> 型だ． <code>toElmType</code> 関数を使うことで任意の型の <code>EType</code> を <code>Typeable</code> で機械的に導出したり，<code>deriveElmDef</code> と TemplateHaskell で <code>ETypeDef</code> への変換を導出することができる:</p>
<div class="sourceCode" id="cb2"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span id="cb2-1"><a href="#cb2-1"></a><span class="ot">toElmType ::</span> <span class="dt">Typeable</span> a <span class="ot">=&gt;</span> <span class="dt">Proxy</span> a <span class="ot">-&gt;</span> <span class="dt">EType</span></span>
<span id="cb2-2"><a href="#cb2-2"></a></span>
<span id="cb2-3"><a href="#cb2-3"></a><span class="co">-- ETypeDef への変換は型クラスで定義する</span></span>
<span id="cb2-4"><a href="#cb2-4"></a><span class="kw">class</span> <span class="dt">IsElmDefinition</span> a <span class="kw">where</span></span>
<span id="cb2-5"><a href="#cb2-5"></a><span class="ot">  compileElmDef ::</span> <span class="dt">Proxy</span> a <span class="ot">-&gt;</span> <span class="dt">ETypeDef</span></span>
<span id="cb2-6"><a href="#cb2-6"></a></span>
<span id="cb2-7"><a href="#cb2-7"></a><span class="co">-- Hoge 型の IsElmDefinition 型クラスのインスタンスを導出</span></span>
<span id="cb2-8"><a href="#cb2-8"></a>deriveElmDef defaultOptions &#39;<span class="dt">&#39;Hoge</span></span></code></pre></div>
<p>ちなみに <code>deriveElmDef</code> の代わりに <code>deriveBoth</code> を使うと aeson 系の型クラスのインスタンスも一緒に導出してくれる． そして <code>ETypeDef</code> などに変換したあとは，<code>renderElm</code> 関数や <code>makeElmModule</code> 関数を使うことで Elm のコードに変換できる．</p>
<h3 id="都合の悪い部分">都合の悪い部分</h3>
<p>問題はどっちかというと servant-elm にある． servant-elm は Elm 関数の変換に内部で <code>toElmType</code> 関数を使っている:</p>
<div class="sourceCode" id="cb3"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span id="cb3-1"><a href="#cb3-1"></a><span class="kw">data</span> <span class="dt">LangElm</span></span>
<span id="cb3-2"><a href="#cb3-2"></a></span>
<span id="cb3-3"><a href="#cb3-3"></a><span class="kw">instance</span> <span class="dt">Typeable</span> a <span class="ot">=&gt;</span> <span class="dt">HasForeignType</span> <span class="dt">LangElm</span> <span class="dt">EType</span> a <span class="kw">where</span></span>
<span id="cb3-4"><a href="#cb3-4"></a>  typeFor _ _ _ <span class="ot">=</span> toElmType (<span class="dt">Proxy</span><span class="ot"> ::</span> <span class="dt">Proxy</span> a)</span>
<span id="cb3-5"><a href="#cb3-5"></a></span>
<span id="cb3-6"><a href="#cb3-6"></a><span class="ot">getEndpoints ::</span></span>
<span id="cb3-7"><a href="#cb3-7"></a>  (<span class="dt">HasForeign</span> <span class="dt">LangElm</span> <span class="dt">EType</span> api, <span class="dt">GenerateList</span> <span class="dt">EType</span> (<span class="dt">Foreign</span> <span class="dt">EType</span> api))</span>
<span id="cb3-8"><a href="#cb3-8"></a>  <span class="ot">=&gt;</span> <span class="dt">Proxy</span> api</span>
<span id="cb3-9"><a href="#cb3-9"></a>  <span class="ot">-&gt;</span> [<span class="dt">Req</span> <span class="dt">EType</span>]</span>
<span id="cb3-10"><a href="#cb3-10"></a>getEndpoints <span class="ot">=</span> listFromAPI (<span class="dt">Proxy</span><span class="ot"> ::</span> <span class="dt">Proxy</span> <span class="dt">LangElm</span>) (<span class="dt">Proxy</span><span class="ot"> ::</span> <span class="dt">Proxy</span> <span class="dt">EType</span>)</span></code></pre></div>
<p>ここで，extensible パッケージの拡張可能レコード型に <code>toElmType</code> を使ってみると…</p>
<div class="sourceCode" id="cb4"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span id="cb4-1"><a href="#cb4-1"></a><span class="op">&gt;&gt;&gt;</span> <span class="kw">type</span> <span class="dt">User</span> <span class="ot">=</span> <span class="dt">Record</span> &#39;[ <span class="st">&quot;id&quot;</span> <span class="op">&gt;:</span> <span class="dt">Int</span>, <span class="st">&quot;name&quot;</span> <span class="op">&gt;:</span> <span class="dt">String</span> ]</span>
<span id="cb4-2"><a href="#cb4-2"></a><span class="op">&gt;&gt;&gt;</span> toElmType (<span class="dt">Proxy</span><span class="ot"> ::</span> <span class="dt">Proxy</span> <span class="dt">User</span>)</span>
<span id="cb4-3"><a href="#cb4-3"></a><span class="dt">ETyApp</span> (<span class="dt">ETyApp</span> (<span class="dt">ETyCon</span> (<span class="dt">ETCon</span> {tc_name <span class="ot">=</span> <span class="st">&quot;:&amp;&quot;</span>})) (<span class="dt">ETyApp</span> (<span class="dt">ETyApp</span> (<span class="dt">ETyCon</span> (<span class="dt">ETCon</span> {tc_name <span class="ot">=</span> <span class="st">&quot;&#39;:&quot;</span>})) (<span class="dt">ETyApp</span> (<span class="dt">ETyApp</span> (<span class="dt">ETyCon</span> (<span class="dt">ETCon</span> {tc_name <span class="ot">=</span> <span class="st">&quot;&#39;:&gt;&quot;</span>})) (<span class="dt">ETyCon</span> (<span class="dt">ETCon</span> {tc_name <span class="ot">=</span> <span class="st">&quot;\&quot;id\&quot;&quot;</span>}))) (<span class="dt">ETyCon</span> (<span class="dt">ETCon</span> {tc_name <span class="ot">=</span> <span class="st">&quot;Int&quot;</span>})))) (<span class="dt">ETyApp</span> (<span class="dt">ETyApp</span> (<span class="dt">ETyCon</span> (<span class="dt">ETCon</span> {tc_name <span class="ot">=</span> <span class="st">&quot;&#39;:&quot;</span>})) (<span class="dt">ETyApp</span> (<span class="dt">ETyApp</span> (<span class="dt">ETyCon</span> (<span class="dt">ETCon</span> {tc_name <span class="ot">=</span> <span class="st">&quot;&#39;:&gt;&quot;</span>})) (<span class="dt">ETyCon</span> (<span class="dt">ETCon</span> {tc_name <span class="ot">=</span> <span class="st">&quot;\&quot;name\&quot;&quot;</span>}))) (<span class="dt">ETyCon</span> (<span class="dt">ETCon</span> {tc_name <span class="ot">=</span> <span class="st">&quot;String&quot;</span>})))) (<span class="dt">ETyCon</span> (<span class="dt">ETCon</span> {tc_name <span class="ot">=</span> <span class="st">&quot;&#39;[]&quot;</span>}))))) (<span class="dt">ETyApp</span> (<span class="dt">ETyCon</span> (<span class="dt">ETCon</span> {tc_name <span class="ot">=</span> <span class="st">&quot;Field&quot;</span>})) (<span class="dt">ETyCon</span> (<span class="dt">ETCon</span> {tc_name <span class="ot">=</span> <span class="st">&quot;Identity&quot;</span>})))</span></code></pre></div>
<p>これは絶対に Elm 側で動かない… そもそも拡張可能レコードは型エイリアスで定義されているため型名の情報が落ちてしまうし，理想的には Elm のレコード型に変換してほしい．</p>
<h2 id="section-1"></h2>
<p>ということで，extensible の拡張可能レコードでもうまく動作する薄いラッパーパッケージを作ることにした．</p>
<h2 id="elmap.hs-プロジェクト">elmap.hs プロジェクト</h2>
<p>elm-bridge と servant-elm には生成した <code>ETypeDef</code> や <code>EType</code> を再変換する関数を指定することができる:</p>
<div class="sourceCode" id="cb5"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span id="cb5-1"><a href="#cb5-1"></a><span class="co">-- servant-elm</span></span>
<span id="cb5-2"><a href="#cb5-2"></a><span class="kw">data</span> <span class="dt">ElmOptions</span> <span class="ot">=</span> <span class="dt">ElmOptions</span></span>
<span id="cb5-3"><a href="#cb5-3"></a>  {<span class="ot"> urlPrefix             ::</span> <span class="dt">UrlPrefix</span></span>
<span id="cb5-4"><a href="#cb5-4"></a>  ,<span class="ot"> elmTypeAlterations    ::</span> (<span class="dt">EType</span> <span class="ot">-&gt;</span> <span class="dt">EType</span>)</span>
<span id="cb5-5"><a href="#cb5-5"></a>    <span class="co">-- ^ 生成した ETypes を変換しなおす</span></span>
<span id="cb5-6"><a href="#cb5-6"></a>  ,<span class="ot"> elmAlterations        ::</span> (<span class="dt">ETypeDef</span> <span class="ot">-&gt;</span> <span class="dt">ETypeDef</span>)</span>
<span id="cb5-7"><a href="#cb5-7"></a>    <span class="co">-- ^ 生成した ETypeDef を変換しなおす</span></span>
<span id="cb5-8"><a href="#cb5-8"></a>  ,<span class="ot"> emptyResponseElmTypes ::</span> [<span class="dt">EType</span>]</span>
<span id="cb5-9"><a href="#cb5-9"></a>  ,<span class="ot"> stringElmTypes        ::</span> [<span class="dt">EType</span>]</span>
<span id="cb5-10"><a href="#cb5-10"></a>  }</span></code></pre></div>
<p>しかし，これで extensible の型を変換しなおすのは大変なので <code>toElmType</code> のところから置き換える必要がある(そもそも型名の情報が落ちてしまっているし)．</p>
<h3 id="elmap-パッケージ">elmap パッケージ</h3>
<p><code>toElmType</code> が扱いにくい理由は，<code>Typeable</code> 型クラスから自動で定義を導出されてしまうからだ． 多くの場合，自動で導出される方が嬉しいのだが，今回は型名の情報を与えたり Elm のレコード型に対応させたりなど，個別に対応したいので型クラスを利用することにする:</p>
<div class="sourceCode" id="cb6"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span id="cb6-1"><a href="#cb6-1"></a><span class="kw">class</span> <span class="dt">IsElmType</span> a <span class="kw">where</span></span>
<span id="cb6-2"><a href="#cb6-2"></a><span class="ot">  compileElmType ::</span> <span class="dt">Proxy</span> a <span class="ot">-&gt;</span> <span class="dt">EType</span></span>
<span id="cb6-3"><a href="#cb6-3"></a></span>
<span id="cb6-4"><a href="#cb6-4"></a><span class="kw">instance</span> <span class="dt">IsElmType</span> <span class="dt">Int</span> <span class="kw">where</span></span>
<span id="cb6-5"><a href="#cb6-5"></a>  compileElmType _ <span class="ot">=</span> toElmType (<span class="dt">Proxy</span><span class="ot"> ::</span> <span class="dt">Proxy</span> <span class="dt">Int</span>)</span>
<span id="cb6-6"><a href="#cb6-6"></a><span class="kw">instance</span> <span class="dt">IsElmType</span> <span class="dt">Float</span> <span class="kw">where</span></span>
<span id="cb6-7"><a href="#cb6-7"></a>  compileElmType _ <span class="ot">=</span> toElmType (<span class="dt">Proxy</span><span class="ot"> ::</span> <span class="dt">Proxy</span> <span class="dt">Float</span>)</span></code></pre></div>
<p>さらに，リネームを簡単に行いやすいようにリネームする関数を定義しておいた:</p>
<div class="sourceCode" id="cb7"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span id="cb7-1"><a href="#cb7-1"></a><span class="ot">toElmTypeWith ::</span> <span class="dt">Typeable</span> a <span class="ot">=&gt;</span> <span class="dt">String</span> <span class="ot">-&gt;</span> <span class="dt">Proxy</span> a <span class="ot">-&gt;</span> <span class="dt">EType</span></span>
<span id="cb7-2"><a href="#cb7-2"></a></span>
<span id="cb7-3"><a href="#cb7-3"></a><span class="co">-- Elm の場合 `Order` という型名になっている</span></span>
<span id="cb7-4"><a href="#cb7-4"></a><span class="kw">instance</span> <span class="dt">IsElmType</span> <span class="dt">Ordering</span> <span class="kw">where</span></span>
<span id="cb7-5"><a href="#cb7-5"></a>  compileElmType _ <span class="ot">=</span> toElmTypeWith <span class="st">&quot;Order&quot;</span> (<span class="dt">Proxy</span> <span class="op">@</span> <span class="dt">Ordering</span>)</span></code></pre></div>
<h3 id="servant-elmap-パッケージ">servant-elmap パッケージ</h3>
<p>servant 側では elmap パッケージで定義した <code>IsElmType</code> 型クラスを利用するようにする:</p>
<div class="sourceCode" id="cb8"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span id="cb8-1"><a href="#cb8-1"></a><span class="kw">data</span> <span class="dt">LangElmap</span></span>
<span id="cb8-2"><a href="#cb8-2"></a></span>
<span id="cb8-3"><a href="#cb8-3"></a><span class="kw">instance</span> <span class="dt">IsElmType</span> a <span class="ot">=&gt;</span> <span class="dt">HasForeignType</span> <span class="dt">LangElmap</span> <span class="dt">EType</span> a <span class="kw">where</span></span>
<span id="cb8-4"><a href="#cb8-4"></a>  typeFor _ _ _ <span class="ot">=</span> compileElmType (<span class="dt">Proxy</span> <span class="op">@</span> a)</span>
<span id="cb8-5"><a href="#cb8-5"></a></span>
<span id="cb8-6"><a href="#cb8-6"></a><span class="ot">getEndpoints ::</span></span>
<span id="cb8-7"><a href="#cb8-7"></a>  (<span class="dt">HasForeign</span> <span class="dt">LangElmap</span> <span class="dt">EType</span> api, <span class="dt">GenerateList</span> <span class="dt">EType</span> (<span class="dt">Foreign</span> <span class="dt">EType</span> api))</span>
<span id="cb8-8"><a href="#cb8-8"></a>  <span class="ot">=&gt;</span> <span class="dt">Proxy</span> api</span>
<span id="cb8-9"><a href="#cb8-9"></a>  <span class="ot">-&gt;</span> [<span class="dt">Req</span> <span class="dt">EType</span>]</span>
<span id="cb8-10"><a href="#cb8-10"></a>getEndpoints <span class="ot">=</span> listFromAPI (<span class="dt">Proxy</span> <span class="op">@</span> <span class="dt">LangElmap</span>) (<span class="dt">Proxy</span> <span class="op">@</span> <span class="dt">EType</span>)</span></code></pre></div>
<p><code>getEndpoints</code> 関数を書き換えたので，この関数に依存している関数を全部置き換えた(ということをする必要があったのでフォークせずに薄いラッパーパッケージを作るようにした)．</p>
<h3 id="extensible-elmap-パッケージ">extensible-elmap パッケージ</h3>
<p>最後に，extensible の拡張可能レコード型に対して <code>IsElmType</code> 型クラスのインスタンスを定義すれば完成． 完成品はこちら:</p>
<div class="sourceCode" id="cb9"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span id="cb9-1"><a href="#cb9-1"></a><span class="ot">compileElmRecordTypeWith ::</span> <span class="dt">String</span> <span class="ot">-&gt;</span> <span class="dt">Proxy</span> (<span class="dt">RecordOf</span> h xs) <span class="ot">-&gt;</span> <span class="dt">EType</span></span>
<span id="cb9-2"><a href="#cb9-2"></a>compileElmRecordTypeWith name _ <span class="ot">=</span> <span class="dt">ETyCon</span> <span class="op">$</span> <span class="dt">ETCon</span> name</span>
<span id="cb9-3"><a href="#cb9-3"></a></span>
<span id="cb9-4"><a href="#cb9-4"></a><span class="co">-- ここから下は利用者側で定義する</span></span>
<span id="cb9-5"><a href="#cb9-5"></a><span class="kw">type</span> <span class="dt">User</span> <span class="ot">=</span> <span class="dt">Record</span> &#39;[ <span class="st">&quot;id&quot;</span> <span class="op">&gt;:</span> <span class="dt">Int</span>, <span class="st">&quot;name&quot;</span> <span class="op">&gt;:</span> <span class="dt">String</span> ]</span>
<span id="cb9-6"><a href="#cb9-6"></a></span>
<span id="cb9-7"><a href="#cb9-7"></a><span class="kw">instance</span> <span class="dt">IsElmType</span> <span class="dt">User</span> <span class="kw">where</span></span>
<span id="cb9-8"><a href="#cb9-8"></a>  compileElmType <span class="ot">=</span> compileElmRecordTypeWith <span class="st">&quot;User&quot;</span></span></code></pre></div>
<p><code>ElmType</code> 自体は型名を覚えるだけなので簡単(とはいえ，この定義だと型変数などには未対応だが…)． さらに <code>IsElmDefinition</code> 型クラスのインスタンスも定義する:</p>
<div class="sourceCode" id="cb10"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span id="cb10-1"><a href="#cb10-1"></a><span class="ot">compileElmRecordAliasWith ::</span></span>
<span id="cb10-2"><a href="#cb10-2"></a>  <span class="kw">forall</span> xs h <span class="op">.</span> <span class="dt">Forall</span> (<span class="dt">KeyTargetAre</span> <span class="dt">KnownSymbol</span> <span class="dt">IsElmType</span>) xs</span>
<span id="cb10-3"><a href="#cb10-3"></a>  <span class="ot">=&gt;</span> <span class="dt">String</span> <span class="ot">-&gt;</span> <span class="dt">Proxy</span> (<span class="dt">RecordOf</span> h xs) <span class="ot">-&gt;</span> <span class="dt">EAlias</span></span>
<span id="cb10-4"><a href="#cb10-4"></a>compileElmRecordAliasWith name _ <span class="ot">=</span> <span class="dt">EAlias</span></span>
<span id="cb10-5"><a href="#cb10-5"></a>  { ea_name <span class="ot">=</span> <span class="dt">ETypeName</span> name []</span>
<span id="cb10-6"><a href="#cb10-6"></a>  , ea_fields <span class="ot">=</span> fields</span>
<span id="cb10-7"><a href="#cb10-7"></a>  , ea_omit_null <span class="ot">=</span> <span class="dt">False</span></span>
<span id="cb10-8"><a href="#cb10-8"></a>  , ea_newtype <span class="ot">=</span> <span class="dt">False</span></span>
<span id="cb10-9"><a href="#cb10-9"></a>  , ea_unwrap_unary <span class="ot">=</span> <span class="dt">True</span></span>
<span id="cb10-10"><a href="#cb10-10"></a>  }</span>
<span id="cb10-11"><a href="#cb10-11"></a>  <span class="kw">where</span></span>
<span id="cb10-12"><a href="#cb10-12"></a>    fields <span class="ot">=</span> henumerateFor</span>
<span id="cb10-13"><a href="#cb10-13"></a>      (<span class="dt">Proxy</span> <span class="op">@</span> (<span class="dt">KeyTargetAre</span> <span class="dt">KnownSymbol</span> <span class="dt">IsElmType</span>))</span>
<span id="cb10-14"><a href="#cb10-14"></a>      (<span class="dt">Proxy</span> <span class="op">@</span> xs)</span>
<span id="cb10-15"><a href="#cb10-15"></a>      (\m acc <span class="ot">-&gt;</span> (stringKeyOf m, compileElmType <span class="op">$</span> proxyTargetOf m) <span class="op">:</span> acc)</span>
<span id="cb10-16"><a href="#cb10-16"></a>      []</span>
<span id="cb10-17"><a href="#cb10-17"></a></span>
<span id="cb10-18"><a href="#cb10-18"></a><span class="co">-- ここから下は利用者側で定義する</span></span>
<span id="cb10-19"><a href="#cb10-19"></a><span class="kw">instance</span> <span class="dt">IsElmDefinition</span> <span class="dt">User</span> <span class="kw">where</span></span>
<span id="cb10-20"><a href="#cb10-20"></a>  compileElmDef <span class="ot">=</span> <span class="dt">ETypeAlias</span> <span class="op">.</span> compileElmRecordAliasWith <span class="st">&quot;User&quot;</span></span></code></pre></div>
<p>多少ボイラーテンプレートができてしまったが，まぁ個人的には許容範囲．</p>
<h2 id="おまけ-普通のレコードに対応する">おまけ: 普通のレコードに対応する</h2>
<p>僕はほとんど使わないからいいんだけど，普通のレコード型も <code>IsElmType</code> に対応しやすいようなヘルパー関数を定義しておこう:</p>
<div class="sourceCode" id="cb11"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span id="cb11-1"><a href="#cb11-1"></a><span class="ot">toElmAlias ::</span> <span class="kw">forall</span> a<span class="op">.</span> (<span class="dt">GIsElmFields</span> (<span class="dt">Rep</span> a), <span class="dt">IsElmType</span> a) <span class="ot">=&gt;</span> <span class="dt">Proxy</span> a <span class="ot">-&gt;</span> <span class="dt">EAlias</span></span>
<span id="cb11-2"><a href="#cb11-2"></a>toElmAlias proxy <span class="ot">=</span> <span class="dt">EAlias</span></span>
<span id="cb11-3"><a href="#cb11-3"></a>  { ea_name <span class="ot">=</span> <span class="dt">ETypeName</span> (renderElm <span class="op">$</span> compileElmType proxy) []</span>
<span id="cb11-4"><a href="#cb11-4"></a>  , ea_fields <span class="ot">=</span> gcompileElmFields (<span class="dt">Proxy</span> <span class="op">@</span> (<span class="dt">Rep</span> a))</span>
<span id="cb11-5"><a href="#cb11-5"></a>  , ea_omit_null <span class="ot">=</span> <span class="dt">False</span></span>
<span id="cb11-6"><a href="#cb11-6"></a>  , ea_newtype <span class="ot">=</span> <span class="dt">False</span></span>
<span id="cb11-7"><a href="#cb11-7"></a>  , ea_unwrap_unary <span class="ot">=</span> <span class="dt">True</span></span>
<span id="cb11-8"><a href="#cb11-8"></a>  }</span>
<span id="cb11-9"><a href="#cb11-9"></a></span>
<span id="cb11-10"><a href="#cb11-10"></a><span class="kw">class</span> <span class="dt">GIsElmFields</span> (<span class="ot">rep ::</span> <span class="dt">Type</span> <span class="ot">-&gt;</span> <span class="dt">Type</span>) <span class="kw">where</span></span>
<span id="cb11-11"><a href="#cb11-11"></a><span class="ot">  gcompileElmFields ::</span> <span class="dt">Proxy</span> rep <span class="ot">-&gt;</span> [(<span class="dt">String</span>, <span class="dt">EType</span>)]</span>
<span id="cb11-12"><a href="#cb11-12"></a></span>
<span id="cb11-13"><a href="#cb11-13"></a><span class="co">-- ここから下は利用者側で定義する</span></span>
<span id="cb11-14"><a href="#cb11-14"></a><span class="kw">data</span> <span class="dt">User</span> <span class="ot">=</span> <span class="dt">User</span></span>
<span id="cb11-15"><a href="#cb11-15"></a>    {<span class="ot"> userId   ::</span> <span class="dt">String</span></span>
<span id="cb11-16"><a href="#cb11-16"></a>    ,<span class="ot"> userName ::</span> <span class="dt">String</span></span>
<span id="cb11-17"><a href="#cb11-17"></a>    } <span class="kw">deriving</span> (<span class="dt">Generic</span>)</span>
<span id="cb11-18"><a href="#cb11-18"></a></span>
<span id="cb11-19"><a href="#cb11-19"></a><span class="kw">instance</span> <span class="dt">IsElmType</span> <span class="dt">Book</span> <span class="kw">where</span></span>
<span id="cb11-20"><a href="#cb11-20"></a>  compileElmType _ <span class="ot">=</span> <span class="dt">ETyCon</span> <span class="op">$</span> <span class="dt">ETCon</span> <span class="st">&quot;Book&quot;</span></span>
<span id="cb11-21"><a href="#cb11-21"></a></span>
<span id="cb11-22"><a href="#cb11-22"></a><span class="kw">instance</span> <span class="dt">IsElmDefinition</span> <span class="dt">Book</span> <span class="kw">where</span></span>
<span id="cb11-23"><a href="#cb11-23"></a>  compileElmDef <span class="ot">=</span> <span class="dt">ETypeAlias</span> <span class="op">.</span> toElmAlias</span></code></pre></div>
<p><code>toElmAlias</code> 関数では，Haskell の総称プログラミング(Generics)という機能を利用している． Generics では Haskell 内での型や値のメタ情報を Haskell の型や値として取得できる． これと型クラスを組み合わせることで，型の構造毎に関数の実装を分岐することができる:</p>
<div class="sourceCode" id="cb12"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span id="cb12-1"><a href="#cb12-1"></a><span class="co">-- `M1 D` はデータ型を表現</span></span>
<span id="cb12-2"><a href="#cb12-2"></a><span class="kw">instance</span> <span class="dt">GIsElmFields</span> a <span class="ot">=&gt;</span> <span class="dt">GIsElmFields</span> (<span class="dt">M1</span> <span class="dt">D</span> x a) <span class="kw">where</span></span>
<span id="cb12-3"><a href="#cb12-3"></a>  gcompileElmFields _ <span class="ot">=</span> gcompileElmFields (<span class="dt">Proxy</span> <span class="op">@</span> a)</span>
<span id="cb12-4"><a href="#cb12-4"></a></span>
<span id="cb12-5"><a href="#cb12-5"></a><span class="co">-- `M1 C` はコンストラクタを表現</span></span>
<span id="cb12-6"><a href="#cb12-6"></a><span class="kw">instance</span> <span class="dt">GIsElmFields</span> a <span class="ot">=&gt;</span> <span class="dt">GIsElmFields</span> (<span class="dt">M1</span> <span class="dt">C</span> x a) <span class="kw">where</span></span>
<span id="cb12-7"><a href="#cb12-7"></a>  gcompileElmFields _ <span class="ot">=</span> gcompileElmFields (<span class="dt">Proxy</span> <span class="op">@</span> a)</span>
<span id="cb12-8"><a href="#cb12-8"></a></span>
<span id="cb12-9"><a href="#cb12-9"></a><span class="co">-- `M1 S` はレコードのセレクタを表現(`K1` はカインドの情報)</span></span>
<span id="cb12-10"><a href="#cb12-10"></a><span class="kw">instance</span> (<span class="dt">Selector</span> x, <span class="dt">IsElmType</span> a) <span class="ot">=&gt;</span> <span class="dt">GIsElmFields</span> (<span class="dt">M1</span> <span class="dt">S</span> x (<span class="dt">K1</span> <span class="dt">R</span> a)) <span class="kw">where</span></span>
<span id="cb12-11"><a href="#cb12-11"></a>  gcompileElmFields _ <span class="ot">=</span> [(selName (<span class="fu">undefined</span><span class="ot"> ::</span> <span class="dt">S1</span> x (<span class="dt">K1</span> <span class="dt">R</span> a) ()), compileElmType (<span class="dt">Proxy</span> <span class="op">@</span> a))]</span>
<span id="cb12-12"><a href="#cb12-12"></a></span>
<span id="cb12-13"><a href="#cb12-13"></a><span class="co">--- `:*:` は型の直積を表現</span></span>
<span id="cb12-14"><a href="#cb12-14"></a><span class="kw">instance</span> (<span class="dt">GIsElmFields</span> a, <span class="dt">GIsElmFields</span> b) <span class="ot">=&gt;</span> <span class="dt">GIsElmFields</span> (a <span class="op">:*:</span> b) <span class="kw">where</span></span>
<span id="cb12-15"><a href="#cb12-15"></a>  gcompileElmFields _ <span class="ot">=</span> gcompileElmFields (<span class="dt">Proxy</span> <span class="op">@</span> a) <span class="op">++</span> gcompileElmFields (<span class="dt">Proxy</span> <span class="op">@</span> b)</span></code></pre></div>
<h2 id="おしまい">おしまい</h2>
<p>もう少し簡単に解決する方法もあったような気もするけど，Haskell のメタプログラミングを色々味わえたのでまぁいいや． どうせ，僕ぐらいしか使わないだろうし(笑)</p>
  </div>]]></summary>
</entry>
<entry>
    <title>stack image コマンドなしに Haskell アプリの Docker イメージを作る</title>
    <link href="https://matsubara0507.github.io/posts/2019-06-10-build-haskell-app-docker-image-without-stack-image-cmd.html" />
    <id>https://matsubara0507.github.io/posts/2019-06-10-build-haskell-app-docker-image-without-stack-image-cmd.html</id>
    <published>2019-06-10T00:00:00Z</published>
    <updated>2019-06-10T00:00:00Z</updated>
    <summary type="html"><![CDATA[<div class="post-content" itemprop="articleBody">
    <p>自分は Haskell アプリケーションの Docker イメージを作るのに <code>stack image</code> コマンドを愛用している． しかし悲しいことに <strong>stack v2 からはこの機能が無くなってしまう</strong> のだ． ということで代替方法を考えてみた，というお話．</p>
<h2 id="tldr">tl;dr</h2>
<p>matsubara0507/whoami というリポジトリで試したので，その PR を見ると良い:</p>
<ul>
<li><a href="https://github.com/matsubara0507/whoami/pull/6">Build docker image without stack image command by matsubara0507 · Pull Request #6 · matsubara0507/whoami</a></li>
</ul>
<p>結論としては stack の <code>--local-bin-path</code> オプションと Docker Integration を使って Docker イメージ用の実行ファイルをワークディレクトリに置いて，<code>docker build</code> でコピーしているだけ．</p>
<h2 id="stack-image-コマンド">stack image コマンド</h2>
<p>簡単に今は亡き <code>stack image</code> コマンドを説明する． このコマンドは <code>stack image container</code> というサブコマンドにより，stack.yaml の設定を元にして実行ファイルだけを含んだ Docker イメージを作ってくれる． <code>docker</code> コマンドで普通にイメージを作るのと違い，<code>.stack-work</code> のビルドキャッシュをホストマシンのローカルに保存し，利用してくれる． そのおかげで2回目以降のビルドも高速に行える(<code>stack</code> による初回ビルドはとても時間がかかる…)．</p>
<p>使い方は簡単で，次のようなのを stack.yaml に記述し <code>stack --docker image container</code> とするだけ:</p>
<div class="sourceCode" id="cb1"><pre class="sourceCode yaml"><code class="sourceCode yaml"><span id="cb1-1"><a href="#cb1-1"></a><span class="fu">docker</span><span class="kw">:</span></span>
<span id="cb1-2"><a href="#cb1-2"></a><span class="at">  </span><span class="fu">repo</span><span class="kw">:</span><span class="at"> fpco/stack-build</span></span>
<span id="cb1-3"><a href="#cb1-3"></a><span class="at">  </span><span class="fu">enable</span><span class="kw">:</span><span class="at"> </span><span class="ch">false</span></span>
<span id="cb1-4"><a href="#cb1-4"></a><span class="fu">image</span><span class="kw">:</span></span>
<span id="cb1-5"><a href="#cb1-5"></a><span class="at">  </span><span class="fu">container</span><span class="kw">:</span></span>
<span id="cb1-6"><a href="#cb1-6"></a><span class="at">    </span><span class="fu">name</span><span class="kw">:</span><span class="at"> matsubara0507/whoami</span></span>
<span id="cb1-7"><a href="#cb1-7"></a><span class="at">    </span><span class="fu">base</span><span class="kw">:</span><span class="at"> matsubara0507/ubuntu-for-haskell:git</span></span></code></pre></div>
<p><code>docker</code> の方の設定は Docker Integration と呼ばれるもので，<code>repo</code> で設定したイメージのコンテナ内で stack のビルドをしてくれる(こいつがローカルの <code>.stack-work</code> を利用する)． <code>image</code> の方の設定が <code>stack image</code> の設定で，<code>base</code> が作成するイメージのベースイメージだ． やってることは実行ファイルを <code>.stack-work</code> からコピーしてくるだけで，ベースイメージが Docker Integration のイメージと同じ OS であればちゃんと動作する．</p>
<h2 id="section"></h2>
<p>さて，冒頭に書いた通り，<a href="https://github.com/commercialhaskell/stack/blob/c0c6510741a0f3e2f687a4fecf9b0ae625fca12a/ChangeLog.md#v2101-release-candidate"><strong>この機能は stack の新しいバージョンでは無くなってしまう</strong></a>．</p>
<blockquote>
<p>Remove the stack image command. With the advent of Docker multistage builds, this functionality is no longer useful. For an example, please see Building Haskell Apps with Docker.</p>
</blockquote>
<p>マルチステージビルドができたし，あんまりこれもう便利じゃないよね，とのこと． 代わりに「<a href="https://www.fpcomplete.com/blog/2017/12/building-haskell-apps-with-docker">Building Haskell Apps with Docker</a>」という記事を読むと良いらしい．</p>
<h2 id="マルチステージビルドする">マルチステージビルドする</h2>
<p>上記リンクではマルチステージビルドを使えと書いてある． 多分こんな感じ(試してない):</p>
<div class="sourceCode" id="cb2"><pre class="sourceCode dockerfile"><code class="sourceCode dockerfile"><span id="cb2-1"><a href="#cb2-1"></a><span class="kw">FROM</span> fpco/stack-build:lts-13.21 as bin</span>
<span id="cb2-2"><a href="#cb2-2"></a><span class="kw">RUN</span> mkdir -p /root/work</span>
<span id="cb2-3"><a href="#cb2-3"></a><span class="kw">COPY</span> . /root/work</span>
<span id="cb2-4"><a href="#cb2-4"></a><span class="kw">RUN</span> cd /root/work &amp;&amp; stack install --system-ghc</span>
<span id="cb2-5"><a href="#cb2-5"></a></span>
<span id="cb2-6"><a href="#cb2-6"></a><span class="kw">FROM</span> matsubara0507/ubuntu-for-haskell</span>
<span id="cb2-7"><a href="#cb2-7"></a><span class="kw">RUN</span> mkdir -p /root/.local/bin &amp;&amp; mkdir -p /root/work</span>
<span id="cb2-8"><a href="#cb2-8"></a><span class="kw">ENV</span> PATH /root/.local/bin:$PATH</span>
<span id="cb2-9"><a href="#cb2-9"></a><span class="kw">WORKDIR</span> /root/work</span>
<span id="cb2-10"><a href="#cb2-10"></a><span class="kw">COPY</span> --from=bin /root/.local/bin /root/.local/bin</span></code></pre></div>
<p>stack の Docker Integration は残ってるので <code>stack --docker build</code> とすることで Docker コンテナ内でのビルド自体は実行される(これによってローカルにキャッシュが作られる)． 一つ目のステージでは <code>stack install</code> により <code>.stack-work</code> 内の実行ファイルを <code>/root/.local/bin</code> にコピーし，二つ目のステージではさらにこの実行ファイルだけを最終的に作られるイメージにコピーしている． ちなみに，<code>/root/.local/bin</code> は stack が決めてるローカル実行ファイルを置くパスで，<code>stack path</code> で確認できる(OS によって違うはず)．</p>
<p>でもこれ一つ欠点があって． <code>docker build</code> するときに，肥大化しがちな <code>.stack-work</code> をいちいち上げる必要があるので，だんだん <code>docker build</code> の時間が長くなる(最近作ってたアプリケーションは4GBになってしまって…)． <code>.dockerignore</code> で無視できれば良いのだが，それだと <code>stack insatll</code> できない(<code>.stack-work</code> 内の実行ファイルのパスは resolver や GHC のバージョンなどで変わるので，これをイチイチ <code>.dockerignore</code> に書くのはめんどくさい)．</p>
<h2 id="local-bin-path-オプション">local-bin-path オプション</h2>
<p><code>docker build</code> する時は <code>.stack-work</code> を無視したい． じゃぁどうするか． 一つ目のステージでやっているのは既に出来上がった実行ファイルを <code>stack install</code> を使って分かりやすいパスに持ってきてるだけだ． そこで気づく，それを上書きするオプションがあるのではないかと． あった:</p>
<ul>
<li><a href="https://github.com/commercialhaskell/stack/issues/730">Specify local-bin-path · Issue #730 · commercialhaskell/stack · GitHub</a></li>
</ul>
<p><code>stack --local-bin-path=any_path install</code> とすることで任意のパスに実行ファイルをコピーできる！ 知らなかった． あとはここから <code>docker build</code> で実行ファイルコピーしてくるように Dockerfile を書くだけ:</p>
<div class="sourceCode" id="cb3"><pre class="sourceCode dockerfile"><code class="sourceCode dockerfile"><span id="cb3-1"><a href="#cb3-1"></a><span class="kw">FROM</span> matsubara0507/ubuntu-for-haskell</span>
<span id="cb3-2"><a href="#cb3-2"></a><span class="kw">ARG</span> local_bin_path</span>
<span id="cb3-3"><a href="#cb3-3"></a><span class="kw">RUN</span> mkdir -p /root/.local/bin &amp;&amp; mkdir -p /root/work</span>
<span id="cb3-4"><a href="#cb3-4"></a><span class="kw">ENV</span> PATH /root/.local/bin:$PATH</span>
<span id="cb3-5"><a href="#cb3-5"></a><span class="kw">WORKDIR</span> /root/work</span>
<span id="cb3-6"><a href="#cb3-6"></a><span class="kw">COPY</span> ${local_bin_path} /root/.local/bin</span></code></pre></div>
<p><code>ARG</code> を使ったので次のように <code>docker build</code> コマンドのオプションで指定する:</p>
<pre><code>$ stack --local-bin-path=./bin --docker install
$ docker build -t matsubara0507/whoami . --build-arg local_bin_path=./bin</code></pre>
<p>いい感じ！ もちろん <code>.dockerignore</code> に <code>.stack-work</code> が書いてあるのでイメージのビルドも速い．</p>
<h2 id="おしまい">おしまい</h2>
<p>これで心置き無く新しい stack のバージョンを使うことができる．</p>
  </div>]]></summary>
</entry>
<entry>
    <title>rio + extensible なフレームワーク: mix</title>
    <link href="https://matsubara0507.github.io/posts/2019-05-27-create-mix-libs.html" />
    <id>https://matsubara0507.github.io/posts/2019-05-27-create-mix-libs.html</id>
    <published>2019-05-27T00:00:00Z</published>
    <updated>2019-05-27T00:00:00Z</updated>
    <summary type="html"><![CDATA[<div class="post-content" itemprop="articleBody">
    <p>最近はよく <a href="https://hackage.haskell.org/package/rio">rio</a> + <a href="https://hackage.haskell.org/package/extensible">extensible</a> で Haskell アプリケーションを書きます(趣味の)． 前々から何となくパターン化できそうだなぁと思っていたのが，それをついにパターン化し mix パッケージとして形にしましたというお話です．</p>
<p>ちなみに，それぞれのパッケージを軽く説明すると:</p>
<ul>
<li>rio : Haskell のビルドツール Stack を開発しているチームが作っている Reader パターンをベースにした Alt. Prelude</li>
<li>extensible : 拡張可能レコードを始めとして様々な拡張可能なデータ構造を同一の形式で利用できるようになるパッケージ</li>
</ul>
<h2 id="mix-パッケージ">mix パッケージ</h2>
<p>リポジトリはこれ:</p>
<h5 id="section"><iframe width="320" height="184" scrolling="no" frameborder="0" src="https://matsubara0507.github.io/my-github-cards/?target=matsubara0507/mix.hs"></iframe></h5>
<p>mix パッケージの目的は rio パッケージの <code>RIO env a</code> モナドの <code>env</code> の部分を extensible パッケージを用いて簡単に構築することであり，<code>env</code> をプラグインとして構築する． プラグインで構築という部分は <a href="https://hackage.haskell.org/package/tonatona">tonatona</a> から着想を得た(tonatona も rio のラッパーパッケージなはず)． 例えば，<code>rio</code> パッケージのロガーを利用して次のような簡易的なプログラムをかける:</p>
<div class="sourceCode" id="cb1"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span id="cb1-1"><a href="#cb1-1"></a><span class="kw">module</span> <span class="dt">Main</span> <span class="kw">where</span></span>
<span id="cb1-2"><a href="#cb1-2"></a></span>
<span id="cb1-3"><a href="#cb1-3"></a><span class="kw">import</span>           <span class="dt">RIO</span></span>
<span id="cb1-4"><a href="#cb1-4"></a></span>
<span id="cb1-5"><a href="#cb1-5"></a><span class="kw">import</span>           <span class="dt">Data.Extensible</span></span>
<span id="cb1-6"><a href="#cb1-6"></a><span class="kw">import</span>           <span class="dt">Mix</span></span>
<span id="cb1-7"><a href="#cb1-7"></a><span class="kw">import</span>           <span class="dt">Mix.Plugin.Logger</span> <span class="kw">as</span> <span class="dt">MixLogger</span></span>
<span id="cb1-8"><a href="#cb1-8"></a></span>
<span id="cb1-9"><a href="#cb1-9"></a><span class="kw">type</span> <span class="dt">Env</span> <span class="ot">=</span> <span class="dt">Record</span></span>
<span id="cb1-10"><a href="#cb1-10"></a>  &#39;[ <span class="st">&quot;logger&quot;</span> <span class="op">&gt;:</span> <span class="dt">MixLogger.LogFunc</span></span>
<span id="cb1-11"><a href="#cb1-11"></a>   , <span class="st">&quot;name&quot;</span>   <span class="op">&gt;:</span> <span class="dt">Text</span></span>
<span id="cb1-12"><a href="#cb1-12"></a>   ]</span>
<span id="cb1-13"><a href="#cb1-13"></a></span>
<span id="cb1-14"><a href="#cb1-14"></a><span class="ot">main ::</span> <span class="dt">IO</span> ()</span>
<span id="cb1-15"><a href="#cb1-15"></a>main <span class="ot">=</span> Mix.run plugin <span class="op">$</span> <span class="kw">do</span></span>
<span id="cb1-16"><a href="#cb1-16"></a>  name <span class="ot">&lt;-</span> asks (view <span class="op">#</span>name)</span>
<span id="cb1-17"><a href="#cb1-17"></a>  MixLogger.logDebug <span class="op">$</span> display (<span class="st">&quot;This is debug: &quot;</span> <span class="op">&lt;&gt;</span> name)</span>
<span id="cb1-18"><a href="#cb1-18"></a>  MixLogger.logInfo  <span class="op">$</span> display (<span class="st">&quot;This is info: &quot;</span>  <span class="op">&lt;&gt;</span> name)</span>
<span id="cb1-19"><a href="#cb1-19"></a>  MixLogger.logWarn  <span class="op">$</span> display (<span class="st">&quot;This is warn: &quot;</span>  <span class="op">&lt;&gt;</span> name)</span>
<span id="cb1-20"><a href="#cb1-20"></a>  MixLogger.logError <span class="op">$</span> display (<span class="st">&quot;This is error: &quot;</span> <span class="op">&lt;&gt;</span> name)</span>
<span id="cb1-21"><a href="#cb1-21"></a>  <span class="kw">where</span></span>
<span id="cb1-22"><a href="#cb1-22"></a><span class="ot">    plugin ::</span> <span class="dt">Plugin</span> () <span class="dt">IO</span> <span class="dt">Env</span></span>
<span id="cb1-23"><a href="#cb1-23"></a>    plugin <span class="ot">=</span> hsequence</span>
<span id="cb1-24"><a href="#cb1-24"></a>        <span class="op">$</span> <span class="op">#</span>logger <span class="op">&lt;@=&gt;</span> MixLogger.buildPlugin (<span class="op">#</span>handle <span class="op">@=</span> stdout <span class="op">&lt;:</span> <span class="op">#</span>verbose <span class="op">@=</span> <span class="dt">True</span> <span class="op">&lt;:</span> nil)</span>
<span id="cb1-25"><a href="#cb1-25"></a>       <span class="op">&lt;:</span> <span class="op">#</span>name   <span class="op">&lt;@=&gt;</span> <span class="fu">pure</span> <span class="st">&quot;Hoge&quot;</span></span>
<span id="cb1-26"><a href="#cb1-26"></a>       <span class="op">&lt;:</span> nil</span></code></pre></div>
<p>tonatona との違いは <code>RIO env a</code> の <code>env</code> に当たる部分に対して，特別なインスタンス宣言がいらない点だ． 単純に，設定っぽい extensible の拡張可能レコード(<code>#logger &lt;@=&gt; ...</code> とか)を記述するだけで良い． これの実行結果は次のようになる:</p>
<pre class="code"><code>$ stack runghc mix/sample/Main.hs
2019-05-21 22:33:49.378471: [debug] This is debug: Hoge
@(mix/sample/Main.hs:23:3)
2019-05-21 22:33:49.381893: [info] This is info: Hoge
@(mix/sample/Main.hs:24:3)
2019-05-21 22:33:49.381943: [warn] This is warn: Hoge
@(mix/sample/Main.hs:25:3)
2019-05-21 22:33:49.382005: [error] This is error: Hoge
@(mix/sample/Main.hs:26:3)</code></pre>
<p>なぜ mix ではインスタンス宣言などせずに自由にプラグインのオンオフや設定のカスタマイズをすることができるのだろうか？ 言わずもがな，<code>extensible</code> の魔法によるものである．</p>
<h3 id="extensible-の魔法">extensible の魔法</h3>
<p>もっとも鬼門になったのは rio のロガーだ． rio のロガーは次のように利用する必要がある:</p>
<div class="sourceCode" id="cb3"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span id="cb3-1"><a href="#cb3-1"></a><span class="kw">newtype</span> <span class="dt">Env</span> <span class="ot">=</span> <span class="dt">Env</span> {<span class="ot"> logFunc ::</span> <span class="dt">LogFunc</span> }</span>
<span id="cb3-2"><a href="#cb3-2"></a></span>
<span id="cb3-3"><a href="#cb3-3"></a><span class="ot">main ::</span> <span class="dt">IO</span> ()</span>
<span id="cb3-4"><a href="#cb3-4"></a>main <span class="ot">=</span> <span class="kw">do</span></span>
<span id="cb3-5"><a href="#cb3-5"></a>  opt <span class="ot">&lt;-</span> logOptionsHandle stdout <span class="dt">False</span></span>
<span id="cb3-6"><a href="#cb3-6"></a>  withLogFunc opt <span class="op">$</span> \logFunc <span class="ot">-&gt;</span> runRIO <span class="dt">Env</span>{<span class="op">..</span>} <span class="op">$</span> <span class="kw">do</span></span>
<span id="cb3-7"><a href="#cb3-7"></a>    logInfo <span class="st">&quot;hoge&quot;</span></span>
<span id="cb3-8"><a href="#cb3-8"></a>    logDebug <span class="st">&quot;fuga&quot;</span></span></code></pre></div>
<p><code>withLogFunc opt</code> の型は <code>MonadUnliftIO m =&gt; (LogFunc -&gt; m a) -&gt; m a</code> となっている． なぜこのような形になっているのかの秘密は(たぶん) <code>MonadUnliftIO</code> にあるのだが今回は割愛する． この型，よく見ると継続になっているのがわかるだろうか？</p>
<div class="sourceCode" id="cb4"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span id="cb4-1"><a href="#cb4-1"></a><span class="ot">withLogFunc ::</span> <span class="dt">MonadUnliftIO</span> m <span class="ot">=&gt;</span> <span class="dt">LogOptions</span> <span class="ot">-&gt;</span> (<span class="dt">LogFunc</span> <span class="ot">-&gt;</span> m a) <span class="ot">-&gt;</span> m a</span>
<span id="cb4-2"><a href="#cb4-2"></a></span>
<span id="cb4-3"><a href="#cb4-3"></a><span class="co">-- 継続(Continuation)のモナドトランスフォーム仕様の型</span></span>
<span id="cb4-4"><a href="#cb4-4"></a><span class="kw">newtype</span> <span class="dt">ContT</span> r m a <span class="ot">=</span> <span class="dt">ContT</span> {<span class="ot"> runContT ::</span> ((a <span class="ot">-&gt;</span> m r) <span class="ot">-&gt;</span> m r) }</span></code></pre></div>
<p>継続は <code>Monad</code> 型クラスのインスタンスなのでモナディックに扱える． そして，extensible の拡張可能レコードの特徴として <strong>レコードのフィールドをモナディックに走査できる！</strong> というのがある(正確には <code>Applicative</code> ですが)． 例えば <a href="http://hackage.haskell.org/package/extensible-0.5/docs/Data-Extensible-Product.html#v:hsequence"><code>hsequence</code></a> という関数が走査する関数だ:</p>
<div class="sourceCode" id="cb5"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span id="cb5-1"><a href="#cb5-1"></a><span class="ot">hsequence ::</span> <span class="dt">Applicative</span> f <span class="ot">=&gt;</span> (<span class="dt">Comp</span> f h <span class="op">:*</span> xs) <span class="ot">-&gt;</span> f (h <span class="op">:*</span> xs)</span></code></pre></div>
<p>実は <code>Plugin</code> という型はただの継続で，<code>Mix.run plugin</code> は単純に <code>runContT</code> した中で <code>runRIO env action</code> しているだけだ:</p>
<div class="sourceCode" id="cb6"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span id="cb6-1"><a href="#cb6-1"></a><span class="kw">type</span> <span class="dt">Plugin</span> a m env <span class="ot">=</span> <span class="dt">ContT</span> a m env</span>
<span id="cb6-2"><a href="#cb6-2"></a></span>
<span id="cb6-3"><a href="#cb6-3"></a><span class="ot">run ::</span> <span class="dt">MonadIO</span> m <span class="ot">=&gt;</span> <span class="dt">Plugin</span> a m env <span class="ot">-&gt;</span> <span class="dt">RIO</span> env a <span class="ot">-&gt;</span> m a</span>
<span id="cb6-4"><a href="#cb6-4"></a>run plugin act <span class="ot">=</span> (<span class="ot">`runRIO`</span> act) <span class="ot">`withPlugin`</span> plugin</span>
<span id="cb6-5"><a href="#cb6-5"></a></span>
<span id="cb6-6"><a href="#cb6-6"></a><span class="ot">withPlugin ::</span> (env <span class="ot">-&gt;</span> m a) <span class="ot">-&gt;</span> <span class="dt">Plugin</span> a m env <span class="ot">-&gt;</span> m a</span>
<span id="cb6-7"><a href="#cb6-7"></a>withPlugin <span class="ot">=</span> <span class="fu">flip</span> runContT</span>
<span id="cb6-8"><a href="#cb6-8"></a></span>
<span id="cb6-9"><a href="#cb6-9"></a><span class="ot">toPlugin ::</span> ((env <span class="ot">-&gt;</span> m a) <span class="ot">-&gt;</span> m a) <span class="ot">-&gt;</span> <span class="dt">Plugin</span> a m env</span>
<span id="cb6-10"><a href="#cb6-10"></a>toPlugin <span class="ot">=</span> <span class="dt">ContT</span></span></code></pre></div>
<p>思いついてしまえば極めて簡単な仕組みだ(なおパフォーマンスについては特に考えていません)．</p>
<h2 id="プラグイン">プラグイン</h2>
<p>プラグインと言ったもののただの継続だ． 今あるのは:</p>
<ul>
<li>Logger</li>
<li>Config</li>
<li>API Client (GitHub, Drone)</li>
<li>Shell</li>
</ul>
<p>だけで，ちょうど最近作ってたOSSで必要になった分だけ． そのうちDB系のやつを作ってもいいかもしれない． これらは全て mix と同じリポジトリに置いてある．</p>
<h3 id="logger-と-config">Logger と Config</h3>
<p>この2つは mix ライブラリに入っている． Logger は上記に載せた rio の Logger のラッパー． Config というのは設定ファイルを指しているつもり． <code>&quot;config&quot;</code> フィールドと任意の型と紐づかせている:</p>
<div class="sourceCode" id="cb7"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span id="cb7-1"><a href="#cb7-1"></a><span class="kw">import</span> <span class="kw">qualified</span> <span class="dt">Mix.Plugin.Logger</span> <span class="kw">as</span> <span class="dt">MixLogger</span></span>
<span id="cb7-2"><a href="#cb7-2"></a><span class="kw">import</span> <span class="kw">qualified</span> <span class="dt">Mix.Plugin.Config</span> <span class="kw">as</span> <span class="dt">MixConfig</span></span>
<span id="cb7-3"><a href="#cb7-3"></a></span>
<span id="cb7-4"><a href="#cb7-4"></a><span class="kw">type</span> <span class="dt">Env</span> <span class="ot">=</span> <span class="dt">Record</span></span>
<span id="cb7-5"><a href="#cb7-5"></a>  &#39;[ <span class="st">&quot;logger&quot;</span> <span class="op">&gt;:</span> <span class="dt">MixLogger.LogFunc</span></span>
<span id="cb7-6"><a href="#cb7-6"></a>   , <span class="st">&quot;config&quot;</span> <span class="op">&gt;:</span> <span class="dt">Config</span></span>
<span id="cb7-7"><a href="#cb7-7"></a>   ]</span>
<span id="cb7-8"><a href="#cb7-8"></a></span>
<span id="cb7-9"><a href="#cb7-9"></a><span class="kw">type</span> <span class="dt">Config</span> <span class="ot">=</span> <span class="dt">Record</span></span>
<span id="cb7-10"><a href="#cb7-10"></a>  &#39;[ <span class="st">&quot;name&quot;</span> <span class="op">&gt;:</span> <span class="dt">Text</span></span>
<span id="cb7-11"><a href="#cb7-11"></a>   ]</span>
<span id="cb7-12"><a href="#cb7-12"></a></span>
<span id="cb7-13"><a href="#cb7-13"></a><span class="ot">main ::</span> <span class="dt">IO</span> ()</span>
<span id="cb7-14"><a href="#cb7-14"></a>main <span class="ot">=</span> Mix.run plugin <span class="op">$</span> <span class="kw">do</span></span>
<span id="cb7-15"><a href="#cb7-15"></a>  config <span class="ot">&lt;-</span> MixConfig.askConfig</span>
<span id="cb7-16"><a href="#cb7-16"></a>  MixLogger.logInfo <span class="op">$</span> display (<span class="st">&quot;This is info: &quot;</span> <span class="op">&lt;&gt;</span> config <span class="op">^.</span> <span class="op">#</span>name)</span>
<span id="cb7-17"><a href="#cb7-17"></a>  <span class="kw">where</span></span>
<span id="cb7-18"><a href="#cb7-18"></a><span class="ot">    plugin ::</span> <span class="dt">Plugin</span> () <span class="dt">IO</span> <span class="dt">Env</span></span>
<span id="cb7-19"><a href="#cb7-19"></a>    plugin <span class="ot">=</span> hsequence</span>
<span id="cb7-20"><a href="#cb7-20"></a>        <span class="op">$</span> <span class="op">#</span>logger <span class="op">&lt;@=&gt;</span> MixLogger.buildPlugin (<span class="op">#</span>handle <span class="op">@=</span> stdout <span class="op">&lt;:</span> <span class="op">#</span>verbose <span class="op">@=</span> <span class="dt">True</span> <span class="op">&lt;:</span> nil)</span>
<span id="cb7-21"><a href="#cb7-21"></a>       <span class="op">&lt;:</span> <span class="op">#</span>config <span class="op">&lt;@=&gt;</span> MixConfig.buildPlugin (<span class="op">#</span>name <span class="op">@=</span> <span class="st">&quot;hoge&quot;</span> <span class="op">&lt;:</span> nil)</span>
<span id="cb7-22"><a href="#cb7-22"></a>       <span class="op">&lt;:</span> nil</span></code></pre></div>
<p>Config は試しに作ってみたけど，いまいち使い道がない．</p>
<h3 id="api-client">API Client</h3>
<p>API クライアントを利用するのに必要な情報(API トークンなど)を <code>env</code> に載せて，クライアントを利用するときにほんの少しだけ簡単に利用できるプラグイン． GitHub と <a href="https://drone.io/">Drone CI</a> のものを作った． GitHub のクライアントは <a href="https://hackage.haskell.org/package/github">github</a> パッケージを Drone のクライアントは(僕が作った) <a href="https://hackage.haskell.org/package/drone">drone</a> パッケージを使う． 各プラグインのパッケージは <a href="https://github.com/matsubara0507/mix.hs/tree/master/mix-plugin-github">mix-plugin-github</a> と <a href="https://github.com/matsubara0507/mix.hs/tree/master/mix-plugin-drone">mix-plugin-drone</a> として matsubara0507/mix.hs リポジトリに置いてある．</p>
<p>こんな感じに使える:</p>
<div class="sourceCode" id="cb8"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span id="cb8-1"><a href="#cb8-1"></a><span class="kw">import</span> <span class="kw">qualified</span> <span class="dt">Drone</span></span>
<span id="cb8-2"><a href="#cb8-2"></a><span class="kw">import</span> <span class="kw">qualified</span> <span class="dt">GitHub</span></span>
<span id="cb8-3"><a href="#cb8-3"></a><span class="kw">import</span> <span class="kw">qualified</span> <span class="dt">GitHub.Endpoints.Users</span> <span class="kw">as</span> <span class="dt">GitHub</span></span>
<span id="cb8-4"><a href="#cb8-4"></a><span class="kw">import</span> <span class="kw">qualified</span> <span class="dt">Mix.Plugin.Drone</span>       <span class="kw">as</span> <span class="dt">MixDrone</span></span>
<span id="cb8-5"><a href="#cb8-5"></a><span class="kw">import</span> <span class="kw">qualified</span> <span class="dt">Mix.Plugin.GitHub</span>      <span class="kw">as</span> <span class="dt">MixGitHub</span></span>
<span id="cb8-6"><a href="#cb8-6"></a><span class="kw">import</span>           <span class="dt">System.Environment</span>     (getEnv)</span>
<span id="cb8-7"><a href="#cb8-7"></a></span>
<span id="cb8-8"><a href="#cb8-8"></a><span class="kw">type</span> <span class="dt">Env</span> <span class="ot">=</span> <span class="dt">Record</span></span>
<span id="cb8-9"><a href="#cb8-9"></a>  &#39;[ <span class="st">&quot;logger&quot;</span> <span class="op">&gt;:</span> <span class="dt">MixLogger.LogFunc</span></span>
<span id="cb8-10"><a href="#cb8-10"></a>   , <span class="st">&quot;github&quot;</span> <span class="op">&gt;:</span> <span class="dt">MixGitHub.Token</span></span>
<span id="cb8-11"><a href="#cb8-11"></a>   , <span class="st">&quot;drone&quot;</span>  <span class="op">&gt;:</span> <span class="dt">MixDrone.Config</span></span>
<span id="cb8-12"><a href="#cb8-12"></a>   ]</span>
<span id="cb8-13"><a href="#cb8-13"></a></span>
<span id="cb8-14"><a href="#cb8-14"></a><span class="ot">main ::</span> <span class="dt">IO</span> ()</span>
<span id="cb8-15"><a href="#cb8-15"></a>main <span class="ot">=</span> <span class="kw">do</span></span>
<span id="cb8-16"><a href="#cb8-16"></a>  gToken <span class="ot">&lt;-</span> liftIO <span class="op">$</span> fromString <span class="op">&lt;$&gt;</span> getEnv <span class="st">&quot;GH_TOKEN&quot;</span></span>
<span id="cb8-17"><a href="#cb8-17"></a>  dHost  <span class="ot">&lt;-</span> liftIO <span class="op">$</span> fromString <span class="op">&lt;$&gt;</span> getEnv <span class="st">&quot;DRONE_HOST&quot;</span></span>
<span id="cb8-18"><a href="#cb8-18"></a>  dToken <span class="ot">&lt;-</span> liftIO <span class="op">$</span> fromString <span class="op">&lt;$&gt;</span> getEnv <span class="st">&quot;DRONE_TOKEN&quot;</span></span>
<span id="cb8-19"><a href="#cb8-19"></a>  <span class="kw">let</span> logConf <span class="ot">=</span> <span class="op">#</span>handle <span class="op">@=</span> stdout <span class="op">&lt;:</span> <span class="op">#</span>verbose <span class="op">@=</span> <span class="dt">False</span> <span class="op">&lt;:</span> nil</span>
<span id="cb8-20"><a href="#cb8-20"></a>      dClient <span class="ot">=</span> <span class="op">#</span>host <span class="op">@=</span> dHost <span class="op">&lt;:</span> <span class="op">#</span>port <span class="op">@=</span> <span class="dt">Nothing</span> <span class="op">&lt;:</span> <span class="op">#</span>token <span class="op">@=</span> dToken <span class="op">&lt;:</span> nil</span>
<span id="cb8-21"><a href="#cb8-21"></a>      plugin <span class="ot">=</span> hsequence</span>
<span id="cb8-22"><a href="#cb8-22"></a>            <span class="op">$</span> <span class="op">#</span>logger <span class="op">&lt;@=&gt;</span> MixLogger.buildPlugin logConf</span>
<span id="cb8-23"><a href="#cb8-23"></a>           <span class="op">&lt;:</span> <span class="op">#</span>github <span class="op">&lt;@=&gt;</span> MixGitHub.buildPlugin gToken</span>
<span id="cb8-24"><a href="#cb8-24"></a>           <span class="op">&lt;:</span> <span class="op">#</span>drone  <span class="op">&lt;@=&gt;</span> MixDrone.buildPlugin dClient <span class="dt">True</span>  </span>
<span id="cb8-25"><a href="#cb8-25"></a>           <span class="op">&lt;:</span> nil</span>
<span id="cb8-26"><a href="#cb8-26"></a>  Mix.run plugin app</span>
<span id="cb8-27"><a href="#cb8-27"></a></span>
<span id="cb8-28"><a href="#cb8-28"></a><span class="ot">app ::</span> <span class="dt">RIO</span> <span class="dt">Env</span> ()</span>
<span id="cb8-29"><a href="#cb8-29"></a>app <span class="ot">=</span> <span class="kw">do</span></span>
<span id="cb8-30"><a href="#cb8-30"></a>  MixLogger.logInfo <span class="st">&quot;fetch GitHub user info:&quot;</span></span>
<span id="cb8-31"><a href="#cb8-31"></a>  resp <span class="ot">&lt;-</span> MixGitHub.fetch GitHub.userInfoCurrent&#39;</span>
<span id="cb8-32"><a href="#cb8-32"></a>  <span class="kw">case</span> resp <span class="kw">of</span></span>
<span id="cb8-33"><a href="#cb8-33"></a>    <span class="dt">Left</span> err   <span class="ot">-&gt;</span> logError <span class="st">&quot;GitHub fetch error....&quot;</span></span>
<span id="cb8-34"><a href="#cb8-34"></a>    <span class="dt">Right</span> user <span class="ot">-&gt;</span> logInfo <span class="op">$</span> display (<span class="st">&quot;Hi &quot;</span> <span class="op">&lt;&gt;</span> ghLogin user <span class="op">&lt;&gt;</span> <span class="st">&quot;!!&quot;</span>)</span>
<span id="cb8-35"><a href="#cb8-35"></a>  MixLogger.logInfo <span class="st">&quot;fetch Drone user info:&quot;</span></span>
<span id="cb8-36"><a href="#cb8-36"></a>  tryAny (responseBody <span class="op">&lt;$&gt;</span> MixDrone.fetch Drone.getSelf) <span class="op">&gt;&gt;=</span> \<span class="kw">case</span></span>
<span id="cb8-37"><a href="#cb8-37"></a>    <span class="dt">Left</span> err   <span class="ot">-&gt;</span> logError <span class="st">&quot;Drone CI fetch error...&quot;</span></span>
<span id="cb8-38"><a href="#cb8-38"></a>    <span class="dt">Right</span> user <span class="ot">-&gt;</span> logInfo <span class="op">$</span> display (<span class="st">&quot;Hi &quot;</span> <span class="op">&lt;&gt;</span> user <span class="op">^.</span> <span class="op">#</span>login <span class="op">&lt;&gt;</span> <span class="st">&quot;!!&quot;</span>)</span>
<span id="cb8-39"><a href="#cb8-39"></a>  <span class="kw">where</span></span>
<span id="cb8-40"><a href="#cb8-40"></a>    ghLogin <span class="ot">=</span> GitHub.untagName <span class="op">.</span> GitHub.userLogin</span></code></pre></div>
<p>これを実行するとこんな感じ:</p>
<pre class="code"><code>$ GH_TOKEN=xxx DRONE_HOST=cloud.drone.io DRONE_TOKEN=yyy stack runghc -- Main.hs
fetch GitHub user info:
Hi matsubara0507!!
fetch Drone user info:
Hi matsubara0507!!</code></pre>
<p>本来は <code>env</code> を <code>Reader</code> モナドから取ってきて使うのを省いているだけなので，まぁ対して変わらない． 試しに実験的に作ってみただけ． インターフェースを揃えるとか，もう少し手を加えてもいいかもしれない．</p>
<h3 id="shell-コマンド">Shell コマンド</h3>
<p><a href="https://hackage.haskell.org/package/shelly">shelly</a> というパッケージを利用したシェルコマンドの実行を支援する． <code>env</code> にはシェルコマンドを実行したいパスを保存し，与えたシェルコマンドを <code>cd</code> した上で実行してくれる:</p>
<div class="sourceCode" id="cb10"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span id="cb10-1"><a href="#cb10-1"></a><span class="kw">import</span> <span class="kw">qualified</span> <span class="dt">Mix.Plugin.Shell</span>  <span class="kw">as</span> <span class="dt">MixShell</span></span>
<span id="cb10-2"><a href="#cb10-2"></a><span class="kw">import</span> <span class="kw">qualified</span> <span class="dt">Shelly</span>            <span class="kw">as</span> <span class="dt">Shell</span></span>
<span id="cb10-3"><a href="#cb10-3"></a></span>
<span id="cb10-4"><a href="#cb10-4"></a><span class="kw">type</span> <span class="dt">Env</span> <span class="ot">=</span> <span class="dt">Record</span></span>
<span id="cb10-5"><a href="#cb10-5"></a>  &#39;[ <span class="st">&quot;logger&quot;</span> <span class="op">&gt;:</span> <span class="dt">MixLogger.LogFunc</span></span>
<span id="cb10-6"><a href="#cb10-6"></a>   , <span class="st">&quot;work&quot;</span>   <span class="op">&gt;:</span> <span class="dt">FilePath</span></span>
<span id="cb10-7"><a href="#cb10-7"></a>   ]</span>
<span id="cb10-8"><a href="#cb10-8"></a></span>
<span id="cb10-9"><a href="#cb10-9"></a><span class="ot">main ::</span> <span class="dt">IO</span> ()</span>
<span id="cb10-10"><a href="#cb10-10"></a>main <span class="ot">=</span> Mix.run plugin <span class="op">$</span> <span class="kw">do</span></span>
<span id="cb10-11"><a href="#cb10-11"></a>  paths <span class="ot">&lt;-</span> MixShell.exec <span class="op">$</span> Shell.ls <span class="st">&quot;.&quot;</span></span>
<span id="cb10-12"><a href="#cb10-12"></a>  forM_ paths <span class="op">$</span> \path <span class="ot">-&gt;</span> MixLogger.logInfo (display <span class="op">$</span> Shell.toTextIgnore path)</span>
<span id="cb10-13"><a href="#cb10-13"></a>  <span class="kw">where</span></span>
<span id="cb10-14"><a href="#cb10-14"></a><span class="ot">    plugin ::</span> <span class="dt">Plugin</span> () <span class="dt">IO</span> <span class="dt">Env</span></span>
<span id="cb10-15"><a href="#cb10-15"></a>    plugin <span class="ot">=</span> hsequence</span>
<span id="cb10-16"><a href="#cb10-16"></a>        <span class="op">$</span> <span class="op">#</span>logger <span class="op">&lt;@=&gt;</span> MixLogger.buildPlugin (<span class="op">#</span>handle <span class="op">@=</span> stdout <span class="op">&lt;:</span> <span class="op">#</span>verbose <span class="op">@=</span> <span class="dt">False</span> <span class="op">&lt;:</span> nil)</span>
<span id="cb10-17"><a href="#cb10-17"></a>       <span class="op">&lt;:</span> <span class="op">#</span>work   <span class="op">&lt;@=&gt;</span> <span class="fu">pure</span> <span class="st">&quot;.&quot;</span></span>
<span id="cb10-18"><a href="#cb10-18"></a>       <span class="op">&lt;:</span> nil</span></code></pre></div>
<h2 id="おしまい">おしまい</h2>
<p>過去のツールをこれで mix で置き換えていきたい2019です． ちなみにパッケージの名前は現在(2019/5)所属してる社名から(せっかく入社したならって気分)．</p>
  </div>]]></summary>
</entry>

</feed>
