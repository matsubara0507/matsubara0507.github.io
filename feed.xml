<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
    <title>ひげメモ</title>
    <link href="https://matsubara0507.github.io/feed.xml" rel="self" />
    <link href="https://matsubara0507.github.io" />
    <id>https://matsubara0507.github.io/feed.xml</id>
    <author>
        <name>MATSUBARA Nobutada</name>
        <email></email>
    </author>
    <updated>2018-06-18T00:00:00Z</updated>
    <entry>
    <title>Earlang & Elixir Fest 2018 に参加してきた</title>
    <link href="https://matsubara0507.github.io/posts/2018-06-18-join-elixir-festa-2108.html" />
    <id>https://matsubara0507.github.io/posts/2018-06-18-join-elixir-festa-2108.html</id>
    <published>2018-06-18T00:00:00Z</published>
    <updated>2018-06-18T00:00:00Z</updated>
    <summary type="html"><![CDATA[<article class="post card" itemscope itemtype="http://schema.org/BlogPosting">
 <div class="card-content">
  <header class="post-header">
    <h1 class="post-title" itemprop="name headline">Earlang & Elixir Fest 2018 に参加してきた</h1>
    <p class="post-meta">
      <time datetime="2018-06-18" itemprop="datePublished">
        Jun 18, 2018
      </time>
      
      
      <div class="tags">
          <i class="fa fa-tags"></i> <a href="/tags/Elixir.html">Elixir</a> <a href="/tags/event.html">event</a>
      </div>
      
    </p>
  </header>

  <div class="post-content" itemprop="articleBody">
    <p>先日(6/16)，<a href="https://elixir-fest.jp/">Earlang &amp; Elixir Fest 2018</a> に参加してきたので，そのメモ書きです． ちなみに，Elixir は普段たいして使ってないけど LT もしてきました．</p>
<h4 id="追記2018.06.21">追記(2018.06.21)</h4>
<p>本稿公開後に公開してくださった発表スライドのリンクを追記しました．</p>
<h2 id="section"></h2>
<p>今年で2回目らしく，去年は Elixir の作者の <a href="https://twitter.com/josevalim">Jose Valim</a> 氏を呼んで Keynote してもらい，全体のセッション内容としては Elixir を導入し始めた・挑戦中という話がメインだったようだ． 今年はどっちかっていうとプロダクトに実践導入・運用してみてどうだったかという話がメインだそうだ． また，並行してハンズオンがあったらしいが，行ってないのでそっちは良く分からない． ハンズオンの資料は GitHub に公開してあるので，いずれやってみたい(同期とかとハンズオンしてみてもいいかも)．</p>
<ul>
<li><a href="https://github.com/ohr486/ErlangElixirFestHandsOn">ohr486/ErlangElixirFestHandsOn - GitHub</a></li>
</ul>
<p>あと <a href="https://togetter.com/li/1238110">Togetter にまとめてみました</a>．</p>
<h2 id="メモ">メモ</h2>
<p>各企業での導入した話が多かったので簡単なメモばっかです．</p>
<h4 id="らくらく連絡網が-elixir-でリアルタイムメッセージング基盤を刷新した話">「らくらく連絡網」が Elixir でリアルタイムメッセージング基盤を刷新した話</h4>
<p>(ネットワーク設定にバタバタしてたのでメモが少ない)</p>
<ul>
<li><a href="https://github.com/rinosamakanata">rinosamakanata</a> 氏の発表</li>
<li><a href="https://eole-repos.github.io/public/elixirfest/2018/elixirfest2018-eole-rinosamakanata.pdf">発表スライドはコチラ</a></li>
<li>もともとは RoR らしい</li>
<li>技術的課題
<ul>
<li>分散の問題</li>
<li>長い目で見たときの保守・運用</li>
</ul></li>
<li>フロントエンドは Elm
<ul>
<li>「関数型良いよね」</li>
</ul></li>
<li>負荷テストのために不可掛けの Docker コンテナを作った</li>
<li>Elixir のバージョンアップが多い(リリースしてから9回もあった)
<ul>
<li><a href="https://github.com/asdf-vm/asdf-elixir">asdf</a> で難なく</li>
<li>Ruby や RoR よりぜんぜん簡単</li>
</ul></li>
<li>実質的にメンテナンスフリー</li>
<li>Erlang は書けなくても導入できる
<ul>
<li>ただし BEAM の知識はいる</li>
<li><a href="https://github.com/happi/theBeamBook">The BEAM Book</a> おすすめ</li>
</ul></li>
</ul>
<p>最近 Ruby や Ruby のライブラリのバージョンアップで苦しんでいるのを見てたのでバージョンアップがシームレスなの羨ましい．</p>
<h4 id="初めてのerlangサーバ開発と運用">初めてのErlangサーバ開発と運用</h4>
<ul>
<li><a href="https://github.com/mookjp">mookjp</a> 氏の発表</li>
<li><a href="https://speakerdeck.com/mookjp/chu-metefalseerlangsahakai-fa-toyun-yong?slide=1">発表スライドはコチラ</a></li>
<li>Erlang をどう勉強したかや失敗談などの話</li>
<li>Node.js から Erlang へ (たぶん)</li>
<li><a href="http://erlang.org/doc/man/observer.html">observer</a> という Erlang プロセスの可視化ツールが便利</li>
<li>Erlang サーバーをプロダクションに導入するときの設定
<ul>
<li>思想の記事ばっか！</li>
<li>実際の設定に関する記事が少ない！！</li>
</ul></li>
<li>不必要なプロセスやその監視プロセスが微妙に残ってじわじわ CPU 使用率が上がってしまった</li>
<li><a href="https://www.erlang-in-anger.com/">Erlang in Anger</a> を絶対に読む
<ul>
<li>運用に役立ちそうなことがたくさん書いてある</li>
</ul></li>
<li><a href="https://erlang-slack.herokuapp.com/">Erlang の Slack ワークスペース</a>がおススメ！
<ul>
<li>紹介した監視の VMStats もここで教えてもらった</li>
</ul></li>
</ul>
<p>思想の記事が多い話，なんとなく Haskell にも似たようなところがあって笑った</p>
<h4 id="keep-phoenix-app-productivity">Keep Phoenix App Productivity</h4>
<ul>
<li><a href="https://twitter.com/kanmo_ak">kanmo_ak</a> 氏の発表</li>
<li><a href="https://speakerdeck.com/kanmo/keep-phoenix-app-productivity?slide=1">発表スライドはコチラ</a></li>
<li>Phoenix Application 開発1年・運用1年してみた結果の話</li>
<li><a href="https://elixirschool.com/en/lessons/advanced/umbrella-projects/">Umbrella</a> によって Project を分割
<ul>
<li>肥大化してきた</li>
<li>複数のサービスをひとつのリポジトリで別々に開発</li>
<li>サービス間でコードを共有できる</li>
</ul></li>
<li>ひとつのファイルを書き換えるだけでコンパイル対象が膨大…
<ul>
<li>ファイル間の依存関係がひどいので切っていく</li>
<li>マクロを変更するとやり直し</li>
<li>構造体を変更するとやばい</li>
<li>プロトコルも依存がある</li>
<li><a href="https://hexdocs.pm/mix/Mix.Tasks.Xref.html"><code>mix xref</code></a> タスクが便利</li>
<li>モジュール名を動的に組み立てて依存を無理やり切る黒魔術(使わない方がいい)</li>
</ul></li>
<li>Erlang プロセスだと remsh で起動中のプロセスに接続して調査できる</li>
<li>Elixir バージョンアップは追いやすい
<ul>
<li>RoR に比べて(笑)</li>
</ul></li>
<li>Type Spec を書いておくとドキュメントになる
<ul>
<li>Dializer は使ってない(時間が無かった)</li>
<li>spec ないとつらいと感じたの私自身です</li>
</ul></li>
</ul>
<p>昔 Type Spec が書いてあったが間違ってるおかげで痛い目にあったので書いたやつを静的にチェックしたいですよね…</p>
<h4 id="from-python-to-elixir">from Python to Elixir</h4>
<ul>
<li><a href="https://github.com/kenichirow">kenichirow</a> 氏の発表</li>
<li>Python から Elixir に移行
<ul>
<li>Python 2020 年問題(2系のサポートが終わる)</li>
</ul></li>
<li>Phoenix は最初は使わないつもりだった
<ul>
<li>Django からだと暗黙的な何某が多い印象(マクロ)</li>
<li>PubSub いらない</li>
<li>なので自作 FW を作ってた</li>
</ul></li>
<li>突然 Phoenix 宣言
<ul>
<li>「お前 Dis れるほど Phoenix 知ってるのかよ」</li>
</ul></li>
<li>Ecto にはいくつかの問題</li>
<li>なのでライブラリを作った <a href="https://github.com/gumi/yacto">Yacto</a>
<ul>
<li>DB分割・XAトランザクションなど</li>
</ul></li>
<li>各ゲームの基盤を Template にしていたがバージョン管理がつらいのでライブラリに</li>
<li>Elixir のサポートチーム
<ul>
<li>ググる前に聞け</li>
<li>最近しんどいので Stack Overflow Team を導入</li>
</ul></li>
<li>言語変えて解決した問題は少しだけ
<ul>
<li>ただ整備するきっかけにはなった</li>
</ul></li>
</ul>
<p>基盤チームカッコいい</p>
<h4 id="ステートフルで大規模アクセスのあるsoft-realtimeなゲームサーバーをeasyにつくる">ステートフルで大規模アクセスのあるsoft-realtimeなゲームサーバーをeasyにつくる</h4>
<ul>
<li><a href="https://github.com/ne-sachirou">さっちゃん</a> 氏の発表</li>
<li><a href="https://speakerdeck.com/ne_sachirou/sutetohurudeda-gui-mo-akusesufalsearusoft-realtimenagemusabawoeasynitukuru">発表スライドはコチラ</a></li>
<li>Phoenix でゲーム作って運用したはなし</li>
<li>AWS + Kube + Phoenix</li>
<li>Real time PvP がメインなのに RoR は大変</li>
<li>どっちみちイロイロ知見が無いので新しい技術使っても苦労はするでしょ
<ul>
<li>Elixir の知見はある</li>
</ul></li>
<li><a href="https://hexdocs.pm/inner_cotton/readme.html">InnerCotton</a> を作った</li>
<li>FP は知ってた</li>
<li>Channel と Redis で PvP</li>
<li>ホットデプロイはあきらめた</li>
<li>優先度付きキューを自作 <a href="https://hex.pm/packages/pqueue2">queue2</a>
<ul>
<li>既存のモノは間違ってるものが多かったので</li>
<li>スタックになっているものもあった</li>
</ul></li>
<li><a href="https://hub.docker.com/r/nesachirou/elixir/">docker image</a> を作った(Elixir と Erlang の両方が指定できる)</li>
<li>Elixir の監視つらい</li>
<li>もっと publish していこうぜ</li>
</ul>
<p>社内でやったことドンドン Publish できるのいいなぁ．</p>
<h4 id="channel先生-pubsubがしたいです">Channel先生…!! PubSubがしたいです…</h4>
<ul>
<li><a href="https://github.com/ohr486">ohrdev</a> 氏の発表</li>
<li><a href="https://speakerdeck.com/ohr486/erlangelixirfest2018-ohr486-session">発表スライドはコチラ</a></li>
<li>~Erlang in Anger~ PubSub in Channel</li>
<li>「PubSub しない Phoenix はただの Rails だ」</li>
<li>Phoenix Channel + PubSub</li>
<li>PubSub は2種類ある
<ul>
<li>ローカル PubSub ・リモート PubSub</li>
</ul></li>
<li>「これカッコよくないっすか、見るたびにすごいぞくぞくする」</li>
<li>PubSub バックエンドは選択できる</li>
<li>どれだけ知っといた方がいいか？
<ul>
<li>基本は知らなくても</li>
<li>新しい Adaptar を作る場合は知ってないといけない</li>
</ul></li>
</ul>
<p>PubSub 完全に理解した(嘘)</p>
<h4 id="antikythera-framework-an-elixir-framework-for-multiple-web-services">Antikythera Framework: An Elixir framework for multiple web services</h4>
<ul>
<li><a href="https://github.com/skirino">skirino</a> 氏の発表</li>
<li><a href="https://skirino.github.io/slides/antikythera_framework.html#/">発表スライドはコチラ</a></li>
<li>社内で作ったフレームワークの紹介 : <a href="https://github.com/access-company/antikythera">antikythera</a></li>
<li>Antikythera メカニズム
<ul>
<li>ギリシャ時代のオーパーツ</li>
<li>なにかよくわからない</li>
<li>星の動き？？</li>
</ul></li>
<li>複数のサービスをひとつのフレームワークで管理</li>
<li>Gear : Webサービスの単位・他の Gear に依存しうる
<ul>
<li>instance より細かい単位</li>
</ul></li>
<li>コア機能
<ul>
<li>リソースコントロール</li>
<li>自動オペレーション(ホットデプロイなど)</li>
<li>ログなどビルドインに</li>
</ul></li>
<li>Gear はマイクロサービスで疎結合だが管理は統一</li>
<li>リソース管理は ErlangVM なので一長一短</li>
<li>DB はどうするか？
<ul>
<li>DB は知らない(Gear にしない)</li>
<li>ふつうに Ecto とかで</li>
</ul></li>
<li>なぜ Erlang じゃないか？
<ul>
<li>mix が優秀</li>
<li>mix compiler でフックできる</li>
</ul></li>
</ul>
<p>mix すごいのはよくわかる．</p>
<h4 id="任意のbeam系言語でプラグインを書ける安定したフレームワークの作りかた">任意のBEAM系言語でプラグインを書ける安定したフレームワークの作りかた</h4>
<ul>
<li><a href="https://github.com/niku">niku</a> 氏の発表</li>
<li><a href="https://niku.name/2018/06/16/slide.html">発表スライドはコチラ</a></li>
<li>BEAM系プラグインを作る上でのノウハウ</li>
<li>また PubSub の話ですいません</li>
<li>フレームワークとプラグイン</li>
<li>プラグイン機構を持つ FW には登場人物が3人
<ul>
<li>フレームワークとプラグインを使う人</li>
</ul></li>
<li>プラグインでエラーが起きたときフレームワークはどうするか</li>
<li>「絵にかくとこんな感じ」</li>
<li>Supervisor は他の言語ではあまりない
<ul>
<li>こいつのおかげで別粒度間のプロセス管理が楽</li>
</ul></li>
<li>ゆかいに学ぼうの Supervisor の章は良くできている</li>
</ul>
<p>絵に書くとこんな感じってのがじわじわ来る．</p>
<h4 id="erlang-事例紹介-メディアストリーム中継システム">Erlang 事例紹介: メディアストリーム中継システム</h4>
<ul>
<li><a href="https://github.com/amutake">amutake</a> 氏の発表</li>
<li><a href="https://niconare.nicovideo.jp/watch/kn3115">発表スライドはコチラ</a>
<ul>
<li>ニコニコのスライド置き場あったんだ(笑)</li>
</ul></li>
<li>ニコ生で使われる(予定)のシステムの話(Erlang 製)</li>
<li>生放送の中継ツリー</li>
<li>生放送に求められる性質</li>
<li>ストリーム中継システム : sluicegate の作成
<ul>
<li>いつか OSS になる</li>
</ul></li>
<li>学術的に研究されたアルゴリズム(独自ではなく)
<ul>
<li>HyParView</li>
<li>Plumtree</li>
</ul></li>
<li>簡単にできるけど無駄にメッセージパッシングすると遅くなる
<ul>
<li>軽い処理をメッセージパッシングするとだめ</li>
</ul></li>
<li>Erlang クラスタは組まない</li>
<li>Plumtree の性質があれだった
<ul>
<li>なので自分たちで改造</li>
<li>根幹なので定理証明(Coq で実装)
<ul>
<li>PPLにて発表した</li>
<li>生放送ストリーム中継システムのCoqによる形式化と検証</li>
</ul></li>
</ul></li>
<li>ぱぶさぶくん(検証ツール)</li>
<li>水道局(可視化ツール)
<ul>
<li>水路という自作ライブラリを使っている</li>
</ul></li>
<li>分散アルゴリズムを書きやすい</li>
<li>調査しやすい
<ul>
<li>reduction の取得のしやすさは Erlang in Anger</li>
</ul></li>
<li>Coq のコードから Erlang に変換するものがある</li>
</ul>
<p>なんか研究の話聞いてるみたいで聞きやすかった(笑)</p>
<h3 id="lt">LT</h3>
<p>自分も LT したので細かいメモは無い</p>
<ul>
<li>NOC の話
<ul>
<li>朝にアクシデントがあったようで…</li>
</ul></li>
<li>個人で Elixir してきた話(日本一 Elixir 本を書いている)</li>
<li>Elixir 完全に理解した(ちょっとできる人がいればいい)</li>
<li>Elixir Programming with Type checking (自分)</li>
<li>ElixirScript の話</li>
<li>PubSub Redis
<ul>
<li>phoenix_pubusu_redis_z</li>
</ul></li>
<li>Dialyzer のすすめ</li>
<li>Erlang on ARM サーバー
<ul>
<li>未発表のもの</li>
<li>秒間40まんリクエストをさばいてる</li>
<li>ミドルウェアの世界に来い</li>
</ul></li>
</ul>
<p>どうやら MVP は「Elixirを2週間で完全に理解した」新卒の子．</p>
<h3 id="keynote">Keynote</h3>
<h4 id="共有からメッセージパッシングへ-erlangotpやelixirと歩んだこの10年">共有からメッセージパッシングへ: Erlang/OTPやElixirと歩んだこの10年</h4>
<ul>
<li><a href="https://twitter.com/jj1bdx">力武健次</a>氏</li>
<li><a href="https://speakerdeck.com/jj1bdx/erlang-and-elixir-fest-2018-keynote?slide=1">発表資料はコチラ</a></li>
<li>BIND ??? 脆弱性の多い DNS サーバーについて昔やってた
<ul>
<li>1000行マクロ</li>
</ul></li>
<li>Erlang に出会う
<ul>
<li>うるう秒の修正パッチを送る</li>
<li>SSH のセキュリティの研究</li>
</ul></li>
<li>ICFP’11 の Erlang Workshop の実行委員長</li>
<li>Erlang in Anger のサイン本もらった</li>
<li>Elixir のロゴは商標登録されている</li>
<li>Catalyze Changes
<ul>
<li>Erlang は読みにくい！</li>
<li>レコードが難しい！</li>
<li>ドキュメントがない！</li>
<li>何とかっしようぜ！</li>
<li>by Dave Tomas</li>
<li>大変だった…(jose)</li>
<li>有言実行しててElixir本を7冊も出版している</li>
</ul></li>
<li>Ruby コミュニティをちらほら見かけるようになった</li>
<li>2018/2 大事件</li>
<li><a href="https://codesync.global/conferences/code-beam-sf-2018/">Code BEAM 2018</a>
<ul>
<li>Open Erlang 20周年</li>
<li>BEAM コミュニティの融合</li>
</ul></li>
<li>共通してどこがおいしいのか</li>
<li>Immutability ディープコピー 参照を使わない
<ul>
<li>自分が思う Erlang のすばらしさ</li>
</ul></li>
<li>従来は実態を共有(はやい？)</li>
<li>「安全よりも効率」</li>
<li>C++ の愚痴
<ul>
<li>参照なの？値なの？</li>
<li>const の話が大変</li>
<li>コンストラクタいつ動く？？</li>
<li>shared_ptr と unique_ptr (参照カウンタと所有権)</li>
</ul></li>
<li>例外: ETSやプロセス辞書</li>
<li>「効率より安全」
<ul>
<li>とても遅い</li>
<li>型検査は無いけど非常に厳格</li>
</ul></li>
<li>Joe (Erlang の作者)「processes messgae and links が重要な部分(gen_server は後から)」
<ul>
<li>他はどうでもいい</li>
<li>軽量並行プロセスとエラーハンドリング</li>
</ul></li>
<li>綺麗に落とすのは大変
<ul>
<li>プロセスキューが詰まると終了</li>
</ul></li>
<li>link and monitor
<ul>
<li>昔のSDの自分の記事を読み返した</li>
</ul></li>
<li>今後
<ul>
<li>基本理念 「ほどほどなのが一番良い」</li>
<li>手を抜かずに高速化</li>
</ul></li>
<li>Code BEAM で話題にあがったもの
<ul>
<li>組込み分野えの応用</li>
<li>大規模クラスタ</li>
<li><a href="https://github.com/josefs/Gradualizer">Gradual Type System</a> (ツールの発表があった)</li>
<li>Language Server Protcol</li>
</ul></li>
<li>英語圏で発表しよう
<ul>
<li>Code BEAM 2018 は日本人一人</li>
</ul></li>
</ul>
<p>クライアントの同期の子が，不変性のすばらしさの話を指して「Rust や Elixir を勉強したとに同じことを感じた！」と喜んでいた．</p>
<h2 id="自分の話">自分の話</h2>
<p>Elchemy の紹介話をしてきました． スライドはこちら</p>
<h2 id="section-1"></h2>
<iframe src="//www.slideshare.net/slideshow/embed_code/key/ocbuQdsbw2EmG5" width="595" height="485" frameborder="0" marginwidth="0" marginheight="0" scrolling="no" style="border:1px solid #CCC; border-width:1px; margin-bottom:5px; max-width: 100%;" allowfullscreen>
</iframe>
<h2 id="section-2"></h2>
<p>実は前日(6/15)に別の LT で Elchemy の Docker image を作る話をしてきた． その時のスライドはこちら．</p>
<h2 id="section-3"></h2>
<iframe src="//www.slideshare.net/slideshow/embed_code/key/al30fSfPGB5HGN" width="595" height="485" frameborder="0" marginwidth="0" marginheight="0" scrolling="no" style="border:1px solid #CCC; border-width:1px; margin-bottom:5px; max-width: 100%;" allowfullscreen>
</iframe>
<h2 id="section-4"></h2>
<p>実は以下の記事でもっと詳しくまとめてあるので，プレゼンを見る必要は無いんです(笑)</p>
<ul>
<li><a href="https://matsubara0507.github.io/posts/2018-06-15-introduce-elchemy-part1.html">Elchemy 入門 : その１</a></li>
<li><a href="https://matsubara0507.github.io/posts/2018-06-16-introduce-elchemy-part2.html">Elchemy 入門 : その２</a></li>
</ul>
<h2 id="おしまい">おしまい</h2>
<p>来年はもっと型のハナシができるといいなぁ．</p>
  </div>
</div>
</article>
]]></summary>
</entry>
<entry>
    <title>Elchemy 入門 : その２</title>
    <link href="https://matsubara0507.github.io/posts/2018-06-16-introduce-elchemy-part2.html" />
    <id>https://matsubara0507.github.io/posts/2018-06-16-introduce-elchemy-part2.html</id>
    <published>2018-06-16T00:00:00Z</published>
    <updated>2018-06-16T00:00:00Z</updated>
    <summary type="html"><![CDATA[<article class="post card" itemscope itemtype="http://schema.org/BlogPosting">
 <div class="card-content">
  <header class="post-header">
    <h1 class="post-title" itemprop="name headline">Elchemy 入門 : その２</h1>
    <p class="post-meta">
      <time datetime="2018-06-16" itemprop="datePublished">
        Jun 16, 2018
      </time>
      
      
      <div class="tags">
          <i class="fa fa-tags"></i> <a href="/tags/Elchemy.html">Elchemy</a> <a href="/tags/Elm.html">Elm</a> <a href="/tags/Elixir.html">Elixir</a>
      </div>
      
    </p>
  </header>

  <div class="post-content" itemprop="articleBody">
    <p>Elm から Elixir のトランスパイラ，<a href="https://github.com/wende/elmchemy">Elchemy</a> についてイロイロと調べたのでまとめていきます． <a href="https://matsubara0507.github.io/posts/2018-06-15-introduce-elchemy-part1.html">前回はコチラ</a>． 今回は</p>
<ul>
<li><a href="https://hackernoon.com/elmchemy-write-type-safe-elixir-code-with-elms-syntax-part-2-our-own-rpg-character-module-cedbf7da138d">Tutorial その２</a>をやってみた</li>
<li>Phoenix で ToDo アプリを作る</li>
</ul>
<p>の2本立てです． ちなみに，現在のバージョンは 0.7.4 です．</p>
<h2 id="tutorial-そのをやってみた">Tutorial その２をやってみた</h2>
<p>Tutorial その２では Elchemy を利用した独自ライブラリを作成する． 以下の手順で行うそうだ．</p>
<ol type="1">
<li>エイリアス型を定義</li>
<li>ユニオン型を定義</li>
<li>関数としてエイリアスやタグを用いる</li>
<li>ユニオン型でのパターンマッチ</li>
<li>関数として演算子を使う・独自の演算子を定義する</li>
<li>別のモジュールから型やエイリアス型をインポートする</li>
</ol>
<p>基本的に Elm の書き方講座みたいなものなので，最悪っ困ったら Elm を勉強してください(丸投げ)． ちなみに，元記事の全てを細かく追従せず，ざっくりと掻い摘んで書き出している． なので細かくは元記事を読んでね．</p>
<h2 id="section"></h2>
<p>あと，<a href="https://github.com/wende/elmchemy-article-example">このコードは全て作者さんが GitHub に挙げている</a>．</p>
<h3 id="その前に">その前に</h3>
<p>テストを書こう，ということでテストを Elixir で書いている． 今回の作成するライブラリはどうやら，ゲームか何かのキャラを制御する物らしい</p>
<div class="sourceCode" id="cb1"><pre class="sourceCode elixir"><code class="sourceCode elixir"><a class="sourceLine" id="cb1-1" data-line-number="1"><span class="co"># character_test.exs</span></a>
<a class="sourceLine" id="cb1-2" data-line-number="2"><span class="kw">defmodule</span> <span class="cn">CharacterTest</span> <span class="kw">do</span></a>
<a class="sourceLine" id="cb1-3" data-line-number="3">  <span class="im">use</span> <span class="cn">ExUnit</span><span class="op">.</span><span class="cn">Case</span></a>
<a class="sourceLine" id="cb1-4" data-line-number="4">  <span class="im">use</span> <span class="cn">Elchemy</span></a>
<a class="sourceLine" id="cb1-5" data-line-number="5"></a>
<a class="sourceLine" id="cb1-6" data-line-number="6">  test <span class="st">&quot;Character has name, last name and such&quot;</span> <span class="kw">do</span></a>
<a class="sourceLine" id="cb1-7" data-line-number="7">      gordon <span class="op">=</span> <span class="cn">Character</span><span class="op">.</span>new(<span class="st">&quot;Gordon&quot;</span>, <span class="st">&quot;Freemonad&quot;</span>, <span class="va">:male</span>)</a>
<a class="sourceLine" id="cb1-8" data-line-number="8"></a>
<a class="sourceLine" id="cb1-9" data-line-number="9">      assert gordon<span class="op">.</span>name <span class="op">==</span> <span class="st">&quot;Gordon&quot;</span></a>
<a class="sourceLine" id="cb1-10" data-line-number="10">      assert gordon<span class="op">.</span>surname <span class="op">==</span> <span class="st">&quot;Freemonad&quot;</span></a>
<a class="sourceLine" id="cb1-11" data-line-number="11">      assert gordon<span class="op">.</span>gender <span class="op">==</span> <span class="va">:male</span></a>
<a class="sourceLine" id="cb1-12" data-line-number="12">  <span class="kw">end</span></a>
<a class="sourceLine" id="cb1-13" data-line-number="13"></a>
<a class="sourceLine" id="cb1-14" data-line-number="14">  test <span class="st">&quot;Has stats&quot;</span> <span class="kw">do</span></a>
<a class="sourceLine" id="cb1-15" data-line-number="15">    gordon <span class="op">=</span> <span class="cn">Character</span><span class="op">.</span>new(<span class="st">&quot;Gordon&quot;</span>, <span class="st">&quot;Freemonad&quot;</span>, <span class="va">:male</span>)</a>
<a class="sourceLine" id="cb1-16" data-line-number="16"></a>
<a class="sourceLine" id="cb1-17" data-line-number="17">    stats <span class="op">=</span> [<span class="va">:strength</span>, <span class="va">:intelligence</span>, <span class="va">:vitality</span>]</a>
<a class="sourceLine" id="cb1-18" data-line-number="18">    <span class="kw">for</span> s <span class="op">&lt;-</span> stats <span class="kw">do</span></a>
<a class="sourceLine" id="cb1-19" data-line-number="19">      assert is_integer(gordon<span class="op">.</span>stats[s]), <span class="st">&quot;No </span><span class="ot">#{</span>s<span class="ot">}</span><span class="st"> stat in </span><span class="ot">#{</span>inspect gordon<span class="ot">}</span><span class="st">&quot;</span></a>
<a class="sourceLine" id="cb1-20" data-line-number="20">    <span class="kw">end</span></a>
<a class="sourceLine" id="cb1-21" data-line-number="21"></a>
<a class="sourceLine" id="cb1-22" data-line-number="22">    assert <span class="cn">Character</span><span class="op">.</span>set_stat(<span class="va">:vitality</span>, <span class="dv">10</span>, gordon)<span class="op">.</span>stats<span class="op">.</span>vitality <span class="op">==</span> <span class="dv">10</span></a>
<a class="sourceLine" id="cb1-23" data-line-number="23">  <span class="kw">end</span></a>
<a class="sourceLine" id="cb1-24" data-line-number="24"></a>
<a class="sourceLine" id="cb1-25" data-line-number="25">  test <span class="st">&quot;Boosting visality boosts health&quot;</span> <span class="kw">do</span></a>
<a class="sourceLine" id="cb1-26" data-line-number="26">    gordon <span class="op">=</span> <span class="cn">Character</span><span class="op">.</span>new(<span class="st">&quot;Gordon&quot;</span>, <span class="st">&quot;Freemonad&quot;</span>, <span class="va">:male</span>)</a>
<a class="sourceLine" id="cb1-27" data-line-number="27"></a>
<a class="sourceLine" id="cb1-28" data-line-number="28">    { hp, packed_gordon_max } <span class="op">=</span> <span class="cn">Character</span><span class="op">.</span>set_stat(<span class="va">:vitality</span>, <span class="dv">10</span>, gordon)<span class="op">.</span>health</a>
<a class="sourceLine" id="cb1-29" data-line-number="29">    { _, weak_gordon_max }    <span class="op">=</span> <span class="cn">Character</span><span class="op">.</span>set_stat(<span class="va">:vitality</span>, <span class="dv">0</span>, gordon)<span class="op">.</span>health</a>
<a class="sourceLine" id="cb1-30" data-line-number="30"></a>
<a class="sourceLine" id="cb1-31" data-line-number="31">    assert packed_gordon_max <span class="op">&gt;</span> weak_gordon_max</a>
<a class="sourceLine" id="cb1-32" data-line-number="32">    assert hp <span class="op">==</span> packed_gordon_max</a>
<a class="sourceLine" id="cb1-33" data-line-number="33">  <span class="kw">end</span></a>
<a class="sourceLine" id="cb1-34" data-line-number="34"></a>
<a class="sourceLine" id="cb1-35" data-line-number="35">  test <span class="st">&quot;Can equip weapon only if intelligence is enough&quot;</span> <span class="kw">do</span></a>
<a class="sourceLine" id="cb1-36" data-line-number="36">    gordon <span class="op">=</span> <span class="cn">Character</span><span class="op">.</span>new(<span class="st">&quot;Gordon&quot;</span>, <span class="st">&quot;Freemonad&quot;</span>, <span class="va">:male</span>)</a>
<a class="sourceLine" id="cb1-37" data-line-number="37">    weapon <span class="op">=</span> <span class="cn">Weapon</span><span class="op">.</span>new(<span class="st">&quot;Sci fi blaster thingy&quot;</span>, <span class="dv">9</span> ,<span class="dv">100</span>)</a>
<a class="sourceLine" id="cb1-38" data-line-number="38"></a>
<a class="sourceLine" id="cb1-39" data-line-number="39">    dumb_gordon <span class="op">=</span> <span class="cn">Character</span><span class="op">.</span>set_stat(<span class="va">:intelligence</span>, <span class="dv">0</span>, gordon)</a>
<a class="sourceLine" id="cb1-40" data-line-number="40">    smart_gordon <span class="op">=</span> <span class="cn">Character</span><span class="op">.</span>set_stat(<span class="va">:intelligence</span>, <span class="dv">10</span>, gordon)</a>
<a class="sourceLine" id="cb1-41" data-line-number="41"></a>
<a class="sourceLine" id="cb1-42" data-line-number="42">    assert {<span class="va">:error</span>, <span class="st">&quot;Too dumb&quot;</span>} <span class="op">=</span> <span class="cn">Character</span><span class="op">.</span>equip(weapon, dumb_gordon)</a>
<a class="sourceLine" id="cb1-43" data-line-number="43">    assert {<span class="va">:ok</span>, equipped_gordon} <span class="op">=</span> <span class="cn">Character</span><span class="op">.</span>equip(weapon, smart_gordon)</a>
<a class="sourceLine" id="cb1-44" data-line-number="44">    assert equipped_gordon<span class="op">.</span>arm <span class="op">==</span> {weapon}</a>
<a class="sourceLine" id="cb1-45" data-line-number="45">  <span class="kw">end</span></a>
<a class="sourceLine" id="cb1-46" data-line-number="46"><span class="kw">end</span></a></code></pre></div>
<h3 id="キャラクターを定義">キャラクターを定義</h3>
<h4 id="型エイリアス">1. 型エイリアス</h4>
<p>関数型なのでまずはドメインモデルの型を定義する． テストより，<code>name</code> <code>surname</code> <code>gender</code> をフィールドとして持っているのが分かるので次のような型を定義した．</p>
<pre class="elm"><code>module Character exposing (..)

type alias Character =
    { name : String
    , surname : String
    , gender : Gender
    }</code></pre>
<p>何故エイリアスなのかというと，構造的サブタイピイングが出来るようにだと思う(たぶん)．</p>
<h4 id="ユニオン型">2. ユニオン型</h4>
<p><code>Gender</code> 型が無いので定義する． こっちは列挙型みたいなのが欲しいので、ユニオン型を用いる．</p>
<pre class="elm"><code>type Gender
    = Male
    | Female
    | Other</code></pre>
<h4 id="関数としての型エイリアス">3. 関数としての型エイリアス</h4>
<p>Elixir っぽい <code>new</code> 関数を定義してやろう． Elm の場合，エイリアス型を定義すれば同名の値コンストラクタができるので，それをラップすればよい</p>
<pre class="elm"><code>new : String -&gt; String -&gt; Gender -&gt; Character
new name surname gender =
    Character
      name
      surname
      gender</code></pre>
<h3 id="キャラクターにステータスを持たせる">キャラクターにステータスを持たせる</h3>
<p>キャラクターにいくつかのステータスを持たせよう．</p>
<pre class="elm"><code>type alias Character =
    { name : String
    , surname : String
    , gender : Gender
    , health : (Int, Int)
    , stats : Stats
    }

type alias Stats =
    { strength : Int
    , intelligence : Int
    , vitality : Int
    }

new : String -&gt; String -&gt; Gender -&gt; Character
new name surname gender =
    Character
      name
      surname
      gender
      (100,100)
      (Stats 0 0 0)</code></pre>
<p><code>health</code> はどうやら HP みたいなものらしい(現在のHPと上限)．</p>
<h3 id="パターンマッチ">4. パターンマッチ</h3>
<p>ステータスを更新する関数を定義しよう．</p>
<pre class="elm"><code>type Stat
    = Strength
    | Intelligence
    | Vitality

setStat : Stat -&gt; Int -&gt; Character -&gt; Character
setStat stat value character =
    let
      stats = character.stats
    in
    case stat of
        Strength -&gt;
            { character | stats = { stats | strength = value } }
        Intelligence -&gt;
            { character | stats = { stats | intelligence = value } }
        Vitality -&gt;
            { character | stats = { stats | vitality = value } }        </code></pre>
<p>残念ながらこの <code>setStat</code> は正しくない． テストを見ればわかるが <code>Vitality</code> を更新した場合は <code>health</code> も更新する必要がある．</p>
<h4 id="演算子">5. 演算子</h4>
<p><code>health</code> はタプル型だ． タプルの更新をいい感じにするために，カスタム演算子を定義してみよう．</p>
<pre class="elm"><code>(&lt;$) : (a, b) -&gt; (a -&gt; c) -&gt; (c, b)
(&lt;$) tuple f = Tuple.mapFirst f tuple

($&gt;) : (a, b) -&gt; (b -&gt; c) -&gt; (a, c)
($&gt;) tuple f = Tuple.mapSecond f tuple</code></pre>
<p>これを使って <code>setStat</code> の <code>Vitality</code> の部分を正しく修正する．</p>
<pre class="elm"><code>setStat : Stat -&gt; Int -&gt; Character -&gt; Character
setStat stat value character =
    let
      stats = character.stats
    in
    case stat of
        ...
        Vitality -&gt;
            { character
                | stats = { stats | vitality = value }
                , health =
                    character.health
                      &lt;$ (+) ((value - stats.vitality) * 10)
                      $&gt; always (100 + 10 * value)
            }                </code></pre>
<h3 id="ウェポンを持たせる">ウェポンを持たせる</h3>
<h4 id="インポート">インポート</h4>
<p>新しく <code>Weapon.elm</code> ファイルを作り，新しいモジュール定義する．</p>
<pre class="elm"><code>module Weapon exposing (..)

type alias Weapon =
    { name : String
    , level : Int
    , damage : Int
    }

new : String -&gt; Int -&gt; Int -&gt; Weapon
new name level damage = Weapon name level damage</code></pre>
<p>このモジュールをインポートして <code>Character</code> 型を拡張しよう</p>
<pre class="elm"><code>import Weapon exposing (Weapon)

type alias Character =
    { name : String
    , surname : String
    , gender : Gender
    , health : (Int, Int)
    , stats : Stats
    , arm : Maybe Weapon
    }

new : String -&gt; String -&gt; Gender -&gt; Character
new name surname gender =
    Character
      name
      surname
      gender
      (100,100)
      (Stats 0 0 0)
      Nothing</code></pre>
<p>最後に <code>equip</code> 関数を作って完成． これで全てのテストが通るはずだ．</p>
<pre class="elm"><code>equip : Weapon -&gt; Character -&gt; Result String Character
equip weapon character =
    if weapon.level &lt; character.status.intelligence then
        Ok { character | arm = Just weapon }
    else
        Err &quot;Too dumb&quot;</code></pre>
<p>「頭悪すぎ」ってひどい(笑)</p>
<h2 id="phoenix-で-todo-アプリを作る">Phoenix で ToDo アプリを作る</h2>
<p>Elchemy が実際にどの程度有用かを感じるために，Elchemy + Elm + Phoenix で超簡易的な Todo アプリを作ってみた．</p>
<ul>
<li><a href="https://gitlab.com/matsubara0507/elchemy_todo_app">MATSUBARA Nobutada / elchemy_todo_app · GitLab</a></li>
</ul>
<p>過去に <a href="https://github.com/matsubara0507/patissier-test">Elm + Phoenix で社内ツールを作ったり</a>，<a href="https://matsubara0507.github.io/posts/2017-12-13-elm-and-haskell-for-elmer.html">Elm + Haskell で Todo アプリを書いてみたり</a>したので，その辺りからコードや構成はパクッて来てます． GitLab に置いてるのは，モノは試しってやつ(笑)．</p>
<h3 id="phoenix-をインストール">Phoenix をインストール</h3>
<p>Elchemy (および Elixir・Elm・npm) はインストールされているとする． <a href="https://hexdocs.pm/phoenix/installation.html">Phoenix のサイト</a>にある通りにやればよい．</p>
<pre><code>$ mix archive.install https://github.com/phoenixframework/archives/raw/master/phx_new.ez</code></pre>
<h3 id="project-を作成">Project を作成</h3>
<p>こんな時のために <code>elchemy init</code> というコマンドがある(？)．</p>
<pre><code>$ mix phx.new elchemy_todo_app --no-ecto
$ cd elchemy_todo_app
$ elchemy init</code></pre>
<p><code>elchemy new</code> との違いは，<code>mix.exs</code> の Elixir のバージョンが古いのと <code>.formatter.exs</code> ぐらいかな？ 今回は DB をわざわざ使うのがめんどくさいので，ストレージっぽい GenServer を定義する(なので <code>--no-ecto</code>)．</p>
<h3 id="crud-を作る">CRUD を作る</h3>
<p>Phoenix に CRUD を追加するには，まず<code>router.ex</code> にルーティングを足す.</p>
<div class="sourceCode" id="cb14"><pre class="sourceCode elixir"><code class="sourceCode elixir"><a class="sourceLine" id="cb14-1" data-line-number="1"><span class="kw">defmodule</span> <span class="cn">ElchemyTodoAppWeb</span><span class="op">.</span><span class="cn">Router</span> <span class="kw">do</span></a>
<a class="sourceLine" id="cb14-2" data-line-number="2">  <span class="im">use</span> <span class="cn">ElchemyTodoAppWeb</span>, <span class="va">:router</span></a>
<a class="sourceLine" id="cb14-3" data-line-number="3"></a>
<a class="sourceLine" id="cb14-4" data-line-number="4">  <span class="op">...</span></a>
<a class="sourceLine" id="cb14-5" data-line-number="5"></a>
<a class="sourceLine" id="cb14-6" data-line-number="6">  pipeline <span class="va">:api</span> <span class="kw">do</span></a>
<a class="sourceLine" id="cb14-7" data-line-number="7">    plug(<span class="va">:accepts</span>, [<span class="st">&quot;json&quot;</span>])</a>
<a class="sourceLine" id="cb14-8" data-line-number="8">  <span class="kw">end</span></a>
<a class="sourceLine" id="cb14-9" data-line-number="9"></a>
<a class="sourceLine" id="cb14-10" data-line-number="10">  scope <span class="st">&quot;/api&quot;</span>, <span class="cn">ElchemyTodoAppWeb</span> <span class="kw">do</span></a>
<a class="sourceLine" id="cb14-11" data-line-number="11">    pipe_through(<span class="va">:api</span>)</a>
<a class="sourceLine" id="cb14-12" data-line-number="12">    resources(<span class="st">&quot;/todos&quot;</span>, <span class="cn">TodoController</span>, <span class="va">only:</span> [<span class="va">:index</span>, <span class="va">:create</span>, <span class="va">:update</span>, <span class="va">:delete</span>])</a>
<a class="sourceLine" id="cb14-13" data-line-number="13">  <span class="kw">end</span></a>
<a class="sourceLine" id="cb14-14" data-line-number="14"><span class="kw">end</span></a></code></pre></div>
<p>次にコントロラーを定義し，</p>
<div class="sourceCode" id="cb15"><pre class="sourceCode elixir"><code class="sourceCode elixir"><a class="sourceLine" id="cb15-1" data-line-number="1"><span class="kw">defmodule</span> <span class="cn">ElchemyTodoAppWeb</span><span class="op">.</span><span class="cn">TodoController</span> <span class="kw">do</span></a>
<a class="sourceLine" id="cb15-2" data-line-number="2">  <span class="im">alias</span> <span class="cn">Models</span><span class="op">.</span><span class="cn">Todo</span>, <span class="va">as:</span> <span class="cn">Todo</span></a>
<a class="sourceLine" id="cb15-3" data-line-number="3">  <span class="im">use</span> <span class="cn">ElchemyTodoAppWeb</span>, <span class="va">:controller</span></a>
<a class="sourceLine" id="cb15-4" data-line-number="4"></a>
<a class="sourceLine" id="cb15-5" data-line-number="5">  <span class="kw">def</span> index(conn, _params), <span class="kw">do</span>: render(conn, <span class="st">&quot;todos.json&quot;</span>, %{<span class="va">todos:</span> <span class="op">...</span> })</a>
<a class="sourceLine" id="cb15-6" data-line-number="6">  <span class="kw">def</span> create(conn, params), <span class="kw">do</span>: render(conn, <span class="st">&quot;todos.json&quot;</span>, %{<span class="va">todos:</span> <span class="op">...</span> })</a>
<a class="sourceLine" id="cb15-7" data-line-number="7">  <span class="kw">def</span> update(conn, params), <span class="kw">do</span>: render(conn, <span class="st">&quot;todos.json&quot;</span>, %{<span class="va">todos:</span> <span class="op">...</span> })</a>
<a class="sourceLine" id="cb15-8" data-line-number="8">  <span class="kw">def</span> delete(conn, %{<span class="st">&quot;id&quot;</span> <span class="op">=&gt;</span> id}), <span class="kw">do</span>: render(conn, <span class="st">&quot;todos.json&quot;</span>, %{<span class="va">todos:</span> <span class="op">...</span> })</a>
<a class="sourceLine" id="cb15-9" data-line-number="9"><span class="kw">end</span></a></code></pre></div>
<p>(<code>...</code> の部分は後で埋める) そして View を定義する。</p>
<div class="sourceCode" id="cb16"><pre class="sourceCode elixir"><code class="sourceCode elixir"><a class="sourceLine" id="cb16-1" data-line-number="1"><span class="kw">defmodule</span> <span class="cn">ElchemyTodoAppWeb</span><span class="op">.</span><span class="cn">TodoView</span> <span class="kw">do</span></a>
<a class="sourceLine" id="cb16-2" data-line-number="2">  <span class="im">use</span> <span class="cn">ElchemyTodoAppWeb</span>, <span class="va">:view</span></a>
<a class="sourceLine" id="cb16-3" data-line-number="3">  <span class="kw">def</span> render(<span class="st">&quot;todos.json&quot;</span>, %{<span class="va">todos:</span> todos}), <span class="kw">do</span>: todos</a>
<a class="sourceLine" id="cb16-4" data-line-number="4"><span class="kw">end</span></a></code></pre></div>
<p>さてここから　Elchemy だ。 モデルを Elchemy で定義する. というかモデル以外はマクロ色が強過ぎてうまくいかなかった.</p>
<h3 id="elchemy-でモデルを">Elchemy でモデルを</h3>
<p>まずは型を定義.</p>
<pre class="elm"><code>module Data.Todo exposing (..)
import Dict

type alias Todo =
    { id : String
    , title : String
    , done : Bool
    }

type alias Todos =
    Dict.Dict String Todo</code></pre>
<p>ここはフロント共有したいので別途切り出しておく. DBをサボるために GenServer なモデルを定義する.</p>
<pre class="elm"><code>module Models.Todo exposing (..)

import Data.Todo exposing (Todo, Todos)
import Dict
import Elchemy exposing (..)

{- ex
   use GenServer

   def start_link(init \\ %{ todos: %{}, cnt: 0 }), do: GenServer.start_link(__MODULE__, init, name: :todos)

   def init(state), do: {:ok, state}

   def handle_call(:get, _client, state), do: {:reply, state, state}

   def handle_cast({:set, new_state}, _state), do: {:noreply, new_state}

   def gen_(params) do
     %{
       id: params[&quot;id&quot;],
       title: params[&quot;title&quot;],
       done: params[&quot;done&quot;]
     }
   end
-}

type alias State =
    { todos : Todos
    , cnt : Int
    }

type Name
    = Todos

type Action
    = Get
    | Set State

gen : params -&gt; Todo
gen = ffi &quot;Models.Todo&quot; &quot;gen_&quot;

getState : State
getState = call_ Todos Get

setState : State -&gt; State
setState state = cast_ Todos (Set state) |&gt; always state

call_ : Name -&gt; Action -&gt; a
call_ = ffi &quot;GenServer&quot; &quot;call&quot;

cast_ : Name -&gt; Action -&gt; a
cast_ = ffi &quot;GenServer&quot; &quot;cast&quot;</code></pre>
<p><code>Todos</code> と削除された <code>Todo</code> も含めた総数を表した <code>Int</code> を持った <code>State</code> 型を状態として GenServer に保持して欲しい． 出力した Elixir コードにだけモジュールをインポートさせたり，うまく型付けできない関数を Elixir コードに張り付けるには，コメントアウト <code>{- ex ... -}</code> 使う． この中に書いた Elixir コードはそのまま出力先に貼り付けられる(濫用厳禁！)．</p>
<p>Elixir モジュールの関数を呼び出すには <code>Elchemy</code> モジュールにある <code>ffi</code> 関数を使う． ただし，<code>ffi</code> 関数をファーストクラスには扱えない． 次のようなエラーが出る．</p>
<pre><code>Ffi inside function body is deprecated since Elchemy 0.3</code></pre>
<p><code>Name</code> 型や <code>Action</code> 型は Elchemy が代数的データ型をアトムとタプルに変換することと，GenServer の使い方を知っていれば意図するところが分かるだろう． 逆にそれらを知っていなければ読みとれないと思う…</p>
<h2 id="section-1"></h2>
<p>コントローラーから呼ばれるインターフェースは <code>getState</code> と <code>setState</code> を用いることで簡単に書けた．</p>
<pre class="elm"><code>gets : List Todo
gets = Dict.values (.todos getState)

add : Todo -&gt; List Todo
add todo =
    let
        { todos, cnt } = getState
        newId   = toString cnt
        newTodo = { todo | id = newId }
        state   = { todos = Dict.insert newId newTodo todos, cnt = cnt + 1 }
    in
    setState state
        |&gt; .todos
        |&gt; Dict.values

update : Todo -&gt; List Todo
update todo =
    let
        { todos, cnt } = getState
        state = { todos = Dict.update todo.id (Maybe.map &lt;| always todo) todos, cnt = cnt }
    in
    setState state
        |&gt; .todos
        |&gt; Dict.values

remove : String -&gt; List Todo
remove todoId =
    let
        { todos, cnt } =
            getState
        state =
            { todos = Dict.remove todoId todos, cnt = cnt }
    in
    setState state
        |&gt; .todos
        |&gt; Dict.values</code></pre>
<p>コントローラーの <code>...</code> を書き換えてやれば完成だ．</p>
<div class="sourceCode" id="cb21"><pre class="sourceCode elixir"><code class="sourceCode elixir"><a class="sourceLine" id="cb21-1" data-line-number="1">  <span class="kw">def</span> index(conn, _params), <span class="kw">do</span>: render(conn, <span class="st">&quot;todos.json&quot;</span>, %{<span class="va">todos:</span> <span class="cn">Todo</span><span class="op">.</span>gets()})</a>
<a class="sourceLine" id="cb21-2" data-line-number="2">  <span class="kw">def</span> create(conn, params), <span class="kw">do</span>: render(conn, <span class="st">&quot;todos.json&quot;</span>, %{<span class="va">todos:</span> <span class="cn">Todo</span><span class="op">.</span>add(<span class="cn">Todo</span><span class="op">.</span>gen(params))})</a>
<a class="sourceLine" id="cb21-3" data-line-number="3">  <span class="kw">def</span> update(conn, params), <span class="kw">do</span>: render(conn, <span class="st">&quot;todos.json&quot;</span>, %{<span class="va">todos:</span> <span class="cn">Todo</span><span class="op">.</span>update(<span class="cn">Todo</span><span class="op">.</span>gen(params))})</a>
<a class="sourceLine" id="cb21-4" data-line-number="4">  <span class="kw">def</span> delete(conn, %{<span class="st">&quot;id&quot;</span> <span class="op">=&gt;</span> id}), <span class="kw">do</span>: render(conn, <span class="st">&quot;todos.json&quot;</span>, %{<span class="va">todos:</span> <span class="cn">Todo</span><span class="op">.</span>remove(id)})</a>
<a class="sourceLine" id="cb21-5" data-line-number="5"><span class="kw">end</span></a></code></pre></div>
<p>ちなみに出力された Elixir コードは<a href="https://gitlab.com/matsubara0507/elchemy_todo_app/blob/443777cee3e8435ee15f04ada6437e41e3af064b/lib/data/todo.elchemy.ex">ココ</a>と<a href="https://gitlab.com/matsubara0507/elchemy_todo_app/blob/443777cee3e8435ee15f04ada6437e41e3af064b/lib/models/todo.elchemy.ex">ココ</a>です． 興味がある人は見てください．</p>
<h3 id="elm-brunch">Elm Brunch</h3>
<p>Brunch 設定が難しかったので，本質的には Elchemy と関係ないけど残しておく．</p>
<p>Phoenix 1.3 系ではトップレベルに <code>assets</code> というディレクトリがあり，HTML/JS/CSS/画像 のような静的ファイルはここに置いておく． Brunch を使って複数の JS や CSS を合わせることが出来る． <a href="https://github.com/madsflensted/elm-brunch">elm-brunch</a> を使うことで Elm を JS にコンパイルしてくれる．</p>
<p>branch-config に次のような設定を書き加えてあげる． Elm のフロントコードは <code>lib/web/elm</code> に置いてある．</p>
<div class="sourceCode" id="cb22"><pre class="sourceCode javascript"><code class="sourceCode javascript"><a class="sourceLine" id="cb22-1" data-line-number="1"><span class="va">exports</span>.<span class="at">config</span> <span class="op">=</span> <span class="op">{</span></a>
<a class="sourceLine" id="cb22-2" data-line-number="2">  ...</a>
<a class="sourceLine" id="cb22-3" data-line-number="3">  <span class="dt">paths</span><span class="op">:</span> <span class="op">{</span></a>
<a class="sourceLine" id="cb22-4" data-line-number="4">    <span class="dt">watched</span><span class="op">:</span> [<span class="st">&quot;static&quot;</span><span class="op">,</span> <span class="st">&quot;css&quot;</span><span class="op">,</span> <span class="st">&quot;js&quot;</span><span class="op">,</span> <span class="st">&quot;vendor&quot;</span><span class="op">,</span> <span class="st">&quot;../lib/web/elm&quot;</span>]<span class="op">,</span></a>
<a class="sourceLine" id="cb22-5" data-line-number="5">    <span class="dt">public</span><span class="op">:</span> <span class="st">&quot;../priv/static&quot;</span></a>
<a class="sourceLine" id="cb22-6" data-line-number="6">  <span class="op">},</span></a>
<a class="sourceLine" id="cb22-7" data-line-number="7"></a>
<a class="sourceLine" id="cb22-8" data-line-number="8">  <span class="dt">plugins</span><span class="op">:</span> <span class="op">{</span></a>
<a class="sourceLine" id="cb22-9" data-line-number="9">    <span class="dt">elmBrunch</span><span class="op">:</span> <span class="op">{</span></a>
<a class="sourceLine" id="cb22-10" data-line-number="10">      <span class="dt">elmFolder</span><span class="op">:</span> <span class="st">&quot;../lib/web/elm&quot;</span><span class="op">,</span></a>
<a class="sourceLine" id="cb22-11" data-line-number="11">      <span class="dt">mainModules</span><span class="op">:</span> [<span class="st">&quot;Main.elm&quot;</span>]<span class="op">,</span></a>
<a class="sourceLine" id="cb22-12" data-line-number="12">      <span class="dt">outputFolder</span><span class="op">:</span> <span class="st">&quot;vendor&quot;</span></a>
<a class="sourceLine" id="cb22-13" data-line-number="13">    <span class="op">},</span></a>
<a class="sourceLine" id="cb22-14" data-line-number="14">  ...</a>
<a class="sourceLine" id="cb22-15" data-line-number="15">  <span class="op">}</span></a>
<a class="sourceLine" id="cb22-16" data-line-number="16">  ...</a>
<a class="sourceLine" id="cb22-17" data-line-number="17"><span class="op">}</span></a></code></pre></div>
<h3 id="フロント部分">フロント部分</h3>
<p>ほんの少しだがコードを再利用できる． API クライアントは以下のようになる．</p>
<pre class="elm"><code>module TodoAPI exposing (..)

import Data.Todo exposing (Todo)
import Http

getTodos : Http.Request (List Todo)
getTodos =
    Http.request
        { method =
            &quot;GET&quot;
        , headers =
            []
        , url =
            String.join &quot;/&quot;
                [ baseUrl
                , &quot;todos&quot;
                ]
        , body =
            Http.emptyBody
        , expect =
            Http.expectJson (list decodeTodo)
        , timeout =
            Nothing
        , withCredentials =
            False
        }</code></pre>
<p>ホントはこの当たりも Elchemy を使って生成できるとよいのだが… もしかして <a href="https://github.com/saschatimme/elm-phoenix">elm-phoenix</a> なるものを使えばよかったのかな？ また，The Elm Architecture 部分は長いので割愛．</p>
<h2 id="section-2"></h2>
<p>ホントは assets 回りが他にもたくさんあるが,本質的な部分はこれで完成． あとはモロモロインストールして <code>mix phx.server</code> とすれば動作するはずだ．</p>
<h3 id="感想">感想</h3>
<ul>
<li><strong>うれしみ</strong>
<ul>
<li>静的検査は神</li>
<li>フロントとコードを共有できる</li>
</ul></li>
<li><strong>つらみ</strong>
<ul>
<li>Phoenix のいくつかは型付けできない
<ul>
<li>ルーティングの引数</li>
<li>へテロリストのようなモノ</li>
<li>結局ここで良く分からんエラーに…</li>
</ul></li>
<li>コンパイルが遅い</li>
</ul></li>
</ul>
<h2 id="おしまい">おしまい</h2>
<p>今度は処理系の中身でも追ってみようかな．</p>
  </div>
</div>
</article>
]]></summary>
</entry>
<entry>
    <title>Elchemy 入門 : その１</title>
    <link href="https://matsubara0507.github.io/posts/2018-06-15-introduce-elchemy-part1.html" />
    <id>https://matsubara0507.github.io/posts/2018-06-15-introduce-elchemy-part1.html</id>
    <published>2018-06-15T00:00:00Z</published>
    <updated>2018-06-15T00:00:00Z</updated>
    <summary type="html"><![CDATA[<article class="post card" itemscope itemtype="http://schema.org/BlogPosting">
 <div class="card-content">
  <header class="post-header">
    <h1 class="post-title" itemprop="name headline">Elchemy 入門 : その１</h1>
    <p class="post-meta">
      <time datetime="2018-06-15" itemprop="datePublished">
        Jun 15, 2018
      </time>
      
      
      <div class="tags">
          <i class="fa fa-tags"></i> <a href="/tags/Elchemy.html">Elchemy</a> <a href="/tags/Elm.html">Elm</a> <a href="/tags/Elixir.html">Elixir</a> <a href="/tags/Haskell.html">Haskell</a>
      </div>
      
    </p>
  </header>

  <div class="post-content" itemprop="articleBody">
    <p>Elm から Elixir のトランスパイラ，<a href="https://github.com/wende/elmchemy">Elchemy</a> についてイロイロと調べたのでまとめていきます． 今回は</p>
<ul>
<li><a href="https://github.com/wende/elchemy/blob/9184d758dc1d5d5d3209302f9742c11fe01aa92c/README.md">README</a> の意訳</li>
<li>Dockerイメージ作成</li>
<li>Tutorial その１をやってみた</li>
</ul>
<p>の3本立てです． ちなみに，現在のバージョンは 0.7.4 です．</p>
<h2 id="readme-意訳">README 意訳</h2>
<p>Elchemy は，Elixir の強力なエコシステムと Elm の型安全によって，より簡潔に高速に高品質で型安全なコードを記述するために作られた処理系です．</p>
<ul>
<li><a href="http://elchemy-live.herokuapp.com">Elchemy のオンライン環境</a></li>
<li><a href="https://wende.gitbooks.io/elchemy/content/">Elchemy の公式ドキュメント</a></li>
<li><a href="https://hackernoon.com/elmchemy-write-type-safe-elixir-code-with-elms-syntax-part-1-introduction-8968b76d721d">Elchemy のチュートリアル</a> (今のところ Part1 と Part2 がある)</li>
</ul>
<p>なにか質問がある場合は <a href="https://github.com/wende/elchemy/labels/Q%26A"><code>Q&amp;A</code> ラベルを付けて Issue を書いて</a>，だそうだ．</p>
<h3 id="features">Features</h3>
<ul>
<li><strong>型推論:</strong> 強力な型推論によって型注釈を付けることはめったにない． コンパイラによって全て検査される．</li>
<li><strong>簡単で型安全な呼び出し:</strong> 余計なボイラープレートなしに Elixir/Erlang のプログラムを呼び出すことが出来る． Elixir の typespec に基づいて可能な限り徹底的に型安全の観点から全ての呼び出しを検査する．</li>
<li><strong>Elm と Elixir のいいとこどり:</strong> Elchemy は Elm の型安全性と強力な型推論，素晴らしい表現力を継承し，Elixir の Doc-test とツール群，そして BEAM プラットフォームを継承している．</li>
<li><strong>ほとんどないランタイムエラー:</strong> Elchemy の型システムは <strong>ほぼ全てのランタイムエラーを排除する</strong> ． エッジケースが少なくなることで，Elchemy のコードそのものは安全になる． ランタイムエラーが発生した場合，おそらく Elixir のところが起こしているのだろう．</li>
<li><strong>美しくて可読性の高い出力:</strong> 生成されたコードは慣習的で効率的で元のコードが無くとも読みやすく分析可能である．</li>
</ul>
<h3 id="faq">FAQ</h3>
<h4 id="どういう人にお勧めか">どういう人にお勧めか？</h4>
<ul>
<li>型が好きな人</li>
<li>実行時エラーよりコンパイルエラーの方が好みな人</li>
<li><code>defp add(a, b), do: b + c</code> より <code>add b c = b + c</code> な書き方の方が好みな人</li>
<li>カリー化が好きな人</li>
<li>さっさと失敗させるより全て失敗しない方が賢いと思う人</li>
</ul>
<h4 id="どういう人にお勧めじゃないか">どういう人にお勧めじゃないか？</h4>
<ul>
<li>もしあなたのプロジェクトが徹底的にテストされたライブラリに依存しておりかつ，あなたが 0 から始まるバージョンを嫌う場合</li>
<li>モナドを学ぶことで口ひげが伸び視力が弱くなることを恐れる場合</li>
</ul>
<h4 id="既にある-elixir-プロジェクトを置き換えるのは可能か">既にある Elixir プロジェクトを置き換えるのは可能か？</h4>
<p>可能です． しかし，ナイスでダンディーなコンパイルツールは開発中です．</p>
<h4 id="上司に-elchemy-に現を抜かしていることがばれるだろうか">上司に Elchemy に現を抜かしていることがばれるだろうか？</h4>
<p>Elchemy の出力はコードの可読性を第一級市民として扱っている． コードは適切にインデントされ，コメントは省略されず，できるだけ最適化されている(例えば，case 節は関数のオーバーロードになる)．</p>
<h4 id="elchemy-1.0.0-はまだ">Elchemy 1.0.0 はまだ？</h4>
<p>終わったらね．</p>
<h4 id="コントリビュートしてもいい">コントリビュートしてもいい？</h4>
<p>絶対にしてください．</p>
<h4 id="型はどのように表される">型はどのように表される？</h4>
<p>Elchemy の全ての値コンストラクタはスネークケースのアトムとして表現され，コンストラクタの引数はタプルで表わされる． つまり，Elchemy で <code>MyType 42 &quot;Forty two&quot; Error</code> という値は <code>{:my_type, 42, &quot;Forty two&quot;, :error}</code> という Elixir の値となる．</p>
<p>(Type constructor と書いてあるが正しくは Data constructor あるいは value constructor のはずで，Type application も間違いだと思われる)</p>
<h4 id="elm-の既存のライブラリを-elchemy-で使えるの">Elm の既存のライブラリを Elchemy で使えるの？</h4>
<p>Native モジュールや Port，Elm ランタイムを使わない限りは，それらを安全にインポートして使うことが出来る．</p>
<h4 id="elixir-の既存のライブラリを-elchemy-で使えるの">Elixir の既存のライブラリを Elchemy で使えるの？</h4>
<p>使える． 任意のモジュールの任意の関数を FFI 呼び出しすることが出来る． Elixir モジュール，Erlang モジュール，あるいはマクロであってしても自身の Elchemy コードに含むことが出来る． FFI 呼び出しは Elchemy 内で特別扱いされる． そして，<code>@spec</code> に基づいた型の解析を行うテストが生成されるため，Elixir コードの型安全性を損なうことは無い． 可読性を向上させるためにも FFI 呼び出しは可能な限り避け，常にドキュメント化と <code>doctest</code> をすることをお勧めする．</p>
<h4 id="テストのような-elixir-のマクロは使えるの">テストのような Elixir のマクロは使えるの？</h4>
<p>残念ながら，<code>do...end</code> ブロックのような任意のマクロを書くことはまだできない． 替わりとして，任意の関数に対して次のような Elixir のインラインコードを書くことが出来る．</p>
<pre class="elm"><code>{- ex
  code_here
-}</code></pre>
<p>しかし，それは最後の手段であり，乱用すべきではない．</p>
<h4 id="elchemy-の-.elm-ファイルをコンパイルするのに-elm-処理系をインストールする必要がある">Elchemy の <code>.elm</code> ファイルをコンパイルするのに Elm 処理系をインストールする必要がある？</h4>
<p>(なんとなく解答的に Elixir 処理系だけで完結できないの？という意味っぽい)</p>
<p>あなたは Elm のようなコードを書いて Elixir のコードを生成したいのに， Elixir コードの生成を Elixir コードを書いて作りたいですか？</p>
<h4 id="elchemy-プロジェクト">Elchemy プロジェクト</h4>
<p>作者はこの Elchemy プロジェクトそのものを可能な限り Elm で構築したいらしい． <a href="https://github.com/wende/elchemy#maturity-of-the-project">README にはその達成度が書かれている</a>． 処理系そのものは，ほとんど Elm になっているようだ(結果として世にも珍しい Elm で書かれたコンパイラが出来ている)． エフェクトや ErlangVM 回りが厳しいらしい．</p>
<h2 id="dockerイメージ作成">Dockerイメージ作成</h2>
<p>ココからが本題．</p>
<p>新しい言語を軽く試すのに最適なのはやはり Docker だ． Elchemy の Docker イメージは見当たらなかったので作った．</p>
<ul>
<li><a href="https://hub.docker.com/r/matsubara0507/elchemy">matsubara0507/elchemy - Docker Hub</a></li>
</ul>
<h3 id="できるまで">できるまで</h3>
<p>本家の README を読むとわかるように Elchemy でビルドするのに必要なモノは以下の4つ．</p>
<ul>
<li>Node (npm)</li>
<li>Elixir (ErlangVM)</li>
<li>Elm</li>
<li>elm-github-install</li>
</ul>
<p>これらのうち，もっともめんどくさいのは Elixir もとい ErlangVM だと思う． なので base イメージを Elixir にし，ひとつずつ入れていった．</p>
<p>base イメージにした <a href="https://hub.docker.com/_/elixir/">Elixir の Docker イメージは公式のモノ</a>を使う． <a href="https://github.com/erlang/docker-erlang-otp/blob/99ab1e150c3708ce81bc08073cf5793ef67c6a1c/20/Dockerfile#L1">OSは Debian9 だ</a>．</p>
<p>Debian への Node のインストールには以下の記事を参考にした．</p>
<ul>
<li><a href="http://atomiyama.com/linux/page/debian-9-2-node-npm/">debian9.2にNode.jsとnpmをインストールする｜atominux</a></li>
</ul>
<p>こんな感じ</p>
<div class="sourceCode" id="cb2"><pre class="sourceCode dockerfile"><code class="sourceCode dockerfile"><a class="sourceLine" id="cb2-1" data-line-number="1"><span class="kw">RUN</span> curl -sL https://deb.nodesource.com/setup_${NODE_VERSION} | bash - \</a>
<a class="sourceLine" id="cb2-2" data-line-number="2">  &amp;&amp; apt-get update &amp;&amp; apt-get install -y nodejs \</a>
<a class="sourceLine" id="cb2-3" data-line-number="3">  &amp;&amp; apt-get clean \</a>
<a class="sourceLine" id="cb2-4" data-line-number="4">  &amp;&amp; rm -rf /var/lib/apt/lists/*</a></code></pre></div>
<p>後は簡単で Elm，elm-github-install，Elchemy は npm からインストールできる． ただし，Elm と elm-github-install には <code>--unsafe-perm=true --allow-root</code> という<a href="https://github.com/gdotdesign/elm-github-install/issues/21#issuecomment-332827661">オプションを付けないといけない</a>．</p>
<div class="sourceCode" id="cb3"><pre class="sourceCode dockerfile"><code class="sourceCode dockerfile"><a class="sourceLine" id="cb3-1" data-line-number="1"><span class="kw">RUN</span> npm i -g elm@${ELM_VERSION} --unsafe-perm=true --allow-root</a>
<a class="sourceLine" id="cb3-2" data-line-number="2"><span class="kw">RUN</span> npm i -g elm-github-install@${ELM_GITHUB_INSTALL_VERSION} --unsafe-perm=true --allow-root</a>
<a class="sourceLine" id="cb3-3" data-line-number="3"><span class="kw">RUN</span> npm i -g elchemy@${ELCHEMY_VERSION}</a></code></pre></div>
<h3 id="auto-build">Auto Build</h3>
<p>Elchemy のリリースを眺めてると想像より開発スピードが速かったので，Elchemy の更新を観測して自動ビルドしてくれる仕組みを作ることにした． シェル芸を駆使すればなんとかなりそうだったが，サクッと Haskell 芸をかまして CLI を作った．</p>
<ul>
<li><a href="https://github.com/matsubara0507/dockwright">matsubara0507/dockwright - GitHub</a></li>
</ul>
<p>(船大工が <code>shipwright</code> なので Dockerfile 大工ってことで <code>dockwright</code>)</p>
<p>以下のような設定を書いておくと <code>dockwright</code> ってコマンドで GitHub の <code>release</code> API を叩いてリリースタグを取ってきてくれる． それを Docker 内の環境変数としてテンプレートに書き込む．</p>
<div class="sourceCode" id="cb4"><pre class="sourceCode yaml"><code class="sourceCode yaml"><a class="sourceLine" id="cb4-1" data-line-number="1"><span class="fu">env:</span></a>
<a class="sourceLine" id="cb4-2" data-line-number="2">  <span class="fu">elchemy_version:</span></a>
<a class="sourceLine" id="cb4-3" data-line-number="3">    <span class="fu">github:</span></a>
<a class="sourceLine" id="cb4-4" data-line-number="4">      <span class="fu">repo:</span><span class="at"> wende/elchemy</span></a>
<a class="sourceLine" id="cb4-5" data-line-number="5">      <span class="fu">hook:</span><span class="at"> release</span></a></code></pre></div>
<p>あとは git diff で更新をみて更新があればコミットする(コミットさえすれば Docker Hub が自動ビルドしてくれる)． 定期実行は例の如く TravisCI で回す．</p>
<h2 id="tutorial-そのをやってみた">Tutorial その１をやってみた</h2>
<p>以下の記事をやってみる．</p>
<ul>
<li><a href="https://hackernoon.com/elmchemy-write-type-safe-elixir-code-with-elms-syntax-part-1-introduction-8968b76d721d">Elmchemy — Write type-safe Elixir code with Elm’s syntax — part 1 — Introduction</a></li>
</ul>
<p>まずは <code>article_example_elchemy</code> というプロジェクトを作る． 記事内では <code>mix new</code> をして <code>elchemy init</code> をしろと書いてあるが，最新の Elchemy では <code>elchemy new</code> をすることで一気にやってくれる．</p>
<pre><code>$ elchemy new article_example_elchemy</code></pre>
<p>Elchemy をコンパイルするためには，<code>mix.exs</code> を次のように<a href="https://wende.gitbooks.io/elchemy/content/INSTALLATION.html">書き換える必要がある</a>．</p>
<div class="sourceCode" id="cb6"><pre class="sourceCode elixir"><code class="sourceCode elixir"><a class="sourceLine" id="cb6-1" data-line-number="1"><span class="kw">defmodule</span> <span class="cn">MyProject</span><span class="op">.</span><span class="cn">Mixfile</span> <span class="kw">do</span></a>
<a class="sourceLine" id="cb6-2" data-line-number="2">  <span class="im">use</span> <span class="cn">Mix</span><span class="op">.</span><span class="cn">Project</span></a>
<a class="sourceLine" id="cb6-3" data-line-number="3"></a>
<a class="sourceLine" id="cb6-4" data-line-number="4">  <span class="kw">def</span> project <span class="kw">do</span></a>
<a class="sourceLine" id="cb6-5" data-line-number="5">    [</a>
<a class="sourceLine" id="cb6-6" data-line-number="6">      <span class="va">app:</span> <span class="va">:my_project</span>,</a>
<a class="sourceLine" id="cb6-7" data-line-number="7">      <span class="va">version:</span> <span class="st">&quot;0.1.0&quot;</span>,</a>
<a class="sourceLine" id="cb6-8" data-line-number="8">      <span class="va">elixir:</span> <span class="st">&quot;~&gt; 1.5&quot;</span>,</a>
<a class="sourceLine" id="cb6-9" data-line-number="9">      <span class="va">start_permanent:</span> <span class="cn">Mix</span><span class="op">.</span>env <span class="op">==</span> <span class="va">:prod</span>,</a>
<a class="sourceLine" id="cb6-10" data-line-number="10">      <span class="va">deps:</span> deps()</a>
<a class="sourceLine" id="cb6-11" data-line-number="11">    ] <span class="op">|&gt;</span> <span class="cn">Code</span><span class="op">.</span>eval_file(<span class="st">&quot;elchemy.exs&quot;</span>)<span class="op">.</span>init <span class="co"># ココ!</span></a>
<a class="sourceLine" id="cb6-12" data-line-number="12">  <span class="kw">end</span></a>
<a class="sourceLine" id="cb6-13" data-line-number="13">  <span class="op">...</span></a></code></pre></div>
<p><code>|&gt; Code.eval_file(&quot;elchemy.exs&quot;).ini</code> の部分を書き加えている．</p>
<h3 id="ディレクトリ構成">ディレクトリ構成</h3>
<p><code>elchemy new</code> した結果はこんな感じ(バージョンによっては違うかもしれない)．</p>
<pre><code>projrct_name
  |- .elchemy.exs
  |- .formatter.exs
  |- .gitignore
  |- README.md
  |- config
  |   \- config.exs
  |- elm
  |   \- Hello.elm
  |- elm-package.json
  |- lib
  |   \- project_name.ex
  |- mix.exs
  \- test
      |- elchemy_test.exs
      |- project_name_test.exs
      \- test_helper.exs</code></pre>
<p><code>.elchemy.exs</code> は <code>mix</code> コマンドを Elchemy で上書きするための <code>mix</code> 設定ファイルで，残りは Elixir と Elm のプロジェクトファイルが混ざっている． ちなみに <code>.formatter.exs</code> は Elixir 1.6 で追加された Elixir のフォーマッターの設定ファイルだ．</p>
<h3 id="関数を定義してみる">関数を定義してみる</h3>
<p>試しに，総和を求める <code>sum</code> 関数を書いてみる． <code>elm/Hello.elm</code> に書き加えるとして，まずはユニットテストを <code>test\elchemy_test.exs</code> に Elixir の文脈で書き加えてみる．</p>
<div class="sourceCode" id="cb8"><pre class="sourceCode elixir"><code class="sourceCode elixir"><a class="sourceLine" id="cb8-1" data-line-number="1"><span class="kw">defmodule</span> <span class="cn">ElchemyTest</span> <span class="kw">do</span></a>
<a class="sourceLine" id="cb8-2" data-line-number="2">  <span class="im">use</span> <span class="cn">ExUnit</span><span class="op">.</span><span class="cn">Case</span></a>
<a class="sourceLine" id="cb8-3" data-line-number="3">  <span class="im">use</span> <span class="cn">Elchemy</span></a>
<a class="sourceLine" id="cb8-4" data-line-number="4">  doctest <span class="cn">Hello</span></a>
<a class="sourceLine" id="cb8-5" data-line-number="5"></a>
<a class="sourceLine" id="cb8-6" data-line-number="6">  test <span class="st">&quot;Hello&quot;</span> <span class="kw">do</span></a>
<a class="sourceLine" id="cb8-7" data-line-number="7">    assert <span class="cn">Hello</span><span class="op">.</span>hello() <span class="op">==</span> <span class="st">&quot;world!&quot;</span></a>
<a class="sourceLine" id="cb8-8" data-line-number="8">  <span class="kw">end</span></a>
<a class="sourceLine" id="cb8-9" data-line-number="9"></a>
<a class="sourceLine" id="cb8-10" data-line-number="10">  test <span class="st">&quot;Sum of lists&quot;</span> <span class="kw">do</span></a>
<a class="sourceLine" id="cb8-11" data-line-number="11">     assert <span class="cn">Hello</span><span class="op">.</span>sum([]) <span class="op">==</span> <span class="dv">0</span></a>
<a class="sourceLine" id="cb8-12" data-line-number="12">     assert <span class="cn">Hello</span><span class="op">.</span>sum([<span class="dv">2</span>]) <span class="op">==</span> <span class="dv">2</span></a>
<a class="sourceLine" id="cb8-13" data-line-number="13">     assert <span class="cn">Hello</span><span class="op">.</span>sum([<span class="dv">1</span>, <span class="dv">2</span>, <span class="dv">3</span>, <span class="dv">-1</span>, <span class="dv">-2</span>, <span class="dv">-3</span>]) <span class="op">==</span> <span class="dv">0</span></a>
<a class="sourceLine" id="cb8-14" data-line-number="14">  <span class="kw">end</span></a>
<a class="sourceLine" id="cb8-15" data-line-number="15"><span class="kw">end</span></a></code></pre></div>
<p>次に <code>elm/Hello.elm</code> に以下の関数を書き加える．</p>
<pre class="elm"><code>sum : List a -&gt; Int
sum list =
    case list of
        first :: rest -&gt;
            first + sum rest

        [] -&gt;
            0</code></pre>
<p>とりあえずビルドしてみる．</p>
<pre><code>$ mix test
warning: redefining module ElchemyInit (current version defined in memory)
  elchemy.exs:1

==&gt; elchemy
Compiling 24 files (.ex)
warning: unused alias XMaybe
  lib/Elchemy/XRegex.elchemy.ex:28

warning: unused import Elchemy.XBasics
  lib/Elchemy/XChar.elchemy.ex:25

warning: unused import Elchemy.XBasics
  lib/Elchemy/XBitwise.elchemy.ex:6

warning: unused import Elchemy.Macros
  lib/Elchemy/Plugins/Ex_unit.elchemy.ex:7

warning: unused import Elchemy.Macros
  lib/Elchemy/Tests/Ex_unit_test.elchemy.ex:7

Generated elchemy app
==&gt; article_example_elchemy
/usr/bin/elchemy
-- Copying Elixir native files --
-- Compiling Elm files --
----------
Type Checking elm/Hello.elm
-- TYPE MISMATCH ------------------------------------------------- elm/Hello.elm

The left argument of (+) is causing a type mismatch.

21|             first + sum rest
                ^^^^^
(+) is expecting the left argument to be a:

    number

But the left argument is:

    a

Hint: Your type annotation uses type variable `a` which means any type of value
can flow through. Your code is saying it CANNOT be anything though! Maybe change
your type annotation to be more specific? Maybe the code has a problem? More at:
&lt;https://github.com/elm-lang/elm-compiler/blob/0.18.0/hints/type-annotations.md&gt;

Detected errors in 1 module.
Type Check failed
** (Mix) Elchemy failed the compilation with an error</code></pre>
<p>いろいろ出ているが重要なのは <code>The left argument of (+) is causing a type mismatch.</code> の部分． 型検査した結果，型が合わなかったのだ． 念のため型検査器の言い分を補足しておくと，<code>sum</code> 関数の引数として <code>List a</code> 型の値 <code>list</code> の要素である <code>first</code> は <code>a</code> 型と推論されるが，加算 <code>(+)</code> は <code>number</code> 型じゃないといけない，ということだ(<code>number</code> 型は加算や乗算が実装されている多相型)．</p>
<p>言われた通りに変えてみよう．</p>
<pre class="elm"><code>sum : List number -&gt; Int
sum list = ...</code></pre>
<p>ビルドする．</p>
<pre><code>$ mix test
...
Type Checking elm/Hello.elm
-- TYPE MISMATCH ------------------------------------------------- elm/Hello.elm

The right side of (+) is causing a type mismatch.

21|             first + sum rest
                        ^^^^^^^^
(+) is expecting the right side to be a:

    number

But the right side is:

    Int

Hint: Your type annotation uses type variable `number` which means any type of
value can flow through. Your code is saying it CANNOT be anything though! Maybe
change your type annotation to be more specific? Maybe the code has a problem?
More at:
&lt;https://github.com/elm-lang/elm-compiler/blob/0.18.0/hints/type-annotations.md&gt;

Hint: With operators like (+) I always check the left side first. If it seems
fine, I assume it is correct and check the right side. So the problem may be in
how the left and right arguments interact.

Detected errors in 1 module.
Type Check failed
** (Mix) Elchemy failed the compilation with an error</code></pre>
<p><code>(+) is expecting the right side to be a</code> というエラーメッセージに変わった． これは <code>sum</code> 関数の返り値の型が <code>Int</code> なので <code>sum rest</code> の型は <code>Int</code> と推論されたが，<code>first</code> の型が <code>number</code> なので <code>(+)</code> 演算子の左右の型が合わない，ということだ． なので， <code>sum : List Int -&gt; Int</code> とすると無事ビルドが通る．</p>
<h3 id="変換された-elixir-コード">変換された Elixir コード</h3>
<p>ちなみに，次のような Elixir コードに変換されている．</p>
<div class="sourceCode" id="cb13"><pre class="sourceCode elixir"><code class="sourceCode elixir"><a class="sourceLine" id="cb13-1" data-line-number="1"><span class="kw">defmodule</span> <span class="cn">Hello</span> <span class="kw">do</span></a>
<a class="sourceLine" id="cb13-2" data-line-number="2">  <span class="im">use</span> <span class="cn">Elchemy</span></a>
<a class="sourceLine" id="cb13-3" data-line-number="3">  <span class="op">...</span></a>
<a class="sourceLine" id="cb13-4" data-line-number="4">  <span class="ot">@spec</span> sum(list(integer)) :: integer</a>
<a class="sourceLine" id="cb13-5" data-line-number="5">  curry sum<span class="op">/</span><span class="dv">1</span></a>
<a class="sourceLine" id="cb13-6" data-line-number="6">  <span class="kw">def</span> sum(list) <span class="kw">do</span></a>
<a class="sourceLine" id="cb13-7" data-line-number="7">    <span class="kw">case</span> list <span class="kw">do</span></a>
<a class="sourceLine" id="cb13-8" data-line-number="8">      [first <span class="op">|</span> rest] <span class="op">-&gt;</span></a>
<a class="sourceLine" id="cb13-9" data-line-number="9">        (first <span class="op">+</span> sum(rest))</a>
<a class="sourceLine" id="cb13-10" data-line-number="10">      [] <span class="op">-&gt;</span></a>
<a class="sourceLine" id="cb13-11" data-line-number="11">        <span class="dv">0</span></a>
<a class="sourceLine" id="cb13-12" data-line-number="12">    <span class="kw">end</span></a>
<a class="sourceLine" id="cb13-13" data-line-number="13">  <span class="kw">end</span></a>
<a class="sourceLine" id="cb13-14" data-line-number="14"><span class="kw">end</span></a></code></pre></div>
<h3 id="doctest">doctest</h3>
<p>また，次のように書くことで doctest も変換してくれる．</p>
<pre class="elm"><code>{-| Returns a sum of every integer int the function

    sum [1,2,3] == 6
    sum [10] == 10
    sum [] == 0

-}
sum : List Int -&gt; Int
sum list = ...</code></pre>
<p>変換先はこうだ．</p>
<div class="sourceCode" id="cb15"><pre class="sourceCode elixir"><code class="sourceCode elixir"><a class="sourceLine" id="cb15-1" data-line-number="1">  <span class="ot">@doc &quot;&quot;&quot;</span></a>
<a class="sourceLine" id="cb15-2" data-line-number="2"><span class="co">  Returns a sum of every integer int the function</span></a>
<a class="sourceLine" id="cb15-3" data-line-number="3"></a>
<a class="sourceLine" id="cb15-4" data-line-number="4"><span class="co">      iex&gt; import Hello</span></a>
<a class="sourceLine" id="cb15-5" data-line-number="5"><span class="co">      iex&gt; sum([1, 2, 3])</span></a>
<a class="sourceLine" id="cb15-6" data-line-number="6"><span class="co">      6</span></a>
<a class="sourceLine" id="cb15-7" data-line-number="7"></a>
<a class="sourceLine" id="cb15-8" data-line-number="8"><span class="co">      iex&gt; import Hello</span></a>
<a class="sourceLine" id="cb15-9" data-line-number="9"><span class="co">      iex&gt; sum([10])</span></a>
<a class="sourceLine" id="cb15-10" data-line-number="10"><span class="co">      10</span></a>
<a class="sourceLine" id="cb15-11" data-line-number="11"></a>
<a class="sourceLine" id="cb15-12" data-line-number="12"><span class="co">      iex&gt; import Hello</span></a>
<a class="sourceLine" id="cb15-13" data-line-number="13"><span class="co">      iex&gt; sum([])</span></a>
<a class="sourceLine" id="cb15-14" data-line-number="14"><span class="co">      0</span></a>
<a class="sourceLine" id="cb15-15" data-line-number="15"></a>
<a class="sourceLine" id="cb15-16" data-line-number="16"></a>
<a class="sourceLine" id="cb15-17" data-line-number="17"><span class="co">  </span><span class="ot">&quot;&quot;&quot;</span></a>
<a class="sourceLine" id="cb15-18" data-line-number="18">  <span class="ot">@spec</span> sum(list(integer)) :: integer</a>
<a class="sourceLine" id="cb15-19" data-line-number="19">  curry sum<span class="op">/</span><span class="dv">1</span></a>
<a class="sourceLine" id="cb15-20" data-line-number="20">  <span class="kw">def</span> sum(list) <span class="kw">do</span></a>
<a class="sourceLine" id="cb15-21" data-line-number="21">    <span class="op">...</span></a></code></pre></div>
<h2 id="おしまい">おしまい</h2>
<p>次はアプリケーションを作りたい．</p>
  </div>
</div>
</article>
]]></summary>
</entry>
<entry>
    <title>Haskell で型安全に YAML ファイルをビルド時に埋め込む</title>
    <link href="https://matsubara0507.github.io/posts/2018-05-13-yaml-th.html" />
    <id>https://matsubara0507.github.io/posts/2018-05-13-yaml-th.html</id>
    <published>2018-05-13T00:00:00Z</published>
    <updated>2018-05-13T00:00:00Z</updated>
    <summary type="html"><![CDATA[<article class="post card" itemscope itemtype="http://schema.org/BlogPosting">
 <div class="card-content">
  <header class="post-header">
    <h1 class="post-title" itemprop="name headline">Haskell で型安全に YAML ファイルをビルド時に埋め込む</h1>
    <p class="post-meta">
      <time datetime="2018-05-13" itemprop="datePublished">
        May 13, 2018
      </time>
      
      
      <div class="tags">
          <i class="fa fa-tags"></i> <a href="/tags/haskell.html">haskell</a> <a href="/tags/extensible-package.html">extensible-package</a>
      </div>
      
    </p>
  </header>

  <div class="post-content" itemprop="articleBody">
    <p>ザックリ言えば「<a href="https://ryota-ka.hatenablog.com/entry/2018/02/14/103000">Template Haskell でコード中に JSON を埋め込んだりコンパイル時にファイルから型安全に読み込んだりする - ryota-ka’s blog</a>」という記事の YAML 版です．</p>
<p>ただし，ryota さんの記事では Template Haskell を解説しながら JSON を読み込む関数を定義していますが， YAML 版は <a href="https://hackage.haskell.org/package/yaml">yaml</a> パッケージに同様の関数が既にあるので特に解説はしません． あくまでも Haskell の型システムとメタプログラミングを感じてもらえたらなぁと．</p>
<h2 id="section"></h2>
<p>ソースコードは全てこの<a href="https://github.com/matsubara0507/sample-yaml-th">リポジトリ</a>にまとめてある．</p>
<h1 id="yaml-を埋め込む">YAML を埋め込む</h1>
<p>次のような設定ファイルに関する型があったとします．</p>
<div class="sourceCode" id="cb1"><pre class="sourceCode haskell"><code class="sourceCode haskell"><a class="sourceLine" id="cb1-1" data-line-number="1"><span class="kw">data</span> <span class="dt">Config</span> <span class="fu">=</span> <span class="dt">Config</span></a>
<a class="sourceLine" id="cb1-2" data-line-number="2">  {<span class="ot"> columns ::</span> <span class="dt">Int</span></a>
<a class="sourceLine" id="cb1-3" data-line-number="3">  ,<span class="ot"> languageExtensions ::</span> [<span class="dt">String</span>]</a>
<a class="sourceLine" id="cb1-4" data-line-number="4">  } <span class="kw">deriving</span> (<span class="dt">Show</span>, <span class="dt">Eq</span>)</a></code></pre></div>
<p>yaml パッケージで YAML にデコードするためには <a href="https://hackage.haskell.org/package/aeson">aeson</a> の <a href="https://hackage.haskell.org/package/aeson-1.3.1.1/docs/Data-Aeson.html#t:FromJSON"><code>FromJSON</code></a> 型クラスのインスタンスである必要がある． <code>FromJSON</code> のインスタンスに凝ってもしょうがないので，今回は <code>Generics</code> を使って適当に定義する．</p>
<div class="sourceCode" id="cb2"><pre class="sourceCode haskell"><code class="sourceCode haskell"><a class="sourceLine" id="cb2-1" data-line-number="1"><span class="ot">{-# LANGUAGE DeriveGeneric #-}</span></a>
<a class="sourceLine" id="cb2-2" data-line-number="2"><span class="kw">import</span> <span class="dt">GHC.Generics</span></a>
<a class="sourceLine" id="cb2-3" data-line-number="3"></a>
<a class="sourceLine" id="cb2-4" data-line-number="4"><span class="kw">data</span> <span class="dt">Config</span> <span class="fu">=</span> <span class="dt">Config</span></a>
<a class="sourceLine" id="cb2-5" data-line-number="5">  {<span class="ot"> columns ::</span> <span class="dt">Int</span></a>
<a class="sourceLine" id="cb2-6" data-line-number="6">  ,<span class="ot"> languageExtensions ::</span> [<span class="dt">String</span>]</a>
<a class="sourceLine" id="cb2-7" data-line-number="7">  } <span class="kw">deriving</span> (<span class="dt">Show</span>, <span class="dt">Eq</span>, <span class="dt">Generic</span>)</a>
<a class="sourceLine" id="cb2-8" data-line-number="8"></a>
<a class="sourceLine" id="cb2-9" data-line-number="9"><span class="kw">instance</span> <span class="dt">FromJSON</span> <span class="dt">Config</span></a></code></pre></div>
<p><code>Config</code> 型のデフォルト値を YAML ファイルで記述したいとする．</p>
<div class="sourceCode" id="cb3"><pre class="sourceCode yaml"><code class="sourceCode yaml"><a class="sourceLine" id="cb3-1" data-line-number="1"><span class="co"># template/.config.yaml</span></a>
<a class="sourceLine" id="cb3-2" data-line-number="2"><span class="fu">columns:</span><span class="at"> 80</span></a>
<a class="sourceLine" id="cb3-3" data-line-number="3"><span class="fu">languageExtensions:</span><span class="at"> </span><span class="kw">[]</span></a></code></pre></div>
<p>これをコンパイル時に埋め込んでかつ型検査も行いたい． そのためには Template Haskell と yaml パッケージの <a href="https://hackage.haskell.org/package/yaml-0.8.30/docs/Data-Yaml-TH.html#v:decodeFile"><code>Data.Yaml.TH.decodeFile</code></a> 関数を用いる．</p>
<div class="sourceCode" id="cb4"><pre class="sourceCode haskell"><code class="sourceCode haskell"><a class="sourceLine" id="cb4-1" data-line-number="1"><span class="ot">decodeFile ::</span> (<span class="dt">Lift</span> a, <span class="dt">FromJSON</span> a) <span class="ot">=&gt;</span> FilePath <span class="ot">-&gt;</span> <span class="dt">Q</span> (<span class="dt">TExp</span> a)</a></code></pre></div>
<p><code>TExp a</code> 型というのは型付きの <code>Exp</code> 型らしいが，ぼくはあまりよく分からないので割愛． 型を見ればわかるように，<code>Lift</code> 型クラスのインスタンスにもなってなきゃいけない． <code>DerivingLift</code> 言語拡張を使えば簡単に定義できる．</p>
<div class="sourceCode" id="cb5"><pre class="sourceCode haskell"><code class="sourceCode haskell"><a class="sourceLine" id="cb5-1" data-line-number="1"><span class="ot">{-# LANGUAGE DeriveLift #-}</span></a>
<a class="sourceLine" id="cb5-2" data-line-number="2"><span class="kw">import</span> import <span class="dt">Language.Haskell.TH.Syntax</span> <span class="co">-- template-haskell package</span></a>
<a class="sourceLine" id="cb5-3" data-line-number="3"></a>
<a class="sourceLine" id="cb5-4" data-line-number="4"><span class="kw">data</span> <span class="dt">Config</span> <span class="fu">=</span> <span class="dt">Config</span></a>
<a class="sourceLine" id="cb5-5" data-line-number="5">  {<span class="ot"> columns ::</span> <span class="dt">Int</span></a>
<a class="sourceLine" id="cb5-6" data-line-number="6">  ,<span class="ot"> languageExtensions ::</span> [<span class="dt">String</span>]</a>
<a class="sourceLine" id="cb5-7" data-line-number="7">  } <span class="kw">deriving</span> (<span class="dt">Show</span>, <span class="dt">Eq</span>, <span class="dt">Generic</span>, <span class="dt">Lift</span>)</a></code></pre></div>
<p>使い方は簡単で，次のようにすればよい．</p>
<div class="sourceCode" id="cb6"><pre class="sourceCode haskell"><code class="sourceCode haskell"><a class="sourceLine" id="cb6-1" data-line-number="1"><span class="ot">{-# LANGUAGE TemplateHaskell #-}</span></a>
<a class="sourceLine" id="cb6-2" data-line-number="2"></a>
<a class="sourceLine" id="cb6-3" data-line-number="3"><span class="ot">defaultConfig ::</span> <span class="dt">Config</span></a>
<a class="sourceLine" id="cb6-4" data-line-number="4">defaultConfig <span class="fu">=</span> <span class="fu">$$</span>(decodeFile <span class="st">&quot;./template/.config.yaml&quot;</span>)</a></code></pre></div>
<p>注意点として，Template Haskell の制約より <code>Config</code> 型の定義と <code>defaultConfig</code> 関数の定義は別ファイルに分けなければいけない．</p>
<h2 id="試す">試す</h2>
<pre><code>$ stack ghci
&gt;&gt; defaultConfig
Config {columns = 80, languageExtensions = []}</code></pre>
<p>試しに間違えてみよう</p>
<pre><code>$ cat template/.config.yaml
column: 80
languageExtensions: []
$ stack build
sample-yaml-th-0.1.0.0: build (lib)
Preprocessing library for sample-yaml-th-0.1.0.0..
Building library for sample-yaml-th-0.1.0.0..
[1 of 2] Compiling Sample.Config.Internal ( src\Sample\Config\Internal.hs, .stack work\dist\5c8418a7\build\Sample\Config\Internal.o )
[2 of 2] Compiling Sample.Config    ( src\Sample\Config.hs, .stack-work\dist\5c8418a7\build\Sample\Config.o )

C:\Users\hoge\haskell\sample-yaml-th\src\Sample\Config.hs:14:20: error:
    • Aeson exception:
Error in $: key &quot;columns&quot; not present
    • In the Template Haskell splice
        $$(Y.decodeFile &quot;./template/.config.yaml&quot;)
      In the expression: $$(Y.decodeFile &quot;./template/.config.yaml&quot;)
      In an equation for ‘defaultConfig’:
          defaultConfig = $$(Y.decodeFile &quot;./template/.config.yaml&quot;)
   |
14 | defaultConfig = $$(Y.decodeFile &quot;./template/.config.yaml&quot;)
   |                    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^</code></pre>
<h1 id="おまけ-with-extensible">おまけ : with Extensible</h1>
<p>さぁココからが本題！ <a href="https://hackage.haskell.org/package/extensible">extensible</a> という神パッケージを使ってリファクタリングをしてみよう！！</p>
<h2 id="問題点">問題点</h2>
<p>大した問題ではないんだけど</p>
<ol type="1">
<li>ファイルを分けなければいけないのが悲しい</li>
<li>YAML のキーがキャメルケース(<code>languageExtensions</code>)</li>
</ol>
<h2 id="extensible-パッケージ">extensible パッケージ</h2>
<p>言わずもがな，拡張可能なレコードやバリアントを提供するパッケージだ． (詳しくは，最近急ピッチで充実されている<a href="https://wiki.hask.moe/">攻略Wiki</a>を読むといいんじゃないんかな？)</p>
<p>例えば，さっきから使っている <code>Config</code> 型を <code>extensible</code> レコード型で書くと次のように書ける</p>
<div class="sourceCode" id="cb9"><pre class="sourceCode haskell"><code class="sourceCode haskell"><a class="sourceLine" id="cb9-1" data-line-number="1"><span class="ot">{-# LANGUAGE DataKinds     #-}</span></a>
<a class="sourceLine" id="cb9-2" data-line-number="2"><span class="ot">{-# LANGUAGE TypeOperators #-}</span></a>
<a class="sourceLine" id="cb9-3" data-line-number="3"></a>
<a class="sourceLine" id="cb9-4" data-line-number="4"><span class="kw">type</span> <span class="dt">Config</span> <span class="fu">=</span> <span class="dt">Record</span></a>
<a class="sourceLine" id="cb9-5" data-line-number="5">  <span class="ch">&#39;[ &quot;root&quot; &gt;: Text</span></a>
<a class="sourceLine" id="cb9-6" data-line-number="6">   , <span class="st">&quot;path-format&quot;</span> <span class="fu">&gt;:</span> <span class="dt">Text</span></a>
<a class="sourceLine" id="cb9-7" data-line-number="7">   ]</a></code></pre></div>
<p>地味にうれしいことに，extensible であれば関数名では許されないハイフンが含んだフィールド名も定義できるのだ．</p>
<h2 id="リファクタリング">リファクタリング</h2>
<p><code>Data.Yaml.TH.decodeFile</code> を使うには <code>FromJSON</code> 型クラスと <code>Lift</code> 型クラスのインスタンスにしなければいけない． でも安心して欲しい． どちらも最新の extensible-0.4.9 では定義済みだ(そして extensible のレコードは <code>type</code> 宣言なので追加でインスタンスを定義する必要は無い)．</p>
<p>ただし，extensible-0.4.9 はまだ Stackage の LTS にも nightly にも追加されていないので <code>stack.yaml</code> に追加する必要がある．</p>
<div class="sourceCode" id="cb10"><pre class="sourceCode yaml"><code class="sourceCode yaml"><a class="sourceLine" id="cb10-1" data-line-number="1"><span class="fu">resolver:</span><span class="at"> lts-11.9</span></a>
<a class="sourceLine" id="cb10-2" data-line-number="2"><span class="fu">packages:</span></a>
<a class="sourceLine" id="cb10-3" data-line-number="3"><span class="kw">-</span> .</a>
<a class="sourceLine" id="cb10-4" data-line-number="4"><span class="fu">extra-deps:</span></a>
<a class="sourceLine" id="cb10-5" data-line-number="5"><span class="kw">-</span> extensible-0.4.9</a></code></pre></div>
<p><code>Lift</code> 型クラスのインスタンスは extensible で定義済みなので1つ目のファイルを分けるはクリアーだ． 実は2つもクリアーしている． 拡張可能レコードの <code>FromJson</code> 型クラスのインスタンスは <code>&quot;path-format&quot;</code> のようなハイフンを含んだ文字列もそのまま扱ってくれる．</p>
<p>以下が extensible 版の <code>Config</code> 型に対応する YAML ファイルだ．</p>
<div class="sourceCode" id="cb11"><pre class="sourceCode yaml"><code class="sourceCode yaml"><a class="sourceLine" id="cb11-1" data-line-number="1"><span class="co"># template/.extensible-config.yaml</span></a>
<a class="sourceLine" id="cb11-2" data-line-number="2"><span class="fu">columns:</span><span class="at"> 80</span></a>
<a class="sourceLine" id="cb11-3" data-line-number="3"><span class="fu">language-extensions:</span><span class="at"> </span><span class="kw">[]</span></a></code></pre></div>
<p>試しに実行してみよう！</p>
<pre><code>$ stack ghci
&gt;&gt; Sample.Extensible.Config.defaultConfig
columns @= 80 &lt;: language-extensions @= [] &lt;: nil</code></pre>
<h2 id="デフォルトで置き換える">デフォルトで置き換える</h2>
<p>最後に簡単な実行ファイルを実装してみる． 設定ファイルのパスを与えると読みに行き，足りない部分は先ほどから埋め込んでるデフォルト値に置き換えて出力するモノだ．</p>
<pre><code>$ cat &quot;./template/.example.yaml&quot;
columns: 100
$ stack exec -- pconfig &quot;./template/.example.yaml&quot;
columns @= 100 &lt;: language-extensions @= [] &lt;: nil
$ stack exec -- pconfig
columns @= 80 &lt;: language-extensions @= [] &lt;: nil</code></pre>
<p>もちろんパスにファイルが無ければデフォルトのモノを出力するだけだ．</p>
<h2 id="section-1"></h2>
<p>さてどうすれば良いだろうか？ 例えば，<code>FromJSON</code> 型クラスの <code>Meybe a</code> 型のインスタンスはフィールドが無い場合に <code>Nothing</code> を与えてくれるので， <code>Config</code> 型の各フィールドを <code>Maybe</code> でラップするというのはどうだろう．</p>
<div class="sourceCode" id="cb14"><pre class="sourceCode haskell"><code class="sourceCode haskell"><a class="sourceLine" id="cb14-1" data-line-number="1"><span class="kw">type</span> <span class="dt">Config</span> <span class="fu">=</span> <span class="dt">Record</span></a>
<a class="sourceLine" id="cb14-2" data-line-number="2">  <span class="ch">&#39;[ &quot;root&quot; &gt;: Maybe Text</span></a>
<a class="sourceLine" id="cb14-3" data-line-number="3">   , <span class="st">&quot;path-format&quot;</span> <span class="fu">&gt;:</span> <span class="dt">Maybe</span> <span class="dt">Text</span></a>
<a class="sourceLine" id="cb14-4" data-line-number="4">   ]</a></code></pre></div>
<p>フィールドが2つなら良いが多くなってきたら辛そうだ…</p>
<h3 id="必殺-nullable">必殺 Nullable</h3>
<p>全てを <code>Meybe</code> でラップする場合は <a href="https://hackage.haskell.org/package/extensible-0.4.9/docs/Data-Extensible-Nullable.html"><code>Nullable</code></a> を使うと良いだろう(ないしは <code>RecordOf Maybe</code>)．</p>
<p><code>Nullable h :* xs</code> も既に <code>FromJson</code> 型クラスのインスタンスになっているのでそのまま YAML を読み込める． あとは次のようなデフォルト値と <code>Nullable</code> を与えたら <code>Nothing</code> の部分だけデフォルト値で置き換えた値を返す関数を実装してやればよい．</p>
<div class="sourceCode" id="cb15"><pre class="sourceCode haskell"><code class="sourceCode haskell"><a class="sourceLine" id="cb15-1" data-line-number="1"><span class="ot">fromNullable ::</span> <span class="dt">RecordOf</span> h xs <span class="ot">-&gt;</span> <span class="dt">Nullable</span> (<span class="dt">Field</span> h) <span class="fu">:*</span> xs <span class="ot">-&gt;</span> <span class="dt">RecordOf</span> h xs</a>
<a class="sourceLine" id="cb15-2" data-line-number="2">fromNullable def <span class="fu">=</span></a>
<a class="sourceLine" id="cb15-3" data-line-number="3">  hmapWithIndex <span class="fu">$</span> \m x <span class="ot">-&gt;</span> fromMaybe (hlookup m def) (getNullable x)</a></code></pre></div>
<p>extensible ならこうやって全てのフィールドに対し走査する関数が使える．</p>
<h2 id="section-2"></h2>
<p>あとはこんな感じ</p>
<div class="sourceCode" id="cb16"><pre class="sourceCode haskell"><code class="sourceCode haskell"><a class="sourceLine" id="cb16-1" data-line-number="1"><span class="ot">{-# LANGUAGE NoImplicitPrelude #-}</span></a>
<a class="sourceLine" id="cb16-2" data-line-number="2"><span class="ot">{-# LANGUAGE OverloadedStrings #-}</span></a>
<a class="sourceLine" id="cb16-3" data-line-number="3"><span class="ot">{-# LANGUAGE PolyKinds         #-}</span></a>
<a class="sourceLine" id="cb16-4" data-line-number="4"></a>
<a class="sourceLine" id="cb16-5" data-line-number="5"><span class="kw">module</span> <span class="dt">Main</span> <span class="kw">where</span></a>
<a class="sourceLine" id="cb16-6" data-line-number="6"></a>
<a class="sourceLine" id="cb16-7" data-line-number="7"><span class="kw">import</span>           <span class="dt">RIO</span></a>
<a class="sourceLine" id="cb16-8" data-line-number="8"><span class="kw">import</span>           <span class="dt">RIO.Directory</span>      (doesFileExist)</a>
<a class="sourceLine" id="cb16-9" data-line-number="9"></a>
<a class="sourceLine" id="cb16-10" data-line-number="10"><span class="kw">import</span>           <span class="dt">Data.Extensible</span></a>
<a class="sourceLine" id="cb16-11" data-line-number="11"><span class="kw">import</span> <span class="kw">qualified</span> <span class="dt">Data.Yaml</span>          <span class="kw">as</span> <span class="dt">Y</span></a>
<a class="sourceLine" id="cb16-12" data-line-number="12"><span class="kw">import</span>           <span class="dt">System.Environment</span> (getArgs)</a>
<a class="sourceLine" id="cb16-13" data-line-number="13"></a>
<a class="sourceLine" id="cb16-14" data-line-number="14"><span class="ot">main ::</span> <span class="dt">IO</span> ()</a>
<a class="sourceLine" id="cb16-15" data-line-number="15">main <span class="fu">=</span> <span class="kw">do</span></a>
<a class="sourceLine" id="cb16-16" data-line-number="16">  path <span class="ot">&lt;-</span> fromMaybe <span class="st">&quot;&quot;</span> <span class="fu">.</span> listToMaybe <span class="fu">&lt;$&gt;</span> getArgs</a>
<a class="sourceLine" id="cb16-17" data-line-number="17">  config <span class="ot">&lt;-</span> readConfigWith defaultConfig path</a>
<a class="sourceLine" id="cb16-18" data-line-number="18">  hPutBuilder stdout <span class="fu">$</span> encodeUtf8Builder (tshow config)</a>
<a class="sourceLine" id="cb16-19" data-line-number="19"></a>
<a class="sourceLine" id="cb16-20" data-line-number="20"><span class="ot">readConfigWith ::</span> <span class="dt">Config</span> <span class="ot">-&gt;</span> FilePath <span class="ot">-&gt;</span> <span class="dt">IO</span> <span class="dt">Config</span></a>
<a class="sourceLine" id="cb16-21" data-line-number="21">readConfigWith def path <span class="fu">=</span> <span class="kw">do</span></a>
<a class="sourceLine" id="cb16-22" data-line-number="22">  file <span class="ot">&lt;-</span> readFileBinaryWith <span class="st">&quot;&quot;</span> path</a>
<a class="sourceLine" id="cb16-23" data-line-number="23">  <span class="kw">if</span> Y.decodeEither file <span class="fu">==</span> <span class="dt">Right</span> <span class="dt">Y.Null</span> <span class="kw">then</span></a>
<a class="sourceLine" id="cb16-24" data-line-number="24">    pure def</a>
<a class="sourceLine" id="cb16-25" data-line-number="25">  <span class="kw">else</span> <span class="kw">do</span></a>
<a class="sourceLine" id="cb16-26" data-line-number="26">    config <span class="ot">&lt;-</span> either (error <span class="fu">.</span> show) pure <span class="fu">$</span> Y.decodeEither&#39; file</a>
<a class="sourceLine" id="cb16-27" data-line-number="27">    pure <span class="fu">$</span> fromNullable def config</a>
<a class="sourceLine" id="cb16-28" data-line-number="28"></a>
<a class="sourceLine" id="cb16-29" data-line-number="29"><span class="ot">readFileBinaryWith ::</span> <span class="dt">ByteString</span> <span class="ot">-&gt;</span> FilePath <span class="ot">-&gt;</span> <span class="dt">IO</span> <span class="dt">ByteString</span></a>
<a class="sourceLine" id="cb16-30" data-line-number="30">readFileBinaryWith def path <span class="fu">=</span></a>
<a class="sourceLine" id="cb16-31" data-line-number="31">  doesFileExist path <span class="fu">&gt;&gt;=</span> bool (pure def) (readFileBinary path)</a></code></pre></div>
<p>いろいろとインポートするのがめんどくさくて <code>rio</code> ライブラリを使っているが，あんまり気にしないで．</p>
<h1 id="おしまい">おしまい</h1>
<p>ちなみに，<a href="https://matsubara0507.github.io/posts/2018-05-10-make-cli-with-haskell-in-2018.html">前回の記事</a>に書いた <a href="https://github.com/matsubara0507/taskpad"><code>taskpad</code></a> にこの機能を追加してる．</p>
  </div>
</div>
</article>
]]></summary>
</entry>
<entry>
    <title>オレ的 Haskell で CLI を作る方法 2018</title>
    <link href="https://matsubara0507.github.io/posts/2018-05-10-make-cli-with-haskell-in-2018.html" />
    <id>https://matsubara0507.github.io/posts/2018-05-10-make-cli-with-haskell-in-2018.html</id>
    <published>2018-05-10T00:00:00Z</published>
    <updated>2018-05-10T00:00:00Z</updated>
    <summary type="html"><![CDATA[<article class="post card" itemscope itemtype="http://schema.org/BlogPosting">
 <div class="card-content">
  <header class="post-header">
    <h1 class="post-title" itemprop="name headline">オレ的 Haskell で CLI を作る方法 2018</h1>
    <p class="post-meta">
      <time datetime="2018-05-10" itemprop="datePublished">
        May 10, 2018
      </time>
      
      
      <div class="tags">
          <i class="fa fa-tags"></i> <a href="/tags/Haskell.html">Haskell</a> <a href="/tags/extensible-package.html">extensible-package</a> <a href="/tags/rio.html">rio</a>
      </div>
      
    </p>
  </header>

  <div class="post-content" itemprop="articleBody">
    <p>現在 <a href="https://github.com/matsubara0507/taskpad">TaskPad</a> という簡易的なタスク管理(編集)ツールを Haskell で作っていて，少し CLI を作るうえでのオレ的ノウハウが溜まったのでメモっとく．</p>
<h2 id="taskpad">TaskPad</h2>
<p>先に，何を作ってるかを書いておく． まだ完成していないが，気持ちは次のような Yaml ファイルを編集して自身のタスク管理をしようかなと考えている．</p>
<div class="sourceCode" id="cb1"><pre class="sourceCode yaml"><code class="sourceCode yaml"><a class="sourceLine" id="cb1-1" data-line-number="1"><span class="fu">memo:</span><span class="at"> </span><span class="kw">[]</span></a>
<a class="sourceLine" id="cb1-2" data-line-number="2"><span class="fu">tasks:</span></a>
<a class="sourceLine" id="cb1-3" data-line-number="3">  <span class="fu">1:</span></a>
<a class="sourceLine" id="cb1-4" data-line-number="4">    <span class="fu">done:</span><span class="at"> true</span></a>
<a class="sourceLine" id="cb1-5" data-line-number="5">    <span class="fu">children:</span><span class="at"> </span><span class="kw">[]</span></a>
<a class="sourceLine" id="cb1-6" data-line-number="6">    <span class="fu">name:</span><span class="at"> hello</span></a>
<a class="sourceLine" id="cb1-7" data-line-number="7">  <span class="fu">2:</span></a>
<a class="sourceLine" id="cb1-8" data-line-number="8">    <span class="fu">done:</span><span class="at"> false</span></a>
<a class="sourceLine" id="cb1-9" data-line-number="9">    <span class="fu">children:</span><span class="at"> </span><span class="kw">[]</span></a>
<a class="sourceLine" id="cb1-10" data-line-number="10">    <span class="fu">name:</span><span class="at"> world</span></a>
<a class="sourceLine" id="cb1-11" data-line-number="11"><span class="fu">date:</span><span class="at"> </span><span class="st">&#39;20180504&#39;</span></a></code></pre></div>
<p>現状できている CLI は次のような感じ</p>
<pre><code>$ taskpad --help
taskpad - operate daily tasks

Usage: taskpad [-v|--verbose] [-d|--date DATE] COMMAND [--version]

Available options:
  -v,--verbose             Enable verbose mode: verbosity level &quot;debug&quot;
  -d,--date DATE           Task&#39;s date
  --version                Show version
  -h,--help                Show this help text

Available commands:
  new                      Create a new task file. Note: if don&#39;t use --date
                           option then use today&#39;s date.
  add                      Add Task
  done                     Done Task
  tasks                    Show Tasks</code></pre>
<p><code>taskpad new</code> で Yaml ファイルを生成し，<code>taskpad add &quot;hoge&quot;</code> “hoge” というタスクを追加し，<code>taskpad done 1</code> で1番目のタスクを完了したことにし，<code>taskpad tasks</code> でタスクの一覧を出力する．</p>
<h2 id="ノウハウ">ノウハウ？</h2>
<p>たぶん他ではあんまり書いてない，いくつかのことを書いておく．</p>
<ul>
<li>optparse-applicative + extensible を使った CLI のオプションパーサー
<ul>
<li>特にサブコマンドをバリアントで表現しているのが面白い</li>
</ul></li>
<li>optparse-applicative でバージョンを表示</li>
<li>バリアントと型クラスを用いた分岐</li>
<li>rio + extensible で大域変数</li>
<li>rio を用いてロギング</li>
</ul>
<p>オプションパーサーに <a href="https://hackage.haskell.org/package/optparse-applicative">optparse-applicative</a> を用いている． オプションパーサーには <a href="https://hackage.haskell.org/package/optparse-simple">optparse-simple</a> や <a href="https://hackage.haskell.org/package/optparse-generic">optparse-generics</a> など他にもいくつかあるが，サブコマンドのような多少込み入ったコトをしようとすると optparse-applicative が欲しくなる． <a href="https://hackage.haskell.org/package/rio">rio</a> ライブラリは，なんとなく最近使っている alt. Prelude ライブラリ(詳しくは<a href="https://github.com/commercialhaskell/rio#readme">本家の README</a> か<a href="https://matsubara0507.github.io/posts/2018-04-13-try-rio-1.html">前の僕の記事</a>を読んで)． <a href="https://hackage.haskell.org/package/extensible">extensible</a> は Haskell の残念なレコード構文や直和型の代わりに，拡張可能なレコード・バリアント型を提供してくれる面白いパッケージだ．</p>
<h3 id="import-と言語拡張">import と言語拡張</h3>
<p>extensible はかなり言語拡張を用いる． 以降では，めんどくさいので <code>import</code> も含め明示的に扱わない． 以下のコードが先頭にくっついてるとビルドはできるはずだ(たぶん，試してない)．</p>
<div class="sourceCode" id="cb3"><pre class="sourceCode haskell"><code class="sourceCode haskell"><a class="sourceLine" id="cb3-1" data-line-number="1"><span class="ot">{-# LANGUAGE DataKinds             #-}</span></a>
<a class="sourceLine" id="cb3-2" data-line-number="2"><span class="ot">{-# LANGUAGE FlexibleContexts      #-}</span></a>
<a class="sourceLine" id="cb3-3" data-line-number="3"><span class="ot">{-# LANGUAGE MultiParamTypeClasses #-}</span></a>
<a class="sourceLine" id="cb3-4" data-line-number="4"><span class="ot">{-# LANGUAGE OverloadedLabels      #-}</span></a>
<a class="sourceLine" id="cb3-5" data-line-number="5"><span class="ot">{-# LANGUAGE TemplateHaskell       #-}</span></a>
<a class="sourceLine" id="cb3-6" data-line-number="6"><span class="ot">{-# LANGUAGE TypeApplications      #-}</span></a>
<a class="sourceLine" id="cb3-7" data-line-number="7"><span class="ot">{-# LANGUAGE TypeFamilies          #-}</span></a>
<a class="sourceLine" id="cb3-8" data-line-number="8"><span class="ot">{-# LANGUAGE TypeOperators         #-}</span></a>
<a class="sourceLine" id="cb3-9" data-line-number="9"></a>
<a class="sourceLine" id="cb3-10" data-line-number="10"><span class="kw">import</span>           <span class="dt">RIO</span></a>
<a class="sourceLine" id="cb3-11" data-line-number="11"><span class="kw">import</span> <span class="kw">qualified</span> <span class="dt">RIO.Text</span>          <span class="kw">as</span> <span class="dt">Text</span></a>
<a class="sourceLine" id="cb3-12" data-line-number="12"><span class="kw">import</span>           <span class="dt">RIO.Time</span></a>
<a class="sourceLine" id="cb3-13" data-line-number="13"></a>
<a class="sourceLine" id="cb3-14" data-line-number="14"><span class="kw">import</span>           <span class="dt">Data.Extensible</span></a>
<a class="sourceLine" id="cb3-15" data-line-number="15"><span class="kw">import</span>           <span class="dt">Data.Functor.Identity</span></a>
<a class="sourceLine" id="cb3-16" data-line-number="16"><span class="kw">import</span>           <span class="dt">Data.Proxy</span></a>
<a class="sourceLine" id="cb3-17" data-line-number="17"><span class="kw">import</span>           <span class="dt">GHC.TypeLits</span></a>
<a class="sourceLine" id="cb3-18" data-line-number="18"><span class="kw">import</span>           <span class="dt">Options.Applicative</span></a></code></pre></div>
<h3 id="extensible-で-optparse-applicative">extensible で optparse-applicative</h3>
<p>少しだけ <code>optparse-applicative</code> について説明しておく． optparse-applicative は CLI オプションをパースして任意の型にマッピングしてくれる． 主に次のようにして用いる．</p>
<div class="sourceCode" id="cb4"><pre class="sourceCode haskell"><code class="sourceCode haskell"><a class="sourceLine" id="cb4-1" data-line-number="1"><span class="ot">main ::</span> <span class="dt">IO</span> ()</a>
<a class="sourceLine" id="cb4-2" data-line-number="2">main <span class="fu">=</span> run <span class="fu">=&lt;&lt;</span> execParser opts</a>
<a class="sourceLine" id="cb4-3" data-line-number="3">  <span class="kw">where</span></a>
<a class="sourceLine" id="cb4-4" data-line-number="4">    opts <span class="fu">=</span> info (options <span class="fu">&lt;**&gt;</span> helper)</a>
<a class="sourceLine" id="cb4-5" data-line-number="5">         <span class="fu">$</span> fullDesc</a>
<a class="sourceLine" id="cb4-6" data-line-number="6">        <span class="fu">&lt;&gt;</span> header <span class="st">&quot;taskpad - operate daily tasks&quot;</span></a>
<a class="sourceLine" id="cb4-7" data-line-number="7"></a>
<a class="sourceLine" id="cb4-8" data-line-number="8"><span class="ot">options ::</span> <span class="dt">Parser</span> <span class="dt">Options</span></a>
<a class="sourceLine" id="cb4-9" data-line-number="9">options <span class="fu">=</span> undefined</a></code></pre></div>
<p><a href="http://hackage.haskell.org/package/optparse-applicative-0.14.2.0/docs/Options-Applicative.html#v:execParser"><code>execParser</code></a> 関数は <code>ParserInfo a -&gt; IO a</code> という型を持つ． <a href="http://hackage.haskell.org/package/optparse-applicative-0.14.2.0/docs/Options-Applicative.html#v:helper"><code>helper :: Parser (a -&gt; a)</code></a> は <code>--help</code> オプションを与えてくれる関数だ． <code>info</code> 関数と <code>fullDesc</code> や <code>header</code> により，<code>Parser a</code> 型のパーサーに対し <code>--help</code> で出力する情報を追加して <code>ParserInfo a</code> 型に変換する．</p>
<h4 id="型の定義">型の定義</h4>
<p><code>extensible</code> で <code>optparse-applicative</code> を使うとは即ち，任意の型，ここでいう <code>Options</code> 型が拡張可能レコードや拡張可能バリアントであるというシチュエーションだ． 今回は <code>Options</code> 型をまずは次のように定義した．</p>
<div class="sourceCode" id="cb5"><pre class="sourceCode haskell"><code class="sourceCode haskell"><a class="sourceLine" id="cb5-1" data-line-number="1"><span class="kw">type</span> <span class="dt">Options</span> <span class="fu">=</span> <span class="dt">Record</span></a>
<a class="sourceLine" id="cb5-2" data-line-number="2">  <span class="ch">&#39;[ &quot;verbose&quot; &gt;: Bool</span></a>
<a class="sourceLine" id="cb5-3" data-line-number="3">   , <span class="st">&quot;date&quot;</span>    <span class="fu">&gt;:</span> <span class="dt">Maybe</span> <span class="dt">Date</span></a>
<a class="sourceLine" id="cb5-4" data-line-number="4">   , <span class="st">&quot;subcmd&quot;</span>  <span class="fu">&gt;:</span> <span class="dt">SubCmd</span></a>
<a class="sourceLine" id="cb5-5" data-line-number="5">   ]</a>
<a class="sourceLine" id="cb5-6" data-line-number="6"></a>
<a class="sourceLine" id="cb5-7" data-line-number="7"><span class="kw">type</span> <span class="dt">SubCmd</span> <span class="fu">=</span> <span class="dt">Variant</span></a>
<a class="sourceLine" id="cb5-8" data-line-number="8">  <span class="ch">&#39;[ &quot;new&quot;   &gt;: ()</span></a>
<a class="sourceLine" id="cb5-9" data-line-number="9">   , <span class="st">&quot;add&quot;</span>   <span class="fu">&gt;:</span> <span class="dt">Text</span></a>
<a class="sourceLine" id="cb5-10" data-line-number="10">   , <span class="st">&quot;done&quot;</span>  <span class="fu">&gt;:</span> <span class="dt">Int</span></a>
<a class="sourceLine" id="cb5-11" data-line-number="11">   , <span class="st">&quot;tasks&quot;</span> <span class="fu">&gt;:</span> ()</a>
<a class="sourceLine" id="cb5-12" data-line-number="12">   ]</a>
<a class="sourceLine" id="cb5-13" data-line-number="13"></a>
<a class="sourceLine" id="cb5-14" data-line-number="14"><span class="kw">type</span> <span class="dt">Date</span> <span class="fu">=</span> <span class="dt">Text</span></a></code></pre></div>
<p><code>SubCmd</code> 型が拡張可能なバリアント型だ． ちなみに，Haskell のプリミティブな代数型データ構造で記述すると以下のようになる．</p>
<div class="sourceCode" id="cb6"><pre class="sourceCode haskell"><code class="sourceCode haskell"><a class="sourceLine" id="cb6-1" data-line-number="1"><span class="kw">data</span> <span class="dt">Options</span> <span class="fu">=</span> <span class="dt">Options</span></a>
<a class="sourceLine" id="cb6-2" data-line-number="2">  {<span class="ot"> verbose ::</span> <span class="dt">Bool</span></a>
<a class="sourceLine" id="cb6-3" data-line-number="3">  ,<span class="ot"> date    ::</span> <span class="dt">Maybe</span> <span class="dt">Date</span></a>
<a class="sourceLine" id="cb6-4" data-line-number="4">  ,<span class="ot"> subcmd  ::</span> <span class="dt">SubCmd</span></a>
<a class="sourceLine" id="cb6-5" data-line-number="5">  }</a>
<a class="sourceLine" id="cb6-6" data-line-number="6"></a>
<a class="sourceLine" id="cb6-7" data-line-number="7"><span class="kw">data</span> <span class="dt">SubCmd</span></a>
<a class="sourceLine" id="cb6-8" data-line-number="8">  <span class="fu">=</span> <span class="dt">New</span></a>
<a class="sourceLine" id="cb6-9" data-line-number="9">  <span class="fu">|</span> <span class="dt">Add</span> <span class="dt">Text</span></a>
<a class="sourceLine" id="cb6-10" data-line-number="10">  <span class="fu">|</span> <span class="dt">Done</span> <span class="dt">Int</span></a>
<a class="sourceLine" id="cb6-11" data-line-number="11">  <span class="fu">|</span> <span class="dt">Tasks</span></a></code></pre></div>
<p>自分的に，extensible を使う利点は3つある．</p>
<ol type="1">
<li>フィールド名と関数名の名前空間が別なので衝突が無い</li>
<li><code>type</code> 宣言によりレコードに対しいちいち型クラスのインスタンスを定義する必要が無い(既にあるものは)</li>
<li>型レベルリストによってフィールド全体に対する走査を行える</li>
</ol>
<p>逆にデメリットは，(2) にも関係するのだが，<code>type</code> 宣言のためインスタンスの定義が衝突することがしばしばある(これはインスタンスのスコープをコントロールできないという Haskell 全体での問題でもある)．</p>
<h4 id="拡張可能レコードのパーサー">拡張可能レコードのパーサー</h4>
<p>まずは拡張可能レコード(<code>Options</code> 型)のパーサーを書いてみる． バリアント(<code>SubCmd</code> 型)のは <code>undefined</code> としておこう． 細かい <code>optparse-applicative</code> の構文は割愛する．</p>
<div class="sourceCode" id="cb7"><pre class="sourceCode haskell"><code class="sourceCode haskell"><a class="sourceLine" id="cb7-1" data-line-number="1"><span class="ot">options ::</span> <span class="dt">Parser</span> <span class="dt">Options</span></a>
<a class="sourceLine" id="cb7-2" data-line-number="2">options <span class="fu">=</span> hsequence</a>
<a class="sourceLine" id="cb7-3" data-line-number="3">    <span class="fu">$</span> <span class="fu">#</span>verbose <span class="fu">&lt;@=&gt;</span> switch (long <span class="st">&quot;verbose&quot;</span> <span class="fu">&lt;&gt;</span> short <span class="ch">&#39;v&#39;</span> <span class="fu">&lt;&gt;</span> help <span class="st">&quot;Enable verbose mode: verbosity level \&quot;debug\&quot;&quot;</span>)</a>
<a class="sourceLine" id="cb7-4" data-line-number="4">   <span class="fu">&lt;:</span> <span class="fu">#</span>date    <span class="fu">&lt;@=&gt;</span> optional (strOption (long <span class="st">&quot;date&quot;</span> <span class="fu">&lt;&gt;</span> short <span class="ch">&#39;d&#39;</span> <span class="fu">&lt;&gt;</span> metavar <span class="st">&quot;DATE&quot;</span> <span class="fu">&lt;&gt;</span> help <span class="st">&quot;Task&#39;s date&quot;</span>))</a>
<a class="sourceLine" id="cb7-5" data-line-number="5">   <span class="fu">&lt;:</span> <span class="fu">#</span>subcmd  <span class="fu">&lt;@=&gt;</span> subcmdParser</a>
<a class="sourceLine" id="cb7-6" data-line-number="6">   <span class="fu">&lt;:</span> nil</a>
<a class="sourceLine" id="cb7-7" data-line-number="7"></a>
<a class="sourceLine" id="cb7-8" data-line-number="8"><span class="ot">subcmdParser ::</span> <span class="dt">Parser</span> <span class="dt">SubCmd</span></a>
<a class="sourceLine" id="cb7-9" data-line-number="9">subcmdParser <span class="fu">=</span> undefined</a></code></pre></div>
<p>拡張可能レコードの値を構築するには <code>#fieldName @= fieldValue</code> というの <code>&lt;:</code> で直列につないでいく(細かくは extensible の解説記事を読んで)． <code>&lt;@=&gt;</code> 演算子はモナドなフィールドの値を持ち上げてくれるバージョンの <code>@=</code> 演算子だ． <code>$</code> の右側は，正確には違うが，次の型のようなイメージとなる．</p>
<div class="sourceCode" id="cb8"><pre class="sourceCode haskell"><code class="sourceCode haskell"><a class="sourceLine" id="cb8-1" data-line-number="1"><span class="ch">&#39;[ Parser (&quot;verbose&quot; &gt;: Bool)</span></a>
<a class="sourceLine" id="cb8-2" data-line-number="2"> , <span class="dt">Parser</span> (<span class="st">&quot;date&quot;</span>    <span class="fu">&gt;:</span> <span class="dt">Maybe</span> <span class="dt">Date</span>)</a>
<a class="sourceLine" id="cb8-3" data-line-number="3"> , <span class="dt">Parser</span> (<span class="st">&quot;subcmd&quot;</span>  <span class="fu">&gt;:</span> <span class="dt">SubCmd</span>)</a>
<a class="sourceLine" id="cb8-4" data-line-number="4"> ]</a></code></pre></div>
<p>Haskeller っであれば，後はリスト型で言う <code>sequence</code> できれば良さそうとわかるだろう． その型レベルリスト版が <code>hsequence</code> だ．</p>
<h4 id="拡張可能バリアントのパーサー">拡張可能バリアントのパーサー</h4>
<p>さて，今回の自分的なメインディッシュだ． 仮に通常の直和型であれば次のように書くだろう．</p>
<div class="sourceCode" id="cb9"><pre class="sourceCode haskell"><code class="sourceCode haskell"><a class="sourceLine" id="cb9-1" data-line-number="1"><span class="ot">subcmdParser ::</span> <span class="dt">Parser</span> <span class="dt">SubCmd</span></a>
<a class="sourceLine" id="cb9-2" data-line-number="2">subcmdParser <span class="fu">=</span> subparser</a>
<a class="sourceLine" id="cb9-3" data-line-number="3">    <span class="fu">$</span> command <span class="st">&quot;new&quot;</span>   (pure <span class="dt">New</span> <span class="ot">`withInfo`</span> <span class="st">&quot;...&quot;</span>)</a>
<a class="sourceLine" id="cb9-4" data-line-number="4">   <span class="fu">&lt;&gt;</span> command <span class="st">&quot;add&quot;</span>   (<span class="dt">Add</span> <span class="fu">&lt;$&gt;</span> strArgument (metavar <span class="st">&quot;TEXT&quot;</span>) <span class="ot">`withInfo`</span> <span class="st">&quot;...&quot;</span>)</a>
<a class="sourceLine" id="cb9-5" data-line-number="5">   <span class="fu">&lt;&gt;</span> command <span class="st">&quot;done&quot;</span>  (<span class="dt">Done</span> <span class="fu">&lt;$&gt;</span> argument auto (metavar <span class="st">&quot;ID&quot;</span>) <span class="ot">`withInfo`</span> <span class="st">&quot;...&quot;</span>)</a>
<a class="sourceLine" id="cb9-6" data-line-number="6">   <span class="fu">&lt;&gt;</span> command <span class="st">&quot;tasks&quot;</span> (pure <span class="dt">Tasks</span> <span class="ot">`withInfo`</span> <span class="st">&quot;...&quot;</span>)</a>
<a class="sourceLine" id="cb9-7" data-line-number="7"></a>
<a class="sourceLine" id="cb9-8" data-line-number="8"><span class="ot">withInfo ::</span> <span class="dt">Parser</span> a <span class="ot">-&gt;</span> <span class="dt">String</span> <span class="ot">-&gt;</span> <span class="dt">ParserInfo</span> a</a>
<a class="sourceLine" id="cb9-9" data-line-number="9">withInfo opts <span class="fu">=</span> info (helper <span class="fu">&lt;*&gt;</span> opts) <span class="fu">.</span> progDesc</a></code></pre></div>
<p>この程度のサブコマンドならそこまで複雑じゃなく書けた． しかし悲しいことに，例えば <code>command &quot;tasks&quot;</code> の行が無くてもビルドは通る． 即ち，<strong>直和型に対し網羅性を型検査で保証することが出来ない</strong>．</p>
<h2 id="section"></h2>
<p>対して extensible のバリアントならどうだろうか． 理想的にはバリアントと同じフィールドを持つレコードの各要素が <code>ParserInfo a</code> であるような値から自動で導出してくれると良い． つまり次のように扱いたい．</p>
<div class="sourceCode" id="cb10"><pre class="sourceCode haskell"><code class="sourceCode haskell"><a class="sourceLine" id="cb10-1" data-line-number="1"><span class="ot">subcmdParser ::</span> <span class="dt">Parser</span> <span class="dt">SubCmd</span></a>
<a class="sourceLine" id="cb10-2" data-line-number="2">subcmdParser <span class="fu">=</span> variantFrom</a>
<a class="sourceLine" id="cb10-3" data-line-number="3">    <span class="fu">$</span> <span class="fu">#</span>new   <span class="fu">@=</span> (pure () <span class="ot">`withInfo`</span> <span class="st">&quot;Create a new task file. Note: if don&#39;t use --date option then use today&#39;s date.&quot;</span>)</a>
<a class="sourceLine" id="cb10-4" data-line-number="4">   <span class="fu">&lt;:</span> <span class="fu">#</span>add   <span class="fu">@=</span> (strArgument (metavar <span class="st">&quot;TEXT&quot;</span> <span class="fu">&lt;&gt;</span> help <span class="st">&quot;Task contents&quot;</span>) <span class="ot">`withInfo`</span> <span class="st">&quot;Add Task&quot;</span>)</a>
<a class="sourceLine" id="cb10-5" data-line-number="5">   <span class="fu">&lt;:</span> <span class="fu">#</span>done  <span class="fu">@=</span> (argument auto (metavar <span class="st">&quot;ID&quot;</span> <span class="fu">&lt;&gt;</span> help <span class="st">&quot;Done task from id&quot;</span>) <span class="ot">`withInfo`</span> <span class="st">&quot;Done Task&quot;</span>)</a>
<a class="sourceLine" id="cb10-6" data-line-number="6">   <span class="fu">&lt;:</span> <span class="fu">#</span>tasks <span class="fu">@=</span> (pure () <span class="ot">`withInfo`</span> <span class="st">&quot;Show Tasks&quot;</span>)</a>
<a class="sourceLine" id="cb10-7" data-line-number="7">   <span class="fu">&lt;:</span> nil</a>
<a class="sourceLine" id="cb10-8" data-line-number="8"></a>
<a class="sourceLine" id="cb10-9" data-line-number="9"><span class="ot">variantFrom ::</span> <span class="dt">RecordOf</span> <span class="dt">ParserInfo</span> xs <span class="ot">-&gt;</span> <span class="dt">Parser</span> (<span class="dt">Variant</span> xs)</a>
<a class="sourceLine" id="cb10-10" data-line-number="10">variantFrom <span class="fu">=</span> undefined</a>
<a class="sourceLine" id="cb10-11" data-line-number="11"></a>
<a class="sourceLine" id="cb10-12" data-line-number="12"><span class="kw">instance</span> <span class="dt">Wrapper</span> <span class="dt">ParserInfo</span> <span class="kw">where</span></a>
<a class="sourceLine" id="cb10-13" data-line-number="13">  <span class="kw">type</span> <span class="dt">Repr</span> <span class="dt">ParserInfo</span> a <span class="fu">=</span> <span class="dt">ParserInfo</span> a</a>
<a class="sourceLine" id="cb10-14" data-line-number="14">  _Wrapper <span class="fu">=</span> id</a></code></pre></div>
<p><code>@=</code> と <code>&lt;:</code> で構築したレコードが <code>Record = RecordOf Identity</code> ではなく，<code>RecordOf h</code> であるためには <code>h</code> が <a href="https://hackage.haskell.org/package/extensible-0.4.8/docs/Data-Extensible-Wrapper.html#t:Wrapper"><code>Wrapper</code></a> 型クラスのインスタンスである必要がある(というかインスタンスでありさえすれば良い)．</p>
<h2 id="section-1"></h2>
<p>さてキモは <code>variantFrom</code> だ． 通常の直和型版の <code>subcmdParser</code> 関数を見ればわかるように，<code>command</code> 関数で作成した値をモノイドで畳み込めばいいので，お察しの通り(??) <a href="https://hackage.haskell.org/package/extensible-0.4.8/docs/Data-Extensible-Product.html#v:hfoldMap"><code>hfoldMap</code></a> を使う． ついでに <code>command</code> の一引数目に渡すサブコマンドの文字列はフィールド名から取得するようにしよう． この場合，インデックスと <code>KnownSymbol</code> 制約を渡す必要があるので <code>hfoldMap</code> の代わりに <code>hfoldMapWithIndexFor</code> 関数を使う．</p>
<div class="sourceCode" id="cb11"><pre class="sourceCode haskell"><code class="sourceCode haskell"><a class="sourceLine" id="cb11-1" data-line-number="1"><span class="ot">variantFrom ::</span></a>
<a class="sourceLine" id="cb11-2" data-line-number="2">  <span class="dt">Forall</span> (<span class="dt">KeyIs</span> <span class="dt">KnownSymbol</span>) xs <span class="ot">=&gt;</span> <span class="dt">RecordOf</span> <span class="dt">ParserInfo</span> xs <span class="ot">-&gt;</span> <span class="dt">Parser</span> (<span class="dt">Variant</span> xs)</a>
<a class="sourceLine" id="cb11-3" data-line-number="3">variantFrom <span class="fu">=</span> subparser <span class="fu">.</span> subcmdVariant</a>
<a class="sourceLine" id="cb11-4" data-line-number="4">  <span class="kw">where</span></a>
<a class="sourceLine" id="cb11-5" data-line-number="5">    subcmdVariant <span class="fu">=</span> hfoldMapWithIndexFor (<span class="dt">Proxy</span> <span class="fu">@</span> (<span class="dt">KeyIs</span> <span class="dt">KnownSymbol</span>)) <span class="fu">$</span> \m x <span class="ot">-&gt;</span></a>
<a class="sourceLine" id="cb11-6" data-line-number="6">      <span class="kw">let</span> k <span class="fu">=</span> symbolVal (proxyAssocKey m)</a>
<a class="sourceLine" id="cb11-7" data-line-number="7">      <span class="kw">in</span> command k ((<span class="dt">EmbedAt</span> m <span class="fu">.</span> <span class="dt">Field</span> <span class="fu">.</span> pure) <span class="fu">&lt;$&gt;</span> getField x)</a></code></pre></div>
<p>結果として，<strong>extensible のバリアント版は網羅性を型検査によって検証できるようになった！</strong></p>
<h3 id="バージョンの表示">バージョンの表示</h3>
<p>バージョンの表示は他のコマンドと違い，コマンドが間違って(例えばサブコマンドが無い)いても <code>--version</code> という引数さえあれば優先的にバージョンを表示する必要がある． そのようなオプションを追加する場合には <a href="http://hackage.haskell.org/package/optparse-applicative-0.14.2.0/docs/Options-Applicative.html#v:infoOption"><code>infoOption</code></a> 関数を使う．</p>
<div class="sourceCode" id="cb12"><pre class="sourceCode haskell"><code class="sourceCode haskell"><a class="sourceLine" id="cb12-1" data-line-number="1"><span class="kw">import</span> <span class="kw">qualified</span> <span class="dt">Paths_taskpad</span>       <span class="kw">as</span> <span class="dt">Meta</span></a>
<a class="sourceLine" id="cb12-2" data-line-number="2"><span class="kw">import</span>           <span class="dt">Data.Version</span>        (<span class="dt">Version</span>)</a>
<a class="sourceLine" id="cb12-3" data-line-number="3"><span class="kw">import</span> <span class="kw">qualified</span> <span class="dt">Data.Version</span>        <span class="kw">as</span> <span class="dt">Version</span></a>
<a class="sourceLine" id="cb12-4" data-line-number="4"><span class="kw">import</span>           <span class="dt">Development.GitRev</span></a>
<a class="sourceLine" id="cb12-5" data-line-number="5"></a>
<a class="sourceLine" id="cb12-6" data-line-number="6"><span class="ot">main ::</span> <span class="dt">IO</span> ()</a>
<a class="sourceLine" id="cb12-7" data-line-number="7">main <span class="fu">=</span> run <span class="fu">=&lt;&lt;</span> execParser opts</a>
<a class="sourceLine" id="cb12-8" data-line-number="8">  <span class="kw">where</span></a>
<a class="sourceLine" id="cb12-9" data-line-number="9">    opts <span class="fu">=</span> info (options <span class="fu">&lt;**&gt;</span> version Meta.version <span class="fu">&lt;**&gt;</span> helper)</a>
<a class="sourceLine" id="cb12-10" data-line-number="10">         <span class="fu">$</span> <span class="fu">...</span></a>
<a class="sourceLine" id="cb12-11" data-line-number="11"></a>
<a class="sourceLine" id="cb12-12" data-line-number="12"><span class="ot">version ::</span> <span class="dt">Version</span> <span class="ot">-&gt;</span> <span class="dt">Parser</span> (a <span class="ot">-&gt;</span> a)</a>
<a class="sourceLine" id="cb12-13" data-line-number="13">version v <span class="fu">=</span> infoOption (showVersion v)</a>
<a class="sourceLine" id="cb12-14" data-line-number="14">    <span class="fu">$</span> long <span class="st">&quot;version&quot;</span></a>
<a class="sourceLine" id="cb12-15" data-line-number="15">   <span class="fu">&lt;&gt;</span> help <span class="st">&quot;Show version&quot;</span></a>
<a class="sourceLine" id="cb12-16" data-line-number="16"></a>
<a class="sourceLine" id="cb12-17" data-line-number="17"><span class="ot">showVersion ::</span> <span class="dt">Version</span> <span class="ot">-&gt;</span> <span class="dt">String</span></a>
<a class="sourceLine" id="cb12-18" data-line-number="18">showVersion v <span class="fu">=</span> unwords</a>
<a class="sourceLine" id="cb12-19" data-line-number="19">  [ <span class="st">&quot;Version&quot;</span></a>
<a class="sourceLine" id="cb12-20" data-line-number="20">  , Version.showVersion v <span class="fu">++</span> <span class="st">&quot;,&quot;</span></a>
<a class="sourceLine" id="cb12-21" data-line-number="21">  , <span class="st">&quot;Git revision&quot;</span></a>
<a class="sourceLine" id="cb12-22" data-line-number="22">  , <span class="fu">$</span>(gitHash)</a>
<a class="sourceLine" id="cb12-23" data-line-number="23">  , <span class="st">&quot;(&quot;</span> <span class="fu">++</span> <span class="fu">$</span>(gitCommitCount) <span class="fu">++</span> <span class="st">&quot; commits)&quot;</span></a>
<a class="sourceLine" id="cb12-24" data-line-number="24">  ]</a></code></pre></div>
<p><code>&lt;**&gt;</code> 演算子はただの <code>flip (&lt;*&gt;)</code> だ． ちなみに，<code>version</code> と <code>helper</code> の適用順を入れ替えると <code>--help</code> の表示がほんの少しだけ変わる．</p>
<h3 id="バリアントと型クラス">バリアントと型クラス</h3>
<p>こっからは <code>run :: Options -&gt; IO ()</code> 関数を考える．</p>
<div class="sourceCode" id="cb13"><pre class="sourceCode haskell"><code class="sourceCode haskell"><a class="sourceLine" id="cb13-1" data-line-number="1"><span class="ot">run ::</span> <span class="dt">Options</span> <span class="ot">-&gt;</span> <span class="dt">IO</span> ()</a>
<a class="sourceLine" id="cb13-2" data-line-number="2">run opts <span class="fu">=</span> <span class="kw">do</span></a>
<a class="sourceLine" id="cb13-3" data-line-number="3">  date <span class="ot">&lt;-</span> maybe getTodaysDate pure <span class="fu">$</span> opts <span class="fu">^.</span> <span class="fu">#</span>date</a>
<a class="sourceLine" id="cb13-4" data-line-number="4">  matchField</a>
<a class="sourceLine" id="cb13-5" data-line-number="5">    undefined <span class="co">-- ???</span></a>
<a class="sourceLine" id="cb13-6" data-line-number="6">    (opts <span class="fu">^.</span> <span class="fu">#</span>subcmd)</a></code></pre></div>
<p><code>getTodaysDate</code> 関数は自身で定義しているとする． <code>--date</code> オプションを指定しなかった場合には今日の日付を取得する． 問題はサブコマンドの分岐だ．</p>
<p>バリアントの分岐には <a href="https://hackage.haskell.org/package/extensible-0.4.8/docs/Data-Extensible-Field.html#v:matchField"><code>matchField</code></a> 関数を用いる． <code>matchField</code> 関数の型は <code>RecordOf (Match h r) xs -&gt; VariantOf h xs -&gt; r</code> となる． 一引数目のレコードと二引数目のバリアントの <code>xs</code> が等しいということから共通のフィールドを期待しているのが分かるだろう． レコード側の各フィールドに，各バリアントに対するフィールドの値を受け取り <code>r</code> 型の返り値の関数を記述するといった具合だ(この部分が <code>Match h r</code> に集約されている)．</p>
<h2 id="section-2"></h2>
<p>今回は，このレコードの構築に型クラスを用いる． 以下のような型クラスを定義する．</p>
<div class="sourceCode" id="cb14"><pre class="sourceCode haskell"><code class="sourceCode haskell"><a class="sourceLine" id="cb14-1" data-line-number="1"><span class="kw">class</span> <span class="dt">Run</span> kv <span class="kw">where</span></a>
<a class="sourceLine" id="cb14-2" data-line-number="2"><span class="ot">  run&#39; ::</span> proxy kv <span class="ot">-&gt;</span> <span class="dt">Date</span> <span class="ot">-&gt;</span> <span class="dt">AssocValue</span> kv <span class="ot">-&gt;</span> <span class="dt">IO</span> ()</a></code></pre></div>
<p>実装は置いておいて，インスタンスを与えてみよう．</p>
<div class="sourceCode" id="cb15"><pre class="sourceCode haskell"><code class="sourceCode haskell"><a class="sourceLine" id="cb15-1" data-line-number="1"><span class="kw">instance</span> <span class="dt">Run</span> (<span class="st">&quot;new&quot;</span> <span class="fu">&gt;:</span> ()) <span class="kw">where</span></a>
<a class="sourceLine" id="cb15-2" data-line-number="2">  run&#39; _ _ _ <span class="fu">=</span> undefined</a>
<a class="sourceLine" id="cb15-3" data-line-number="3"></a>
<a class="sourceLine" id="cb15-4" data-line-number="4"><span class="kw">instance</span> <span class="dt">Run</span> (<span class="st">&quot;add&quot;</span> <span class="fu">&gt;:</span> <span class="dt">Text</span>) <span class="kw">where</span></a>
<a class="sourceLine" id="cb15-5" data-line-number="5">  run&#39; _ _ _ <span class="fu">=</span> undefined</a>
<a class="sourceLine" id="cb15-6" data-line-number="6"></a>
<a class="sourceLine" id="cb15-7" data-line-number="7"><span class="kw">instance</span> <span class="dt">Run</span> (<span class="st">&quot;done&quot;</span> <span class="fu">&gt;:</span> <span class="dt">Int</span>) <span class="kw">where</span></a>
<a class="sourceLine" id="cb15-8" data-line-number="8">  run&#39; _ _ _ <span class="fu">=</span> undefined</a>
<a class="sourceLine" id="cb15-9" data-line-number="9"></a>
<a class="sourceLine" id="cb15-10" data-line-number="10"><span class="kw">instance</span> <span class="dt">Run</span> (<span class="st">&quot;tasks&quot;</span> <span class="fu">&gt;:</span> ()) <span class="kw">where</span></a>
<a class="sourceLine" id="cb15-11" data-line-number="11">  run&#39; _ _ _ <span class="fu">=</span> undefined</a></code></pre></div>
<p><code>run</code> 関数の <code>matchField</code> 関数の引数は次のようになる．</p>
<div class="sourceCode" id="cb16"><pre class="sourceCode haskell"><code class="sourceCode haskell"><a class="sourceLine" id="cb16-1" data-line-number="1"><span class="ot">run ::</span> <span class="dt">Options</span> <span class="ot">-&gt;</span> <span class="dt">IO</span> ()</a>
<a class="sourceLine" id="cb16-2" data-line-number="2">run opts <span class="fu">=</span> <span class="kw">do</span></a>
<a class="sourceLine" id="cb16-3" data-line-number="3">  date <span class="ot">&lt;-</span> maybe getTodaysDate pure <span class="fu">$</span> opts <span class="fu">^.</span> <span class="fu">#</span>date</a>
<a class="sourceLine" id="cb16-4" data-line-number="4">  matchField</a>
<a class="sourceLine" id="cb16-5" data-line-number="5">    (htabulateFor (<span class="dt">Proxy</span> <span class="fu">@</span> <span class="dt">Run</span>) <span class="fu">$</span> \m <span class="ot">-&gt;</span> <span class="dt">Field</span> (<span class="dt">Match</span> <span class="fu">$</span> run&#39; m date <span class="fu">.</span> runIdentity))</a>
<a class="sourceLine" id="cb16-6" data-line-number="6">    (opts <span class="fu">^.</span> <span class="fu">#</span>subcmd)</a></code></pre></div>
<p><code>Proxy @ Run</code> の <code>@</code> の部分は <code>TypeApplications</code> 拡張のモノだ． フィールドの値は <code>Identity x</code> 型として来るので <code>runIdentity</code> 関数を用いて剥がし，<code>run' m date</code> へと適用する． もちろんサブコマンドのインスタンスを書き忘れていた場合は，ちゃんと型検査に引っかかる！</p>
<h3 id="rio-で大域変数">rio で大域変数</h3>
<p><code>rio</code> で大域変数を扱うには <code>RIO env</code> モナドを用いる． 適当なアプリケーションモナドを定義してやろう． 今回はひとつしか大域変数が無いのであんまりメリットを感じないかもしれないが…</p>
<div class="sourceCode" id="cb17"><pre class="sourceCode haskell"><code class="sourceCode haskell"><a class="sourceLine" id="cb17-1" data-line-number="1"><span class="kw">type</span> <span class="dt">TaskPad</span> <span class="fu">=</span> <span class="dt">RIO</span> <span class="dt">Env</span></a>
<a class="sourceLine" id="cb17-2" data-line-number="2"></a>
<a class="sourceLine" id="cb17-3" data-line-number="3"><span class="kw">type</span> <span class="dt">Env</span> <span class="fu">=</span> <span class="dt">Record</span></a>
<a class="sourceLine" id="cb17-4" data-line-number="4">  <span class="ch">&#39;[ &quot;date&quot; &gt;: Date</span></a>
<a class="sourceLine" id="cb17-5" data-line-number="5">   ]</a></code></pre></div>
<p><code>run</code> 関数も書き直してやる．</p>
<div class="sourceCode" id="cb18"><pre class="sourceCode haskell"><code class="sourceCode haskell"><a class="sourceLine" id="cb18-1" data-line-number="1"><span class="ot">run ::</span> <span class="dt">MonadUnliftIO</span> m <span class="ot">=&gt;</span> <span class="dt">Options</span> <span class="ot">-&gt;</span> m ()</a>
<a class="sourceLine" id="cb18-2" data-line-number="2">run opts <span class="fu">=</span> <span class="kw">do</span></a>
<a class="sourceLine" id="cb18-3" data-line-number="3">  date <span class="ot">&lt;-</span> maybe getTodaysDate pure <span class="fu">$</span> opts <span class="fu">^.</span> <span class="fu">#</span>date</a>
<a class="sourceLine" id="cb18-4" data-line-number="4">  <span class="kw">let</span> env <span class="fu">=</span> <span class="fu">#</span>date   <span class="fu">@=</span> date</a>
<a class="sourceLine" id="cb18-5" data-line-number="5">         <span class="fu">&lt;:</span> nil</a>
<a class="sourceLine" id="cb18-6" data-line-number="6">  runRIO env <span class="fu">$</span></a>
<a class="sourceLine" id="cb18-7" data-line-number="7">    matchField</a>
<a class="sourceLine" id="cb18-8" data-line-number="8">      (htabulateFor (<span class="dt">Proxy</span> <span class="fu">@</span> <span class="dt">Run</span>) <span class="fu">$</span> \m <span class="ot">-&gt;</span> <span class="dt">Field</span> (<span class="dt">Match</span> <span class="fu">$</span> run&#39; m <span class="fu">.</span> runIdentity))</a>
<a class="sourceLine" id="cb18-9" data-line-number="9">      (opts <span class="fu">^.</span> <span class="fu">#</span>subcmd)</a>
<a class="sourceLine" id="cb18-10" data-line-number="10"></a>
<a class="sourceLine" id="cb18-11" data-line-number="11"><span class="kw">class</span> <span class="dt">Run</span> kv <span class="kw">where</span></a>
<a class="sourceLine" id="cb18-12" data-line-number="12"><span class="ot">  run&#39; ::</span> proxy kv <span class="ot">-&gt;</span> <span class="dt">AssocValue</span> kv <span class="ot">-&gt;</span> <span class="dt">TaskPad</span> ()</a></code></pre></div>
<p>試しに <code>new</code> サブコマンドを書いてみよう．</p>
<div class="sourceCode" id="cb19"><pre class="sourceCode haskell"><code class="sourceCode haskell"><a class="sourceLine" id="cb19-1" data-line-number="1"><span class="kw">instance</span> <span class="dt">Run</span> (<span class="st">&quot;new&quot;</span> <span class="fu">&gt;:</span> ()) <span class="kw">where</span></a>
<a class="sourceLine" id="cb19-2" data-line-number="2">  run&#39; _ _ <span class="fu">=</span> <span class="kw">do</span></a>
<a class="sourceLine" id="cb19-3" data-line-number="3">    date <span class="ot">&lt;-</span> asks (view <span class="fu">#</span>date)</a>
<a class="sourceLine" id="cb19-4" data-line-number="4">    writeMemo <span class="fu">$</span> mkMemo date</a></code></pre></div>
<p><code>mkMemo</code> や <code>writeMemo</code> については次のように定義している． <code>Memo</code> 型も拡張可能レコードだ． 最近の extensible のアップデートで拡張可能レコードが <code>ToJson</code> 型クラスと <code>FromJson</code> 型クラスのインスタンスになったので，Yaml への変換は特にインスタンスを書くことなく行えるようになった．</p>
<div class="sourceCode" id="cb20"><pre class="sourceCode haskell"><code class="sourceCode haskell"><a class="sourceLine" id="cb20-1" data-line-number="1"><span class="kw">import</span> <span class="kw">qualified</span> <span class="dt">Data.Yaml</span> <span class="kw">as</span> <span class="dt">Y</span></a>
<a class="sourceLine" id="cb20-2" data-line-number="2"></a>
<a class="sourceLine" id="cb20-3" data-line-number="3"><span class="kw">type</span> <span class="dt">Memo</span> <span class="fu">=</span> <span class="dt">Record</span></a>
<a class="sourceLine" id="cb20-4" data-line-number="4">  <span class="ch">&#39;[ &quot;date&quot;  &gt;: Date</span></a>
<a class="sourceLine" id="cb20-5" data-line-number="5">   , <span class="st">&quot;tasks&quot;</span> <span class="fu">&gt;:</span> <span class="dt">Map</span> <span class="dt">Int</span> <span class="dt">Task</span></a>
<a class="sourceLine" id="cb20-6" data-line-number="6">   , <span class="st">&quot;memo&quot;</span>  <span class="fu">&gt;:</span> [<span class="dt">Text</span>]</a>
<a class="sourceLine" id="cb20-7" data-line-number="7">   ]</a>
<a class="sourceLine" id="cb20-8" data-line-number="8"></a>
<a class="sourceLine" id="cb20-9" data-line-number="9"><span class="kw">type</span> <span class="dt">Task</span> <span class="fu">=</span> <span class="dt">Record</span> (<span class="dt">TaskFields</span> <span class="fu">++</span> <span class="ch">&#39;[&quot;children&quot; &gt;: [SubTask]])</span></a>
<a class="sourceLine" id="cb20-10" data-line-number="10"><span class="kw">type</span> <span class="dt">SubTask</span> <span class="fu">=</span> <span class="dt">Record</span> <span class="dt">TaskFields</span></a>
<a class="sourceLine" id="cb20-11" data-line-number="11"></a>
<a class="sourceLine" id="cb20-12" data-line-number="12"><span class="kw">type</span> <span class="dt">TaskFields</span> <span class="fu">=</span></a>
<a class="sourceLine" id="cb20-13" data-line-number="13">  <span class="ch">&#39;[ &quot;name&quot; &gt;: Text</span></a>
<a class="sourceLine" id="cb20-14" data-line-number="14">   , <span class="st">&quot;done&quot;</span> <span class="fu">&gt;:</span> <span class="dt">Bool</span></a>
<a class="sourceLine" id="cb20-15" data-line-number="15">   ]</a>
<a class="sourceLine" id="cb20-16" data-line-number="16"></a>
<a class="sourceLine" id="cb20-17" data-line-number="17"><span class="ot">mkMemo ::</span> <span class="dt">Date</span> <span class="ot">-&gt;</span> <span class="dt">Memo</span></a>
<a class="sourceLine" id="cb20-18" data-line-number="18">mkMemo date</a>
<a class="sourceLine" id="cb20-19" data-line-number="19">    <span class="fu">=</span> <span class="fu">#</span>date  <span class="fu">@=</span> date</a>
<a class="sourceLine" id="cb20-20" data-line-number="20">   <span class="fu">&lt;:</span> <span class="fu">#</span>tasks <span class="fu">@=</span> mempty</a>
<a class="sourceLine" id="cb20-21" data-line-number="21">   <span class="fu">&lt;:</span> <span class="fu">#</span>memo  <span class="fu">@=</span> mempty</a>
<a class="sourceLine" id="cb20-22" data-line-number="22">   <span class="fu">&lt;:</span> nil</a>
<a class="sourceLine" id="cb20-23" data-line-number="23"></a>
<a class="sourceLine" id="cb20-24" data-line-number="24"><span class="ot">writeMemo ::</span> <span class="dt">MonadIO</span> m <span class="ot">=&gt;</span> <span class="dt">Memo</span> <span class="ot">-&gt;</span> m ()</a>
<a class="sourceLine" id="cb20-25" data-line-number="25">writeMemo memo <span class="fu">=</span></a>
<a class="sourceLine" id="cb20-26" data-line-number="26">  writeFileBinary (Text.unpack <span class="fu">$</span> memo <span class="fu">^.</span> <span class="fu">#</span>date <span class="fu">&lt;&gt;</span> <span class="st">&quot;.yaml&quot;</span>) (Y.encode memo)</a></code></pre></div>
<h3 id="rio-でロギング">rio でロギング</h3>
<p>ロギングは実用アプリケーションの重要な要素だろう． <code>rio</code> であればまぁまぁ簡単に書ける．</p>
<p>まずは <code>Env</code> にロギング用の関数を足してやる． <a href="https://hackage.haskell.org/package/rio-0.1.2.0/docs/RIO.html#t:LogFunc"><code>LogFunc</code></a> 型や <a href="https://hackage.haskell.org/package/rio-0.1.2.0/docs/RIO.html#t:HasLogFunc"><code>HasLogFunc</code></a> 型クラスは <code>rio</code> ライブラリに定義されているものだ．</p>
<div class="sourceCode" id="cb21"><pre class="sourceCode haskell"><code class="sourceCode haskell"><a class="sourceLine" id="cb21-1" data-line-number="1"><span class="kw">type</span> <span class="dt">Env</span> <span class="fu">=</span> <span class="dt">Record</span></a>
<a class="sourceLine" id="cb21-2" data-line-number="2">  <span class="ch">&#39;[ &quot;date&quot;   &gt;: Date</span></a>
<a class="sourceLine" id="cb21-3" data-line-number="3">   , <span class="st">&quot;logger&quot;</span> <span class="fu">&gt;:</span> <span class="dt">LogFunc</span></a>
<a class="sourceLine" id="cb21-4" data-line-number="4">   ]</a>
<a class="sourceLine" id="cb21-5" data-line-number="5"></a>
<a class="sourceLine" id="cb21-6" data-line-number="6"><span class="kw">instance</span> <span class="dt">HasLogFunc</span> <span class="dt">Env</span> <span class="kw">where</span></a>
<a class="sourceLine" id="cb21-7" data-line-number="7">  logFuncL <span class="fu">=</span> lens (view <span class="fu">#</span>logger) (\x y <span class="ot">-&gt;</span> x <span class="fu">&amp;</span> <span class="fu">#</span>logger <span class="ot">`set`</span> y)</a></code></pre></div>
<p>実はこれだけで <code>TaskPad</code> モナド(すなわち <code>RIO Env</code> モナド)の中で自由にロギング関数を呼べるようになる． 試しに <code>new</code> サブコマンドにロギングを足してみよう． <a href="https://hackage.haskell.org/package/rio-0.1.2.0/docs/RIO.html#v:logInfo"><code>logInfo</code></a> 関数がロギング関数のひとつだ．</p>
<div class="sourceCode" id="cb22"><pre class="sourceCode haskell"><code class="sourceCode haskell"><a class="sourceLine" id="cb22-1" data-line-number="1"><span class="kw">instance</span> <span class="dt">Run</span> (<span class="st">&quot;new&quot;</span> <span class="fu">&gt;:</span> ()) <span class="kw">where</span></a>
<a class="sourceLine" id="cb22-2" data-line-number="2">  run&#39; _ _ <span class="fu">=</span> <span class="kw">do</span></a>
<a class="sourceLine" id="cb22-3" data-line-number="3">    date <span class="ot">&lt;-</span> asks (view <span class="fu">#</span>date)</a>
<a class="sourceLine" id="cb22-4" data-line-number="4">    writeMemo <span class="fu">$</span> mkMemo date</a>
<a class="sourceLine" id="cb22-5" data-line-number="5">    logInfo (display <span class="fu">$</span> <span class="st">&quot;create new task&#39;s file: &quot;</span> <span class="fu">&lt;&gt;</span> date <span class="fu">&lt;&gt;</span> <span class="st">&quot;.yaml&quot;</span>)</a></code></pre></div>
<p>あとは <code>run</code> 関数を書き換えよう(<code>Env</code> 型の中身が変わったので)．</p>
<div class="sourceCode" id="cb23"><pre class="sourceCode haskell"><code class="sourceCode haskell"><a class="sourceLine" id="cb23-1" data-line-number="1"><span class="ot">run ::</span> <span class="dt">MonadUnliftIO</span> m <span class="ot">=&gt;</span> <span class="dt">Options</span> <span class="ot">-&gt;</span> m ()</a>
<a class="sourceLine" id="cb23-2" data-line-number="2">run opts <span class="fu">=</span> <span class="kw">do</span></a>
<a class="sourceLine" id="cb23-3" data-line-number="3">  date    <span class="ot">&lt;-</span> maybe getTodaysDate pure <span class="fu">$</span> opts <span class="fu">^.</span> <span class="fu">#</span>date</a>
<a class="sourceLine" id="cb23-4" data-line-number="4">  logOpts <span class="ot">&lt;-</span> logOptionsHandle stdout (opts <span class="fu">^.</span> <span class="fu">#</span>verbose)</a>
<a class="sourceLine" id="cb23-5" data-line-number="5">  withLogFunc logOpts <span class="fu">$</span> \logger <span class="ot">-&gt;</span> <span class="kw">do</span></a>
<a class="sourceLine" id="cb23-6" data-line-number="6">    <span class="kw">let</span> env <span class="fu">=</span> <span class="fu">#</span>date   <span class="fu">@=</span> date</a>
<a class="sourceLine" id="cb23-7" data-line-number="7">           <span class="fu">&lt;:</span> <span class="fu">#</span>logger <span class="fu">@=</span> logger</a>
<a class="sourceLine" id="cb23-8" data-line-number="8">           <span class="fu">&lt;:</span> nil</a>
<a class="sourceLine" id="cb23-9" data-line-number="9">    runRIO env <span class="fu">$</span></a>
<a class="sourceLine" id="cb23-10" data-line-number="10">      matchField</a>
<a class="sourceLine" id="cb23-11" data-line-number="11">        (htabulateFor (<span class="dt">Proxy</span> <span class="fu">@</span> <span class="dt">Run</span>) <span class="fu">$</span> \m <span class="ot">-&gt;</span> <span class="dt">Field</span> (<span class="dt">Match</span> <span class="fu">$</span> run&#39; m <span class="fu">.</span> runIdentity))</a>
<a class="sourceLine" id="cb23-12" data-line-number="12">        (opts <span class="fu">^.</span> <span class="fu">#</span>subcmd)</a></code></pre></div>
<p><code>LogFunc</code> 型の値を得るには <a href="https://hackage.haskell.org/package/rio-0.1.2.0/docs/RIO.html#v:withLogFunc"><code>withLogFunc</code></a> 関数を用いるのが良いだろう． <a href="https://hackage.haskell.org/package/rio-0.1.2.0/docs/RIO.html#t:LogOptions"><code>LogOptions</code></a> 型の値(ここでいう <code>logOpts</code>)を生成する <a href="https://hackage.haskell.org/package/rio-0.1.2.0/docs/RIO.html#v:logOptionsHandle"><code>logOptionsHandle</code></a> 関数の二引数目に <code>True</code> を与えることでログがデバッグ仕様になる(そういえば <code>Options</code> 型には <code>--verbose</code> オプションがあった)． ちなみに，デバッグ仕様のときにだけ表示するロギング関数として <a href="https://hackage.haskell.org/package/rio-0.1.2.0/docs/RIO.html#v:logDebug"><code>logDebug</code></a> 関数がある．</p>
<h2 id="おしまい">おしまい</h2>
<p>早く完成させるぞ</p>
  </div>
</div>
</article>
]]></summary>
</entry>
<entry>
    <title>rio ライブラリを試す その１</title>
    <link href="https://matsubara0507.github.io/posts/2018-04-13-try-rio-1.html" />
    <id>https://matsubara0507.github.io/posts/2018-04-13-try-rio-1.html</id>
    <published>2018-04-13T00:00:00Z</published>
    <updated>2018-04-13T00:00:00Z</updated>
    <summary type="html"><![CDATA[<article class="post card" itemscope itemtype="http://schema.org/BlogPosting">
 <div class="card-content">
  <header class="post-header">
    <h1 class="post-title" itemprop="name headline">rio ライブラリを試す その１</h1>
    <p class="post-meta">
      <time datetime="2018-04-13" itemprop="datePublished">
        Apr 13, 2018
      </time>
      
      
      <div class="tags">
          <i class="fa fa-tags"></i> <a href="/tags/Haskell.html">Haskell</a> <a href="/tags/rio.html">rio</a>
      </div>
      
    </p>
  </header>

  <div class="post-content" itemprop="articleBody">
    <p>先日，alt. <code>Prelude</code> を目指している <a href="https://hackage.haskell.org/package/rio"><code>rio</code></a> ライブラリの ver.0.1 がリリースされました． 自作している CLI ツールを試しに <code>rio</code> で置き換えようかとしてまして，自分の整理のためにまとめてみようと思います．</p>
<h2 id="section"></h2>
<p>ただし，<code>rio</code> 作者ではないし，全部をちゃんと追っていないので間違っているかも． 間違っている場合は<a href="https://github.com/matsubara0507/source-gh-pages">このリポジトリに Issue</a> するか <a href="https://www.reddit.com/r/haskell_jp">Reddit</a> でコメントでもしてください m(_ _ )m</p>
<h1 id="readme-でひとめぐり">README でひとめぐり</h1>
<p>もともとはビルドツール Stack を作成するために考えたデザインパターンをまとめたものっぽい．</p>
<ul>
<li><a href="https://www.fpcomplete.com/blog/2017/07/the-rio-monad">The RIO Monad</a></li>
</ul>
<p><code>rio</code> ライブラリの README にはライブラリのゴール・目的の他に(彼らにとっての)ベストプラクティスが書いてある(<code>rio</code> 自体がそれに則って作られてる)． ここには翻訳というより，README の各項目の要約を記述する．</p>
<h2 id="goal">Goal</h2>
<p><code>rio</code> ライブラリのゴール(目的)は以下の3つ．</p>
<ol type="1">
<li>よく設計された信頼できるライブラリのコレクション</li>
<li>より優れた Prelude の代替え</li>
<li>高品質な Haskell コードを書くためのベストプラクティス</li>
</ol>
<p>(1)により <code>text</code> や <code>bytesyring</code> のような，ほとんど <code>base</code> のようなパッケージを <code>dependencies</code> に列挙する必要が無くなる． (3)は大域変数(<code>Reader</code> モナド)やロガーのような実用モナド回りのベストプラクティスが目玉かな(他にもあるけど)．</p>
<h2 id="標準ライブラリ">標準ライブラリ</h2>
<p>いくつかのパッケージを「標準」ライブラリとして再エクスポートしている． <code>rio</code> の<a href="https://github.com/commercialhaskell/rio/blob/311549f5a7c29abf6fc25e3ba7ec5ab6647e2d96/rio/package.yaml#L14">依存関係</a>を見る限り，次のパッケージを再エクスポートしているようだ．</p>
<ul>
<li>bytestring</li>
<li>containers</li>
<li>deepseq</li>
<li>directory</li>
<li>exceptions</li>
<li>filepath</li>
<li>hashable</li>
<li>lens(microlens)</li>
<li>process</li>
<li>text</li>
<li>time</li>
<li>unliftio</li>
<li>unordered-containers</li>
<li>vector</li>
</ul>
<p>もちろん，元のパッケージの全ての関数や型を再エクスポートしているのではなく，取捨選択して再エクスポートしている． また，後述する <code>Prelude</code> の代わりである <a href="https://hackage.haskell.org/package/rio-0.1.0.0/docs/RIO.html"><code>RIO</code></a> モジュールに含まれるものもあれば，<code>RIO.XXX</code> として別のモジュールとして提供されているものもある．</p>
<h3 id="lens">Lens</h3>
<p><code>lens</code> の場合，申し訳程度の関数しか再エクスポートされていない． 基本的に <code>set</code>・<code>sets</code>・<code>over</code>・<code>to</code> だけだ． 演算子は参照の <code>(.^)</code> しかない． 今後どうなるか分からないが，現状 <code>(.~)</code> や <code>(%~)</code> は無いので替わりに関数を中置演算子にして使うしか無さそうだ．</p>
<h2 id="prelude-の代替え"><code>Prelude</code> の代替え</h2>
<p><code>Prelude</code> の代替えとして <a href="https://hackage.haskell.org/package/rio-0.1.0.0/docs/RIO.html"><code>RIO</code></a> モジュールというのがある． README には部分関数や遅延 I/O のような，よく問題になるものを削除していると書いてある． また，<code>Data.Maybe</code> や <code>Control.Arrow</code> のような良く使う <code>base</code> ライブラリのモジュールが再エクスポートされていたり，<code>mapLeft</code> や <code>whenM</code> のような良く使いそうなのに <code>base</code> には無い関数が<a href="https://github.com/commercialhaskell/rio/blob/e8c4cba69599aecd9f91c4398aea47ab4eadbb07/rio/src/RIO/Prelude/Extra.hs">定義されている</a>． 正直，この辺りがすごい便利．</p>
<h2 id="ベストプラクティス">ベストプラクティス</h2>
<p>ココからが長い + 意見の分かれるところ． 結構 <code>TODO</code> と書いてあるところも多いので彼らの中でもまとまってないのかな？？</p>
<h3 id="インポートプラクティス">インポートプラクティス</h3>
<p>以下をやってほしいらしい</p>
<ul>
<li><code>NoImplicitPrelude</code> 言語拡張をオン</li>
<li>全てのモジュールに <code>import RIO</code> を追加 (すごいめんどい)</li>
<li>必要に応じて <code>RIO.XXX</code> モジュールを <code>qualified</code> を使ってインポート
<ul>
<li>適切な <code>qualified</code> の付け方は各モジュールの Haddock の冒頭に書いてある</li>
<li>例えば <a href="https://hackage.haskell.org/package/rio-0.1.0.0/docs/RIO-ByteString.html"><code>import qualified RIO.ByteString as B</code></a> とか</li>
<li>ドキュメントに <code>qualified</code> が書いてない場合は <code>qualified</code> しなくていいのかな？？(例えば <a href="https://hackage.haskell.org/package/rio-0.1.0.0/docs/RIO-Directory.html"><code>RIO.Directory</code></a> とか)</li>
</ul></li>
<li>中置演算子は <code>qualified</code> しなくていい(他のモジュールと衝突しない限りは)</li>
</ul>
<h3 id="言語拡張">言語拡張</h3>
<p>「言語拡張を使わないプロジェクトなんて，最近じゃほとんどないよね」とか書いてある． 以下の観点を基にデフォルトで利用しても良さそうな言語拡張を選定したそうだ．</p>
<ul>
<li>コミュニティで受け入れられている</li>
<li>コードを壊すようなことが <strong>ほとんど</strong> ない</li>
<li><strong>一般的に</strong> 安全だと考えられている</li>
</ul>
<p>割と断言していないのが面白い(笑) 推奨する言語拡張はこちら</p>
<pre><code>AutoDeriveTypeable
BangPatterns
BinaryLiterals
ConstraintKinds
DataKinds
DefaultSignatures
DeriveDataTypeable
DeriveFoldable
DeriveFunctor
DeriveGeneric
DeriveTraversable
DoAndIfThenElse
EmptyDataDecls
ExistentialQuantification
FlexibleContexts
FlexibleInstances
FunctionalDependencies
GADTs
GeneralizedNewtypeDeriving
InstanceSigs
KindSignatures
LambdaCase
MultiParamTypeClasses
MultiWayIf
NamedFieldPuns
NoImplicitPrelude
OverloadedStrings
PartialTypeSignatures
PatternGuards
PolyKinds
RankNTypes
RecordWildCards
ScopedTypeVariables
StandaloneDeriving
TupleSections
TypeFamilies
TypeSynonymInstances
ViewPatterns</code></pre>
<p><code>RecordWildCards</code> と <code>OverloadedStrings</code> は議論の余地あり的なことが書いてある(詳しくはもとの README を見て)．</p>
<h3 id="ghcオプション">GHCオプション</h3>
<p>以下を使いなさいとのコト．</p>
<pre><code>-Wall
-Wcompat
-Wincomplete-record-updates
-Wincomplete-uni-patterns
-Wredundant-constraints</code></pre>
<p>どういう形で指定してもいいけど，<code>package.yaml</code> で書くと楽だし，後述するテンプレートにも書く予定だそうだ． あと，プロダクションコードなら <code>-Werror</code> をオンにして，最後には確認した方が良いとも書いてある(CIとかでチェックしたいよね)．</p>
<h3 id="monads">Monads</h3>
<p>まってました！ モナドです． 実用的なプロジェクトを考えるとき，必要になってくるのが大域変数・ロガー・例外・IO だと思うので，気になるのはこの辺りだよね．</p>
<p>全体としての推奨事項は以下の通り．</p>
<ul>
<li><code>IO</code> を使いたいときは <code>RIO</code> モナドを使いなさい．
<ul>
<li><code>RIO</code> モナドは <code>ReaderT env IO</code> と同じだけど，<code>rio</code> には <code>RIO</code> モナドに対する補助関数が含まれるのでぜひ使って．<br />
</li>
</ul></li>
<li><code>RIO</code> モナドで <code>env</code> の参照関数を書くときは，具体的な型に対する参照関数を書かずに，型クラスを用いた多相的な関数を書くべき(詳しくは後述)
<ul>
<li><code>Has</code> スタイルの型クラスを使えば lens を利用することが出来るよ</li>
</ul></li>
<li>いくつかの良い <code>mtl</code> スタイルの型クラスも利用する必要は出てくるはず
<ul>
<li>ただし，推奨しているのは <code>MonadReader</code> <code>MonadIO</code> <code>MonadUnliftIO</code> <code>PrimMonad</code></li>
<li><code>MonadReader</code> + <code>Has</code> の方が <code>MonadLogger</code> のように新しい型クラスを作るより優れていると思う</li>
<li>特に <code>MonadBase</code> <code>MonadBaseControl</code> <code>MonadMask</code> <code>MonadCatch</code> は避けるべき</li>
</ul></li>
</ul>
<h4 id="大域変数">大域変数</h4>
<p><code>env</code> 回りについて． <code>Has</code> スタイル(パターン)というのがあって，それ自体はこの<a href="https://hackernoon.com/the-has-type-class-pattern-ca12adab70ae">ページ</a>が参考になるのかな？ <code>env</code> から何らかの値を参照する場合には</p>
<div class="sourceCode" id="cb3"><pre class="sourceCode haskell"><code class="sourceCode haskell"><a class="sourceLine" id="cb3-1" data-line-number="1"><span class="ot">myFunction ::</span> <span class="dt">RIO</span> <span class="dt">Config</span> <span class="dt">Foo</span></a></code></pre></div>
<p>のような関数は <strong>やめて</strong> ，次のように書くのを推奨している．</p>
<div class="sourceCode" id="cb4"><pre class="sourceCode haskell"><code class="sourceCode haskell"><a class="sourceLine" id="cb4-1" data-line-number="1"><span class="kw">class</span> <span class="dt">HasConfig</span> env <span class="kw">where</span></a>
<a class="sourceLine" id="cb4-2" data-line-number="2"><span class="ot">  configL ::</span> <span class="dt">Lens&#39;</span> env <span class="dt">Config</span> <span class="co">-- more on this in a moment</span></a>
<a class="sourceLine" id="cb4-3" data-line-number="3"></a>
<a class="sourceLine" id="cb4-4" data-line-number="4"><span class="ot">myFunction ::</span> <span class="dt">HasConfig</span> env <span class="ot">=&gt;</span> <span class="dt">RIO</span> env <span class="dt">Foo</span></a></code></pre></div>
<p>ここで，<code>env</code> は次のようなレコードを想定しており</p>
<div class="sourceCode" id="cb5"><pre class="sourceCode haskell"><code class="sourceCode haskell"><a class="sourceLine" id="cb5-1" data-line-number="1"><span class="kw">data</span> <span class="dt">Env</span> <span class="fu">=</span> <span class="dt">Env</span> {<span class="ot"> envConfig ::</span> <span class="fu">!</span><span class="dt">Config</span> }</a></code></pre></div>
<p>こうすることで，<code>env</code> に複数の大域変数を持たせても，うまく機能させることが出来る． また，次のように <code>Env</code> と <code>Config</code> それぞれでインスタンスを定義することで，それぞれで利用できる．</p>
<div class="sourceCode" id="cb6"><pre class="sourceCode haskell"><code class="sourceCode haskell"><a class="sourceLine" id="cb6-1" data-line-number="1"><span class="kw">instance</span> <span class="dt">HasConfig</span> <span class="dt">Config</span> <span class="kw">where</span></a>
<a class="sourceLine" id="cb6-2" data-line-number="2">  configL <span class="fu">=</span> id</a>
<a class="sourceLine" id="cb6-3" data-line-number="3"></a>
<a class="sourceLine" id="cb6-4" data-line-number="4"><span class="kw">instance</span> <span class="dt">HasConfig</span> <span class="dt">Env</span> <span class="kw">where</span></a>
<a class="sourceLine" id="cb6-5" data-line-number="5">  configL <span class="fu">=</span> lens envConfig (\x y <span class="ot">-&gt;</span> x { envConfig <span class="fu">=</span> y })</a></code></pre></div>
<h4 id="ロガー">ロガー</h4>
<p>ロガーも同様に <code>Has</code> スタイルを推奨している． <code>env</code> にログを出力するための関数(<a href="https://hackage.haskell.org/package/rio-0.1.0.0/docs/RIO.html#t:LogFunc"><code>LogFunc</code></a> 型のもの)を持たせる．</p>
<div class="sourceCode" id="cb7"><pre class="sourceCode haskell"><code class="sourceCode haskell"><a class="sourceLine" id="cb7-1" data-line-number="1"><span class="kw">data</span> <span class="dt">Env</span> <span class="fu">=</span> <span class="dt">Env</span> {<span class="ot"> envLogFunc ::</span> <span class="fu">!</span><span class="dt">LogFunc</span>,<span class="ot"> envConfig ::</span> <span class="fu">!</span><span class="dt">Config</span> }</a></code></pre></div>
<p>これの <code>Has</code> スタイル型クラスは <code>RIO</code> モジュールに<a href="https://hackage.haskell.org/package/rio-0.1.0.0/docs/RIO.html#t:HasLogFunc">定義してある</a>．</p>
<div class="sourceCode" id="cb8"><pre class="sourceCode haskell"><code class="sourceCode haskell"><a class="sourceLine" id="cb8-1" data-line-number="1"><span class="kw">instance</span> <span class="dt">HasLogFunc</span> <span class="dt">Env</span> <span class="kw">where</span></a>
<a class="sourceLine" id="cb8-2" data-line-number="2">  logFuncL <span class="fu">=</span> lens envLogFunc (\x y <span class="ot">-&gt;</span> x { envLogFunc <span class="fu">=</span> y })</a></code></pre></div>
<p><code>LogFunc</code> 型の値を渡すには <a href="https://hackage.haskell.org/package/rio-0.1.0.0/docs/RIO.html#v:withLogFunc"><code>withLogFunc</code></a> 関数を用いるようだ(<a href="https://hackage.haskell.org/package/rio-0.1.0.0/docs/RIO.html#v:mkLogFunc"><code>mkLogFunc</code></a> 関数もあるがアドバンスドと書いてある．)．</p>
<div class="sourceCode" id="cb9"><pre class="sourceCode haskell"><code class="sourceCode haskell"><a class="sourceLine" id="cb9-1" data-line-number="1"><span class="ot">main ::</span> <span class="dt">IO</span> ()</a>
<a class="sourceLine" id="cb9-2" data-line-number="2">main <span class="fu">=</span> <span class="kw">do</span></a>
<a class="sourceLine" id="cb9-3" data-line-number="3">  envConfig <span class="ot">&lt;-</span> getConfig</a>
<a class="sourceLine" id="cb9-4" data-line-number="4">  logOpts <span class="ot">&lt;-</span> logOptionsHandle stdout <span class="dt">False</span></a>
<a class="sourceLine" id="cb9-5" data-line-number="5">  withLogFunc logOpts <span class="fu">$</span> \envLogFunc <span class="ot">-&gt;</span> runRIO <span class="dt">Env</span>{<span class="fu">..</span>} action</a>
<a class="sourceLine" id="cb9-6" data-line-number="6"></a>
<a class="sourceLine" id="cb9-7" data-line-number="7"><span class="ot">action ::</span> <span class="dt">RIO</span> <span class="dt">Env</span> ()</a>
<a class="sourceLine" id="cb9-8" data-line-number="8">action <span class="fu">=</span> <span class="fu">...</span></a></code></pre></div>
<h4 id="例外">例外</h4>
<p>例外をどのように表現すべきかは結構議論されており，今のところの基本的アイデアは以下の通り．</p>
<ul>
<li><code>lookup</code> のような単純に失敗する関数(部分関数になり得る？)の場合は <code>Maybe</code> や <code>Either</code> を返そう</li>
<li>それらを使いたくない場合(大域脱出とか？)は例外を使って
<ul>
<li>純粋なコード(IOではなく)の場合は <code>MonadThrow</code> 制約を使う</li>
<li><code>IO</code> の場合は <code>thorowIO</code> を介した実行時例外を使う(<code>RIO</code> モナドも同じ)</li>
</ul></li>
<li>「IOアクションがどのように失敗するかを正確に把握できないことにより，不安と不満を感じるかもしれない．しかし，その痛みを受け入れて共存し内在化して，<code>tryAny</code> を用いて移動してください．これは非同期例外に対して支払う代償です．」
<ul>
<li>ちょっと何言ってるかよくわからない…</li>
</ul></li>
<li>全てのリソース割り当ては <code>bracket</code> や <code>finally</code> のような関数で行う</li>
</ul>
<p>以下のようにして，アプリ専用の例外を定義し使用することが推奨されている．</p>
<div class="sourceCode" id="cb10"><pre class="sourceCode haskell"><code class="sourceCode haskell"><a class="sourceLine" id="cb10-1" data-line-number="1"><span class="kw">data</span> <span class="dt">AppExceptions</span></a>
<a class="sourceLine" id="cb10-2" data-line-number="2">  <span class="fu">=</span> <span class="dt">NetworkChangeError</span> <span class="dt">Text</span></a>
<a class="sourceLine" id="cb10-3" data-line-number="3">  <span class="fu">|</span> <span class="dt">FilePathError</span> FilePath</a>
<a class="sourceLine" id="cb10-4" data-line-number="4">  <span class="fu">|</span> <span class="dt">ImpossibleError</span></a>
<a class="sourceLine" id="cb10-5" data-line-number="5">  <span class="kw">deriving</span> (<span class="dt">Typeable</span>)</a>
<a class="sourceLine" id="cb10-6" data-line-number="6"></a>
<a class="sourceLine" id="cb10-7" data-line-number="7"><span class="kw">instance</span> <span class="dt">Exception</span> <span class="dt">AppExceptions</span></a>
<a class="sourceLine" id="cb10-8" data-line-number="8"></a>
<a class="sourceLine" id="cb10-9" data-line-number="9"><span class="kw">instance</span> <span class="dt">Show</span> <span class="dt">AppExceptions</span> <span class="kw">where</span></a>
<a class="sourceLine" id="cb10-10" data-line-number="10">  show <span class="fu">=</span> \<span class="kw">case</span></a>
<a class="sourceLine" id="cb10-11" data-line-number="11">    <span class="dt">NetworkChangeError</span> err <span class="ot">-&gt;</span> <span class="st">&quot;network error: &quot;</span> <span class="fu">&lt;&gt;</span> (unpack err)</a>
<a class="sourceLine" id="cb10-12" data-line-number="12">    <span class="dt">FilePathError</span> fp <span class="ot">-&gt;</span> <span class="st">&quot;error accessing filepath at: &quot;</span> <span class="fu">&lt;&gt;</span> fp</a>
<a class="sourceLine" id="cb10-13" data-line-number="13">    <span class="dt">ImpossibleError</span> <span class="ot">-&gt;</span> <span class="st">&quot;this codepath should never have been executed. Please report a bug.&quot;</span></a></code></pre></div>
<p>ちなみに，<code>Exception</code> 型クラス(というか <a href="https://hackage.haskell.org/package/base-4.11.0.0/docs/Control-Exception-Base.html#t:SomeException"><code>SomeException</code></a> 型)は，いわゆる存在型を利用して具体型(<code>AppExceptions</code> とか)を隠蔽している．</p>
<h2 id="section-1"></h2>
<p>疑問なところは，投げた例外を <code>catch</code> してからディスパッチして良いのだろうか？ 実行時例外じゃなくて大域脱出をしたいだけなんだけどな． ちょっとイマイチ使い方が分からない．</p>
<h3 id="strict">Strict</h3>
<p>特別な理由が無い限り，データフィールド(レコードのフィールド？？)は正格にすべき，とのこと． 割と重要そうなのに一文しかない．</p>
<h3 id="プロジェクトテンプレート">プロジェクトテンプレート</h3>
<p>そのうち，新しい Stack テンプレートを作るそうだ． もちろん，<code>cabal</code> ファイルは使わず <code>hpack</code> を使用する．</p>
<h3 id="安全第一">安全第一</h3>
<p><code>rio</code> は安全性を最優先しており，そのため部分関数と遅延 I/O を全力で避けている． もし，遅延 I/O を使いたい場合は <code>conduit</code> のようなストリーミングライブラリを使いなさい，とのこと．</p>
<h3 id="一般化">一般化</h3>
<p>Haskell のよくある疑問として，いつ一般化すべきか，というのがある(いつ？)． README にはいくつかの簡単なガイドラインが書いてある．</p>
<p>パラメトリック多相の場合，わりと議論の余地が無く，多相的な方が有用． つまり，<code>reverse :: [a] -&gt; [a]</code> は <code>reverse :: [Int] -&gt; [Int]</code> より優れている．</p>
<p>型クラスの場合は話が微妙になる． <code>Foldable</code> や <code>Traversable</code> のような <code>RIO</code> で定義済みの型クラスには可能な限り一般化(インスタンスを定義)するのが良いだろう． しかし，本当の疑問は <strong>自身で型クラスを定義すべきかどうか</strong> の場合． 原則としては可能な限りそれは避けるべきだ． もし，自身で型クラスを定義している場合は，<strong>自分が期待していなかった型がインスタンス化されてもバグが起きないよう</strong> に気を付けること，とのこと．</p>
<h3 id="コーディングスタイル">コーディングスタイル</h3>
<p>議論中だそうだ．</p>
<h3 id="モジュール階層">モジュール階層</h3>
<p><code>RIO.Prelude.XXX</code> モジュールはドキュメントを Haddock で読みやすくするための階層で，個別にインポートすることを想定しているわけではない． と書いてあるが，結局 <a href="https://github.com/commercialhaskell/rio/pull/72">ver.0.1 からは Haddock からも消えてしまった</a>ので気にする必要はない．</p>
<h1 id="io-まわり">I/O まわり</h1>
<p>(この話は README に書いてあるわけではないです)</p>
<p><code>RIO</code> モジュールには文字列型(<code>String</code>)の一般的な <code>putStr</code> や <code>getLine</code> のような I/O 関数は無い． 実用コードの場合，これらの関数を直接呼ぶことは稀だろうが，例えば CLI を作ったときに <code>--version</code> オプションでバージョン情報を出力したい場合などがある．</p>
<p>替わりとして次のような I/O 関数が提供されている．</p>
<ul>
<li><code>Strict.ByteString</code> 型の <code>putStr</code> や <code>getLine</code> であれば <code>RIO.ByteString</code> モジュールで再定義されている</li>
<li>ファイルの入出力であれば <code>RIO</code> モジュールに <code>Strict.ByteString</code> 版と <code>Text</code> 版が提供されている</li>
<li><code>Builder</code> 型の標準出力 <a href="https://hackage.haskell.org/package/rio-0.1.0.0/docs/RIO.html#v:hPutBuilder"><code>hPutBuilder</code></a> 関数ならある</li>
</ul>
<p>コンソールに対する I/O はどれを使うべきかはまだ<a href="https://github.com/commercialhaskell/rio/issues/5">議論中</a>みたいだ．</p>
<h1 id="おしまい">おしまい</h1>
<p>何となく<a href="https://github.com/matsubara0507/scrapbook/tree/rio">置き換えはできた</a>けど，例外や I/O 回りは良く分かってない… また試していこう．</p>
  </div>
</div>
</article>
]]></summary>
</entry>
<entry>
    <title>ML Day ＃1 に行ってきた</title>
    <link href="https://matsubara0507.github.io/posts/2018-04-02-ml-day-1.html" />
    <id>https://matsubara0507.github.io/posts/2018-04-02-ml-day-1.html</id>
    <published>2018-04-02T00:00:00Z</published>
    <updated>2018-04-02T00:00:00Z</updated>
    <summary type="html"><![CDATA[<article class="post card" itemscope itemtype="http://schema.org/BlogPosting">
 <div class="card-content">
  <header class="post-header">
    <h1 class="post-title" itemprop="name headline">ML Day ＃1 に行ってきた</h1>
    <p class="post-meta">
      <time datetime="2018-04-02" itemprop="datePublished">
        Apr 2, 2018
      </time>
      
      
      <div class="tags">
          <i class="fa fa-tags"></i> <a href="/tags/event.html">event</a>
      </div>
      
    </p>
  </header>

  <div class="post-content" itemprop="articleBody">
    <p><a href="https://ml-lang.connpass.com/event/78199/">ML Day #1</a> というイベントに参加してきたので，そのメモ？まとめ？みたいな感じの記事です．</p>
<h2 id="section"></h2>
<p>ML Day は毎年やってるML勉強会というML系の発表会形式の勉強会のこと． (なぜか)名前を変えたらしい． ちなみに，今後は半年に一回ペースでやりたいらしい．</p>
<h2 id="ぼくのはなし">ぼくのはなし</h2>
<p>新設された LT 枠で発表してきた．</p>
<p>スライドはこれ</p>
<iframe src="//www.slideshare.net/slideshow/embed_code/key/o84VhGTUREO4No" width="595" height="485" frameborder="0" marginwidth="0" marginheight="0" scrolling="no" style="border:1px solid #CCC; border-width:1px; margin-bottom:5px; max-width: 100%;" allowfullscreen>
</iframe>
<p>さすがに Haskell の話をするのはアレだったので，Haskell の新しいモジュールシステム Backpack のベースになった MixML の話をした． この日までに(Haskellで)実装完了してドヤ顔する予定だったのだが全然終わらなかった orz (Alt braif*ck じゃなくて)ちゃんとした規模の処理系を実装するのって，大変なんですね…</p>
<h2 id="section-1"></h2>
<p>ちなみに，<a href="https://github.com/rossberg/mixml">SML/NJ で実装されたもの</a>があり，実質これを参考に Haskell で書き直すだけの作業． だけど SML -&gt; Haskell に直すのって大変，非純粋なものを純粋な世界にするって大変(そりゃそう)． 気軽に状態を持ちやがって…</p>
<h2 id="自分的ハイライト">自分的ハイライト</h2>
<p>濃い目の話が多かったのでざっくりと．</p>
<p>資料は既に<a href="https://ml-lang.connpass.com/event/78199/presentation/">ほとんど上がっている</a>．</p>
<h3 id="ml型付の基礎の基礎">ML型付の基礎の基礎</h3>
<ul>
<li>発表者は <a href="https://twitter.com/haochenxie">Haochen</a> くん
<ul>
<li>名〇屋で <a href="https://sicss.connpass.com/event/71199/">TaPL の読書会</a>を主催してるひと</li>
<li>こんど<a href="https://nupsc.sicss.org/">名古屋でプロコン</a>やるんだって</li>
</ul></li>
<li><a href="https://haochenxie.name/dl/the_introduction_of_foundation_of_ml_type_checking.pdf">資料はコレ</a></li>
<li>基礎 (foundation) の 基礎 (introduction) の話
<ol type="1">
<li>型は素晴らしい</li>
<li>でも型を書きたくない
<ul>
<li>プログラマは怠惰を美徳にしている生き物だもんね</li>
</ul></li>
<li>再構築すればいいじゃない！
<ul>
<li><del>型検査無しにもどるなんてのは論外</del></li>
</ul></li>
</ol></li>
<li>素晴らしい本(TaPL)と素晴らしい先生(ピアース先生)
<ul>
<li><del>ML Day 出る以上読め</del></li>
</ul></li>
<li>おまけとして let 多相の話もしてた</li>
<li><a href="https://sicss.connpass.com/event/83801/">5/6に論理プログラミング言語の第一人者の講演</a>を企画しているらしい
<ul>
<li><a href="https://readcoqart.connpass.com/event/83722/">Coq 勉強会</a>と被ってるのがなぁぁぁぁ</li>
</ul></li>
</ul>
<h2 id="tba">TBA</h2>
<ul>
<li>発表者は<a href="https://twitter.com/pi8027">坂口和彦</a>さん
<ul>
<li>PPL2018 のポスター賞の人でその話を</li>
</ul></li>
<li>発表スライドは上がってないけど <a href="http://logic.cs.tsukuba.ac.jp/~sakaguchi/posters/ppl2018.pdf">PPL2018 のポスター</a>はあった</li>
<li>Coq でリストの置換(permutation)の自動証明(だったかな)
<ul>
<li>証明の過程をいろいろ話してくれた</li>
<li>(がぼくはよくわかってない)</li>
</ul></li>
<li><a href="http://www.sqlab.jp/FLOPS2018/">FLOPS’18</a> に通ったので発表するらしい</li>
<li>質問: 項書き換えでできないの？
<ul>
<li>中野先生に聞かれた(PPLで？？)</li>
<li>出来たら教えてといって何もないのでできないんじゃない？</li>
</ul></li>
</ul>
<h2 id="型つき組版処理システムsatysfi">型つき組版処理システムSATySFi</h2>
<ul>
<li>発表者は <a href="https://twitter.com/bd_gfngfn">bd_gfngfn</a> 氏</li>
<li>資料は<a href="https://drive.google.com/file/d/1BB7ZAiwPO3hVtq7PGImPtMs1-kOd7SzW/view">コレ</a></li>
<li>彼の有名な <a href="https://github.com/gfngfn/SATySFi">型つき組版処理システムSATySFi</a> の話
<ul>
<li>目標: L〇TeX を倒す</li>
<li>目標: エラーの可読性向上(大事)</li>
<li>ML系に似た組版用型システムが載っている
<ul>
<li>let 多相もレコード多相もある</li>
<li>しかし GADT や Functor はまだ</li>
</ul></li>
<li>「いきなり PDF がでまして」をよく言っていた(笑)<br />
</li>
</ul></li>
<li>質問: 構文にポリシーはあるの？
<ul>
<li>ML系の文法にしたい(けど LaTeX に寄せたほうが…)</li>
</ul></li>
</ul>
<h2 id="mlでつくる拡張可能インタプリタ">MLでつくる拡張可能インタプリタ</h2>
<ul>
<li>発表者は <a href="https://twitter.com/linerlock">linerlock</a> 氏
<ul>
<li>今日までつくば大生
<ul>
<li><del>これのせいで二番煎じに</del></li>
</ul></li>
</ul></li>
<li>資料は<a href="https://speakerdeck.com/takahisa/extensible-interpreter-in-ml">コレ</a></li>
<li>言語開発 <strong>も</strong> モジュラーにしたいので拡張可能なインタプリタを作ればいいじゃない
<ul>
<li><a href="https://github.com/takahisa/kennel">コレ</a>のことかな？</li>
<li>例えば超簡易的な自作言語に新しくリスト追加してと言われても簡単にできるように</li>
<li>評価器は楽しいので(拡張可能な評価器の)研究が多い</li>
<li>構文解析は無い…なのでここをサイボウズラボユースでやった(？)
<ul>
<li>構文解析の無い言語なんてないのにね</li>
<li>作ったの<a href="https://github.com/takahisa/finale">コレ</a>かな？</li>
</ul></li>
<li>「(BNFに新しい構文を)上に足すか下に足すか、花火じゃないけど」
<ul>
<li>上に足すか下に足すかで意味が変わることが…</li>
<li>そこで最長一致法 : 全部試して一番長いのをとる</li>
</ul></li>
<li>型とか最適化とかできてない</li>
</ul></li>
</ul>
<h3 id="lt">LT</h3>
<p>は割愛(つかれた)． ラインナップは</p>
<ul>
<li>自作言語を OCaml で作り直したら ML みたいなコア言語になってしまったという話</li>
<li>Elm の紹介</li>
<li>OCaml の祖先 CAML の解説</li>
<li>自作したパーサージェネレーターの紹介</li>
<li>Verifastの辛い話(<del>古いOCamlを使うのつらいという愚痴</del>)</li>
</ul>
<p>LT の資料は全部 connpass にあがっている．</p>
<h3 id="コンパイラバックエンド">コンパイラバックエンド</h3>
<ul>
<li>発表者は<a href="">インターネットの闇</a>さん
<ul>
<li>この会の主催者(？)</li>
</ul></li>
<li>OCaml のソースコードを皆で読もうの会
<ul>
<li><strong>バックエンドはコンパイラのコト</strong>
<ul>
<li>not Webバックエンド</li>
</ul></li>
<li>ガリグ先生しか読めない化け物(type系)</li>
<li>OCaml のバックは副作用ガンガン使う、FPとは？GC付きのC</li>
</ul></li>
</ul>
<h3 id="bucklescriptでノベルゲームdslを作る">BuckleScriptでノベルゲームDSLを作る</h3>
<ul>
<li>発表者は[pocketberserker]氏
<ul>
<li>普段は F# の人</li>
<li>F# ネタが切れた</li>
</ul></li>
<li>資料は<a href="https://github.com/pocketberserker/ml_day_1">ココ</a>
<ul>
<li>資料もこの DSL で書かれたもの(？？)</li>
<li>ノベルゲーなのでバックができない(笑)</li>
<li>発表者はデバッグモードで戻ってた</li>
</ul></li>
<li>ノベルゲーDSLを作りたい遺伝子を持ってしまったので作るという話
<ul>
<li><a href="https://github.com/cowlick/cowlick">つくったやつ</a></li>
<li>自分が今書いてるのはS式なのか？？？？S式が分からなくなる</li>
<li><del><strong>Reason を ML ユーザーが触るべきではない！</strong></del></li>
</ul></li>
</ul>
<h2 id="感想">感想</h2>
<ul>
<li>濃い(誉め言葉)</li>
<li>後半は疲れてしまった(ごめん)</li>
<li><strong>質問時間を含めて発表時間(律儀に終わる必要はない)</strong></li>
</ul>
<h2 id="おしまい">おしまい</h2>
<p>MixML 完成させてリベンジ発表したい</p>
  </div>
</div>
</article>
]]></summary>
</entry>
<entry>
    <title>多相バリアントを使いこなそう with Haskell</title>
    <link href="https://matsubara0507.github.io/posts/2018-03-24-poly-variant-with-haskell.html" />
    <id>https://matsubara0507.github.io/posts/2018-03-24-poly-variant-with-haskell.html</id>
    <published>2018-03-24T00:00:00Z</published>
    <updated>2018-03-24T00:00:00Z</updated>
    <summary type="html"><![CDATA[<article class="post card" itemscope itemtype="http://schema.org/BlogPosting">
 <div class="card-content">
  <header class="post-header">
    <h1 class="post-title" itemprop="name headline">多相バリアントを使いこなそう with Haskell</h1>
    <p class="post-meta">
      <time datetime="2018-03-24" itemprop="datePublished">
        Mar 24, 2018
      </time>
      
      
      <div class="tags">
          <i class="fa fa-tags"></i> <a href="/tags/Haskell.html">Haskell</a> <a href="/tags/extensible-package.html">extensible-package</a>
      </div>
      
    </p>
  </header>

  <div class="post-content" itemprop="articleBody">
    <p><a href="https://sampou.connpass.com/event/80492/">この前の「『Haskellによる関数プログラミングの思考法』読書会」</a>の後の懇親会(？)で <strong>多相バリアント</strong> の話になりまして，その時に以下の記事が話題にあがった．</p>
<ul>
<li><a href="http://osiire.hatenablog.com/entry/20090510/1241957550">多相バリアントを使いこなそう(1) - osiire’s blog</a></li>
<li><a href="http://osiire.hatenablog.com/entry/20090512/1242055541">多相バリアントを使いこなそう(2) - osiire’s blog</a></li>
<li><a href="http://osiire.hatenablog.com/entry/20090514/1242235108">多相バリアントを使いこなそう(3) - osiire’s blog</a></li>
<li><a href="http://osiire.hatenablog.com/entry/20090516/1242456737">多相バリアントを使いこなそう(4) - osiire’s blog</a></li>
</ul>
<p>これらの記事は OCaml で多相バリアントの紹介をしています． ということで，同様の議論を Haskell でもしてみた！というのが，この記事の内容です．</p>
<h2 id="section"></h2>
<p>(2018.04.13 追記アリ)</p>
<h3 id="haskell-と多相バリアント">Haskell と多相バリアント</h3>
<p>悲しいことに，Haskell には組み込みで多相バリアントは無い(バリアントとは Haskell の代数的データ型における直和型と概ね一緒)． なので，多相バリアントを Haskell で模倣するために，毎度おなじみ <a href="https://hackage.haskell.org/package/extensible"><code>extensible</code></a> パッケージを用いる．</p>
<h2 id="section-1"></h2>
<p>ネタバレをすると Haskell で同じことをするのは難しかった． なので，本質的な議論は osiire’s blog の方を読んだ方がいいと思うよ． 結局，本記事は osiire’s blog のと同様のことを Haskell もとい，<code>extensible</code> パッケージでどのように行うか，という記事って感じになった．</p>
<h2 id="多相バリアントの基本">多相バリアントの基本</h2>
<p>多相バリアントとは，名前の通り，多相的なバリアントである． バリアントは前述したとおり，直和型と基本的に同じ．</p>
<p>例えば，普通の直和型として次のようなものがあったとする．</p>
<div class="sourceCode" id="cb1"><pre class="sourceCode haskell"><code class="sourceCode haskell"><a class="sourceLine" id="cb1-1" data-line-number="1"><span class="kw">data</span> <span class="dt">Card</span> <span class="fu">=</span> <span class="dt">Joker</span> <span class="fu">|</span> <span class="dt">Number</span> <span class="dt">Int</span></a>
<a class="sourceLine" id="cb1-2" data-line-number="2"><span class="kw">data</span> <span class="dt">InData</span> <span class="fu">=</span> <span class="dt">Str</span> <span class="dt">String</span> <span class="fu">|</span> <span class="dt">Number</span> <span class="dt">Int</span></a></code></pre></div>
<p>「最初の型はジョーカーと数字札があるトランプの型，次の型は何かファイルからデータを読み込む時に文字列と数字のデータを統一的に扱うための型」だそうです(<a href="http://osiire.hatenablog.com/entry/20090510/1241957550">多相バリアントを使いこなそう(1)</a> より)． どちらの型にも <code>Number Int</code> という部分があるので次のような関数を両方に適用できそうな気がする．</p>
<div class="sourceCode" id="cb2"><pre class="sourceCode haskell"><code class="sourceCode haskell"><a class="sourceLine" id="cb2-1" data-line-number="1">getNumber (<span class="dt">Number</span> n) <span class="fu">=</span> <span class="dt">Just</span> n</a>
<a class="sourceLine" id="cb2-2" data-line-number="2">getNumber _ <span class="fu">=</span> <span class="dt">Nothing</span></a></code></pre></div>
<p>もちろん，そんなことはできない(そもそも，Haskell の値コンストラクタは名前空間を共有してしまうので同時に利用はできないのだが…)． そこで多相バリアントを用いれば，このような関数を実装することが出来るようになる．</p>
<h3 id="多相バリアントを定義">多相バリアントを定義</h3>
<p><code>extensible</code> パッケージを使って多相バリアント(拡張可能バリアント)を定義すると次のようになる(<code>DataKinds</code> と <code>TypeOperators</code> 言語拡張が必要)．</p>
<div class="sourceCode" id="cb3"><pre class="sourceCode haskell"><code class="sourceCode haskell"><a class="sourceLine" id="cb3-1" data-line-number="1"><span class="kw">type</span> <span class="dt">Card</span> <span class="fu">=</span> <span class="dt">Variant</span> <span class="ch">&#39;[ &quot;joker&quot; &gt;: (), &quot;number&quot; &gt;: Int ]</span></a>
<a class="sourceLine" id="cb3-2" data-line-number="2"><span class="kw">type</span> <span class="dt">InData</span> <span class="fu">=</span> <span class="dt">Variant</span> <span class="ch">&#39;[ &quot;str&quot; &gt;: String, &quot;number&quot; &gt;: Int ]</span></a></code></pre></div>
<p>とくに細かい説明はしないが，なんとなく意味が読み取れるだろう． <code>getNumber</code> 関数の実装は難しいので後回しにするとして，<code>getNumber</code> 関数の型は <code>extensible</code> パッケージの <a href="https://hackage.haskell.org/package/extensible-0.4.8/docs/Data-Extensible-Inclusion.html#t:-8838-"><code>⊆</code></a> 型クラスを用いて次のように書ける(意味は見た通り)．</p>
<div class="sourceCode" id="cb4"><pre class="sourceCode haskell"><code class="sourceCode haskell"><a class="sourceLine" id="cb4-1" data-line-number="1"><span class="ot">{-# LANGUAGE FlexibleContexts #-}</span></a>
<a class="sourceLine" id="cb4-2" data-line-number="2"></a>
<a class="sourceLine" id="cb4-3" data-line-number="3"><span class="ot">getNumber ::</span> (<span class="ch">&#39;[&quot;number&quot; &gt;: Int] ⊆ xs) =&gt; Variant xs -&gt; Maybe Int</span></a>
<a class="sourceLine" id="cb4-4" data-line-number="4">getNumber <span class="fu">=</span> undefined</a></code></pre></div>
<p>GHCi で試してみる．</p>
<div class="sourceCode" id="cb5"><pre class="sourceCode haskell"><code class="sourceCode haskell"><a class="sourceLine" id="cb5-1" data-line-number="1"><span class="fu">&gt;&gt;</span> <span class="fu">:</span>t getNumber (undefined<span class="ot"> ::</span> <span class="dt">Card</span>)</a>
<a class="sourceLine" id="cb5-2" data-line-number="2">getNumber (undefined<span class="ot"> ::</span> <span class="dt">Card</span>)<span class="ot"> ::</span> <span class="dt">Maybe</span> <span class="dt">Int</span></a>
<a class="sourceLine" id="cb5-3" data-line-number="3"><span class="fu">&gt;&gt;</span> <span class="fu">:</span>t getNumber (undefined<span class="ot"> ::</span> <span class="dt">InData</span>)</a>
<a class="sourceLine" id="cb5-4" data-line-number="4">getNumber (undefined<span class="ot"> ::</span> <span class="dt">InData</span>)<span class="ot"> ::</span> <span class="dt">Maybe</span> <span class="dt">Int</span></a></code></pre></div>
<p>確かに動作する．</p>
<h2 id="包含関係">包含関係</h2>
<p>さて，<code>getNumber</code> 関数をどのように実装するかだが，その前に多相バリアントの包含関係を議論しておく(この議論は<a href="http://osiire.hatenablog.com/entry/20090514/1242235108">多相バリアントを使いこなそう(3)</a>に対応する)．</p>
<p>次のような簡単なバリアント型を考える．</p>
<div class="sourceCode" id="cb6"><pre class="sourceCode haskell"><code class="sourceCode haskell"><a class="sourceLine" id="cb6-1" data-line-number="1"><span class="kw">type</span> <span class="dt">Hoge</span> <span class="fu">=</span> <span class="dt">Variant</span> <span class="dt">HogeFields</span></a>
<a class="sourceLine" id="cb6-2" data-line-number="2"><span class="kw">type</span> <span class="dt">HogeFields</span> <span class="fu">=</span></a>
<a class="sourceLine" id="cb6-3" data-line-number="3">  <span class="ch">&#39;[ &quot;hoge&quot; &gt;: ()</span></a>
<a class="sourceLine" id="cb6-4" data-line-number="4">   , <span class="st">&quot;fuga&quot;</span> <span class="fu">&gt;:</span> ()</a>
<a class="sourceLine" id="cb6-5" data-line-number="5">   ]</a></code></pre></div>
<p>このバリアント型に対し，<code>⊆</code> を用いて多相的な関数は2種類考えれる．</p>
<div class="sourceCode" id="cb7"><pre class="sourceCode haskell"><code class="sourceCode haskell"><a class="sourceLine" id="cb7-1" data-line-number="1"><span class="ot">toInt1 ::</span> (<span class="dt">HogeFields</span> ⊆ xs) <span class="ot">=&gt;</span> <span class="dt">Variant</span> xs <span class="ot">-&gt;</span> <span class="dt">Int</span></a>
<a class="sourceLine" id="cb7-2" data-line-number="2">toInt1 <span class="fu">=</span> undefined</a>
<a class="sourceLine" id="cb7-3" data-line-number="3"></a>
<a class="sourceLine" id="cb7-4" data-line-number="4"><span class="ot">toInt2 ::</span> (xs ⊆ <span class="dt">HogeFields</span>) <span class="ot">=&gt;</span> <span class="dt">Variant</span> xs <span class="ot">-&gt;</span> <span class="dt">Int</span></a>
<a class="sourceLine" id="cb7-5" data-line-number="5">toInt2 <span class="fu">=</span> undefined</a></code></pre></div>
<p><code>toInt1</code> は <code>&quot;hoge&quot; &gt;: ()</code> と <code>&quot;fuga&quot; &gt;: ()</code> を要素に持つバリアント型全てが利用できる関数である(さっきの <code>getNumber</code> と同じ)． <code>toInt2</code> は <code>&quot;hoge&quot; &gt;: ()</code> か <code>&quot;fuga&quot; &gt;: ()</code> のどれかを要素に持つ(それ以外は持ってはいけない)バリアント型全てに利用できる関数である． 試しに，次の3つのバリアント型の値を定義し，GHCi で試してみよう．</p>
<div class="sourceCode" id="cb8"><pre class="sourceCode haskell"><code class="sourceCode haskell"><a class="sourceLine" id="cb8-1" data-line-number="1"><span class="ot">hoge1 ::</span> <span class="dt">Hoge</span></a>
<a class="sourceLine" id="cb8-2" data-line-number="2">hoge1 <span class="fu">=</span> embedAssoc <span class="fu">$</span> <span class="fu">#</span>hoge <span class="fu">@=</span> ()</a>
<a class="sourceLine" id="cb8-3" data-line-number="3"></a>
<a class="sourceLine" id="cb8-4" data-line-number="4"><span class="ot">hoge2 ::</span> <span class="dt">Variant</span> (<span class="st">&quot;piyo&quot;</span> <span class="fu">&gt;:</span> () <span class="ch">&#39;: HogeFields)</span></a>
<a class="sourceLine" id="cb8-5" data-line-number="5">hoge2 <span class="fu">=</span> embedAssoc <span class="fu">$</span> <span class="fu">#</span>piyo <span class="fu">@=</span> ()</a>
<a class="sourceLine" id="cb8-6" data-line-number="6"></a>
<a class="sourceLine" id="cb8-7" data-line-number="7"><span class="ot">hoge3 ::</span> <span class="dt">Variant</span> <span class="ch">&#39;[&quot;hoge&quot; &gt;: ()]</span></a>
<a class="sourceLine" id="cb8-8" data-line-number="8">hoge3 <span class="fu">=</span> embedAssoc <span class="fu">$</span> <span class="fu">#</span>hoge <span class="fu">@=</span> ()</a></code></pre></div>
<p>見てわかるように(？)，<code>hoge3 ⊆ hoge1 ⊆ hoge2</code> である(厳密にはバリアントの要素の集合で成り立つ関係だが)．</p>
<div class="sourceCode" id="cb9"><pre class="sourceCode haskell"><code class="sourceCode haskell"><a class="sourceLine" id="cb9-1" data-line-number="1"><span class="fu">&gt;&gt;</span> <span class="fu">:</span>t toInt1 hoge1</a>
<a class="sourceLine" id="cb9-2" data-line-number="2">toInt1<span class="ot"> hoge1 ::</span> <span class="dt">Int</span></a>
<a class="sourceLine" id="cb9-3" data-line-number="3"><span class="fu">&gt;&gt;</span> <span class="fu">:</span>t toInt1 hoge2</a>
<a class="sourceLine" id="cb9-4" data-line-number="4">toInt1<span class="ot"> hoge2 ::</span> <span class="dt">Int</span></a>
<a class="sourceLine" id="cb9-5" data-line-number="5"><span class="fu">&gt;&gt;</span> <span class="fu">:</span>t toInt1 hoge3</a>
<a class="sourceLine" id="cb9-6" data-line-number="6"></a>
<a class="sourceLine" id="cb9-7" data-line-number="7"><span class="fu">&lt;</span>interactive<span class="fu">&gt;:</span><span class="dv">1</span><span class="fu">:</span><span class="dv">1</span><span class="fu">:</span> error<span class="fu">:</span></a>
<a class="sourceLine" id="cb9-8" data-line-number="8">    <span class="fu">?</span> <span class="dt">Couldn&#39;t</span> match <span class="kw">type</span> ‘<span class="ch">&#39;Missing (&quot;fuga&quot; &#39;</span><span class="fu">:&gt;</span> ())’</a>
<a class="sourceLine" id="cb9-9" data-line-number="9">                     with ‘<span class="ch">&#39;Expecting pos0’</span></a>
<a class="sourceLine" id="cb9-10" data-line-number="10">        arising from a use <span class="kw">of</span> ‘toInt1’</a>
<a class="sourceLine" id="cb9-11" data-line-number="11">    <span class="fu">?</span> <span class="dt">In</span> the expression<span class="fu">:</span> toInt1 hoge3</a>
<a class="sourceLine" id="cb9-12" data-line-number="12"><span class="fu">&gt;&gt;</span> <span class="fu">:</span>t toInt2 hoge1</a>
<a class="sourceLine" id="cb9-13" data-line-number="13">toInt2<span class="ot"> hoge1 ::</span> <span class="dt">Int</span></a>
<a class="sourceLine" id="cb9-14" data-line-number="14"><span class="fu">&gt;&gt;</span> <span class="fu">:</span>t toInt2 hoge2</a>
<a class="sourceLine" id="cb9-15" data-line-number="15"></a>
<a class="sourceLine" id="cb9-16" data-line-number="16"><span class="fu">&lt;</span>interactive<span class="fu">&gt;:</span><span class="dv">1</span><span class="fu">:</span><span class="dv">1</span><span class="fu">:</span> error<span class="fu">:</span></a>
<a class="sourceLine" id="cb9-17" data-line-number="17">    <span class="fu">?</span> <span class="dt">Couldn&#39;t</span> match <span class="kw">type</span> ‘<span class="ch">&#39;Missing (&quot;piyo&quot; &#39;</span><span class="fu">:&gt;</span> ())’</a>
<a class="sourceLine" id="cb9-18" data-line-number="18">                     with ‘<span class="ch">&#39;Expecting pos0’</span></a>
<a class="sourceLine" id="cb9-19" data-line-number="19">        arising from a use <span class="kw">of</span> ‘toInt2’</a>
<a class="sourceLine" id="cb9-20" data-line-number="20">    <span class="fu">?</span> <span class="dt">In</span> the expression<span class="fu">:</span> toInt2 hoge2</a>
<a class="sourceLine" id="cb9-21" data-line-number="21"><span class="fu">&gt;&gt;</span> <span class="fu">:</span>t toInt2 hoge3</a>
<a class="sourceLine" id="cb9-22" data-line-number="22">toInt2<span class="ot"> hoge3 ::</span> <span class="dt">Int</span></a></code></pre></div>
<p>確かに，<code>toInt1</code> は <code>hoge1</code> と <code>hoge2</code> に適用でき，<code>toInt2</code> は <code>hoge1</code> と <code>hoge3</code> に適用できている．</p>
<h2 id="section-2"></h2>
<p>さて，<code>toInt1</code> と <code>toInt2</code> の実装を与えてみる． 実は簡単なのは後者 <code>toInt2</code> だ．</p>
<div class="sourceCode" id="cb10"><pre class="sourceCode haskell"><code class="sourceCode haskell"><a class="sourceLine" id="cb10-1" data-line-number="1"><span class="ot">{-# LANGUAGE OverloadedLabels #-}</span></a>
<a class="sourceLine" id="cb10-2" data-line-number="2"></a>
<a class="sourceLine" id="cb10-3" data-line-number="3"><span class="ot">toInt2 ::</span> (xs ⊆ <span class="dt">HogeFields</span>) <span class="ot">=&gt;</span> <span class="dt">Variant</span> xs <span class="ot">-&gt;</span> <span class="dt">Int</span></a>
<a class="sourceLine" id="cb10-4" data-line-number="4">toInt2 <span class="fu">=</span> flip matchField (spread<span class="ot"> xs ::</span> <span class="dt">Hoge</span>)</a>
<a class="sourceLine" id="cb10-5" data-line-number="5">    <span class="fu">$</span> <span class="fu">#</span>hoge <span class="fu">@=</span> (const <span class="dv">1</span>)</a>
<a class="sourceLine" id="cb10-6" data-line-number="6">   <span class="fu">&lt;:</span> <span class="fu">#</span>fuga <span class="fu">@=</span> (const <span class="dv">2</span>)</a>
<a class="sourceLine" id="cb10-7" data-line-number="7">   <span class="fu">&lt;:</span> nil</a></code></pre></div>
<p>(<a href="https://matsubara0507.github.io/posts/2017-11-28-fun-of-extensible-1.html">昔の記事</a>でも紹介した) <a href="https://hackage.haskell.org/package/extensible-0.4.8/docs/Data-Extensible-Inclusion.html#v:spread"><code>spread</code></a> 関数を用いることで <strong>バリアント型を拡張できる</strong> (<a href="https://hackage.haskell.org/package/extensible-0.4.8/docs/Data-Extensible-Field.html#v:matchField"><code>matchField</code></a> 関数の使い方についてはこの<a href="https://matsubara0507.github.io/posts/2018-01-31-fun-of-extensible-2.html">記事</a>を参照して)．</p>
<div class="sourceCode" id="cb11"><pre class="sourceCode haskell"><code class="sourceCode haskell"><a class="sourceLine" id="cb11-1" data-line-number="1"><span class="ot">shrink ::</span> (xs ⊆ ys) <span class="ot">=&gt;</span> <span class="dt">Record</span> ys <span class="ot">-&gt;</span> <span class="dt">Record</span> xs</a>
<a class="sourceLine" id="cb11-2" data-line-number="2"><span class="ot">spread ::</span> (xs ⊆ ys) <span class="ot">=&gt;</span> <span class="dt">Variant</span> xs <span class="ot">-&gt;</span> <span class="dt">Variant</span> ys</a></code></pre></div>
<p><del>拡縮する関数 <code>spread</code> や <code>shrink</code> は強力なのだが，多相的すぎて前後の型が分からないとエラーになる(気がする(パッケージの作者じゃないので細かいことはよくわからん))ので，型注釈 (<code>spread xs :: Hoge</code> の部分)を与える必要がある．</del></p>
<p>(2018.04.13 追記) <code>spread</code> や <code>shrink</code> の代わりに <code>shrinkAssoc</code> や <code>spreadAssoc</code> を使えば値が多相でもうまく扱えるとのコトを<a href="https://www.reddit.com/r/haskell_jp/comments/86rx9b/多相バリアントを使いこなそう_with_haskell/dwaq3cw/">作者様よりコメント</a>いただいた． 感謝．</p>
<h3 id="必殺-coinclusion">必殺 Coinclusion</h3>
<p>前者が難しいのは，<code>spread</code> や <code>shrink</code> とは逆の振る舞いを要求するからだ． そのために(この前作者から教えてもらった隠し技(別に隠してない)) <a href="https://hackage.haskell.org/package/extensible-0.4.8/docs/Data-Extensible-Nullable.html"><code>Nullable</code></a> を使う！ <code>Nullable</code> を使うとバリアントやレコードの全ての要素を簡単に <code>Maybe</code> でラップできる(なんかいいテーマがあったら，そのうち解説する)． さらに <code>Nullable</code> を用いることで，Coinclusion を定義できる！</p>
<div class="sourceCode" id="cb12"><pre class="sourceCode haskell"><code class="sourceCode haskell"><a class="sourceLine" id="cb12-1" data-line-number="1"><span class="ot">wrench ::</span> (<span class="dt">Generate</span> ys, xs ⊆ ys) <span class="ot">=&gt;</span> (h <span class="fu">:*</span> xs) <span class="ot">-&gt;</span> <span class="dt">Nullable</span> h <span class="fu">:*</span> ys</a>
<a class="sourceLine" id="cb12-2" data-line-number="2"><span class="ot">retrench ::</span> (<span class="dt">Generate</span> ys, xs ⊆ ys) <span class="ot">=&gt;</span> (h <span class="fu">:|</span> ys) <span class="ot">-&gt;</span> <span class="dt">Nullable</span> ((<span class="fu">:|</span>) h) xs</a></code></pre></div>
<p><code>wrench</code> や <code>retrench</code> は <code>shrink</code> と <code>spread</code> の逆向きの変換になっているのが分かるだろうか？ 逆向きにしたせいで足りない部分は <code>Nullable</code> によって <code>Nothing</code> となる． 例えば <code>Variant (&quot;piyo&quot; &gt;: () ': HogeFields)</code> から <code>Hoge</code> に縮小する場合は，<code>embedAssoc (#piyo @= ())</code> が <code>Nothing</code> となり，他が <code>Just</code> でラップされる．</p>
<h2 id="section-3"></h2>
<p>Coinclusion を用いて <code>toInt2</code> 関数を実装してみると次のようになる．</p>
<div class="sourceCode" id="cb13"><pre class="sourceCode haskell"><code class="sourceCode haskell"><a class="sourceLine" id="cb13-1" data-line-number="1"><span class="ot">{-# LANGUAGE PolyKinds           #-}</span></a>
<a class="sourceLine" id="cb13-2" data-line-number="2"><span class="ot">{-# LANGUAGE RankNTypes          #-}</span></a>
<a class="sourceLine" id="cb13-3" data-line-number="3"><span class="ot">{-# LANGUAGE ScopedTypeVariables #-}</span></a>
<a class="sourceLine" id="cb13-4" data-line-number="4"></a>
<a class="sourceLine" id="cb13-5" data-line-number="5"><span class="ot">toInt1 ::</span> (<span class="dt">Generate</span> xs, <span class="dt">HogeFields</span> ⊆ xs) <span class="ot">=&gt;</span> <span class="dt">Variant</span> xs <span class="ot">-&gt;</span> <span class="dt">Int</span></a>
<a class="sourceLine" id="cb13-6" data-line-number="6">toInt1 <span class="fu">=</span> matchFieldWithDefault <span class="dv">0</span></a>
<a class="sourceLine" id="cb13-7" data-line-number="7">    <span class="fu">$</span> <span class="fu">#</span>hoge <span class="fu">@=</span> (const <span class="dv">1</span><span class="ot"> ::</span> () <span class="ot">-&gt;</span> <span class="dt">Int</span>)</a>
<a class="sourceLine" id="cb13-8" data-line-number="8">   <span class="fu">&lt;:</span> <span class="fu">#</span>fuga <span class="fu">@=</span> (const <span class="dv">2</span><span class="ot"> ::</span> () <span class="ot">-&gt;</span> <span class="dt">Int</span>)</a>
<a class="sourceLine" id="cb13-9" data-line-number="9">   <span class="fu">&lt;:</span> nil</a>
<a class="sourceLine" id="cb13-10" data-line-number="10"></a>
<a class="sourceLine" id="cb13-11" data-line-number="11"><span class="ot">matchFieldWithDefault ::</span> forall xs ys h r <span class="fu">.</span></a>
<a class="sourceLine" id="cb13-12" data-line-number="12">  (<span class="dt">Generate</span> ys, xs ⊆ ys) <span class="ot">=&gt;</span> r <span class="ot">-&gt;</span> <span class="dt">RecordOf</span> (<span class="dt">Match</span> h r) xs <span class="ot">-&gt;</span> <span class="dt">VariantOf</span> h ys <span class="ot">-&gt;</span> r</a>
<a class="sourceLine" id="cb13-13" data-line-number="13">matchFieldWithDefault defaultValue pat <span class="fu">=</span></a>
<a class="sourceLine" id="cb13-14" data-line-number="14">  fromMaybe defaultValue <span class="fu">.</span> matchFieldWithMaybe pat</a>
<a class="sourceLine" id="cb13-15" data-line-number="15"></a>
<a class="sourceLine" id="cb13-16" data-line-number="16"><span class="ot">matchFieldWithMaybe ::</span> forall xs ys h r <span class="fu">.</span></a>
<a class="sourceLine" id="cb13-17" data-line-number="17">  (<span class="dt">Generate</span> ys, xs ⊆ ys) <span class="ot">=&gt;</span> <span class="dt">RecordOf</span> (<span class="dt">Match</span> h r) xs <span class="ot">-&gt;</span> <span class="dt">VariantOf</span> h ys <span class="ot">-&gt;</span> <span class="dt">Maybe</span> r</a>
<a class="sourceLine" id="cb13-18" data-line-number="18">matchFieldWithMaybe pat <span class="fu">=</span> matchWith func (wrench pat)</a>
<a class="sourceLine" id="cb13-19" data-line-number="19">  <span class="kw">where</span></a>
<a class="sourceLine" id="cb13-20" data-line-number="20"><span class="ot">    func ::</span> forall x <span class="fu">.</span> <span class="dt">Nullable</span> (<span class="dt">Field</span> (<span class="dt">Match</span> h r)) x <span class="ot">-&gt;</span> <span class="dt">Field</span> h x <span class="ot">-&gt;</span> <span class="dt">Maybe</span> r</a>
<a class="sourceLine" id="cb13-21" data-line-number="21">    func fx gx <span class="fu">=</span> (\x <span class="ot">-&gt;</span> runMatch (getField x) <span class="fu">$</span> getField gx) <span class="fu">&lt;$&gt;</span> getNullable fx</a></code></pre></div>
<p>めんどくさいので細かい解説はしない(そもそももっといい方法があるかもしれない)． この <code>matchFieldWithMaybe</code> を用いれば <code>getNumber</code> も簡単に実装できるだろう．</p>
<div class="sourceCode" id="cb14"><pre class="sourceCode haskell"><code class="sourceCode haskell"><a class="sourceLine" id="cb14-1" data-line-number="1"><span class="ot">getNumber ::</span> (<span class="dt">Generate</span> xs, <span class="ch">&#39;[&quot;number&quot; &gt;: Int] ⊆ xs) =&gt; Variant xs -&gt; Maybe Int</span></a>
<a class="sourceLine" id="cb14-2" data-line-number="2">getNumber <span class="fu">=</span> matchFieldWithMaybe <span class="fu">$</span> <span class="fu">#</span>number <span class="fu">@=</span> id <span class="fu">&lt;:</span> nil</a></code></pre></div>
<h2 id="例-イベントを拡張する">例 : イベントを拡張する</h2>
<p>ここからは「多相バリアントを使いこなそう」で取り上げられてた例を Haskell で示そう． ひとつ目は次のふたつのイベント型を考える．</p>
<div class="sourceCode" id="cb15"><pre class="sourceCode haskell"><code class="sourceCode haskell"><a class="sourceLine" id="cb15-1" data-line-number="1"><span class="kw">type</span> <span class="dt">KeyboardEvent</span> <span class="fu">=</span> <span class="dt">Variant</span> <span class="dt">KeyboardEventFields</span></a>
<a class="sourceLine" id="cb15-2" data-line-number="2"><span class="kw">type</span> <span class="dt">KeyboardEventFields</span> <span class="fu">=</span></a>
<a class="sourceLine" id="cb15-3" data-line-number="3">  <span class="ch">&#39;[ &quot;keyPress&quot; &gt;: Char</span></a>
<a class="sourceLine" id="cb15-4" data-line-number="4">   , <span class="st">&quot;keyRelease&quot;</span> <span class="fu">&gt;:</span> <span class="dt">Char</span></a>
<a class="sourceLine" id="cb15-5" data-line-number="5">   ]</a>
<a class="sourceLine" id="cb15-6" data-line-number="6"></a>
<a class="sourceLine" id="cb15-7" data-line-number="7"><span class="kw">type</span> <span class="dt">MouseEvent</span> <span class="fu">=</span> <span class="dt">Variant</span> <span class="dt">MouseEventFields</span></a>
<a class="sourceLine" id="cb15-8" data-line-number="8"><span class="kw">type</span> <span class="dt">MouseEventFields</span> <span class="fu">=</span></a>
<a class="sourceLine" id="cb15-9" data-line-number="9">  <span class="ch">&#39;[ &quot;mousePress&quot; &gt;: (Int, Int)</span></a>
<a class="sourceLine" id="cb15-10" data-line-number="10">   , <span class="st">&quot;mouseRelease&quot;</span> <span class="fu">&gt;:</span> (<span class="dt">Int</span>, <span class="dt">Int</span>)</a>
<a class="sourceLine" id="cb15-11" data-line-number="11">   , <span class="st">&quot;click&quot;</span> <span class="fu">&gt;:</span> (<span class="dt">Int</span>, <span class="dt">Int</span>)</a>
<a class="sourceLine" id="cb15-12" data-line-number="12">   ]</a></code></pre></div>
<p>さて，これらの両方の型許容する型 <code>Event</code> を作りたい． 普通の直和型を用いて次のように書くことが出来る．</p>
<div class="sourceCode" id="cb16"><pre class="sourceCode haskell"><code class="sourceCode haskell"><a class="sourceLine" id="cb16-1" data-line-number="1"><span class="kw">data</span> <span class="dt">Event</span> <span class="fu">=</span> <span class="dt">Key</span> <span class="dt">KeyboardEvent</span> <span class="fu">|</span> <span class="dt">Mouse</span> <span class="dt">MouseEvent</span></a></code></pre></div>
<p>もちろん，これでは元のふたつの型をうまく再利用できていない． 既に何度か登場している型レベルリストの連結 <a href="https://hackage.haskell.org/package/extensible-0.4.8/docs/Data-Extensible-Product.html#t:-43--43-"><code>++</code></a> を使って次のように書くこともできる．</p>
<div class="sourceCode" id="cb17"><pre class="sourceCode haskell"><code class="sourceCode haskell"><a class="sourceLine" id="cb17-1" data-line-number="1"><span class="kw">type</span> <span class="dt">Event</span> <span class="fu">=</span> <span class="dt">Variant</span> (<span class="dt">KeyboardEventFields</span> <span class="fu">++</span> <span class="dt">MouseEventFields</span>)</a></code></pre></div>
<p>こうすると，<code>Event</code> 型と <code>KeyboardEvent</code> 型・<code>MouseEvent</code> 型には包含関係ができ，前述した <code>Hoge</code> 型で示した方法により各々で関数を共有することが出来る． 例えば次の <code>getCharFromEvent</code> 関数は <code>KeyboardEvent</code> 型と <code>Event</code> 型の両方で利用できる．</p>
<div class="sourceCode" id="cb18"><pre class="sourceCode haskell"><code class="sourceCode haskell"><a class="sourceLine" id="cb18-1" data-line-number="1"><span class="ot">getCharFromEvent ::</span></a>
<a class="sourceLine" id="cb18-2" data-line-number="2">  (<span class="dt">Generate</span> xs, <span class="dt">KeyboardEventFields</span> ⊆ xs) <span class="ot">=&gt;</span> <span class="dt">Variant</span> xs <span class="ot">-&gt;</span> <span class="dt">Char</span></a>
<a class="sourceLine" id="cb18-3" data-line-number="3">getCharFromEvent <span class="fu">=</span> matchFieldWithDefault (error <span class="st">&quot;not a key&quot;</span>)</a>
<a class="sourceLine" id="cb18-4" data-line-number="4">    <span class="fu">$</span> <span class="fu">#</span>keyPress   <span class="fu">@=</span> id</a>
<a class="sourceLine" id="cb18-5" data-line-number="5">   <span class="fu">&lt;:</span> <span class="fu">#</span>keyRelease <span class="fu">@=</span> id</a>
<a class="sourceLine" id="cb18-6" data-line-number="6">   <span class="fu">&lt;:</span> nil</a></code></pre></div>
<h2 id="例-トランプで-expression-problem">例 : トランプで Expression Problem</h2>
<p>Expression Problem が何なのかは各位ググってもらうとして，「多相バリアントを使いこなそう」の最後で紹介されていた，多相バリアントによる Expression Problem の解法を Haskell でもやってみる．</p>
<p>次のような型と関数があったとする．</p>
<div class="sourceCode" id="cb19"><pre class="sourceCode haskell"><code class="sourceCode haskell"><a class="sourceLine" id="cb19-1" data-line-number="1"><span class="kw">type</span> <span class="dt">Card</span> <span class="fu">=</span> <span class="dt">Variant</span> <span class="dt">CardFields</span></a>
<a class="sourceLine" id="cb19-2" data-line-number="2"><span class="kw">type</span> <span class="dt">CardFields</span> <span class="fu">=</span></a>
<a class="sourceLine" id="cb19-3" data-line-number="3">  <span class="ch">&#39;[ &quot;number&quot; &gt;: Int</span></a>
<a class="sourceLine" id="cb19-4" data-line-number="4">   , <span class="st">&quot;jack&quot;</span>   <span class="fu">&gt;:</span> ()</a>
<a class="sourceLine" id="cb19-5" data-line-number="5">   , <span class="st">&quot;queen&quot;</span>  <span class="fu">&gt;:</span> ()</a>
<a class="sourceLine" id="cb19-6" data-line-number="6">   , <span class="st">&quot;king&quot;</span>   <span class="fu">&gt;:</span> ()</a>
<a class="sourceLine" id="cb19-7" data-line-number="7">   ]</a>
<a class="sourceLine" id="cb19-8" data-line-number="8"></a>
<a class="sourceLine" id="cb19-9" data-line-number="9"><span class="ot">cardNum ::</span> <span class="dt">Card</span> <span class="ot">-&gt;</span> <span class="dt">Int</span></a>
<a class="sourceLine" id="cb19-10" data-line-number="10">cardNum <span class="fu">=</span> matchField cardNumPattern</a>
<a class="sourceLine" id="cb19-11" data-line-number="11"></a>
<a class="sourceLine" id="cb19-12" data-line-number="12"><span class="ot">cardNumPattern ::</span> <span class="dt">RecordOf</span> (<span class="dt">Match</span> <span class="dt">Identity</span> <span class="dt">Int</span>) <span class="dt">CardFields</span></a>
<a class="sourceLine" id="cb19-13" data-line-number="13">cardNumPattern</a>
<a class="sourceLine" id="cb19-14" data-line-number="14">    <span class="fu">=</span> <span class="fu">#</span>number <span class="fu">@=</span> id</a>
<a class="sourceLine" id="cb19-15" data-line-number="15">   <span class="fu">&lt;:</span> <span class="fu">#</span>jack   <span class="fu">@=</span> const <span class="dv">11</span></a>
<a class="sourceLine" id="cb19-16" data-line-number="16">   <span class="fu">&lt;:</span> <span class="fu">#</span>queen  <span class="fu">@=</span> const <span class="dv">12</span></a>
<a class="sourceLine" id="cb19-17" data-line-number="17">   <span class="fu">&lt;:</span> <span class="fu">#</span>king   <span class="fu">@=</span> const <span class="dv">13</span></a>
<a class="sourceLine" id="cb19-18" data-line-number="18">   <span class="fu">&lt;:</span> nil</a></code></pre></div>
<p>(<code>cardNumPattern</code> を切り出しているのがあからさまに恣意的だが…)これに以下のことは可能だろうか？</p>
<ol type="1">
<li>静的で安全に(キャストせず)</li>
<li>元のコードを一切変更せず</li>
<li>新しい場合分けを加え</li>
<li>新しい操作も加えた</li>
<li>新しい場合分け構造を定義する</li>
</ol>
<p>最後の「構造」というのは今回は置いておいて(OCaml ではモジュールとして定義してたが，Haskell でモジュールに切り分けるにはファイルを切り分ける必要があるので…めんどい…)，1-4を考えてみよう． <code>Card</code> 型やその関数を拡張したものとして，次のような <code>CardExt</code> 型とその関数を定義した．</p>
<div class="sourceCode" id="cb20"><pre class="sourceCode haskell"><code class="sourceCode haskell"><a class="sourceLine" id="cb20-1" data-line-number="1"><span class="kw">type</span> <span class="dt">CardExt</span> <span class="fu">=</span> <span class="dt">Variant</span> <span class="dt">CardExtFields</span></a>
<a class="sourceLine" id="cb20-2" data-line-number="2"><span class="kw">type</span> <span class="dt">CardExtFields</span> <span class="fu">=</span> <span class="dt">CardFields</span> <span class="fu">++</span> <span class="ch">&#39;[&quot;joker&quot; &gt;: ()]</span></a>
<a class="sourceLine" id="cb20-3" data-line-number="3"></a>
<a class="sourceLine" id="cb20-4" data-line-number="4"><span class="ot">cardExtNum ::</span> <span class="dt">CardExt</span> <span class="ot">-&gt;</span> <span class="dt">Int</span></a>
<a class="sourceLine" id="cb20-5" data-line-number="5">cardExtNum <span class="fu">=</span></a>
<a class="sourceLine" id="cb20-6" data-line-number="6">  matchField <span class="fu">$</span> shrink (<span class="fu">#</span>joker <span class="fu">@=</span> (const <span class="dv">0</span><span class="ot"> ::</span> () <span class="ot">-&gt;</span> <span class="dt">Int</span>) <span class="fu">&lt;:</span> cardNumPattern)</a>
<a class="sourceLine" id="cb20-7" data-line-number="7"></a>
<a class="sourceLine" id="cb20-8" data-line-number="8"><span class="ot">nextCardExt ::</span> <span class="dt">CardExt</span> <span class="ot">-&gt;</span> <span class="dt">CardExt</span></a>
<a class="sourceLine" id="cb20-9" data-line-number="9">nextCardExt <span class="fu">=</span> matchField</a>
<a class="sourceLine" id="cb20-10" data-line-number="10">    <span class="fu">$</span> <span class="fu">#</span>number <span class="fu">@=</span> (\n <span class="ot">-&gt;</span> <span class="kw">if</span> n <span class="fu">&lt;</span> <span class="dv">10</span> <span class="kw">then</span> embedAssoc <span class="fu">$</span> <span class="fu">#</span>number <span class="fu">@=</span> n <span class="fu">+</span> <span class="dv">1</span> <span class="kw">else</span> embedAssoc <span class="fu">$</span> <span class="fu">#</span>jack <span class="fu">@=</span> ())</a>
<a class="sourceLine" id="cb20-11" data-line-number="11">   <span class="fu">&lt;:</span> <span class="fu">#</span>jack   <span class="fu">@=</span> const (embedAssoc <span class="fu">$</span> <span class="fu">#</span>queen  <span class="fu">@=</span> ())</a>
<a class="sourceLine" id="cb20-12" data-line-number="12">   <span class="fu">&lt;:</span> <span class="fu">#</span>queen  <span class="fu">@=</span> const (embedAssoc <span class="fu">$</span> <span class="fu">#</span>king   <span class="fu">@=</span> ())</a>
<a class="sourceLine" id="cb20-13" data-line-number="13">   <span class="fu">&lt;:</span> <span class="fu">#</span>king   <span class="fu">@=</span> const (embedAssoc <span class="fu">$</span> <span class="fu">#</span>joker  <span class="fu">@=</span> ())</a>
<a class="sourceLine" id="cb20-14" data-line-number="14">   <span class="fu">&lt;:</span> <span class="fu">#</span>joker  <span class="fu">@=</span> const (embedAssoc <span class="fu">$</span> <span class="fu">#</span>number <span class="fu">@=</span> <span class="dv">1</span>)</a>
<a class="sourceLine" id="cb20-15" data-line-number="15">   <span class="fu">&lt;:</span> nil</a></code></pre></div>
<p>これで一応</p>
<ol type="1">
<li>静的で安全に(もちろん!)</li>
<li>既存のコードを改造せず</li>
<li><code>&quot;joker&quot; &gt;: ()</code> という新しい場合分けを加え</li>
<li><code>nextCardExt</code> という新しい操作(関数)を加える</li>
</ol>
<p>ことができた．</p>
<h2 id="おしまい">おしまい</h2>
<p>組込みでこれらの機能がある OCaml はいいなぁとなった．</p>
  </div>
</div>
</article>
]]></summary>
</entry>
<entry>
    <title>tasty-discover が Windows+日本語環境で動かなかったので直す</title>
    <link href="https://matsubara0507.github.io/posts/2018-03-04-fix-tasty-discover-windows.html" />
    <id>https://matsubara0507.github.io/posts/2018-03-04-fix-tasty-discover-windows.html</id>
    <published>2018-03-04T00:00:00Z</published>
    <updated>2018-03-04T00:00:00Z</updated>
    <summary type="html"><![CDATA[<article class="post card" itemscope itemtype="http://schema.org/BlogPosting">
 <div class="card-content">
  <header class="post-header">
    <h1 class="post-title" itemprop="name headline">tasty-discover が Windows+日本語環境で動かなかったので直す</h1>
    <p class="post-meta">
      <time datetime="2018-03-04" itemprop="datePublished">
        Mar 4, 2018
      </time>
      
      
      <div class="tags">
          <i class="fa fa-tags"></i> <a href="/tags/Haskell.html">Haskell</a>
      </div>
      
    </p>
  </header>

  <div class="post-content" itemprop="articleBody">
    <p>おそらく少数派であろう Windows + 日本語環境の Haskeller のひげです．</p>
<p>最近は知人のすゝめで，Haskell のテストフレームワークに <a href="https://hackage.haskell.org/package/tasty"><code>tasty</code></a> を使ってます． <code>tasty</code> にも例に漏れず <a href="http://hackage.haskell.org/package/tasty-discover"><code>tasty-discover</code></a> というテスト用の関数を <code>.hs</code> ファイルから集めてきてくれるツールがある． しかし，悲しいことに <code>tasty-discover</code> がマルチバイト文字(日本語とか)を Windows で読み込むと <strong>いつもの</strong> エラーで死んでしまう．</p>
<p>なので，直して PR 出した． この記事はそのメモです．</p>
<h2 id="問題のエラー">問題のエラー</h2>
<pre><code>Building test suite &#39;test&#39; for tasty-discover-4.1.3..
tasty-discover: test\ConfigTest.hs: hGetContents: invalid argument (invalid byte sequence)
`tasty-discover&#39; failed in phase `Haskell pre-processor&#39;. (Exit code: 1)
Progress: 1/2
--  While building custom Setup.hs for package tasty-discover-4.1.3 using:
      C:\Users\Hoge\AppData\Roaming\stack\setup-exe-cache\i386-windows\Cabal-simple_Z6RU0evB_2.0.1.0_ghc-8.2.2.exe --builddir=.stack-work\dist\010ee936 build lib:tasty-discover exe:tasty-discover test:test --ghc-options &quot; -ddump-hi -ddump-to-file -fdiagnostics-color=always&quot;
    Process exited with code: ExitFailure 1</code></pre>
<p><code>hGetContents: invalid argument (invalid byte sequence)</code> は 日本語 Windows Haskeller なら親の顔より良く見るエラーメッセージですね(そんなことは無い)． このエラーは <code>hGetContents</code> で読み込もうとしているファイルの文字コードが，<code>hGetContents</code> で設定されている文字コードと違うために起きている(<code>hGetContents</code> 関数は，例えば <code>readFile</code> 関数などで呼び出されている)．</p>
<h2 id="対処法">対処法</h2>
<p>日本語 Windows Haskeller 筆頭の igrep 氏が Haskell-jp Blog に投稿してくれてる．</p>
<ul>
<li><a href="https://haskell.jp/blog/posts/2017/windows-gotchas.html">WindowsでHaskellを扱う時によく遭遇するエラーと対処法 - Haskell-jp</a></li>
</ul>
<p>今回は(孫プロセスとして読んでるせいか)「それでもダメな場合」に当たる． つまり，場当たり的な解決方法(<code>chcp 65001</code> と打つとか)ではダメで，プログラムを修正するしかない．</p>
<h2 id="section"></h2>
<p>神な igrep 氏は，この場合の解決策も書いておいてくれた． この <a href="https://github.com/haskell/haddock/pull/566">PR</a> を参考にして書き換えてやればよい．</p>
<p><code>tasty-discover</code> も<a href="https://github.com/lwm/tasty-discover/pull/138/files">こんな感じに書き加えた</a>．</p>
<h2 id="pr-を出す">PR を出す</h2>
<p>修正自体は1時間ほどで終わり(移動中の新幹線の中で直した)，これでテストを実行できるようになったので PR を出さずに満足してしまった(あるある)． 半月ほどほっといてたら，同じケースで困った知り合いに <a href="https://github.com/lwm/tasty-discover/issues/135">Issue</a> を出されてしまった(笑)</p>
<p>しょうがないので PR を出そうとしたら，「Windows は良く分からないから，ぜひ Windows 環境用の自動テストも欲しい！」と<a href="https://github.com/lwm/tasty-discover/issues/127">作者に言われてしまった</a>(「時間があればやって」とね)．</p>
<h2 id="section-1"></h2>
<p><a href="https://www.appveyor.com/">AppVeyor</a> と言うのを使えばいいみたい． 調べたらサクッとできそうなので，やってみた．</p>
<ul>
<li><a href="https://www.snoyman.com/blog/2016/08/appveyor-haskell-windows-ci">Using AppVeyor for Haskell+Windows CI</a></li>
</ul>
<p>記事にある設定ファイルをそのままコピペしてやってみたが，問題がふたつあった． ひとつ目は，<code>tasty-discover</code> のテスト自体に <code>tasty-discover</code> を使っている点だ． 最初に <code>stack test</code> を実行するときにはまだ <code>tasty-discover</code> はインストールされてないのでテストが落ちてしまう．</p>
<pre><code>[2 of 2] Compiling Paths_tasty_discover ( .stack-work\dist\010ee936\build\tasty-discover\autogen\Paths_tasty_discover.hs, .stack-work\dist\010ee936\build\tasty-discover\tasty-discover-tmp\Paths_tasty_discover.o )
Linking .stack-work\dist\010ee936\build\tasty-discover\tasty-discover.exe ...
Preprocessing test suite &#39;test&#39; for tasty-discover-4.1.3..
Building test suite &#39;test&#39; for tasty-discover-4.1.3..
ghc.EXE: could not execute: tasty-discover</code></pre>
<p>なので，<code>stack test</code> する前に <code>stack install</code> することにした．</p>
<h2 id="section-2"></h2>
<p>ふたつ目は，そもそも WIndows のビルドが落ちる点． <code>System.FilePath</code> に関するバグだったので，<a href="https://github.com/lwm/tasty-discover/pull/136/files#diff-383b12983902facd1ce205458e1061b6">サクッと直した</a>． Windows のテストに関する <a href="https://github.com/lwm/tasty-discover/pull/136">PR</a> もマージされたので，本命の <a href="https://github.com/lwm/tasty-discover/pull/138">PR</a> も出した(これもマージされた)．</p>
<h2 id="今回の問題をテストする">今回の問題をテストする(？)</h2>
<p>今回の問題のテストも欲しいと言われた． <code>tasty-discover</code> のテスト自体が <code>tasty-discover</code> を使うため，ユニットテストとして表現できない． <code>stack test</code> そのものが落ちるか落ちないかのテストはできるが，それはなんか違うなぁと思い，結局コミットはしていない．</p>
<p>ただし，いちおう AppVeyor で<a href="https://ci.appveyor.com/project/matsubara0507/tasty-discover/build/1.0.9">再現できるようにはした</a>． AppVeyor はデフォルトだと日本語環境になっていない(即ち Shift-JIS じゃない)ため落ちない． なので，以下を参考にして日本語環境にして実行した．</p>
<ul>
<li><a href="https://github.com/appveyor/ci/issues/846">Support a different code page · Issue #846 · appveyor/ci</a></li>
</ul>
<pre><code>init:
- ps: Set-WinSystemLocale ja-JP
- ps: Start-Sleep -s 5
- ps: Restart-Computer</code></pre>
<p>というのを <code>appveyor.yml</code> に書き加えるだけで良い．</p>
<h2 id="おしまい">おしまい</h2>
<p>なんか <a href="https://github.com/lwm/tasty-discover/issues/139">Push 権限を貰った</a>． こういうこともあるんですね(OSS歴が浅いので驚いた)．</p>
  </div>
</div>
</article>
]]></summary>
</entry>
<entry>
    <title>拡張可能タングルでDo記法レスプログラミング♪ (Haskell)</title>
    <link href="https://matsubara0507.github.io/posts/2018-02-22-fun-of-extensible-3.html" />
    <id>https://matsubara0507.github.io/posts/2018-02-22-fun-of-extensible-3.html</id>
    <published>2018-02-22T00:00:00Z</published>
    <updated>2018-02-22T00:00:00Z</updated>
    <summary type="html"><![CDATA[<article class="post card" itemscope itemtype="http://schema.org/BlogPosting">
 <div class="card-content">
  <header class="post-header">
    <h1 class="post-title" itemprop="name headline">拡張可能タングルでDo記法レスプログラミング♪ (Haskell)</h1>
    <p class="post-meta">
      <time datetime="2018-02-22" itemprop="datePublished">
        Feb 22, 2018
      </time>
      
      
      <div class="tags">
          <i class="fa fa-tags"></i> <a href="/tags/Haskell.html">Haskell</a> <a href="/tags/extensible-package.html">extensible-package</a>
      </div>
      
    </p>
  </header>

  <div class="post-content" itemprop="articleBody">
    <p>「<a href="https://hackage.haskell.org/package/extensible"><code>extensible</code></a> パッケージの楽しみ その３」です．</p>
<p>拡張可能レコードやら Extensible Effect やら，Haskell の Extensible なものを全て統一された仕組みで提供する化け物パッケージ <a href="https://hackage.haskell.org/package/extensible-0.4.7.1"><code>extensible</code></a> について，割とドキュメントには無い(？)ネタを書いておくシリーズ第三弾です． ぼく自身は作者ではないし，間違っているかもなのでこの記事を完全には当てにしないでください．</p>
<p>また，現在の最新バージョンは 0.4.7.1 です(そのバージョンでハナシをしてる)．</p>
<h2 id="section"></h2>
<p><a href="/posts/2017-11-28-fun-of-extensible-1.html">前々回</a>は拡張可能レコードの拡縮の話を，<a href="/posts/2018-01-31-fun-of-extensible-2.html">前回</a>は拡張可能直和型(バリアント)を引数に取る関数の話を書きました．</p>
<p>今回は <strong>拡張可能タングル</strong> で遊んでみます． 今回の Haskell コードは基本的に<a href="https://gist.github.com/matsubara0507/be20aa514016c991f19f2e604409cd96">コレ</a>．</p>
<h2 id="拡張可能タングル">拡張可能タングル</h2>
<p>作者さんの拡張可能タングルについての記事があり，非常に分かりやすいです．</p>
<ul>
<li><a href="http://fumieval.hatenablog.com/entry/2016/12/18/181540">波打たせるものの正体(エクステンシブル・タングル) - モナドとわたしとコモナド</a></li>
</ul>
<p>拡張可能タングルを用いれば，文脈付き(<code>IO</code> などの <code>Monad</code> 型クラスのインスタンス)で拡張可能レコードを生成し，更にフィールド間で依存関係を持つ際に，型クラスを用いて各フィールドごとに振る舞いを記述できるようになる． まぁこのヒトコトでは伝わらないですよね．</p>
<p>百聞は一見に如かず．例えば</p>
<div class="sourceCode" id="cb1"><pre class="sourceCode haskell"><code class="sourceCode haskell"><a class="sourceLine" id="cb1-1" data-line-number="1"><span class="kw">type</span> <span class="dt">Rec</span> <span class="fu">=</span> <span class="dt">Record</span> <span class="dt">Fields</span></a>
<a class="sourceLine" id="cb1-2" data-line-number="2"><span class="kw">type</span> <span class="dt">Fields</span> <span class="fu">=</span></a>
<a class="sourceLine" id="cb1-3" data-line-number="3">    <span class="ch">&#39;[ &quot;hoge1&quot; &gt;: String</span></a>
<a class="sourceLine" id="cb1-4" data-line-number="4">     , <span class="st">&quot;hoge2&quot;</span> <span class="fu">&gt;:</span> <span class="dt">Bool</span></a>
<a class="sourceLine" id="cb1-5" data-line-number="5">     , <span class="st">&quot;hoge3&quot;</span> <span class="fu">&gt;:</span> <span class="dt">Int</span></a>
<a class="sourceLine" id="cb1-6" data-line-number="6">     ]</a>
<a class="sourceLine" id="cb1-7" data-line-number="7"></a>
<a class="sourceLine" id="cb1-8" data-line-number="8"><span class="ot">makeRec ::</span> <span class="dt">IO</span> <span class="dt">Rec</span></a>
<a class="sourceLine" id="cb1-9" data-line-number="9">makeRec <span class="fu">=</span> <span class="kw">do</span></a>
<a class="sourceLine" id="cb1-10" data-line-number="10">  hoge1 <span class="ot">&lt;-</span> getLine</a>
<a class="sourceLine" id="cb1-11" data-line-number="11">  hoge3 <span class="ot">&lt;-</span> randomRIO (<span class="dv">0</span>, <span class="dv">2</span> <span class="fu">*</span> length hoge1)</a>
<a class="sourceLine" id="cb1-12" data-line-number="12">  pure</a>
<a class="sourceLine" id="cb1-13" data-line-number="13">     <span class="fu">$</span> <span class="fu">#</span>hoge1 <span class="fu">@=</span> hoge1</a>
<a class="sourceLine" id="cb1-14" data-line-number="14">    <span class="fu">&lt;:</span> <span class="fu">#</span>hoge2 <span class="fu">@=</span> (length hoge1 <span class="fu">&lt;=</span> hoge3)</a>
<a class="sourceLine" id="cb1-15" data-line-number="15">    <span class="fu">&lt;:</span> <span class="fu">#</span>hoge3 <span class="fu">@=</span> hoge3</a>
<a class="sourceLine" id="cb1-16" data-line-number="16">    <span class="fu">&lt;:</span> emptyRecord</a></code></pre></div>
<p>というような関数があったとする． これを拡張可能タングルを使って書き直すと次のようになります．</p>
<div class="sourceCode" id="cb2"><pre class="sourceCode haskell"><code class="sourceCode haskell"><a class="sourceLine" id="cb2-1" data-line-number="1"><span class="ot">makeRec ::</span> <span class="dt">IO</span> <span class="dt">Rec</span></a>
<a class="sourceLine" id="cb2-2" data-line-number="2">makeRec <span class="fu">=</span> runTangles tangles (wrench emptyRecord)</a>
<a class="sourceLine" id="cb2-3" data-line-number="3"></a>
<a class="sourceLine" id="cb2-4" data-line-number="4"><span class="kw">type</span> <span class="dt">FieldI</span> <span class="fu">=</span> <span class="dt">Field</span> <span class="dt">Identity</span></a>
<a class="sourceLine" id="cb2-5" data-line-number="5"></a>
<a class="sourceLine" id="cb2-6" data-line-number="6"><span class="ot">tangles ::</span> <span class="dt">Comp</span> (<span class="dt">TangleT</span> <span class="dt">FieldI</span> <span class="dt">Fields</span> <span class="dt">IO</span>) <span class="dt">FieldI</span> <span class="fu">:*</span> <span class="dt">Fields</span></a>
<a class="sourceLine" id="cb2-7" data-line-number="7">tangles <span class="fu">=</span> htabulateFor (<span class="dt">Proxy</span><span class="ot"> ::</span> <span class="dt">Proxy</span> <span class="dt">MakeRec</span>) <span class="fu">$</span></a>
<a class="sourceLine" id="cb2-8" data-line-number="8">  \m <span class="ot">-&gt;</span> <span class="dt">Comp</span> <span class="fu">$</span> <span class="dt">Field</span> <span class="fu">.</span> pure <span class="fu">&lt;$&gt;</span> make m</a>
<a class="sourceLine" id="cb2-9" data-line-number="9"></a>
<a class="sourceLine" id="cb2-10" data-line-number="10"><span class="kw">class</span> <span class="dt">MakeRec</span> kv <span class="kw">where</span></a>
<a class="sourceLine" id="cb2-11" data-line-number="11"><span class="ot">  make ::</span> proxy kv <span class="ot">-&gt;</span> <span class="dt">TangleT</span> <span class="dt">FieldI</span> <span class="dt">Fields</span> <span class="dt">IO</span> (<span class="dt">AssocValue</span> kv)</a>
<a class="sourceLine" id="cb2-12" data-line-number="12"></a>
<a class="sourceLine" id="cb2-13" data-line-number="13"><span class="kw">instance</span> <span class="dt">MakeRec</span> (<span class="st">&quot;hoge1&quot;</span> <span class="fu">&gt;:</span> <span class="dt">String</span>) <span class="kw">where</span></a>
<a class="sourceLine" id="cb2-14" data-line-number="14">  make _ <span class="fu">=</span> lift getLine</a>
<a class="sourceLine" id="cb2-15" data-line-number="15"></a>
<a class="sourceLine" id="cb2-16" data-line-number="16"><span class="kw">instance</span> <span class="dt">MakeRec</span> (<span class="st">&quot;hoge2&quot;</span> <span class="fu">&gt;:</span> <span class="dt">Bool</span>) <span class="kw">where</span></a>
<a class="sourceLine" id="cb2-17" data-line-number="17">  make _ <span class="fu">=</span> (<span class="fu">&lt;=</span>) <span class="fu">&lt;$&gt;</span> (length <span class="fu">&lt;$&gt;</span> lasso <span class="fu">#</span>hoge1) <span class="fu">&lt;*&gt;</span> lasso <span class="fu">#</span>hoge3</a>
<a class="sourceLine" id="cb2-18" data-line-number="18"></a>
<a class="sourceLine" id="cb2-19" data-line-number="19"><span class="kw">instance</span> <span class="dt">MakeRec</span> (<span class="st">&quot;hoge3&quot;</span> <span class="fu">&gt;:</span> <span class="dt">Int</span>) <span class="kw">where</span></a>
<a class="sourceLine" id="cb2-20" data-line-number="20">  make _ <span class="fu">=</span> <span class="kw">do</span></a>
<a class="sourceLine" id="cb2-21" data-line-number="21">    ml <span class="ot">&lt;-</span> length <span class="fu">&lt;$&gt;</span> lasso <span class="fu">#</span>hoge1</a>
<a class="sourceLine" id="cb2-22" data-line-number="22">    lift <span class="fu">$</span> randomRIO (<span class="dv">0</span>, <span class="dv">2</span> <span class="fu">*</span> ml)</a></code></pre></div>
<p>コード量そのものは倍近くなっている． しかし，フィールドの構築方法ごとにインスタンスメソッドとして切り分けることが出来ている． しかも，<strong>摩訶不思議な <a href="https://hackage.haskell.org/package/extensible-0.4.7.1/docs/Data-Extensible-Tangle.html#v:lasso"><code>lasso</code></a> 関数により依存関係も勝手に解決してくれる</strong> ． もちろん，フィールドのインスタンスが足りないときは，足りないというコンパイルエラーになるよ．</p>
<h2 id="do記法レスプログラミング">Do記法レスプログラミング</h2>
<p>Haskell はなんらかの作用付きの振る舞いは次のように <code>Monad</code> と <code>do</code> 記法を用いて書くのが一般的だ． しかし，便利な Do 記法に甘えて無駄に長い，数十行もある Do 式を書いたことは無いだろうか？ たしかに(関数合成だけで記述するより)読みやすいが，なんかこう…ちがうじゃないですか！？</p>
<h2 id="section-1"></h2>
<p>そこで，先述した拡張可能タングルを用いて長いDo式をフィールドごとに切り分けてみよう． 例題として次のようなログ(っぽいなにか)を読み込む関数を考える．</p>
<div class="sourceCode" id="cb3"><pre class="sourceCode haskell"><code class="sourceCode haskell"><a class="sourceLine" id="cb3-1" data-line-number="1"><span class="kw">type</span> <span class="dt">Log</span> <span class="fu">=</span> <span class="dt">Record</span> <span class="dt">LogFields</span></a>
<a class="sourceLine" id="cb3-2" data-line-number="2"><span class="kw">type</span> <span class="dt">LogFields</span> <span class="fu">=</span></a>
<a class="sourceLine" id="cb3-3" data-line-number="3">    <span class="ch">&#39;[ &quot;path&quot;    &gt;: FilePath</span></a>
<a class="sourceLine" id="cb3-4" data-line-number="4">     , <span class="st">&quot;time&quot;</span>    <span class="fu">&gt;:</span> <span class="dt">Time</span></a>
<a class="sourceLine" id="cb3-5" data-line-number="5">     , <span class="st">&quot;code&quot;</span>    <span class="fu">&gt;:</span> <span class="dt">Int</span></a>
<a class="sourceLine" id="cb3-6" data-line-number="6">     , <span class="st">&quot;message&quot;</span> <span class="fu">&gt;:</span> <span class="dt">Text</span></a>
<a class="sourceLine" id="cb3-7" data-line-number="7">     ]</a>
<a class="sourceLine" id="cb3-8" data-line-number="8"></a>
<a class="sourceLine" id="cb3-9" data-line-number="9"><span class="kw">type</span> <span class="dt">Time</span> <span class="fu">=</span> <span class="dt">Text</span></a>
<a class="sourceLine" id="cb3-10" data-line-number="10"></a>
<a class="sourceLine" id="cb3-11" data-line-number="11"><span class="kw">type</span> <span class="dt">LogCsv</span> <span class="fu">=</span> <span class="dt">Record</span> <span class="dt">CsvFields</span></a>
<a class="sourceLine" id="cb3-12" data-line-number="12"></a>
<a class="sourceLine" id="cb3-13" data-line-number="13"><span class="kw">type</span> <span class="dt">CsvFields</span> <span class="fu">=</span></a>
<a class="sourceLine" id="cb3-14" data-line-number="14">    <span class="ch">&#39;[ &quot;time&quot;    &gt;: Time</span></a>
<a class="sourceLine" id="cb3-15" data-line-number="15">     , <span class="st">&quot;info&quot;</span>    <span class="fu">&gt;:</span> <span class="dt">LB.ByteString</span></a>
<a class="sourceLine" id="cb3-16" data-line-number="16">     ]</a>
<a class="sourceLine" id="cb3-17" data-line-number="17"></a>
<a class="sourceLine" id="cb3-18" data-line-number="18"><span class="kw">type</span> <span class="dt">Info</span> <span class="fu">=</span> <span class="dt">Record</span></a>
<a class="sourceLine" id="cb3-19" data-line-number="19">    <span class="ch">&#39;[ &quot;code&quot;    &gt;: Int</span></a>
<a class="sourceLine" id="cb3-20" data-line-number="20">     , <span class="st">&quot;message&quot;</span> <span class="fu">&gt;:</span> <span class="dt">Text</span></a>
<a class="sourceLine" id="cb3-21" data-line-number="21">     ]</a>
<a class="sourceLine" id="cb3-22" data-line-number="22"></a>
<a class="sourceLine" id="cb3-23" data-line-number="23"><span class="kw">type</span> <span class="dt">EIO</span> <span class="fu">=</span> <span class="dt">Eff</span></a>
<a class="sourceLine" id="cb3-24" data-line-number="24">    <span class="ch">&#39;[ EitherDef String</span></a>
<a class="sourceLine" id="cb3-25" data-line-number="25">     , <span class="st">&quot;IO&quot;</span> <span class="fu">&gt;:</span> <span class="dt">IO</span></a>
<a class="sourceLine" id="cb3-26" data-line-number="26">     ]</a>
<a class="sourceLine" id="cb3-27" data-line-number="27"></a>
<a class="sourceLine" id="cb3-28" data-line-number="28"><span class="ot">runEIO ::</span> <span class="dt">EIO</span> a <span class="ot">-&gt;</span> <span class="dt">IO</span> (<span class="dt">Either</span> <span class="dt">String</span> a)</a>
<a class="sourceLine" id="cb3-29" data-line-number="29">runEIO <span class="fu">=</span> retractEff <span class="fu">.</span> runEitherDef</a>
<a class="sourceLine" id="cb3-30" data-line-number="30"></a>
<a class="sourceLine" id="cb3-31" data-line-number="31"><span class="ot">main ::</span> <span class="dt">IO</span> ()</a>
<a class="sourceLine" id="cb3-32" data-line-number="32">main <span class="fu">=</span> <span class="kw">do</span></a>
<a class="sourceLine" id="cb3-33" data-line-number="33">  result <span class="ot">&lt;-</span> runEIO <span class="fu">$</span> <span class="kw">do</span></a>
<a class="sourceLine" id="cb3-34" data-line-number="34">    (path<span class="fu">:</span>_) <span class="ot">&lt;-</span> liftIO getArgs</a>
<a class="sourceLine" id="cb3-35" data-line-number="35">    file <span class="ot">&lt;-</span>  liftIO (LB.readFile path)</a>
<a class="sourceLine" id="cb3-36" data-line-number="36">    <span class="kw">let</span></a>
<a class="sourceLine" id="cb3-37" data-line-number="37">      csv <span class="fu">=</span> mconcat [header, <span class="st">&quot;\n&quot;</span>, file]</a>
<a class="sourceLine" id="cb3-38" data-line-number="38">    (_, logs) <span class="ot">&lt;-</span> either throwError pure (decodeByName csv)<span class="ot"> ::</span> <span class="dt">EIO</span> (<span class="dt">Header</span>, <span class="dt">LogCsv</span>)</a>
<a class="sourceLine" id="cb3-39" data-line-number="39">    <span class="kw">let</span></a>
<a class="sourceLine" id="cb3-40" data-line-number="40">      log&#39; <span class="fu">=</span> V.head logs</a>
<a class="sourceLine" id="cb3-41" data-line-number="41">    info <span class="ot">&lt;-</span> either throwError pure (eitherDecode <span class="fu">$</span> log&#39; <span class="fu">^.</span> <span class="fu">#</span>info)<span class="ot"> ::</span> <span class="dt">EIO</span> <span class="dt">Info</span></a>
<a class="sourceLine" id="cb3-42" data-line-number="42">    pure <span class="fu">$</span></a>
<a class="sourceLine" id="cb3-43" data-line-number="43">      <span class="fu">#</span>path <span class="fu">@=</span> path <span class="fu">&lt;:</span> <span class="fu">#</span>time <span class="fu">@=</span> (log&#39; <span class="fu">^.</span> <span class="fu">#</span>time) <span class="fu">&lt;:</span> info</a>
<a class="sourceLine" id="cb3-44" data-line-number="44">  either error print result</a>
<a class="sourceLine" id="cb3-45" data-line-number="45"></a>
<a class="sourceLine" id="cb3-46" data-line-number="46"><span class="ot">header ::</span> <span class="dt">LB.ByteString</span></a>
<a class="sourceLine" id="cb3-47" data-line-number="47">header <span class="fu">=</span> LB.intercalate <span class="st">&quot;,&quot;</span> <span class="fu">.</span> fmap fromString <span class="fu">$</span> henumerateFor</a>
<a class="sourceLine" id="cb3-48" data-line-number="48">  (<span class="dt">Proxy</span><span class="ot"> ::</span> <span class="dt">Proxy</span> (<span class="dt">KeyValue</span> <span class="dt">KnownSymbol</span> <span class="dt">Show</span>))</a>
<a class="sourceLine" id="cb3-49" data-line-number="49">  (<span class="dt">Proxy</span><span class="ot"> ::</span> <span class="dt">Proxy</span> <span class="dt">CsvFields</span>)</a>
<a class="sourceLine" id="cb3-50" data-line-number="50">  ((<span class="fu">:</span>) <span class="fu">.</span> symbolVal <span class="fu">.</span> proxyAssocKey)</a>
<a class="sourceLine" id="cb3-51" data-line-number="51">  []</a></code></pre></div>
<p>このメイン関数は次のような CSV をログデータとして読み込んで，2行目の JSON もパースしたうえで，ひとつの拡張可能レコードとして吐き出す．</p>
<pre class="csv"><code>2018-02-23T03:10:00,&quot;{&quot;&quot;code&quot;&quot;:123,&quot;&quot;message&quot;&quot;:&quot;&quot;hello&quot;&quot;}&quot;</code></pre>
<p>正直，この例だと大した長さではないので切り分けるメリットはなーーんにもないんですけど．</p>
<h3 id="stack-script-とカスタムスナップショット"><code>stack script</code> とカスタムスナップショット</h3>
<p>その前に，このメイン関数をどうやって実行するか． この程度のモノをいちいち stack プロジェクトにしていてはスペースの無駄なので，<code>stack script</code> を使う．</p>
<p><code>stack script</code> コマンド知っていますか？ <code>stack runghc</code> と基本的には一緒なのだが，違いは2点(たぶん)．</p>
<ol type="1">
<li>resolver の指定が必須 (たしか <code>runghc</code> は指定しなければプロジェクトのを使うはず)</li>
<li><strong>パッケージを引数で指定する必要が無い</strong></li>
</ol>
<p>(2)がすごいよね． <code>runghc</code> の場合，使ってるパッケージを <code>--package hoge</code> と一つずつ指定しなければならない(今回は<a href="https://gist.github.com/matsubara0507/be20aa514016c991f19f2e604409cd96#file-fun-of-tangle-hs-L13">使ってるパッケージが多い</a>ので尚更大変)が，<code>script</code> なら指定した resolver から自動で解決してくれる．</p>
<h2 id="section-2"></h2>
<p>ただ問題がひとつ． 今回は <a href="https://hackage.haskell.org/package/aeson"><code>aeson</code></a> や <a href="https://hackage.haskell.org/package/cassava"><code>cassava</code></a> の型クラスのインスタンスを拡張可能レコードで使いたいので，Stackage に登録していない <a href="https://github.com/matsubara0507/extensible-instances"><code>matsubara0507/extensible-instances</code></a> にも依存したい． そこで，カスタムスナップショットだ． 日本語で詳しくは下記のサイトにまとまっていた．</p>
<ul>
<li><a href="https://haskell.e-bigmoon.com/posts/2017-12-23-stack161.html">カスタムスナップショットの紹介</a></li>
</ul>
<p>ここには書いてないが，カスタムスナップショットは <code>stack script</code> にも使える． 例えば今回は次のようなカスタムスナップショットを作った．</p>
<div class="sourceCode" id="cb5"><pre class="sourceCode yaml"><code class="sourceCode yaml"><a class="sourceLine" id="cb5-1" data-line-number="1"><span class="fu">resolver:</span><span class="at"> lts-10.6</span></a>
<a class="sourceLine" id="cb5-2" data-line-number="2"><span class="fu">name:</span><span class="at"> matsubara0507</span></a>
<a class="sourceLine" id="cb5-3" data-line-number="3"><span class="fu">packages:</span></a>
<a class="sourceLine" id="cb5-4" data-line-number="4"><span class="kw">-</span> <span class="fu">git:</span><span class="at"> https://github.com/matsubara0507/extensible-instances.git</span></a>
<a class="sourceLine" id="cb5-5" data-line-number="5">  <span class="fu">commit:</span><span class="at"> 8dabe7a3dd9cf162e2d81e4ca16dbe73b98a3809</span></a></code></pre></div>
<p>これを <code>snapshot.yaml</code> とし，例題のコードを <code>fun-of-tangle.hs</code> とすると次のように実行できる</p>
<div class="sourceCode" id="cb6"><pre class="sourceCode bash"><code class="sourceCode bash"><a class="sourceLine" id="cb6-1" data-line-number="1">$ <span class="fu">cat</span> sampleLog.csv</a>
<a class="sourceLine" id="cb6-2" data-line-number="2"><span class="ex">2018-02-23T03</span>:10:00,<span class="st">&quot;{&quot;&quot;code&quot;&quot;:123,&quot;&quot;message&quot;&quot;:&quot;&quot;hello&quot;&quot;}&quot;</span></a>
<a class="sourceLine" id="cb6-3" data-line-number="3"></a>
<a class="sourceLine" id="cb6-4" data-line-number="4">$ <span class="ex">stack</span> script --resolver ./snapshot.yaml -- fun-of-tangle.hs sampleLog.csv</a>
<a class="sourceLine" id="cb6-5" data-line-number="5"><span class="ex">Using</span> resolver: custom: ./snapshot.yaml specified on command line</a>
<a class="sourceLine" id="cb6-6" data-line-number="6"><span class="ex">path</span> @= <span class="st">&quot;sampleLog.csv&quot;</span> <span class="op">&lt;</span>: time @= <span class="st">&quot;2018-02-23T03:10:00&quot;</span> <span class="op">&lt;</span>: code @= 123 <span class="op">&lt;</span>: message @= <span class="st">&quot;hello&quot;</span> <span class="op">&lt;</span>: nil</a></code></pre></div>
<h3 id="ヘッダの生成">ヘッダの生成</h3>
<p>CSV の読み込みには <code>cassava</code> というパッケージを使っている． このパッケージには <code>FromRecord</code> と <code>FromNamedRecord</code> 型クラスがある． 前者は前から順に勝手に取っていくのに対し，後者はフィールド名と CSV の列名を対応させて取ってきてくれる．</p>
<p><code>cassava</code> 系の拡張可能レコードのインスタンスを書いてるときは <code>extensible</code> 力がまだ低く，フィールドからインデックスをとっていくる方法が分からなかった． そのため <code>FromRecord</code> 型クラスのインスタンスが <code>extensible-instances</code> にはない(何故かついこの前，<a href="https://github.com/fumieval/extensible/commit/074210e76ed5bd35f62d452f66c940a40d821534">本家へコミット</a>されたけど)．</p>
<p>なので，型から列名のヘッダーを生成してしまおう，というのが <code>header</code> 関数．</p>
<div class="sourceCode" id="cb7"><pre class="sourceCode haskell"><code class="sourceCode haskell"><a class="sourceLine" id="cb7-1" data-line-number="1"><span class="ot">header ::</span> <span class="dt">LB.ByteString</span></a>
<a class="sourceLine" id="cb7-2" data-line-number="2">header <span class="fu">=</span> LB.intercalate <span class="st">&quot;,&quot;</span> <span class="fu">.</span> fmap fromString <span class="fu">$</span> henumerateFor</a>
<a class="sourceLine" id="cb7-3" data-line-number="3">  (<span class="dt">Proxy</span><span class="ot"> ::</span> <span class="dt">Proxy</span> (<span class="dt">KeyValue</span> <span class="dt">KnownSymbol</span> <span class="dt">Show</span>))</a>
<a class="sourceLine" id="cb7-4" data-line-number="4">  (<span class="dt">Proxy</span><span class="ot"> ::</span> <span class="dt">Proxy</span> <span class="dt">CsvFields</span>)</a>
<a class="sourceLine" id="cb7-5" data-line-number="5">  ((<span class="fu">:</span>) <span class="fu">.</span> symbolVal <span class="fu">.</span> proxyAssocKey)</a>
<a class="sourceLine" id="cb7-6" data-line-number="6">  []</a></code></pre></div>
<p><code>Proxy (KeyValue KnownSymbol Show)</code> ってのが悲しいですよね…(<code>Show</code> は全く無意味)． キー側だけ型クラスを指定する方法は無いような気がしたんだよなぁ．</p>
<h2 id="分割しましょう">分割しましょう</h2>
<p>では本題．</p>
<p>まずは型クラスを考えよう．</p>
<div class="sourceCode" id="cb8"><pre class="sourceCode haskell"><code class="sourceCode haskell"><a class="sourceLine" id="cb8-1" data-line-number="1"><span class="kw">class</span> <span class="dt">MakeLog</span> kv <span class="kw">where</span></a>
<a class="sourceLine" id="cb8-2" data-line-number="2"><span class="ot">  make ::</span> proxy kv <span class="ot">-&gt;</span> <span class="dt">TangleT</span> <span class="dt">FieldI</span> <span class="dt">LogFields</span> <span class="dt">EIO</span> (<span class="dt">AssocValue</span> kv)</a></code></pre></div>
<p>試しに，<code>&quot;path&quot; &gt;: FilePath</code> のインスタンスを書いてみる．</p>
<div class="sourceCode" id="cb9"><pre class="sourceCode haskell"><code class="sourceCode haskell"><a class="sourceLine" id="cb9-1" data-line-number="1"><span class="kw">instance</span> <span class="dt">MakeLog</span> (<span class="st">&quot;path&quot;</span> <span class="fu">&gt;:</span> FilePath) <span class="kw">where</span></a>
<a class="sourceLine" id="cb9-2" data-line-number="2">  make _ <span class="fu">=</span> lift <span class="fu">$</span> liftIO getArgs <span class="fu">&gt;&gt;=</span> \<span class="kw">case</span></a>
<a class="sourceLine" id="cb9-3" data-line-number="3">    (path <span class="fu">:</span> _) <span class="ot">-&gt;</span> pure path</a>
<a class="sourceLine" id="cb9-4" data-line-number="4">    _          <span class="ot">-&gt;</span> throwError <span class="st">&quot;please path.&quot;</span></a></code></pre></div>
<p>他のはできるだろうか？ 元のメイン関数を見ればわかると思うが，たぶん無理だと思う． 他のフィールドは <code>log'</code> 変数に保存した中間状態を共有するからだ．</p>
<h3 id="中間状態をどうするか">中間状態をどうするか</h3>
<p>他にもっといい手はあるかもしれないが，今回は <strong>レコードを中間状態も加えて拡張する</strong> ことにする．</p>
<div class="sourceCode" id="cb10"><pre class="sourceCode haskell"><code class="sourceCode haskell"><a class="sourceLine" id="cb10-1" data-line-number="1"><span class="kw">type</span> <span class="dt">MidFields</span> <span class="fu">=</span> <span class="ch">&#39;[&quot;log&quot; &gt;: LogCsv &#39;</span><span class="fu">:</span> <span class="st">&quot;info&quot;</span> <span class="fu">&gt;:</span> <span class="dt">Info</span>] <span class="fu">++</span> <span class="dt">LogFields</span></a>
<a class="sourceLine" id="cb10-2" data-line-number="2"></a>
<a class="sourceLine" id="cb10-3" data-line-number="3"><span class="kw">class</span> <span class="dt">MakeLog</span> kv <span class="kw">where</span></a>
<a class="sourceLine" id="cb10-4" data-line-number="4"><span class="ot">  make ::</span> proxy kv <span class="ot">-&gt;</span> <span class="dt">TangleT</span> <span class="dt">FieldI</span> <span class="dt">MidFields</span> <span class="dt">EIO</span> (<span class="dt">AssocValue</span> kv)</a></code></pre></div>
<p><a href="https://hackage.haskell.org/package/extensible-0.4.7.1/docs/Data-Extensible-Product.html#t:-43--43-"><code>(++)</code></a> は型レベルリストの連結演算子だ． <code>'[&quot;log&quot; &gt;: LogCsv ': &quot;info&quot; &gt;: Info]</code> が追加する中間状態にあたる． これを最後にどうやって外すかと言うと，実は簡単で <a href="https://hackage.haskell.org/package/extensible-0.4.7.1/docs/Data-Extensible-Inclusion.html#v:shrink"><code>shrink</code></a> 関数で縮小してやればよい．</p>
<div class="sourceCode" id="cb11"><pre class="sourceCode haskell"><code class="sourceCode haskell"><a class="sourceLine" id="cb11-1" data-line-number="1"><span class="ot">makeLog ::</span> <span class="dt">EIO</span> <span class="dt">Log</span></a>
<a class="sourceLine" id="cb11-2" data-line-number="2">makeLog <span class="fu">=</span> shrink <span class="fu">&lt;$&gt;</span> runTangles tangles (wrench emptyRecord)</a>
<a class="sourceLine" id="cb11-3" data-line-number="3"></a>
<a class="sourceLine" id="cb11-4" data-line-number="4"><span class="ot">tangles ::</span> <span class="dt">Comp</span> (<span class="dt">TangleT</span> <span class="dt">FieldI</span> <span class="dt">MidFields</span> <span class="dt">EIO</span>) <span class="dt">FieldI</span> <span class="fu">:*</span> <span class="dt">MidFields</span></a>
<a class="sourceLine" id="cb11-5" data-line-number="5">tangles <span class="fu">=</span> htabulateFor (<span class="dt">Proxy</span><span class="ot"> ::</span> <span class="dt">Proxy</span> <span class="dt">MakeLog</span>) <span class="fu">$</span></a>
<a class="sourceLine" id="cb11-6" data-line-number="6">  \m <span class="ot">-&gt;</span> <span class="dt">Comp</span> <span class="fu">$</span> <span class="dt">Field</span> <span class="fu">.</span> pure <span class="fu">&lt;$&gt;</span> make m</a></code></pre></div>
<p>中間状態のインスタンス定義してしまう．</p>
<div class="sourceCode" id="cb12"><pre class="sourceCode haskell"><code class="sourceCode haskell"><a class="sourceLine" id="cb12-1" data-line-number="1"><span class="kw">instance</span> <span class="dt">MakeLog</span> (<span class="st">&quot;log&quot;</span> <span class="fu">&gt;:</span> <span class="dt">LogCsv</span>) <span class="kw">where</span></a>
<a class="sourceLine" id="cb12-2" data-line-number="2">  make _ <span class="fu">=</span> <span class="kw">do</span></a>
<a class="sourceLine" id="cb12-3" data-line-number="3">    file <span class="ot">&lt;-</span> lift <span class="fu">.</span> liftIO <span class="fu">.</span> LB.readFile <span class="fu">=&lt;&lt;</span> lasso <span class="fu">#</span>path</a>
<a class="sourceLine" id="cb12-4" data-line-number="4">    (_, log&#39;) <span class="ot">&lt;-</span> lift <span class="fu">$</span></a>
<a class="sourceLine" id="cb12-5" data-line-number="5">      either throwError pure (decodeByName <span class="fu">$</span> mconcat [header, <span class="st">&quot;\n&quot;</span>, file])</a>
<a class="sourceLine" id="cb12-6" data-line-number="6">    pure <span class="fu">$</span> V.head log&#39;</a>
<a class="sourceLine" id="cb12-7" data-line-number="7"></a>
<a class="sourceLine" id="cb12-8" data-line-number="8"><span class="kw">instance</span> <span class="dt">MakeLog</span> (<span class="st">&quot;info&quot;</span> <span class="fu">&gt;:</span> <span class="dt">Info</span>) <span class="kw">where</span></a>
<a class="sourceLine" id="cb12-9" data-line-number="9">  make _ <span class="fu">=</span> <span class="kw">do</span></a>
<a class="sourceLine" id="cb12-10" data-line-number="10">    log&#39; <span class="ot">&lt;-</span> lasso <span class="fu">#</span>log</a>
<a class="sourceLine" id="cb12-11" data-line-number="11">    lift <span class="fu">$</span> either throwError pure (eitherDecode <span class="fu">$</span> log&#39; <span class="fu">^.</span> <span class="fu">#</span>info)</a></code></pre></div>
<p>うん…まぁ…読みやすさのためにね，多少は <code>do</code> を残しましたよ(タイトル詐欺)．</p>
<h3 id="残りは簡単">残りは簡単</h3>
<p>あとは，フィールドを取り出すだけなので簡単．</p>
<div class="sourceCode" id="cb13"><pre class="sourceCode haskell"><code class="sourceCode haskell"><a class="sourceLine" id="cb13-1" data-line-number="1"><span class="kw">instance</span> <span class="dt">MakeLog</span> (<span class="st">&quot;time&quot;</span> <span class="fu">&gt;:</span> <span class="dt">Time</span>) <span class="kw">where</span></a>
<a class="sourceLine" id="cb13-2" data-line-number="2">  make _ <span class="fu">=</span> view <span class="fu">#</span>time <span class="fu">&lt;$&gt;</span> lasso <span class="fu">#</span>log</a>
<a class="sourceLine" id="cb13-3" data-line-number="3"></a>
<a class="sourceLine" id="cb13-4" data-line-number="4"><span class="kw">instance</span> <span class="dt">MakeLog</span> (<span class="st">&quot;code&quot;</span> <span class="fu">&gt;:</span> <span class="dt">Int</span>) <span class="kw">where</span></a>
<a class="sourceLine" id="cb13-5" data-line-number="5">  make _ <span class="fu">=</span> view <span class="fu">#</span>code <span class="fu">&lt;$&gt;</span> lasso <span class="fu">#</span>info</a>
<a class="sourceLine" id="cb13-6" data-line-number="6"></a>
<a class="sourceLine" id="cb13-7" data-line-number="7"><span class="kw">instance</span> <span class="dt">MakeLog</span> (<span class="st">&quot;message&quot;</span> <span class="fu">&gt;:</span> <span class="dt">Text</span>) <span class="kw">where</span></a>
<a class="sourceLine" id="cb13-8" data-line-number="8">  make _ <span class="fu">=</span> view <span class="fu">#</span>message <span class="fu">&lt;$&gt;</span> lasso <span class="fu">#</span>info</a></code></pre></div>
<p>メイン関数はこんな感じ．</p>
<div class="sourceCode" id="cb14"><pre class="sourceCode haskell"><code class="sourceCode haskell"><a class="sourceLine" id="cb14-1" data-line-number="1"><span class="ot">main ::</span> <span class="dt">IO</span> ()</a>
<a class="sourceLine" id="cb14-2" data-line-number="2">main <span class="fu">=</span> either error print <span class="fu">=&lt;&lt;</span> runEIO makeLog</a></code></pre></div>
<p>わぁすっきり(メイン関数は)．</p>
<h2 id="おしまい">おしまい</h2>
<p>これぐらいの規模だとメリットが皆無なんですが，もっと CSV の列数が多くなったらどうでしょう？ うーーーん，あんまり変わらないかも(笑) まぁ，少なくとも面白い(不思議な)プログラミングが出来るのは確かです．</p>
<p>僕は試しにこの方法で，<a href="https://github.com/matsubara0507/source-gh-pages/blob/tangle/app/Rules.hs">このサイトの Hakyll コード</a>を切り刻んでみました．</p>
  </div>
</div>
</article>
]]></summary>
</entry>

</feed>
