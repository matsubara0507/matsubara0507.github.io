<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
    <title>ひげメモ</title>
    <link href="https://matsubara0507.github.io/feed.xml" rel="self" />
    <link href="https://matsubara0507.github.io" />
    <id>https://matsubara0507.github.io/feed.xml</id>
    <author>
        <name>MATSUBARA Nobutada</name>
        <email></email>
    </author>
    <updated>2020-07-31T00:00:00Z</updated>
    <entry>
    <title>Hamler の Docker イメージを作る（その２）</title>
    <link href="https://matsubara0507.github.io/posts/2020-07-31-build-docker-image-for-hamler-part2.html" />
    <id>https://matsubara0507.github.io/posts/2020-07-31-build-docker-image-for-hamler-part2.html</id>
    <published>2020-07-31T00:00:00Z</published>
    <updated>2020-07-31T00:00:00Z</updated>
    <summary type="html"><![CDATA[<div class="post-content" itemprop="articleBody">
    <p>なんと「<a href="https://matsubara0507.github.io/posts/2020-06-13-build-docker-image-for-hamler.html">Hamler の Docker イメージを作る</a>」の第2段です． 現在，<a href="https://github.com/hamler-lang/hamler">Hamler</a> は活発に開発が進んでるのですが，そのたびに前回の方法でビルドしていると時間がかかりすぎるので新しい方法を考えたという話です．</p>
<p>ちなみに，<a href="https://hub.docker.com/r/hamlerlang/hamler">Hamler 側で公式の Docker イメージが提供されるようになりました</a>． しかし，あまりタグがうたれません． 今回の方法は任意のリビジョンで簡単に自前ビルドできるので，最新のリビジョンやフォークを試すのに非常に便利です．</p>
<h2 id="docker-イメージを作る">Docker イメージを作る</h2>
<p>今回やりたいのは最新のリビジョン（masterブランチ）で素早くイメージを作り直すこと． しかし，Docker 内で master を Haskell Stack でフルビルドし直すのはヒジョーに時間がかかる．</p>
<p>そこで Haskell Stack の Docker 機能を使って，ローカルのキャッシュをうまく利用できる方法をとることにする． 最終的にできた <a href="https://github.com/matsubara0507/docker-hamler/blob/781abfbdcf78f12d306f66593e94a3f08cbbd569/Dockerfile">Dockerfile</a> は次の通り：</p>
<div class="sourceCode" id="cb1"><pre class="sourceCode dockerfile"><code class="sourceCode dockerfile"><span id="cb1-1"><a href="#cb1-1"></a><span class="kw">ARG</span> GHC_VERSION=8.6.5</span>
<span id="cb1-2"><a href="#cb1-2"></a><span class="kw">ARG</span> OTP_VERSION=22.3.4.1</span>
<span id="cb1-3"><a href="#cb1-3"></a></span>
<span id="cb1-4"><a href="#cb1-4"></a><span class="kw">FROM</span> haskell:${GHC_VERSION} AS ghc</span>
<span id="cb1-5"><a href="#cb1-5"></a></span>
<span id="cb1-6"><a href="#cb1-6"></a><span class="kw">FROM</span> erlang:${OTP_VERSION} AS build</span>
<span id="cb1-7"><a href="#cb1-7"></a><span class="kw">WORKDIR</span> /work</span>
<span id="cb1-8"><a href="#cb1-8"></a><span class="kw">RUN</span> apt-get update &amp;&amp; apt-get install -y libtinfo5</span>
<span id="cb1-9"><a href="#cb1-9"></a><span class="kw">ARG</span> HAMLER_REVISION</span>
<span id="cb1-10"><a href="#cb1-10"></a><span class="kw">RUN</span> mkdir hamler \</span>
<span id="cb1-11"><a href="#cb1-11"></a> &amp;&amp; cd hamler \</span>
<span id="cb1-12"><a href="#cb1-12"></a> &amp;&amp; git init \</span>
<span id="cb1-13"><a href="#cb1-13"></a> &amp;&amp; git remote add origin https://github.com/hamler-lang/hamler.git \</span>
<span id="cb1-14"><a href="#cb1-14"></a> &amp;&amp; git fetch origin $HAMLER_REVISION \</span>
<span id="cb1-15"><a href="#cb1-15"></a> &amp;&amp; git reset --hard FETCH_HEAD</span>
<span id="cb1-16"><a href="#cb1-16"></a><span class="kw">ENV</span> LC_ALL C.UTF-8</span>
<span id="cb1-17"><a href="#cb1-17"></a><span class="kw">COPY</span> --from=ghc /usr/local/bin/stack /usr/local/bin/stack</span>
<span id="cb1-18"><a href="#cb1-18"></a><span class="kw">COPY</span> --from=ghc /opt/ghc /opt/ghc</span>
<span id="cb1-19"><a href="#cb1-19"></a><span class="kw">ARG</span> local_bin_path</span>
<span id="cb1-20"><a href="#cb1-20"></a><span class="kw">COPY</span> ${local_bin_path}/hamler /usr/local/bin/hamler</span>
<span id="cb1-21"><a href="#cb1-21"></a><span class="kw">ARG</span> GHC_VERSION</span>
<span id="cb1-22"><a href="#cb1-22"></a><span class="kw">ENV</span> PATH /usr/local/bin:/opt/ghc/${GHC_VERSION}/bin:$PATH</span>
<span id="cb1-23"><a href="#cb1-23"></a><span class="kw">RUN</span> cd hamler \</span>
<span id="cb1-24"><a href="#cb1-24"></a> &amp;&amp; stack exec --system-ghc hamler build -- -l \</span>
<span id="cb1-25"><a href="#cb1-25"></a> &amp;&amp; make foreign</span>
<span id="cb1-26"><a href="#cb1-26"></a><span class="kw">ARG</span> HAMLER_HOME=/usr/lib/hamler</span>
<span id="cb1-27"><a href="#cb1-27"></a><span class="kw">RUN</span> mkdir -p ${HAMLER_HOME}/bin \</span>
<span id="cb1-28"><a href="#cb1-28"></a> &amp;&amp; cp /usr/local/bin/hamler ${HAMLER_HOME}/bin/hamler \</span>
<span id="cb1-29"><a href="#cb1-29"></a> &amp;&amp; cp hamler/repl/replsrv ${HAMLER_HOME}/bin/replsrv \</span>
<span id="cb1-30"><a href="#cb1-30"></a> &amp;&amp; cp -r hamler/ebin  ${HAMLER_HOME} \</span>
<span id="cb1-31"><a href="#cb1-31"></a> &amp;&amp; cp -r hamler/lib  ${HAMLER_HOME}</span>
<span id="cb1-32"><a href="#cb1-32"></a></span>
<span id="cb1-33"><a href="#cb1-33"></a><span class="kw">FROM</span> erlang:${OTP_VERSION}</span>
<span id="cb1-34"><a href="#cb1-34"></a><span class="kw">ARG</span> HAMLER_HOME=/usr/lib/hamler</span>
<span id="cb1-35"><a href="#cb1-35"></a><span class="kw">WORKDIR</span> /work</span>
<span id="cb1-36"><a href="#cb1-36"></a><span class="kw">RUN</span> apt-get update &amp;&amp; apt-get install -y libtinfo5 \</span>
<span id="cb1-37"><a href="#cb1-37"></a> &amp;&amp; apt-get clean \</span>
<span id="cb1-38"><a href="#cb1-38"></a> &amp;&amp; rm -rf /var/lib/apt/lists/*</span>
<span id="cb1-39"><a href="#cb1-39"></a><span class="kw">COPY</span> --from=build ${HAMLER_HOME} ${HAMLER_HOME}</span>
<span id="cb1-40"><a href="#cb1-40"></a><span class="kw">ENV</span> LC_ALL C.UTF-8</span>
<span id="cb1-41"><a href="#cb1-41"></a><span class="kw">ENV</span> PATH ${HAMLER_HOME}/bin:$PATH</span>
<span id="cb1-42"><a href="#cb1-42"></a><span class="kw">ENTRYPOINT</span> [<span class="st">&quot;/usr/lib/hamler/bin/hamler&quot;</span>]</span></code></pre></div>
<h3 id="stack-with-docker">Stack with Docker</h3>
<p>ローカル環境ではなく，Docker コンテナ内でビルドをすることで Mac 上でも Linux のイメージを作ったりすることができる Haskell Stack の機能． また，ローカル環境でビルドするのと同様にキャッシュが効くので効率よくビルドすることが可能だ．</p>
<p>この辺りの涙ぐましい工夫は下記の記事でもやってる：</p>
<ul>
<li><a href="https://matsubara0507.github.io/posts/2019-06-10-build-haskell-app-docker-image-without-stack-image-cmd.html">stack image コマンドなしに Haskell アプリの Docker イメージを作る - ひげメモ</a></li>
</ul>
<p>やることはこれと同じで，Stack でビルドしたバイナリを指定した手元のパスに保存して，それを <code>docker build</code> 時にコピってくる感じ． 手元で任意のリビジョンの <code>hamler</code> をビルドするには次のような <code>stack.yaml</code> を書く：</p>
<div class="sourceCode" id="cb2"><pre class="sourceCode yaml"><code class="sourceCode yaml"><span id="cb2-1"><a href="#cb2-1"></a><span class="fu">resolver</span><span class="kw">:</span><span class="at"> lts-14.27</span></span>
<span id="cb2-2"><a href="#cb2-2"></a><span class="fu">allow-different-user</span><span class="kw">:</span><span class="at"> </span><span class="ch">true</span></span>
<span id="cb2-3"><a href="#cb2-3"></a></span>
<span id="cb2-4"><a href="#cb2-4"></a><span class="fu">extra-deps</span><span class="kw">:</span></span>
<span id="cb2-5"><a href="#cb2-5"></a><span class="kw">-</span><span class="at"> happy-1.19.9</span></span>
<span id="cb2-6"><a href="#cb2-6"></a><span class="kw">-</span><span class="at"> language-javascript-0.7.0.0</span></span>
<span id="cb2-7"><a href="#cb2-7"></a><span class="kw">-</span><span class="at"> network-3.0.1.1</span></span>
<span id="cb2-8"><a href="#cb2-8"></a><span class="kw">-</span><span class="at"> these-1.0.1</span></span>
<span id="cb2-9"><a href="#cb2-9"></a><span class="kw">-</span><span class="at"> semialign-1</span></span>
<span id="cb2-10"><a href="#cb2-10"></a><span class="kw">-</span><span class="at"> </span><span class="fu">github</span><span class="kw">:</span><span class="at"> hamler-lang/CoreErlang</span></span>
<span id="cb2-11"><a href="#cb2-11"></a><span class="at">  </span><span class="fu">commit</span><span class="kw">:</span><span class="at"> 2ea1038140118f5bc29f4cb14b50aa0918d62581</span></span>
<span id="cb2-12"><a href="#cb2-12"></a><span class="kw">-</span><span class="at"> </span><span class="fu">github</span><span class="kw">:</span><span class="at"> hamler-lang/purescript</span></span>
<span id="cb2-13"><a href="#cb2-13"></a><span class="at">  </span><span class="fu">commit</span><span class="kw">:</span><span class="at"> bc43f3b094feee61e7b9091a69cc7154d5f7d6a7</span></span>
<span id="cb2-14"><a href="#cb2-14"></a><span class="kw">-</span><span class="at"> megaparsec-8.0.0@sha256:362f85e243ecbcb550e1de6e5c74ba5a50c09edaa1208c99bc5b9fd242227fc6,3808</span></span>
<span id="cb2-15"><a href="#cb2-15"></a><span class="co"># ここからの extra-deps は追記（lts-14にした関係）</span></span>
<span id="cb2-16"><a href="#cb2-16"></a><span class="kw">-</span><span class="at"> </span><span class="fu">github</span><span class="kw">:</span><span class="at"> hamler-lang/hamler</span></span>
<span id="cb2-17"><a href="#cb2-17"></a><span class="at">  </span><span class="fu">commit</span><span class="kw">:</span><span class="at"> baa5f72e9139c60e4c72a7134132522e40138633</span><span class="co"> # ここでリビジョン指定する</span></span>
<span id="cb2-18"><a href="#cb2-18"></a><span class="kw">-</span><span class="at"> Glob-0.9.3</span></span>
<span id="cb2-19"><a href="#cb2-19"></a><span class="kw">-</span><span class="at"> ansi-terminal-0.8.2</span></span>
<span id="cb2-20"><a href="#cb2-20"></a><span class="kw">-</span><span class="at"> ansi-wl-pprint-0.6.8.2</span></span>
<span id="cb2-21"><a href="#cb2-21"></a><span class="kw">-</span><span class="at"> tasty-1.2</span></span>
<span id="cb2-22"><a href="#cb2-22"></a></span>
<span id="cb2-23"><a href="#cb2-23"></a><span class="fu">flags</span><span class="kw">:</span></span>
<span id="cb2-24"><a href="#cb2-24"></a><span class="at">  </span><span class="fu">these</span><span class="kw">:</span></span>
<span id="cb2-25"><a href="#cb2-25"></a><span class="at">    </span><span class="fu">assoc</span><span class="kw">:</span><span class="at"> </span><span class="ch">false</span></span>
<span id="cb2-26"><a href="#cb2-26"></a><span class="at">    </span><span class="fu">quickcheck</span><span class="kw">:</span><span class="at"> </span><span class="ch">false</span></span>
<span id="cb2-27"><a href="#cb2-27"></a></span>
<span id="cb2-28"><a href="#cb2-28"></a><span class="fu">docker</span><span class="kw">:</span></span>
<span id="cb2-29"><a href="#cb2-29"></a><span class="co">  # このイメージに lts-13 がないから lts-14 にした</span></span>
<span id="cb2-30"><a href="#cb2-30"></a><span class="at">  </span><span class="fu">repo</span><span class="kw">:</span><span class="at"> matsubara0507/stack-build</span></span>
<span id="cb2-31"><a href="#cb2-31"></a><span class="at">  </span><span class="fu">env</span><span class="kw">:</span></span>
<span id="cb2-32"><a href="#cb2-32"></a><span class="at">  </span><span class="kw">-</span><span class="at"> HAMLER_HOME=/usr/lib/hamler</span></span>
<span id="cb2-33"><a href="#cb2-33"></a><span class="at">  </span><span class="fu">enable</span><span class="kw">:</span><span class="at"> </span><span class="ch">true</span></span></code></pre></div>
<p>package.yaml はこんだけで良い：</p>
<div class="sourceCode" id="cb3"><pre class="sourceCode yaml"><code class="sourceCode yaml"><span id="cb3-1"><a href="#cb3-1"></a><span class="fu">name</span><span class="kw">:</span><span class="at"> docker-hamler</span></span>
<span id="cb3-2"><a href="#cb3-2"></a><span class="fu">version</span><span class="kw">:</span><span class="at"> </span><span class="fl">0.1.0</span></span></code></pre></div>
<p>これで <code>stack --local-bin-path=./bin install hamler</code> とすることで <code>./bin/hamler</code> が生成される．</p>
<h3 id="任意のリビジョンをクローンする">任意のリビジョンをクローンする</h3>
<p><code>hamler</code> バイナリは手に入るようになったが，他にもいくつか必要な作業がある． README を読むと手元でフルビルドをする場合は次のような手続きが書いてある：</p>
<pre><code>$ git clone https://github.com/hamler-lang/hamler.git
$ cd hamler
$ export LC_ALL=en_US.UTF-8
$ make
$ make install</code></pre>
<p><code>hamler</code> バイナリをビルドする必要はないが，これらの作業をするために <code>docker build</code> 内でリポジトリをクローンする必要はある． そのときに，<code>stack.yaml</code> で指定したリビジョンと同じものをクローンしたい． 調べた結果，次のようにすれば良い：</p>
<div class="sourceCode" id="cb5"><pre class="sourceCode dockerfile"><code class="sourceCode dockerfile"><span id="cb5-1"><a href="#cb5-1"></a><span class="kw">ARG</span> OTP_VERSION=22.3.4.1</span>
<span id="cb5-2"><a href="#cb5-2"></a></span>
<span id="cb5-3"><a href="#cb5-3"></a><span class="kw">FROM</span> erlang:${OTP_VERSION} AS build</span>
<span id="cb5-4"><a href="#cb5-4"></a><span class="kw">WORKDIR</span> /work</span>
<span id="cb5-5"><a href="#cb5-5"></a><span class="kw">ARG</span> HAMLER_REVISION</span>
<span id="cb5-6"><a href="#cb5-6"></a><span class="kw">RUN</span> mkdir hamler \</span>
<span id="cb5-7"><a href="#cb5-7"></a> &amp;&amp; cd hamler \</span>
<span id="cb5-8"><a href="#cb5-8"></a> &amp;&amp; git init \</span>
<span id="cb5-9"><a href="#cb5-9"></a> &amp;&amp; git remote add origin https://github.com/hamler-lang/hamler.git \</span>
<span id="cb5-10"><a href="#cb5-10"></a> &amp;&amp; git fetch origin $HAMLER_REVISION \</span>
<span id="cb5-11"><a href="#cb5-11"></a> &amp;&amp; git reset --hard FETCH_HEAD</span></code></pre></div>
<p><code>HAMLER_REVISION</code> は外部から与える：</p>
<pre><code>$ cat hamler_revision
#!/bin/bash
grep -A1 &#39;github: hamler-lang/hamler&#39; stack.yaml | grep -woE &quot;[0-9a-f]+&quot;
$ docker build . --build-arg HAMLER_REVISION=`./hamler_revision`</code></pre>
<p>これでクローンまではできた． 次は <code>make</code> と <code>make install</code> の部分を再現する．</p>
<h3 id="hamlerのセットアップ">Hamlerのセットアップ</h3>
<p><code>make</code> は <code>make build</code> と <code>make foreign</code> を実行している． <code>make biuld</code> は <code>hamler</code> バイナリをビルドして <code>hamler build</code> を実行している． <code>make foreign</code> は Foreign 用の Erlang の実行ファイルを生成しているようだ．</p>
<div class="sourceCode" id="cb7"><pre class="sourceCode dockerfile"><code class="sourceCode dockerfile"><span id="cb7-1"><a href="#cb7-1"></a><span class="kw">ARG</span> OTP_VERSION=22.3.4.1</span>
<span id="cb7-2"><a href="#cb7-2"></a></span>
<span id="cb7-3"><a href="#cb7-3"></a><span class="kw">FROM</span> erlang:${OTP_VERSION} AS build</span>
<span id="cb7-4"><a href="#cb7-4"></a><span class="kw">WORKDIR</span> /work</span>
<span id="cb7-5"><a href="#cb7-5"></a><span class="co"># libtinfo5 は stack や hamler の実行に使う</span></span>
<span id="cb7-6"><a href="#cb7-6"></a><span class="kw">RUN</span> apt-get update &amp;&amp; apt-get install -y libtinfo5</span>
<span id="cb7-7"><a href="#cb7-7"></a><span class="co"># stack のインストール</span></span>
<span id="cb7-8"><a href="#cb7-8"></a><span class="kw">RUN</span> curl -sSL https://get.haskellstack.org/ | sh</span>
<span id="cb7-9"><a href="#cb7-9"></a><span class="kw">ARG</span> HAMLER_REVISION</span>
<span id="cb7-10"><a href="#cb7-10"></a><span class="kw">RUN</span> mkdir hamler \</span>
<span id="cb7-11"><a href="#cb7-11"></a> &amp;&amp; cd hamler \</span>
<span id="cb7-12"><a href="#cb7-12"></a> &amp;&amp; git init \</span>
<span id="cb7-13"><a href="#cb7-13"></a> &amp;&amp; git remote add origin https://github.com/hamler-lang/hamler.git \</span>
<span id="cb7-14"><a href="#cb7-14"></a> &amp;&amp; git fetch origin $HAMLER_REVISION \</span>
<span id="cb7-15"><a href="#cb7-15"></a> &amp;&amp; git reset --hard FETCH_HEAD</span>
<span id="cb7-16"><a href="#cb7-16"></a><span class="kw">ENV</span> LC_ALL C.UTF-8</span>
<span id="cb7-17"><a href="#cb7-17"></a><span class="co"># local_bin_path でローカルからバイナリを渡す</span></span>
<span id="cb7-18"><a href="#cb7-18"></a><span class="kw">ARG</span> local_bin_path</span>
<span id="cb7-19"><a href="#cb7-19"></a><span class="kw">COPY</span> ${local_bin_path}/hamler /usr/local/bin/hamler</span>
<span id="cb7-20"><a href="#cb7-20"></a><span class="kw">ENV</span> PATH /usr/local/bin:$PATH</span>
<span id="cb7-21"><a href="#cb7-21"></a><span class="co"># ここから make の処理</span></span>
<span id="cb7-22"><a href="#cb7-22"></a><span class="kw">RUN</span> cd hamler \</span>
<span id="cb7-23"><a href="#cb7-23"></a> &amp;&amp; stack exec hamler build -- -l \</span>
<span id="cb7-24"><a href="#cb7-24"></a> &amp;&amp; make foreign</span></code></pre></div>
<p><code>make install</code> は <code>HAMLER_HOME</code> へ以下の4つをコピーしている：</p>
<ul>
<li><code>hamler</code> バイナリ</li>
<li>リポジトリにある <code>replsrv</code> という Erlang スクリプト</li>
<li><code>make foreign</code> で生成した Erlang バイナリ</li>
<li>標準ライブラリ（リポジトリの <code>lib</code> のやつ）</li>
</ul>
<p>これを <code>docker build</code> でもやる：</p>
<div class="sourceCode" id="cb8"><pre class="sourceCode dockerfile"><code class="sourceCode dockerfile"><span id="cb8-1"><a href="#cb8-1"></a><span class="co"># 続きから</span></span>
<span id="cb8-2"><a href="#cb8-2"></a> &amp;&amp; make foreign</span>
<span id="cb8-3"><a href="#cb8-3"></a><span class="kw">ARG</span> HAMLER_HOME=/usr/lib/hamler</span>
<span id="cb8-4"><a href="#cb8-4"></a><span class="kw">RUN</span> mkdir -p ${HAMLER_HOME}/bin \</span>
<span id="cb8-5"><a href="#cb8-5"></a> &amp;&amp; cp /usr/local/bin/hamler ${HAMLER_HOME}/bin/hamler \</span>
<span id="cb8-6"><a href="#cb8-6"></a> &amp;&amp; cp hamler/repl/replsrv ${HAMLER_HOME}/bin/replsrv \</span>
<span id="cb8-7"><a href="#cb8-7"></a> &amp;&amp; cp -r hamler/ebin  ${HAMLER_HOME} \</span>
<span id="cb8-8"><a href="#cb8-8"></a> &amp;&amp; cp -r hamler/lib  ${HAMLER_HOME}</span></code></pre></div>
<p>これで準備はほぼ整った． あとは実行用のイメージに必要なものだけをコピってくるだけ：</p>
<div class="sourceCode" id="cb9"><pre class="sourceCode dockerfile"><code class="sourceCode dockerfile"><span id="cb9-1"><a href="#cb9-1"></a><span class="co"># 続きから</span></span>
<span id="cb9-2"><a href="#cb9-2"></a><span class="kw">FROM</span> erlang:${OTP_VERSION}</span>
<span id="cb9-3"><a href="#cb9-3"></a><span class="kw">ARG</span> HAMLER_HOME=/usr/lib/hamler</span>
<span id="cb9-4"><a href="#cb9-4"></a><span class="kw">WORKDIR</span> /work</span>
<span id="cb9-5"><a href="#cb9-5"></a><span class="kw">RUN</span> apt-get update &amp;&amp; apt-get install -y libtinfo5 \</span>
<span id="cb9-6"><a href="#cb9-6"></a> &amp;&amp; apt-get clean \</span>
<span id="cb9-7"><a href="#cb9-7"></a> &amp;&amp; rm -rf /var/lib/apt/lists/*</span>
<span id="cb9-8"><a href="#cb9-8"></a><span class="kw">COPY</span> --from=build ${HAMLER_HOME} ${HAMLER_HOME}</span>
<span id="cb9-9"><a href="#cb9-9"></a><span class="kw">ENV</span> LC_ALL C.UTF-8</span>
<span id="cb9-10"><a href="#cb9-10"></a><span class="kw">ENV</span> PATH ${HAMLER_HOME}/bin:$PATH</span>
<span id="cb9-11"><a href="#cb9-11"></a><span class="kw">ENTRYPOINT</span> [<span class="st">&quot;/usr/lib/hamler/bin/hamler&quot;</span>]</span></code></pre></div>
<h3 id="ghcをdlしない">GHCをDLしない</h3>
<p>現状だと <code>docker build</code> 毎に GHC をインストールしてきて結構時間がかかる． せっかくマルチステージビルドができるので，GHC も別のイメージからコピってくることにした．</p>
<div class="sourceCode" id="cb10"><pre class="sourceCode dockerfile"><code class="sourceCode dockerfile"><span id="cb10-1"><a href="#cb10-1"></a><span class="kw">ARG</span> GHC_VERSION=8.6.5</span>
<span id="cb10-2"><a href="#cb10-2"></a><span class="kw">ARG</span> OTP_VERSION=22.3.4.1</span>
<span id="cb10-3"><a href="#cb10-3"></a></span>
<span id="cb10-4"><a href="#cb10-4"></a><span class="kw">FROM</span> haskell:${GHC_VERSION} AS ghc</span>
<span id="cb10-5"><a href="#cb10-5"></a></span>
<span id="cb10-6"><a href="#cb10-6"></a><span class="kw">FROM</span> erlang:${OTP_VERSION} AS build</span>
<span id="cb10-7"><a href="#cb10-7"></a><span class="kw">WORKDIR</span> /work</span>
<span id="cb10-8"><a href="#cb10-8"></a><span class="kw">RUN</span> apt-get update &amp;&amp; apt-get install -y libtinfo5</span>
<span id="cb10-9"><a href="#cb10-9"></a><span class="kw">ARG</span> GHC_VERSION</span>
<span id="cb10-10"><a href="#cb10-10"></a><span class="kw">ARG</span> HAMLER_REVISION</span>
<span id="cb10-11"><a href="#cb10-11"></a><span class="kw">ARG</span> HAMLER_HOME=/usr/lib/hamler</span>
<span id="cb10-12"><a href="#cb10-12"></a><span class="kw">RUN</span> mkdir hamler \</span>
<span id="cb10-13"><a href="#cb10-13"></a> <span class="co"># 割愛</span></span>
<span id="cb10-14"><a href="#cb10-14"></a> &amp;&amp; git reset --hard FETCH_HEAD</span>
<span id="cb10-15"><a href="#cb10-15"></a><span class="kw">ENV</span> LC_ALL C.UTF-8</span>
<span id="cb10-16"><a href="#cb10-16"></a><span class="co"># ついでに stack もとってくる</span></span>
<span id="cb10-17"><a href="#cb10-17"></a><span class="kw">COPY</span> --from=ghc /usr/local/bin/stack /usr/local/bin/stack</span>
<span id="cb10-18"><a href="#cb10-18"></a><span class="kw">COPY</span> --from=ghc /opt/ghc /opt/ghc</span>
<span id="cb10-19"><a href="#cb10-19"></a><span class="kw">ENV</span> LC_ALL C.UTF-8</span>
<span id="cb10-20"><a href="#cb10-20"></a><span class="kw">ARG</span> local_bin_path</span>
<span id="cb10-21"><a href="#cb10-21"></a><span class="kw">COPY</span> ${local_bin_path}/hamler /usr/local/bin/hamler</span>
<span id="cb10-22"><a href="#cb10-22"></a><span class="co"># GHC のパスも追加する</span></span>
<span id="cb10-23"><a href="#cb10-23"></a><span class="kw">ENV</span> PATH /usr/local/bin:/opt/ghc/${GHC_VERSION}/bin:$PATH</span>
<span id="cb10-24"><a href="#cb10-24"></a><span class="kw">RUN</span> cd hamler \</span>
<span id="cb10-25"><a href="#cb10-25"></a> <span class="co"># system-ghc フラグをつける</span></span>
<span id="cb10-26"><a href="#cb10-26"></a> &amp;&amp; stack exec --system-ghc hamler build -- -l \</span>
<span id="cb10-27"><a href="#cb10-27"></a> &amp;&amp; make foreign</span></code></pre></div>
<h3 id="動作確認">動作確認</h3>
<p>適当に Makefile を書いておく：</p>
<div class="sourceCode" id="cb11"><pre class="sourceCode makefile"><code class="sourceCode makefile"><span id="cb11-1"><a href="#cb11-1"></a><span class="dv">bin/hamler:</span></span>
<span id="cb11-2"><a href="#cb11-2"></a>	stack --local-bin-path=./bin install hamler</span>
<span id="cb11-3"><a href="#cb11-3"></a></span>
<span id="cb11-4"><a href="#cb11-4"></a><span class="dv">clean:</span></span>
<span id="cb11-5"><a href="#cb11-5"></a>	rm bin/hamler</span>
<span id="cb11-6"><a href="#cb11-6"></a></span>
<span id="cb11-7"><a href="#cb11-7"></a><span class="dv">image:</span><span class="dt"> bin/hamler</span></span>
<span id="cb11-8"><a href="#cb11-8"></a>	docker build -t <span class="ch">${</span><span class="dt">tag</span><span class="ch">}</span> . --build-arg local_bin_path=./bin --build-arg HAMLER_REVISION=`./hamler_revision`</span></code></pre></div>
<p>あとは <code>make image tag=matsubara0507/hamler:dev</code> とかやるとイメージができる． こんな感じに使う．</p>
<pre><code>$ mkdir sample
$ cd sample
$ docker run -it --rm -w /work -v `pwd`:/work matsubara0507/hamler:dev init
$ docker run -it --rm -w /work -v `pwd`:/work matsubara0507/hamler:dev repl
Compiling JSON
Hamler REPL, version 0.2
Type :? for help

&gt; 1 + 1
2</code></pre>
<h3 id="バイナリがビルドできないケース">バイナリがビルドできないケース</h3>
<p><code>Makefile</code> の設定から <code>./bin/hamler</code> が残っている場合はバイナリのビルドをスキップする． なのでリビジョンを更新してビルドしなおしたいときは先に <code>make clean</code> して <code>./bin/hamler</code> を削除する． しかし，間違えてリビジョンを変えずに <code>make clean</code> をした場合，次のようなエラーが出る：</p>
<pre><code>$ make clean
rm bin/hamler
$ make bin/hamler
stack --docker --local-bin-path=./bin install hamler
Cabal file warning in/path/to/docker-hamler.cabal@0:0: A package using &#39;cabal-version: 1.12&#39; must use section syntax. See the Cabal user guide for details.
No latest package revision found for: hamler, dependency callstack: []</code></pre>
<p>どうやらこれは <a href="https://github.com/commercialhaskell/stack/issues/5258">Stack 側のバグっぽい</a>． リビジョンを更新する以外に，Pantry 側を削除するしかなさそうなのが痛い． 早く治りますように…</p>
<h2 id="おしまい">おしまい</h2>
<p>その３があるかどうかはわかりません．</p>
  </div>]]></summary>
</entry>
<entry>
    <title>Featherweight Go を読んでみた</title>
    <link href="https://matsubara0507.github.io/posts/2020-07-02-read-featherweight-go.html" />
    <id>https://matsubara0507.github.io/posts/2020-07-02-read-featherweight-go.html</id>
    <published>2020-07-02T00:00:00Z</published>
    <updated>2020-07-02T00:00:00Z</updated>
    <summary type="html"><![CDATA[<div class="post-content" itemprop="articleBody">
    <p>Go言語にジェネリクスを導入するために，その形式的な議論を研究した論文「<a href="https://arxiv.org/abs/2005.11710">Featherweight Go</a>」が6月頭に発表されました． せっかくなので（久々に）全訳をしながら丁寧に読んでみたので，それを簡単にまとめることにします．</p>
<p>可能な限りGo言語に馴染みのない人や，プログラミング言語の形式的な議論に馴染みのない人でも理解できるようにしてみます．</p>
<h4 id="注意">注意</h4>
<ul>
<li>僕は英語がとても苦手です（DeepLを駆使しても3週間かかりました）</li>
<li>僕はGoでアプリケーションを少し書いていますがコアについては全く詳しくありません</li>
<li>僕は言語の形式的な議論を院生時代にやってましたが卒業して数年経ちます</li>
</ul>
<p>なので間違ってる可能性も十分に考慮してください．</p>
<h2 id="tldr">TL;DR</h2>
<ul>
<li>Goにジェネリクスを導入する新しいデザインを提案：
<ul>
<li>インターフェースと型アサーションを駆使する方法</li>
</ul></li>
<li>新デザインを形式的に議論するために FG と FGG を定義
<ul>
<li>FG：Goの極めて小さいモデル</li>
<li>FGG：FG をジェネリクスで拡張</li>
</ul></li>
<li>単相化（Monomorphisation）というFGGからFGの変換を定義
<ul>
<li>単相化は型パラメーターを具体化した実装を必要な型だけ完全に列挙する方法</li>
</ul></li>
<li><a href="https://github.com/rhu1/fgg">これらは全てGoでプロトタイプ実装した</a></li>
</ul>
<p>加えて，この Go のジェネリクスは Expression Problem の解法にもなり得るという議論もある．</p>
<h2 id="前提知識">前提知識</h2>
<h3 id="featherweight-java">Featherweight Java</h3>
<p>1999年に出された論文に「<a href="https://dl.acm.org/doi/abs/10.1145/320385.320395">Featherweight Java</a>」というものがある． 僕はこの論文を読んではいないがどうやら，この論文も FJ という Java の小さな言語モデルを定義し，それをジェネリクスで拡張した FGJ を定義し，FGJ から FJ への変換の仕方を定義して形式的な議論を与えている．</p>
<p>Featherweight Go でも言及されているとおり，Featherweight Go は議論の展開の仕方に Featherweight Java を参考としている．</p>
<h3 id="goの型">Goの型</h3>
<p>Goで型と呼べるものは大きく分けて2つ，構造体（structure）とインターフェース（interface）がある：</p>
<ul>
<li>構造体：
<ul>
<li><code>type [name] structure { ... }</code> という形で宣言</li>
<li><code>...</code> にフィールド名と型を列挙（いわゆるレコード型）</li>
<li>フィールドアクセスはドット記法（e.g. <code>x.m()</code>）</li>
</ul></li>
<li>インターフェース：
<ul>
<li><code>type [name] interface { ... }</code> という形で宣言</li>
<li><code>...</code> にメソッド仕様（method specification，メソッド名 + 型）を列挙</li>
<li>列挙したメソッドを定義した型はインターフェースのサブタイプになる（いわゆる構造的部分型）</li>
</ul></li>
</ul>
<h3 id="型アサーション">型アサーション</h3>
<p>Goでの型キャストっぽい機能． インターフェースで指定されてる型からサブタイプへと変換する．</p>
<div class="sourceCode" id="cb1"><pre class="sourceCode go"><code class="sourceCode go"><span id="cb1-1"><a href="#cb1-1"></a><span class="kw">type</span> Hoge <span class="kw">interface</span> { ... }</span>
<span id="cb1-2"><a href="#cb1-2"></a><span class="kw">type</span> Fuga <span class="kw">struct</span> { ... }</span>
<span id="cb1-3"><a href="#cb1-3"></a></span>
<span id="cb1-4"><a href="#cb1-4"></a><span class="co">// Fuga は Hoge を実装しているとする</span></span>
<span id="cb1-5"><a href="#cb1-5"></a><span class="kw">func</span> piyo(x Hoge) *Fuga {  <span class="co">// *X はX型のポインタ型</span></span>
<span id="cb1-6"><a href="#cb1-6"></a>    y, ok := x.(Fuga)      <span class="co">// これが型アサーション</span></span>
<span id="cb1-7"><a href="#cb1-7"></a>    <span class="kw">if</span> !ok {               <span class="co">// 型アサーションに失敗したときに false を返す</span></span>
<span id="cb1-8"><a href="#cb1-8"></a>        <span class="kw">return</span> <span class="ot">nil</span>         <span class="co">// nil はポインタのゼロ値</span></span>
<span id="cb1-9"><a href="#cb1-9"></a>    }</span>
<span id="cb1-10"><a href="#cb1-10"></a>    <span class="kw">return</span> &amp;y</span>
<span id="cb1-11"><a href="#cb1-11"></a>}</span></code></pre></div>
<p><code>piyo</code> 関数は <code>Hoge</code> インターフェースを実装した型の値であれば，なんでも引数として与えることができる． 型アサーションの <code>ok</code> は省略することができ，その場合は型アサーションに失敗したときに実行時エラーとなる．</p>
<h3 id="用語と翻訳">用語と翻訳</h3>
<p>基本的に，この分野の入門書として名高い[要出典]「型システム入門（原題：Type and Programming Language，略して TaPL）」の訳し方を参考にする． TaPL には無い用語は次のように翻訳したが，Go ジェネリクスが市民権を得たときには別の翻訳が宛てがわれるかもしれない：</p>
<ul>
<li>Monomorphisation：単相化
<ul>
<li>Polymorphism（多相性）の対義語が Monomorphism（単相性）というらしい</li>
<li>Rust でも Monomorphization という用語を単相化と訳していた</li>
<li>（この表記の揺れはおそらくイギリス綴りかアメリカ綴りかの差？）</li>
</ul></li>
<li>Bound：境界
<ul>
<li>機能は Java の Bounded Types（境界型などと訳されている）に近い</li>
<li><a href="https://github.com/rust-lang-ja/the-rust-programming-language-ja/issues/153">Rust でも色々議論した結果 Bound を「境界」と訳した</a></li>
</ul></li>
</ul>
<p>また，プログラミング言語の形式的な議論で頻出する用語について簡単に解説する：</p>
<ul>
<li>構文（Syntax）:
<ul>
<li>ある言語においてプログラムの「正しい記述方法」を定義したもの</li>
<li>一般的に BNF（バッカス・ナウア記法）で定義する</li>
</ul></li>
<li>意味論（Semantics）:
<ul>
<li>ある言語においてプログラムが「どのように実行されるか」を定義したもの</li>
<li>いくつか定義の仕方があるがこの論文では簡約規則（操作的意味論）を利用している</li>
</ul></li>
<li>型付け規則（Typing Rule）:
<ul>
<li>式 <span class="math inline"><em>e</em></span> に対して「正しい」型の付け方の規則</li>
<li>正しく型付けされているとはつまり静的型検査が通るような状態</li>
<li>一般的に <span class="math inline"><em>Γ</em> ⊢ <em>e</em> : <em>t</em></span> とかく（<span class="math inline"><em>Γ</em></span> は環境で変数がなんの型なのかを保存している）</li>
</ul></li>
<li>簡約（Reduction）:
<ul>
<li>ある式 <span class="math inline"><em>e</em></span> から別の式（値）への変換</li>
<li>一般的に <span class="math inline"><em>e</em> → <em>e</em>′</span> のように矢印を使う</li>
<li>例: <span class="math inline">1 + 2 * 3 → 1 + 6 → 7</span></li>
</ul></li>
<li>型安全性（Safety）:
<ul>
<li>健全性（Soundness）とも呼ぶ</li>
<li>正しく型付けされた項は「おかしくなる」ことがないということ</li>
<li>「おかしくなる」の定義は言語モデルによって異なる（例：行き詰まり状態）</li>
<li>進行定理 + 保存定理 なのでこの2つを証明するのが一般的</li>
</ul></li>
<li>進行定理（Progress）:
<ul>
<li>正しく型付けされた項は行き詰まり状態では無い</li>
<li>行き詰まり状態：値でもないし簡約もできない状態</li>
</ul></li>
<li>保存定理（Preservation）:
<ul>
<li>正しく型付けされた項が評価できるならば，評価後の項も正しく型付けされる</li>
</ul></li>
<li>双模倣性（Bisimulation）:
<ul>
<li>並行モデルでよく出てくる性質（今回の中では最もマイナーな性質）</li>
<li>ざっくりいうと，2つのモデルが同じように振舞うという性質</li>
</ul></li>
</ul>
<h3 id="プログラミング言語の形式的な議論">プログラミング言語の形式的な議論</h3>
<p>なぜ，わざわざ形式的な議論（証明を与える）をするのか． TaPL の第19章「事例: Featherweight Java」にはこう書いてある：</p>
<blockquote>
<p>プログラミング言語のような現実世界の複雑な人工物を設計するには，形式的にモデル化することが大きな手助けとなる．形式モデルを使うと，設計のある側面を正確に説明したり，その性質を記述・証明したり，そこまでしないと見落としかねない問題に注意を向けたりできる．</p>
</blockquote>
<p>現に，Featherweight Go ではFGGがある「前提条件」のもとで必ず単相化できることを証明しており，その結果，実際のジェネリクス付きGoの「正しい」静的検査（コンパイル）を定義できた（この条件がないと，単相化が停止しない可能性がある）．</p>
<h3 id="expression-problem">Expression Problem</h3>
<p>今回は割愛する（ググって）が，本論文で提案するジェネリクス付きGoは Expression Problem に対する解法になっていると主張している（個人的には，あまり Go っぽい書き方じゃない気がするけど笑）．</p>
<h2 id="goで多相的な実装をする">Goで多相的な実装をする</h2>
<p>現状のGoでも多相的な実装をする方法がいくつかある． 今回目を付けたのが，インターフェースと型アサーションを使った方法だ．</p>
<p>例えば，高階関数を次のように表現できる：</p>
<div class="sourceCode" id="cb2"><pre class="sourceCode go"><code class="sourceCode go"><span id="cb2-1"><a href="#cb2-1"></a><span class="kw">type</span> Any <span class="kw">interface</span> {}</span>
<span id="cb2-2"><a href="#cb2-2"></a></span>
<span id="cb2-3"><a href="#cb2-3"></a><span class="kw">type</span> Function <span class="kw">interface</span> {</span>
<span id="cb2-4"><a href="#cb2-4"></a>    Apply(x Any) Any</span>
<span id="cb2-5"><a href="#cb2-5"></a>}</span>
<span id="cb2-6"><a href="#cb2-6"></a></span>
<span id="cb2-7"><a href="#cb2-7"></a><span class="co">// g(f(x)) を表現</span></span>
<span id="cb2-8"><a href="#cb2-8"></a><span class="kw">type</span> compose <span class="kw">struct</span> {</span>
<span id="cb2-9"><a href="#cb2-9"></a>    f Function</span>
<span id="cb2-10"><a href="#cb2-10"></a>    g Function</span>
<span id="cb2-11"><a href="#cb2-11"></a>}</span>
<span id="cb2-12"><a href="#cb2-12"></a><span class="kw">func</span> (this compose) Apply(x Any) Any {</span>
<span id="cb2-13"><a href="#cb2-13"></a>    <span class="kw">return</span> this.g.Apply(this.f.Apply(x))</span>
<span id="cb2-14"><a href="#cb2-14"></a>}</span>
<span id="cb2-15"><a href="#cb2-15"></a></span>
<span id="cb2-16"><a href="#cb2-16"></a><span class="kw">type</span> incr <span class="kw">struct</span> { n <span class="dt">int</span> } <span class="co">// nだけインクリメントする</span></span>
<span id="cb2-17"><a href="#cb2-17"></a><span class="kw">func</span> (this incr) Apply(x Any) Any {</span>
<span id="cb2-18"><a href="#cb2-18"></a>    <span class="kw">return</span> x.(<span class="dt">int</span>) + this.n</span>
<span id="cb2-19"><a href="#cb2-19"></a>}</span>
<span id="cb2-20"><a href="#cb2-20"></a></span>
<span id="cb2-21"><a href="#cb2-21"></a><span class="kw">type</span> pos <span class="kw">struct</span> {} <span class="co">// 正数なら真が返る</span></span>
<span id="cb2-22"><a href="#cb2-22"></a><span class="kw">func</span> (this pos) Apply(x Any) Any {</span>
<span id="cb2-23"><a href="#cb2-23"></a>    <span class="kw">return</span> x.(<span class="dt">int</span>) &gt; <span class="dv">0</span></span>
<span id="cb2-24"><a href="#cb2-24"></a>}</span>
<span id="cb2-25"><a href="#cb2-25"></a></span>
<span id="cb2-26"><a href="#cb2-26"></a><span class="kw">func</span> main() {</span>
<span id="cb2-27"><a href="#cb2-27"></a>    <span class="kw">var</span> f Function = compose{incr{-<span class="dv">5</span>}, pos{}}</span>
<span id="cb2-28"><a href="#cb2-28"></a>    <span class="kw">var</span> b <span class="dt">bool</span> = f.Apply(<span class="dv">3</span>).(<span class="dt">bool</span>) <span class="co">// false</span></span>
<span id="cb2-29"><a href="#cb2-29"></a>}</span></code></pre></div>
<p>このコードは，既存の Go としても完全に正しい． <code>Any</code> インターフェースは実装すべきメソッド仕様を一つも持たないので，全ての型が実装していることになる． 無論，本当は <code>int</code> や <code>bool</code> であるべきところが <code>Any</code> になっていたり，<code>Any</code> な型同士の区別が付かなくなっていたりする問題がある． だがしかし，それがコンパイル時に検査できるようになったらどうだろうか．新しいデザインがまさにそういう形式になっている．</p>
<h2 id="fg-と-fgg">FG と FGG</h2>
<p>論文では，それぞれの構文と型付け規則，簡約規則を定義し，構文的正しさの検証規則の定義と，保存定理と進行定理を証明している（すなわち型安全であることを示している）． ここでは2つの構文だけ紹介する．</p>
<h3 id="fgの構文">FGの構文</h3>
<p><span class="math inline"><em>x̄</em></span> のような上線付きの記法は，ある形式の項の「列」であることを示している． 例えば <span class="math inline"><em>x̄</em></span> の場合は <span class="math inline"><em>x</em><sub>1</sub>, <em>x</em><sub>2</sub>, ...<em>x</em><sub><em>n</em></sub></span> を意味している．</p>
<p><img src="/assets/read-featherweight-go/fg.jpg"></img></p>
<p>プログラム <span class="math inline"><em>P</em></span> は，Go の形式にならって定義されているが，論文中では諸々省略して <span class="math inline"><em>D̄</em> ⊳ <em>e</em></span> と記述することもある．</p>
<p>FG は極めてコンパクトな Go のサブセットである． そのため，有効な式は変数・メソッド呼び出し・構造体リテラル・フィールド選択・型アサーションの5つしかない． 対して型（構造体・インターフェース）に関する構文はかなり充実している．</p>
<h2 id="section"></h2>
<p>FG には他に型付け規則と簡約規則がある．特に型付け規則の一部である，構造的部分型を表現した規則 <span class="math inline"><em>t</em> &lt;  : <em>u</em></span> は重要だ：</p>
<ul>
<li><span class="math inline"><em>u</em></span> が構造体 <span class="math inline"><em>t</em><sub><em>S</em></sub></span> の場合は <span class="math inline"><em>t</em><sub><em>S</em></sub></span> 自信のみがサブタイプになる（i.e. <span class="math inline"><em>t</em><sub><em>S</em></sub> &lt;  : <em>t</em><sub><em>S</em></sub></span>）</li>
<li><span class="math inline"><em>u</em></span> がインターフェース <span class="math inline"><em>t</em><sub><em>I</em></sub></span> の場合は <span class="math inline"><em>m</em><em>e</em><em>t</em><em>h</em><em>o</em><em>d</em><em>s</em>(<em>t</em>) ⊇ <em>m</em><em>e</em><em>t</em><em>h</em><em>o</em><em>d</em><em>s</em>(<em>t</em><sub><em>I</em></sub>)</span> を満たすような <span class="math inline"><em>t</em></span> のみがサブタイプになる（i.e. <span class="math inline"><em>t</em><sub><em>S</em></sub> &lt;  : <em>t</em><sub><em>I</em></sub></span>）</li>
</ul>
<p>ここで <span class="math inline"><em>m</em><em>e</em><em>t</em><em>h</em><em>o</em><em>d</em><em>s</em>(<em>t</em>)</span> という補助関数は型 <span class="math inline"><em>t</em></span> に定義されているメソッドのメソッド仕様の集合である（重複しないという前提）． また，メソッド仕様の等価性には変数名は関係しない（つまり，メソッド名・引数の型・返り値の型が一致するかどうかをみる）． この部分型関係 <span class="math inline"> &lt; :</span> は，メソッド呼び出しや構造体リテラルの引数を適用する部分や，型アサーションの型付け規則で利用される．</p>
<h3 id="fggの構文">FGGの構文</h3>
<p>前述したとおり，FGG は FG をジェネリクスで拡張した言語である． なので下記の構文規則のうち，FG からの拡張に当たる部分を赤でハイライトしてある．</p>
<p><img src="/assets/read-featherweight-go/fgg.jpg"></img></p>
<p>最も大きな変更として型宣言とメソッド宣言（メソッドシグネチャ）が型引数 <span class="math inline"><em>Φ</em></span> も取りうるようになったことだ． この型引数がまさにジェネリクスである． 手っ取り早く具体的なコードを見てみよう． 下記のコードは「Goで多相的な実装をする」を FGG 風の記法で置き換えたものだ（風というのは <code>+</code> や <code>&gt;</code> や <code>int</code> や <code>bool</code> は FGG にはまだ無いため）：</p>
<div class="sourceCode" id="cb3"><pre class="sourceCode go"><code class="sourceCode go"><span id="cb3-1"><a href="#cb3-1"></a><span class="kw">type</span> Any <span class="kw">interface</span> {}</span>
<span id="cb3-2"><a href="#cb3-2"></a></span>
<span id="cb3-3"><a href="#cb3-3"></a><span class="kw">type</span> Function(<span class="kw">type</span> a Any, b Any) <span class="kw">interface</span> {</span>
<span id="cb3-4"><a href="#cb3-4"></a>    Apply(x a) b</span>
<span id="cb3-5"><a href="#cb3-5"></a>}</span>
<span id="cb3-6"><a href="#cb3-6"></a></span>
<span id="cb3-7"><a href="#cb3-7"></a><span class="co">// g(f(x)) を表現</span></span>
<span id="cb3-8"><a href="#cb3-8"></a><span class="kw">type</span> compose(<span class="kw">type</span> a Any, b Any, c Any) <span class="kw">struct</span> {</span>
<span id="cb3-9"><a href="#cb3-9"></a>    f Function(a, b)</span>
<span id="cb3-10"><a href="#cb3-10"></a>    g Function(b, c)</span>
<span id="cb3-11"><a href="#cb3-11"></a>}</span>
<span id="cb3-12"><a href="#cb3-12"></a><span class="kw">func</span> (this compose(<span class="kw">type</span> a Any, b Any, c Any)) Apply(x a) c {</span>
<span id="cb3-13"><a href="#cb3-13"></a>    <span class="kw">return</span> this.g.Apply(this.f.Apply(x))</span>
<span id="cb3-14"><a href="#cb3-14"></a>}</span>
<span id="cb3-15"><a href="#cb3-15"></a></span>
<span id="cb3-16"><a href="#cb3-16"></a><span class="kw">type</span> incr <span class="kw">struct</span> { n <span class="dt">int</span> } <span class="co">// nだけインクリメントする</span></span>
<span id="cb3-17"><a href="#cb3-17"></a><span class="kw">func</span> (this incr) Apply(x <span class="dt">int</span>) <span class="dt">int</span> {</span>
<span id="cb3-18"><a href="#cb3-18"></a>    <span class="kw">return</span> x + this.n</span>
<span id="cb3-19"><a href="#cb3-19"></a>}</span>
<span id="cb3-20"><a href="#cb3-20"></a></span>
<span id="cb3-21"><a href="#cb3-21"></a><span class="kw">type</span> pos <span class="kw">struct</span> {} <span class="co">// 正数なら真が返る</span></span>
<span id="cb3-22"><a href="#cb3-22"></a><span class="kw">func</span> (this pos) Apply(x <span class="dt">int</span>) <span class="dt">bool</span> {</span>
<span id="cb3-23"><a href="#cb3-23"></a>    <span class="kw">return</span> x &gt; <span class="dv">0</span></span>
<span id="cb3-24"><a href="#cb3-24"></a>}</span>
<span id="cb3-25"><a href="#cb3-25"></a></span>
<span id="cb3-26"><a href="#cb3-26"></a><span class="kw">func</span> main() {</span>
<span id="cb3-27"><a href="#cb3-27"></a>    <span class="kw">var</span> f Function(<span class="dt">int</span>, <span class="dt">bool</span>) = compose(<span class="dt">int</span>, <span class="dt">int</span>, <span class="dt">bool</span>){incr{-<span class="dv">5</span>}, pos{}}</span>
<span id="cb3-28"><a href="#cb3-28"></a>    <span class="kw">var</span> b <span class="dt">bool</span> = f.Apply(<span class="dv">3</span>) <span class="co">// false</span></span>
<span id="cb3-29"><a href="#cb3-29"></a>}</span></code></pre></div>
<p>なんと，このコードには型アサーションが一切出てこない． また，高階関数を表現するインターフェースで，ちゃんと引数と戻り値の型を区別することができている．</p>
<p>構文の本質的な変更を見てみよう． インターフェースや構造体，メソッドの宣言に <code>(type a Any, b Any)</code> というのが出てくるようになった． これがまさに型引数 <span class="math inline"><em>Φ</em></span> や <span class="math inline"><em>Ψ</em></span> に当たる． <code>a</code> や <code>b</code> の型パラメーターの後に記述している <code>Any</code> は <strong>境界（bound）</strong> と呼び，自由にインターフェースを置くことができる． 構造体リテラルやメソッド呼び出しで型引数に型を適用する場合や，部分型関係が成り立つ場合（<code>Apply(x int) bool</code> の <code>int</code> や <code>bool</code> のこと）は，与えた型が境界のインターフェースのサブタイプになっている必要がある（今回の場合は <code>Any</code> なのでどんな型でも良いが）． ここで重要になるのが，型引数の型パラメーターのスコープである：</p>
<div class="sourceCode" id="cb4"><pre class="sourceCode go"><code class="sourceCode go"><span id="cb4-1"><a href="#cb4-1"></a><span class="co">// 型名やメソッド名の型パラメーターは内部のメソッドシグネチャで利用できる</span></span>
<span id="cb4-2"><a href="#cb4-2"></a><span class="kw">type</span> List(<span class="kw">type</span> a Any) <span class="kw">interface</span> {</span>
<span id="cb4-3"><a href="#cb4-3"></a>    Map(<span class="kw">type</span> b Any)(f Function(a, b)) List(b)</span>
<span id="cb4-4"><a href="#cb4-4"></a>}</span>
<span id="cb4-5"><a href="#cb4-5"></a></span>
<span id="cb4-6"><a href="#cb4-6"></a><span class="co">// 型パラメーターを自身の境界で利用することもできる</span></span>
<span id="cb4-7"><a href="#cb4-7"></a><span class="kw">type</span> Eq(<span class="kw">type</span> a Eq(a)) <span class="kw">interface</span> {</span>
<span id="cb4-8"><a href="#cb4-8"></a>    Equal(that a) <span class="dt">bool</span></span>
<span id="cb4-9"><a href="#cb4-9"></a>}</span></code></pre></div>
<p>インターフェースの型引数はメソッド仕様の型引数でも使うことはできるが，その逆はできない．</p>
<h2 id="単相化">単相化</h2>
<p>いよいよ FGG から FG への変換方法をみていく． 論文では，単相化の規則を形式的に定義し，単相化したコードは構文的正しさが保存されることと，双模倣性を証明した．ここでは形式的な議論を割愛する．</p>
<h3 id="単相化の例">単相化の例</h3>
<p>まずは例を見てみよう． 前述した FGG の <code>Function</code> などの例を「単相化」で FG に変換すると次のようになる．</p>
<div class="sourceCode" id="cb5"><pre class="sourceCode go"><code class="sourceCode go"><span id="cb5-1"><a href="#cb5-1"></a><span class="kw">type</span> Top <span class="kw">struct</span> {}</span>
<span id="cb5-2"><a href="#cb5-2"></a></span>
<span id="cb5-3"><a href="#cb5-3"></a><span class="kw">func</span> main() {</span>
<span id="cb5-4"><a href="#cb5-4"></a>    <span class="kw">var</span> f Function&lt;<span class="dt">int</span>, <span class="dt">bool</span>&gt; = compose&lt;<span class="dt">int</span>, <span class="dt">int</span>, <span class="dt">bool</span>&gt;{incr{-<span class="dv">5</span>}, pos{}}</span>
<span id="cb5-5"><a href="#cb5-5"></a>    <span class="kw">var</span> b <span class="dt">bool</span> = f.Apply(<span class="dv">3</span>)</span>
<span id="cb5-6"><a href="#cb5-6"></a>}</span>
<span id="cb5-7"><a href="#cb5-7"></a></span>
<span id="cb5-8"><a href="#cb5-8"></a><span class="kw">type</span> compose&lt;<span class="dt">int</span>, <span class="dt">int</span>, <span class="dt">bool</span>&gt; <span class="kw">struct</span> {</span>
<span id="cb5-9"><a href="#cb5-9"></a>    f Function&lt;<span class="dt">int</span>, <span class="dt">int</span>&gt;</span>
<span id="cb5-10"><a href="#cb5-10"></a>    g Function&lt;<span class="dt">int</span>, <span class="dt">bool</span>&gt;</span>
<span id="cb5-11"><a href="#cb5-11"></a>}</span>
<span id="cb5-12"><a href="#cb5-12"></a></span>
<span id="cb5-13"><a href="#cb5-13"></a><span class="kw">type</span> Function&lt;<span class="dt">int</span>, <span class="dt">int</span>&gt; <span class="kw">interface</span> {</span>
<span id="cb5-14"><a href="#cb5-14"></a>    Apply&lt;<span class="dv">0</span>&gt; Top</span>
<span id="cb5-15"><a href="#cb5-15"></a>    Apply(x <span class="dt">int</span>) <span class="dt">int</span>    </span>
<span id="cb5-16"><a href="#cb5-16"></a>}</span>
<span id="cb5-17"><a href="#cb5-17"></a></span>
<span id="cb5-18"><a href="#cb5-18"></a><span class="kw">type</span> Function&lt;<span class="dt">int</span>, <span class="dt">bool</span>&gt; <span class="kw">interface</span> {</span>
<span id="cb5-19"><a href="#cb5-19"></a>    Apply&lt;<span class="dv">1</span>&gt; Top</span>
<span id="cb5-20"><a href="#cb5-20"></a>    Apply(x <span class="dt">int</span>) <span class="dt">bool</span>    </span>
<span id="cb5-21"><a href="#cb5-21"></a>}</span>
<span id="cb5-22"><a href="#cb5-22"></a></span>
<span id="cb5-23"><a href="#cb5-23"></a><span class="kw">type</span> (this compose&lt;<span class="dt">int</span>, <span class="dt">int</span>, <span class="dt">bool</span>&gt;) Apply(x <span class="dt">int</span>) <span class="dt">bool</span> {</span>
<span id="cb5-24"><a href="#cb5-24"></a>    <span class="kw">return</span> this.g.Apply(this.f.Apply(x))</span>
<span id="cb5-25"><a href="#cb5-25"></a>}</span>
<span id="cb5-26"><a href="#cb5-26"></a><span class="kw">type</span> (this compose&lt;<span class="dt">int</span>, <span class="dt">int</span>, <span class="dt">bool</span>&gt;) Apply&lt;<span class="dv">1</span>&gt;() Top {</span>
<span id="cb5-27"><a href="#cb5-27"></a>    <span class="kw">return</span> Top{}</span>
<span id="cb5-28"><a href="#cb5-28"></a>}</span>
<span id="cb5-29"><a href="#cb5-29"></a></span>
<span id="cb5-30"><a href="#cb5-30"></a><span class="kw">type</span> incr <span class="kw">struct</span> { n <span class="dt">int</span> }</span>
<span id="cb5-31"><a href="#cb5-31"></a></span>
<span id="cb5-32"><a href="#cb5-32"></a><span class="kw">type</span> (this incr) Apply(x <span class="dt">int</span>) <span class="dt">int</span> {</span>
<span id="cb5-33"><a href="#cb5-33"></a>    <span class="kw">return</span> x + this.n</span>
<span id="cb5-34"><a href="#cb5-34"></a>}</span>
<span id="cb5-35"><a href="#cb5-35"></a><span class="kw">func</span> (this incr) Apply&lt;<span class="dv">0</span>&gt;() Top {</span>
<span id="cb5-36"><a href="#cb5-36"></a>    <span class="kw">return</span> Top{}</span>
<span id="cb5-37"><a href="#cb5-37"></a>}</span>
<span id="cb5-38"><a href="#cb5-38"></a></span>
<span id="cb5-39"><a href="#cb5-39"></a><span class="kw">type</span> pos strcut {}</span>
<span id="cb5-40"><a href="#cb5-40"></a></span>
<span id="cb5-41"><a href="#cb5-41"></a><span class="kw">func</span> (this pos) Apply(x <span class="dt">int</span>) <span class="dt">bool</span> {</span>
<span id="cb5-42"><a href="#cb5-42"></a>    <span class="kw">return</span> x &gt; <span class="dv">0</span></span>
<span id="cb5-43"><a href="#cb5-43"></a>}</span>
<span id="cb5-44"><a href="#cb5-44"></a><span class="kw">func</span> (this incr) Apply&lt;<span class="dv">1</span>&gt;() Top {</span>
<span id="cb5-45"><a href="#cb5-45"></a>    <span class="kw">return</span> Top{}</span>
<span id="cb5-46"><a href="#cb5-46"></a>}</span></code></pre></div>
<p>大きな変更箇所として，<code>Function&lt;int, int&gt;</code> のように <code>(,)</code> が <code>&lt;,&gt;</code> へ至る所でなっている． FGG のときの <code>(,)</code> は内部の型は個別の型として認識されていたが，<code>&lt;,&gt;</code> は <code>Function&lt;int, int&gt;</code> で一つの型となり内部の型は区別されない．</p>
<p>また，<code>Apply&lt;0&gt; Top</code> のようなメソッドやメソッド仕様が追加されている． これは，部分型関係を正しく解決するためのダミーメソッドだ． 全てのメソッド宣言に対してダミーメソッドは追加で宣言され，インターフェースの全てのメソッド仕様に対してダミーメソッドのメソッド仕様が追加される． メソッド仕様の数字（<code>&lt;0&gt;</code> とか <code>&lt;1&gt;</code> とか）はメソッドの引数の型と返り値の型に対して一意に定まる（そのため <code>compose</code> と <code>pos</code> の <code>Apply</code> メソッドの数字は同じになる）．</p>
<p>ちなみに <code>Top</code> 構造体はダミーメソッドのために追加された構造体だ．</p>
<h3 id="ダミーメソッドが有効な例">ダミーメソッドが有効な例</h3>
<p>さて，上記の例ではダミーメソッドの有効性がわからないので，もう一つ例を示す． 前にちょっとだけ出てきた <code>List</code> インターフェースの完全な例を示す． 下記は FGG でのコードだ．</p>
<div class="sourceCode" id="cb6"><pre class="sourceCode go"><code class="sourceCode go"><span id="cb6-1"><a href="#cb6-1"></a><span class="kw">type</span> List(<span class="kw">type</span> a Any) <span class="kw">interface</span> {</span>
<span id="cb6-2"><a href="#cb6-2"></a>    Map(<span class="kw">type</span> b Any)(f Function(a, b)) List(b)</span>
<span id="cb6-3"><a href="#cb6-3"></a>}</span>
<span id="cb6-4"><a href="#cb6-4"></a></span>
<span id="cb6-5"><a href="#cb6-5"></a><span class="kw">type</span> Nil(<span class="kw">type</span> a Any) <span class="kw">struct</span> {}</span>
<span id="cb6-6"><a href="#cb6-6"></a><span class="kw">type</span> Cons(<span class="kw">type</span> a Any) <span class="kw">struct</span> {</span>
<span id="cb6-7"><a href="#cb6-7"></a>    head a</span>
<span id="cb6-8"><a href="#cb6-8"></a>    tail List(a)</span>
<span id="cb6-9"><a href="#cb6-9"></a>}</span>
<span id="cb6-10"><a href="#cb6-10"></a></span>
<span id="cb6-11"><a href="#cb6-11"></a><span class="kw">func</span> (xs Nil(<span class="kw">type</span> a Any)) Map(<span class="kw">type</span> b Any)(f Function(a,b)) List(b) {</span>
<span id="cb6-12"><a href="#cb6-12"></a>    <span class="kw">return</span> Nil(b){}</span>
<span id="cb6-13"><a href="#cb6-13"></a>}</span>
<span id="cb6-14"><a href="#cb6-14"></a></span>
<span id="cb6-15"><a href="#cb6-15"></a><span class="kw">func</span> (xs Cons(<span class="kw">type</span> a Any)) Map(<span class="kw">type</span> b Any)(f Function(a,b)) List(b) {</span>
<span id="cb6-16"><a href="#cb6-16"></a>    <span class="kw">return</span> Cons(b){f.Apply(xs.head), xs.tail.Map(b)(f)}</span>
<span id="cb6-17"><a href="#cb6-17"></a>}</span>
<span id="cb6-18"><a href="#cb6-18"></a></span>
<span id="cb6-19"><a href="#cb6-19"></a><span class="kw">func</span> main() {</span>
<span id="cb6-20"><a href="#cb6-20"></a>    <span class="kw">var</span> xs List(<span class="dt">int</span>) = Cons(<span class="dt">int</span>){<span class="dv">3</span>, Cons(<span class="dt">int</span>){<span class="dv">6</span>, Nil(<span class="dt">int</span>){}}}</span>
<span id="cb6-21"><a href="#cb6-21"></a>    <span class="kw">var</span> ys List(<span class="dt">int</span>) = xs.Map(<span class="dt">int</span>)(incr{-<span class="dv">5</span>})</span>
<span id="cb6-22"><a href="#cb6-22"></a>    <span class="kw">var</span> _ List(<span class="dt">bool</span>) = ys.Map(<span class="dt">bool</span>)(pos{})</span>
<span id="cb6-23"><a href="#cb6-23"></a>}</span></code></pre></div>
<p><code>List</code> インターフェースは，配列のようなコンテナ型の各要素に同じメソッドを適用する高階関数を提供する． <code>Nil</code> と <code>Cons</code> 構造体は線形リストを表したものだ． ちなみに，Go の構造体は構造体による再帰的な構造を宣言することはできないが，インターフェースを介する場合は可能だ．</p>
<p>さて，これを単相化すると次のようになる．</p>
<div class="sourceCode" id="cb7"><pre class="sourceCode go"><code class="sourceCode go"><span id="cb7-1"><a href="#cb7-1"></a><span class="kw">func</span> main() {</span>
<span id="cb7-2"><a href="#cb7-2"></a>    <span class="kw">var</span> xs List&lt;<span class="dt">int</span>&gt; = Cons&lt;<span class="dt">int</span>&gt;{<span class="dv">3</span>, Cons&lt;<span class="dt">int</span>&gt;{<span class="dv">6</span>, Nil&lt;<span class="dt">int</span>&gt;}}</span>
<span id="cb7-3"><a href="#cb7-3"></a>    <span class="kw">var</span> ys List&lt;<span class="dt">int</span>&gt; = xs.Map&lt;<span class="dt">int</span>&gt;(incr{-<span class="dv">5</span>})</span>
<span id="cb7-4"><a href="#cb7-4"></a>    <span class="kw">var</span> _ List&lt;<span class="dt">bool</span>&gt; = ys.Map&lt;<span class="dt">bool</span>&gt;(pos{})</span>
<span id="cb7-5"><a href="#cb7-5"></a>}</span>
<span id="cb7-6"><a href="#cb7-6"></a></span>
<span id="cb7-7"><a href="#cb7-7"></a><span class="kw">type</span> List&lt;<span class="dt">int</span>&gt; <span class="kw">interface</span> {</span>
<span id="cb7-8"><a href="#cb7-8"></a>    Map&lt;<span class="dv">2</span>&gt;() Top <span class="co">// これは `(f Function(int, b)) List(b)` からの数字</span></span>
<span id="cb7-9"><a href="#cb7-9"></a>    Map&lt;<span class="dt">int</span>&gt;(f Function&lt;<span class="dt">int</span>,<span class="dt">int</span>&gt;) List&lt;<span class="dt">int</span>&gt;</span>
<span id="cb7-10"><a href="#cb7-10"></a>    Map&lt;<span class="dt">bool</span>&gt;(f Function&lt;<span class="dt">int</span>,<span class="dt">bool</span>&gt;) List&lt;<span class="dt">bool</span>&gt;</span>
<span id="cb7-11"><a href="#cb7-11"></a>}</span>
<span id="cb7-12"><a href="#cb7-12"></a></span>
<span id="cb7-13"><a href="#cb7-13"></a><span class="kw">type</span> Nil&lt;<span class="dt">int</span>&gt; <span class="kw">struct</span> {}</span>
<span id="cb7-14"><a href="#cb7-14"></a><span class="kw">func</span> (xs Nil&lt;<span class="dt">int</span>&gt;) Map&lt;<span class="dt">int</span>&gt;(f Function&lt;<span class="dt">int</span>,<span class="dt">int</span>&gt;) List&lt;<span class="dt">int</span>&gt; {</span>
<span id="cb7-15"><a href="#cb7-15"></a>    <span class="kw">return</span> Nil&lt;<span class="dt">int</span>&gt;{}</span>
<span id="cb7-16"><a href="#cb7-16"></a>}</span>
<span id="cb7-17"><a href="#cb7-17"></a><span class="kw">func</span> (xs Nil&lt;<span class="dt">int</span>&gt;) Map&lt;<span class="dt">bool</span>&gt;(f Function&lt;<span class="dt">int</span>,<span class="dt">bool</span>&gt;) List&lt;<span class="dt">bool</span>&gt; {</span>
<span id="cb7-18"><a href="#cb7-18"></a>    <span class="kw">return</span> Nil&lt;<span class="dt">bool</span>&gt;{}</span>
<span id="cb7-19"><a href="#cb7-19"></a>}</span>
<span id="cb7-20"><a href="#cb7-20"></a><span class="kw">func</span> (xs Nil&lt;<span class="dt">int</span>&gt;) Map&lt;<span class="dv">2</span>&gt;() Top {</span>
<span id="cb7-21"><a href="#cb7-21"></a>    <span class="kw">return</span> Top{}</span>
<span id="cb7-22"><a href="#cb7-22"></a>}</span>
<span id="cb7-23"><a href="#cb7-23"></a></span>
<span id="cb7-24"><a href="#cb7-24"></a><span class="kw">type</span> Cons&lt;<span class="dt">int</span>&gt; <span class="kw">struct</span> {</span>
<span id="cb7-25"><a href="#cb7-25"></a>    head <span class="dt">int</span></span>
<span id="cb7-26"><a href="#cb7-26"></a>    tail List&lt;<span class="dt">int</span>&gt;</span>
<span id="cb7-27"><a href="#cb7-27"></a>}</span>
<span id="cb7-28"><a href="#cb7-28"></a><span class="kw">func</span> (xs Cons&lt;<span class="dt">int</span>&gt;) Map&lt;<span class="dt">int</span>&gt;(f Function&lt;<span class="dt">int</span>,<span class="dt">int</span>&gt;) List&lt;<span class="dt">int</span>&gt; {</span>
<span id="cb7-29"><a href="#cb7-29"></a>    <span class="kw">return</span> Cons&lt;<span class="dt">int</span>&gt;{f.Apply(xs.head), xs.tail.Map&lt;<span class="dt">int</span>&gt;(f)}</span>
<span id="cb7-30"><a href="#cb7-30"></a>}</span>
<span id="cb7-31"><a href="#cb7-31"></a><span class="kw">func</span> (xs Cons&lt;<span class="dt">int</span>&gt;) Map&lt;<span class="dt">bool</span>&gt;(f Function&lt;<span class="dt">int</span>,<span class="dt">bool</span>&gt;) List&lt;<span class="dt">bool</span>&gt; {</span>
<span id="cb7-32"><a href="#cb7-32"></a>    <span class="kw">return</span> Cons&lt;<span class="dt">bool</span>&gt;{f.Apply(xs.head), xs.tail.Map&lt;<span class="dt">bool</span>&gt;(f)}</span>
<span id="cb7-33"><a href="#cb7-33"></a>}</span>
<span id="cb7-34"><a href="#cb7-34"></a><span class="kw">func</span> (xs Cons&lt;<span class="dt">int</span>&gt;) Map&lt;<span class="dv">2</span>&gt;() Top {</span>
<span id="cb7-35"><a href="#cb7-35"></a>    <span class="kw">return</span> Top{}</span>
<span id="cb7-36"><a href="#cb7-36"></a>}</span>
<span id="cb7-37"><a href="#cb7-37"></a></span>
<span id="cb7-38"><a href="#cb7-38"></a><span class="kw">type</span> List&lt;<span class="dt">bool</span>&gt; <span class="kw">interface</span> {</span>
<span id="cb7-39"><a href="#cb7-39"></a>    Map&lt;<span class="dv">3</span>&gt;() Top</span>
<span id="cb7-40"><a href="#cb7-40"></a>}</span>
<span id="cb7-41"><a href="#cb7-41"></a></span>
<span id="cb7-42"><a href="#cb7-42"></a><span class="kw">type</span> Nil&lt;<span class="dt">bool</span>&gt; <span class="kw">struct</span> {}</span>
<span id="cb7-43"><a href="#cb7-43"></a><span class="kw">func</span> (xs Nil&lt;<span class="dt">bool</span>&gt;) Map&lt;<span class="dv">3</span>&gt;() Top {</span>
<span id="cb7-44"><a href="#cb7-44"></a>    <span class="kw">return</span> Top{}</span>
<span id="cb7-45"><a href="#cb7-45"></a>}</span>
<span id="cb7-46"><a href="#cb7-46"></a></span>
<span id="cb7-47"><a href="#cb7-47"></a><span class="kw">type</span> Cons&lt;<span class="dt">bool</span>&gt; <span class="kw">struct</span> {</span>
<span id="cb7-48"><a href="#cb7-48"></a>    head <span class="dt">bool</span></span>
<span id="cb7-49"><a href="#cb7-49"></a>    tail List&lt;<span class="dt">bool</span>&gt;</span>
<span id="cb7-50"><a href="#cb7-50"></a>}</span>
<span id="cb7-51"><a href="#cb7-51"></a><span class="kw">func</span> (xs Cons&lt;<span class="dt">bool</span>&gt;) Map&lt;<span class="dv">3</span>&gt;() Top {</span>
<span id="cb7-52"><a href="#cb7-52"></a>    <span class="kw">return</span> Top{}</span>
<span id="cb7-53"><a href="#cb7-53"></a>}</span></code></pre></div>
<p><code>List&lt;int&gt;</code> の <code>Map</code> メソッドは <code>main</code> のところで <code>int -&gt; int</code> と <code>int -&gt; bool</code> の2パターンで使われていたため，2つもインターフェースのメソッドとして宣言されている． 対して <code>List&lt;bool&gt;</code> は <code>ys.Map&lt;bool&gt;(pos{})</code> で生成されるものの，<code>Map</code> メソッドを呼んでいないため，インターフェースのメソッドは1つもない． このようにインターフェースのメソッドは，実際に利用された型のものしか生成されない． これにより，メソッドの無いインターフェースが生成されることがある（正確にはダミーメソッド以外には無い，だが）． ダミーメソッドはこのような振る舞いに対して有効だ．例えば，変数 <code>f</code> に <code>incr{1}</code> が束縛されているときを考える． 型アサーション <code>f.(List&lt;bool&gt;)</code> はダミーメソッドがあることで失敗するが，ダミーメソッドがないと成功してしまう．</p>
<h3 id="単相化ができない場合">単相化ができない場合</h3>
<p>全ての型付け可能な FGG のコードが単相化可能かというとそうではない． 例えば，次のような FGG のコードは単相化できない．</p>
<div class="sourceCode" id="cb8"><pre class="sourceCode go"><code class="sourceCode go"><span id="cb8-1"><a href="#cb8-1"></a><span class="kw">type</span> Box(<span class="kw">type</span> a Any) <span class="kw">struct</span> {</span>
<span id="cb8-2"><a href="#cb8-2"></a>    value a</span>
<span id="cb8-3"><a href="#cb8-3"></a>}</span>
<span id="cb8-4"><a href="#cb8-4"></a></span>
<span id="cb8-5"><a href="#cb8-5"></a><span class="kw">func</span> (this Box(<span class="kw">type</span> a Any)) Nest(n <span class="dt">int</span>) Any {</span>
<span id="cb8-6"><a href="#cb8-6"></a>    <span class="kw">if</span> (n == <span class="dv">0</span>) {</span>
<span id="cb8-7"><a href="#cb8-7"></a>        <span class="kw">return</span> this</span>
<span id="cb8-8"><a href="#cb8-8"></a>    } <span class="kw">else</span> {</span>
<span id="cb8-9"><a href="#cb8-9"></a>        <span class="kw">return</span> Box(Box(a)){this}.Nest(n<span class="dv">-1</span>)</span>
<span id="cb8-10"><a href="#cb8-10"></a>    }</span>
<span id="cb8-11"><a href="#cb8-11"></a>}</span></code></pre></div>
<p>これは多相再帰（polymorphic recursion），ある型で呼び出されたメソッドが別の型で再帰呼び出しをするもの，をしているプログラムの例である．<code>Box(a)</code> 型をレシーバーとするメソッド <code>Nest</code> を呼び出すと <code>Box(Box(a))</code> 型のレシーバーで再帰的に呼び出される． この例は型がどれだけ深くネストするかを事前に決定することができないので単相化することができない．</p>
<p>逆に，このような多相再帰なコードが含まれていない場合は，全ての FGG のコードを単相化することができる（ことを論文で証明していた）． なので，実際のコンパイラでは多相再帰が含まれてるかどうかの検査をするようだ．</p>
<h3 id="単相化の仕組み">単相化の仕組み</h3>
<p>単相化のプロセスは2つのフェーズから構成されている． 第一フェーズは，FGG プログラムから型とメソッドのインスタンス（型パラメーターを具体化したものだと思う）を取集する． 第二フェーズでは，第一フェーズで収集したインスタンスをもとにして，FGG プログラムを等価な FG プログラムへと変換する．</p>
<p>FGG のプログラム <span class="math inline"><em>P</em></span> から，各インスタンスの集合 <span class="math inline"><em>Ω</em></span> を収集した場合は <span class="math inline"><em>P</em> ▸ <em>Ω</em></span> と記述する（これが第一フェーズ）．FGG のプログラム <span class="math inline"><em>P</em></span> から FG のプログラム <span class="math inline"><em>P</em>′</span> への変換は <span class="math inline"> ⊢ <em>P</em> ↦ <em>P</em>′</span> と記述する．</p>
<p>論文ではこれらの規則を形式的に定義している（がここでは割愛）．</p>
<h3 id="他言語と単相化">他言語と単相化</h3>
<p>7章の「RELATED WORK」では，他のプログラミング言語での単相化の事例について紹介されていた．興味深いので論文から引用する．</p>
<ul>
<li>Bracha 氏らは「Making the Future Safe for the Past: Adding Genericity to the Java Programming Language」という論文でジェネリクス付きの Java からジェネリクスなしの Java へ，全ての型パラメーターの情報を消去することで変換する方法を提案した（これは単相化では無い）．消去の欠点として消去されたコードは単相化されたコードに比べて（実行？）効率が悪くなることがよくある．一方，消去はコードサイズの増加が線形であるのに対して，単相化はコードサイズが爆発的に増加する可能性がある．</li>
<li>Kennedy 氏と Syme 氏は「Design and Implementation of Generics for the .NET Common Language Runtime」で .NET Common Language Runtime (CLR) と C# の拡張を開発してジェネリクスをサポートした．これらは特化したコードと共有したコードを混ぜたものを生成する．前者は，各プリミティブ型ごとに個別にコンパイルする（これは単相化に似ている）．後者は，全てのオブジェクト型に対してひとつにコンパイルされる（これは消去に似ている）．</li>
<li>Stroustrup 氏は「The C++ Programming Language」という書籍の16章で，C++ におけるテンプレートのインスタンス化について述べている（実質，単相化）．これは広く使われているがコードが肥大化するとして悪名高い．</li>
<li>Benton 氏らは「Compiling Standard ML to Java Bytecodes」という論文で SML’97 プログラムから Java バイトコードへ変換するコンパイラについて述べており，ここで多相性は完全に単相化される．Standard ML では多相的な再帰を禁止しているため，常に単相化することが可能．</li>
<li>Fluet 氏は <a href="http://mlton.org/Monomorphise">MLton のウェブページ</a>で，SML の最適化コンパイラ MLton で利用している同様のアプローチを紹介している．</li>
<li>Tolmach 氏と Oliva 氏は「From ML to Ada: Strongly-Typed Language Interoperability via Source Translation」という論文で，MLライクな言語から Agda への型付きの変換を単相化ベースで開発し，その詳細を発表した．FGGのとは異なりサブタイピングに対応しておらず多相再帰もない．</li>
<li>Jones 氏は「Dictionary-free overloading by partial evaluation」という論文で，Haskell用の型クラスを効率的にコンパイルする方法について述べており，これは単相化に多少似ている．</li>
<li>Yu 氏らは「Formalization of generics for the .NET common language runtime」で，.NET JIT コンパイラの特化と共有を混ぜるメカニズムの形式化している．この論文では，型と意味論を保持した多相的な .NET の中間言語（IL）への変換を記述している．</li>
<li>Siek 氏と Taha 氏は「A Semantic Analysis of C++ Templates」という論文で，C++テンプレートのインスタンス化メカニズムを形式化している．</li>
<li>田中氏らは「Safe Low-level Code Generation in Coq Using Monomorphization and Monadification」という論文で，低レベルのCコードを生成する Coq (Gallina) のための単相化アルゴリズムをレポートしている．</li>
</ul>
<h2 id="実装について">実装について</h2>
<ul>
<li>FGとFGGの型検査器とインタプリタ</li>
<li>FGG から FG への変換器（monomorphiser）のプロトタイプ実装（単相化可能かの検査も含む）</li>
</ul>
<p>を Go で実装して公開したそうだ． Go で実装したのは Go の設計者やコミュニティとの議論を容易にするためらしい． さらに，これらの実装を使い多くのテストを行ったようだ．</p>
<ul>
<li>FG の評価結果を公式の Go コンパイラを使用したものと比較</li>
<li>FG と FGG インタプリタは保存定理と進行定理の動的な検査をサポート</li>
<li>単相化をテストするために双模倣性のテストを追加</li>
</ul>
<p>また，<a href="https://doi.org/10.1017/s0956796815000143">NEAT</a> を利用して FGG のサブセットから全ての正しく型付けされたプログラム（ただし，メソッドと型の出現巣の合計を指定して，ある程度のサイズまでに限定した上で）を列挙もしたらしい（SmallCheck に似ているらしい）． このサブセットに含まれる全ての FGG プログラムをサイズ20まで生成して，上述した双模倣性のテストが通ったことを確認したそうだ．</p>
<h2 id="おしまい">おしまい</h2>
<p>今後は C# のような，型のランタイム表現を渡すことに基づいた実装を検討して，単相化と組み合わせる方法を模索するらしい． あと，代入・配列・スライス・パッケージなどの他の重要な機能のモデル化も計画してるらしく，これを Bantamweight Go と呼ぶつもりらしい． さらに，「goroutines」とメッセージパッシングに基づくGoの並行メカニズムのモデル化も計画していて，これを Cruiserweight Go と呼ぶらしい． いったい素の Go は何級なんだろう笑</p>
  </div>]]></summary>
</entry>
<entry>
    <title>Hamler の Docker イメージを作る</title>
    <link href="https://matsubara0507.github.io/posts/2020-06-13-build-docker-image-for-hamler.html" />
    <id>https://matsubara0507.github.io/posts/2020-06-13-build-docker-image-for-hamler.html</id>
    <published>2020-06-13T00:00:00Z</published>
    <updated>2020-06-13T00:00:00Z</updated>
    <summary type="html"><![CDATA[<div class="post-content" itemprop="articleBody">
    <p><a href="https://www.hamler-lang.org/">Hamler</a> という ErlangVM 上で動作する Haskell に似た構文のプログラミング言語が公開された． 手元で遊ぶためにまず，Docker イメージを作ってみることにした（brew したくなかった）． <a href="https://hub.docker.com/repository/docker/matsubara0507/hamler">作成したイメージはココ</a>で<a href="https://github.com/matsubara0507/docker-hamler">リポジトリはココ</a>．</p>
<p>ちなみに，今回利用するバージョンは <code>0.1</code> です．</p>
<h2 id="docker-イメージを作る">Docker イメージを作る</h2>
<p><a href="https://github.com/erlang/docker-erlang-otp/blob/ed3bd9400e1b72b2bdd08596990f8ed3350a75c0/22/Dockerfile#L1">公式の Erlang の Docker イメージは Debian</a> なので，Debian の Docker イメージを作る． 現状は Mac 用のバイナリしか提供されていないので自前でビルドする必要がある． 自前でビルドする方法は<a href="https://github.com/hamler-lang/hamler/tree/2ed8e6088721471a4dd7993eb6a984fb7ce66a73#installation">公式ドキュメント</a>によると次の通り：</p>
<ol type="1">
<li>Erlang インストール</li>
<li>Haskell Stack をインストール</li>
<li>hamler-lang/hamler リポジトリをクローン</li>
<li>リポジトリで <code>make &amp;&amp; make install</code></li>
</ol>
<p>幸いにも，Hamler は Haskell Stack でビルドできるので簡単だ．</p>
<h3 id="コンパイラをビルドする">コンパイラをビルドする</h3>
<p>まずは Stack をインストールしよう：</p>
<div class="sourceCode" id="cb1"><pre class="sourceCode dockerfile"><code class="sourceCode dockerfile"><span id="cb1-1"><a href="#cb1-1"></a><span class="co"># マルチステージビルドをするので AS でタグづけしておく</span></span>
<span id="cb1-2"><a href="#cb1-2"></a><span class="kw">ARG</span> OTP_VERSION=22.3.4.1</span>
<span id="cb1-3"><a href="#cb1-3"></a><span class="kw">FROM</span> erlang:${OTP_VERSION} AS build</span>
<span id="cb1-4"><a href="#cb1-4"></a></span>
<span id="cb1-5"><a href="#cb1-5"></a><span class="kw">WORKDIR</span> /work</span>
<span id="cb1-6"><a href="#cb1-6"></a><span class="kw">RUN</span> curl -sSL https://get.haskellstack.org/ | sh</span></code></pre></div>
<p>次にリポジトリを <code>git clone</code> してビルドする：</p>
<div class="sourceCode" id="cb2"><pre class="sourceCode dockerfile"><code class="sourceCode dockerfile"><span id="cb2-1"><a href="#cb2-1"></a><span class="kw">ARG</span> HAMLER_VERSION=0.1</span>
<span id="cb2-2"><a href="#cb2-2"></a><span class="kw">RUN</span> git clone --branch=v$HAMLER_VERSION --depth=1 https://github.com/hamler-lang/hamler.git</span>
<span id="cb2-3"><a href="#cb2-3"></a><span class="kw">RUN</span> cd hamler &amp;&amp; make &amp;&amp; make install</span></code></pre></div>
<p>で，<code>make</code> というか中身は <code>stack build</code> のところで次のようなエラーが出た：</p>
<div class="sourceCode" id="cb3"><pre class="sourceCode sh"><code class="sourceCode bash"><span id="cb3-1"><a href="#cb3-1"></a><span class="ex">Package</span> index cache populated</span>
<span id="cb3-2"><a href="#cb3-2"></a><span class="ex">Cloning</span> afb0b731ff457d278403ab4bc134d3c88e09ea1f from git@github.com:hamler-lang/CoreErlang.git</span>
<span id="cb3-3"><a href="#cb3-3"></a><span class="ex">Received</span> ExitFailure 128 when running</span>
<span id="cb3-4"><a href="#cb3-4"></a><span class="ex">Raw</span> command: /usr/bin/git clone git@github.com:hamler-lang/CoreErlang.git /tmp/with-repo10/cloned</span>
<span id="cb3-5"><a href="#cb3-5"></a><span class="ex">Standard</span> error:</span>
<span id="cb3-6"><a href="#cb3-6"></a></span>
<span id="cb3-7"><a href="#cb3-7"></a><span class="ex">Cloning</span> into <span class="st">&#39;/tmp/with-repo10/cloned&#39;</span>...</span>
<span id="cb3-8"><a href="#cb3-8"></a><span class="ex">Host</span> key verification failed.</span>
<span id="cb3-9"><a href="#cb3-9"></a><span class="ex">fatal</span>: Could not read from remote repository.</span>
<span id="cb3-10"><a href="#cb3-10"></a></span>
<span id="cb3-11"><a href="#cb3-11"></a><span class="ex">Please</span> make sure you have the correct access rights</span>
<span id="cb3-12"><a href="#cb3-12"></a><span class="ex">and</span> the repository exists.</span>
<span id="cb3-13"><a href="#cb3-13"></a></span>
<span id="cb3-14"><a href="#cb3-14"></a><span class="ex">make</span>: *** [Makefile:9: build] Error 1</span></code></pre></div>
<p>これは stack.yaml の <code>extra-deps</code> で次のように指定していたからだ：</p>
<div class="sourceCode" id="cb4"><pre class="sourceCode yaml"><code class="sourceCode yaml"><span id="cb4-1"><a href="#cb4-1"></a><span class="kw">-</span><span class="at"> </span><span class="fu">git</span><span class="kw">:</span><span class="at"> git@github.com:hamler-lang/CoreErlang.git</span></span>
<span id="cb4-2"><a href="#cb4-2"></a><span class="at">  </span><span class="fu">commit</span><span class="kw">:</span><span class="at"> afb0b731ff457d278403ab4bc134d3c88e09ea1f</span></span>
<span id="cb4-3"><a href="#cb4-3"></a><span class="kw">-</span><span class="at"> </span><span class="fu">git</span><span class="kw">:</span><span class="at"> git@github.com:hamler-lang/purescript.git</span></span>
<span id="cb4-4"><a href="#cb4-4"></a><span class="at">  </span><span class="fu">commit</span><span class="kw">:</span><span class="at"> 2c43709229b12e72dfc550ccf3efce6bfa60da72</span></span></code></pre></div>
<p><code>git@github.com:owner/repo.git</code> という形で指定すると SSH を利用した方法で <code>git clone</code> をするのだが，この Docker 環境では SSH の設定をしていないのでエラーになる． なので，次のように書き換えてあげれば良い：</p>
<div class="sourceCode" id="cb5"><pre class="sourceCode yaml"><code class="sourceCode yaml"><span id="cb5-1"><a href="#cb5-1"></a><span class="kw">-</span><span class="at"> </span><span class="fu">github</span><span class="kw">:</span><span class="at"> hamler-lang/CoreErlang</span></span>
<span id="cb5-2"><a href="#cb5-2"></a><span class="at">  </span><span class="fu">commit</span><span class="kw">:</span><span class="at"> afb0b731ff457d278403ab4bc134d3c88e09ea1f</span></span>
<span id="cb5-3"><a href="#cb5-3"></a><span class="kw">-</span><span class="at"> </span><span class="fu">github</span><span class="kw">:</span><span class="at"> hamler-lang/purescript</span></span>
<span id="cb5-4"><a href="#cb5-4"></a><span class="at">  </span><span class="fu">commit</span><span class="kw">:</span><span class="at"> 2c43709229b12e72dfc550ccf3efce6bfa60da72</span></span></code></pre></div>
<p>このように修正した <code>stack.yaml</code> を用意して上書きすることにした：</p>
<div class="sourceCode" id="cb6"><pre class="sourceCode dockerfile"><code class="sourceCode dockerfile"><span id="cb6-1"><a href="#cb6-1"></a><span class="kw">ARG</span> HAMLER_VERSION=0.1</span>
<span id="cb6-2"><a href="#cb6-2"></a><span class="kw">RUN</span> git clone --branch=v$HAMLER_VERSION --depth=1 https://github.com/hamler-lang/hamler.git</span>
<span id="cb6-3"><a href="#cb6-3"></a><span class="kw">COPY</span> stack.yaml hamler/stack.yaml</span>
<span id="cb6-4"><a href="#cb6-4"></a><span class="kw">RUN</span> cd hamler &amp;&amp; make &amp;&amp; make install</span></code></pre></div>
<p>余談だが，これについては<a href="https://github.com/hamler-lang/hamler/pull/157">修正PRを出してマージされた</a>ので次のバージョンからは必要ない． で，今度は次のようなエラーが出た：</p>
<div class="sourceCode" id="cb7"><pre class="sourceCode sh"><code class="sourceCode bash"><span id="cb7-1"><a href="#cb7-1"></a><span class="ex">language-javascript</span>              <span class="op">&gt;</span> configure</span>
<span id="cb7-2"><a href="#cb7-2"></a><span class="ex">language-javascript</span>              <span class="op">&gt;</span> Configuring language-javascript-0.7.0.0...</span>
<span id="cb7-3"><a href="#cb7-3"></a><span class="ex">language-javascript</span>              <span class="op">&gt;</span> build</span>
<span id="cb7-4"><a href="#cb7-4"></a><span class="ex">language-javascript</span>              <span class="op">&gt;</span> Preprocessing library for language-javascript-0.7.0.0..</span>
<span id="cb7-5"><a href="#cb7-5"></a><span class="ex">language-javascript</span>              <span class="op">&gt;</span> happy: src/Language/JavaScript/Parser/Grammar7.y: hGetContents: invalid argument (invalid byte sequence)</span>
<span id="cb7-6"><a href="#cb7-6"></a><span class="ex">--</span>  While building package language-javascript-0.7.0.0 using:</span>
<span id="cb7-7"><a href="#cb7-7"></a>      <span class="ex">/root/.stack/setup-exe-cache/x86_64-linux-tinfo6/Cabal-simple_mPHDZzAJ_2.4.0.1_ghc-8.6.5</span> --builddir=.stack-work/dist/x86_64-linux-tinfo6/Cabal-2.4.0.1 build --ghc-options <span class="st">&quot;&quot;</span></span>
<span id="cb7-8"><a href="#cb7-8"></a>    <span class="ex">Process</span> exited with code: ExitFailure 1</span>
<span id="cb7-9"><a href="#cb7-9"></a><span class="ex">make</span>: *** [Makefile:9: build] Error 1</span></code></pre></div>
<p>はい，親の顔よりも見る <code>hGetContents: invalid argument (invalid byte sequence)</code> ですね． language-javascript パッケージは UTF-8 前提なので <code>LC_ALL</code> 環境変数を UTF-8 にしてあげる必要がある：</p>
<div class="sourceCode" id="cb8"><pre class="sourceCode dockerfile"><code class="sourceCode dockerfile"><span id="cb8-1"><a href="#cb8-1"></a><span class="kw">ARG</span> HAMLER_VERSION=0.1</span>
<span id="cb8-2"><a href="#cb8-2"></a><span class="kw">RUN</span> git clone --branch=v$HAMLER_VERSION --depth=1 https://github.com/hamler-lang/hamler.git</span>
<span id="cb8-3"><a href="#cb8-3"></a><span class="kw">COPY</span> stack.yaml hamler/stack.yaml</span>
<span id="cb8-4"><a href="#cb8-4"></a><span class="kw">ENV</span> LC_ALL C.UTF-8</span>
<span id="cb8-5"><a href="#cb8-5"></a><span class="kw">RUN</span> cd hamler &amp;&amp; make &amp;&amp; make install</span></code></pre></div>
<p>これでコンパイラのビルドは成功した！</p>
<h3 id="replを試すまで">REPLを試すまで</h3>
<p>マルチステージビルドなのでビルドしたコンパイラを次のステージにコピーしよう：</p>
<div class="sourceCode" id="cb9"><pre class="sourceCode dockerfile"><code class="sourceCode dockerfile"><span id="cb9-1"><a href="#cb9-1"></a><span class="kw">FROM</span> erlang:${OTP_VERSION}</span>
<span id="cb9-2"><a href="#cb9-2"></a><span class="kw">COPY</span> --from=build /root/.local/bin/hamler /usr/local/bin/hamler</span>
<span id="cb9-3"><a href="#cb9-3"></a><span class="kw">ENTRYPOINT</span> [<span class="st">&quot;/usr/local/bin/hamler&quot;</span>]</span></code></pre></div>
<p>試しに <code>--help</code> をしてみる：</p>
<div class="sourceCode" id="cb10"><pre class="sourceCode sh"><code class="sourceCode bash"><span id="cb10-1"><a href="#cb10-1"></a>$ <span class="ex">docker</span> run --rm matsubara0507/hamler --help</span>
<span id="cb10-2"><a href="#cb10-2"></a><span class="ex">Usage</span>: hamler COMMAND</span>
<span id="cb10-3"><a href="#cb10-3"></a>  <span class="ex">The</span> hamler compiler based on purescript v0.13.6</span>
<span id="cb10-4"><a href="#cb10-4"></a></span>
<span id="cb10-5"><a href="#cb10-5"></a><span class="ex">Available</span> options:</span>
<span id="cb10-6"><a href="#cb10-6"></a>  <span class="ex">--version</span>                Show the version number</span>
<span id="cb10-7"><a href="#cb10-7"></a>  <span class="ex">-h</span>,--help                Show this help text</span>
<span id="cb10-8"><a href="#cb10-8"></a></span>
<span id="cb10-9"><a href="#cb10-9"></a><span class="ex">Available</span> commands:</span>
<span id="cb10-10"><a href="#cb10-10"></a>  <span class="ex">build</span>                    Compile hamler source files</span>
<span id="cb10-11"><a href="#cb10-11"></a>  <span class="ex">init</span>                     init a hamler project</span>
<span id="cb10-12"><a href="#cb10-12"></a>  <span class="ex">run</span>                      run hamler project</span>
<span id="cb10-13"><a href="#cb10-13"></a>  <span class="ex">repldev</span>                  dev hamler lib</span>
<span id="cb10-14"><a href="#cb10-14"></a>  <span class="ex">repl</span>                     run hamler repl</span>
<span id="cb10-15"><a href="#cb10-15"></a></span>
<span id="cb10-16"><a href="#cb10-16"></a><span class="ex">For</span> help using each individual command, run <span class="kw">`</span><span class="ex">hamler</span> COMMAND --help<span class="kw">`</span>. For</span>
<span id="cb10-17"><a href="#cb10-17"></a><span class="ex">example</span>, <span class="kw">`</span><span class="ex">hamler</span> build --help<span class="kw">`</span> displays options specific to the <span class="kw">`</span><span class="ex">build</span><span class="kw">`</span> command.</span>
<span id="cb10-18"><a href="#cb10-18"></a></span>
<span id="cb10-19"><a href="#cb10-19"></a><span class="ex">hamler</span> 0.1</span></code></pre></div>
<p>動作確認するために REPL を試してみる：</p>
<div class="sourceCode" id="cb11"><pre class="sourceCode sh"><code class="sourceCode bash"><span id="cb11-1"><a href="#cb11-1"></a>$ <span class="ex">docker</span> run -it --rm matsubara0507/hamler repl</span>
<span id="cb11-2"><a href="#cb11-2"></a><span class="ex">hamler</span>: //src: getDirectoryContents:openDirStream: does not exist (No such file or directory)</span></code></pre></div>
<p>グローバルな環境で REPL は使えないっぽいのでプロジェクトを作成してみる：</p>
<div class="sourceCode" id="cb12"><pre class="sourceCode sh"><code class="sourceCode bash"><span id="cb12-1"><a href="#cb12-1"></a>$ <span class="ex">docker</span> run --rm -w /work -v <span class="kw">`</span><span class="bu">pwd</span><span class="kw">`</span>/example:/work matsubara0507/hamler init</span>
<span id="cb12-2"><a href="#cb12-2"></a>$ <span class="ex">docker</span> run -it --rm -w /work -v <span class="kw">`</span><span class="bu">pwd</span><span class="kw">`</span>/example:/work matsubara0507/hamler repl</span>
<span id="cb12-3"><a href="#cb12-3"></a><span class="ex">hamler</span>: /usr/local/lib/hamler/lib: getDirectoryContents:openDirStream: does not exist (No such file or directory)</span></code></pre></div>
<p><code>/usr/local/lib/hamler/lib</code> ？？？ いったいこれはどこで参照してるやつだ？？？と思ってリポジトリで色々調べてみたところ，どうやら標準ライブラリかなんかを参照してるっぽい． バグかな？って思ったけど <a href="https://github.com/hamler-lang/homebrew-hamler/blob/0.1/Formula/hamler.rb#L38-L40"><code>brew</code> の設定</a>をみてみたらリポジトリっぽいのを <code>/usr/local/lib/hamler</code> にシンボリックリンクしてるようだった． なので，試しにそうしてみる：</p>
<div class="sourceCode" id="cb13"><pre class="sourceCode dockerfile"><code class="sourceCode dockerfile"><span id="cb13-1"><a href="#cb13-1"></a><span class="kw">FROM</span> erlang:${OTP_VERSION}</span>
<span id="cb13-2"><a href="#cb13-2"></a><span class="kw">COPY</span> --from=build /root/.local/bin/hamler /usr/local/bin/hamler</span>
<span id="cb13-3"><a href="#cb13-3"></a><span class="kw">COPY</span> --from=build /work/hamler /usr/local/lib/hamler</span>
<span id="cb13-4"><a href="#cb13-4"></a><span class="kw">ENTRYPOINT</span> [<span class="st">&quot;/usr/local/bin/hamler&quot;</span>]</span></code></pre></div>
<p>今度はこういうエラーが出た：</p>
<div class="sourceCode" id="cb14"><pre class="sourceCode dockerfile"><code class="sourceCode dockerfile"><span id="cb14-1"><a href="#cb14-1"></a>$ docker run -it --rm -w /work -v `pwd`/example:/work matsubara0507/hamler repl</span>
<span id="cb14-2"><a href="#cb14-2"></a><span class="st">&quot;/work&quot;</span></span>
<span id="cb14-3"><a href="#cb14-3"></a>hamler: /usr/local/lib/hamler/bin/replsrv: start replsrv error!! : runInteractiveProcess: exec: does not exist (No such file or directory)</span></code></pre></div>
<p><code>bin/replsrv</code> ？？？ <code>brew</code> でインストールしてる tgz の中身をみてみたら <code>bin</code> ディレクトリがあり，そこには <code>replsrv</code> と <code>hamler</code> というファイルがあった． <code>hamler</code> はコンパイラのバイナリで，<code>replsrv</code> は Erlang のスクリプトだった． 探してみたら <code>repl/replsrv</code> という Erlang スクリプトがリポジトリにあり，<code>diff</code> してみたら tgz のものと一緒だった． なのでこれをコピーするようにした：</p>
<div class="sourceCode" id="cb15"><pre class="sourceCode dockerfile"><code class="sourceCode dockerfile"><span id="cb15-1"><a href="#cb15-1"></a><span class="kw">FROM</span> erlang:${OTP_VERSION}</span>
<span id="cb15-2"><a href="#cb15-2"></a><span class="kw">COPY</span> --from=build /root/.local/bin/hamler /usr/local/bin/hamler</span>
<span id="cb15-3"><a href="#cb15-3"></a><span class="kw">COPY</span> --from=build /work/hamler /usr/local/lib/hamler</span>
<span id="cb15-4"><a href="#cb15-4"></a><span class="kw">RUN</span> mkdir /usr/local/lib/hamler/bin \</span>
<span id="cb15-5"><a href="#cb15-5"></a> &amp;&amp; cp /usr/local/lib/hamler/repl/replsrv /usr/local/lib/hamler/bin</span>
<span id="cb15-6"><a href="#cb15-6"></a><span class="kw">ENTRYPOINT</span> [<span class="st">&quot;/usr/local/bin/hamler&quot;</span>]</span></code></pre></div>
<p>なんとこれで REPL が動作した：</p>
<pre><code>$ docker run -it --rm -w /work -v `pwd`/example:/work matsubara0507/hamler repl
&quot;/work&quot;
Compiling Data.Void
...
Compiling Main
Compiling Demo.GenServer
PSCi, version 0.13.6
Type :? for help

&gt; :?
The following commands are available:

    :?                        Show this help menu
    :quit                     Quit PSCi
    :reload                   Reload all imported modules while discarding bindings
    :clear                    Discard all imported modules and declared bindings
    :browse      &lt;module&gt;     See all functions in &lt;module&gt;
    :type        &lt;expr&gt;       Show the type of &lt;expr&gt;
    :kind        &lt;type&gt;       Show the kind of &lt;type&gt;
    :show        import       Show all imported modules
    :show        loaded       Show all loaded modules
    :show        print        Show the repl&#39;s current printing function
    :paste       paste        Enter multiple lines, terminated by ^D
    :complete    &lt;prefix&gt;     Show completions for &lt;prefix&gt; as if pressing tab
    :print       &lt;fn&gt;         Set the repl&#39;s printing function to &lt;fn&gt; (which must be fully qualified)
    :set         pro val      Set the pro&#39;s val

Further information is available on the PureScript documentation repository:
 --&gt; https://github.com/purescript/documentation/blob/master/guides/PSCi.md
&gt; 1 + 1
2
&gt; :type 1
Integer</code></pre>
<p>やったね．</p>
<h2 id="おまけサンプルプログラム">おまけ：サンプルプログラム</h2>
<p><a href="https://github.com/hamler-lang/documentation/blob/60607565253a2b6fa3984067cf068c20ec971d69/guides/01_WhyHamler.md#erlang-and-concurrency">ここにあるサンプルプログラム</a>をビルドして実行してみた：</p>
<div class="sourceCode" id="cb17"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span id="cb17-1"><a href="#cb17-1"></a><span class="co">-- `hamler run` は Main.main 関数を実行するみたい</span></span>
<span id="cb17-2"><a href="#cb17-2"></a><span class="ot">main ::</span> <span class="dt">IO</span> ()</span>
<span id="cb17-3"><a href="#cb17-3"></a>main <span class="ot">=</span> <span class="kw">do</span></span>
<span id="cb17-4"><a href="#cb17-4"></a>  <span class="co">-- メインプロセスのプロセスIDを取得</span></span>
<span id="cb17-5"><a href="#cb17-5"></a>  pid0 <span class="ot">&lt;-</span> selfPid</span>
<span id="cb17-6"><a href="#cb17-6"></a>  <span class="co">-- `spawn` は子プロセスの生成、`seqio` は IO 専用の `sequence`</span></span>
<span id="cb17-7"><a href="#cb17-7"></a>  pid100 <span class="ot">&lt;-</span> seqio [spawn loop (<span class="dt">State</span> pid0) <span class="op">|</span> x <span class="ot">&lt;-</span> [<span class="dv">1</span><span class="op">..</span><span class="dv">1000</span>]]</span>
<span id="cb17-8"><a href="#cb17-8"></a>  <span class="co">-- `last` はリストの最後の要素を、`init` はリストの最後以外の部分リストを返す</span></span>
<span id="cb17-9"><a href="#cb17-9"></a>  <span class="co">-- `[x|xs]` は Haskell の `x:xs`、つまりリストの中身を1つずらしてる</span></span>
<span id="cb17-10"><a href="#cb17-10"></a>  <span class="co">-- `send` は指定したプロセスにメッセージを送信する</span></span>
<span id="cb17-11"><a href="#cb17-11"></a>  seqio [send j (<span class="dt">Next</span> i) <span class="op">|</span> (i,j) <span class="ot">&lt;-</span> (<span class="fu">zip</span> pid100 [<span class="fu">last</span> pid100<span class="op">|</span><span class="fu">init</span> pid100]) ]</span>
<span id="cb17-12"><a href="#cb17-12"></a>  send (<span class="fu">head</span> pid100) (<span class="dt">Trans</span> <span class="st">&quot;great hamler! &quot;</span> <span class="dv">0</span>)</span>
<span id="cb17-13"><a href="#cb17-13"></a>  <span class="fu">return</span> ()</span>
<span id="cb17-14"><a href="#cb17-14"></a></span>
<span id="cb17-15"><a href="#cb17-15"></a><span class="kw">data</span> <span class="dt">Message</span> <span class="ot">=</span> <span class="dt">Next</span> <span class="dt">Pid</span> <span class="op">|</span> <span class="dt">Trans</span> <span class="dt">String</span> <span class="dt">Integer</span></span>
<span id="cb17-16"><a href="#cb17-16"></a><span class="kw">data</span> <span class="dt">State</span> <span class="ot">=</span> <span class="dt">State</span> <span class="dt">Pid</span></span>
<span id="cb17-17"><a href="#cb17-17"></a></span>
<span id="cb17-18"><a href="#cb17-18"></a><span class="ot">dealMessage ::</span> <span class="dt">State</span> <span class="ot">-&gt;</span>  <span class="dt">Message</span> <span class="ot">-&gt;</span> <span class="dt">IO</span> <span class="dt">State</span></span>
<span id="cb17-19"><a href="#cb17-19"></a>dealMessage (<span class="dt">State</span> pid) (<span class="dt">Next</span> p) <span class="ot">=</span> <span class="fu">return</span> (<span class="dt">State</span> p)</span>
<span id="cb17-20"><a href="#cb17-20"></a>dealMessage (<span class="dt">State</span> pid) (<span class="dt">Trans</span> str <span class="dv">11111</span>) <span class="ot">=</span> <span class="fu">return</span> (<span class="dt">State</span> pid)</span>
<span id="cb17-21"><a href="#cb17-21"></a>dealMessage (<span class="dt">State</span> pid) (<span class="dt">Trans</span> str i) <span class="ot">=</span></span>
<span id="cb17-22"><a href="#cb17-22"></a>  <span class="kw">do</span> send pid (<span class="dt">Trans</span> str (i<span class="op">+</span><span class="dv">1</span>))</span>
<span id="cb17-23"><a href="#cb17-23"></a>     pid0 <span class="ot">&lt;-</span> selfPid</span>
<span id="cb17-24"><a href="#cb17-24"></a>     println (<span class="fu">show</span> pid0 <span class="op">&lt;&gt;</span> <span class="st">&quot; -&gt; &quot;</span> <span class="op">&lt;&gt;</span> <span class="fu">show</span> pid <span class="op">&lt;&gt;</span> <span class="st">&quot;: &quot;</span> <span class="op">&lt;&gt;</span> str <span class="op">&lt;&gt;</span> <span class="fu">show</span> i)</span>
<span id="cb17-25"><a href="#cb17-25"></a>     <span class="fu">return</span> (<span class="dt">State</span> pid)</span>
<span id="cb17-26"><a href="#cb17-26"></a></span>
<span id="cb17-27"><a href="#cb17-27"></a><span class="ot">loop ::</span> <span class="dt">State</span> <span class="ot">-&gt;</span> <span class="dt">IO</span> ()</span>
<span id="cb17-28"><a href="#cb17-28"></a>loop s <span class="ot">=</span> <span class="kw">do</span></span>
<span id="cb17-29"><a href="#cb17-29"></a>  <span class="co">-- `receive` は送信されたメッセージを受信する</span></span>
<span id="cb17-30"><a href="#cb17-30"></a>  x <span class="ot">&lt;-</span> receive</span>
<span id="cb17-31"><a href="#cb17-31"></a>  s1 <span class="ot">&lt;-</span> dealMessage s x</span>
<span id="cb17-32"><a href="#cb17-32"></a>  loop s1</span></code></pre></div>
<p>Erlang についてはあんまり詳しくないんだが，確かいわゆるアクターモデル的な並行システムだった気がする． 各 Erlang プロセスはメッセージボックス的なのを持っていて，別プロセスから送信することができる． この型検査ってどれぐらいできるのだろうか． さすがに送信・受信の型があってるかまではチェックできなそう（調べてない）．</p>
<p>で，これをビルドした結果がこちら：</p>
<pre><code>$ docker run -it --rm -w /work -v `pwd`/example:/work matsubara0507/hamler build
Compiling Data.Void
...
Compiling Demo.GenServer
Compiling Main

$ docker run -it --rm -w /work -v `pwd`/example:/work matsubara0507/hamler run
&lt;0.749.0&gt; -&gt; &lt;0.750.0&gt;: great hamler! 672
&lt;0.80.0&gt; -&gt; &lt;0.81.0&gt;: great hamler! 3
&lt;0.81.0&gt; -&gt; &lt;0.82.0&gt;: great hamler! 4
&lt;0.82.0&gt; -&gt; &lt;0.83.0&gt;: great hamler! 5
...
&lt;0.791.0&gt; -&gt; &lt;0.792.0&gt;: great hamler! 7714
&lt;0.792.0&gt; -&gt; &lt;0.793.0&gt;: great hamler! 7715</code></pre>
<h2 id="おしまい">おしまい</h2>
<p>会社単位で作ってるみたい． すごいなぁ，羨ましい．</p>
  </div>]]></summary>
</entry>
<entry>
    <title>自分の Haskell プロジェクトの依存パッケージの古さを可視化する（その１）</title>
    <link href="https://matsubara0507.github.io/posts/2020-05-31-create-deps-sensor-part1.html" />
    <id>https://matsubara0507.github.io/posts/2020-05-31-create-deps-sensor-part1.html</id>
    <published>2020-05-31T00:00:00Z</published>
    <updated>2020-05-31T00:00:00Z</updated>
    <summary type="html"><![CDATA[<div class="post-content" itemprop="articleBody">
    <p>思いついたツールを自作続けるとこうなりますよね</p>
<p><img src="/assets/create-deps-sensor/myprojects.jpg"></img></p>
<p>時々思いつきで依存パッケージ，Stack プロジェクトであれば resolver をあげるんですけど，いい加減調べるのが大変． と言うことで，どれがどんだけ古くなってるかを可視化するツールを作りました． リポジトリはこちら：</p>
<h1 id="section"><iframe width="320" height="163" scrolling="no" frameborder="0" src="https://matsubara0507.github.io/my-github-cards/?target=matsubara0507/repomoving"></iframe></h1>
<h2 id="ゴール">ゴール</h2>
<p>今回は</p>
<ul>
<li>集めるのは Haskell Stack プロジェクトのみ</li>
<li>一覧化するのは stack.yaml に書いてる resolver のみ</li>
</ul>
<p>だけにする． 気が向いたときに少しずつパワーアップしていく．</p>
<h3 id="どうやるか">どうやるか</h3>
<p>可視化したいプロジェクトは設定ファイルで指定する形式にする． 自動で集めても良いが，まぁそれはおいおい．</p>
<p>で，設定をもとにルートにある <code>stack.yaml</code> ファイルを <a href="https://developer.github.com/v3/repos/contents/#get-contents">GitHub API の get-content</a> を使って取得する． そのファイルを読み込んで YAML をパースして，<code>resolver</code> あるいは <code>snapshot</code> を出力する． それだけ．</p>
<p>これを CLI ツールとして作る．</p>
<h2 id="作る">作る</h2>
<p>まずは CLI から．</p>
<h3 id="cli-ツールの雛形">CLI ツールの雛形</h3>
<p>なんと，すでに stack template を用意してあるので簡単：</p>
<div class="sourceCode" id="cb1"><pre class="sourceCode sh"><code class="sourceCode bash"><span id="cb1-1"><a href="#cb1-1"></a>$ <span class="ex">stack</span> new deps-sensor github:matsubara0507/mix-cli.hsfiles</span></code></pre></div>
<p>このテンプレートは自作フレームワーク <a href="https://github.com/matsubara0507/mix.hs">mix.hs</a> を使った CLI ツールのもの． mix.hs は <a href="https://github.com/fumieval/extensible">extensible パッケージ</a>と <a href="https://github.com/commercialhaskell/rio">rio パッケージ</a>を混ぜたような簡単なフレームワークです． で，あとはよしなにモジュール名を整えたら<a href="https://github.com/matsubara0507/deps-sensor/commit/f6e463f4cdd7a8488fef57364e5aedcd9ba3049b">出来上がり</a>：</p>
<div class="sourceCode" id="cb2"><pre class="sourceCode sh"><code class="sourceCode bash"><span id="cb2-1"><a href="#cb2-1"></a>$ <span class="ex">stack</span> build</span>
<span id="cb2-2"><a href="#cb2-2"></a><span class="ex">...</span></span>
<span id="cb2-3"><a href="#cb2-3"></a>$ <span class="ex">stack</span> exec -- deps-sensor --help</span>
<span id="cb2-4"><a href="#cb2-4"></a><span class="ex">deps-sensor</span> [options] [input-file]</span>
<span id="cb2-5"><a href="#cb2-5"></a>  <span class="ex">-h</span>  --help     Show this help text</span>
<span id="cb2-6"><a href="#cb2-6"></a>      <span class="ex">--version</span>  Show version</span>
<span id="cb2-7"><a href="#cb2-7"></a>  <span class="ex">-v</span>  --verbose  Enable verbose mode: verbosity level <span class="st">&quot;debug&quot;</span></span>
<span id="cb2-8"><a href="#cb2-8"></a>$ <span class="ex">stack</span> exec -- deps-sensor --version</span>
<span id="cb2-9"><a href="#cb2-9"></a><span class="ex">Version</span> 0.1.0, Git revision Sat May 23 14:58:54 2020 +0900 (2 commits)</span></code></pre></div>
<h3 id="設定ファイルを読み取る">設定ファイルを読み取る</h3>
<p>まずは型を定義する． 色々考えた結果とりあえず今回はシンプルに：</p>
<div class="sourceCode" id="cb3"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span id="cb3-1"><a href="#cb3-1"></a><span class="kw">module</span> <span class="dt">DepsSensor.Config</span> <span class="kw">where</span></span>
<span id="cb3-2"><a href="#cb3-2"></a></span>
<span id="cb3-3"><a href="#cb3-3"></a><span class="kw">import</span>           <span class="dt">RIO</span></span>
<span id="cb3-4"><a href="#cb3-4"></a><span class="kw">import</span>           <span class="dt">Data.Extensible</span></span>
<span id="cb3-5"><a href="#cb3-5"></a><span class="kw">import</span> <span class="kw">qualified</span> <span class="dt">Data.Yaml</span>       <span class="kw">as</span> <span class="dt">Y</span></span>
<span id="cb3-6"><a href="#cb3-6"></a></span>
<span id="cb3-7"><a href="#cb3-7"></a><span class="kw">type</span> <span class="dt">Config</span> <span class="ot">=</span> <span class="dt">Record</span></span>
<span id="cb3-8"><a href="#cb3-8"></a>  &#39;[ <span class="st">&quot;repositories&quot;</span> <span class="op">&gt;:</span> [<span class="dt">Text</span>] <span class="co">-- expect owner/name</span></span>
<span id="cb3-9"><a href="#cb3-9"></a>   ]</span>
<span id="cb3-10"><a href="#cb3-10"></a></span>
<span id="cb3-11"><a href="#cb3-11"></a><span class="ot">readConfig ::</span> <span class="dt">MonadIO</span> m <span class="ot">=&gt;</span> <span class="dt">FilePath</span> <span class="ot">-&gt;</span> m <span class="dt">Config</span></span>
<span id="cb3-12"><a href="#cb3-12"></a>readConfig <span class="ot">=</span> Y.decodeFileThrow</span></code></pre></div>
<p><code>readConfig</code> を定義してるのは，<code>Y.decodeFileThrow</code> を使うときに型注釈をしなくて良くするため． この設定型を RIO の <code>Env</code> 型に追加する：</p>
<div class="sourceCode" id="cb4"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span id="cb4-1"><a href="#cb4-1"></a><span class="kw">module</span> <span class="dt">DepsSensor.Env</span> <span class="kw">where</span></span>
<span id="cb4-2"><a href="#cb4-2"></a></span>
<span id="cb4-3"><a href="#cb4-3"></a><span class="kw">import</span>           <span class="dt">RIO</span></span>
<span id="cb4-4"><a href="#cb4-4"></a><span class="kw">import</span>           <span class="dt">Data.Extensible</span></span>
<span id="cb4-5"><a href="#cb4-5"></a><span class="kw">import</span>           <span class="dt">DepsSensor.Config</span></span>
<span id="cb4-6"><a href="#cb4-6"></a></span>
<span id="cb4-7"><a href="#cb4-7"></a><span class="kw">type</span> <span class="dt">Env</span> <span class="ot">=</span> <span class="dt">Record</span></span>
<span id="cb4-8"><a href="#cb4-8"></a>  &#39;[ <span class="st">&quot;logger&quot;</span> <span class="op">&gt;:</span> <span class="dt">LogFunc</span></span>
<span id="cb4-9"><a href="#cb4-9"></a>   , <span class="st">&quot;config&quot;</span> <span class="op">&gt;:</span> <span class="dt">Config</span></span>
<span id="cb4-10"><a href="#cb4-10"></a>   ]</span></code></pre></div>
<p>あとは CLI 側に追加するだけ：</p>
<div class="sourceCode" id="cb5"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span id="cb5-1"><a href="#cb5-1"></a><span class="kw">module</span> <span class="dt">Main</span> <span class="kw">where</span></span>
<span id="cb5-2"><a href="#cb5-2"></a><span class="op">...</span></span>
<span id="cb5-3"><a href="#cb5-3"></a></span>
<span id="cb5-4"><a href="#cb5-4"></a><span class="ot">main ::</span> <span class="dt">IO</span> ()</span>
<span id="cb5-5"><a href="#cb5-5"></a>main <span class="ot">=</span> <span class="op">...</span> <span class="co">-- runCmd を呼び出す</span></span>
<span id="cb5-6"><a href="#cb5-6"></a></span>
<span id="cb5-7"><a href="#cb5-7"></a><span class="co">-- FilePath は CLI のコマンドライン引数で渡す</span></span>
<span id="cb5-8"><a href="#cb5-8"></a><span class="ot">runCmd ::</span> <span class="dt">Options</span> <span class="ot">-&gt;</span> <span class="dt">Maybe</span> <span class="dt">FilePath</span> <span class="ot">-&gt;</span> <span class="dt">IO</span> ()</span>
<span id="cb5-9"><a href="#cb5-9"></a>runCmd opts path <span class="ot">=</span> <span class="kw">do</span></span>
<span id="cb5-10"><a href="#cb5-10"></a>  config <span class="ot">&lt;-</span> readConfig <span class="op">$</span> fromMaybe <span class="st">&quot;./config.yaml&quot;</span> path   <span class="co">-- ココと</span></span>
<span id="cb5-11"><a href="#cb5-11"></a>  <span class="kw">let</span> plugin <span class="ot">=</span> hsequence</span>
<span id="cb5-12"><a href="#cb5-12"></a>             <span class="op">$</span> <span class="op">#</span>logger <span class="op">&lt;@=&gt;</span> MixLogger.buildPlugin logOpts</span>
<span id="cb5-13"><a href="#cb5-13"></a>            <span class="op">&lt;:</span> <span class="op">#</span>config <span class="op">&lt;@=&gt;</span> MixConfig.buildPlugin config  <span class="co">-- ココを追記</span></span>
<span id="cb5-14"><a href="#cb5-14"></a>            <span class="op">&lt;:</span> nil</span>
<span id="cb5-15"><a href="#cb5-15"></a>  Mix.run plugin cmd</span>
<span id="cb5-16"><a href="#cb5-16"></a>  <span class="kw">where</span></span>
<span id="cb5-17"><a href="#cb5-17"></a>    logOpts <span class="ot">=</span> <span class="op">#</span>handle <span class="op">@=</span> stdout</span>
<span id="cb5-18"><a href="#cb5-18"></a>           <span class="op">&lt;:</span> <span class="op">#</span>verbose <span class="op">@=</span> (opts <span class="op">^.</span> <span class="op">#</span>verbose)</span>
<span id="cb5-19"><a href="#cb5-19"></a>           <span class="op">&lt;:</span> nil</span></code></pre></div>
<p>これで次のような YAML 設定ファイルを読み込めるようになった：</p>
<div class="sourceCode" id="cb6"><pre class="sourceCode yaml"><code class="sourceCode yaml"><span id="cb6-1"><a href="#cb6-1"></a><span class="fu">repositories</span><span class="kw">:</span></span>
<span id="cb6-2"><a href="#cb6-2"></a><span class="kw">-</span><span class="at"> matsubara0507/deps-sensor</span></span>
<span id="cb6-3"><a href="#cb6-3"></a><span class="kw">-</span><span class="at"> matsubara0507/git-plantation</span></span>
<span id="cb6-4"><a href="#cb6-4"></a><span class="kw">-</span><span class="at"> haskell-jp/antenna</span></span></code></pre></div>
<h3 id="github-api-で取得">GitHub API で取得</h3>
<p>GitHub API も頻繁に使うので<a href="https://github.com/matsubara0507/mix.hs/tree/master/mix-plugin-github">プラグイン化</a>してる． 次のように <code>Env</code> 型を拡張して CLI 経由で渡すことで，<code>RIO Env a</code> 配下ですっごく簡単に GitHub API を呼び出すことができる：</p>
<div class="sourceCode" id="cb7"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span id="cb7-1"><a href="#cb7-1"></a><span class="co">-- Env の拡張</span></span>
<span id="cb7-2"><a href="#cb7-2"></a><span class="kw">import</span> <span class="kw">qualified</span> <span class="dt">Mix.Plugin.GitHub</span> <span class="kw">as</span> <span class="dt">MixGitHub</span></span>
<span id="cb7-3"><a href="#cb7-3"></a></span>
<span id="cb7-4"><a href="#cb7-4"></a><span class="kw">type</span> <span class="dt">Env</span> <span class="ot">=</span> <span class="dt">Record</span></span>
<span id="cb7-5"><a href="#cb7-5"></a>  &#39;[ <span class="st">&quot;logger&quot;</span> <span class="op">&gt;:</span> <span class="dt">LogFunc</span></span>
<span id="cb7-6"><a href="#cb7-6"></a>   , <span class="st">&quot;github&quot;</span> <span class="op">&gt;:</span> <span class="dt">MixGitHub.Token</span> <span class="co">-- 追記</span></span>
<span id="cb7-7"><a href="#cb7-7"></a>   , <span class="st">&quot;config&quot;</span> <span class="op">&gt;:</span> <span class="dt">Config</span></span>
<span id="cb7-8"><a href="#cb7-8"></a>   ]</span>
<span id="cb7-9"><a href="#cb7-9"></a></span>
<span id="cb7-10"><a href="#cb7-10"></a><span class="co">-- Main の拡張</span></span>
<span id="cb7-11"><a href="#cb7-11"></a><span class="ot">runCmd ::</span> <span class="dt">Options</span> <span class="ot">-&gt;</span> <span class="dt">Maybe</span> <span class="dt">FilePath</span> <span class="ot">-&gt;</span> <span class="dt">IO</span> ()</span>
<span id="cb7-12"><a href="#cb7-12"></a>runCmd opts path <span class="ot">=</span> <span class="kw">do</span></span>
<span id="cb7-13"><a href="#cb7-13"></a>  gToken <span class="ot">&lt;-</span> liftIO <span class="op">$</span> fromString <span class="op">&lt;$&gt;</span> getEnv <span class="st">&quot;GH_TOKEN&quot;</span>     <span class="co">-- ココと</span></span>
<span id="cb7-14"><a href="#cb7-14"></a>  config <span class="ot">&lt;-</span> readConfig <span class="op">$</span> fromMaybe <span class="st">&quot;./config.yaml&quot;</span> path</span>
<span id="cb7-15"><a href="#cb7-15"></a>  <span class="kw">let</span> plugin <span class="ot">=</span> hsequence</span>
<span id="cb7-16"><a href="#cb7-16"></a>             <span class="op">$</span> <span class="op">#</span>logger <span class="op">&lt;@=&gt;</span> MixLogger.buildPlugin logOpts</span>
<span id="cb7-17"><a href="#cb7-17"></a>            <span class="op">&lt;:</span> <span class="op">#</span>github <span class="op">&lt;@=&gt;</span> MixGitHub.buildPlugin gToken  <span class="co">-- ココを追記</span></span>
<span id="cb7-18"><a href="#cb7-18"></a>            <span class="op">&lt;:</span> <span class="op">#</span>config <span class="op">&lt;@=&gt;</span> MixConfig.buildPlugin config</span>
<span id="cb7-19"><a href="#cb7-19"></a>            <span class="op">&lt;:</span> nil</span>
<span id="cb7-20"><a href="#cb7-20"></a>  Mix.run plugin cmd</span>
<span id="cb7-21"><a href="#cb7-21"></a>  <span class="kw">where</span></span>
<span id="cb7-22"><a href="#cb7-22"></a>    <span class="op">...</span></span></code></pre></div>
<p>呼び出し側はこんな感じ：</p>
<div class="sourceCode" id="cb8"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span id="cb8-1"><a href="#cb8-1"></a><span class="kw">module</span> <span class="dt">DepsSensor.Cmd</span> <span class="kw">where</span></span>
<span id="cb8-2"><a href="#cb8-2"></a></span>
<span id="cb8-3"><a href="#cb8-3"></a><span class="kw">import</span> <span class="kw">qualified</span> <span class="dt">GitHub</span></span>
<span id="cb8-4"><a href="#cb8-4"></a><span class="kw">import</span> <span class="kw">qualified</span> <span class="dt">Mix.Plugin.GitHub</span> <span class="kw">as</span> <span class="dt">MixGitHub</span></span>
<span id="cb8-5"><a href="#cb8-5"></a></span>
<span id="cb8-6"><a href="#cb8-6"></a><span class="ot">fetchStackFileContent ::</span> <span class="dt">Text</span> <span class="ot">-&gt;</span> <span class="dt">Text</span> <span class="ot">-&gt;</span> <span class="dt">RIO</span> <span class="dt">Env</span> (<span class="dt">Maybe</span> <span class="dt">Text</span>)</span>
<span id="cb8-7"><a href="#cb8-7"></a>fetchStackFileContent owner name <span class="ot">=</span> <span class="kw">do</span></span>
<span id="cb8-8"><a href="#cb8-8"></a>  <span class="kw">let</span> (owner&#39;, name&#39;) <span class="ot">=</span> (GitHub.mkName <span class="dt">Proxy</span> owner, GitHub.mkName <span class="dt">Proxy</span> name)</span>
<span id="cb8-9"><a href="#cb8-9"></a>  <span class="co">-- MixGitHub.fetch するだけ，簡単でしょ？</span></span>
<span id="cb8-10"><a href="#cb8-10"></a>  resp <span class="ot">&lt;-</span> MixGitHub.fetch <span class="op">$</span> GitHub.contentsForR owner&#39; name&#39; <span class="st">&quot;stack.yaml&quot;</span> <span class="dt">Nothing</span></span>
<span id="cb8-11"><a href="#cb8-11"></a>  <span class="kw">case</span> resp <span class="kw">of</span></span>
<span id="cb8-12"><a href="#cb8-12"></a>    <span class="dt">Left</span> _        <span class="ot">-&gt;</span> <span class="fu">pure</span> <span class="dt">Nothing</span> <span class="co">-- エラー握り潰すのはあれだけど</span></span>
<span id="cb8-13"><a href="#cb8-13"></a>    <span class="dt">Right</span> content <span class="ot">-&gt;</span> <span class="fu">pure</span> (toFileContent content)</span>
<span id="cb8-14"><a href="#cb8-14"></a></span>
<span id="cb8-15"><a href="#cb8-15"></a><span class="co">-- get-content API の返り値に含まれるファイルの中身だけを取り出す</span></span>
<span id="cb8-16"><a href="#cb8-16"></a><span class="ot">toFileContent ::</span> <span class="dt">GitHub.Content</span> <span class="ot">-&gt;</span> <span class="dt">Maybe</span> <span class="dt">Text</span></span>
<span id="cb8-17"><a href="#cb8-17"></a>toFileContent <span class="ot">=</span> \<span class="kw">case</span></span>
<span id="cb8-18"><a href="#cb8-18"></a>  <span class="dt">GitHub.ContentFile</span> c <span class="ot">-&gt;</span> <span class="dt">Just</span> <span class="op">$</span> GitHub.contentFileContent c</span>
<span id="cb8-19"><a href="#cb8-19"></a>  _                    <span class="ot">-&gt;</span> <span class="dt">Nothing</span></span></code></pre></div>
<h3 id="yamlを取り込む">YAMLを取り込む</h3>
<p>yaml パッケージを使ってサクッと YAML のデコードをするために，必要な情報だけの簡単なデータ型を作っておく：</p>
<div class="sourceCode" id="cb9"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span id="cb9-1"><a href="#cb9-1"></a><span class="kw">module</span> <span class="dt">DepsSensor.Cmd</span> <span class="kw">where</span></span>
<span id="cb9-2"><a href="#cb9-2"></a></span>
<span id="cb9-3"><a href="#cb9-3"></a><span class="kw">type</span> <span class="dt">StackFile</span> <span class="ot">=</span> <span class="dt">Record</span></span>
<span id="cb9-4"><a href="#cb9-4"></a>  &#39;[ <span class="st">&quot;resolver&quot;</span> <span class="op">&gt;:</span> <span class="dt">Maybe</span> <span class="dt">Text</span></span>
<span id="cb9-5"><a href="#cb9-5"></a>   , <span class="st">&quot;snapshot&quot;</span> <span class="op">&gt;:</span> <span class="dt">Maybe</span> <span class="dt">Text</span></span>
<span id="cb9-6"><a href="#cb9-6"></a>   ]</span>
<span id="cb9-7"><a href="#cb9-7"></a></span>
<span id="cb9-8"><a href="#cb9-8"></a><span class="ot">toResolver ::</span> <span class="dt">StackFile</span> <span class="ot">-&gt;</span> <span class="dt">Maybe</span> <span class="dt">Text</span></span>
<span id="cb9-9"><a href="#cb9-9"></a>toResolver stackFile <span class="ot">=</span> stackFile <span class="op">^.</span> <span class="op">#</span>resolver <span class="op">&lt;|&gt;</span> stackFile <span class="op">^.</span> <span class="op">#</span>snapshot</span></code></pre></div>
<p>実は1つ問題があって，get-content API で取得した中身は Base64 エンコードされているのだ． なので <code>fetchStackFileContent</code> 関数で取得した <code>Text</code> 型の値を Base64 デコードする関数を用意しておこう：</p>
<div class="sourceCode" id="cb10"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span id="cb10-1"><a href="#cb10-1"></a><span class="kw">import</span> <span class="kw">qualified</span> <span class="dt">RIO.Text</span>                <span class="kw">as</span> <span class="dt">T</span></span>
<span id="cb10-2"><a href="#cb10-2"></a><span class="kw">import</span> <span class="kw">qualified</span> <span class="dt">Data.ByteArray.Encoding</span> <span class="kw">as</span> <span class="dt">BA</span></span>
<span id="cb10-3"><a href="#cb10-3"></a><span class="kw">import</span> <span class="kw">qualified</span> <span class="dt">Data.Yaml</span>               <span class="kw">as</span> <span class="dt">Y</span></span>
<span id="cb10-4"><a href="#cb10-4"></a></span>
<span id="cb10-5"><a href="#cb10-5"></a><span class="ot">decodeStackFile ::</span> <span class="dt">Text</span> <span class="ot">-&gt;</span> <span class="dt">Either</span> <span class="dt">String</span> <span class="dt">StackFile</span></span>
<span id="cb10-6"><a href="#cb10-6"></a>decodeStackFile dat <span class="ot">=</span> <span class="kw">do</span></span>
<span id="cb10-7"><a href="#cb10-7"></a>  <span class="co">-- 改行コードを含むので抜いて連結してから memory パッケージを使ってデコードしている</span></span>
<span id="cb10-8"><a href="#cb10-8"></a>  dat&#39; <span class="ot">&lt;-</span> BA.convertFromBase <span class="dt">BA.Base64</span> <span class="op">$</span> T.encodeUtf8 (<span class="fu">mconcat</span> <span class="op">$</span> T.lines dat)</span>
<span id="cb10-9"><a href="#cb10-9"></a>  mapLeft <span class="fu">show</span> <span class="op">$</span> Y.decodeEither&#39; dat&#39;</span></code></pre></div>
<p>ちなみに，<a href="https://hackage.haskell.org/package/memory">memory パッケージ</a>を使っているのは <a href="https://hackage.haskell.org/package/cryptonite">cryptonite パッケージ</a>でも利用されているから．</p>
<h3 id="組み合わせる">組み合わせる</h3>
<p>準備は整ったのでこれを連結した処理をループで回すだけだ． ただ，用意したほとんどの関数が <code>Maybe a</code> 型か <code>Either e a</code> 型を返すので，このままエラーハンドリングすると段々畑になってしまう． そこで重宝するのが <a href="https://github.com/matsubara0507/fallible">fallible パッケージ</a>だ：</p>
<div class="sourceCode" id="cb11"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span id="cb11-1"><a href="#cb11-1"></a><span class="kw">import</span> <span class="kw">qualified</span> <span class="dt">RIO.Text</span>          <span class="kw">as</span> <span class="dt">T</span></span>
<span id="cb11-2"><a href="#cb11-2"></a><span class="kw">import</span>           <span class="dt">Data.Fallible</span></span>
<span id="cb11-3"><a href="#cb11-3"></a><span class="kw">import</span> <span class="kw">qualified</span> <span class="dt">Mix.Plugin.Logger</span> <span class="kw">as</span> <span class="dt">MixLogger</span></span>
<span id="cb11-4"><a href="#cb11-4"></a></span>
<span id="cb11-5"><a href="#cb11-5"></a><span class="ot">cmd ::</span> <span class="dt">RIO</span> <span class="dt">Env</span> ()</span>
<span id="cb11-6"><a href="#cb11-6"></a>cmd <span class="ot">=</span> <span class="kw">do</span></span>
<span id="cb11-7"><a href="#cb11-7"></a>  repositories <span class="ot">&lt;-</span> asks (view <span class="op">#</span>repositories <span class="op">.</span> view <span class="op">#</span>config)</span>
<span id="cb11-8"><a href="#cb11-8"></a>  for_ repositories <span class="op">$</span> \repo <span class="ot">-&gt;</span> evalContT <span class="op">$</span> <span class="kw">do</span></span>
<span id="cb11-9"><a href="#cb11-9"></a>    <span class="kw">let</span> (owner, name) <span class="ot">=</span> T.drop <span class="dv">1</span> <span class="op">&lt;$&gt;</span> T.break (<span class="op">==</span> <span class="ch">&#39;/&#39;</span>) repo</span>
<span id="cb11-10"><a href="#cb11-10"></a>    content   <span class="ot">&lt;-</span> lift (fetchStackFileContent owner name) <span class="op">!??</span> warn repo <span class="st">&quot;stack.yaml is not found&quot;</span></span>
<span id="cb11-11"><a href="#cb11-11"></a>    stackFile <span class="ot">&lt;-</span> decodeStackFile content <span class="op">??=</span> warn repo</span>
<span id="cb11-12"><a href="#cb11-12"></a>    resolver  <span class="ot">&lt;-</span> toResolver stackFile <span class="op">???</span> warn repo <span class="st">&quot;undefined resolver&quot;</span></span>
<span id="cb11-13"><a href="#cb11-13"></a>    MixLogger.logInfo (display <span class="op">$</span> repo <span class="op">&lt;&gt;</span> <span class="st">&quot;: &quot;</span> <span class="op">&lt;&gt;</span> resolver)</span>
<span id="cb11-14"><a href="#cb11-14"></a>  <span class="kw">where</span></span>
<span id="cb11-15"><a href="#cb11-15"></a>    <span class="co">-- とりあえず警告するだけ</span></span>
<span id="cb11-16"><a href="#cb11-16"></a>    warn r msg <span class="ot">=</span> exit <span class="op">$</span> MixLogger.logWarn (display <span class="op">$</span> T.pack msg <span class="op">&lt;&gt;</span> <span class="st">&quot;: &quot;</span> <span class="op">&lt;&gt;</span> r)</span></code></pre></div>
<p>演算子が3種類も出てきてわかりにくいが - 左が <code>!</code> の場合は左辺が <code>RIO Env (f a)</code> になっていて， <code>?</code> の場合は <code>f a</code> になっている（<code>f</code> は <code>Maybe</code> や <code>Either e</code>） - 右が <code>=</code> の場合は右辺で <code>Either e a</code> の <code>e</code> を受け取るハンドリングをし，<code>?</code> の場合は無視する（<code>Maybe</code> の場合は後者一択）</p>
<p>で，これを実行するとこんな感じになった：</p>
<div class="sourceCode" id="cb12"><pre class="sourceCode sh"><code class="sourceCode bash"><span id="cb12-1"><a href="#cb12-1"></a>$ <span class="ex">stack</span> exec -- deps-sensor</span>
<span id="cb12-2"><a href="#cb12-2"></a><span class="ex">matsubara0507</span>/deps-sensor: <span class="ex">lts-15.13</span></span>
<span id="cb12-3"><a href="#cb12-3"></a><span class="ex">matsubara0507</span>/git-plantation: <span class="ex">lts-15.5</span></span>
<span id="cb12-4"><a href="#cb12-4"></a><span class="ex">haskell-jp</span>/antenna: <span class="ex">lts-14.20</span></span></code></pre></div>
<h1 id="おしまい">おしまい</h1>
<p>追々，Webページの生成と http://packdeps.haskellers.com っぽい機能を足したりするつもりです。</p>
  </div>]]></summary>
</entry>
<entry>
    <title>Haskell Servant で Slack からの署名付きリクエストを受ける</title>
    <link href="https://matsubara0507.github.io/posts/2020-04-20-servant-with-slack-verifying-requests.html" />
    <id>https://matsubara0507.github.io/posts/2020-04-20-servant-with-slack-verifying-requests.html</id>
    <published>2020-04-20T00:00:00Z</published>
    <updated>2020-04-20T00:00:00Z</updated>
    <summary type="html"><![CDATA[<div class="post-content" itemprop="articleBody">
    <p>Slack のスラッシュコマンドなどで利用される署名付きリクエストを Haskell Servant で受ける方法を考えて実装しました． 実装は slackell という Haskell の Slack API パッケージにしてあります：</p>
<ul>
<li><a href="https://github.com/matsubara0507/slackell">matsubara0507/slackell - GitHub</a></li>
</ul>
<p><a href="https://github.com/matsubara0507/slackell/pull/1">該当 PR はこれです</a>．</p>
<h2 id="署名付きリクエスト">署名付きリクエスト</h2>
<p>スラッシュコマンドなどで Slack からのリクエストを受け取るときに，そのリクエストが本当に該当のスラッシュコマンドから送られてきた正しいリクエストかを検証するには，リクエストパラメーターとして送られてきた検証トークンを確認していた． しかし，この方法は現在では非推奨になっており，代わりにリクエストヘッダーに付いている署名を確認する． 公式ドキュメントは以下：</p>
<ul>
<li><a href="https://api.slack.com/authentication/verifying-requests-from-slack">Verifying requests from Slack | Slack</a></li>
</ul>
<p>署名は <code>X-Slack-Signature</code> というヘッダーに <code>v0=</code> というプレフィックス付きで含まれている． このリクエストを受け取ったアプリケーション側は以下の方法で署名をエンコードして比較することで，そのリクエストの正当性を保証する：</p>
<ol type="1">
<li><code>X-Slack-Request-Timestamp</code> リクエストヘッダーに含まれているタイムスタンプを読む</li>
<li>バージョン番号・1のタイムスタンプ・リクエストボディの3つを <code>:</code> 区切りで連結する
<ul>
<li>e.g. <code>v0:123456789:command=/weather&amp;text=94070</code></li>
<li>バージョン番号は今のところ全て <code>v0</code></li>
</ul></li>
<li>2の文字列を Slack Apps で取得できる <code>Signing Secret</code> を使って HMAC SHA256 でエンコード</li>
</ol>
<h3 id="haskellでエンコードする">Haskellでエンコードする</h3>
<p>このアルゴリズムを Haskell プログラムで実装する． HMAC SHA256 エンコードには <a href="https://hackage.haskell.org/package/cryptonite">cryptonite</a> パッケージを使った． 2と3の部分を行って署名をエンコードする関数は以下：</p>
<div class="sourceCode" id="cb1"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span id="cb1-1"><a href="#cb1-1"></a><span class="kw">module</span> <span class="dt">Web.Slack.Verify</span> <span class="kw">where</span></span>
<span id="cb1-2"><a href="#cb1-2"></a></span>
<span id="cb1-3"><a href="#cb1-3"></a><span class="kw">import</span> <span class="dt">Crypto.Hash</span> (<span class="dt">Digest</span>, <span class="dt">SHA256</span>)</span>
<span id="cb1-4"><a href="#cb1-4"></a><span class="kw">import</span> <span class="dt">Crypto.MAC.HMAC</span> (<span class="dt">HMAC</span> (..), hmac)</span>
<span id="cb1-5"><a href="#cb1-5"></a></span>
<span id="cb1-6"><a href="#cb1-6"></a><span class="kw">newtype</span> <span class="dt">SigningSecret</span> <span class="ot">=</span> <span class="dt">SigningSecret</span> <span class="dt">Text</span> <span class="kw">deriving</span> (<span class="dt">IsString</span>)</span>
<span id="cb1-7"><a href="#cb1-7"></a><span class="kw">type</span> <span class="dt">RequestTimestamp</span> <span class="ot">=</span> <span class="dt">Text</span></span>
<span id="cb1-8"><a href="#cb1-8"></a></span>
<span id="cb1-9"><a href="#cb1-9"></a><span class="co">-- | シークレット・タイムスタンプ・リクエストボディは引数でもらう</span></span>
<span id="cb1-10"><a href="#cb1-10"></a><span class="ot">encodeSignature ::</span> <span class="dt">SigningSecret</span> <span class="ot">-&gt;</span> <span class="dt">RequestTimestamp</span> <span class="ot">-&gt;</span> <span class="dt">ByteString</span> <span class="ot">-&gt;</span> <span class="dt">Digest</span> <span class="dt">SHA256</span></span>
<span id="cb1-11"><a href="#cb1-11"></a>encodeSignature (<span class="dt">SigningSecret</span> secret) ts body <span class="ot">=</span></span>
<span id="cb1-12"><a href="#cb1-12"></a>  hmacGetDigest <span class="op">$</span> hmac (Text.encodeUtf8 secret) basestr</span>
<span id="cb1-13"><a href="#cb1-13"></a>  <span class="kw">where</span></span>
<span id="cb1-14"><a href="#cb1-14"></a>    basestr <span class="ot">=</span> BS.intercalate <span class="st">&quot;:&quot;</span> [Text.encodeUtf8 version, Text.encodeUtf8 ts, body]</span></code></pre></div>
<p>最終的な型が <code>Digest SHA256</code> なので，ヘッダーの方の署名と比較しやすいように文字列からの変換関数も用意しておく：</p>
<div class="sourceCode" id="cb2"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span id="cb2-1"><a href="#cb2-1"></a><span class="kw">import</span> <span class="dt">Crypto.Hash</span> (<span class="dt">Digest</span>, <span class="dt">SHA256</span>, digestFromByteString)</span>
<span id="cb2-2"><a href="#cb2-2"></a><span class="kw">import</span> <span class="dt">Data.ByteArray.Encoding</span> (<span class="dt">Base</span> (..), convertFromBase)</span>
<span id="cb2-3"><a href="#cb2-3"></a></span>
<span id="cb2-4"><a href="#cb2-4"></a><span class="kw">type</span> <span class="dt">SignatureHeader</span> <span class="ot">=</span> <span class="dt">Text</span></span>
<span id="cb2-5"><a href="#cb2-5"></a></span>
<span id="cb2-6"><a href="#cb2-6"></a><span class="ot">convertSignatureHeader ::</span> <span class="dt">SignatureHeader</span> <span class="ot">-&gt;</span> <span class="dt">Maybe</span> (<span class="dt">Digest</span> <span class="dt">SHA256</span>)</span>
<span id="cb2-7"><a href="#cb2-7"></a>convertSignatureHeader sign <span class="ot">=</span> <span class="fu">either</span> (<span class="fu">const</span> <span class="dt">Nothing</span>) digestFromByteString bs</span>
<span id="cb2-8"><a href="#cb2-8"></a>  <span class="kw">where</span></span>
<span id="cb2-9"><a href="#cb2-9"></a>    (_, sign&#39;) <span class="ot">=</span> Text.breakOnEnd (version <span class="op">&lt;&gt;</span> <span class="st">&quot;=&quot;</span>) sign</span>
<span id="cb2-10"><a href="#cb2-10"></a>    bs <span class="ot">=</span> convertFromBase <span class="dt">Base16</span> (Text.encodeUtf8 sign&#39;)<span class="ot"> ::</span> <span class="dt">Either</span> <span class="dt">String</span> <span class="dt">ByteString</span></span>
<span id="cb2-11"><a href="#cb2-11"></a></span>
<span id="cb2-12"><a href="#cb2-12"></a><span class="ot">version ::</span> <span class="dt">Text</span></span>
<span id="cb2-13"><a href="#cb2-13"></a>version <span class="ot">=</span> <span class="st">&quot;v0&quot;</span></span></code></pre></div>
<p>ここで注意しなければいけないのが <code>digestFromByteString</code> 関数に食わせる <code>ByteString</code> 型の値は， <code>memory</code> パッケージの関数を利用して16進数表現から直す必要がある．</p>
<h2 id="slash-command-を受け取る">Slash Command を受け取る</h2>
<p>署名をエンコードする関数はできたので，あとは Servant でスラッシュコマンドを受け取る方法を考える． まずはスラッシュコマンドから送られてくるリクエストボディの型を宣言しておこう：</p>
<div class="sourceCode" id="cb3"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span id="cb3-1"><a href="#cb3-1"></a><span class="kw">module</span> <span class="dt">Web.Slack.SlashCommand</span> <span class="kw">where</span></span>
<span id="cb3-2"><a href="#cb3-2"></a></span>
<span id="cb3-3"><a href="#cb3-3"></a><span class="kw">import</span> <span class="dt">Data.Extensible</span></span>
<span id="cb3-4"><a href="#cb3-4"></a></span>
<span id="cb3-5"><a href="#cb3-5"></a><span class="kw">type</span> <span class="dt">RequestData</span> <span class="ot">=</span> <span class="dt">Record</span></span>
<span id="cb3-6"><a href="#cb3-6"></a>  &#39;[ <span class="st">&quot;token&quot;</span>           <span class="op">&gt;:</span> <span class="dt">Text</span></span>
<span id="cb3-7"><a href="#cb3-7"></a>   , <span class="st">&quot;command&quot;</span>         <span class="op">&gt;:</span> <span class="dt">Text</span></span>
<span id="cb3-8"><a href="#cb3-8"></a>   , <span class="st">&quot;text&quot;</span>            <span class="op">&gt;:</span> <span class="dt">Text</span></span>
<span id="cb3-9"><a href="#cb3-9"></a>   , <span class="st">&quot;response_url&quot;</span>    <span class="op">&gt;:</span> <span class="dt">Text</span></span>
<span id="cb3-10"><a href="#cb3-10"></a>   , <span class="st">&quot;trigger_id&quot;</span>      <span class="op">&gt;:</span> <span class="dt">Text</span></span>
<span id="cb3-11"><a href="#cb3-11"></a>   , <span class="st">&quot;user_id&quot;</span>         <span class="op">&gt;:</span> <span class="dt">Text</span></span>
<span id="cb3-12"><a href="#cb3-12"></a>   , <span class="st">&quot;user_name&quot;</span>       <span class="op">&gt;:</span> <span class="dt">Text</span></span>
<span id="cb3-13"><a href="#cb3-13"></a>   , <span class="st">&quot;team_id&quot;</span>         <span class="op">&gt;:</span> <span class="dt">Text</span></span>
<span id="cb3-14"><a href="#cb3-14"></a>   , <span class="st">&quot;team_domain&quot;</span>     <span class="op">&gt;:</span> <span class="dt">Text</span></span>
<span id="cb3-15"><a href="#cb3-15"></a>   , <span class="st">&quot;channel_id&quot;</span>      <span class="op">&gt;:</span> <span class="dt">Text</span></span>
<span id="cb3-16"><a href="#cb3-16"></a>   , <span class="st">&quot;channel_name&quot;</span>    <span class="op">&gt;:</span> <span class="dt">Text</span></span>
<span id="cb3-17"><a href="#cb3-17"></a>   , <span class="st">&quot;enterprise_id&quot;</span>   <span class="op">&gt;:</span> <span class="dt">Maybe</span> <span class="dt">Text</span></span>
<span id="cb3-18"><a href="#cb3-18"></a>   , <span class="st">&quot;enterprise_name&quot;</span> <span class="op">&gt;:</span> <span class="dt">Maybe</span> <span class="dt">Text</span></span>
<span id="cb3-19"><a href="#cb3-19"></a>   ]</span></code></pre></div>
<p>正直，これを調べるのも大変だった． 公式ドキュメントにはどんなパラメータがあるか割愛されてる部分があるからだ．</p>
<p>で，API の型は雰囲気としてはこんな感じ：</p>
<div class="sourceCode" id="cb4"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span id="cb4-1"><a href="#cb4-1"></a><span class="co">-- Web.Slack は slackell</span></span>
<span id="cb4-2"><a href="#cb4-2"></a><span class="kw">import</span> <span class="kw">qualified</span> <span class="dt">Web.Slack.Verify</span> <span class="kw">as</span> <span class="dt">Slack</span></span>
<span id="cb4-3"><a href="#cb4-3"></a><span class="kw">import</span> <span class="kw">qualified</span> <span class="dt">Web.Slack.SlashCommand</span> <span class="kw">as</span> <span class="dt">SlashCmd</span></span>
<span id="cb4-4"><a href="#cb4-4"></a></span>
<span id="cb4-5"><a href="#cb4-5"></a><span class="kw">type</span> <span class="dt">API</span></span>
<span id="cb4-6"><a href="#cb4-6"></a>    <span class="ot">=</span> <span class="st">&quot;slash&quot;</span></span>
<span id="cb4-7"><a href="#cb4-7"></a>      <span class="op">:&gt;</span> <span class="dt">ReqBody</span> &#39;[<span class="dt">FormUrlEncoded</span>] <span class="dt">RequestData</span></span>
<span id="cb4-8"><a href="#cb4-8"></a>      <span class="op">:&gt;</span> <span class="dt">Header</span> <span class="st">&quot;X-Slack-Request-Timestamp&quot;</span> <span class="dt">Slack.RequestTimestamp</span></span>
<span id="cb4-9"><a href="#cb4-9"></a>      <span class="op">:&gt;</span> <span class="dt">Header</span> <span class="st">&quot;X-Slack-Signature&quot;</span> <span class="dt">Slack.SignatureHeader</span></span>
<span id="cb4-10"><a href="#cb4-10"></a>      <span class="op">:&gt;</span> <span class="dt">Post</span> &#39;[<span class="dt">JSON</span>] <span class="dt">NoContent</span></span></code></pre></div>
<p>ここで問題が1つ． 署名をエンコードするのに必要なのはデータ型 <code>SlachCmd.RequestData</code> に変換される前の文字列だ． <code>ToForm</code> 型クラスを使って元の形（<code>=</code> と <code>&amp;</code> で連結するやつ）に戻せば良いと思うかも知れないが，これだと key の順番が変わってしまう可能性があり，順番が変わると別のエンコード結果になってしまう． 逆に文字列のまんま受け取れば良いかと思うかも知れないが，Servant は正しい ContentType な型を指定しないと 400 を返してしまう（スラッシュコマンドは <code>application/x-www-form-urlencoded</code> でリクエストしてくる）． 困った． 色々調べたが，後から素のリクエストボディを取得する方法がわからなかった…</p>
<h3 id="contenttypeを自作する">ContentTypeを自作する</h3>
<p>まぁ無いなら自作するしかない． 素の文字列を返してくれて <code>application/x-www-form-urlencoded</code> メディアタイプを表している ContentType な型を作る． どのメディアタイプかは <code>Accept</code> 型クラスで定義し，どの型で返してくれるかは <code>MimeUnrender</code> 型クラスで定義する：</p>
<div class="sourceCode" id="cb5"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span id="cb5-1"><a href="#cb5-1"></a><span class="kw">module</span> <span class="dt">Web.Slack.SlashCommand</span> <span class="kw">where</span></span>
<span id="cb5-2"><a href="#cb5-2"></a></span>
<span id="cb5-3"><a href="#cb5-3"></a><span class="kw">type</span> <span class="dt">RequestData</span> <span class="ot">=</span> <span class="op">...</span></span>
<span id="cb5-4"><a href="#cb5-4"></a></span>
<span id="cb5-5"><a href="#cb5-5"></a><span class="kw">data</span> <span class="dt">SlashCommand</span></span>
<span id="cb5-6"><a href="#cb5-6"></a></span>
<span id="cb5-7"><a href="#cb5-7"></a><span class="kw">instance</span> <span class="dt">Accept</span> <span class="dt">SlashCommand</span> <span class="kw">where</span></span>
<span id="cb5-8"><a href="#cb5-8"></a><span class="ot">  contentType ::</span> <span class="dt">Proxy</span> <span class="dt">SlashCommand</span> <span class="ot">-&gt;</span> <span class="dt">MediaType</span></span>
<span id="cb5-9"><a href="#cb5-9"></a>  contentType _ <span class="ot">=</span> <span class="st">&quot;application&quot;</span> <span class="op">M.//</span> <span class="st">&quot;x-www-form-urlencoded&quot;</span></span>
<span id="cb5-10"><a href="#cb5-10"></a></span>
<span id="cb5-11"><a href="#cb5-11"></a><span class="kw">instance</span> <span class="dt">MimeUnrender</span> <span class="dt">SlashCommand</span> (<span class="dt">ByteString</span>, <span class="dt">RequestData</span>) <span class="kw">where</span></span>
<span id="cb5-12"><a href="#cb5-12"></a><span class="ot">  mimeUnrender ::</span></span>
<span id="cb5-13"><a href="#cb5-13"></a>    <span class="dt">Proxy</span> <span class="dt">SlashCommand</span> <span class="ot">-&gt;</span> <span class="dt">Lazy.ByteString</span> <span class="ot">-&gt;</span> <span class="dt">Either</span> <span class="dt">String</span> (<span class="dt">ByteString</span>, <span class="dt">RequestData</span>)</span>
<span id="cb5-14"><a href="#cb5-14"></a>  mimeUnrender _ bs <span class="ot">=</span> Text.unpack <span class="op">+++</span> (bs,) <span class="op">$</span> urlDecodeAsForm bs</span></code></pre></div>
<p>どーせ後から <code>RequestData</code> 型に変換するので両方を返すことにした． あとはこれを使うだけ：</p>
<div class="sourceCode" id="cb6"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span id="cb6-1"><a href="#cb6-1"></a><span class="co">-- Web.Slack は slackell</span></span>
<span id="cb6-2"><a href="#cb6-2"></a><span class="kw">import</span> <span class="kw">qualified</span> <span class="dt">Web.Slack.Verify</span> <span class="kw">as</span> <span class="dt">Slack</span></span>
<span id="cb6-3"><a href="#cb6-3"></a><span class="kw">import</span> <span class="kw">qualified</span> <span class="dt">Web.Slack.SlashCommand</span> <span class="kw">as</span> <span class="dt">SlashCmd</span></span>
<span id="cb6-4"><a href="#cb6-4"></a><span class="kw">import</span>           <span class="dt">Web.Slack.SlashCommand</span> (<span class="dt">SlashCommand</span>)</span>
<span id="cb6-5"><a href="#cb6-5"></a></span>
<span id="cb6-6"><a href="#cb6-6"></a><span class="kw">type</span> <span class="dt">API</span></span>
<span id="cb6-7"><a href="#cb6-7"></a>    <span class="ot">=</span> <span class="st">&quot;slash&quot;</span></span>
<span id="cb6-8"><a href="#cb6-8"></a>      <span class="op">:&gt;</span> <span class="dt">ReqBody</span> &#39;[<span class="dt">SlashCommand</span>] <span class="dt">RequestData</span></span>
<span id="cb6-9"><a href="#cb6-9"></a>      <span class="op">:&gt;</span> <span class="dt">Header</span> <span class="st">&quot;X-Slack-Request-Timestamp&quot;</span> <span class="dt">Slack.RequestTimestamp</span></span>
<span id="cb6-10"><a href="#cb6-10"></a>      <span class="op">:&gt;</span> <span class="dt">Header</span> <span class="st">&quot;X-Slack-Signature&quot;</span> <span class="dt">Slack.SignatureHeader</span></span>
<span id="cb6-11"><a href="#cb6-11"></a>      <span class="op">:&gt;</span> <span class="dt">Post</span> &#39;[<span class="dt">JSON</span>] <span class="dt">NoContent</span></span></code></pre></div>
<h3 id="apiの実装">APIの実装</h3>
<p>残りは今までのを使うだけなので簡単：</p>
<div class="sourceCode" id="cb7"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span id="cb7-1"><a href="#cb7-1"></a><span class="ot">server ::</span> <span class="dt">Slack.SigningSecret</span> <span class="ot">-&gt;</span> <span class="dt">Server</span> <span class="dt">API</span></span>
<span id="cb7-2"><a href="#cb7-2"></a>server secret <span class="ot">=</span> slashCommand</span>
<span id="cb7-3"><a href="#cb7-3"></a>  <span class="kw">where</span></span>
<span id="cb7-4"><a href="#cb7-4"></a>    slashCommand (lbs, body) (<span class="dt">Just</span> ts) (<span class="dt">Just</span> sign) <span class="ot">=</span></span>
<span id="cb7-5"><a href="#cb7-5"></a>      <span class="kw">let</span> digest <span class="ot">=</span> Slack.encodeSignature secret ts (LBS.toStrict lbs) <span class="kw">in</span></span>
<span id="cb7-6"><a href="#cb7-6"></a>      <span class="kw">if</span> <span class="dt">Just</span> digest <span class="op">==</span> Slack.convertSignatureHeader sign <span class="kw">then</span></span>
<span id="cb7-7"><a href="#cb7-7"></a>        liftIO <span class="op">$</span> <span class="kw">do</span></span>
<span id="cb7-8"><a href="#cb7-8"></a>          _ <span class="ot">&lt;-</span> forkIO <span class="op">$</span> action body <span class="co">-- タイムアウトがあるので処理自体は fork する</span></span>
<span id="cb7-9"><a href="#cb7-9"></a>          <span class="fu">pure</span> <span class="dt">NoContent</span></span>
<span id="cb7-10"><a href="#cb7-10"></a>      <span class="kw">else</span></span>
<span id="cb7-11"><a href="#cb7-11"></a>        throwError err401</span>
<span id="cb7-12"><a href="#cb7-12"></a>    slashCommand _ _ _ <span class="ot">=</span> throwError err401</span>
<span id="cb7-13"><a href="#cb7-13"></a></span>
<span id="cb7-14"><a href="#cb7-14"></a><span class="ot">    action ::</span> <span class="dt">SlashCmd.RequestData</span> <span class="ot">-&gt;</span> <span class="dt">IO</span> ()</span>
<span id="cb7-15"><a href="#cb7-15"></a>    action body <span class="ot">=</span> <span class="op">...</span></span></code></pre></div>
<h2 id="おまけfromformインスタンス">おまけ：FromFormインスタンス</h2>
<p>実はこれだkではビルドが通らない． というのも，拡張可能データ型の <code>FromForm</code> 型クラスインスタンスが無いからだ． しょうがないので自作した：</p>
<div class="sourceCode" id="cb8"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span id="cb8-1"><a href="#cb8-1"></a><span class="kw">import</span> <span class="dt">Web.FormUrlEncoded</span> (<span class="dt">FromForm</span> (..))</span>
<span id="cb8-2"><a href="#cb8-2"></a><span class="kw">import</span> <span class="dt">Web.HttpApiData</span> (<span class="dt">FromHttpApiData</span> (..), parseUnique)</span>
<span id="cb8-3"><a href="#cb8-3"></a></span>
<span id="cb8-4"><a href="#cb8-4"></a><span class="kw">instance</span> <span class="dt">Forall</span> (<span class="dt">KeyTargetAre</span> <span class="dt">KnownSymbol</span> <span class="dt">FromFormData</span>) xs <span class="ot">=&gt;</span> <span class="dt">FromForm</span> (<span class="dt">Record</span> xs) <span class="kw">where</span></span>
<span id="cb8-5"><a href="#cb8-5"></a>  fromForm form <span class="ot">=</span></span>
<span id="cb8-6"><a href="#cb8-6"></a>    hgenerateFor (<span class="dt">Proxy</span> <span class="op">@</span> (<span class="dt">KeyTargetAre</span> <span class="dt">KnownSymbol</span> <span class="dt">FromFormData</span>)) <span class="op">$</span> \m <span class="ot">-&gt;</span></span>
<span id="cb8-7"><a href="#cb8-7"></a>      <span class="dt">Field</span> <span class="op">&lt;$&gt;</span> parseUnique (stringKeyOf m) form</span>
<span id="cb8-8"><a href="#cb8-8"></a></span>
<span id="cb8-9"><a href="#cb8-9"></a><span class="co">-- Identity のインスタンスぐらい宣言しておいてよ</span></span>
<span id="cb8-10"><a href="#cb8-10"></a><span class="kw">instance</span> <span class="dt">FromHttpApiData</span> a <span class="ot">=&gt;</span> <span class="dt">FromHttpApiData</span> (<span class="dt">Identity</span> a) <span class="kw">where</span></span>
<span id="cb8-11"><a href="#cb8-11"></a>  parseUrlPiece <span class="ot">=</span> <span class="fu">fmap</span> <span class="fu">pure</span> <span class="op">.</span> parseUrlPiece</span></code></pre></div>
<p>これの欠点が1つ． <code>parseUnique</code> 関数の <code>Maybe a</code> 型に関する振る舞いだ． <code>Maybe a</code> 型なら該当の key が含まれなければ <code>Nothing</code> で key があれば <code>Just v</code> になって欲しい． しかし実際はこうだ：</p>
<div class="sourceCode" id="cb9"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span id="cb9-1"><a href="#cb9-1"></a><span class="op">&gt;&gt;&gt;</span> parseUnique <span class="st">&quot;age&quot;</span> [(<span class="st">&quot;age&quot;</span>, <span class="st">&quot;Just 25&quot;</span>)]<span class="ot"> ::</span> <span class="dt">Either</span> <span class="dt">Text</span> (<span class="dt">Maybe</span> <span class="dt">Int</span>)</span>
<span id="cb9-2"><a href="#cb9-2"></a><span class="dt">Right</span> (<span class="dt">Just</span> <span class="dv">25</span>)</span></code></pre></div>
<p>現実のリクエストが <code>&quot;Just hoge&quot;</code> なんて送ってくるわけが無い！ しょうがないので自作した：</p>
<div class="sourceCode" id="cb10"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span id="cb10-1"><a href="#cb10-1"></a><span class="kw">class</span> <span class="dt">FromFormData</span> a <span class="kw">where</span></span>
<span id="cb10-2"><a href="#cb10-2"></a><span class="ot">  parseUnique&#39; ::</span> <span class="dt">Text</span> <span class="ot">-&gt;</span> <span class="dt">Form</span> <span class="ot">-&gt;</span> <span class="dt">Either</span> <span class="dt">Text</span> a</span>
<span id="cb10-3"><a href="#cb10-3"></a></span>
<span id="cb10-4"><a href="#cb10-4"></a><span class="kw">instance</span> <span class="dt">FromFormData</span> <span class="dt">Int</span>   <span class="kw">where</span> parseUnique&#39; <span class="ot">=</span> parseUnique</span>
<span id="cb10-5"><a href="#cb10-5"></a><span class="kw">instance</span> <span class="dt">FromFormData</span> <span class="dt">Float</span> <span class="kw">where</span> parseUnique&#39; <span class="ot">=</span> parseUnique</span>
<span id="cb10-6"><a href="#cb10-6"></a><span class="kw">instance</span> <span class="dt">FromFormData</span> <span class="dt">Bool</span>  <span class="kw">where</span> parseUnique&#39; <span class="ot">=</span> parseUnique</span>
<span id="cb10-7"><a href="#cb10-7"></a><span class="kw">instance</span> <span class="dt">FromFormData</span> <span class="dt">Char</span>  <span class="kw">where</span> parseUnique&#39; <span class="ot">=</span> parseUnique</span>
<span id="cb10-8"><a href="#cb10-8"></a><span class="kw">instance</span> <span class="dt">FromFormData</span> <span class="dt">Text</span>  <span class="kw">where</span> parseUnique&#39; <span class="ot">=</span> parseUnique</span>
<span id="cb10-9"><a href="#cb10-9"></a></span>
<span id="cb10-10"><a href="#cb10-10"></a><span class="kw">instance</span> <span class="dt">FromHttpApiData</span> a <span class="ot">=&gt;</span> <span class="dt">FromFormData</span> (<span class="dt">Maybe</span> a) <span class="kw">where</span></span>
<span id="cb10-11"><a href="#cb10-11"></a>  parseUnique&#39; key form <span class="ot">=</span> <span class="kw">do</span></span>
<span id="cb10-12"><a href="#cb10-12"></a>    mv <span class="ot">&lt;-</span> lookupMaybe key form</span>
<span id="cb10-13"><a href="#cb10-13"></a>    <span class="kw">case</span> mv <span class="kw">of</span></span>
<span id="cb10-14"><a href="#cb10-14"></a>      <span class="dt">Just</span> v  <span class="ot">-&gt;</span> <span class="dt">Just</span> <span class="op">&lt;$&gt;</span> parseQueryParam v</span>
<span id="cb10-15"><a href="#cb10-15"></a>      <span class="dt">Nothing</span> <span class="ot">-&gt;</span> <span class="fu">pure</span> <span class="dt">Nothing</span></span></code></pre></div>
<p>で，<code>parseUnique</code> の代わりに <code>parseUnique&#39;</code> を使うように <code>FromForm</code> 型クラスのインスタンスを書き換えるだけだ． これは汎用的なので<a href="https://github.com/matsubara0507/extensible-ext/tree/master/extensible-http-api-data">別のリポジトリに切り分けた</a>．</p>
<h2 id="おしまい">おしまい</h2>
<p><a href="https://github.com/matsubara0507/slackell/tree/master/example">サンプルコード</a>を作ってスラッシュコマンドのデバッグをしたが，間にちゃんとリクエスト・レスポンスをロギングする仕組みを省いたせいで超大変だった笑．</p>
  </div>]]></summary>
</entry>
<entry>
    <title>Haskell Servant に GitHub Apps による認証を追加する</title>
    <link href="https://matsubara0507.github.io/posts/2020-04-06-servant-auth-with-github-apps.html" />
    <id>https://matsubara0507.github.io/posts/2020-04-06-servant-auth-with-github-apps.html</id>
    <published>2020-04-06T00:00:00Z</published>
    <updated>2020-04-06T00:00:00Z</updated>
    <summary type="html"><![CDATA[<div class="post-content" itemprop="articleBody">
    <p>時々みる「GitHubでログイン」っぽいのを Servant 製サンプルアプリケーションに実装します．</p>
<p>サンプルアプリケーションは2年前に書いた「<a href="/posts/2017-09-17-create-haskell-and-elm.html">Haskell × Elm のサンプルアプリケーションを書いてみた</a>」という記事のものを，最近の GHC や Elm でリファクタリングして使います． これは簡単な ToDo アプリケーションです：</p>
<p><img src="/assets/create-haskell-and-elm/sample.jpg"></img></p>
<p>最終的な実装 PR は<a href="https://github.com/matsubara0507/haskell-and-elm/pull/2">これ</a>．</p>
<h2 id="github-apps-による認証">GitHub Apps による認証</h2>
<p><a href="https://developer.github.com/apps/building-oauth-apps/authorizing-oauth-apps">公式ドキュメント</a>より</p>
<ol type="1">
<li>GitHub で Apps を登録する
<ul>
<li>Client ID・Client Secret を取得</li>
<li>callback URL を設定</li>
</ul></li>
<li>ログインする際に <code>https://github.com/login/oauth/authorize?cleint_id=[cleint_id]</code> へリダイレクトさせる
<ul>
<li>(1)の App の使用を許可するかという画面へ飛ぶ</li>
</ul></li>
<li>許可すると(1)で設定した callback エンドポイントが叩かれる
<ul>
<li>code というリクエストパラメータがついてくる</li>
</ul></li>
<li>Client ID・Client Secret と(3)の code を使うことで bearer token が手に入る
<ul>
<li>このトークンを利用することで GitHub ユーザーの情報を取得したりできる</li>
</ul></li>
<li>(4)を利用して取得した GitHub アカウント名などを Cookie に積んでおく</li>
</ol>
<p>あとは (5) の Cookie の有無によってログイン済みかどうかを判断するだけ（まぁこれは GitHub App とか関係ないよくあるやり方）． つまり問題は Servant でどうやってログイン情報などを Cookie に載せるかということだ．</p>
<h2 id="servant-で認証機能">Servant で認証機能</h2>
<p>を作るには <a href="https://hackage.haskell.org/package/servant-auth-server">servant-auth-server</a> という Servant 公式のパッケージを使えば良いようだ． 詳しくは以下の公式ドキュメントを読むと良い：</p>
<ul>
<li><a href="https://docs.servant.dev/en/stable/tutorial/Authentication.html">Authentication in Servant — Servant documentation</a></li>
</ul>
<p>servant-auth-server を利用することで，JWT エンコードした認証情報を Cookie として保存したり，その Cookie の有無によって認証済みかどうかチェックしたりなどができる． 公式ドキュメント以外に特に利用の仕方を解説した記事とか見当たらなくて，結局実装コード読んだり，servant-auth-server パッケージを使ってるリポジトリを GitHub で検索したりして手探りで実装していった．</p>
<h3 id="api-の型">API の型</h3>
<p>元々はこんな感じ：</p>
<div class="sourceCode" id="cb1"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span id="cb1-1"><a href="#cb1-1"></a><span class="kw">import</span> <span class="kw">qualified</span> <span class="dt">Text.Blaze.Html5</span> <span class="kw">as</span> <span class="dt">H</span></span>
<span id="cb1-2"><a href="#cb1-2"></a><span class="kw">import</span>           <span class="dt">Servant.HTML.Blaze</span> (<span class="dt">HTML</span>)</span>
<span id="cb1-3"><a href="#cb1-3"></a></span>
<span id="cb1-4"><a href="#cb1-4"></a><span class="kw">type</span> <span class="dt">API</span> <span class="ot">=</span> <span class="dt">Get</span> &#39;[<span class="dt">HTML</span>] <span class="dt">H.Html</span></span>
<span id="cb1-5"><a href="#cb1-5"></a>      <span class="op">:&lt;|&gt;</span> <span class="st">&quot;static&quot;</span> <span class="op">:&gt;</span> <span class="dt">Raw</span></span>
<span id="cb1-6"><a href="#cb1-6"></a>      <span class="op">:&lt;|&gt;</span> <span class="st">&quot;api&quot;</span> <span class="op">:&gt;</span> <span class="dt">Todo.CRUD</span></span></code></pre></div>
<p>これに認証機能を追加する：</p>
<div class="sourceCode" id="cb2"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span id="cb2-1"><a href="#cb2-1"></a><span class="kw">type</span> <span class="dt">API</span> <span class="ot">=</span> (<span class="dt">Auth</span> &#39;[<span class="dt">Cookie</span>] <span class="dt">GitHub.User</span> <span class="op">:&gt;</span> <span class="dt">Protected</span>) <span class="op">:&lt;|&gt;</span> <span class="dt">Unprotected</span></span>
<span id="cb2-2"><a href="#cb2-2"></a></span>
<span id="cb2-3"><a href="#cb2-3"></a><span class="kw">type</span> <span class="dt">Protected</span></span>
<span id="cb2-4"><a href="#cb2-4"></a>      <span class="ot">=</span> <span class="st">&quot;api&quot;</span> <span class="op">:&gt;</span> <span class="dt">Todo.CRUD</span></span>
<span id="cb2-5"><a href="#cb2-5"></a></span>
<span id="cb2-6"><a href="#cb2-6"></a><span class="kw">type</span> <span class="dt">Unprotected</span></span>
<span id="cb2-7"><a href="#cb2-7"></a>      <span class="ot">=</span> <span class="dt">Get</span> &#39;[<span class="dt">HTML</span>] <span class="dt">H.Html</span></span>
<span id="cb2-8"><a href="#cb2-8"></a>   <span class="op">:&lt;|&gt;</span> <span class="st">&quot;static&quot;</span>   <span class="op">:&gt;</span> <span class="dt">Raw</span></span>
<span id="cb2-9"><a href="#cb2-9"></a>   <span class="op">:&lt;|&gt;</span> <span class="st">&quot;login&quot;</span>    <span class="op">:&gt;</span> <span class="dt">GetRedirected</span> &#39;[]</span>
<span id="cb2-10"><a href="#cb2-10"></a>   <span class="op">:&lt;|&gt;</span> <span class="st">&quot;callback&quot;</span> <span class="op">:&gt;</span> <span class="dt">QueryParam</span> <span class="st">&quot;code&quot;</span> <span class="dt">String</span> <span class="op">:&gt;</span> <span class="dt">GetRedirected</span> <span class="dt">JWTCookieHeaders</span></span>
<span id="cb2-11"><a href="#cb2-11"></a></span>
<span id="cb2-12"><a href="#cb2-12"></a><span class="kw">type</span> <span class="dt">GetRedirected</span> headers <span class="ot">=</span></span>
<span id="cb2-13"><a href="#cb2-13"></a>  <span class="dt">Verb</span> <span class="dt">&#39;GET</span> <span class="dv">308</span> &#39;[<span class="dt">HTML</span>] (<span class="dt">Headers</span> (<span class="dt">Header</span> <span class="st">&quot;Location&quot;</span> <span class="dt">String</span> &#39;<span class="op">:</span> headers) <span class="dt">NoContent</span>)</span>
<span id="cb2-14"><a href="#cb2-14"></a></span>
<span id="cb2-15"><a href="#cb2-15"></a><span class="kw">type</span> <span class="dt">JWTCookieHeaders</span> <span class="ot">=</span></span>
<span id="cb2-16"><a href="#cb2-16"></a>  &#39;[ <span class="dt">Header</span> <span class="st">&quot;Set-Cookie&quot;</span> <span class="dt">SetCookie</span>, <span class="dt">Header</span> <span class="st">&quot;Set-Cookie&quot;</span> <span class="dt">SetCookie</span> ]</span></code></pre></div>
<p><code>Protected</code> と <code>Unprotected</code> 型のように，認証済みの場合だけ利用可能なエンドポイントとそうでないエンドポイントを分けると良いようだ． 今回は <code>/index.html</code> を認証の外にしたが，別に中にしてもいいと思う． 認証側に <code>Auth &#39;[Cookie] a</code> を追加することで JWT エンコードされた Cookie の有無で認証済みかを判断し，Cookie があればそれを <code>a</code> 型へデコードしてくれる． Cookie の付与自体は callback エンドポイントで行う． ちなみに，<code>Set-Cookie</code> が2つあるのは，1つを CRSF Protection に使うためだ（CRSF Protection については後述）．</p>
<h3 id="cookie-と-jwt-の設定">Cookie と JWT の設定</h3>
<p>また，Cookie や JWT の設定は Servant の Context 機能で渡す必要がある：</p>
<div class="sourceCode" id="cb3"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span id="cb3-1"><a href="#cb3-1"></a><span class="ot">main ::</span> <span class="dt">IO</span> ()</span>
<span id="cb3-2"><a href="#cb3-2"></a>main <span class="ot">=</span> <span class="kw">do</span></span>
<span id="cb3-3"><a href="#cb3-3"></a>  todoDB       <span class="ot">&lt;-</span> STM.atomically <span class="op">$</span> STM.newTVar initTodoDB</span>
<span id="cb3-4"><a href="#cb3-4"></a>  clientId     <span class="ot">&lt;-</span> getEnv <span class="st">&quot;GITHUB_CLIENT_ID&quot;</span></span>
<span id="cb3-5"><a href="#cb3-5"></a>  clientSecret <span class="ot">&lt;-</span> getEnv <span class="st">&quot;GITHUB_CLIENT_SECRET&quot;</span></span>
<span id="cb3-6"><a href="#cb3-6"></a>  jwtSettings  <span class="ot">&lt;-</span> defaultJWTSettings <span class="op">&lt;$&gt;</span> generateKey</span>
<span id="cb3-7"><a href="#cb3-7"></a>  <span class="kw">let</span> cfg   <span class="ot">=</span> cookieSettings <span class="op">:.</span> jwtSettings <span class="op">:.</span> <span class="dt">EmptyContext</span></span>
<span id="cb3-8"><a href="#cb3-8"></a>      oauth <span class="ot">=</span> <span class="op">#</span>client_id <span class="op">@=</span> clientId <span class="op">&lt;:</span> <span class="op">#</span>client_secret <span class="op">@=</span> clientSecret <span class="op">&lt;:</span> nil</span>
<span id="cb3-9"><a href="#cb3-9"></a>      env   <span class="ot">=</span> <span class="op">#</span>index  <span class="op">@=</span> indexHtml</span>
<span id="cb3-10"><a href="#cb3-10"></a>           <span class="op">&lt;:</span> <span class="op">#</span>cookie <span class="op">@=</span> cookieSettings</span>
<span id="cb3-11"><a href="#cb3-11"></a>           <span class="op">&lt;:</span> <span class="op">#</span>jwt    <span class="op">@=</span> jwtSettings</span>
<span id="cb3-12"><a href="#cb3-12"></a>           <span class="op">&lt;:</span> <span class="op">#</span>todos  <span class="op">@=</span> todoDB</span>
<span id="cb3-13"><a href="#cb3-13"></a>           <span class="op">&lt;:</span> <span class="op">#</span>oauth  <span class="op">@=</span> oauth</span>
<span id="cb3-14"><a href="#cb3-14"></a>           <span class="op">&lt;:</span> nil</span>
<span id="cb3-15"><a href="#cb3-15"></a>  Warp.run <span class="dv">8080</span> <span class="op">$</span> serveWithContext api cfg (server env)</span>
<span id="cb3-16"><a href="#cb3-16"></a>  <span class="kw">where</span></span>
<span id="cb3-17"><a href="#cb3-17"></a>  initTodoDB <span class="ot">=</span> (<span class="fu">length</span> initTodos, IntMap.fromList initTodos)</span>
<span id="cb3-18"><a href="#cb3-18"></a>  cookieSettings <span class="ot">=</span> defaultCookieSettings</span>
<span id="cb3-19"><a href="#cb3-19"></a>    { cookieIsSecure <span class="ot">=</span> <span class="dt">NotSecure</span></span>
<span id="cb3-20"><a href="#cb3-20"></a>    , cookieMaxAge <span class="ot">=</span> <span class="dt">Just</span> <span class="op">$</span> Time.secondsToDiffTime (<span class="dv">3</span> <span class="op">*</span> <span class="dv">60</span>)</span>
<span id="cb3-21"><a href="#cb3-21"></a>    , cookieXsrfSetting <span class="ot">=</span> <span class="dt">Nothing</span></span>
<span id="cb3-22"><a href="#cb3-22"></a>    }</span>
<span id="cb3-23"><a href="#cb3-23"></a></span>
<span id="cb3-24"><a href="#cb3-24"></a><span class="ot">api ::</span> <span class="dt">Proxy</span> (<span class="dt">API</span> &#39;[<span class="dt">Cookie</span>])</span>
<span id="cb3-25"><a href="#cb3-25"></a>api <span class="ot">=</span> <span class="dt">Proxy</span></span></code></pre></div>
<p>それぞれの設定は servant-auth-server の <code>defaultCookieSettings</code> と <code>defaultJWTSettings</code> を利用すれば良い．</p>
<p>今回は localhost で利用するようにしてるので <code>cookieIsSecure</code> に <code>NotSecure</code> を設定してる（これで HttpOnly になる）が，普通は <code>Secure</code> のままで良い． <code>cookieXsrfSetting</code> は前述した CSRF Protection の設定で，デフォルトではオンになっている． オンの場合は Cookie に設定された CSRF Protection 用のトークンをヘッダーに設定してリクエストしないと，Protected な API は弾かれるようになる（Cookie 名は cookieXsrfSetting で設定する）． ちなみに，GET リクエストは CSRF Protection しないという設定も可能だ．</p>
<p>JWT の設定にはエンコードするための鍵を渡す必要がある． 今回は servant-auth-server の <code>generateKey</code> 関数を利用している． これは（少なくともバージョン0.4.5.1では）256長の対称鍵（HS256）をランダムに生成してくれる． ランダムに生成したものを利用してるので，起動するたびに Cookie の情報が変わってしまう点に注意． もし，JWTのアルゴリズムや鍵を別のものにしたい場合は <a href="http://hackage.haskell.org/package/jose">jose パッケージ</a> を利用すれば良いはずだ．</p>
<h1 id="section"></h1>
<p>余談だが，Cookie にある JWT のデコードは Servant Context の設定を利用するが，Cookie に積むときはエンドポイントの最後でエンコードをするので，同一の設定をエンドポイントまで橋渡しをしないといけない（ぼくは他方がデフォルトのままになってるのに気付かず3時間溶かした…）．</p>
<h3 id="protected-なエンドポイント">Protected なエンドポイント</h3>
<p>こんな感じ：</p>
<div class="sourceCode" id="cb4"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span id="cb4-1"><a href="#cb4-1"></a><span class="ot">protected ::</span> <span class="dt">Env</span> <span class="ot">-&gt;</span> <span class="dt">AuthResult</span> <span class="dt">GitHub.User</span> <span class="ot">-&gt;</span> <span class="dt">Server</span> <span class="dt">Protected</span></span>
<span id="cb4-2"><a href="#cb4-2"></a>protected env (<span class="dt">Authenticated</span> _) <span class="ot">=</span> todoAPI (env <span class="op">^.</span> <span class="op">#</span>todos)</span>
<span id="cb4-3"><a href="#cb4-3"></a>protected _ _                   <span class="ot">=</span> throwAll err401</span></code></pre></div>
<p>今回はアカウントによってレスポンスの出しわけをしてないので，<code>Authenticated</code> かどうかだけをみている．</p>
<h3 id="ログインエンドポイント">ログインエンドポイント</h3>
<p>ログインエンドポイントはただ GitHub の該当 URL へリダイレクトするだけ：</p>
<div class="sourceCode" id="cb5"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span id="cb5-1"><a href="#cb5-1"></a><span class="ot">unprotected ::</span> <span class="dt">Env</span> <span class="ot">-&gt;</span> <span class="dt">Server</span> <span class="dt">Unprotected</span></span>
<span id="cb5-2"><a href="#cb5-2"></a>unprotected env <span class="ot">=</span></span>
<span id="cb5-3"><a href="#cb5-3"></a>  <span class="fu">pure</span> (env <span class="op">^.</span> <span class="op">#</span>index) <span class="op">:&lt;|&gt;</span> serveDirectoryFileServer <span class="st">&quot;static&quot;</span> <span class="op">:&lt;|&gt;</span> login <span class="op">:&lt;|&gt;</span> callback</span>
<span id="cb5-4"><a href="#cb5-4"></a>  <span class="kw">where</span></span>
<span id="cb5-5"><a href="#cb5-5"></a>    login <span class="ot">=</span> <span class="fu">pure</span> <span class="op">$</span> addHeader (GitHub.authorizeUrl <span class="op">$</span> env <span class="op">^.</span> <span class="op">#</span>oauth) <span class="dt">NoContent</span></span>
<span id="cb5-6"><a href="#cb5-6"></a>    callback <span class="ot">=</span> <span class="fu">undefined</span></span>
<span id="cb5-7"><a href="#cb5-7"></a></span>
<span id="cb5-8"><a href="#cb5-8"></a><span class="co">-- GitHub module</span></span>
<span id="cb5-9"><a href="#cb5-9"></a><span class="ot">authorizeUrl ::</span> <span class="dt">OAuthSettings</span> <span class="ot">-&gt;</span> <span class="dt">String</span></span></code></pre></div>
<p><code>OAuthSettings</code> は GitHub App の Client ID と Client Secret が保存されている．</p>
<h3 id="callback-エンドポイント">callback エンドポイント</h3>
<p>最後は callback で，JWT エンコードした認証情報を Cookie に保存すれば良い：</p>
<div class="sourceCode" id="cb6"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span id="cb6-1"><a href="#cb6-1"></a><span class="ot">unprotected ::</span> <span class="dt">Env</span> <span class="ot">-&gt;</span> <span class="dt">Server</span> <span class="dt">Unprotected</span></span>
<span id="cb6-2"><a href="#cb6-2"></a>unprotected env <span class="ot">=</span> <span class="op">...</span></span>
<span id="cb6-3"><a href="#cb6-3"></a>  <span class="kw">where</span></span>
<span id="cb6-4"><a href="#cb6-4"></a>    login <span class="ot">=</span> <span class="op">...</span></span>
<span id="cb6-5"><a href="#cb6-5"></a>    callback (<span class="dt">Just</span> code) <span class="ot">=</span> GitHub.fetchUser (env <span class="op">^.</span> <span class="op">#</span>oauth) code <span class="op">&gt;&gt;=</span> \<span class="kw">case</span></span>
<span id="cb6-6"><a href="#cb6-6"></a>      <span class="dt">Nothing</span>   <span class="ot">-&gt;</span> throwError err401</span>
<span id="cb6-7"><a href="#cb6-7"></a>      <span class="dt">Just</span> user <span class="ot">-&gt;</span> liftIO (acceptLogin (env <span class="op">^.</span> <span class="op">#</span>cookie) (env <span class="op">^.</span> <span class="op">#</span>jwt) user) <span class="op">&gt;&gt;=</span> \<span class="kw">case</span></span>
<span id="cb6-8"><a href="#cb6-8"></a>        <span class="dt">Nothing</span>           <span class="ot">-&gt;</span> throwError err401</span>
<span id="cb6-9"><a href="#cb6-9"></a>        <span class="dt">Just</span> applyCookies <span class="ot">-&gt;</span> <span class="fu">pure</span> <span class="op">$</span> addHeader <span class="st">&quot;/&quot;</span> (applyCookies <span class="dt">NoContent</span>)</span>
<span id="cb6-10"><a href="#cb6-10"></a></span>
<span id="cb6-11"><a href="#cb6-11"></a><span class="co">-- GitHub module</span></span>
<span id="cb6-12"><a href="#cb6-12"></a><span class="ot">fetchUser ::</span> <span class="dt">MonadIO</span> m <span class="ot">=&gt;</span> <span class="dt">OAuthSettings</span> <span class="ot">-&gt;</span> <span class="dt">String</span> <span class="ot">-&gt;</span> m (<span class="dt">Maybe</span> <span class="dt">User</span>)</span></code></pre></div>
<p>認証情報には GitHub のユーザー情報を利用しており，callback で渡された <code>code</code> パラメーターを利用して（取得したトークンを利用して）取得する． 認証情報を JWT エンコードして Cookie に埋め込む処理は servant-auth-servar パッケージの <code>acceptLogin</code> 関数を使うだけで良い．</p>
<h1 id="section-1"></h1>
<p>これで API 側の準備はできた． あとはフロントを少しいじって出来上がり．</p>
<h2 id="フロントにログインボタンを作る">フロントにログインボタンを作る</h2>
<p>認証状態を使ってイロイロと出し分けたほうがいいのだが，めんどくさいのでただ <code>/login</code> へのリンクをおいた：</p>
<div class="sourceCode" id="cb7"><pre class="sourceCode elm"><code class="sourceCode elm"><span id="cb7-1"><a href="#cb7-1"></a><span class="fu">view</span> : <span class="dt">Model</span> <span class="op">-&gt;</span> <span class="dt">Html</span> <span class="dt">Msg</span></span>
<span id="cb7-2"><a href="#cb7-2"></a><span class="fu">view</span> <span class="fu">model</span> <span class="op">=</span></span>
<span id="cb7-3"><a href="#cb7-3"></a>    <span class="fu">div</span> [ <span class="fu">class</span> <span class="st">&quot;my-3 mx-auto col-10&quot;</span> ]</span>
<span id="cb7-4"><a href="#cb7-4"></a>        [ <span class="fu">h1</span> [] [ <span class="fu">text</span> <span class="st">&quot;ToDo List !!&quot;</span><span class="op">,</span> <span class="fu">loginButton</span> ]</span>
<span id="cb7-5"><a href="#cb7-5"></a>        <span class="op">,</span> <span class="fu">viewToDos</span> <span class="fu">model</span></span>
<span id="cb7-6"><a href="#cb7-6"></a>        <span class="op">,</span> <span class="fu">viewPost</span> <span class="fu">model</span></span>
<span id="cb7-7"><a href="#cb7-7"></a>        ]</span>
<span id="cb7-8"><a href="#cb7-8"></a></span>
<span id="cb7-9"><a href="#cb7-9"></a></span>
<span id="cb7-10"><a href="#cb7-10"></a><span class="fu">loginButton</span> : <span class="dt">Html</span> <span class="fu">msg</span></span>
<span id="cb7-11"><a href="#cb7-11"></a><span class="fu">loginButton</span> <span class="op">=</span></span>
<span id="cb7-12"><a href="#cb7-12"></a>    <span class="fu">button</span> [ <span class="fu">class</span> <span class="st">&quot;btn btn-sm btn-outline float-right mt-2&quot;</span><span class="op">,</span> <span class="fu">type_</span> <span class="st">&quot;button&quot;</span> ]</span>
<span id="cb7-13"><a href="#cb7-13"></a>        [ <span class="fu">a</span></span>
<span id="cb7-14"><a href="#cb7-14"></a>            [ <span class="fu">href</span> <span class="st">&quot;/login&quot;</span></span>
<span id="cb7-15"><a href="#cb7-15"></a>            <span class="op">,</span> <span class="fu">style</span> <span class="st">&quot;color&quot;</span> <span class="st">&quot;inherit&quot;</span></span>
<span id="cb7-16"><a href="#cb7-16"></a>            <span class="op">,</span> <span class="fu">style</span> <span class="st">&quot;text-decoration-line&quot;</span> <span class="st">&quot;none&quot;</span></span>
<span id="cb7-17"><a href="#cb7-17"></a>            ]</span>
<span id="cb7-18"><a href="#cb7-18"></a>            [ <span class="fu">text</span> <span class="st">&quot;Login by GitHub&quot;</span> ]</span>
<span id="cb7-19"><a href="#cb7-19"></a>        ]</span></code></pre></div>
<p>こんな感じ：</p>
<p><img src="/assets/servant-auth-with-github-apps/sample.jpg"></img></p>
<h2 id="おまけreaderモナド">おまけ：Readerモナド</h2>
<p><code>Env</code> は Cookie や JWT の設定を保持しているグローバル環境型だ． こういうのは引数としてリレーしても良いが，<code>Reader</code> モナド使って渡すのがよくある手法だ． Servant の場合は <a href="https://hackage.haskell.org/package/servant-server-0.17/docs/Servant-Server.html#v:hoistServerWithContext"><code>hoistServerWithContext</code></a> を使うことで <code>Handler</code> の代わりに別のモナドを利用できる：</p>
<div class="sourceCode" id="cb8"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span id="cb8-1"><a href="#cb8-1"></a><span class="ot">main ::</span> <span class="dt">IO</span> ()</span>
<span id="cb8-2"><a href="#cb8-2"></a>main <span class="ot">=</span> <span class="kw">do</span></span>
<span id="cb8-3"><a href="#cb8-3"></a>  <span class="op">...</span></span>
<span id="cb8-4"><a href="#cb8-4"></a>  Warp.run <span class="dv">8080</span> <span class="op">$</span></span>
<span id="cb8-5"><a href="#cb8-5"></a>    serveWithContext api cfg (hoistServerWithContext api ctx (convert env) server)</span>
<span id="cb8-6"><a href="#cb8-6"></a></span>
<span id="cb8-7"><a href="#cb8-7"></a><span class="ot">ctx ::</span> <span class="dt">Proxy</span> &#39;[ <span class="dt">CookieSettings</span>, <span class="dt">JWTSettings</span> ]</span>
<span id="cb8-8"><a href="#cb8-8"></a>ctx <span class="ot">=</span> <span class="dt">Proxy</span></span>
<span id="cb8-9"><a href="#cb8-9"></a></span>
<span id="cb8-10"><a href="#cb8-10"></a><span class="kw">type</span> <span class="dt">App</span> <span class="ot">=</span> <span class="dt">ReaderT</span> <span class="dt">Env</span> <span class="dt">Handler</span></span>
<span id="cb8-11"><a href="#cb8-11"></a></span>
<span id="cb8-12"><a href="#cb8-12"></a><span class="ot">convert ::</span> <span class="dt">Env</span> <span class="ot">-&gt;</span> <span class="dt">App</span> a <span class="ot">-&gt;</span> <span class="dt">Handler</span> a</span>
<span id="cb8-13"><a href="#cb8-13"></a>convert context app <span class="ot">=</span> runReaderT app context</span></code></pre></div>
<p>あとは <code>Env -&gt; Server api</code> みたいな型を <code>ServerT api App</code> としていくだけ．</p>
<h2 id="おしまい">おしまい</h2>
<p>意外とこういう組み合わせに言及した記事がなくて調べるの大変だった． あと一応，実アプリケーションで使うときはちゃんと安全性について別途調べてくださいね（責任は持ちません）．</p>
  </div>]]></summary>
</entry>
<entry>
    <title>git-plantation の依存パッケージのバージョンアゲアゲ with LTS-15</title>
    <link href="https://matsubara0507.github.io/posts/2020-04-01-update-dependencies-with-lts15.html" />
    <id>https://matsubara0507.github.io/posts/2020-04-01-update-dependencies-with-lts15.html</id>
    <published>2020-04-01T00:00:00Z</published>
    <updated>2020-04-01T00:00:00Z</updated>
    <summary type="html"><![CDATA[<div class="post-content" itemprop="articleBody">
    <p>自作している git-plantation という Haskell アプリケーションの依存パッケージのバージョンを、Stackage LTS-15 でビルドできるようにバージョンを色々とあげました． 本記事はそのメモ書きです（記事にするほどのことではないんだけど，思ったより色々したので忘れそうだから記事にした笑）．</p>
<p>ちなみに git-plantation については，<a href="https://www.slideshare.net/noob00/haskell-191796924">このスライド</a>を参照してください． いくつかのパッケージをフォークしたり，ラッパーパッケージを作ったり，そもそも自作したりしてるのでタイミングによっては LTS のメジャーバージョンを一つ上げるだけでも結構大変なのです．</p>
<h2 id="ハイライト">ハイライト</h2>
<p>ちなみに，元々は LTS 14 だった</p>
<ul>
<li>GHC のバージョンが 8.8.3 になる（影響はさほどない）</li>
<li>extensible を 0.8 にする</li>
<li>github を 0.25 にする</li>
<li>servant-elm を 0.7.1 にする（これもさほど影響はない）</li>
</ul>
<p><a href="https://github.com/matsubara0507/git-plantation/pull/58">最終的なPRはこれ</a>．</p>
<h2 id="extensible-0.8">extensible-0.8</h2>
<p>0.8 ではもともと deprecated になっていた関数や型がついに消えたので，利用しっぱなしだったコードがビルドできなくなった：</p>
<div class="sourceCode" id="cb1"><pre class="sourceCode sh"><code class="sourceCode bash"><span id="cb1-1"><a href="#cb1-1"></a> <span class="ex">/.../drone-1.0.1/src/Drone/Types</span>/Cron.hs:<span class="ex">25</span>:44: error:</span>
<span id="cb1-2"><a href="#cb1-2"></a>     <span class="ex">Not</span> in scope: type constructor or class ‘:*’</span>
<span id="cb1-3"><a href="#cb1-3"></a>     <span class="ex">Perhaps</span> you meant one of these:</span>
<span id="cb1-4"><a href="#cb1-4"></a>       ‘:<span class="kw">&amp;</span>’ <span class="kw">(</span><span class="ex">imported</span> from Data.Extensible<span class="kw">)</span>,</span>
<span id="cb1-5"><a href="#cb1-5"></a>       ‘:/’ <span class="kw">(</span><span class="ex">imported</span> from Data.Extensible<span class="kw">)</span></span>
<span id="cb1-6"><a href="#cb1-6"></a>    <span class="kw">|</span>                  </span>
<span id="cb1-7"><a href="#cb1-7"></a> <span class="ex">25</span> <span class="kw">|</span> <span class="bu">type</span> CronPatch = Nullable (Field Identity) <span class="bu">:</span>* CronPatchFields</span>
<span id="cb1-8"><a href="#cb1-8"></a>    <span class="kw">|</span>                                            ^^</span></code></pre></div>
<p>消えたのはこれら</p>
<ul>
<li><code>Associate k v xs</code> =&gt; <code>Lookup xs k v</code></li>
<li><code>h :* xs</code> =&gt; <code>xs :&amp; h</code></li>
<li><code>h :| xs</code> =&gt; <code>xs :/ h</code></li>
<li><code>AssocKey kv</code> =&gt; <code>KeyOf kv</code></li>
<li><code>AssocValue kv</code> =&gt; <code>TargetOf kv</code></li>
<li><code>ValueIs</code> =&gt; <code>TargetIs</code></li>
<li><code>KeyValue</code> =&gt; <code>KeyTargetAre</code></li>
<li><code>proxyAssocKey</code> =&gt; <code>proxyKeyOf</code></li>
<li><code>proxyAssocValue</code> =&gt; <code>proxyTargetOf</code></li>
<li><code>stringAssocKey</code> =&gt; <code>stringKeyOf</code></li>
<li><code>訊</code> =&gt; <code>xlb</code></li>
</ul>
<p>上3つは演算子の順番が変わってる点に注意． 他はただ名前を変えただけ（<code>Associate</code> の名前が変わったためかしら？）．</p>
<h2 id="github-0.25">github-0.25</h2>
<p>github パッケージは 0.24 でかなり大きなインターフェースの刷新をしており，その影響がデカかった． 今までは一つの API に対して最大3つの関数が用意されていた：</p>
<div class="sourceCode" id="cb2"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span id="cb2-1"><a href="#cb2-1"></a><span class="co">-- https://developer.github.com/v3/users/#get-a-single-user の関数</span></span>
<span id="cb2-2"><a href="#cb2-2"></a><span class="ot">userInfoFor ::</span> <span class="dt">Name</span> <span class="dt">User</span> <span class="ot">-&gt;</span> <span class="dt">IO</span> (<span class="dt">Either</span> <span class="dt">Error</span> <span class="dt">User</span>)</span>
<span id="cb2-3"><a href="#cb2-3"></a><span class="ot">userInfoFor&#39; ::</span> <span class="dt">Maybe</span> <span class="dt">Auth</span> <span class="ot">-&gt;</span> <span class="dt">Name</span> <span class="dt">User</span> <span class="ot">-&gt;</span> <span class="dt">IO</span> (<span class="dt">Either</span> <span class="dt">Error</span> <span class="dt">User</span>)</span>
<span id="cb2-4"><a href="#cb2-4"></a><span class="ot">userInfoForR ::</span> <span class="dt">Name</span> <span class="dt">User</span> <span class="ot">-&gt;</span> <span class="dt">Request</span> k <span class="dt">User</span></span></code></pre></div>
<p>ベースは <code>hogeR</code> 関数で，他はこの関数のラッパー関数だ． 0.24 からは <code>hogeR</code> 関数だけ残して他の関数は廃止し，<code>github</code> と <code>github&#39;</code> の2つの関数を用意した：</p>
<div class="sourceCode" id="cb3"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span id="cb3-1"><a href="#cb3-1"></a><span class="co">-- だいたいこういう対応</span></span>
<span id="cb3-2"><a href="#cb3-2"></a>userInfoFor name <span class="ot">=</span> github&#39; (userInfoForR name)</span>
<span id="cb3-3"><a href="#cb3-3"></a>userInfoFor&#39; (<span class="dt">Just</span> auth) name <span class="ot">=</span> github auth (userInfoForR name)</span></code></pre></div>
<p>また，github パッケージはフォークして足りない API 関数を足して利用していたため，それらの修正（というか <code>hogeR</code> 以外の削除）をする必要があった． 追加してたけどフォーク元に PR を投げてなかったのはこれらの関数（完全にメモ）：</p>
<ul>
<li><code>removeCollaborator</code> : リポジトリのコラボレーターの削除</li>
<li><code>teamInfoByName</code> : Organization のチームをチーム名から引く</li>
<li><code>addOrUpdateMembership</code> : Organization メンバーの権限の追加ないしは変更</li>
<li><code>removeMembership</code> : Organization メンバーの権限の削除</li>
</ul>
<h2 id="servant-elm-0.7.1">servant-elm-0.7.1</h2>
<p>ビルドが通らないことはないが生成ファイルが変わったので，念のため差分をチェックした． 少なくとも僕の生成コードに影響があったのは<a href="https://github.com/haskell-servant/servant-elm/pull/59">この PR</a>：</p>
<blockquote>
<p>Using the appropriate toString functions for different types</p>
</blockquote>
<p>要するに，デフォルトで定義しているデータ型以外の型で文字列からJSONデコードするときの振る舞いを自分で定義したいって感じだと思う． たぶん．</p>
<h1 id="section"></h1>
<p>servant-elm は elmap.hs というのでラップしてるのでそっちのアップデートも行った． こっちには生成コードのテストも追加してあるので<a href="https://github.com/matsubara0507/elmap.hs/pull/1/files#diff-3e612857d13f467c108121bba96a6232">差分がわかりやすい</a>．</p>
<h2 id="おしまい">おしまい</h2>
<p>他にも CI/CD を GitHub Actions にしたりした．</p>
  </div>]]></summary>
</entry>
<entry>
    <title>Elm + GitHub OAuth 2.0 (Firebase) のサンプルプログラムを書いてみた</title>
    <link href="https://matsubara0507.github.io/posts/2020-02-10-elm-github-oauth2-sample.html" />
    <id>https://matsubara0507.github.io/posts/2020-02-10-elm-github-oauth2-sample.html</id>
    <published>2020-02-10T00:00:00Z</published>
    <updated>2020-02-10T00:00:00Z</updated>
    <summary type="html"><![CDATA[<div class="post-content" itemprop="articleBody">
    <p>とあるアプリケーションに Elm + GitHub OAuth 2.0 を使ってみたいなと思い，その練習用のアプリケーションを作ってみました：</p>
<ul>
<li><a href="https://github.com/matsubara0507/elm-github-oauth2-sample">matsubara0507/elm-github-oauth2-sample - GitHub</a></li>
</ul>
<p>サンプルのために認可用のサーバーを用意するのがめんどくさかったので，近年話題の Firebase の Authorization 機能を利用することにしました．</p>
<h2 id="作ったアプリケーション">作ったアプリケーション</h2>
<p>作成した SPA は <a href="https://matsubara0507.github.io/elm-github-oauth2-sample">GitHub Pages</a> に置いてある． ログインっぽいボタンを押すと Firebase Authorization を介して，GitHub OAuth 2.0 での認可がされる． もちろん，もともと試したかったことはここまでだが，認可しておしまいだと味気がない． なので：</p>
<ol type="1">
<li>認可時に GitHub OAuth トークンを取得</li>
<li>トークンを使ってログインしたユーザーの公開リポジトリの情報を取得</li>
<li>リポジトリのスター数を使ってユーザーのステータスをリッチに描写する</li>
</ol>
<p>色々試して最終的にこんな感じ：</p>
<p><img src="/assets/elm-github-oauth2-sample/page.jpg"></img></p>
<p>ちょっとやりすぎた．</p>
<h2 id="実装する">実装する</h2>
<p>やったことは3ステップ</p>
<ol type="1">
<li>Elm と Firebase を繋ぐ</li>
<li>リポジトリを取得（GraphQL）</li>
<li>円グラフを描写</li>
</ol>
<p>2と3は完全におまけですね．</p>
<h3 id="elm-と-firebase">Elm と Firebase</h3>
<p>まずは Firebase を準備する． <a href="https://firebase.google.com/docs/auth/web/github-auth?hl=ja">公式サイトの手順</a>がしっかりしてるので，それに習って準備する（GitHub App の設定とか）． プロバイダ（今回は GitHub）の設定と JavaScript のアプリの設定をすると「コレをコピペしてね」っていう設定とかが出てくる． コレを index.html と index.js に書いておく：</p>
<div class="sourceCode" id="cb1"><pre class="sourceCode html"><code class="sourceCode html"><span id="cb1-1"><a href="#cb1-1"></a><span class="co">&lt;!-- index.html --&gt;</span></span>
<span id="cb1-2"><a href="#cb1-2"></a><span class="dt">&lt;!doctype </span>html<span class="dt">&gt;</span></span>
<span id="cb1-3"><a href="#cb1-3"></a><span class="kw">&lt;html&gt;</span></span>
<span id="cb1-4"><a href="#cb1-4"></a><span class="kw">&lt;head&gt;</span></span>
<span id="cb1-5"><a href="#cb1-5"></a>  <span class="kw">&lt;meta</span><span class="ot"> http-equiv=</span><span class="st">&quot;content-type&quot;</span><span class="ot"> charset=</span><span class="st">&quot;utf-8&quot;</span><span class="kw">&gt;</span></span>
<span id="cb1-6"><a href="#cb1-6"></a>  <span class="kw">&lt;link</span><span class="ot"> rel=</span><span class="st">&quot;stylesheet&quot;</span><span class="ot"> href=</span><span class="st">&quot;https://unpkg.com/@primer/css@14.2.0/dist/primer.css&quot;</span><span class="kw">&gt;</span></span>
<span id="cb1-7"><a href="#cb1-7"></a><span class="kw">&lt;/head&gt;</span></span>
<span id="cb1-8"><a href="#cb1-8"></a><span class="kw">&lt;body&gt;</span></span>
<span id="cb1-9"><a href="#cb1-9"></a>  <span class="kw">&lt;div</span><span class="ot"> id=</span><span class="st">&quot;elm-node&quot;</span><span class="kw">&gt;&lt;/div&gt;</span></span>
<span id="cb1-10"><a href="#cb1-10"></a>  <span class="co">&lt;!-- firebase-app と firebase-auth が必要 --&gt;</span></span>
<span id="cb1-11"><a href="#cb1-11"></a>  <span class="kw">&lt;script</span><span class="ot"> src=</span><span class="st">&quot;https://www.gstatic.com/firebasejs/7.8.1/firebase-app.js&quot;</span><span class="kw">&gt;&lt;/script&gt;</span></span>
<span id="cb1-12"><a href="#cb1-12"></a>  <span class="kw">&lt;script</span><span class="ot"> src=</span><span class="st">&quot;https://www.gstatic.com/firebasejs/7.8.1/firebase-auth.js&quot;</span><span class="kw">&gt;&lt;/script&gt;</span></span>
<span id="cb1-13"><a href="#cb1-13"></a>  <span class="co">&lt;!-- static/main.js は Elm からあとで生成する --&gt;</span></span>
<span id="cb1-14"><a href="#cb1-14"></a>  <span class="kw">&lt;script</span><span class="ot"> src=</span><span class="st">&quot;static/main.js&quot;</span><span class="kw">&gt;&lt;/script&gt;</span></span>
<span id="cb1-15"><a href="#cb1-15"></a>  <span class="co">&lt;!-- static/index.js は下記 --&gt;</span></span>
<span id="cb1-16"><a href="#cb1-16"></a>  <span class="kw">&lt;script</span><span class="ot"> src=</span><span class="st">&quot;static/index.js&quot;</span><span class="kw">&gt;&lt;/script&gt;</span></span>
<span id="cb1-17"><a href="#cb1-17"></a><span class="kw">&lt;/body&gt;</span></span>
<span id="cb1-18"><a href="#cb1-18"></a><span class="kw">&lt;/html&gt;</span></span></code></pre></div>
<div class="sourceCode" id="cb2"><pre class="sourceCode js"><code class="sourceCode javascript"><span id="cb2-1"><a href="#cb2-1"></a><span class="co">// static/index.js</span></span>
<span id="cb2-2"><a href="#cb2-2"></a><span class="st">&#39;use strict&#39;</span><span class="op">;</span></span>
<span id="cb2-3"><a href="#cb2-3"></a></span>
<span id="cb2-4"><a href="#cb2-4"></a><span class="co">// コレらの設定は公開してもいいらしいけど</span></span>
<span id="cb2-5"><a href="#cb2-5"></a><span class="kw">var</span> firebaseConfig <span class="op">=</span> {</span>
<span id="cb2-6"><a href="#cb2-6"></a>  <span class="dt">apiKey</span><span class="op">:</span> <span class="st">&quot;...&quot;</span><span class="op">,</span></span>
<span id="cb2-7"><a href="#cb2-7"></a>  <span class="dt">authDomain</span><span class="op">:</span> <span class="st">&quot;...&quot;</span><span class="op">,</span></span>
<span id="cb2-8"><a href="#cb2-8"></a>  <span class="dt">databaseURL</span><span class="op">:</span> <span class="st">&quot;...&quot;</span><span class="op">,</span></span>
<span id="cb2-9"><a href="#cb2-9"></a>  <span class="dt">projectId</span><span class="op">:</span> <span class="st">&quot;...&quot;</span><span class="op">,</span></span>
<span id="cb2-10"><a href="#cb2-10"></a>  <span class="dt">storageBucket</span><span class="op">:</span> <span class="st">&quot;...&quot;</span><span class="op">,</span></span>
<span id="cb2-11"><a href="#cb2-11"></a>  <span class="dt">messagingSenderId</span><span class="op">:</span> <span class="st">&quot;...&quot;</span><span class="op">,</span></span>
<span id="cb2-12"><a href="#cb2-12"></a>  <span class="dt">appId</span><span class="op">:</span> <span class="st">&quot;...&quot;</span></span>
<span id="cb2-13"><a href="#cb2-13"></a>}<span class="op">;</span></span>
<span id="cb2-14"><a href="#cb2-14"></a></span>
<span id="cb2-15"><a href="#cb2-15"></a>firebase<span class="op">.</span><span class="fu">initializeApp</span>(firebaseConfig)<span class="op">;</span></span>
<span id="cb2-16"><a href="#cb2-16"></a><span class="kw">const</span> provider <span class="op">=</span> <span class="kw">new</span> firebase<span class="op">.</span><span class="at">auth</span><span class="op">.</span><span class="fu">GithubAuthProvider</span>()<span class="op">;</span></span></code></pre></div>
<p>あとは Elm から Firebase のメソッドを呼び出す． 基本的にコレを参考にした：</p>
<ul>
<li><a href="https://qiita.com/ababup1192/items/f27f9af282d9fa642eb5">Elm portsでFirebase Firestoreを触ろう！ - Qiita</a></li>
</ul>
<p>Elm 用の Firebase パッケージ的なのはないので，Elm のポート機能を使って繋ぎ込む：</p>
<div class="sourceCode" id="cb3"><pre class="sourceCode elm"><code class="sourceCode elm"><span id="cb3-1"><a href="#cb3-1"></a><span class="kw">port</span> <span class="kw">module</span> <span class="dt">Firebase</span> <span class="kw">exposing</span> (<span class="op">..</span>)</span>
<span id="cb3-2"><a href="#cb3-2"></a></span>
<span id="cb3-3"><a href="#cb3-3"></a><span class="kw">import</span> <span class="dt">Json</span><span class="op">.</span><span class="dt">Encode</span> <span class="kw">as</span> <span class="dt">E</span></span>
<span id="cb3-4"><a href="#cb3-4"></a></span>
<span id="cb3-5"><a href="#cb3-5"></a><span class="kw">port</span> <span class="fu">signIn</span> : () <span class="op">-&gt;</span> <span class="dt">Cmd</span> <span class="fu">msg</span></span>
<span id="cb3-6"><a href="#cb3-6"></a><span class="kw">port</span> <span class="fu">getSignInResult</span> : () <span class="op">-&gt;</span> <span class="dt">Cmd</span> <span class="fu">msg</span></span>
<span id="cb3-7"><a href="#cb3-7"></a><span class="kw">port</span> <span class="fu">signedIn</span> : (<span class="dt">E</span><span class="op">.</span><span class="dt">Value</span> <span class="op">-&gt;</span> <span class="fu">msg</span>) <span class="op">-&gt;</span> <span class="dt">Sub</span> <span class="fu">msg</span></span></code></pre></div>
<div class="sourceCode" id="cb4"><pre class="sourceCode js"><code class="sourceCode javascript"><span id="cb4-1"><a href="#cb4-1"></a><span class="co">// static/index.js</span></span>
<span id="cb4-2"><a href="#cb4-2"></a><span class="op">...</span></span>
<span id="cb4-3"><a href="#cb4-3"></a></span>
<span id="cb4-4"><a href="#cb4-4"></a><span class="kw">const</span> app <span class="op">=</span> Elm<span class="op">.</span><span class="at">Main</span><span class="op">.</span><span class="fu">init</span>(</span>
<span id="cb4-5"><a href="#cb4-5"></a>  { <span class="dt">node</span><span class="op">:</span> <span class="bu">document</span><span class="op">.</span><span class="fu">getElementById</span>(<span class="st">&#39;main&#39;</span>)</span>
<span id="cb4-6"><a href="#cb4-6"></a>  <span class="op">,</span> <span class="dt">flags</span><span class="op">:</span> {}</span>
<span id="cb4-7"><a href="#cb4-7"></a>  }</span>
<span id="cb4-8"><a href="#cb4-8"></a>)<span class="op">;</span></span>
<span id="cb4-9"><a href="#cb4-9"></a></span>
<span id="cb4-10"><a href="#cb4-10"></a>app<span class="op">.</span><span class="at">ports</span><span class="op">.</span><span class="at">signIn</span><span class="op">.</span><span class="fu">subscribe</span>(_ <span class="kw">=&gt;</span> {</span>
<span id="cb4-11"><a href="#cb4-11"></a>  <span class="co">// popup の方はモバイル系でうまく動作しなかったのでこっちを使う</span></span>
<span id="cb4-12"><a href="#cb4-12"></a>  firebase<span class="op">.</span><span class="fu">auth</span>()<span class="op">.</span><span class="fu">signInWithRedirect</span>(provider)<span class="op">;</span></span>
<span id="cb4-13"><a href="#cb4-13"></a>})<span class="op">;</span></span>
<span id="cb4-14"><a href="#cb4-14"></a></span>
<span id="cb4-15"><a href="#cb4-15"></a>app<span class="op">.</span><span class="at">ports</span><span class="op">.</span><span class="at">getSignInResult</span><span class="op">.</span><span class="fu">subscribe</span>(_ <span class="kw">=&gt;</span> {</span>
<span id="cb4-16"><a href="#cb4-16"></a>  firebase<span class="op">.</span><span class="fu">auth</span>()<span class="op">.</span><span class="fu">getRedirectResult</span>()<span class="op">.</span><span class="fu">then</span>(<span class="kw">function</span>(result) {</span>
<span id="cb4-17"><a href="#cb4-17"></a>    <span class="cf">if</span> (result<span class="op">.</span><span class="at">credential</span>) {</span>
<span id="cb4-18"><a href="#cb4-18"></a>      app<span class="op">.</span><span class="at">ports</span><span class="op">.</span><span class="at">signedIn</span><span class="op">.</span><span class="fu">send</span>(result)<span class="op">;</span></span>
<span id="cb4-19"><a href="#cb4-19"></a>    }</span>
<span id="cb4-20"><a href="#cb4-20"></a>  })<span class="op">.</span><span class="fu">catch</span>(<span class="kw">function</span>(error) {</span>
<span id="cb4-21"><a href="#cb4-21"></a>    app<span class="op">.</span><span class="at">ports</span><span class="op">.</span><span class="at">failSignIn</span><span class="op">.</span><span class="fu">send</span>(error)</span>
<span id="cb4-22"><a href="#cb4-22"></a>  })<span class="op">;</span></span>
<span id="cb4-23"><a href="#cb4-23"></a>})<span class="op">;</span></span></code></pre></div>
<p>繋ぎ込みはできた． サクッとトークンだけもらって，GitHub API v3 からユーザー名を取得する部分を実装する：</p>
<div class="sourceCode" id="cb5"><pre class="sourceCode elm"><code class="sourceCode elm"><span id="cb5-1"><a href="#cb5-1"></a><span class="kw">module</span> <span class="dt">GitHub</span> <span class="kw">exposing</span> (<span class="op">..</span>)</span>
<span id="cb5-2"><a href="#cb5-2"></a></span>
<span id="cb5-3"><a href="#cb5-3"></a><span class="kw">import</span> <span class="dt">Http</span></span>
<span id="cb5-4"><a href="#cb5-4"></a><span class="kw">import</span> <span class="dt">Json</span><span class="op">.</span><span class="dt">Decode</span> <span class="kw">as</span> <span class="dt">D</span> <span class="kw">exposing</span> (<span class="dt">Decoder</span>)</span>
<span id="cb5-5"><a href="#cb5-5"></a><span class="kw">import</span> <span class="dt">Json</span><span class="op">.</span><span class="dt">Encode</span> <span class="kw">as</span> <span class="dt">E</span></span>
<span id="cb5-6"><a href="#cb5-6"></a></span>
<span id="cb5-7"><a href="#cb5-7"></a><span class="kw">type</span> <span class="dt">Token</span> <span class="op">=</span> <span class="dt">Token</span> <span class="dt">String</span></span>
<span id="cb5-8"><a href="#cb5-8"></a></span>
<span id="cb5-9"><a href="#cb5-9"></a><span class="fu">tokenDecoder</span> : <span class="dt">Decoder</span> <span class="dt">Token</span></span>
<span id="cb5-10"><a href="#cb5-10"></a><span class="fu">tokenDecoder</span> <span class="op">=</span> <span class="dt">D</span><span class="op">.</span><span class="fu">map</span> <span class="dt">Token</span> <span class="dt">D</span><span class="op">.</span><span class="fu">string</span></span>
<span id="cb5-11"><a href="#cb5-11"></a></span>
<span id="cb5-12"><a href="#cb5-12"></a><span class="kw">type</span> <span class="kw">alias</span> <span class="dt">User</span> <span class="op">=</span></span>
<span id="cb5-13"><a href="#cb5-13"></a>    { <span class="fu">login</span> : <span class="dt">String</span></span>
<span id="cb5-14"><a href="#cb5-14"></a>    <span class="op">,</span> <span class="fu">name</span> : <span class="dt">String</span></span>
<span id="cb5-15"><a href="#cb5-15"></a>    }</span>
<span id="cb5-16"><a href="#cb5-16"></a></span>
<span id="cb5-17"><a href="#cb5-17"></a><span class="fu">getUserInfo</span> : (<span class="dt">Result</span> <span class="dt">Http</span><span class="op">.</span><span class="dt">Error</span> <span class="dt">User</span> <span class="op">-&gt;</span> <span class="fu">msg</span>) <span class="op">-&gt;</span> <span class="dt">Token</span> <span class="op">-&gt;</span> <span class="dt">Cmd</span> <span class="fu">msg</span></span>
<span id="cb5-18"><a href="#cb5-18"></a><span class="fu">getUserInfo</span> <span class="fu">msg</span> (<span class="dt">Token</span> <span class="fu">t</span>) <span class="op">=</span> <span class="op">...</span> <span class="co">-- 割愛</span></span></code></pre></div>
<div class="sourceCode" id="cb6"><pre class="sourceCode elm"><code class="sourceCode elm"><span id="cb6-1"><a href="#cb6-1"></a><span class="kw">port</span> <span class="kw">module</span> <span class="dt">Firebase</span> <span class="kw">exposing</span> (<span class="op">..</span>)</span>
<span id="cb6-2"><a href="#cb6-2"></a></span>
<span id="cb6-3"><a href="#cb6-3"></a><span class="kw">import</span> <span class="dt">GitHub</span></span>
<span id="cb6-4"><a href="#cb6-4"></a><span class="kw">import</span> <span class="dt">Json</span><span class="op">.</span><span class="dt">Decode</span> <span class="kw">as</span> <span class="dt">D</span> <span class="kw">exposing</span> (<span class="dt">Decoder</span>)</span>
<span id="cb6-5"><a href="#cb6-5"></a></span>
<span id="cb6-6"><a href="#cb6-6"></a><span class="fu">decoder</span> : <span class="dt">Decoder</span> <span class="dt">GitHub</span><span class="op">.</span><span class="dt">Token</span></span>
<span id="cb6-7"><a href="#cb6-7"></a><span class="fu">decoder</span> <span class="op">=</span> <span class="dt">D</span><span class="op">.</span><span class="fu">map</span> <span class="fu">identity</span> (<span class="dt">D</span><span class="op">.</span><span class="fu">at</span> [ <span class="st">&quot;credential&quot;</span><span class="op">,</span> <span class="st">&quot;accessToken&quot;</span> ] <span class="dt">GitHub</span><span class="op">.</span><span class="fu">tokenDecoder</span>)</span>
<span id="cb6-8"><a href="#cb6-8"></a></span>
<span id="cb6-9"><a href="#cb6-9"></a><span class="fu">signedInWithDecode</span> : (<span class="dt">Result</span> <span class="dt">D</span><span class="op">.</span><span class="dt">Error</span> <span class="dt">GitHub</span><span class="op">.</span><span class="dt">Token</span> <span class="op">-&gt;</span> <span class="fu">msg</span>) <span class="op">-&gt;</span> <span class="dt">Sub</span> <span class="fu">msg</span></span>
<span id="cb6-10"><a href="#cb6-10"></a><span class="fu">signedInWithDecode</span> <span class="fu">msg</span> <span class="op">=</span> <span class="fu">signedIn</span> (<span class="fu">msg</span> <span class="op">&lt;&lt;</span> <span class="dt">D</span><span class="op">.</span><span class="fu">decodeValue</span> <span class="fu">decoder</span>)</span></code></pre></div>
<p>あとは適当に <code>Main</code> から呼び出すだけ：</p>
<div class="sourceCode" id="cb7"><pre class="sourceCode elm"><code class="sourceCode elm"><span id="cb7-1"><a href="#cb7-1"></a><span class="kw">module</span> <span class="dt">Main</span> <span class="kw">exposing</span> (<span class="fu">main</span>)</span>
<span id="cb7-2"><a href="#cb7-2"></a><span class="co">-- import は割愛</span></span>
<span id="cb7-3"><a href="#cb7-3"></a></span>
<span id="cb7-4"><a href="#cb7-4"></a><span class="fu">main</span> : <span class="dt">Program</span> () <span class="dt">Model</span> <span class="dt">Msg</span></span>
<span id="cb7-5"><a href="#cb7-5"></a><span class="fu">main</span> <span class="op">=</span></span>
<span id="cb7-6"><a href="#cb7-6"></a>    <span class="dt">Browser</span><span class="op">.</span><span class="fu">application</span></span>
<span id="cb7-7"><a href="#cb7-7"></a>        { <span class="fu">init</span> <span class="op">=</span> <span class="fu">init</span></span>
<span id="cb7-8"><a href="#cb7-8"></a>        <span class="op">,</span> <span class="fu">view</span> <span class="op">=</span> <span class="fu">view</span></span>
<span id="cb7-9"><a href="#cb7-9"></a>        <span class="op">,</span> <span class="fu">update</span> <span class="op">=</span> <span class="fu">update</span></span>
<span id="cb7-10"><a href="#cb7-10"></a>        <span class="op">,</span> <span class="fu">subscriptions</span> <span class="op">=</span> <span class="dt">Firebase</span><span class="op">.</span><span class="fu">signedInWithDecode</span> <span class="dt">SignedIn</span></span>
<span id="cb7-11"><a href="#cb7-11"></a>        <span class="op">,</span> <span class="fu">onUrlRequest</span> <span class="op">=</span> <span class="dt">LinkClicked</span></span>
<span id="cb7-12"><a href="#cb7-12"></a>        <span class="op">,</span> <span class="fu">onUrlChange</span> <span class="op">=</span> <span class="dt">UrlChanged</span></span>
<span id="cb7-13"><a href="#cb7-13"></a>        }</span>
<span id="cb7-14"><a href="#cb7-14"></a></span>
<span id="cb7-15"><a href="#cb7-15"></a><span class="kw">type</span> <span class="kw">alias</span> <span class="dt">Model</span> <span class="op">=</span></span>
<span id="cb7-16"><a href="#cb7-16"></a>    { <span class="fu">token</span> : <span class="dt">Maybe</span> <span class="dt">GitHub</span><span class="op">.</span><span class="dt">Token</span></span>
<span id="cb7-17"><a href="#cb7-17"></a>    <span class="op">,</span> <span class="fu">user</span> : <span class="dt">Maybe</span> <span class="dt">GitHub</span><span class="op">.</span><span class="dt">User</span></span>
<span id="cb7-18"><a href="#cb7-18"></a>    <span class="op">,</span> <span class="fu">error</span> : <span class="dt">Maybe</span> <span class="dt">String</span></span>
<span id="cb7-19"><a href="#cb7-19"></a>    <span class="op">,</span> <span class="fu">key</span> : <span class="dt">Nav</span><span class="op">.</span><span class="dt">Key</span></span>
<span id="cb7-20"><a href="#cb7-20"></a>    }</span>
<span id="cb7-21"><a href="#cb7-21"></a></span>
<span id="cb7-22"><a href="#cb7-22"></a><span class="kw">type</span> <span class="dt">Msg</span></span>
<span id="cb7-23"><a href="#cb7-23"></a>    <span class="op">=</span> <span class="dt">LinkClicked</span> <span class="dt">Browser</span><span class="op">.</span><span class="dt">UrlRequest</span></span>
<span id="cb7-24"><a href="#cb7-24"></a>    <span class="op">|</span> <span class="dt">UrlChanged</span> <span class="dt">Url</span></span>
<span id="cb7-25"><a href="#cb7-25"></a>    <span class="op">|</span> <span class="dt">SignIn</span></span>
<span id="cb7-26"><a href="#cb7-26"></a>    <span class="op">|</span> <span class="dt">SignedIn</span> (<span class="dt">Result</span> <span class="dt">Json</span><span class="op">.</span><span class="dt">Error</span> <span class="dt">GitHub</span><span class="op">.</span><span class="dt">Token</span>)</span>
<span id="cb7-27"><a href="#cb7-27"></a>    <span class="op">|</span> <span class="dt">FetchUser</span> (<span class="dt">Result</span> <span class="dt">Http</span><span class="op">.</span><span class="dt">Error</span> <span class="dt">GitHub</span><span class="op">.</span><span class="dt">User</span>)</span>
<span id="cb7-28"><a href="#cb7-28"></a></span>
<span id="cb7-29"><a href="#cb7-29"></a><span class="fu">init</span> : () <span class="op">-&gt;</span> <span class="dt">Url</span> <span class="op">-&gt;</span> <span class="dt">Nav</span><span class="op">.</span><span class="dt">Key</span> <span class="op">-&gt;</span> ( <span class="dt">Model</span><span class="op">,</span> <span class="dt">Cmd</span> <span class="dt">Msg</span> )</span>
<span id="cb7-30"><a href="#cb7-30"></a><span class="fu">init</span> <span class="fu">_</span> <span class="fu">_</span> <span class="fu">key</span> <span class="op">=</span> ( <span class="dt">Model</span> <span class="dt">Nothing</span> <span class="dt">Nothing</span> <span class="dt">Nothing</span> <span class="fu">key</span><span class="op">,</span> <span class="dt">Firebase</span><span class="op">.</span><span class="fu">getSignInResult</span> () )</span>
<span id="cb7-31"><a href="#cb7-31"></a></span>
<span id="cb7-32"><a href="#cb7-32"></a><span class="fu">update</span> : <span class="dt">Msg</span> <span class="op">-&gt;</span> <span class="dt">Model</span> <span class="op">-&gt;</span> ( <span class="dt">Model</span><span class="op">,</span> <span class="dt">Cmd</span> <span class="dt">Msg</span> )</span>
<span id="cb7-33"><a href="#cb7-33"></a><span class="fu">update</span> <span class="fu">msg</span> <span class="fu">model</span> <span class="op">=</span></span>
<span id="cb7-34"><a href="#cb7-34"></a>    <span class="cf">case</span> <span class="fu">msg</span> <span class="cf">of</span></span>
<span id="cb7-35"><a href="#cb7-35"></a>        <span class="op">...</span> <span class="co">-- URL 系は割愛</span></span>
<span id="cb7-36"><a href="#cb7-36"></a>        <span class="dt">SignIn</span> <span class="op">-&gt;</span></span>
<span id="cb7-37"><a href="#cb7-37"></a>            ( <span class="fu">model</span><span class="op">,</span> <span class="dt">Firebase</span><span class="op">.</span><span class="fu">signIn</span> () )</span>
<span id="cb7-38"><a href="#cb7-38"></a>        <span class="dt">SignedIn</span> (<span class="dt">Ok</span> <span class="fu">token</span>) <span class="op">-&gt;</span></span>
<span id="cb7-39"><a href="#cb7-39"></a>            ( { <span class="fu">model</span> <span class="op">|</span> <span class="fu">token</span> <span class="op">=</span> <span class="dt">Just</span> <span class="fu">token</span><span class="op">,</span> <span class="fu">error</span> <span class="op">=</span> <span class="dt">Nothing</span> }<span class="op">,</span> <span class="dt">GitHub</span><span class="op">.</span><span class="fu">getUserInfo</span> <span class="dt">FetchUser</span> <span class="fu">token</span> )</span>
<span id="cb7-40"><a href="#cb7-40"></a>        <span class="dt">SignedIn</span> (<span class="dt">Err</span> <span class="fu">err</span>) <span class="op">-&gt;</span></span>
<span id="cb7-41"><a href="#cb7-41"></a>            ( { <span class="fu">model</span> <span class="op">|</span> <span class="fu">error</span> <span class="op">=</span> <span class="dt">Just</span> (<span class="dt">Json</span><span class="op">.</span><span class="fu">errorToString</span> <span class="fu">err</span>) }<span class="op">,</span> <span class="dt">Cmd</span><span class="op">.</span><span class="fu">none</span> )</span>
<span id="cb7-42"><a href="#cb7-42"></a>        <span class="dt">FetchUser</span> (<span class="dt">Ok</span> <span class="fu">user</span>) <span class="op">-&gt;</span></span>
<span id="cb7-43"><a href="#cb7-43"></a>            ( { <span class="fu">model</span> <span class="op">|</span> <span class="fu">user</span> <span class="op">=</span> <span class="dt">Just</span> <span class="fu">user</span><span class="op">,</span> <span class="fu">error</span> <span class="op">=</span> <span class="dt">Nothing</span> }<span class="op">,</span> <span class="dt">Cmd</span><span class="op">.</span><span class="fu">none</span> )</span>
<span id="cb7-44"><a href="#cb7-44"></a>        <span class="dt">FetchUser</span> (<span class="dt">Err</span> <span class="fu">_</span>) <span class="op">-&gt;</span></span>
<span id="cb7-45"><a href="#cb7-45"></a>            ( { <span class="fu">model</span> <span class="op">|</span> <span class="fu">error</span> <span class="op">=</span> <span class="dt">Just</span> <span class="st">&quot;fetch github user error&quot;</span> }<span class="op">,</span> <span class="dt">Cmd</span><span class="op">.</span><span class="fu">none</span> )</span>
<span id="cb7-46"><a href="#cb7-46"></a></span>
<span id="cb7-47"><a href="#cb7-47"></a><span class="fu">view</span> : <span class="dt">Model</span> <span class="op">-&gt;</span> <span class="dt">Browser</span><span class="op">.</span><span class="dt">Document</span> <span class="dt">Msg</span></span>
<span id="cb7-48"><a href="#cb7-48"></a><span class="fu">view</span> <span class="fu">model</span> <span class="op">=</span> { <span class="fu">title</span> <span class="op">=</span> <span class="st">&quot;Elm GitHub OAuth 2.0 Sample&quot;</span><span class="op">,</span> <span class="fu">body</span> <span class="op">=</span> [ <span class="fu">viewBody</span> <span class="fu">model</span> ] }</span>
<span id="cb7-49"><a href="#cb7-49"></a></span>
<span id="cb7-50"><a href="#cb7-50"></a><span class="fu">viewBody</span> : <span class="dt">Model</span> <span class="op">-&gt;</span> <span class="dt">Html</span> <span class="dt">Msg</span></span>
<span id="cb7-51"><a href="#cb7-51"></a><span class="fu">viewBody</span> <span class="fu">model</span> <span class="op">=</span></span>
<span id="cb7-52"><a href="#cb7-52"></a>    <span class="dt">Html</span><span class="op">.</span><span class="fu">div</span> [ <span class="dt">Attr</span><span class="op">.</span><span class="fu">class</span> <span class="st">&quot;position-relative text-center&quot;</span> ]</span>
<span id="cb7-53"><a href="#cb7-53"></a>        [ <span class="cf">case</span> ( <span class="fu">model</span><span class="op">.</span><span class="fu">error</span><span class="op">,</span> <span class="fu">model</span><span class="op">.</span><span class="fu">user</span> ) <span class="cf">of</span></span>
<span id="cb7-54"><a href="#cb7-54"></a>            ( <span class="dt">Just</span> <span class="fu">err</span><span class="op">,</span> <span class="fu">_</span> ) <span class="op">-&gt;</span></span>
<span id="cb7-55"><a href="#cb7-55"></a>                <span class="fu">text</span> <span class="fu">err</span></span>
<span id="cb7-56"><a href="#cb7-56"></a>            ( <span class="fu">_</span><span class="op">,</span> <span class="dt">Just</span> <span class="fu">user</span> ) <span class="op">-&gt;</span></span>
<span id="cb7-57"><a href="#cb7-57"></a>                <span class="fu">viewUser</span> <span class="fu">user</span></span>
<span id="cb7-58"><a href="#cb7-58"></a>            <span class="fu">_</span> <span class="op">-&gt;</span></span>
<span id="cb7-59"><a href="#cb7-59"></a>                <span class="fu">signinButton</span> <span class="fu">model</span></span>
<span id="cb7-60"><a href="#cb7-60"></a>        ]</span>
<span id="cb7-61"><a href="#cb7-61"></a></span>
<span id="cb7-62"><a href="#cb7-62"></a><span class="fu">signinButton</span> : <span class="dt">Model</span> <span class="op">-&gt;</span> <span class="dt">Html</span> <span class="dt">Msg</span></span>
<span id="cb7-63"><a href="#cb7-63"></a><span class="fu">signinButton</span> <span class="fu">model</span> <span class="op">=</span></span>
<span id="cb7-64"><a href="#cb7-64"></a>    <span class="fu">div</span> [ <span class="dt">Attr</span><span class="op">.</span><span class="fu">class</span> <span class="st">&quot;f3 mt-3&quot;</span> ]</span>
<span id="cb7-65"><a href="#cb7-65"></a>        [ <span class="fu">button</span></span>
<span id="cb7-66"><a href="#cb7-66"></a>            [ <span class="dt">Event</span><span class="op">.</span><span class="fu">onClick</span> <span class="dt">SignIn</span></span>
<span id="cb7-67"><a href="#cb7-67"></a>            <span class="op">,</span> <span class="op">...</span> <span class="co">-- 割愛</span></span>
<span id="cb7-68"><a href="#cb7-68"></a>            ]</span>
<span id="cb7-69"><a href="#cb7-69"></a>            [ <span class="fu">text</span> <span class="st">&quot;Sign in with GitHub&quot;</span> ]</span>
<span id="cb7-70"><a href="#cb7-70"></a>        ]</span>
<span id="cb7-71"><a href="#cb7-71"></a></span>
<span id="cb7-72"><a href="#cb7-72"></a><span class="fu">viewUser</span> : <span class="dt">GitHub</span><span class="op">.</span><span class="dt">User</span> <span class="op">-&gt;</span> <span class="dt">Html</span> <span class="fu">msg</span></span>
<span id="cb7-73"><a href="#cb7-73"></a><span class="fu">viewUser</span> <span class="fu">user</span> <span class="op">=</span> <span class="fu">text</span> (<span class="st">&quot;Hi &quot;</span> <span class="op">++</span> <span class="fu">user</span><span class="op">.</span><span class="fu">login</span> <span class="op">++</span> <span class="st">&quot;!&quot;</span>)</span></code></pre></div>
<p>コレを</p>
<pre><code>$ elm make --output=docs/static/main.js src/Main.elm --optimize</code></pre>
<p>とビルドして <code>elm reactor</code> で <code>docs/index.html</code> にアクセスすると、サインインボタンがあってサインインすると <code>Hi matsubara0507!</code> って感じのメッセージが出るだけの SPA ができた．</p>
<h3 id="リポジトリを取得">リポジトリを取得</h3>
<p>こっからは完全におまけ． リポジトリのスターをなんかステータスっぽく表示するようにしたい．</p>
<p>リポジトリ一覧は GitHub の個別ユーザーページをモバイル版でみたときの感じにすることにした：</p>
<p><img src="/assets/elm-github-oauth2-sample/mobile.jpg"></img></p>
<p>必要なリポジトリの情報は名前とリンクと総スター数． GitHub API v3 は無駄な情報が多いので，GraphQL を使って一気に取得してみる． GraphQL のクエリの動作確認は<a href="https://developer.github.com/v4/explorer/">ココ</a>で行える：</p>
<p><img src="/assets/elm-github-oauth2-sample/graphql.jpg"></img></p>
<p>最終的に出来上がったクエリはこんな感じ：</p>
<pre class="graphql"><code>query {
  viewer {
    login
    name
    repositories(first: 100, orderBy: {field: STARGAZERS, direction: DESC}, ownerAffiliations: [OWNER], isFork: false) {
      nodes {
        name
        url
        stargazers { totalCount }
      }
    }
  }
}</code></pre>
<p>クエリの <code>viewer {..}</code> は渡したトークンのユーザー情報を指す． <code>viewer</code> 内で <code>login</code> や <code>name</code> を指定することで，さっきまで v3 で取得していたユーザー情報も取得できる． <code>repositories</code> で一気に所得できるリポジトリ数は100件が上限（<code>first:300</code> は怒られる）． <code>orderBy:{..}</code> でスターの多い順に並び替えて，<code>ownerAffiliations:[OWNER]</code> と <code>isFork:false</code> を指定することで自身のリポジトリだけを返してる． リポジトリのスター数は <code>stargazers { totalCount }</code> で取得できる．</p>
<h1 id="section"></h1>
<p>あとはクエリを叩くだけ． Elm の GraphQL パッケージに良さげのものがなかったのでそのまま <code>elm/http</code> を使うことにした：</p>
<div class="sourceCode" id="cb10"><pre class="sourceCode elm"><code class="sourceCode elm"><span id="cb10-1"><a href="#cb10-1"></a><span class="kw">module</span> <span class="dt">GitHub</span> <span class="kw">exposing</span> (<span class="op">..</span>)</span>
<span id="cb10-2"><a href="#cb10-2"></a></span>
<span id="cb10-3"><a href="#cb10-3"></a><span class="kw">type</span> <span class="kw">alias</span> <span class="dt">User</span> <span class="op">=</span></span>
<span id="cb10-4"><a href="#cb10-4"></a>    { <span class="fu">login</span> : <span class="dt">String</span></span>
<span id="cb10-5"><a href="#cb10-5"></a>    <span class="op">,</span> <span class="fu">name</span> : <span class="dt">String</span></span>
<span id="cb10-6"><a href="#cb10-6"></a>    <span class="op">,</span> <span class="fu">repos</span> : <span class="dt">List</span> <span class="dt">Repository</span></span>
<span id="cb10-7"><a href="#cb10-7"></a>    }</span>
<span id="cb10-8"><a href="#cb10-8"></a></span>
<span id="cb10-9"><a href="#cb10-9"></a><span class="kw">type</span> <span class="kw">alias</span> <span class="dt">Repository</span> <span class="op">=</span></span>
<span id="cb10-10"><a href="#cb10-10"></a>    { <span class="fu">name</span> : <span class="dt">String</span></span>
<span id="cb10-11"><a href="#cb10-11"></a>    <span class="op">,</span> <span class="fu">url</span> : <span class="dt">String</span></span>
<span id="cb10-12"><a href="#cb10-12"></a>    <span class="op">,</span> <span class="fu">star</span> : <span class="dt">Int</span></span>
<span id="cb10-13"><a href="#cb10-13"></a>    }</span>
<span id="cb10-14"><a href="#cb10-14"></a></span>
<span id="cb10-15"><a href="#cb10-15"></a><span class="fu">userDecoder</span> : <span class="dt">Decoder</span> <span class="dt">User</span></span>
<span id="cb10-16"><a href="#cb10-16"></a><span class="fu">userDecoder</span> <span class="op">=</span></span>
<span id="cb10-17"><a href="#cb10-17"></a>    <span class="dt">D</span><span class="op">.</span><span class="fu">map3</span> <span class="dt">User</span></span>
<span id="cb10-18"><a href="#cb10-18"></a>        (<span class="dt">D</span><span class="op">.</span><span class="fu">field</span> <span class="st">&quot;login&quot;</span> <span class="dt">D</span><span class="op">.</span><span class="fu">string</span>)</span>
<span id="cb10-19"><a href="#cb10-19"></a>        (<span class="dt">D</span><span class="op">.</span><span class="fu">field</span> <span class="st">&quot;name&quot;</span> <span class="dt">D</span><span class="op">.</span><span class="fu">string</span>)</span>
<span id="cb10-20"><a href="#cb10-20"></a>        (<span class="dt">D</span><span class="op">.</span><span class="fu">at</span> [ <span class="st">&quot;repositories&quot;</span><span class="op">,</span> <span class="st">&quot;nodes&quot;</span> ] (<span class="dt">D</span><span class="op">.</span><span class="fu">list</span> <span class="fu">repoDecoder</span>))</span>
<span id="cb10-21"><a href="#cb10-21"></a></span>
<span id="cb10-22"><a href="#cb10-22"></a><span class="fu">repoDecoder</span> : <span class="dt">Decoder</span> <span class="dt">Repository</span></span>
<span id="cb10-23"><a href="#cb10-23"></a><span class="fu">repoDecoder</span> <span class="op">=</span></span>
<span id="cb10-24"><a href="#cb10-24"></a>    <span class="dt">D</span><span class="op">.</span><span class="fu">map3</span> <span class="dt">Repository</span></span>
<span id="cb10-25"><a href="#cb10-25"></a>        (<span class="dt">D</span><span class="op">.</span><span class="fu">field</span> <span class="st">&quot;name&quot;</span> <span class="dt">D</span><span class="op">.</span><span class="fu">string</span>)</span>
<span id="cb10-26"><a href="#cb10-26"></a>        (<span class="dt">D</span><span class="op">.</span><span class="fu">field</span> <span class="st">&quot;url&quot;</span> <span class="dt">D</span><span class="op">.</span><span class="fu">string</span>)</span>
<span id="cb10-27"><a href="#cb10-27"></a>        (<span class="dt">D</span><span class="op">.</span><span class="fu">at</span> [ <span class="st">&quot;stargazers&quot;</span><span class="op">,</span> <span class="st">&quot;totalCount&quot;</span> ] <span class="dt">D</span><span class="op">.</span><span class="fu">int</span>)</span>
<span id="cb10-28"><a href="#cb10-28"></a></span>
<span id="cb10-29"><a href="#cb10-29"></a><span class="fu">getUserInfo</span> : (<span class="dt">Result</span> <span class="dt">Http</span><span class="op">.</span><span class="dt">Error</span> <span class="dt">User</span> <span class="op">-&gt;</span> <span class="fu">msg</span>) <span class="op">-&gt;</span> <span class="dt">Token</span> <span class="op">-&gt;</span> <span class="dt">Cmd</span> <span class="fu">msg</span></span>
<span id="cb10-30"><a href="#cb10-30"></a><span class="fu">getUserInfo</span> <span class="fu">msg</span> (<span class="dt">Token</span> <span class="fu">t</span>) <span class="op">=</span></span>
<span id="cb10-31"><a href="#cb10-31"></a>    <span class="kw">let</span></span>
<span id="cb10-32"><a href="#cb10-32"></a>        <span class="fu">query</span> <span class="op">=</span> <span class="op">...</span> <span class="co">-- さっきのクエリをヒアドキュメントとかで</span></span>
<span id="cb10-33"><a href="#cb10-33"></a>        <span class="fu">decoder</span> <span class="op">=</span> <span class="dt">D</span><span class="op">.</span><span class="fu">map</span> <span class="fu">identity</span> (<span class="dt">D</span><span class="op">.</span><span class="fu">at</span> [ <span class="st">&quot;data&quot;</span><span class="op">,</span> <span class="st">&quot;viewer&quot;</span> ] <span class="fu">userDecoder</span>)</span>
<span id="cb10-34"><a href="#cb10-34"></a>    <span class="kw">in</span></span>
<span id="cb10-35"><a href="#cb10-35"></a>    <span class="dt">Http</span><span class="op">.</span><span class="fu">request</span></span>
<span id="cb10-36"><a href="#cb10-36"></a>        { <span class="fu">method</span> <span class="op">=</span> <span class="st">&quot;POST&quot;</span></span>
<span id="cb10-37"><a href="#cb10-37"></a>        <span class="op">,</span> <span class="fu">headers</span> <span class="op">=</span> [ <span class="dt">Http</span><span class="op">.</span><span class="fu">header</span> <span class="st">&quot;Authorization&quot;</span> (<span class="st">&quot;token &quot;</span> <span class="op">++</span> <span class="fu">t</span>) ]</span>
<span id="cb10-38"><a href="#cb10-38"></a>        <span class="op">,</span> <span class="fu">url</span> <span class="op">=</span> <span class="st">&quot;https://api.github.com/graphql&quot;</span></span>
<span id="cb10-39"><a href="#cb10-39"></a>        <span class="op">,</span> <span class="fu">body</span> <span class="op">=</span> <span class="dt">Http</span><span class="op">.</span><span class="fu">jsonBody</span> (<span class="dt">E</span><span class="op">.</span><span class="fu">object</span> [ ( <span class="st">&quot;query&quot;</span><span class="op">,</span> <span class="dt">E</span><span class="op">.</span><span class="fu">string</span> <span class="fu">query</span> ) ])</span>
<span id="cb10-40"><a href="#cb10-40"></a>        <span class="op">,</span> <span class="fu">expect</span> <span class="op">=</span> <span class="dt">Http</span><span class="op">.</span><span class="fu">expectJson</span> <span class="fu">msg</span> <span class="fu">decoder</span></span>
<span id="cb10-41"><a href="#cb10-41"></a>        <span class="op">,</span> <span class="fu">timeout</span> <span class="op">=</span> <span class="dt">Nothing</span></span>
<span id="cb10-42"><a href="#cb10-42"></a>        <span class="op">,</span> <span class="fu">tracker</span> <span class="op">=</span> <span class="dt">Nothing</span></span>
<span id="cb10-43"><a href="#cb10-43"></a>        }</span></code></pre></div>
<p>インターフェースは全く変えてないので <code>Main</code> でいじるのは <code>view</code> だけ：</p>
<div class="sourceCode" id="cb11"><pre class="sourceCode elm"><code class="sourceCode elm"><span id="cb11-1"><a href="#cb11-1"></a><span class="kw">module</span> <span class="dt">Main</span> <span class="kw">exposing</span> (<span class="fu">main</span>)</span>
<span id="cb11-2"><a href="#cb11-2"></a></span>
<span id="cb11-3"><a href="#cb11-3"></a><span class="op">...</span></span>
<span id="cb11-4"><a href="#cb11-4"></a></span>
<span id="cb11-5"><a href="#cb11-5"></a><span class="fu">viewUser</span> : <span class="dt">GitHub</span><span class="op">.</span><span class="dt">User</span> <span class="op">-&gt;</span> <span class="dt">Html</span> <span class="fu">msg</span></span>
<span id="cb11-6"><a href="#cb11-6"></a><span class="fu">viewUser</span> <span class="fu">user</span> <span class="op">=</span></span>
<span id="cb11-7"><a href="#cb11-7"></a>    <span class="kw">let</span></span>
<span id="cb11-8"><a href="#cb11-8"></a>        <span class="fu">total</span> <span class="op">=</span> <span class="dt">String</span><span class="op">.</span><span class="fu">fromInt</span> (<span class="dt">List</span><span class="op">.</span><span class="fu">sum</span> (<span class="dt">List</span><span class="op">.</span><span class="fu">map</span> <span class="op">.</span><span class="fu">star</span> <span class="fu">user</span><span class="op">.</span><span class="fu">repos</span>))</span>
<span id="cb11-9"><a href="#cb11-9"></a>    <span class="kw">in</span></span>
<span id="cb11-10"><a href="#cb11-10"></a>    <span class="fu">div</span> [ <span class="dt">Attr</span><span class="op">.</span><span class="fu">class</span> <span class="st">&quot;container-sm my-3&quot;</span> ]</span>
<span id="cb11-11"><a href="#cb11-11"></a>        [ <span class="fu">h3</span> [ <span class="dt">Attr</span><span class="op">.</span><span class="fu">class</span> <span class="st">&quot;my-2&quot;</span> ] [ <span class="fu">text</span> (<span class="fu">user</span><span class="op">.</span><span class="fu">login</span> <span class="op">++</span> <span class="st">&quot;&#39;s points: &quot;</span> <span class="op">++</span> <span class="fu">total</span>) ]</span>
<span id="cb11-12"><a href="#cb11-12"></a>        <span class="op">,</span> <span class="fu">viewRepositories</span> <span class="fu">user</span></span>
<span id="cb11-13"><a href="#cb11-13"></a>        ]</span>
<span id="cb11-14"><a href="#cb11-14"></a></span>
<span id="cb11-15"><a href="#cb11-15"></a><span class="fu">viewRepositories</span> : <span class="dt">GitHub</span><span class="op">.</span><span class="dt">User</span> <span class="op">-&gt;</span> <span class="dt">Html</span> <span class="fu">msg</span></span>
<span id="cb11-16"><a href="#cb11-16"></a><span class="fu">viewRepositories</span> <span class="fu">user</span> <span class="op">=</span></span>
<span id="cb11-17"><a href="#cb11-17"></a>    <span class="kw">let</span></span>
<span id="cb11-18"><a href="#cb11-18"></a>        <span class="fu">viewRepository</span> <span class="fu">repo</span> <span class="op">=</span></span>
<span id="cb11-19"><a href="#cb11-19"></a>            <span class="fu">li</span> [ <span class="dt">Attr</span><span class="op">.</span><span class="fu">class</span> <span class="st">&quot;Box-row mb-3&quot;</span> ]</span>
<span id="cb11-20"><a href="#cb11-20"></a>                [ <span class="fu">div</span> [ <span class="dt">Attr</span><span class="op">.</span><span class="fu">class</span> <span class="st">&quot;float-left&quot;</span> ]</span>
<span id="cb11-21"><a href="#cb11-21"></a>                    [ <span class="dt">Octicons</span><span class="op">.</span><span class="fu">repo</span> <span class="dt">Octicons</span><span class="op">.</span><span class="fu">defaultOptions</span></span>
<span id="cb11-22"><a href="#cb11-22"></a>                    <span class="op">,</span> <span class="fu">a</span> [ <span class="dt">Attr</span><span class="op">.</span><span class="fu">href</span> <span class="fu">repo</span><span class="op">.</span><span class="fu">url</span><span class="op">,</span> <span class="dt">Attr</span><span class="op">.</span><span class="fu">class</span> <span class="st">&quot;ml-1&quot;</span> ]</span>
<span id="cb11-23"><a href="#cb11-23"></a>                        [ <span class="fu">text</span> (<span class="fu">user</span><span class="op">.</span><span class="fu">login</span> <span class="op">++</span> <span class="st">&quot;/&quot;</span> <span class="op">++</span> <span class="fu">repo</span><span class="op">.</span><span class="fu">name</span>) ]</span>
<span id="cb11-24"><a href="#cb11-24"></a>                    ]</span>
<span id="cb11-25"><a href="#cb11-25"></a>                <span class="op">,</span> <span class="fu">div</span> [ <span class="dt">Attr</span><span class="op">.</span><span class="fu">class</span> <span class="st">&quot;float-right&quot;</span> ]</span>
<span id="cb11-26"><a href="#cb11-26"></a>                    [ <span class="fu">text</span> (<span class="dt">String</span><span class="op">.</span><span class="fu">fromInt</span> <span class="fu">repo</span><span class="op">.</span><span class="fu">star</span>)</span>
<span id="cb11-27"><a href="#cb11-27"></a>                    <span class="op">,</span> <span class="dt">Octicons</span><span class="op">.</span><span class="fu">star</span> <span class="dt">Octicons</span><span class="op">.</span><span class="fu">defaultOptions</span></span>
<span id="cb11-28"><a href="#cb11-28"></a>                    ]</span>
<span id="cb11-29"><a href="#cb11-29"></a>                ]</span>
<span id="cb11-30"><a href="#cb11-30"></a>    <span class="kw">in</span></span>
<span id="cb11-31"><a href="#cb11-31"></a>    <span class="fu">div</span> [ <span class="dt">Attr</span><span class="op">.</span><span class="fu">class</span> <span class="st">&quot;Box&quot;</span> ]</span>
<span id="cb11-32"><a href="#cb11-32"></a>        [ <span class="fu">ul</span> [] (<span class="dt">List</span><span class="op">.</span><span class="fu">map</span> <span class="fu">viewRepository</span> <span class="fu">user</span><span class="op">.</span><span class="fu">repos</span>) ]</span></code></pre></div>
<h3 id="elm-で円グラフ">Elm で円グラフ</h3>
<p>なんかこう，リポジトリのプライマリ言語ごとに円グラフにしたら面白いなっていう欲がでてきたのでそうしてみることにした． まずはリポジトリのプライマリ言語を返すようにクエリをいじる：</p>
<pre><code>query {
  viewer {
    ...
    repositories(...) {
      nodes {
        ...
        primaryLanguage {
          name
          color
        }
      }
    }
  }
}</code></pre>
<p>データ構造も書き足す：</p>
<div class="sourceCode" id="cb13"><pre class="sourceCode elm"><code class="sourceCode elm"><span id="cb13-1"><a href="#cb13-1"></a><span class="kw">type</span> <span class="kw">alias</span> <span class="dt">Repository</span> <span class="op">=</span></span>
<span id="cb13-2"><a href="#cb13-2"></a>    { <span class="op">...</span> <span class="co">-- 割愛</span></span>
<span id="cb13-3"><a href="#cb13-3"></a>    <span class="op">,</span> <span class="fu">language</span> : <span class="dt">Maybe</span> <span class="dt">Language</span></span>
<span id="cb13-4"><a href="#cb13-4"></a>    }</span>
<span id="cb13-5"><a href="#cb13-5"></a></span>
<span id="cb13-6"><a href="#cb13-6"></a><span class="kw">type</span> <span class="kw">alias</span> <span class="dt">Language</span> <span class="op">=</span></span>
<span id="cb13-7"><a href="#cb13-7"></a>    { <span class="fu">name</span> : <span class="dt">String</span></span>
<span id="cb13-8"><a href="#cb13-8"></a>    <span class="op">,</span> <span class="fu">color</span> : <span class="dt">String</span></span>
<span id="cb13-9"><a href="#cb13-9"></a>    }</span>
<span id="cb13-10"><a href="#cb13-10"></a></span>
<span id="cb13-11"><a href="#cb13-11"></a><span class="fu">repoDecoder</span> : <span class="dt">Decoder</span> <span class="dt">Repository</span></span>
<span id="cb13-12"><a href="#cb13-12"></a><span class="fu">repoDecoder</span> <span class="op">=</span></span>
<span id="cb13-13"><a href="#cb13-13"></a>    <span class="dt">D</span><span class="op">.</span><span class="fu">map4</span> <span class="dt">Repository</span></span>
<span id="cb13-14"><a href="#cb13-14"></a>        <span class="op">...</span> <span class="co">-- 割愛</span></span>
<span id="cb13-15"><a href="#cb13-15"></a>        (<span class="dt">D</span><span class="op">.</span><span class="fu">field</span> <span class="st">&quot;primaryLanguage&quot;</span> <span class="op">&lt;|</span> <span class="dt">D</span><span class="op">.</span><span class="fu">nullable</span> <span class="fu">languageDecoder</span>)</span>
<span id="cb13-16"><a href="#cb13-16"></a></span>
<span id="cb13-17"><a href="#cb13-17"></a></span>
<span id="cb13-18"><a href="#cb13-18"></a><span class="fu">languageDecoder</span> : <span class="dt">Decoder</span> <span class="dt">Language</span></span>
<span id="cb13-19"><a href="#cb13-19"></a><span class="fu">languageDecoder</span> <span class="op">=</span></span>
<span id="cb13-20"><a href="#cb13-20"></a>    <span class="dt">D</span><span class="op">.</span><span class="fu">map2</span> <span class="dt">Language</span></span>
<span id="cb13-21"><a href="#cb13-21"></a>        (<span class="dt">D</span><span class="op">.</span><span class="fu">field</span> <span class="st">&quot;name&quot;</span> <span class="dt">D</span><span class="op">.</span><span class="fu">string</span>)</span>
<span id="cb13-22"><a href="#cb13-22"></a>        (<span class="dt">D</span><span class="op">.</span><span class="fu">field</span> <span class="st">&quot;color&quot;</span> <span class="dt">D</span><span class="op">.</span><span class="fu">string</span>)</span></code></pre></div>
<p>プライマリ言語の情報は <code>null</code> が返ってくる可能性があるので、<code>Maybe</code> でラップしている．</p>
<p>データは揃ったので，あとは円グラフを描くだけ． 円グラフの描写には <a href="https://package.elm-lang.org/packages/gampleman/elm-visualization/2.1.1"><code>gampleman/elm-visualization</code></a> を使うことにする． example 集にある「<a href="https://elm-visualization.netlify.com/custompiechart">Custom Pie Chart</a>」をベースにすることにした． コピペしてよしなに書き換える：</p>
<div class="sourceCode" id="cb14"><pre class="sourceCode elm"><code class="sourceCode elm"><span id="cb14-1"><a href="#cb14-1"></a><span class="kw">module</span> <span class="dt">Pie</span> <span class="kw">exposing</span> (<span class="fu">view</span>)</span>
<span id="cb14-2"><a href="#cb14-2"></a><span class="co">-- import は割愛</span></span>
<span id="cb14-3"><a href="#cb14-3"></a></span>
<span id="cb14-4"><a href="#cb14-4"></a><span class="kw">type</span> <span class="kw">alias</span> <span class="dt">Data</span> <span class="op">=</span></span>
<span id="cb14-5"><a href="#cb14-5"></a>    { <span class="fu">label</span> : <span class="dt">String</span> <span class="co">-- 言語名</span></span>
<span id="cb14-6"><a href="#cb14-6"></a>    <span class="op">,</span> <span class="fu">data</span> : <span class="dt">Float</span>   <span class="co">-- 総スター数</span></span>
<span id="cb14-7"><a href="#cb14-7"></a>    <span class="op">,</span> <span class="fu">color</span> : <span class="dt">Color</span>  <span class="co">-- GitHub 側で設定されてる言語の色</span></span>
<span id="cb14-8"><a href="#cb14-8"></a>    }</span>
<span id="cb14-9"><a href="#cb14-9"></a></span>
<span id="cb14-10"><a href="#cb14-10"></a><span class="fu">w</span> : <span class="dt">Float</span></span>
<span id="cb14-11"><a href="#cb14-11"></a><span class="fu">w</span> <span class="op">=</span> <span class="dv">990</span></span>
<span id="cb14-12"><a href="#cb14-12"></a></span>
<span id="cb14-13"><a href="#cb14-13"></a><span class="fu">h</span> : <span class="dt">Float</span></span>
<span id="cb14-14"><a href="#cb14-14"></a><span class="fu">h</span> <span class="op">=</span> <span class="dv">504</span></span>
<span id="cb14-15"><a href="#cb14-15"></a></span>
<span id="cb14-16"><a href="#cb14-16"></a><span class="fu">radius</span> : <span class="dt">Float</span></span>
<span id="cb14-17"><a href="#cb14-17"></a><span class="fu">radius</span> <span class="op">=</span> <span class="fu">min</span> <span class="fu">w</span> <span class="fu">h</span> <span class="op">/</span> <span class="dv">2</span></span>
<span id="cb14-18"><a href="#cb14-18"></a></span>
<span id="cb14-19"><a href="#cb14-19"></a><span class="kw">type</span> <span class="kw">alias</span> <span class="dt">ChartConfig</span> <span class="op">=</span></span>
<span id="cb14-20"><a href="#cb14-20"></a>    { <span class="fu">outerRadius</span> : <span class="dt">Float</span></span>
<span id="cb14-21"><a href="#cb14-21"></a>    <span class="op">,</span> <span class="fu">innerRadius</span> : <span class="dt">Float</span></span>
<span id="cb14-22"><a href="#cb14-22"></a>    <span class="op">,</span> <span class="fu">padAngle</span> : <span class="dt">Float</span></span>
<span id="cb14-23"><a href="#cb14-23"></a>    <span class="op">,</span> <span class="fu">cornerRadius</span> : <span class="dt">Float</span></span>
<span id="cb14-24"><a href="#cb14-24"></a>    <span class="op">,</span> <span class="fu">labelPosition</span> : <span class="dt">Float</span></span>
<span id="cb14-25"><a href="#cb14-25"></a>    }</span>
<span id="cb14-26"><a href="#cb14-26"></a></span>
<span id="cb14-27"><a href="#cb14-27"></a><span class="fu">drawChart</span> : <span class="dt">ChartConfig</span> <span class="op">-&gt;</span> <span class="dt">List</span> <span class="dt">Data</span> <span class="op">-&gt;</span> <span class="dt">Svg</span> <span class="fu">msg</span></span>
<span id="cb14-28"><a href="#cb14-28"></a><span class="fu">drawChart</span> <span class="fu">config</span> <span class="fu">model</span> <span class="op">=</span></span>
<span id="cb14-29"><a href="#cb14-29"></a>    <span class="kw">let</span></span>
<span id="cb14-30"><a href="#cb14-30"></a>        <span class="fu">pieData</span> <span class="op">=</span></span>
<span id="cb14-31"><a href="#cb14-31"></a>            <span class="dt">List</span><span class="op">.</span><span class="fu">map</span> <span class="op">.</span><span class="fu">data</span> <span class="fu">model</span></span>
<span id="cb14-32"><a href="#cb14-32"></a>                <span class="op">|&gt;</span> <span class="dt">Shape</span><span class="op">.</span><span class="fu">pie</span></span>
<span id="cb14-33"><a href="#cb14-33"></a>                    { <span class="fu">defaultPieConfig</span></span>
<span id="cb14-34"><a href="#cb14-34"></a>                        <span class="op">|</span> <span class="fu">innerRadius</span> <span class="op">=</span> <span class="fu">config</span><span class="op">.</span><span class="fu">innerRadius</span></span>
<span id="cb14-35"><a href="#cb14-35"></a>                        <span class="op">,</span> <span class="fu">outerRadius</span> <span class="op">=</span> <span class="fu">config</span><span class="op">.</span><span class="fu">outerRadius</span></span>
<span id="cb14-36"><a href="#cb14-36"></a>                        <span class="op">,</span> <span class="fu">padAngle</span> <span class="op">=</span> <span class="fu">config</span><span class="op">.</span><span class="fu">padAngle</span></span>
<span id="cb14-37"><a href="#cb14-37"></a>                        <span class="op">,</span> <span class="fu">cornerRadius</span> <span class="op">=</span> <span class="fu">config</span><span class="op">.</span><span class="fu">cornerRadius</span></span>
<span id="cb14-38"><a href="#cb14-38"></a>                        <span class="op">,</span> <span class="fu">sortingFn</span> <span class="op">=</span> \<span class="fu">_</span> <span class="fu">_</span> <span class="op">-&gt;</span> <span class="dt">EQ</span></span>
<span id="cb14-39"><a href="#cb14-39"></a>                    }</span>
<span id="cb14-40"><a href="#cb14-40"></a></span>
<span id="cb14-41"><a href="#cb14-41"></a>        <span class="fu">makeSlice</span> <span class="fu">pieDatum</span> <span class="fu">datum</span> <span class="op">=</span></span>
<span id="cb14-42"><a href="#cb14-42"></a>            <span class="dt">Path</span><span class="op">.</span><span class="fu">element</span> (<span class="dt">Shape</span><span class="op">.</span><span class="fu">arc</span> <span class="fu">pieDatum</span>) [ <span class="dt">Attr</span><span class="op">.</span><span class="fu">fill</span> (<span class="dt">Paint</span> <span class="fu">datum</span><span class="op">.</span><span class="fu">color</span>) ]</span>
<span id="cb14-43"><a href="#cb14-43"></a></span>
<span id="cb14-44"><a href="#cb14-44"></a>        <span class="fu">makeLabel</span> <span class="fu">pieDatum</span> <span class="fu">datum</span> <span class="op">=</span></span>
<span id="cb14-45"><a href="#cb14-45"></a>            <span class="kw">let</span></span>
<span id="cb14-46"><a href="#cb14-46"></a>                ( <span class="fu">x</span><span class="op">,</span> <span class="fu">y</span> ) <span class="op">=</span></span>
<span id="cb14-47"><a href="#cb14-47"></a>                    <span class="dt">Shape</span><span class="op">.</span><span class="fu">centroid</span></span>
<span id="cb14-48"><a href="#cb14-48"></a>                        { <span class="fu">pieDatum</span></span>
<span id="cb14-49"><a href="#cb14-49"></a>                            <span class="op">|</span> <span class="fu">innerRadius</span> <span class="op">=</span> <span class="fu">config</span><span class="op">.</span><span class="fu">labelPosition</span></span>
<span id="cb14-50"><a href="#cb14-50"></a>                            <span class="op">,</span> <span class="fu">outerRadius</span> <span class="op">=</span> <span class="fu">config</span><span class="op">.</span><span class="fu">labelPosition</span></span>
<span id="cb14-51"><a href="#cb14-51"></a>                        }</span>
<span id="cb14-52"><a href="#cb14-52"></a>            <span class="kw">in</span></span>
<span id="cb14-53"><a href="#cb14-53"></a>            <span class="fu">text_</span></span>
<span id="cb14-54"><a href="#cb14-54"></a>                [ <span class="dt">Attr</span><span class="op">.</span><span class="fu">transform</span> [ <span class="dt">Translate</span> <span class="fu">x</span> <span class="fu">y</span> ]</span>
<span id="cb14-55"><a href="#cb14-55"></a>                <span class="op">,</span> <span class="dt">Attr</span><span class="op">.</span><span class="fu">dy</span> (<span class="fu">em</span> <span class="dv">0</span><span class="op">.</span><span class="dv">35</span>)</span>
<span id="cb14-56"><a href="#cb14-56"></a>                <span class="op">,</span> <span class="dt">Attr</span><span class="op">.</span><span class="fu">textAnchor</span> <span class="dt">AnchorMiddle</span></span>
<span id="cb14-57"><a href="#cb14-57"></a>                ]</span>
<span id="cb14-58"><a href="#cb14-58"></a>                [ <span class="fu">text</span> <span class="fu">datum</span><span class="op">.</span><span class="fu">label</span> ]</span>
<span id="cb14-59"><a href="#cb14-59"></a>    <span class="kw">in</span></span>
<span id="cb14-60"><a href="#cb14-60"></a>    <span class="fu">svg</span> [ <span class="fu">width</span> (<span class="fu">radius</span> <span class="op">*</span> <span class="dv">2</span>)<span class="op">,</span> <span class="fu">height</span> (<span class="fu">radius</span> <span class="op">*</span> <span class="dv">2</span>) ]</span>
<span id="cb14-61"><a href="#cb14-61"></a>        [ <span class="fu">g</span> [ <span class="dt">Attr</span><span class="op">.</span><span class="fu">transform</span> [ <span class="dt">Translate</span> <span class="fu">radius</span> <span class="fu">radius</span> ] ]</span>
<span id="cb14-62"><a href="#cb14-62"></a>            [ <span class="fu">g</span> [] <span class="op">&lt;|</span> <span class="dt">List</span><span class="op">.</span><span class="fu">map2</span> <span class="fu">makeSlice</span> <span class="fu">pieData</span> <span class="fu">model</span></span>
<span id="cb14-63"><a href="#cb14-63"></a>            <span class="op">,</span> <span class="fu">g</span> [] <span class="op">&lt;|</span> <span class="dt">List</span><span class="op">.</span><span class="fu">map2</span> <span class="fu">makeLabel</span> <span class="fu">pieData</span> <span class="fu">model</span></span>
<span id="cb14-64"><a href="#cb14-64"></a>            ]</span>
<span id="cb14-65"><a href="#cb14-65"></a>        ]</span></code></pre></div>
<p>主に書き換えたのは色の部分． example では <code>colors</code> 的な色リストを利用してたが，リポジトリのプログラミング言語には GitHub 側で色が設定してあるので，それをモデルに持たせて引用することにした． あとは <code>Repository</code> 型から <code>Data</code> 型を組み立てる部分を書くだけ：</p>
<div class="sourceCode" id="cb15"><pre class="sourceCode elm"><code class="sourceCode elm"><span id="cb15-1"><a href="#cb15-1"></a><span class="kw">module</span> <span class="dt">Pie</span> <span class="kw">exposing</span> (<span class="fu">view</span>)</span>
<span id="cb15-2"><a href="#cb15-2"></a></span>
<span id="cb15-3"><a href="#cb15-3"></a><span class="op">...</span> <span class="co">-- 割愛</span></span>
<span id="cb15-4"><a href="#cb15-4"></a></span>
<span id="cb15-5"><a href="#cb15-5"></a><span class="fu">fromRepo</span> : <span class="dt">GitHub</span><span class="op">.</span><span class="dt">Repository</span> <span class="op">-&gt;</span> <span class="dt">Data</span></span>
<span id="cb15-6"><a href="#cb15-6"></a><span class="fu">fromRepo</span> <span class="fu">repo</span> <span class="op">=</span></span>
<span id="cb15-7"><a href="#cb15-7"></a>    <span class="cf">case</span> <span class="fu">repo</span><span class="op">.</span><span class="fu">language</span> <span class="cf">of</span></span>
<span id="cb15-8"><a href="#cb15-8"></a>        <span class="dt">Nothing</span> <span class="op">-&gt;</span></span>
<span id="cb15-9"><a href="#cb15-9"></a>            <span class="dt">Data</span> <span class="st">&quot;none&quot;</span> (<span class="fu">toFloat</span> <span class="fu">repo</span><span class="op">.</span><span class="fu">star</span>) <span class="dt">Color</span><span class="op">.</span><span class="fu">black</span></span>
<span id="cb15-10"><a href="#cb15-10"></a>        <span class="dt">Just</span> <span class="fu">lang</span> <span class="op">-&gt;</span></span>
<span id="cb15-11"><a href="#cb15-11"></a>            <span class="cf">case</span> <span class="fu">hexToColor</span> <span class="fu">lang</span><span class="op">.</span><span class="fu">color</span> <span class="cf">of</span></span>
<span id="cb15-12"><a href="#cb15-12"></a>                <span class="dt">Ok</span> <span class="fu">c</span> <span class="op">-&gt;</span></span>
<span id="cb15-13"><a href="#cb15-13"></a>                    <span class="dt">Data</span> <span class="fu">lang</span><span class="op">.</span><span class="fu">name</span> (<span class="fu">toFloat</span> <span class="fu">repo</span><span class="op">.</span><span class="fu">star</span>) <span class="fu">c</span></span>
<span id="cb15-14"><a href="#cb15-14"></a>                <span class="fu">_</span> <span class="op">-&gt;</span></span>
<span id="cb15-15"><a href="#cb15-15"></a>                    <span class="dt">Data</span> <span class="st">&quot;none&quot;</span> (<span class="fu">toFloat</span> <span class="fu">repo</span><span class="op">.</span><span class="fu">star</span>) <span class="dt">Color</span><span class="op">.</span><span class="fu">black</span></span>
<span id="cb15-16"><a href="#cb15-16"></a></span>
<span id="cb15-17"><a href="#cb15-17"></a><span class="fu">view</span> : <span class="dt">GitHub</span><span class="op">.</span><span class="dt">User</span> <span class="op">-&gt;</span> <span class="dt">Html</span> <span class="fu">msg</span></span>
<span id="cb15-18"><a href="#cb15-18"></a><span class="fu">view</span> <span class="fu">user</span> <span class="op">=</span></span>
<span id="cb15-19"><a href="#cb15-19"></a>    <span class="kw">let</span></span>
<span id="cb15-20"><a href="#cb15-20"></a>        <span class="fu">config</span> <span class="op">=</span> <span class="op">...</span> <span class="co">-- 割愛</span></span>
<span id="cb15-21"><a href="#cb15-21"></a></span>
<span id="cb15-22"><a href="#cb15-22"></a>        <span class="fu">updateBy</span> <span class="fu">d</span> <span class="fu">value</span> <span class="op">=</span></span>
<span id="cb15-23"><a href="#cb15-23"></a>            <span class="cf">case</span> <span class="fu">value</span> <span class="cf">of</span></span>
<span id="cb15-24"><a href="#cb15-24"></a>                <span class="dt">Nothing</span> <span class="op">-&gt;</span></span>
<span id="cb15-25"><a href="#cb15-25"></a>                    <span class="dt">Just</span> <span class="fu">d</span></span>
<span id="cb15-26"><a href="#cb15-26"></a></span>
<span id="cb15-27"><a href="#cb15-27"></a>                <span class="dt">Just</span> <span class="fu">v</span> <span class="op">-&gt;</span></span>
<span id="cb15-28"><a href="#cb15-28"></a>                    <span class="dt">Just</span> { <span class="fu">v</span> <span class="op">|</span> <span class="fu">data</span> <span class="op">=</span> <span class="fu">v</span><span class="op">.</span><span class="fu">data</span> <span class="op">+</span> <span class="fu">d</span><span class="op">.</span><span class="fu">data</span> }</span>
<span id="cb15-29"><a href="#cb15-29"></a></span>
<span id="cb15-30"><a href="#cb15-30"></a>        <span class="fu">model</span> <span class="op">=</span></span>
<span id="cb15-31"><a href="#cb15-31"></a>            <span class="dt">List</span><span class="op">.</span><span class="fu">map</span> <span class="fu">fromRepo</span> <span class="fu">user</span><span class="op">.</span><span class="fu">repos</span></span>
<span id="cb15-32"><a href="#cb15-32"></a>                <span class="op">|&gt;</span> <span class="dt">List</span><span class="op">.</span><span class="fu">foldl</span> (\<span class="fu">d</span> <span class="op">-&gt;</span> <span class="dt">Dict</span><span class="op">.</span><span class="fu">update</span> <span class="fu">d</span><span class="op">.</span><span class="fu">label</span> (<span class="fu">updateBy</span> <span class="fu">d</span>)) <span class="dt">Dict</span><span class="op">.</span><span class="fu">empty</span></span>
<span id="cb15-33"><a href="#cb15-33"></a>                <span class="op">|&gt;</span> <span class="dt">Dict</span><span class="op">.</span><span class="fu">filter</span> (\<span class="fu">_</span> <span class="fu">v</span> <span class="op">-&gt;</span> <span class="fu">v</span><span class="op">.</span><span class="fu">data</span> <span class="op">/=</span> <span class="dv">0</span>)</span>
<span id="cb15-34"><a href="#cb15-34"></a>    <span class="kw">in</span></span>
<span id="cb15-35"><a href="#cb15-35"></a>    <span class="fu">div</span> [ <span class="fu">class</span> <span class="st">&quot;position-relative&quot;</span> ]</span>
<span id="cb15-36"><a href="#cb15-36"></a>        [ <span class="fu">drawChart</span> <span class="fu">config</span> (<span class="dt">Dict</span><span class="op">.</span><span class="fu">values</span> <span class="fu">model</span>)</span>
<span id="cb15-37"><a href="#cb15-37"></a>        ]</span></code></pre></div>
<p>色々考えた結果，いったん各 <code>Repository</code> を <code>Data</code> に変換して，そのあと言語名をキーにした <code>Dict</code> へと畳み込んでいる（<code>.data</code> の部分だけ足し合わせてる）． あとは <code>Pie.view user</code> を <code>Main.view</code> で呼び出すだけ．</p>
<p>あ、ちなみに真ん中にアバター画像出したしてるのは割愛（ただ単にアバター画像を GraphQL で取ってきて，<code>Pie.view</code> で重ねてるだけ）．</p>
<h2 id="おしまい">おしまい</h2>
<p>Firebase 便利ですね．</p>
  </div>]]></summary>
</entry>
<entry>
    <title>Haskell で SSH Public Key の FingerPrint を計算する</title>
    <link href="https://matsubara0507.github.io/posts/2020-01-08-calc-ssh-pubkey-fingerprint-with-haskell.html" />
    <id>https://matsubara0507.github.io/posts/2020-01-08-calc-ssh-pubkey-fingerprint-with-haskell.html</id>
    <published>2020-01-08T00:00:00Z</published>
    <updated>2020-01-08T00:00:00Z</updated>
    <summary type="html"><![CDATA[<div class="post-content" itemprop="articleBody">
    <p>GitHub に登録している Public Key から <code>~/.ssh/authorized_key</code> を生成する簡易的な CLI ツールを作ろうと考えた． そして，Public Key をフィルタリングするために <code>https://github.com/settings/keys</code> で参照できる FingerPrint を使おうと考えたが，その場合は GitHub API で取得した Public Key から FingerPrint をプログラム側で計算しないといけない．</p>
<p>もちろん，<code>ssh-keygen -l -E md5 -f ssh_host_ecdsa_key.pub</code> なんかで生成できるのだが可能なら素の Haskell プログラムでやりたいなと考えた． ということで，本記事はタイトルの通り Haskell で SSH Public Key の FingerPrint を計算することになったので，そのために色々調べたメモ書き．</p>
<h2 id="fingerprint">FingerPrint</h2>
<p>そもそもどういうアルゴリズムで出しているのか． ちょうど良い記事があった，ありがたい:</p>
<ul>
<li><a href="https://qiita.com/hotpepsi/items/128f3a660cee8b5467c6">RSA公開鍵のファイル形式とfingerprint - Qiita</a></li>
</ul>
<p>要するに Base64 デコードして MD5 ハッシュをかければ良いようだ（本来は SHA256 の方が良いっぽいけど）． 上記記事では Base64 デコードしてできた <a href="https://www.ietf.org/rfc/rfc4253.txt">RFC4253</a> の中身まで説明してくれており，最後の Ruby プログラムではバイナリをちゃんと読んだ上で FingerPrint を計算している．</p>
<p>単純に RSA 形式の Public Key の FingerPrint を計算するだけならそこまでしなくて良さそうだ．</p>
<h2 id="haskell-で計算する">Haskell で計算する</h2>
<p>上述の通りやることは2つ</p>
<ol type="1">
<li>Base64 デコード</li>
<li>MD5 ハッシュ化</li>
</ol>
<p>あとその前に header と body を切り分ける．</p>
<p>ちなみに，最終的なコードは <a href="https://github.com/haskell-jp/playground/pull/1">haskell-jp/playground</a> においた．</p>
<h3 id="header-と-body-を切り分ける">header と body を切り分ける</h3>
<p>RSA の Public Key は <code>ssh-rsa AAAAXXX...</code> となっている（<code>X</code> 以降は適当）． 欲しいのは空白よりあとだけなので，まずはそこを切り出す（ついでにバリデーションする）． 後々楽なので全部 <code>ByteString</code> を使うことにする:</p>
<div class="sourceCode" id="cb1"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span id="cb1-1"><a href="#cb1-1"></a><span class="kw">import</span> <span class="dt">Data.ByteString</span> (<span class="dt">ByteString</span>)</span>
<span id="cb1-2"><a href="#cb1-2"></a><span class="kw">import</span> <span class="kw">qualified</span> <span class="dt">Data.ByteString</span> <span class="kw">as</span> <span class="dt">B</span></span>
<span id="cb1-3"><a href="#cb1-3"></a></span>
<span id="cb1-4"><a href="#cb1-4"></a><span class="ot">pubkeyBody ::</span> <span class="dt">ByteString</span> <span class="ot">-&gt;</span> <span class="dt">Maybe</span> <span class="dt">ByteString</span></span>
<span id="cb1-5"><a href="#cb1-5"></a>pubkeyBody content <span class="ot">=</span></span>
<span id="cb1-6"><a href="#cb1-6"></a>  <span class="kw">case</span> B.split <span class="dv">32</span> content <span class="kw">of</span></span>
<span id="cb1-7"><a href="#cb1-7"></a>    [header, body] <span class="op">|</span> header <span class="op">==</span> <span class="st">&quot;ssh-rsa&quot;</span> <span class="op">&amp;&amp;</span> <span class="st">&quot;AAAA&quot;</span> <span class="ot">`B.isPrefixOf`</span> body <span class="ot">-&gt;</span></span>
<span id="cb1-8"><a href="#cb1-8"></a>        <span class="dt">Just</span> body</span>
<span id="cb1-9"><a href="#cb1-9"></a>    _ <span class="ot">-&gt;</span></span>
<span id="cb1-10"><a href="#cb1-10"></a>        <span class="dt">Nothing</span></span></code></pre></div>
<p><code>Word8</code> 型の <code>32</code> は空白．</p>
<h3 id="base64-デコード">Base64 デコード</h3>
<p><a href="https://hackage.haskell.org/package/memory">memory</a> というパッケージを使う． なぜかというと，この後で使うあらゆる暗号アルゴリズムを詰め込んだ <a href="http://hackage.haskell.org/package/cryptonite">cryptonite</a> というパッケージがこれに依存していたからだ． cryptonite に習って Base64 デコードするとこんな感じだ（ついでにバリデーションする）:</p>
<div class="sourceCode" id="cb2"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span id="cb2-1"><a href="#cb2-1"></a><span class="co">-- これが memory パッケージのモジュール</span></span>
<span id="cb2-2"><a href="#cb2-2"></a><span class="kw">import</span> <span class="dt">Data.ByteArray.Encoding</span> (<span class="dt">Base</span> (<span class="dt">Base64</span>), convertFromBase)</span>
<span id="cb2-3"><a href="#cb2-3"></a></span>
<span id="cb2-4"><a href="#cb2-4"></a><span class="ot">decode ::</span> <span class="dt">ByteString</span> <span class="ot">-&gt;</span> <span class="dt">Maybe</span> <span class="dt">ByteString</span></span>
<span id="cb2-5"><a href="#cb2-5"></a>decode body <span class="ot">=</span></span>
<span id="cb2-6"><a href="#cb2-6"></a>  <span class="kw">case</span> convertFromBase <span class="dt">Base64</span> body <span class="kw">of</span></span>
<span id="cb2-7"><a href="#cb2-7"></a>    <span class="dt">Right</span> bin <span class="op">|</span> prefix <span class="ot">`B.isPrefixOf`</span> bin <span class="ot">-&gt;</span></span>
<span id="cb2-8"><a href="#cb2-8"></a>        <span class="dt">Just</span> bin</span>
<span id="cb2-9"><a href="#cb2-9"></a>    _ <span class="ot">-&gt;</span></span>
<span id="cb2-10"><a href="#cb2-10"></a>        <span class="dt">Nothing</span></span>
<span id="cb2-11"><a href="#cb2-11"></a>  <span class="kw">where</span></span>
<span id="cb2-12"><a href="#cb2-12"></a>    <span class="co">-- \x00 \x00 \x00 \x07 ssh-rsa (00000007 というのは ssh-rsa の長さ)</span></span>
<span id="cb2-13"><a href="#cb2-13"></a>    prefix <span class="ot">=</span> <span class="st">&quot;\NUL\NUL\NUL\assh-rsa&quot;</span></span></code></pre></div>
<h3 id="md5-ハッシュ化">MD5 ハッシュ化</h3>
<p>上述の通り，cryptonite というのを用いる． ちなみにこれらのパッケージについては <a href="https://fpcomplete.com/cryptographic-hashing-in-haskell">Cryptographic Hashing in Haskell - FPComplete</a> で紹介されてる(<a href="https://haskell.e-bigmoon.com/posts/2017/09-18-cryptographic-hashing-haskell.html">邦訳記事</a>)． 2017年と少し古い記事だが，このパッケージは今でも精力的にメンテナンスがされており，また個人ではなくチーム(<a href="https://github.com/haskell-crypto">Haskell Crypto</a>)で管理している点から信頼できるかなと考えた（暗号系のパッケージは結構シビアだから）．</p>
<p>このパッケージで何らかのハッシュ関数を利用するには <code>Crypto.Hash.hash</code> 関数を利用すれば良い． アルゴリズム（MD5 か SHA256 かなど）は返り値の型を明示することで指定できる． 今回の場合は <code>Digest MD5</code> 型とすれば良い:</p>
<div class="sourceCode" id="cb3"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span id="cb3-1"><a href="#cb3-1"></a><span class="kw">import</span> <span class="dt">Crypto.Hash</span> (<span class="dt">Digest</span>, <span class="dt">MD5</span>)</span>
<span id="cb3-2"><a href="#cb3-2"></a><span class="kw">import</span> <span class="kw">qualified</span> <span class="dt">Crypto.Hash</span> <span class="kw">as</span> <span class="dt">Crypto</span></span>
<span id="cb3-3"><a href="#cb3-3"></a></span>
<span id="cb3-4"><a href="#cb3-4"></a><span class="ot">fingerprint ::</span> <span class="dt">ByteString</span> <span class="ot">-&gt;</span> <span class="dt">Maybe</span> (<span class="dt">Digest</span> <span class="dt">MD5</span>)</span>
<span id="cb3-5"><a href="#cb3-5"></a>fingerprint content <span class="ot">=</span> <span class="kw">do</span></span>
<span id="cb3-6"><a href="#cb3-6"></a>  body <span class="ot">&lt;-</span> pubkeyBody content</span>
<span id="cb3-7"><a href="#cb3-7"></a>  bin  <span class="ot">&lt;-</span> decode body</span>
<span id="cb3-8"><a href="#cb3-8"></a>  <span class="fu">pure</span> <span class="op">$</span> Crypto.hash bin</span></code></pre></div>
<h2 id="試す">試す</h2>
<p>GHCi で適当に:</p>
<div class="sourceCode" id="cb4"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span id="cb4-1"><a href="#cb4-1"></a><span class="op">&gt;&gt;</span> <span class="op">:</span>set <span class="op">-</span><span class="dt">XOverloadedString</span></span>
<span id="cb4-2"><a href="#cb4-2"></a><span class="op">&gt;&gt;</span> <span class="kw">import</span> <span class="dt">Crypto.SSH.PubKey</span>      <span class="co">-- 今まで定義してた関数のモジュール</span></span>
<span id="cb4-3"><a href="#cb4-3"></a><span class="op">&gt;&gt;</span> fingerprint <span class="st">&quot;ssh-rsa AAAA...&quot;</span> <span class="co">-- 適当に public key の中身を貼り付ける</span></span>
<span id="cb4-4"><a href="#cb4-4"></a><span class="dt">Just</span> <span class="st">&quot;f3b17672020e4e8ad25516034facc12d&quot;</span></span></code></pre></div>
<p>GitHub では8ビットごとに <code>:</code> で区切られてるが，まぁそれはいいでしょ．</p>
<h2 id="おしまい">おしまい</h2>
<p>意外とこういう Crypto 系のテーマの Haskell コードの例って少ないよね． 全部コード読んで試したよ．</p>
  </div>]]></summary>
</entry>
<entry>
    <title>Elixir による JSON Parser</title>
    <link href="https://matsubara0507.github.io/posts/2019-12-22-json-parser-using-elixir.html" />
    <id>https://matsubara0507.github.io/posts/2019-12-22-json-parser-using-elixir.html</id>
    <published>2019-12-22T00:00:00Z</published>
    <updated>2019-12-22T00:00:00Z</updated>
    <summary type="html"><![CDATA[<div class="post-content" itemprop="articleBody">
    <p>「<a href="https://matsubara0507.github.io/posts/2019-12-08-re-create-thank-you-stars-ver-elixir.html">久しぶりに thank_you_stars をビルドする</a>」の続きというかおまけというかって感じの記事です． この記事の最後で poison を抜いてお手製 JSON パーサーを組み込みました． 綺麗に整えたので記事にまとめる．</p>
<h2 id="実装する">実装する</h2>
<p>外部パッケージを使えない縛りなので，完全な Pure Elixir で実装していく．</p>
<h3 id="result-型">Result 型</h3>
<p>その前に便利モジュールを作っておく． いわゆる <code>Either</code> 型だ．</p>
<div class="sourceCode" id="cb1"><pre class="sourceCode elixir"><code class="sourceCode elixir"><span id="cb1-1"><a href="#cb1-1"></a><span class="co"># Result e a = {:error, e} | {:ok, a} のような型を扱う</span></span>
<span id="cb1-2"><a href="#cb1-2"></a><span class="kw">defmodule</span> <span class="cn">ThankYouStars</span><span class="op">.</span><span class="cn">Result</span> <span class="kw">do</span></span>
<span id="cb1-3"><a href="#cb1-3"></a>  <span class="co"># {:ok, a}, {:error, e} をそのまま返す</span></span>
<span id="cb1-4"><a href="#cb1-4"></a>  <span class="kw">def</span> success(v), <span class="kw">do</span>: {<span class="va">:ok</span>, v}</span>
<span id="cb1-5"><a href="#cb1-5"></a>  <span class="kw">def</span> failure(v), <span class="kw">do</span>: {<span class="va">:error</span>, v}</span>
<span id="cb1-6"><a href="#cb1-6"></a></span>
<span id="cb1-7"><a href="#cb1-7"></a>  <span class="co"># {:ok, a} だった場合に {:ok, f(a)} を返す (f は a -&gt; b)</span></span>
<span id="cb1-8"><a href="#cb1-8"></a>  <span class="kw">def</span> map({<span class="va">:ok</span>, v}, f), <span class="kw">do</span>: success(f<span class="op">.</span>(v))</span>
<span id="cb1-9"><a href="#cb1-9"></a>  <span class="kw">def</span> map(err <span class="op">=</span> {<span class="va">:error</span>, _}, _), <span class="kw">do</span>: err</span>
<span id="cb1-10"><a href="#cb1-10"></a></span>
<span id="cb1-11"><a href="#cb1-11"></a>  <span class="co"># {:ok, a} だった場合に f(a) を返す (f は a -&gt; Result e b)</span></span>
<span id="cb1-12"><a href="#cb1-12"></a>  <span class="kw">def</span> and_then({<span class="va">:ok</span>, v}, f), <span class="kw">do</span>: f<span class="op">.</span>(v)</span>
<span id="cb1-13"><a href="#cb1-13"></a>  <span class="kw">def</span> and_then(err <span class="op">=</span> {<span class="va">:error</span>, _}, _), <span class="kw">do</span>: err</span>
<span id="cb1-14"><a href="#cb1-14"></a></span>
<span id="cb1-15"><a href="#cb1-15"></a>  <span class="co"># {:error, e} だった場合に {:error, f(e)} を返す (f は e -&gt; b)</span></span>
<span id="cb1-16"><a href="#cb1-16"></a>  <span class="kw">def</span> map_error({<span class="va">:error</span>, e}, f), <span class="kw">do</span>: failure(f<span class="op">.</span>(e))</span>
<span id="cb1-17"><a href="#cb1-17"></a>  <span class="kw">def</span> map_error(r <span class="op">=</span> {<span class="va">:ok</span>, _}, _), <span class="kw">do</span>: r</span>
<span id="cb1-18"><a href="#cb1-18"></a><span class="kw">end</span></span></code></pre></div>
<p>これを作っておくと <code>{:ok, a} | {:error, e}</code> なデータ型をパイプラインと組み合わせて利用できるようになる(実はプリミティブあったりしないよね？)．</p>
<h3 id="状態のデータ構造">状態のデータ構造</h3>
<p>シンプルにパース結果と残りの文字列を保存する連想配列を持ち回ることにする:</p>
<div class="sourceCode" id="cb2"><pre class="sourceCode elixir"><code class="sourceCode elixir"><span id="cb2-1"><a href="#cb2-1"></a><span class="kw">defmodule</span> <span class="cn">ThankYouStars</span><span class="op">.</span><span class="cn">JSON</span> <span class="kw">do</span></span>
<span id="cb2-2"><a href="#cb2-2"></a>  <span class="im">alias</span> <span class="cn">ThankYouStars</span><span class="op">.</span><span class="cn">Result</span>, <span class="va">as:</span> <span class="cn">Result</span></span>
<span id="cb2-3"><a href="#cb2-3"></a></span>
<span id="cb2-4"><a href="#cb2-4"></a>  <span class="kw">def</span> decode(str) <span class="kw">do</span></span>
<span id="cb2-5"><a href="#cb2-5"></a>    init_stat(str)</span>
<span id="cb2-6"><a href="#cb2-6"></a>    <span class="op">|&gt;</span> match_element() <span class="co"># これがパーサー</span></span>
<span id="cb2-7"><a href="#cb2-7"></a>    <span class="op">|&gt;</span> <span class="kw">case</span> <span class="kw">do</span></span>
<span id="cb2-8"><a href="#cb2-8"></a>      <span class="co"># パースが成功した場合 {:ok} かつ残り文字列が空になる想定</span></span>
<span id="cb2-9"><a href="#cb2-9"></a>      {<span class="va">:ok</span>, %{<span class="va">rest:</span> <span class="st">&quot;&quot;</span>, <span class="va">result:</span> result}} <span class="op">-&gt;</span> <span class="cn">Result</span><span class="op">.</span>success(result)</span>
<span id="cb2-10"><a href="#cb2-10"></a>      {_, %{<span class="va">rest:</span> rest}} <span class="op">-&gt;</span> <span class="cn">Result</span><span class="op">.</span>failure(rest)</span>
<span id="cb2-11"><a href="#cb2-11"></a>    <span class="kw">end</span></span>
<span id="cb2-12"><a href="#cb2-12"></a>  <span class="kw">end</span></span>
<span id="cb2-13"><a href="#cb2-13"></a></span>
<span id="cb2-14"><a href="#cb2-14"></a>  <span class="co"># rest が残り文字列で result がパース結果</span></span>
<span id="cb2-15"><a href="#cb2-15"></a>  <span class="kw">defp</span> init_stat(str), <span class="kw">do</span>: %{<span class="va">rest:</span> str, <span class="va">result:</span> %{}}</span>
<span id="cb2-16"><a href="#cb2-16"></a></span>
<span id="cb2-17"><a href="#cb2-17"></a>  <span class="op">...</span></span>
<span id="cb2-18"><a href="#cb2-18"></a><span class="kw">end</span></span></code></pre></div>
<p>今回実装する JSON パーサーは最終的に Elixir の連想配列や配列，真偽値や文字列などのプリミティブなデータ型へ変換することとする． なので，初期値として空の連想配列 <code>%{}</code> を渡している．</p>
<h3 id="json.org">JSON.org</h3>
<p>JSON の(基本的な)構文定義は <a href="https://json.org">JSON.org</a> に書いてある． ご丁寧に BNF が書いてあるので，これに沿って実装するだけだ． 例えば，こんな感じの BNF が記述されている:</p>
<div class="sourceCode" id="cb3"><pre class="sourceCode txt"><code class="sourceCode default"><span id="cb3-1"><a href="#cb3-1"></a>json</span>
<span id="cb3-2"><a href="#cb3-2"></a>  := element</span>
<span id="cb3-3"><a href="#cb3-3"></a></span>
<span id="cb3-4"><a href="#cb3-4"></a>element</span>
<span id="cb3-5"><a href="#cb3-5"></a>  := ws value ws</span>
<span id="cb3-6"><a href="#cb3-6"></a></span>
<span id="cb3-7"><a href="#cb3-7"></a>value</span>
<span id="cb3-8"><a href="#cb3-8"></a>  := object</span>
<span id="cb3-9"><a href="#cb3-9"></a>   | array</span>
<span id="cb3-10"><a href="#cb3-10"></a>   | string</span>
<span id="cb3-11"><a href="#cb3-11"></a>   | number</span>
<span id="cb3-12"><a href="#cb3-12"></a>   | &quot;true&quot;</span>
<span id="cb3-13"><a href="#cb3-13"></a>   | &quot;false&quot;</span>
<span id="cb3-14"><a href="#cb3-14"></a>   | &quot;null&quot;</span>
<span id="cb3-15"><a href="#cb3-15"></a></span>
<span id="cb3-16"><a href="#cb3-16"></a>ws</span>
<span id="cb3-17"><a href="#cb3-17"></a>  := ... // 空白除去</span></code></pre></div>
<p>これをパターンマッチを駆使して実装するとこんな感じ:</p>
<div class="sourceCode" id="cb4"><pre class="sourceCode elixir"><code class="sourceCode elixir"><span id="cb4-1"><a href="#cb4-1"></a><span class="kw">defp</span> match_element(stat) <span class="kw">do</span></span>
<span id="cb4-2"><a href="#cb4-2"></a>  trim_leading(stat) <span class="co"># rest の前方の空白を除去します</span></span>
<span id="cb4-3"><a href="#cb4-3"></a>  <span class="op">|&gt;</span> match_value()</span>
<span id="cb4-4"><a href="#cb4-4"></a>  <span class="op">|&gt;</span> <span class="cn">Result</span><span class="op">.</span>map(<span class="op">&amp;</span>trim_leading(<span class="op">&amp;</span><span class="dv">1</span>))</span>
<span id="cb4-5"><a href="#cb4-5"></a><span class="kw">end</span></span>
<span id="cb4-6"><a href="#cb4-6"></a></span>
<span id="cb4-7"><a href="#cb4-7"></a><span class="co"># match_string や match_array はあとで</span></span>
<span id="cb4-8"><a href="#cb4-8"></a><span class="kw">defp</span> match_value(%{<span class="va">rest:</span> <span class="st">&quot;true&quot;</span> <span class="op">&lt;&gt;</span> rest}), <span class="kw">do</span>: <span class="cn">Result</span><span class="op">.</span>success(%{<span class="va">result:</span> <span class="cn">true</span>, <span class="va">rest:</span> rest})</span>
<span id="cb4-9"><a href="#cb4-9"></a><span class="kw">defp</span> match_value(%{<span class="va">rest:</span> <span class="st">&quot;false&quot;</span> <span class="op">&lt;&gt;</span> rest}), <span class="kw">do</span>: <span class="cn">Result</span><span class="op">.</span>success(%{<span class="va">result:</span> <span class="cn">false</span>, <span class="va">rest:</span> rest})</span>
<span id="cb4-10"><a href="#cb4-10"></a><span class="kw">defp</span> match_value(%{<span class="va">rest:</span> <span class="st">&quot;null&quot;</span> <span class="op">&lt;&gt;</span> rest}), <span class="kw">do</span>: <span class="cn">Result</span><span class="op">.</span>success(%{<span class="va">result:</span> <span class="cn">nil</span>, <span class="va">rest:</span> rest})</span>
<span id="cb4-11"><a href="#cb4-11"></a><span class="kw">defp</span> match_value(stat <span class="op">=</span> %{<span class="va">rest:</span> <span class="st">&quot;\&quot;&quot;</span> <span class="op">&lt;&gt;</span> _}), <span class="kw">do</span>: match_string(stat)</span>
<span id="cb4-12"><a href="#cb4-12"></a><span class="kw">defp</span> match_value(stat <span class="op">=</span> %{<span class="va">rest:</span> <span class="st">&quot;[&quot;</span> <span class="op">&lt;&gt;</span> _}), <span class="kw">do</span>: match_array(stat)</span>
<span id="cb4-13"><a href="#cb4-13"></a><span class="kw">defp</span> match_value(stat <span class="op">=</span> %{<span class="va">rest:</span> <span class="st">&quot;{&quot;</span> <span class="op">&lt;&gt;</span> _}), <span class="kw">do</span>: match_object(stat)</span>
<span id="cb4-14"><a href="#cb4-14"></a><span class="kw">defp</span> match_value(stat), <span class="kw">do</span>: match_number(stat)</span></code></pre></div>
<p><code>match_xxx</code> 系の関数は全て前述した <code>Result e a</code> 型を返すイメージ(<code>e</code> も <code>a</code> も前述した状態の連想配列だが)．</p>
<h3 id="オブジェクトのパース">オブジェクトのパース</h3>
<p><code>{}</code> で囲まれた連想配列のようなもの，例えば <code>{ &quot;key&quot; : true }</code> がオブジェクトだ:</p>
<div class="sourceCode" id="cb5"><pre class="sourceCode txt"><code class="sourceCode default"><span id="cb5-1"><a href="#cb5-1"></a>object</span>
<span id="cb5-2"><a href="#cb5-2"></a>  := &#39;{&#39; ws &#39;}&#39;</span>
<span id="cb5-3"><a href="#cb5-3"></a>   | &#39;{&#39; members &#39;}&#39;</span>
<span id="cb5-4"><a href="#cb5-4"></a></span>
<span id="cb5-5"><a href="#cb5-5"></a>members</span>
<span id="cb5-6"><a href="#cb5-6"></a>  := member</span>
<span id="cb5-7"><a href="#cb5-7"></a>   | member &#39;,&#39; members</span>
<span id="cb5-8"><a href="#cb5-8"></a></span>
<span id="cb5-9"><a href="#cb5-9"></a>member</span>
<span id="cb5-10"><a href="#cb5-10"></a>  := ws string ws &#39;:&#39; element</span>
<span id="cb5-11"><a href="#cb5-11"></a></span>
<span id="cb5-12"><a href="#cb5-12"></a>string</span>
<span id="cb5-13"><a href="#cb5-13"></a>  := ... // 文字列</span></code></pre></div>
<p>文字列の部分はあとで実装するとして，他の部分だけをパターンマッチとパイプを利用して実装するとこんな感じ:</p>
<div class="sourceCode" id="cb6"><pre class="sourceCode elixir"><code class="sourceCode elixir"><span id="cb6-1"><a href="#cb6-1"></a><span class="co"># parse_when_unmatch_by(stat, char, parser) は</span></span>
<span id="cb6-2"><a href="#cb6-2"></a><span class="co"># char の文字列にマッチしなければ parser を実行し</span></span>
<span id="cb6-3"><a href="#cb6-3"></a><span class="co"># マッチした場合は parser を実行せずに stat をそのまま返す</span></span>
<span id="cb6-4"><a href="#cb6-4"></a><span class="kw">defp</span> match_object(stat) <span class="kw">do</span></span>
<span id="cb6-5"><a href="#cb6-5"></a>  match_left_par(stat)                               <span class="co"># `{` にマッチ</span></span>
<span id="cb6-6"><a href="#cb6-6"></a>  <span class="op">|&gt;</span> <span class="cn">Result</span><span class="op">.</span>map(<span class="op">&amp;</span>trim_leading(<span class="op">&amp;</span><span class="dv">1</span>))                   <span class="co"># 空白除去</span></span>
<span id="cb6-7"><a href="#cb6-7"></a>  <span class="op">|&gt;</span> <span class="cn">Result</span><span class="op">.</span>and_then(<span class="op">&amp;</span>update_stat(<span class="op">&amp;</span><span class="dv">1</span>, <span class="va">:result</span>, %{})) <span class="co"># 状態の result を空オブジェクト %{} に更新</span></span>
<span id="cb6-8"><a href="#cb6-8"></a>  <span class="op">|&gt;</span> <span class="cn">Result</span><span class="op">.</span>and_then(<span class="op">&amp;</span>parse_when_unmatch_by(<span class="op">&amp;</span><span class="dv">1</span>, <span class="st">&quot;}&quot;</span>, <span class="kw">fn</span> s <span class="op">-&gt;</span> match_members(s) <span class="kw">end</span>))</span>
<span id="cb6-9"><a href="#cb6-9"></a>  <span class="op">|&gt;</span> <span class="cn">Result</span><span class="op">.</span>and_then(<span class="op">&amp;</span>match_right_par(<span class="op">&amp;</span><span class="dv">1</span>))           <span class="co"># `}` にマッチ</span></span>
<span id="cb6-10"><a href="#cb6-10"></a><span class="kw">end</span></span>
<span id="cb6-11"><a href="#cb6-11"></a></span>
<span id="cb6-12"><a href="#cb6-12"></a><span class="kw">defp</span> match_members(stat) <span class="kw">do</span></span>
<span id="cb6-13"><a href="#cb6-13"></a>  match_member(stat)</span>
<span id="cb6-14"><a href="#cb6-14"></a>  <span class="op">|&gt;</span> <span class="cn">Result</span><span class="op">.</span>and_then(<span class="op">&amp;</span>match_members_tail(<span class="op">&amp;</span><span class="dv">1</span>))</span>
<span id="cb6-15"><a href="#cb6-15"></a><span class="kw">end</span></span>
<span id="cb6-16"><a href="#cb6-16"></a></span>
<span id="cb6-17"><a href="#cb6-17"></a><span class="co"># match_members_tail は members の再帰処理をする</span></span>
<span id="cb6-18"><a href="#cb6-18"></a><span class="co"># 先頭が `,` にマッチした時には再帰処理を行い</span></span>
<span id="cb6-19"><a href="#cb6-19"></a><span class="co"># マッチしない場合は stat をそのまま返す</span></span>
<span id="cb6-20"><a href="#cb6-20"></a><span class="kw">defp</span> match_members_tail(stat <span class="op">=</span> %{<span class="va">rest:</span> <span class="st">&quot;,&quot;</span> <span class="op">&lt;&gt;</span> rest}) <span class="kw">do</span></span>
<span id="cb6-21"><a href="#cb6-21"></a>  update_stat(stat, <span class="va">:rest</span>, rest)</span>
<span id="cb6-22"><a href="#cb6-22"></a>  <span class="op">|&gt;</span> <span class="cn">Result</span><span class="op">.</span>and_then(<span class="op">&amp;</span>match_members(<span class="op">&amp;</span><span class="dv">1</span>))</span>
<span id="cb6-23"><a href="#cb6-23"></a><span class="kw">end</span></span>
<span id="cb6-24"><a href="#cb6-24"></a><span class="kw">defp</span> match_members_tail(stat), <span class="kw">do</span>: <span class="cn">Result</span><span class="op">.</span>success(stat)</span>
<span id="cb6-25"><a href="#cb6-25"></a></span>
<span id="cb6-26"><a href="#cb6-26"></a><span class="kw">defp</span> match_member(stat <span class="op">=</span> %{<span class="va">result:</span> prev}) <span class="kw">do</span></span>
<span id="cb6-27"><a href="#cb6-27"></a>  <span class="co"># 空白を除去してから文字列にマッチさせてみる</span></span>
<span id="cb6-28"><a href="#cb6-28"></a>  <span class="kw">case</span> match_string(trim_leading(stat)) <span class="kw">do</span></span>
<span id="cb6-29"><a href="#cb6-29"></a>    {<span class="va">:error</span>, stat} <span class="op">-&gt;</span></span>
<span id="cb6-30"><a href="#cb6-30"></a>      <span class="cn">Result</span><span class="op">.</span>failure(stat)</span>
<span id="cb6-31"><a href="#cb6-31"></a></span>
<span id="cb6-32"><a href="#cb6-32"></a>    <span class="co"># string のパースに成功した場合にのみ，そのパース結果を `key` として残りをパースする</span></span>
<span id="cb6-33"><a href="#cb6-33"></a>    {<span class="va">:ok</span>, stat <span class="op">=</span> %{<span class="va">result:</span> key}} <span class="op">-&gt;</span></span>
<span id="cb6-34"><a href="#cb6-34"></a>      trim_leading(stat)</span>
<span id="cb6-35"><a href="#cb6-35"></a>      <span class="op">|&gt;</span> match_colon() <span class="co"># &#39;:&#39; にマッチ</span></span>
<span id="cb6-36"><a href="#cb6-36"></a>      <span class="op">|&gt;</span> <span class="cn">Result</span><span class="op">.</span>and_then(<span class="op">&amp;</span>match_element(<span class="op">&amp;</span><span class="dv">1</span>)) <span class="co">#match_element は前のと同じ</span></span>
<span id="cb6-37"><a href="#cb6-37"></a>      <span class="op">|&gt;</span> <span class="cn">Result</span><span class="op">.</span>and_then(<span class="op">&amp;</span>modify_stat(<span class="op">&amp;</span><span class="dv">1</span>, <span class="va">:result</span>, <span class="kw">fn</span> v <span class="op">-&gt;</span> <span class="cn">Map</span><span class="op">.</span>put(prev, key, v) <span class="kw">end</span>))</span>
<span id="cb6-38"><a href="#cb6-38"></a>  <span class="kw">end</span></span>
<span id="cb6-39"><a href="#cb6-39"></a><span class="kw">end</span></span></code></pre></div>
<p><code>update_stat(stat, key, value)</code> は <code>stat</code> の <code>key</code> を <code>value</code> で置き換える関数で，<code>modify_stat(stat, key, func)</code> は <code>stat</code> の <code>key</code> を <code>func</code> で更新する関数だ．</p>
<p>余談だが，Elixir は(僕が思うに)普通の関数それ自体は第一級では無いが，無名関数 <code>fn args -&gt; ... end</code> は第一級のようだ． <code>&amp;any_function(&amp;1, &amp;2)</code> などとすることで <code>fn arg1 arg2 -&gt; any_function(arg1, arg2) end</code> の糖衣構文になるっぽく，関数を関数の引数に渡す場合はこうするらしい． ただし，この記法は入れ子にできないので，<code>modify_stat</code> や <code>parse_when_unmatch_by</code> では内部の方の関数を <code>fn args -&gt; ... end</code> で直接囲っている(<a href="https://stackoverflow.com/questions/38217426/can-i-nest-anonymous-functions-in-elixir">参照</a>)．</p>
<h3 id="配列のパース">配列のパース</h3>
<div class="sourceCode" id="cb7"><pre class="sourceCode txt"><code class="sourceCode default"><span id="cb7-1"><a href="#cb7-1"></a>array</span>
<span id="cb7-2"><a href="#cb7-2"></a>  := &#39;[&#39; ws &#39;]&#39;</span>
<span id="cb7-3"><a href="#cb7-3"></a>   | &#39;[&#39; elements &#39;]&#39;</span>
<span id="cb7-4"><a href="#cb7-4"></a></span>
<span id="cb7-5"><a href="#cb7-5"></a>elements</span>
<span id="cb7-6"><a href="#cb7-6"></a>  := element</span>
<span id="cb7-7"><a href="#cb7-7"></a>   | element &#39;,&#39; elements</span></code></pre></div>
<p>実は <code>{}</code> が <code>[]</code> になっただけで，だいたいオブジェクトと同じだ:</p>
<div class="sourceCode" id="cb8"><pre class="sourceCode elixir"><code class="sourceCode elixir"><span id="cb8-1"><a href="#cb8-1"></a><span class="kw">defp</span> match_array(stat) <span class="kw">do</span></span>
<span id="cb8-2"><a href="#cb8-2"></a>  match_left_square(stat)                           <span class="co"># &#39;[&#39; にマッチ</span></span>
<span id="cb8-3"><a href="#cb8-3"></a>  <span class="op">|&gt;</span> <span class="cn">Result</span><span class="op">.</span>map(<span class="op">&amp;</span>trim_leading(<span class="op">&amp;</span><span class="dv">1</span>))                  <span class="co"># 空白除去</span></span>
<span id="cb8-4"><a href="#cb8-4"></a>  <span class="op">|&gt;</span> <span class="cn">Result</span><span class="op">.</span>and_then(<span class="op">&amp;</span>update_stat(<span class="op">&amp;</span><span class="dv">1</span>, <span class="va">:result</span>, [])) <span class="co"># 状態の result を空配列 [] に更新</span></span>
<span id="cb8-5"><a href="#cb8-5"></a>  <span class="op">|&gt;</span> <span class="cn">Result</span><span class="op">.</span>and_then(<span class="op">&amp;</span>parse_when_unmatch_by(<span class="op">&amp;</span><span class="dv">1</span>, <span class="st">&quot;]&quot;</span>, <span class="kw">fn</span> s <span class="op">-&gt;</span> match_elements(s) <span class="kw">end</span>))</span>
<span id="cb8-6"><a href="#cb8-6"></a>  <span class="op">|&gt;</span> <span class="cn">Result</span><span class="op">.</span>and_then(<span class="op">&amp;</span>match_right_square(<span class="op">&amp;</span><span class="dv">1</span>))       <span class="co"># &#39;]&#39; にマッチ</span></span>
<span id="cb8-7"><a href="#cb8-7"></a><span class="kw">end</span></span>
<span id="cb8-8"><a href="#cb8-8"></a></span>
<span id="cb8-9"><a href="#cb8-9"></a><span class="kw">defp</span> match_elements(stat <span class="op">=</span> %{<span class="va">result:</span> prev}) <span class="kw">do</span></span>
<span id="cb8-10"><a href="#cb8-10"></a>  match_element(stat)</span>
<span id="cb8-11"><a href="#cb8-11"></a>  <span class="co"># ここで状態(配列)の更新をしてる点だけが違う</span></span>
<span id="cb8-12"><a href="#cb8-12"></a>  <span class="op">|&gt;</span> <span class="cn">Result</span><span class="op">.</span>and_then(<span class="op">&amp;</span>modify_stat(<span class="op">&amp;</span><span class="dv">1</span>, <span class="va">:result</span>, <span class="kw">fn</span> v <span class="op">-&gt;</span> prev <span class="op">++</span> [v] <span class="kw">end</span>))</span>
<span id="cb8-13"><a href="#cb8-13"></a>  <span class="op">|&gt;</span> <span class="cn">Result</span><span class="op">.</span>and_then(<span class="op">&amp;</span>match_elements_tail(<span class="op">&amp;</span><span class="dv">1</span>))</span>
<span id="cb8-14"><a href="#cb8-14"></a><span class="kw">end</span></span>
<span id="cb8-15"><a href="#cb8-15"></a></span>
<span id="cb8-16"><a href="#cb8-16"></a><span class="kw">defp</span> match_elements_tail(stat <span class="op">=</span> %{<span class="va">rest:</span> <span class="st">&quot;,&quot;</span> <span class="op">&lt;&gt;</span> rest}) <span class="kw">do</span></span>
<span id="cb8-17"><a href="#cb8-17"></a>  update_stat(stat, <span class="va">:rest</span>, rest)</span>
<span id="cb8-18"><a href="#cb8-18"></a>  <span class="op">|&gt;</span> <span class="cn">Result</span><span class="op">.</span>and_then(<span class="op">&amp;</span>match_elements(<span class="op">&amp;</span><span class="dv">1</span>))</span>
<span id="cb8-19"><a href="#cb8-19"></a><span class="kw">end</span></span>
<span id="cb8-20"><a href="#cb8-20"></a><span class="kw">defp</span> match_elements_tail(stat), <span class="kw">do</span>: <span class="cn">Result</span><span class="op">.</span>success(stat)</span></code></pre></div>
<h3 id="文字列のパース">文字列のパース</h3>
<p>さぁこっからが大変． 文字列内でのエスケープをそれっぽく処理する必要がある:</p>
<div class="sourceCode" id="cb9"><pre class="sourceCode elixir"><code class="sourceCode elixir"><span id="cb9-1"><a href="#cb9-1"></a><span class="kw">defp</span> match_string(stat) <span class="kw">do</span></span>
<span id="cb9-2"><a href="#cb9-2"></a>  match_double_quote(stat)                          <span class="co"># &#39;&quot;&#39; にマッチ</span></span>
<span id="cb9-3"><a href="#cb9-3"></a>  <span class="op">|&gt;</span> <span class="cn">Result</span><span class="op">.</span>and_then(<span class="op">&amp;</span>update_stat(<span class="op">&amp;</span><span class="dv">1</span>, <span class="va">:result</span>, <span class="st">&quot;&quot;</span>)) <span class="co"># 状態の result を空文字列 &quot;&quot; に更新</span></span>
<span id="cb9-4"><a href="#cb9-4"></a>  <span class="op">|&gt;</span> <span class="cn">Result</span><span class="op">.</span>and_then(<span class="op">&amp;</span>match_characters(<span class="op">&amp;</span><span class="dv">1</span>))</span>
<span id="cb9-5"><a href="#cb9-5"></a>  <span class="op">|&gt;</span> <span class="cn">Result</span><span class="op">.</span>and_then(<span class="op">&amp;</span>match_double_quote(<span class="op">&amp;</span><span class="dv">1</span>))       <span class="co"># &#39;&quot;&#39; にマッチ</span></span>
<span id="cb9-6"><a href="#cb9-6"></a><span class="kw">end</span></span>
<span id="cb9-7"><a href="#cb9-7"></a></span>
<span id="cb9-8"><a href="#cb9-8"></a><span class="co"># どう見ても成功じゃ無いがどーせ後々エラーになるので...</span></span>
<span id="cb9-9"><a href="#cb9-9"></a><span class="kw">defp</span> match_characters(stat <span class="op">=</span> %{<span class="va">rest:</span> <span class="st">&quot;&quot;</span>}), <span class="kw">do</span>: <span class="cn">Result</span><span class="op">.</span>success(stat)</span>
<span id="cb9-10"><a href="#cb9-10"></a></span>
<span id="cb9-11"><a href="#cb9-11"></a><span class="co"># &#39;&quot;&#39; にマッチしたら終わり</span></span>
<span id="cb9-12"><a href="#cb9-12"></a><span class="kw">defp</span> match_characters(stat <span class="op">=</span> %{<span class="va">rest:</span> <span class="st">&quot;\&quot;&quot;</span> <span class="op">&lt;&gt;</span> _}), <span class="kw">do</span>: <span class="cn">Result</span><span class="op">.</span>success(stat)</span>
<span id="cb9-13"><a href="#cb9-13"></a><span class="kw">defp</span> match_characters(stat) <span class="kw">do</span></span>
<span id="cb9-14"><a href="#cb9-14"></a>  <span class="co"># &quot;\&quot; はエスケープ文字として処理する必要があるのでまずはそれ以外</span></span>
<span id="cb9-15"><a href="#cb9-15"></a>  parse_when_unmatch_by(stat, <span class="st">&quot;\\&quot;</span>, <span class="op">&amp;</span>match_noescape_characters(<span class="op">&amp;</span><span class="dv">1</span>))</span>
<span id="cb9-16"><a href="#cb9-16"></a>  <span class="op">|&gt;</span> <span class="cn">Result</span><span class="op">.</span>and_then(<span class="op">&amp;</span>match_escape(<span class="op">&amp;</span><span class="dv">1</span>))     <span class="co"># 次にエスケープ文字の処理</span></span>
<span id="cb9-17"><a href="#cb9-17"></a>  <span class="op">|&gt;</span> <span class="cn">Result</span><span class="op">.</span>and_then(<span class="op">&amp;</span>match_characters(<span class="op">&amp;</span><span class="dv">1</span>)) <span class="co"># 再帰する</span></span>
<span id="cb9-18"><a href="#cb9-18"></a><span class="kw">end</span></span></code></pre></div>
<p>関数名の通り，<code>match_noescape_characters</code> がエスケープ文字以外のパーサーで，<code>match_escape</code> がエスケープ文字のパーサーだ． <code>match_noescape_characters</code> ではまず <code>\</code> や <code>&quot;</code> を含まない文字列をマッチさせたい． しかし，パターンマッチは exclude なマッチはできないので，あんまり良く無いが正規表現でサボることにする:</p>
<div class="sourceCode" id="cb10"><pre class="sourceCode elixir"><code class="sourceCode elixir"><span id="cb10-1"><a href="#cb10-1"></a><span class="co"># エスケープされてない文字はダメっぽい</span></span>
<span id="cb10-2"><a href="#cb10-2"></a><span class="kw">defp</span> match_noescape_characters(stat <span class="op">=</span> %{<span class="va">rest:</span> <span class="st">&quot;\n&quot;</span> <span class="op">&lt;&gt;</span> _}), <span class="kw">do</span>: <span class="cn">Result</span><span class="op">.</span>failure(stat)</span>
<span id="cb10-3"><a href="#cb10-3"></a><span class="kw">defp</span> match_noescape_characters(stat <span class="op">=</span> %{<span class="va">rest:</span> <span class="st">&quot;\t&quot;</span> <span class="op">&lt;&gt;</span> _}), <span class="kw">do</span>: <span class="cn">Result</span><span class="op">.</span>failure(stat)</span>
<span id="cb10-4"><a href="#cb10-4"></a><span class="kw">defp</span> match_noescape_characters(stat <span class="op">=</span> %{<span class="va">rest:</span> <span class="st">&quot;\u0000&quot;</span> <span class="op">&lt;&gt;</span> _}), <span class="kw">do</span>: <span class="cn">Result</span><span class="op">.</span>failure(stat)</span>
<span id="cb10-5"><a href="#cb10-5"></a></span>
<span id="cb10-6"><a href="#cb10-6"></a><span class="kw">defp</span> match_noescape_characters(stat <span class="op">=</span> %{<span class="va">result:</span> prev}) <span class="kw">do</span></span>
<span id="cb10-7"><a href="#cb10-7"></a>  <span class="co"># 名前付きキャプチャ，便利</span></span>
<span id="cb10-8"><a href="#cb10-8"></a>  %{<span class="st">&quot;body&quot;</span> <span class="op">=&gt;</span> body, <span class="st">&quot;rest&quot;</span> <span class="op">=&gt;</span> rest} <span class="op">=</span></span>
<span id="cb10-9"><a href="#cb10-9"></a>    <span class="cn">Regex</span><span class="op">.</span>named_captures(<span class="op">~</span>r<span class="op">/</span>(?<span class="op">&lt;</span>body<span class="op">&gt;</span>[<span class="op">^</span>\\\<span class="st">&quot;\n\x00\t]*)(?&lt;rest&gt;.*)/s, stat[:rest])</span></span>
<span id="cb10-10"><a href="#cb10-10"></a></span>
<span id="cb10-11"><a href="#cb10-11"></a><span class="st">  update_stat(%{result: prev &lt;&gt; body}, :rest, rest)</span></span>
<span id="cb10-12"><a href="#cb10-12"></a><span class="st">end</span></span></code></pre></div>
<p>エスケープ文字は，もうパターンマッチで頑張る:</p>
<div class="sourceCode" id="cb11"><pre class="sourceCode elixir"><code class="sourceCode elixir"><span id="cb11-1"><a href="#cb11-1"></a><span class="kw">defp</span> match_escape(%{<span class="va">rest:</span> <span class="st">&quot;\\\&quot;&quot;</span> <span class="op">&lt;&gt;</span> rest, <span class="va">result:</span> prev}),</span>
<span id="cb11-2"><a href="#cb11-2"></a>  <span class="kw">do</span>: update_stat(%{<span class="va">result:</span> prev <span class="op">&lt;&gt;</span> <span class="st">&quot;\&quot;&quot;</span>}, <span class="va">:rest</span>, rest)</span>
<span id="cb11-3"><a href="#cb11-3"></a></span>
<span id="cb11-4"><a href="#cb11-4"></a><span class="kw">defp</span> match_escape(%{<span class="va">rest:</span> <span class="st">&quot;\\\\&quot;</span> <span class="op">&lt;&gt;</span> rest, <span class="va">result:</span> prev}),</span>
<span id="cb11-5"><a href="#cb11-5"></a>  <span class="kw">do</span>: update_stat(%{<span class="va">result:</span> prev <span class="op">&lt;&gt;</span> <span class="st">&quot;\\&quot;</span>}, <span class="va">:rest</span>, rest)</span>
<span id="cb11-6"><a href="#cb11-6"></a></span>
<span id="cb11-7"><a href="#cb11-7"></a><span class="kw">defp</span> match_escape(%{<span class="va">rest:</span> <span class="st">&quot;\\\/&quot;</span> <span class="op">&lt;&gt;</span> rest, <span class="va">result:</span> prev}),</span>
<span id="cb11-8"><a href="#cb11-8"></a>  <span class="kw">do</span>: update_stat(%{<span class="va">result:</span> prev <span class="op">&lt;&gt;</span> <span class="st">&quot;\/&quot;</span>}, <span class="va">:rest</span>, rest)</span>
<span id="cb11-9"><a href="#cb11-9"></a></span>
<span id="cb11-10"><a href="#cb11-10"></a><span class="kw">defp</span> match_escape(%{<span class="va">rest:</span> <span class="st">&quot;\\b&quot;</span> <span class="op">&lt;&gt;</span> rest, <span class="va">result:</span> prev}),</span>
<span id="cb11-11"><a href="#cb11-11"></a>  <span class="kw">do</span>: update_stat(%{<span class="va">result:</span> prev <span class="op">&lt;&gt;</span> <span class="st">&quot;\b&quot;</span>}, <span class="va">:rest</span>, rest)</span>
<span id="cb11-12"><a href="#cb11-12"></a></span>
<span id="cb11-13"><a href="#cb11-13"></a><span class="kw">defp</span> match_escape(%{<span class="va">rest:</span> <span class="st">&quot;\\f&quot;</span> <span class="op">&lt;&gt;</span> rest, <span class="va">result:</span> prev}),</span>
<span id="cb11-14"><a href="#cb11-14"></a>  <span class="kw">do</span>: update_stat(%{<span class="va">result:</span> prev <span class="op">&lt;&gt;</span> <span class="st">&quot;\f&quot;</span>}, <span class="va">:rest</span>, rest)</span>
<span id="cb11-15"><a href="#cb11-15"></a></span>
<span id="cb11-16"><a href="#cb11-16"></a><span class="kw">defp</span> match_escape(%{<span class="va">rest:</span> <span class="st">&quot;\\n&quot;</span> <span class="op">&lt;&gt;</span> rest, <span class="va">result:</span> prev}),</span>
<span id="cb11-17"><a href="#cb11-17"></a>  <span class="kw">do</span>: update_stat(%{<span class="va">result:</span> prev <span class="op">&lt;&gt;</span> <span class="st">&quot;\n&quot;</span>}, <span class="va">:rest</span>, rest)</span>
<span id="cb11-18"><a href="#cb11-18"></a></span>
<span id="cb11-19"><a href="#cb11-19"></a><span class="kw">defp</span> match_escape(%{<span class="va">rest:</span> <span class="st">&quot;\\r&quot;</span> <span class="op">&lt;&gt;</span> rest, <span class="va">result:</span> prev}),</span>
<span id="cb11-20"><a href="#cb11-20"></a>  <span class="kw">do</span>: update_stat(%{<span class="va">result:</span> prev <span class="op">&lt;&gt;</span> <span class="st">&quot;\r&quot;</span>}, <span class="va">:rest</span>, rest)</span>
<span id="cb11-21"><a href="#cb11-21"></a></span>
<span id="cb11-22"><a href="#cb11-22"></a><span class="kw">defp</span> match_escape(%{<span class="va">rest:</span> <span class="st">&quot;\\t&quot;</span> <span class="op">&lt;&gt;</span> rest, <span class="va">result:</span> prev}),</span>
<span id="cb11-23"><a href="#cb11-23"></a>  <span class="kw">do</span>: update_stat(%{<span class="va">result:</span> prev <span class="op">&lt;&gt;</span> <span class="st">&quot;\t&quot;</span>}, <span class="va">:rest</span>, rest)</span>
<span id="cb11-24"><a href="#cb11-24"></a></span>
<span id="cb11-25"><a href="#cb11-25"></a><span class="co"># \u1234 とかいうやつ</span></span>
<span id="cb11-26"><a href="#cb11-26"></a><span class="kw">defp</span> match_escape(stat <span class="op">=</span> %{<span class="va">rest:</span> <span class="st">&quot;\\u&quot;</span> <span class="op">&lt;&gt;</span> rest, <span class="va">result:</span> prev}) <span class="kw">do</span></span>
<span id="cb11-27"><a href="#cb11-27"></a>  <span class="co"># /.{n,m}/ で n 個以上 m 個以下にマッチする</span></span>
<span id="cb11-28"><a href="#cb11-28"></a>  <span class="kw">case</span> <span class="cn">Regex</span><span class="op">.</span>named_captures(<span class="op">~</span>r<span class="op">/</span>(?<span class="op">&lt;</span>body<span class="op">&gt;</span>[\dA<span class="op">-</span><span class="cn">Fa</span><span class="op">-</span>f]{<span class="dv">4</span>,<span class="dv">4</span>})(?<span class="op">&lt;</span>rest<span class="op">&gt;.*</span>)<span class="op">/</span>s, rest) <span class="kw">do</span></span>
<span id="cb11-29"><a href="#cb11-29"></a>    %{<span class="st">&quot;body&quot;</span> <span class="op">=&gt;</span> body, <span class="st">&quot;rest&quot;</span> <span class="op">=&gt;</span> rest} <span class="op">-&gt;</span></span>
<span id="cb11-30"><a href="#cb11-30"></a>      <span class="co"># 4桁の16進数をエスケープされた文字列として変換する</span></span>
<span id="cb11-31"><a href="#cb11-31"></a>      <span class="co"># 変換できなかった場合は nil が返ってくる</span></span>
<span id="cb11-32"><a href="#cb11-32"></a>      <span class="kw">case</span> hex_to_string(body) <span class="kw">do</span></span>
<span id="cb11-33"><a href="#cb11-33"></a>        <span class="cn">nil</span> <span class="op">-&gt;</span> <span class="cn">Result</span><span class="op">.</span>failure(stat)</span>
<span id="cb11-34"><a href="#cb11-34"></a>        hex <span class="op">-&gt;</span> update_stat(%{<span class="va">result:</span> prev <span class="op">&lt;&gt;</span> hex}, <span class="va">:rest</span>, rest)</span>
<span id="cb11-35"><a href="#cb11-35"></a>      <span class="kw">end</span></span>
<span id="cb11-36"><a href="#cb11-36"></a></span>
<span id="cb11-37"><a href="#cb11-37"></a>    _ <span class="op">-&gt;</span></span>
<span id="cb11-38"><a href="#cb11-38"></a>      <span class="cn">Result</span><span class="op">.</span>failure(stat)</span>
<span id="cb11-39"><a href="#cb11-39"></a>  <span class="kw">end</span></span>
<span id="cb11-40"><a href="#cb11-40"></a><span class="kw">end</span></span>
<span id="cb11-41"><a href="#cb11-41"></a></span>
<span id="cb11-42"><a href="#cb11-42"></a><span class="kw">defp</span> hex_to_string(str) <span class="kw">do</span></span>
<span id="cb11-43"><a href="#cb11-43"></a>  <span class="cf">try</span> <span class="kw">do</span></span>
<span id="cb11-44"><a href="#cb11-44"></a>    <span class="co"># 文字列を16進数として int 型に変換</span></span>
<span id="cb11-45"><a href="#cb11-45"></a>    {hex, _} <span class="op">=</span> <span class="cn">Integer</span><span class="op">.</span>parse(str, <span class="dv">16</span>)</span>
<span id="cb11-46"><a href="#cb11-46"></a>    <span class="op">&lt;&lt;</span><span class="va">hex::utf8</span><span class="op">&gt;&gt;</span> <span class="co"># こういう記法で int を16進数でエスケープされた文字列に変換できる</span></span>
<span id="cb11-47"><a href="#cb11-47"></a>  <span class="cf">rescue</span></span>
<span id="cb11-48"><a href="#cb11-48"></a>    _ <span class="op">-&gt;</span> <span class="cn">nil</span></span>
<span id="cb11-49"><a href="#cb11-49"></a>  <span class="kw">end</span></span>
<span id="cb11-50"><a href="#cb11-50"></a><span class="kw">end</span></span></code></pre></div>
<p>まぁ正直，色々と雑で漏れてるケースもきっとあるのだが，そんな変な JSON をパースしたいわけでは無いのでこれでいいかな．</p>
<h3 id="数値のパース">数値のパース</h3>
<p>数値は，マイナス符号・整数・浮動小数点数・<code>e</code>記法を網羅する必要がある． これも，めんどくさいので正規表現に頼っちゃう:</p>
<div class="sourceCode" id="cb12"><pre class="sourceCode elixir"><code class="sourceCode elixir"><span id="cb12-1"><a href="#cb12-1"></a><span class="kw">defp</span> match_number(stat) <span class="kw">do</span></span>
<span id="cb12-2"><a href="#cb12-2"></a>  {value, rest} <span class="op">=</span> compile_number(stat[<span class="va">:rest</span>])</span>
<span id="cb12-3"><a href="#cb12-3"></a></span>
<span id="cb12-4"><a href="#cb12-4"></a>  <span class="co"># 文字列から数値を取得できなかった場合は nil が返ってくる</span></span>
<span id="cb12-5"><a href="#cb12-5"></a>  <span class="kw">case</span> value <span class="kw">do</span></span>
<span id="cb12-6"><a href="#cb12-6"></a>    <span class="cn">nil</span> <span class="op">-&gt;</span></span>
<span id="cb12-7"><a href="#cb12-7"></a>      <span class="cn">Result</span><span class="op">.</span>failure(stat)</span>
<span id="cb12-8"><a href="#cb12-8"></a></span>
<span id="cb12-9"><a href="#cb12-9"></a>    _ <span class="op">-&gt;</span></span>
<span id="cb12-10"><a href="#cb12-10"></a>      <span class="cn">Map</span><span class="op">.</span>put(stat, <span class="va">:result</span>, value)</span>
<span id="cb12-11"><a href="#cb12-11"></a>      <span class="op">|&gt;</span> <span class="cn">Map</span><span class="op">.</span>put(<span class="va">:rest</span>, rest)</span>
<span id="cb12-12"><a href="#cb12-12"></a>      <span class="op">|&gt;</span> <span class="cn">Result</span><span class="op">.</span>success()</span>
<span id="cb12-13"><a href="#cb12-13"></a>  <span class="kw">end</span></span>
<span id="cb12-14"><a href="#cb12-14"></a><span class="kw">end</span></span>
<span id="cb12-15"><a href="#cb12-15"></a></span>
<span id="cb12-16"><a href="#cb12-16"></a><span class="kw">def</span> compile_number(str) <span class="kw">do</span></span>
<span id="cb12-17"><a href="#cb12-17"></a>  <span class="co"># 名前付きキャプチャ，超便利</span></span>
<span id="cb12-18"><a href="#cb12-18"></a>  <span class="co"># minus は `-`，digit は整数部，frac は小数点以下，exp は `e`記法 (`10e-2`とか)</span></span>
<span id="cb12-19"><a href="#cb12-19"></a>  %{<span class="st">&quot;minus&quot;</span> <span class="op">=&gt;</span> minus, <span class="st">&quot;digit&quot;</span> <span class="op">=&gt;</span> digit, <span class="st">&quot;frac&quot;</span> <span class="op">=&gt;</span> frac, <span class="st">&quot;exp&quot;</span> <span class="op">=&gt;</span> exp, <span class="st">&quot;rest&quot;</span> <span class="op">=&gt;</span> rest} <span class="op">=</span></span>
<span id="cb12-20"><a href="#cb12-20"></a>    <span class="cn">Regex</span><span class="op">.</span>named_captures(</span>
<span id="cb12-21"><a href="#cb12-21"></a>      <span class="op">~</span>r<span class="op">/</span>(?<span class="op">&lt;</span>minus<span class="op">&gt;-</span>?)(?<span class="op">&lt;</span>digit<span class="op">&gt;</span>[[<span class="va">:digit</span>:]]<span class="op">*</span>)(?<span class="op">&lt;</span>frac<span class="op">&gt;</span>\<span class="op">.</span>?[[<span class="va">:digit</span>:]]<span class="op">*</span>)(?<span class="op">&lt;</span>exp<span class="op">&gt;</span>[eE]?[<span class="op">-+</span>]?[[<span class="va">:digit</span>:]]<span class="op">*</span>)(?<span class="op">&lt;</span>rest<span class="op">&gt;.*</span>)<span class="op">/</span>s,</span>
<span id="cb12-22"><a href="#cb12-22"></a>      str</span>
<span id="cb12-23"><a href="#cb12-23"></a>    )</span>
<span id="cb12-24"><a href="#cb12-24"></a></span>
<span id="cb12-25"><a href="#cb12-25"></a>  value <span class="op">=</span></span>
<span id="cb12-26"><a href="#cb12-26"></a>    <span class="kw">case</span> {digit, frac, exp} <span class="kw">do</span></span>
<span id="cb12-27"><a href="#cb12-27"></a>      {<span class="st">&quot;&quot;</span>, _, _} <span class="op">-&gt;</span></span>
<span id="cb12-28"><a href="#cb12-28"></a>        <span class="cn">nil</span> <span class="co"># 整数部が無い場合はダメ</span></span>
<span id="cb12-29"><a href="#cb12-29"></a></span>
<span id="cb12-30"><a href="#cb12-30"></a>      {<span class="st">&quot;0&quot;</span> <span class="op">&lt;&gt;</span> num, <span class="st">&quot;&quot;</span>, <span class="st">&quot;&quot;</span>} <span class="kw">when</span> num<span class="op"> !=</span> <span class="st">&quot;&quot;</span> <span class="op">-&gt;</span></span>
<span id="cb12-31"><a href="#cb12-31"></a>        <span class="cn">nil</span> <span class="co"># 0 から始まる整数もダメ(小数はOK)</span></span>
<span id="cb12-32"><a href="#cb12-32"></a></span>
<span id="cb12-33"><a href="#cb12-33"></a>      {_, <span class="st">&quot;.&quot;</span> <span class="op">&lt;&gt;</span> num, _} <span class="kw">when</span> num <span class="op">==</span> <span class="st">&quot;&quot;</span> <span class="op">-&gt;</span></span>
<span id="cb12-34"><a href="#cb12-34"></a>        <span class="cn">nil</span> <span class="co"># 小数点だけはダメ</span></span>
<span id="cb12-35"><a href="#cb12-35"></a></span>
<span id="cb12-36"><a href="#cb12-36"></a>      {_, _, <span class="st">&quot;e&quot;</span> <span class="op">&lt;&gt;</span> num} <span class="kw">when</span> num <span class="op">==</span> <span class="st">&quot;&quot;</span> <span class="op">-&gt;</span></span>
<span id="cb12-37"><a href="#cb12-37"></a>        <span class="cn">nil</span> <span class="co"># e だけはダメ</span></span>
<span id="cb12-38"><a href="#cb12-38"></a></span>
<span id="cb12-39"><a href="#cb12-39"></a>      {_, _, <span class="st">&quot;E&quot;</span> <span class="op">&lt;&gt;</span> num} <span class="kw">when</span> num <span class="op">==</span> <span class="st">&quot;&quot;</span> <span class="op">-&gt;</span></span>
<span id="cb12-40"><a href="#cb12-40"></a>        <span class="cn">nil</span> <span class="co"># E だけはダメ</span></span>
<span id="cb12-41"><a href="#cb12-41"></a></span>
<span id="cb12-42"><a href="#cb12-42"></a>      {_, <span class="st">&quot;&quot;</span>, <span class="st">&quot;&quot;</span>} <span class="op">-&gt;</span> <span class="co"># これは整数の場合</span></span>
<span id="cb12-43"><a href="#cb12-43"></a>        <span class="kw">case</span> <span class="cn">Integer</span><span class="op">.</span>parse(minus <span class="op">&lt;&gt;</span> digit) <span class="kw">do</span></span>
<span id="cb12-44"><a href="#cb12-44"></a>          {num, <span class="st">&quot;&quot;</span>} <span class="op">-&gt;</span> num</span>
<span id="cb12-45"><a href="#cb12-45"></a>          _ <span class="op">-&gt;</span> <span class="cn">nil</span></span>
<span id="cb12-46"><a href="#cb12-46"></a>        <span class="kw">end</span></span>
<span id="cb12-47"><a href="#cb12-47"></a></span>
<span id="cb12-48"><a href="#cb12-48"></a>      _ <span class="op">-&gt;</span> <span class="co"># これは浮動小数点数の場合</span></span>
<span id="cb12-49"><a href="#cb12-49"></a>        <span class="kw">case</span> <span class="cn">Float</span><span class="op">.</span>parse(minus <span class="op">&lt;&gt;</span> digit <span class="op">&lt;&gt;</span> frac <span class="op">&lt;&gt;</span> exp) <span class="kw">do</span></span>
<span id="cb12-50"><a href="#cb12-50"></a>          {num, <span class="st">&quot;&quot;</span>} <span class="op">-&gt;</span> num</span>
<span id="cb12-51"><a href="#cb12-51"></a>          _ <span class="op">-&gt;</span> <span class="cn">nil</span></span>
<span id="cb12-52"><a href="#cb12-52"></a>        <span class="kw">end</span></span>
<span id="cb12-53"><a href="#cb12-53"></a>    <span class="kw">end</span></span>
<span id="cb12-54"><a href="#cb12-54"></a></span>
<span id="cb12-55"><a href="#cb12-55"></a>  {value, rest}</span>
<span id="cb12-56"><a href="#cb12-56"></a><span class="kw">end</span></span></code></pre></div>
<p>これでとりあえず完成．</p>
<h2 id="テストする">テストする</h2>
<p>JSON のテストスイートとして <a href="https://github.com/nst/JSONTestSuite">nst/JSONTestSuite</a> と言うのがあるので使わせてもらう． こんな感じに配置する:</p>
<div class="sourceCode" id="cb13"><pre class="sourceCode txt"><code class="sourceCode default"><span id="cb13-1"><a href="#cb13-1"></a>\</span>
<span id="cb13-2"><a href="#cb13-2"></a>|- lib // elixir のコード置き場</span>
<span id="cb13-3"><a href="#cb13-3"></a>|- test</span>
<span id="cb13-4"><a href="#cb13-4"></a>|  |- fixture</span>
<span id="cb13-5"><a href="#cb13-5"></a>|  |  \- test_parsing // JSONTestSuite のテスト用 JSON ファイル群</span>
<span id="cb13-6"><a href="#cb13-6"></a>|  \- json_spec.exs</span>
<span id="cb13-7"><a href="#cb13-7"></a>\- mix.exs</span></code></pre></div>
<p>テストには espec を使ってこんな感じに記述した:</p>
<div class="sourceCode" id="cb14"><pre class="sourceCode elixir"><code class="sourceCode elixir"><span id="cb14-1"><a href="#cb14-1"></a><span class="co"># json_spec.exs</span></span>
<span id="cb14-2"><a href="#cb14-2"></a><span class="kw">defmodule</span> <span class="cn">JSONSuite</span> <span class="kw">do</span></span>
<span id="cb14-3"><a href="#cb14-3"></a>  <span class="kw">def</span> test_suite <span class="kw">do</span></span>
<span id="cb14-4"><a href="#cb14-4"></a>    [</span>
<span id="cb14-5"><a href="#cb14-5"></a>      <span class="co"># エラーケース</span></span>
<span id="cb14-6"><a href="#cb14-6"></a>      {<span class="st">&quot;n_array_1_true_without_comma.json&quot;</span>, {<span class="va">:error</span>, <span class="cn">nil</span>}},</span>
<span id="cb14-7"><a href="#cb14-7"></a>      {<span class="st">&quot;n_array_a_invalid_utf8.json&quot;</span>, {<span class="va">:error</span>, <span class="cn">nil</span>}},</span>
<span id="cb14-8"><a href="#cb14-8"></a>      <span class="op">...</span></span>
<span id="cb14-9"><a href="#cb14-9"></a>      <span class="co"># 成功ケース</span></span>
<span id="cb14-10"><a href="#cb14-10"></a>      {<span class="st">&quot;y_array_arraysWithSpaces.json&quot;</span>, {<span class="va">:ok</span>, [[]]}},</span>
<span id="cb14-11"><a href="#cb14-11"></a>      {<span class="st">&quot;y_array_empty-string.json&quot;</span>, {<span class="va">:ok</span>, [<span class="st">&quot;&quot;</span>]}},</span>
<span id="cb14-12"><a href="#cb14-12"></a>      <span class="op">...</span></span>
<span id="cb14-13"><a href="#cb14-13"></a>    ]</span>
<span id="cb14-14"><a href="#cb14-14"></a>  <span class="kw">end</span></span>
<span id="cb14-15"><a href="#cb14-15"></a><span class="kw">end</span></span>
<span id="cb14-16"><a href="#cb14-16"></a></span>
<span id="cb14-17"><a href="#cb14-17"></a><span class="co"># JSONSuite を先に宣言しないと使えなかった</span></span>
<span id="cb14-18"><a href="#cb14-18"></a><span class="kw">defmodule</span> <span class="cn">JSONSpec</span> <span class="kw">do</span></span>
<span id="cb14-19"><a href="#cb14-19"></a>  <span class="im">use</span> <span class="cn">ESpec</span></span>
<span id="cb14-20"><a href="#cb14-20"></a>  <span class="im">alias</span> <span class="cn">ThankYouStars</span><span class="op">.</span><span class="cn">JSON</span>, <span class="va">as:</span> <span class="cn">JSON</span></span>
<span id="cb14-21"><a href="#cb14-21"></a>  <span class="im">alias</span> <span class="cn">ThankYouStars</span><span class="op">.</span><span class="cn">Result</span>, <span class="va">as:</span> <span class="cn">Result</span></span>
<span id="cb14-22"><a href="#cb14-22"></a></span>
<span id="cb14-23"><a href="#cb14-23"></a>  describe <span class="st">&quot;JSON.decode&quot;</span> <span class="kw">do</span></span>
<span id="cb14-24"><a href="#cb14-24"></a>    <span class="cn">Enum</span><span class="op">.</span>map(<span class="cn">JSONSuite</span><span class="op">.</span>test_suite(), <span class="kw">fn</span> {path, result} <span class="op">-&gt;</span></span>
<span id="cb14-25"><a href="#cb14-25"></a>      context path <span class="kw">do</span></span>
<span id="cb14-26"><a href="#cb14-26"></a>        <span class="co"># 変数を利用するには unquote する必要がある(マクロのせい？)</span></span>
<span id="cb14-27"><a href="#cb14-27"></a>        let(<span class="va">:json</span>, <span class="kw">do</span>: <span class="cn">File</span><span class="op">.</span>read!(<span class="st">&quot;test/fixture/test_parsing/</span><span class="ot">#{</span><span class="kw">unquote</span>(path)<span class="ot">}</span><span class="st">&quot;</span>))</span>
<span id="cb14-28"><a href="#cb14-28"></a>        it(</span>
<span id="cb14-29"><a href="#cb14-29"></a>          <span class="kw">do</span>:</span>
<span id="cb14-30"><a href="#cb14-30"></a>            <span class="cn">Result</span><span class="op">.</span>map_error(<span class="cn">JSON</span><span class="op">.</span>decode(json()), <span class="kw">fn</span> _ <span class="op">-&gt;</span> <span class="cn">nil</span> <span class="kw">end</span>)</span>
<span id="cb14-31"><a href="#cb14-31"></a>            <span class="op">|&gt;</span> to(eq(<span class="kw">unquote</span>(<span class="cn">Macro</span><span class="op">.</span>escape(result))))</span>
<span id="cb14-32"><a href="#cb14-32"></a>        )</span>
<span id="cb14-33"><a href="#cb14-33"></a>      <span class="kw">end</span></span>
<span id="cb14-34"><a href="#cb14-34"></a>    <span class="kw">end</span>)</span>
<span id="cb14-35"><a href="#cb14-35"></a>  <span class="kw">end</span></span>
<span id="cb14-36"><a href="#cb14-36"></a><span class="kw">end</span></span></code></pre></div>
<p><code>unquote</code> やらモジュールの順序周りやら結構苦労した． なお，いくつかテストの通らない JSONTestSuite のケースがあるので，そう言うのはとりあえずコメントアウトしてる．</p>
<h2 id="おしまい">おしまい</h2>
<p>意外と綺麗にかけて満足． なお，パフォーマンスは無視してる笑．</p>
  </div>]]></summary>
</entry>

</feed>
