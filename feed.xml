<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
    <title>ひげメモ</title>
    <link href="https://matsubara0507.github.io/feed.xml" rel="self" />
    <link href="https://matsubara0507.github.io" />
    <id>https://matsubara0507.github.io/feed.xml</id>
    <author>
        <name>MATSUBARA Nobutada</name>
        <email></email>
    </author>
    <updated>2018-02-19T00:00:00Z</updated>
    <entry>
    <title>自己紹介ページを生成する whoami CLI を作った (Haskell)</title>
    <link href="https://matsubara0507.github.io/posts/2018-02-19-create-whoami-cli.html" />
    <id>https://matsubara0507.github.io/posts/2018-02-19-create-whoami-cli.html</id>
    <published>2018-02-19T00:00:00Z</published>
    <updated>2018-02-19T00:00:00Z</updated>
    <summary type="html"><![CDATA[<article class="post card" itemscope itemtype="http://schema.org/BlogPosting">
 <div class="card-content">
  <header class="post-header">
    <h1 class="post-title" itemprop="name headline">自己紹介ページを生成する whoami CLI を作った (Haskell)</h1>
    <p class="post-meta">
      <time datetime="2018-02-19" itemprop="datePublished">
        Feb 19, 2018
      </time>
      
      
      <div class="tags">
          <i class="fa fa-tags"></i> <a href="/tags/Haskell.html">Haskell</a> <a href="/tags/application.html">application</a> <a href="/tags/extensible-package.html">extensible-package</a>
      </div>
      
    </p>
  </header>

  <div class="post-content" itemprop="articleBody">
    <p><a href="https://github.com/matsubara0507/whoami">whoami</a> という CLI を作りました． こんな感じの Yaml ファイルから</p>
<div class="sourceCode" id="cb1"><pre class="sourceCode yaml"><code class="sourceCode yaml"><a class="sourceLine" id="cb1-1" data-line-number="1"><span class="fu">name:</span><span class="at"> MATSUBARA Nobutada</span></a>
<a class="sourceLine" id="cb1-2" data-line-number="2"><span class="fu">account:</span></a>
<a class="sourceLine" id="cb1-3" data-line-number="3">  <span class="fu">github:</span><span class="at"> matsubara0507</span></a>
<a class="sourceLine" id="cb1-4" data-line-number="4">  <span class="fu">qiita:</span><span class="at"> matsubara0507</span></a>
<a class="sourceLine" id="cb1-5" data-line-number="5"><span class="fu">site:</span></a>
<a class="sourceLine" id="cb1-6" data-line-number="6">  <span class="kw">-</span> <span class="fu">name:</span><span class="at"> ひげメモ</span></a>
<a class="sourceLine" id="cb1-7" data-line-number="7">    <span class="fu">url:</span><span class="at"> http://matsubara0507.github.io</span></a>
<a class="sourceLine" id="cb1-8" data-line-number="8">    <span class="fu">description:</span><span class="at"> メモ書きブログ</span></a>
<a class="sourceLine" id="cb1-9" data-line-number="9"><span class="fu">post:</span></a>
<a class="sourceLine" id="cb1-10" data-line-number="10">  <span class="fu">latest:</span><span class="at"> 10</span></a>
<a class="sourceLine" id="cb1-11" data-line-number="11">  <span class="fu">posts:</span></a>
<a class="sourceLine" id="cb1-12" data-line-number="12">    <span class="kw">-</span> <span class="fu">url:</span><span class="at"> http://haskell.jp/blog/posts/2017/advent-calendar-2017.html</span></a>
<a class="sourceLine" id="cb1-13" data-line-number="13">      <span class="fu">date:</span><span class="at"> 2017-12-31</span></a>
<a class="sourceLine" id="cb1-14" data-line-number="14">    <span class="kw">-</span> <span class="fu">url:</span><span class="at"> http://iggg.github.io/2017/06/01/make-tweet-slack-bot</span></a>
<a class="sourceLine" id="cb1-15" data-line-number="15"><span class="fu">library:</span></a>
<a class="sourceLine" id="cb1-16" data-line-number="16">  <span class="kw">-</span> <span class="fu">name:</span><span class="at"> chatwork</span></a>
<a class="sourceLine" id="cb1-17" data-line-number="17">    <span class="fu">url:</span><span class="at"> http://hackage.haskell.org/package/chatwork</span></a>
<a class="sourceLine" id="cb1-18" data-line-number="18">    <span class="fu">description:</span><span class="at"> The ChatWork API in Haskell</span></a>
<a class="sourceLine" id="cb1-19" data-line-number="19">    <span class="fu">language:</span><span class="at"> haskell</span></a>
<a class="sourceLine" id="cb1-20" data-line-number="20">  <span class="kw">-</span> <span class="fu">name:</span><span class="at"> thank_you_stars</span></a>
<a class="sourceLine" id="cb1-21" data-line-number="21">    <span class="fu">url:</span><span class="at"> http://hex.pm/packages/thank_you_stars</span></a>
<a class="sourceLine" id="cb1-22" data-line-number="22">    <span class="fu">language:</span><span class="at"> elixir</span></a>
<a class="sourceLine" id="cb1-23" data-line-number="23"><span class="fu">qiita:</span></a>
<a class="sourceLine" id="cb1-24" data-line-number="24">  <span class="fu">posts:</span><span class="at"> true</span></a>
<a class="sourceLine" id="cb1-25" data-line-number="25"><span class="fu">app:</span></a>
<a class="sourceLine" id="cb1-26" data-line-number="26">  <span class="kw">-</span> <span class="fu">name:</span><span class="at"> AnaQRam</span></a>
<a class="sourceLine" id="cb1-27" data-line-number="27">    <span class="fu">url:</span><span class="at"> http://github.com/matsubara0507/AnaQRam</span></a>
<a class="sourceLine" id="cb1-28" data-line-number="28">    <span class="fu">description:</span><span class="at"> QRコードを利用したアナグラム(並び替えパズル)</span></a></code></pre></div>
<p>こんな感じの Markdown を生成する．</p>
<div class="sourceCode" id="cb2"><pre class="sourceCode markdown"><code class="sourceCode markdown"><a class="sourceLine" id="cb2-1" data-line-number="1"><span class="fu"># MATSUBARA Nobutada</span></a>
<a class="sourceLine" id="cb2-2" data-line-number="2">- <span class="ot">[GitHub](https://github.com/matsubara0507)</span></a>
<a class="sourceLine" id="cb2-3" data-line-number="3"><span class="fl">- </span><span class="ot">[Qiita](https://qiita.com/matsubara0507)</span></a>
<a class="sourceLine" id="cb2-4" data-line-number="4"></a>
<a class="sourceLine" id="cb2-5" data-line-number="5"><span class="fu">## My Sites</span></a>
<a class="sourceLine" id="cb2-6" data-line-number="6">- <span class="ot">[ひげメモ](http://matsubara0507.github.io)</span></a>
<a class="sourceLine" id="cb2-7" data-line-number="7"><span class="fl">    - メモ書きブログ</span></a>
<a class="sourceLine" id="cb2-8" data-line-number="8"></a>
<a class="sourceLine" id="cb2-9" data-line-number="9"><span class="fu">## My Posts</span></a>
<a class="sourceLine" id="cb2-10" data-line-number="10">- <span class="ot">[Haskell Advent Calendar 2017 まとめ - Haskell-jp](http://haskell.jp/blog/posts/2017/advent-calendar-2017.html)</span></a>
<a class="sourceLine" id="cb2-11" data-line-number="11"><span class="fl">    - posted on 2017-12-31</span></a>
<a class="sourceLine" id="cb2-12" data-line-number="12"><span class="fl">- </span><span class="ot">[LINE の Echo Bot を Google Cloud Functions に作る](https://qiita.com/matsubara0507/items/04ab3c2197aa5f68e499)</span></a>
<a class="sourceLine" id="cb2-13" data-line-number="13"><span class="fl">    - posted on 2017-11-21</span></a>
<a class="sourceLine" id="cb2-14" data-line-number="14"><span class="fl">- </span><span class="ot">[GitHub にチャット機能のようなものが追加された (team discussions)](https://qiita.com/matsubara0507/items/47d2e2545553e415f969)</span></a>
<a class="sourceLine" id="cb2-15" data-line-number="15"><span class="fl">    - posted on 2017-11-21</span></a>
<a class="sourceLine" id="cb2-16" data-line-number="16"><span class="fl">- </span><span class="ot">[GitHub Project に自動でカードのカラム遷移をする機能が追加された](https://qiita.com/matsubara0507/items/f384991b4854aa28745a)</span></a>
<a class="sourceLine" id="cb2-17" data-line-number="17"><span class="fl">    - posted on 2017-10-31</span></a>
<a class="sourceLine" id="cb2-18" data-line-number="18"><span class="fl">- </span><span class="ot">[Slack から特定のアカウントでツイートする Bot を作った｜群馬大学電子計算機研究会 IGGG](http://iggg.github.io/2017/06/01/make-tweet-slack-bot)</span></a>
<a class="sourceLine" id="cb2-19" data-line-number="19"><span class="fl">    - posted on 2017-06-01</span></a>
<a class="sourceLine" id="cb2-20" data-line-number="20"></a>
<a class="sourceLine" id="cb2-21" data-line-number="21"><span class="fu">## Applications</span></a>
<a class="sourceLine" id="cb2-22" data-line-number="22">- <span class="ot">[AnaQRam](http://github.com/matsubara0507/AnaQRam)</span></a>
<a class="sourceLine" id="cb2-23" data-line-number="23"><span class="fl">    - QRコードを利用したアナグラム(並び替えパズル)</span></a>
<a class="sourceLine" id="cb2-24" data-line-number="24"></a>
<a class="sourceLine" id="cb2-25" data-line-number="25"><span class="fu">## Libraries</span></a>
<a class="sourceLine" id="cb2-26" data-line-number="26">- <span class="ot">[chatwork](http://hackage.haskell.org/package/chatwork)</span></a>
<a class="sourceLine" id="cb2-27" data-line-number="27"><span class="fl">    - The ChatWork API in Haskell</span></a>
<a class="sourceLine" id="cb2-28" data-line-number="28"><span class="fl">- </span><span class="ot">[thank_you_stars](http://hex.pm/packages/thank_you_stars)</span></a>
<a class="sourceLine" id="cb2-29" data-line-number="29"><span class="fl">    - A tool for starring GitHub repositories.</span></a></code></pre></div>
<p>Yaml ファイルでは足りない情報をスクレイピングや各種 Web サービスの API で拾ってくる． なんか自分のアクティビティを紹介するページを SNS にリンクしてる人が多いと思うんだけど，そのページをできるだけ楽して生成したいなぁというのがモチベーション．</p>
<h2 id="section"></h2>
<p>ホントはバイト先で作ってる Haskell 製の社内用 CLI ツールを公開したくて，内容を公開できるようにしたツールです． こんな感じのデータ処理をするツールを，バイト先では Haskell で作ってた．</p>
<h2 id="extensible">extensible</h2>
<p>このツールの(まぁまぁ)面白いところは，<a href="https://hackage.haskell.org/package/extensible">extensible</a> というパッケージの機能をふんだんに使っている． 拡張可能レコード，バリアント，作用を使い，ついでに <a href="https://hackage.haskell.org/package/extensible/docs/Data-Extensible-GetOpt.html">GetOpt</a> も使ってみた． 軽く補足しておく(<strong>但し，作者ではないので間違っている部分はあるかも</strong>)．</p>
<h3 id="拡張可能レコード">拡張可能レコード</h3>
<p>Haskell のレコード構文</p>
<div class="sourceCode" id="cb3"><pre class="sourceCode haskell"><code class="sourceCode haskell"><a class="sourceLine" id="cb3-1" data-line-number="1"><span class="kw">data</span> <span class="dt">Hoge</span> <span class="fu">=</span> {<span class="ot"> hoge1 ::</span> <span class="dt">Int</span>,<span class="ot"> hoge2 ::</span> <span class="dt">Text</span> }</a></code></pre></div>
<p>を，型レベル辞書を用いて次のように書ける．</p>
<div class="sourceCode" id="cb4"><pre class="sourceCode haskell"><code class="sourceCode haskell"><a class="sourceLine" id="cb4-1" data-line-number="1"><span class="kw">type</span> <span class="dt">Hoge</span> <span class="fu">=</span> <span class="dt">Record</span> <span class="ch">&#39;[ &quot;hoge1&quot; &gt;: Int, &quot;hoge2&quot; &gt;: Text ]</span></a></code></pre></div>
<p><code>OverloadedLabels</code> 言語拡張と組み合わせて，名前衝突の無いフィールド名を扱えたり，<code>lens</code> を用いた OOP のような参照(e.g. <code>hoge ^. #hoge1</code>)が出来る． また，<a href="/posts/2017-11-28-fun-of-extensible-1.html">レコードの拡縮もできる</a>．</p>
<h3 id="拡張可能バリアント">拡張可能バリアント</h3>
<p>次のような直和型</p>
<div class="sourceCode" id="cb5"><pre class="sourceCode haskell"><code class="sourceCode haskell"><a class="sourceLine" id="cb5-1" data-line-number="1"><span class="kw">data</span> <span class="dt">Hoge</span> <span class="fu">=</span> <span class="dt">Hoge1</span> <span class="dt">Int</span> <span class="fu">|</span> <span class="dt">Hoge2</span> <span class="dt">Text</span></a></code></pre></div>
<p>を，型レベル辞書を用いて，バリアント型のように書ける．</p>
<div class="sourceCode" id="cb6"><pre class="sourceCode haskell"><code class="sourceCode haskell"><a class="sourceLine" id="cb6-1" data-line-number="1"><span class="kw">type</span> <span class="dt">Hoge</span> <span class="fu">=</span> <span class="dt">Variant</span> <span class="ch">&#39;[ &quot;hoge1&quot; &gt;: Int, &quot;hoge2&quot; &gt;: Text ]</span></a></code></pre></div>
<p>(正直あんまり利点が分かってないけど)拡縮はもちろん，<a href="/posts/2018-01-31-fun-of-extensible-2.html">バリアントの操作関数をファイル分割して実装</a>もできる．</p>
<h3 id="拡張可能作用">拡張可能作用</h3>
<p>型レベル辞書によってモナドスタックを表現する． 今回は次のようなモナドを定義した．</p>
<div class="sourceCode" id="cb7"><pre class="sourceCode haskell"><code class="sourceCode haskell"><a class="sourceLine" id="cb7-1" data-line-number="1"><span class="kw">type</span> <span class="dt">ServiceM</span> <span class="fu">=</span> <span class="dt">Eff</span></a>
<a class="sourceLine" id="cb7-2" data-line-number="2">  <span class="ch">&#39;[ ReaderDef Config</span></a>
<a class="sourceLine" id="cb7-3" data-line-number="3">   , <span class="dt">EitherDef</span> <span class="dt">ServiceException</span></a>
<a class="sourceLine" id="cb7-4" data-line-number="4">   , <span class="dt">LoggerDef</span></a>
<a class="sourceLine" id="cb7-5" data-line-number="5">   , <span class="st">&quot;IO&quot;</span> <span class="fu">&gt;:</span> <span class="dt">IO</span></a>
<a class="sourceLine" id="cb7-6" data-line-number="6">   ]</a></code></pre></div>
<p>基本的に<a href="/posts/2017-12-09-extensible-effects-step-by-step.html">普通のモナドトランスフォーマーのように扱える</a>． じゃぁ素直にモナドトランスフォーマー使えよって感じかもしれないけど気にしないで．</p>
<h3 id="getopt-ラッパー"><code>GetOpt</code> ラッパー</h3>
<p>GHCには標準で <code>--output hoge</code> みたいな CLI のオプション引数をパースしてくれるモジュール <a href="https://hackage.haskell.org/package/base-4.10.1.0/docs/System-Console-GetOpt.html"><code>GetOpt</code></a> がある(ぼくは初めて使った)． extensible では，パース結果を拡張可能レコードにマッピングするための補助関数が<a href="https://hackage.haskell.org/package/extensible-0.4.7.1/docs/Data-Extensible-GetOpt.html">提供されている</a>．</p>
<p>キモになるのは <code>withGetOpt</code> 関数である．</p>
<div class="sourceCode" id="cb8"><pre class="sourceCode haskell"><code class="sourceCode haskell"><a class="sourceLine" id="cb8-1" data-line-number="1">withGetOpt</a>
<a class="sourceLine" id="cb8-2" data-line-number="2"><span class="ot">  ::</span> <span class="dt">MonadIO</span> m</a>
<a class="sourceLine" id="cb8-3" data-line-number="3">  <span class="ot">=&gt;</span> <span class="dt">String</span></a>
<a class="sourceLine" id="cb8-4" data-line-number="4">  <span class="ot">-&gt;</span> <span class="dt">RecordOf</span> (<span class="dt">OptionDescr</span> h) xs</a>
<a class="sourceLine" id="cb8-5" data-line-number="5">  <span class="ot">-&gt;</span> (<span class="dt">RecordOf</span> h xs <span class="ot">-&gt;</span> [<span class="dt">String</span>] <span class="ot">-&gt;</span> m a)</a>
<a class="sourceLine" id="cb8-6" data-line-number="6">  <span class="ot">-&gt;</span> m a</a></code></pre></div>
<p>一引数目の文字列はパース失敗したとき(要するにオプションが間違ってるとき)に表示する「使い方」に使われる． 例えば，whoami だと</p>
<pre><code>whoami [options] [input-file]
  -o FILE               --output=FILE                Write output to FILE instead of stdout.
  -t FORMAT, -w FORMAT  --to=FORMAT, --write=FORMAT  Specify output format. default is `markdown`.</code></pre>
<p>の <code>[options] [input-file]</code> が一引数目だ． 二引数目はオプションのパーサー(？)の定義を拡張可能レコードで与えており，三引数目がパース結果の拡張可能レコードと残りの(空白区切りの)文字列を受け取ってどうするかの振る舞いを与える．</p>
<p>まぁ詳しくは<a href="https://www.schoolofhaskell.com/user/fumieval/extensible/getopt-and-extensible-records">作者さんの記事</a>で紹介されている(英語だけど，あと一引数目の文字列はこの記事以降に追加された機能らしく，サンプルコードにはない)．</p>
<h3 id="extensible-instances">extensible-instances</h3>
<p>拡張可能レコードは全て <code>Record '[...]</code> の型エイリアスで定義する． つまり，拡張可能レコードの何らかの型クラスのインスタンスは <code>Record '[...]</code> に適用しておけば全部で使える(逆に影響力がでかいともいえる)．</p>
<p>いくつかの自作アプリーケーションでインスタンスを作っていて，ダブってたのでひとつのリポジトリにまとめた．</p>
<ul>
<li><a href="https://github.com/matsubara0507/extensible-instances">matsubara0507/extensible-instances - GitHub</a></li>
</ul>
<p>(なんか作者本人じゃないから気が引けて) Hackage にはあげてないがパッケージの体はしてるので，<a href="https://docs.haskellstack.org/en/stable/yaml_configuration/#git-and-mercurial-repos"><code>stack.yaml</code> の <code>extra-deps</code> に記述</a>することで使えるはず．</p>
<h2 id="section-1"></h2>
<p>注意点として <a href="https://github.com/fumieval/extensible">fumieval/extensible</a> の<a href="https://github.com/fumieval/extensible/blob/master/examples/aeson.hs">例にある <code>FromJSON</code> のインスタンス</a>とは微妙に実装が違う． 作者さんのは <code>Maybe a</code> にしてもキーが存在しないといけないのだが，<code>aeson</code> の <code>Generics</code> は <code>Maybe a</code> ならキーが無くても良いので，そっちに合わせた．</p>
<h2 id="仕組み">仕組み</h2>
<p>コード自体は<a href="https://github.com/matsubara0507/whoami">このリポジトリ</a>にある．</p>
<h3 id="基本的な部分">基本的な部分</h3>
<p>基本的に Yaml ファイルにはサイト・記事・ライブラリ・アプリケーションを列挙してもらう． それらは次のような型になっている(型の値として取り出せる)．</p>
<div class="sourceCode" id="cb10"><pre class="sourceCode haskell"><code class="sourceCode haskell"><a class="sourceLine" id="cb10-1" data-line-number="1"><span class="kw">type</span> <span class="dt">Config</span> <span class="fu">=</span> <span class="dt">Record</span></a>
<a class="sourceLine" id="cb10-2" data-line-number="2">  <span class="ch">&#39;[ &quot;name&quot;    &gt;: Text</span></a>
<a class="sourceLine" id="cb10-3" data-line-number="3">   , <span class="st">&quot;account&quot;</span> <span class="fu">&gt;:</span> <span class="dt">Accounts</span></a>
<a class="sourceLine" id="cb10-4" data-line-number="4">   , <span class="st">&quot;site&quot;</span>    <span class="fu">&gt;:</span> [<span class="dt">SiteConfig</span>]</a>
<a class="sourceLine" id="cb10-5" data-line-number="5">   , <span class="st">&quot;post&quot;</span>    <span class="fu">&gt;:</span> <span class="dt">Record</span> <span class="ch">&#39;[ &quot;latest&quot; &gt;: Maybe Int, &quot;posts&quot; &gt;: [PostConfig]]</span></a>
<a class="sourceLine" id="cb10-6" data-line-number="6">   , <span class="st">&quot;library&quot;</span> <span class="fu">&gt;:</span> [<span class="dt">LibConfig</span>]</a>
<a class="sourceLine" id="cb10-7" data-line-number="7">   , <span class="st">&quot;app&quot;</span>     <span class="fu">&gt;:</span> [<span class="dt">AppConfig</span>]</a>
<a class="sourceLine" id="cb10-8" data-line-number="8">   , <span class="st">&quot;qiita&quot;</span>   <span class="fu">&gt;:</span> <span class="dt">QiitaConfig</span></a>
<a class="sourceLine" id="cb10-9" data-line-number="9">   ]</a>
<a class="sourceLine" id="cb10-10" data-line-number="10"></a>
<a class="sourceLine" id="cb10-11" data-line-number="11"><span class="kw">type</span> <span class="dt">Accounts</span> <span class="fu">=</span> <span class="dt">Map</span> <span class="dt">Text</span> <span class="dt">Text</span></a>
<a class="sourceLine" id="cb10-12" data-line-number="12"><span class="kw">type</span> <span class="dt">Url</span> <span class="fu">=</span> <span class="dt">Text</span></a>
<a class="sourceLine" id="cb10-13" data-line-number="13"><span class="kw">type</span> <span class="dt">Date</span> <span class="fu">=</span> <span class="dt">Text</span></a>
<a class="sourceLine" id="cb10-14" data-line-number="14"></a>
<a class="sourceLine" id="cb10-15" data-line-number="15"><span class="kw">type</span> <span class="dt">SiteConfig</span> <span class="fu">=</span> <span class="dt">Record</span></a>
<a class="sourceLine" id="cb10-16" data-line-number="16">  <span class="ch">&#39;[ &quot;name&quot; &gt;: Text</span></a>
<a class="sourceLine" id="cb10-17" data-line-number="17">   , <span class="st">&quot;url&quot;</span>  <span class="fu">&gt;:</span> <span class="dt">Url</span></a>
<a class="sourceLine" id="cb10-18" data-line-number="18">   , <span class="st">&quot;description&quot;</span> <span class="fu">&gt;:</span> <span class="dt">Text</span></a>
<a class="sourceLine" id="cb10-19" data-line-number="19">   ]</a>
<a class="sourceLine" id="cb10-20" data-line-number="20"></a>
<a class="sourceLine" id="cb10-21" data-line-number="21"><span class="kw">type</span> <span class="dt">PostConfig</span> <span class="fu">=</span> <span class="dt">Record</span></a>
<a class="sourceLine" id="cb10-22" data-line-number="22">  <span class="ch">&#39;[ &quot;title&quot; &gt;: Maybe Text</span></a>
<a class="sourceLine" id="cb10-23" data-line-number="23">   , <span class="st">&quot;url&quot;</span>  <span class="fu">&gt;:</span> <span class="dt">Url</span></a>
<a class="sourceLine" id="cb10-24" data-line-number="24">   , <span class="st">&quot;date&quot;</span> <span class="fu">&gt;:</span> <span class="dt">Maybe</span> <span class="dt">Date</span></a>
<a class="sourceLine" id="cb10-25" data-line-number="25">   ]</a>
<a class="sourceLine" id="cb10-26" data-line-number="26"></a>
<a class="sourceLine" id="cb10-27" data-line-number="27"><span class="kw">type</span> <span class="dt">LibConfig</span> <span class="fu">=</span> <span class="dt">Record</span></a>
<a class="sourceLine" id="cb10-28" data-line-number="28">  <span class="ch">&#39;[ &quot;name&quot; &gt;: Text</span></a>
<a class="sourceLine" id="cb10-29" data-line-number="29">   , <span class="st">&quot;url&quot;</span>  <span class="fu">&gt;:</span> <span class="dt">Url</span></a>
<a class="sourceLine" id="cb10-30" data-line-number="30">   , <span class="st">&quot;description&quot;</span> <span class="fu">&gt;:</span> <span class="dt">Maybe</span> <span class="dt">Text</span></a>
<a class="sourceLine" id="cb10-31" data-line-number="31">   , <span class="st">&quot;language&quot;</span> <span class="fu">&gt;:</span> <span class="dt">Text</span></a>
<a class="sourceLine" id="cb10-32" data-line-number="32">   ]</a>
<a class="sourceLine" id="cb10-33" data-line-number="33"></a>
<a class="sourceLine" id="cb10-34" data-line-number="34"><span class="kw">type</span> <span class="dt">AppConfig</span> <span class="fu">=</span> <span class="dt">Record</span></a>
<a class="sourceLine" id="cb10-35" data-line-number="35">  <span class="ch">&#39;[ &quot;name&quot; &gt;: Text</span></a>
<a class="sourceLine" id="cb10-36" data-line-number="36">   , <span class="st">&quot;url&quot;</span>  <span class="fu">&gt;:</span> <span class="dt">Url</span></a>
<a class="sourceLine" id="cb10-37" data-line-number="37">   , <span class="st">&quot;description&quot;</span> <span class="fu">&gt;:</span> <span class="dt">Maybe</span> <span class="dt">Text</span></a>
<a class="sourceLine" id="cb10-38" data-line-number="38">   ]</a></code></pre></div>
<p><a href="https://hackage.haskell.org/package/yaml">yaml</a>パッケージを使って，Yaml ファイルから <code>Config</code> 型にデコードしてもらう． <code>Maybe a</code> になっているところは書いてあっても無くても良い項目だ．</p>
<p>そしてサイト・記事・ライブラリ・アプリケーション固有の <code>Config</code> 型を共通のフォーマットである <code>Info</code> 型に変換する手続きを型クラスを用いて定義した．</p>
<div class="sourceCode" id="cb11"><pre class="sourceCode haskell"><code class="sourceCode haskell"><a class="sourceLine" id="cb11-1" data-line-number="1"><span class="kw">type</span> <span class="dt">Info</span> <span class="fu">=</span> <span class="dt">Record</span></a>
<a class="sourceLine" id="cb11-2" data-line-number="2">  <span class="ch">&#39;[ &quot;name&quot; &gt;: Text</span></a>
<a class="sourceLine" id="cb11-3" data-line-number="3">   , <span class="st">&quot;url&quot;</span> <span class="fu">&gt;:</span> <span class="dt">Url</span></a>
<a class="sourceLine" id="cb11-4" data-line-number="4">   , <span class="st">&quot;description&quot;</span> <span class="fu">&gt;:</span> <span class="dt">Text</span></a>
<a class="sourceLine" id="cb11-5" data-line-number="5">   , <span class="st">&quot;type&quot;</span> <span class="fu">&gt;:</span> <span class="dt">ServiceType</span></a>
<a class="sourceLine" id="cb11-6" data-line-number="6">   ]</a>
<a class="sourceLine" id="cb11-7" data-line-number="7"></a>
<a class="sourceLine" id="cb11-8" data-line-number="8"><span class="kw">type</span> <span class="dt">ServiceType</span> <span class="fu">=</span> <span class="dt">Variant</span></a>
<a class="sourceLine" id="cb11-9" data-line-number="9">  <span class="ch">&#39;[ &quot;post&quot; &gt;: Post</span></a>
<a class="sourceLine" id="cb11-10" data-line-number="10">   , <span class="st">&quot;app&quot;</span>  <span class="fu">&gt;:</span> <span class="dt">Application</span></a>
<a class="sourceLine" id="cb11-11" data-line-number="11">   , <span class="st">&quot;lib&quot;</span>  <span class="fu">&gt;:</span> <span class="dt">Library</span></a>
<a class="sourceLine" id="cb11-12" data-line-number="12">   , <span class="st">&quot;site&quot;</span> <span class="fu">&gt;:</span> <span class="dt">Site</span></a>
<a class="sourceLine" id="cb11-13" data-line-number="13">   ]</a>
<a class="sourceLine" id="cb11-14" data-line-number="14"></a>
<a class="sourceLine" id="cb11-15" data-line-number="15"><span class="kw">class</span> <span class="dt">Uniform</span> a <span class="kw">where</span></a>
<a class="sourceLine" id="cb11-16" data-line-number="16"><span class="ot">  fetch ::</span> a <span class="ot">-&gt;</span> <span class="dt">ServiceM</span> <span class="dt">Data</span></a>
<a class="sourceLine" id="cb11-17" data-line-number="17"><span class="ot">  fill ::</span> a <span class="ot">-&gt;</span> <span class="dt">Data</span> <span class="ot">-&gt;</span> <span class="dt">ServiceM</span> a</a>
<a class="sourceLine" id="cb11-18" data-line-number="18"><span class="ot">  uniform ::</span> a <span class="ot">-&gt;</span> <span class="dt">ServiceM</span> <span class="dt">Info</span></a>
<a class="sourceLine" id="cb11-19" data-line-number="19"></a>
<a class="sourceLine" id="cb11-20" data-line-number="20"><span class="kw">type</span> <span class="dt">Data</span> <span class="fu">=</span> <span class="dt">Text</span></a>
<a class="sourceLine" id="cb11-21" data-line-number="21"></a>
<a class="sourceLine" id="cb11-22" data-line-number="22"><span class="ot">toInfo ::</span> <span class="dt">Uniform</span> a <span class="ot">=&gt;</span> a <span class="ot">-&gt;</span> <span class="dt">ServiceM</span> <span class="dt">Info</span></a>
<a class="sourceLine" id="cb11-23" data-line-number="23">toInfo conf <span class="fu">=</span> uniform <span class="fu">=&lt;&lt;</span> fill conf <span class="fu">=&lt;&lt;</span> fetch conf</a></code></pre></div>
<p><code>Uniform</code> 型クラスに3つの関数は</p>
<ul>
<li><code>fill</code> 関数は共通のフォーマットにするための足りない情報(<code>Maybe a</code> で <code>Nothing</code> だったところ)をスクレイピングなどで補完</li>
<li><code>fetch</code> 関数はスクレイピングするための HTML などを取ってくる</li>
<li><code>uniform</code> 関数は実際に共通フォーマットに変換する</li>
</ul>
<p>といった具合だ(正直分けなくてもいい)．</p>
<h2 id="section-2"></h2>
<p>他にも GitHub・BitBacket・GitLab なんかを全部一緒に取り扱う <code>Repo</code> とかも作ってもいいかもしれない． 問題は，自分が GitHub 以外に使ってないのでテストできない点だ．</p>
<h3 id="qiita-とか">Qiita とか</h3>
<p>Qiita とかは RESTful API を叩いて記事を集めてる． そもそも記事自体を集めるところと，<code>Uniform</code> 型クラスのインスタンスを共通化するのに <code>Service</code> 型クラスを作った(名前が微妙)．</p>
<div class="sourceCode" id="cb12"><pre class="sourceCode haskell"><code class="sourceCode haskell"><a class="sourceLine" id="cb12-1" data-line-number="1"><span class="kw">class</span> <span class="dt">Service</span> a <span class="kw">where</span></a>
<a class="sourceLine" id="cb12-2" data-line-number="2"><span class="ot">  genInfo ::</span> <span class="dt">Proxy</span> a <span class="ot">-&gt;</span> <span class="dt">ServiceM</span> [<span class="dt">Info</span>]</a></code></pre></div>
<p><code>Proxy a</code> なのはしょうがない． お好きなサービス(自分のサイトとかでも)を <code>Service</code> 型クラスのインスタンスにして，<code>Whoami</code> 型のインスタンスを書き換えれば，いろんなサイトを共通の形式で扱える．</p>
<h2 id="on-github-pages">on GitHub Pages</h2>
<p>GitHub Pages で簡単に使えるようにした． サンプルのリポジトリを作ったので，これをフォークして Travis CI と GitHub Pages を設定するだけで使えるはずだ(もちろん <code>whoami.yaml</code> を書き換えて)．</p>
<ul>
<li><a href="https://github.com/matsubara0507/whoami-example">matsubara0507/whoami-example - GitHub</a></li>
</ul>
<p>Stackage (というか Hackage)に置いていないツールを <code>stack install</code> するために，<code>package.yaml</code> と <code>stack.yaml</code> と <code>.gitignore</code> を置いてるけど気にしないで． Travis CI の定期実行を設定しておけば定期的に Qita の記事とかを更新してくれる．</p>
<h2 id="おしまい">おしまい</h2>
<p>そーいえば，UNIX 系には <code>whoami</code> というコマンドがあるんでしたね(Windowsユーザー)． 紛らわしい名前にしてしまった．</p>
  </div>
</div>
</article>
]]></summary>
</entry>
<entry>
    <title>「積み木の水槽」問題の Haskell での回答を読み解く</title>
    <link href="https://matsubara0507.github.io/posts/2018-02-04-water-towers-hs.html" />
    <id>https://matsubara0507.github.io/posts/2018-02-04-water-towers-hs.html</id>
    <published>2018-02-04T00:00:00Z</published>
    <updated>2018-02-04T00:00:00Z</updated>
    <summary type="html"><![CDATA[<article class="post card" itemscope itemtype="http://schema.org/BlogPosting">
 <div class="card-content">
  <header class="post-header">
    <h1 class="post-title" itemprop="name headline">「積み木の水槽」問題の Haskell での回答を読み解く</h1>
    <p class="post-meta">
      <time datetime="2018-02-04" itemprop="datePublished">
        Feb 4, 2018
      </time>
      
      
      <div class="tags">
          <i class="fa fa-tags"></i> <a href="/tags/Haskell.html">Haskell</a>
      </div>
      
    </p>
  </header>

  <div class="post-content" itemprop="articleBody">
    <p>今朝，バイト先で<a href="http://nabetani.sakura.ne.jp/hena/ord13blocktup/">「積み木の水槽」問題</a>の <a href="https://rosettacode.org/wiki/Water_collected_between_towers#Haskell">Haskell での回答</a>について話題になりました． リンク先の解答を見ると，恐ろしいことに，一行で書けてしまいます(正しくは，この解答では <code>nabetani</code> さんの問題は解けませんが…)．</p>
<div class="sourceCode" id="cb1"><pre class="sourceCode haskell"><code class="sourceCode haskell"><a class="sourceLine" id="cb1-1" data-line-number="1"><span class="co">-- 2 == solve [1,5,3,7,2]</span></a>
<a class="sourceLine" id="cb1-2" data-line-number="2">solve <span class="fu">=</span> sum <span class="fu">.</span> filter (<span class="fu">&gt;</span> <span class="dv">0</span>) <span class="fu">.</span> (zipWith (<span class="fu">-</span>) <span class="fu">=&lt;&lt;</span> (zipWith min <span class="fu">.</span> scanl1 max <span class="fu">&lt;*&gt;</span> scanr1 max))</a></code></pre></div>
<p>普通の Haskeller であれば，これぐらい目コンパイルして振る舞いを読み解くのは朝飯前でしょうが，Haskell 初学者のために簡単な解説を残しておこうかなと思います．</p>
<h2 id="手直し">手直し</h2>
<p>前述したとおり，そもそもこれでは <code>nabetani</code> さんの問題は解けないので，解けるように手直しします． もちろん <strong>1行で</strong> ．</p>
<div class="sourceCode" id="cb2"><pre class="sourceCode haskell"><code class="sourceCode haskell"><a class="sourceLine" id="cb2-1" data-line-number="1">solve <span class="fu">=</span> sum <span class="fu">.</span> fmap (sum <span class="fu">.</span> (zipWith (<span class="fu">-</span>) <span class="fu">=&lt;&lt;</span> (zipWith min <span class="fu">.</span> scanl1 max <span class="fu">&lt;*&gt;</span> scanr1 max)) <span class="fu">.</span> fmap (read <span class="fu">.</span> (<span class="fu">:</span> []))) <span class="fu">.</span> words <span class="fu">.</span> fmap (bool <span class="ch">&#39; &#39;</span> <span class="fu">&lt;*&gt;</span> (<span class="fu">/=</span>) <span class="ch">&#39;0&#39;</span>)</a></code></pre></div>
<p><code>Data.List</code> と <code>Data.Bool</code> を <code>import</code> してる前提だが，一応一行で書けた． 雑に直したのでもう少し短くできるような気もしますが，まぁそもそも本質的なところでないので勘弁してください．</p>
<p>ちなみに，そもそもなんで元のコードでは解けないのかというと，<code>nabetani</code> さんの問題には <code>0</code> が含むからだ． しかし，<code>0</code> で水槽を切り分けてあげて，元の解答を <code>map</code> してあげれば良いだけなのでコアのところはそのまんま(<code>filter (&gt; 0)</code> は要らない気がしたので消したけど)．</p>
<h2 id="読み解く">読み解く</h2>
<p>手直しした最終的なコードはテストコードと共に<a href="https://gist.github.com/matsubara0507/10a44fb2a9676bde9658c3eeec456676">ココ</a>にあげた．</p>
<h3 id="トップダウンに">トップダウンに</h3>
<p>順に読み解く． Haskell でプログラミングするとき(というか関数型プログラミング)はトップダウンに書いていくのが基本なので，読み解くときも上から順に切り分けてく．</p>
<div class="sourceCode" id="cb3"><pre class="sourceCode haskell"><code class="sourceCode haskell"><a class="sourceLine" id="cb3-1" data-line-number="1"><span class="ot">solve ::</span> <span class="dt">String</span> <span class="ot">-&gt;</span> <span class="dt">Int</span></a>
<a class="sourceLine" id="cb3-2" data-line-number="2">solve <span class="fu">=</span> sum <span class="fu">.</span> fmap countWater <span class="fu">.</span> splitTank</a>
<a class="sourceLine" id="cb3-3" data-line-number="3"></a>
<a class="sourceLine" id="cb3-4" data-line-number="4"><span class="ot">splitTank ::</span> <span class="dt">String</span> <span class="ot">-&gt;</span> [<span class="dt">String</span>]</a>
<a class="sourceLine" id="cb3-5" data-line-number="5">splitTank <span class="fu">=</span>  words <span class="fu">.</span> fmap (bool <span class="ch">&#39; &#39;</span> <span class="fu">&lt;*&gt;</span> (<span class="fu">/=</span>) <span class="ch">&#39;0&#39;</span>)</a>
<a class="sourceLine" id="cb3-6" data-line-number="6"></a>
<a class="sourceLine" id="cb3-7" data-line-number="7"><span class="ot">countWater ::</span> <span class="dt">String</span> <span class="ot">-&gt;</span> <span class="dt">Int</span></a>
<a class="sourceLine" id="cb3-8" data-line-number="8">countWater <span class="fu">=</span> sum <span class="fu">.</span> (zipWith (<span class="fu">-</span>) <span class="fu">=&lt;&lt;</span> (zipWith min <span class="fu">.</span> scanl1 max <span class="fu">&lt;*&gt;</span> scanr1 max)) <span class="fu">.</span> fmap (read <span class="fu">.</span> (<span class="fu">:</span> []))</a></code></pre></div>
<p><code>splitTank</code> 関数は <code>0</code> を区切り文字として文字列を切り分けてるだけだ． 悲しいことに，Haskell (というか GHC)の標準モジュールには「任意の文字で文字列を切り分ける」関数がない． なので，<code>0</code> だけを空白 <code>' '</code> に置換してから，<code>words</code> で切り分けている(空白で切り分ける関数 <code>words</code> は何故か標準にある)．</p>
<p><code>countWater</code> 関数が各水槽の水の数を数え上げており，それを最後に総和 <code>sum</code> しているだけだ．</p>
<h3 id="fmap-はわかるよね"><code>fmap</code> はわかるよね？</h3>
<p>ちなみに，さっきから出てきている <code>fmap</code> という関数はわかりますよね？ 多くの言語でも導入されている，リストや配列の各要素に関数を適用する関数(あるいはメソッド) <code>map :: (a -&gt; b) -&gt; [a] -&gt; [b]</code> をより一般化したものだ． 今回はリストにしか使わないので <code>map</code> と同義だと考えてくれていい(hlint で注意されるので，<code>fmap</code> と書く癖がついた)．</p>
<h3 id="コアの部分">コアの部分</h3>
<p>さて，本題でもある <code>countWater</code> 関数を読み解く． まずは切り分けよう．</p>
<div class="sourceCode" id="cb4"><pre class="sourceCode haskell"><code class="sourceCode haskell"><a class="sourceLine" id="cb4-1" data-line-number="1"><span class="ot">countWater ::</span> <span class="dt">String</span> <span class="ot">-&gt;</span> <span class="dt">Int</span></a>
<a class="sourceLine" id="cb4-2" data-line-number="2">countWater <span class="fu">=</span> sum <span class="fu">.</span> toWaterLine <span class="fu">.</span> toInts</a>
<a class="sourceLine" id="cb4-3" data-line-number="3"></a>
<a class="sourceLine" id="cb4-4" data-line-number="4"><span class="ot">toInts ::</span> <span class="dt">String</span> <span class="ot">-&gt;</span> [<span class="dt">Int</span>]</a>
<a class="sourceLine" id="cb4-5" data-line-number="5">toInts <span class="fu">=</span> fmap (read <span class="fu">.</span> (<span class="fu">:</span> []))</a>
<a class="sourceLine" id="cb4-6" data-line-number="6"></a>
<a class="sourceLine" id="cb4-7" data-line-number="7"><span class="ot">toWaterLine ::</span> [<span class="dt">Int</span>] <span class="ot">-&gt;</span> [<span class="dt">Int</span>]</a>
<a class="sourceLine" id="cb4-8" data-line-number="8">toWaterLine <span class="fu">=</span> zipWith (<span class="fu">-</span>) <span class="fu">=&lt;&lt;</span> (zipWith min <span class="fu">.</span> scanl1 max <span class="fu">&lt;*&gt;</span> scanr1 max)</a></code></pre></div>
<p><code>toInts</code> 関数は数列の文字列から数値のリストに変換している． Haskell で文字列を任意の型に変換するには <code>read :: String -&gt; a</code> 関数を使う． Haskell において <code>String = [Char]</code> なので，<code>fmap (: [])</code> をして <code>String</code> のリストに変換し，各文字列を <code>read</code> をしているというわけだ(<code>singleton</code> みたいな関数が標準にあればいいのに)．</p>
<p><code>toWaterLine</code> 関数が水槽の各列の水の量を計算し，<code>sum</code> で総和している． なので，重要なのは <code>toWaterLine</code> 関数だ． <code>(&lt;*&gt;)</code> 演算子や <code>(=&lt;&lt;)</code> 演算子などがあって意味不明かもしれないが，この辺りはポイントフリーにするためのツールみたいなもので，アルゴリズムの本質的な部分ではないよ．</p>
<h3 id="関数も-monad-型クラスのインスタンス">関数も <code>Monad</code> 型クラスのインスタンス</h3>
<p><code>(&lt;*&gt;)</code> 演算子や <code>(=&lt;&lt;)</code> 演算子が何をしているかと言うのは <strong>関数型 <code>(-&gt;) a</code> も <code>Monad</code> 型クラスのインスタンス</strong> だという事実を知っていれば簡単に読めますね． Haskell 界隈では常識(要出典)なので，説明しなくても良いかもしれないが，初学者のために念のためしておく．</p>
<p>それぞれの演算子の型は以下の通り(めんどいので <code>Monad</code> で統一)．</p>
<div class="sourceCode" id="cb5"><pre class="sourceCode haskell"><code class="sourceCode haskell"><a class="sourceLine" id="cb5-1" data-line-number="1"><span class="ot">(&lt;*&gt;) ::</span> <span class="dt">Monad</span> m <span class="ot">=&gt;</span> m (a <span class="ot">-&gt;</span> b) <span class="ot">-&gt;</span> m a <span class="ot">-&gt;</span> m b</a>
<a class="sourceLine" id="cb5-2" data-line-number="2"><span class="ot">(=&lt;&lt;) ::</span> <span class="dt">Monad</span> m <span class="ot">=&gt;</span> (a <span class="ot">-&gt;</span> m b) <span class="ot">-&gt;</span> m a <span class="ot">-&gt;</span> m b</a></code></pre></div>
<p>で，前述したとおり，関数型 <code>(c -&gt;)</code> も <code>Monad</code> 型クラスのインスタンスなので，<code>m = (c -&gt;)</code> と置き換えれる．</p>
<div class="sourceCode" id="cb6"><pre class="sourceCode haskell"><code class="sourceCode haskell"><a class="sourceLine" id="cb6-1" data-line-number="1"><span class="ot">(&lt;*&gt;) ::</span> (c <span class="ot">-&gt;</span> a <span class="ot">-&gt;</span> b) <span class="ot">-&gt;</span> (c <span class="ot">-&gt;</span> a) <span class="ot">-&gt;</span> (c <span class="ot">-&gt;</span> b)</a>
<a class="sourceLine" id="cb6-2" data-line-number="2"><span class="ot">(=&lt;&lt;) ::</span> (a <span class="ot">-&gt;</span> c <span class="ot">-&gt;</span> b) <span class="ot">-&gt;</span> (c <span class="ot">-&gt;</span> a) <span class="ot">-&gt;</span> (c <span class="ot">-&gt;</span> b)</a></code></pre></div>
<p>便利そうなコンビネーターになった． なので，<code>toWaterLine</code> 関数のこれらの演算子を同様のラムダ式で置き換えてあげよう．</p>
<div class="sourceCode" id="cb7"><pre class="sourceCode haskell"><code class="sourceCode haskell"><a class="sourceLine" id="cb7-1" data-line-number="1"><span class="ot">toWaterLine ::</span> [<span class="dt">Int</span>] <span class="ot">-&gt;</span> [<span class="dt">Int</span>]</a>
<a class="sourceLine" id="cb7-2" data-line-number="2">toWaterLine</a>
<a class="sourceLine" id="cb7-3" data-line-number="3">  <span class="fu">=</span> \xs <span class="ot">-&gt;</span> zipWith (<span class="fu">-</span>) ((\ys <span class="ot">-&gt;</span> (zipWith min <span class="fu">.</span> scanl1 max <span class="fu">$</span> ys) (scanr1 max ys)) xs) xs</a>
<a class="sourceLine" id="cb7-4" data-line-number="4">  <span class="fu">=</span> \xs <span class="ot">-&gt;</span> zipWith (<span class="fu">-</span>) ((\ys <span class="ot">-&gt;</span> zipWith min (scanl1 max ys) (scanr1 max ys)) xs) xs</a>
<a class="sourceLine" id="cb7-5" data-line-number="5">  <span class="fu">=</span> \xs <span class="ot">-&gt;</span> zipWith (<span class="fu">-</span>) (zipWith min (scanl1 max xs) (scanr1 max xs)) xs</a></code></pre></div>
<p>ついでに，他の言語の人では分かりにくい演算子も置き換えたので，これでどの言語の人でも読めるはずだ．</p>
<h3 id="アルゴリズム">アルゴリズム</h3>
<p>ここからは Haskell 関係ない． ひとつひとつ見ていこう．</p>
<p><code>scanl :: (b -&gt; a -&gt; b) -&gt; b -&gt; [a] -&gt; [b]</code> 関数は左畳み込み関数 <code>foldl :: (b -&gt; a -&gt; b) -&gt; b -&gt; [a] -&gt; b</code> の途中経過もリストで残したような関数だ． つまり <code>foldl f x xs = last $ scanl f x xs</code> が成り立つ． <code>scanl1 :: (a -&gt; a -&gt; a) -&gt; [a] -&gt; [a]</code> 関数は初期値を無くしたバージョンだ． <code>scanr1</code> は <code>scanl1</code> の右畳み込みバージョン．</p>
<h2 id="section"></h2>
<p><code>scanl max xs</code> は左から順に，水槽の高さを比較して高い方を残しているので，各列の最も高い左側が残る． <code>scanr1 max xs</code> は各列の最も高い右側が残る．</p>
<p><img src="/assets/water-towers-hs/water1.gif" /></p>
<p>そして，それらの低い方を残して，もとの高さを引く．</p>
<p><img src="/assets/water-towers-hs/water2.gif" /></p>
<p>すごいできた！</p>
<h2 id="試しに">試しに</h2>
<p>次のテストコードを走らせてみた．</p>
<div class="sourceCode" id="cb8"><pre class="sourceCode haskell"><code class="sourceCode haskell"><a class="sourceLine" id="cb8-1" data-line-number="1"><span class="co">-- WalterTowers.hs</span></a>
<a class="sourceLine" id="cb8-2" data-line-number="2"><span class="ot">main ::</span> <span class="dt">IO</span> ()</a>
<a class="sourceLine" id="cb8-3" data-line-number="3">main <span class="fu">=</span> print <span class="fu">$</span> all ((<span class="fu">==</span>) <span class="fu">&lt;$&gt;</span> snd <span class="fu">&lt;*&gt;</span> (show <span class="fu">.</span> solve <span class="fu">.</span> fst)) testSet</a>
<a class="sourceLine" id="cb8-4" data-line-number="4"></a>
<a class="sourceLine" id="cb8-5" data-line-number="5">solve <span class="fu">=</span> <span class="fu">...</span></a>
<a class="sourceLine" id="cb8-6" data-line-number="6"></a>
<a class="sourceLine" id="cb8-7" data-line-number="7"><span class="ot">testSet ::</span> [(<span class="dt">String</span>, <span class="dt">String</span>)]</a>
<a class="sourceLine" id="cb8-8" data-line-number="8">testSet <span class="fu">=</span></a>
<a class="sourceLine" id="cb8-9" data-line-number="9">  [ (<span class="st">&quot;83141310145169154671122&quot;</span>, <span class="st">&quot;24&quot;</span>)</a>
<a class="sourceLine" id="cb8-10" data-line-number="10">  , (<span class="st">&quot;923111128&quot;</span>, <span class="st">&quot;45&quot;</span>)</a>
<a class="sourceLine" id="cb8-11" data-line-number="11">  , (<span class="st">&quot;923101128&quot;</span>, <span class="st">&quot;1&quot;</span>)</a>
<a class="sourceLine" id="cb8-12" data-line-number="12">  , (<span class="st">&quot;903111128&quot;</span>, <span class="st">&quot;9&quot;</span>)</a>
<a class="sourceLine" id="cb8-13" data-line-number="13">  , (<span class="st">&quot;3&quot;</span>, <span class="st">&quot;0&quot;</span>)</a>
<a class="sourceLine" id="cb8-14" data-line-number="14">  , (<span class="st">&quot;31&quot;</span>, <span class="st">&quot;0&quot;</span>)</a>
<a class="sourceLine" id="cb8-15" data-line-number="15">  , (<span class="st">&quot;412&quot;</span>, <span class="st">&quot;1&quot;</span>)</a>
<a class="sourceLine" id="cb8-16" data-line-number="16">  , (<span class="st">&quot;3124&quot;</span>, <span class="st">&quot;3&quot;</span>)</a>
<a class="sourceLine" id="cb8-17" data-line-number="17">  , (<span class="st">&quot;11111&quot;</span>, <span class="st">&quot;0&quot;</span>)</a>
<a class="sourceLine" id="cb8-18" data-line-number="18">  , (<span class="st">&quot;222111&quot;</span>, <span class="st">&quot;0&quot;</span>)</a>
<a class="sourceLine" id="cb8-19" data-line-number="19">  , (<span class="st">&quot;335544&quot;</span>, <span class="st">&quot;0&quot;</span>)</a>
<a class="sourceLine" id="cb8-20" data-line-number="20">  , (<span class="st">&quot;1223455321&quot;</span>, <span class="st">&quot;0&quot;</span>)</a>
<a class="sourceLine" id="cb8-21" data-line-number="21">  , (<span class="st">&quot;000&quot;</span>, <span class="st">&quot;0&quot;</span>)</a>
<a class="sourceLine" id="cb8-22" data-line-number="22">  , (<span class="st">&quot;000100020003121&quot;</span>, <span class="st">&quot;1&quot;</span>)</a>
<a class="sourceLine" id="cb8-23" data-line-number="23">  , (<span class="st">&quot;1213141516171819181716151413121&quot;</span>, <span class="st">&quot;56&quot;</span>)</a>
<a class="sourceLine" id="cb8-24" data-line-number="24">  , (<span class="st">&quot;712131415161718191817161514131216&quot;</span>, <span class="st">&quot;117&quot;</span>)</a>
<a class="sourceLine" id="cb8-25" data-line-number="25">  , (<span class="st">&quot;712131405161718191817161514031216&quot;</span>, <span class="st">&quot;64&quot;</span>)</a>
<a class="sourceLine" id="cb8-26" data-line-number="26">  , (<span class="st">&quot;03205301204342100&quot;</span>, <span class="st">&quot;1&quot;</span>)</a>
<a class="sourceLine" id="cb8-27" data-line-number="27">  , (<span class="st">&quot;0912830485711120342&quot;</span>, <span class="st">&quot;18&quot;</span>)</a>
<a class="sourceLine" id="cb8-28" data-line-number="28">  , (<span class="st">&quot;1113241120998943327631001&quot;</span>, <span class="st">&quot;20&quot;</span>)</a>
<a class="sourceLine" id="cb8-29" data-line-number="29">  , (<span class="st">&quot;7688167781598943035023813337019904732&quot;</span>, <span class="st">&quot;41&quot;</span>)</a>
<a class="sourceLine" id="cb8-30" data-line-number="30">  , (<span class="st">&quot;2032075902729233234129146823006063388&quot;</span>, <span class="st">&quot;79&quot;</span>)</a>
<a class="sourceLine" id="cb8-31" data-line-number="31">  , (<span class="st">&quot;8323636570846582397534533&quot;</span>, <span class="st">&quot;44&quot;</span>)</a>
<a class="sourceLine" id="cb8-32" data-line-number="32">  , (<span class="st">&quot;2142555257761672319599209190604843&quot;</span>, <span class="st">&quot;41&quot;</span>)</a>
<a class="sourceLine" id="cb8-33" data-line-number="33">  , (<span class="st">&quot;06424633785085474133925235&quot;</span>, <span class="st">&quot;51&quot;</span>)</a>
<a class="sourceLine" id="cb8-34" data-line-number="34">  , (<span class="st">&quot;503144400846933212134&quot;</span>, <span class="st">&quot;21&quot;</span>)</a>
<a class="sourceLine" id="cb8-35" data-line-number="35">  , (<span class="st">&quot;1204706243676306476295999864&quot;</span>, <span class="st">&quot;21&quot;</span>)</a>
<a class="sourceLine" id="cb8-36" data-line-number="36">  , (<span class="st">&quot;050527640248767717738306306596466224&quot;</span>, <span class="st">&quot;29&quot;</span>)</a>
<a class="sourceLine" id="cb8-37" data-line-number="37">  , (<span class="st">&quot;5926294098216193922825&quot;</span>, <span class="st">&quot;65&quot;</span>)</a>
<a class="sourceLine" id="cb8-38" data-line-number="38">  , (<span class="st">&quot;655589141599534035&quot;</span>, <span class="st">&quot;29&quot;</span>)</a>
<a class="sourceLine" id="cb8-39" data-line-number="39">  , (<span class="st">&quot;7411279689677738&quot;</span>, <span class="st">&quot;34&quot;</span>)</a>
<a class="sourceLine" id="cb8-40" data-line-number="40">  , (<span class="st">&quot;268131111165754619136819109839402&quot;</span>, <span class="st">&quot;102&quot;</span>)</a>
<a class="sourceLine" id="cb8-41" data-line-number="41">  ]</a></code></pre></div>
<p><code>stack runghc</code> で走らせると．</p>
<pre><code>$ stack runghc WalterTowers.hs
True</code></pre>
<h2 id="おしまい">おしまい</h2>
<p>こういうのを自分で思いつけるようになりたいね…</p>
  </div>
</div>
</article>
]]></summary>
</entry>
<entry>
    <title>拡張可能直和型を引数に取る関数の定義 (Haskell)</title>
    <link href="https://matsubara0507.github.io/posts/2018-01-31-fun-of-extensible-2.html" />
    <id>https://matsubara0507.github.io/posts/2018-01-31-fun-of-extensible-2.html</id>
    <published>2018-01-31T00:00:00Z</published>
    <updated>2018-01-31T00:00:00Z</updated>
    <summary type="html"><![CDATA[<article class="post card" itemscope itemtype="http://schema.org/BlogPosting">
 <div class="card-content">
  <header class="post-header">
    <h1 class="post-title" itemprop="name headline">拡張可能直和型を引数に取る関数の定義 (Haskell)</h1>
    <p class="post-meta">
      <time datetime="2018-01-31" itemprop="datePublished">
        Jan 31, 2018
      </time>
      
      
      <div class="tags">
          <i class="fa fa-tags"></i> <a href="/tags/Haskell.html">Haskell</a> <a href="/tags/extensible-package.html">extensible-package</a>
      </div>
      
    </p>
  </header>

  <div class="post-content" itemprop="articleBody">
    <p>「<a href="https://hackage.haskell.org/package/extensible"><code>extensible</code></a> パッケージの楽しみ その２」です．</p>
<p>拡張可能レコードやら Extensible Effect やら，Haskell の Extensible なものを全て統一された仕組みで提供する化け物パッケージ <a href="https://hackage.haskell.org/package/extensible-0.4.7.1"><code>extensible</code></a> について，割とドキュメントには無い(？)ネタを書いておくシリーズ第二弾です． ぼく自身は作者ではないし，間違っているかもなのでこの記事を完全には当てにしないでください．</p>
<p>また，現在の最新バージョンは 0.4.7.1 です(そのバージョンでハナシをしてる)．</p>
<h2 id="section"></h2>
<p><a href="/posts/2017-11-28-fun-of-extensible-1.html">前回</a>は拡張可能レコードの拡縮の話を書きました． その最後の方に，おまけとして拡張可能直和型の話を書きました． 実際に自分のプログラムで，この拡張可能直和型を使おうとしてみたんですが，パターンマッチが分からず分岐が出来なかったので調べました，ってのが今回のハナシ．</p>
<p>今回の Haskell コードは基本的に<a href="https://github.com/matsubara0507/test-extensible/blob/master/src/Sample/Variant.hs">コレ</a>．</p>
<h2 id="拡張可能直和型">拡張可能直和型</h2>
<p>ここでは，Haskell の代数的データ型において</p>
<div class="sourceCode" id="cb1"><pre class="sourceCode haskell"><code class="sourceCode haskell"><a class="sourceLine" id="cb1-1" data-line-number="1"><span class="kw">data</span> <span class="dt">Color</span></a>
<a class="sourceLine" id="cb1-2" data-line-number="2">  <span class="fu">=</span> <span class="dt">RGB</span> <span class="dt">Int</span> <span class="dt">Int</span> <span class="dt">Int</span></a>
<a class="sourceLine" id="cb1-3" data-line-number="3">  <span class="fu">|</span> <span class="dt">CMYK</span> <span class="dt">Int</span> <span class="dt">Int</span> <span class="dt">Int</span> <span class="dt">Int</span></a></code></pre></div>
<p>のように複数の値コンストラクタをとり得る型を直和型ということにします(あんまり一般的ではない？)． このようなデータ型を extensible を使って書くと次のようになる．</p>
<div class="sourceCode" id="cb2"><pre class="sourceCode haskell"><code class="sourceCode haskell"><a class="sourceLine" id="cb2-1" data-line-number="1"><span class="kw">type</span> <span class="dt">Color</span> <span class="fu">=</span> <span class="dt">Variant</span></a>
<a class="sourceLine" id="cb2-2" data-line-number="2">  <span class="ch">&#39;[ &quot;rgb&quot;  &gt;: (Int,Int,Int)</span></a>
<a class="sourceLine" id="cb2-3" data-line-number="3">   , <span class="st">&quot;cmyk&quot;</span> <span class="fu">&gt;:</span> (<span class="dt">Int</span>,<span class="dt">Int</span>,<span class="dt">Int</span>,<span class="dt">Int</span>)</a>
<a class="sourceLine" id="cb2-4" data-line-number="4">   ]</a></code></pre></div>
<p>これが拡張可能直和型である(と呼んでいる)． 例えば次のような，<code>Color</code> 型の構造的に部分型である <code>RGB</code> 型の値を <a href="https://hackage.haskell.org/package/extensible-0.4.7.1/docs/Data-Extensible-Inclusion.html#v:spread"><code>spread</code></a> という関数を使って持ち上げることが出来る．</p>
<div class="sourceCode" id="cb3"><pre class="sourceCode haskell"><code class="sourceCode haskell"><a class="sourceLine" id="cb3-1" data-line-number="1">ghci<span class="fu">&gt;</span> <span class="kw">type</span> <span class="dt">RGB</span> <span class="fu">=</span> <span class="dt">Variant</span> <span class="ch">&#39;[ &quot;rgb&quot; &gt;: (Int,Int,Int) ]</span></a>
<a class="sourceLine" id="cb3-2" data-line-number="2">ghci<span class="fu">&gt;</span> color1 <span class="fu">=</span> embedAssoc <span class="fu">$</span> <span class="fu">#</span>rgb <span class="fu">@=</span> (<span class="dv">0</span>,<span class="dv">0</span>,<span class="dv">0</span>)<span class="ot"> ::</span> <span class="dt">RGB</span></a>
<a class="sourceLine" id="cb3-3" data-line-number="3">ghci<span class="fu">&gt;</span> color2 <span class="fu">=</span> spread<span class="ot"> color1 ::</span> <span class="dt">Color</span></a></code></pre></div>
<p>ちなみに「拡張可能直和型」って単語は，ほぼほぼ造語です(すいません)． 作者さんは <strong>Extensible Variants</strong> と書いているので，正確には拡張可能バリアント型ですかね． ML 系では「バリアント型」って単語は良く使われてますが，Haskell では馴染みが無いので「直和型」って単語を用います．</p>
<h2 id="パターンマッチ">パターンマッチ</h2>
<p>ここからが本題． 例として次のような図形の型を用いる．</p>
<div class="sourceCode" id="cb4"><pre class="sourceCode haskell"><code class="sourceCode haskell"><a class="sourceLine" id="cb4-1" data-line-number="1"><span class="kw">data</span> <span class="dt">Shape</span></a>
<a class="sourceLine" id="cb4-2" data-line-number="2">  <span class="fu">=</span> <span class="dt">Circle</span> <span class="dt">Point</span> <span class="dt">Double</span></a>
<a class="sourceLine" id="cb4-3" data-line-number="3">  <span class="fu">|</span> <span class="dt">Rect</span> <span class="dt">Point</span> <span class="dt">Point</span></a>
<a class="sourceLine" id="cb4-4" data-line-number="4"><span class="kw">type</span> <span class="dt">Point</span> <span class="fu">=</span> (<span class="dt">Double</span>, <span class="dt">Double</span>)</a></code></pre></div>
<p><code>Circle</code> が円で中心点の座標と半径を持ち，<code>Rect</code> が矩形で左下と右上の座標を持つ． 例えば，図形の面積を求める関数 <code>area</code> を書くときはパターンマッチを用いて次のように書きますよね．</p>
<div class="sourceCode" id="cb5"><pre class="sourceCode haskell"><code class="sourceCode haskell"><a class="sourceLine" id="cb5-1" data-line-number="1"><span class="ot">area ::</span> <span class="dt">Shape</span> <span class="ot">-&gt;</span> <span class="dt">Double</span></a>
<a class="sourceLine" id="cb5-2" data-line-number="2">area (<span class="dt">Circle</span> _ r) <span class="fu">=</span> pi <span class="fu">*</span> (r <span class="fu">^</span> <span class="dv">2</span>)</a>
<a class="sourceLine" id="cb5-3" data-line-number="3">area (<span class="dt">Rect</span> (x1,y1) (x2,y2)) <span class="fu">=</span> abs (x2 <span class="fu">-</span> x1) <span class="fu">*</span> abs (y2 <span class="fu">-</span> y1)</a></code></pre></div>
<p>では，この <code>Shape</code> 型を拡張可能直和型で書いてみる．</p>
<div class="sourceCode" id="cb6"><pre class="sourceCode haskell"><code class="sourceCode haskell"><a class="sourceLine" id="cb6-1" data-line-number="1"><span class="kw">type</span> <span class="dt">Shape</span> <span class="fu">=</span> <span class="dt">Variant</span></a>
<a class="sourceLine" id="cb6-2" data-line-number="2">  <span class="ch">&#39;[ &quot;circle&quot; &gt;: Circle</span></a>
<a class="sourceLine" id="cb6-3" data-line-number="3">   , <span class="st">&quot;rect&quot;</span>   <span class="fu">&gt;:</span> <span class="dt">Rect</span></a>
<a class="sourceLine" id="cb6-4" data-line-number="4">   ]</a>
<a class="sourceLine" id="cb6-5" data-line-number="5"></a>
<a class="sourceLine" id="cb6-6" data-line-number="6"><span class="kw">type</span> <span class="dt">Point</span> <span class="fu">=</span> <span class="dt">Record</span> <span class="ch">&#39;[ &quot;x&quot; &gt;: Double, &quot;y&quot; &gt;: Double ]</span></a>
<a class="sourceLine" id="cb6-7" data-line-number="7"><span class="kw">newtype</span> <span class="dt">Circle</span> <span class="fu">=</span></a>
<a class="sourceLine" id="cb6-8" data-line-number="8">  <span class="dt">Circle</span> (<span class="dt">Record</span> <span class="ch">&#39;[ &quot;mid&quot; &gt;: Point, &quot;r&quot; &gt;: Double ]) deriving (Show, Eq)</span></a>
<a class="sourceLine" id="cb6-9" data-line-number="9"><span class="kw">newtype</span> <span class="dt">Rect</span> <span class="fu">=</span></a>
<a class="sourceLine" id="cb6-10" data-line-number="10">  <span class="dt">Rect</span> (<span class="dt">Record</span> <span class="ch">&#39;[ &quot;ll&quot; &gt;: Point, &quot;ur&quot; &gt;: Point ]) deriving (Show, Eq)</span></a></code></pre></div>
<p><code>Record</code> は拡張可能レコードだ． 後の話の流れのために <code>newtype</code> で <code>Circle</code> 型と <code>Rect</code> 型を定義したが，別に型エイリアスでもいい．</p>
<p>問題はココからで，どうやって <code>area</code> 関数を定義するか． (作者さんに聞いてしまえば早いんだけど)パッケージを漁ってたらそれらしい関数 <a href="https://hackage.haskell.org/package/extensible-0.4.7.1/docs/Data-Extensible-Match.html#v:match"><code>match</code></a> があった． イロイロ試した結果，<code>match</code> よりも <a href="https://hackage.haskell.org/package/extensible-0.4.7.1/docs/Data-Extensible-Field.html#v:matchField"><code>matchField</code></a> の方が使いやすかったので，こっちを使って次のように書ける．</p>
<div class="sourceCode" id="cb7"><pre class="sourceCode haskell"><code class="sourceCode haskell"><a class="sourceLine" id="cb7-1" data-line-number="1"><span class="ot">area ::</span> <span class="dt">Shape</span> <span class="ot">-&gt;</span> <span class="dt">Double</span></a>
<a class="sourceLine" id="cb7-2" data-line-number="2">area <span class="fu">=</span> matchField</a>
<a class="sourceLine" id="cb7-3" data-line-number="3">    <span class="fu">$</span> <span class="fu">#</span>circle <span class="fu">@=</span> (\(<span class="dt">Circle</span> s) <span class="ot">-&gt;</span> pi <span class="fu">*</span> (s <span class="fu">^.</span> <span class="fu">#</span>r) <span class="fu">^</span> <span class="dv">2</span>)</a>
<a class="sourceLine" id="cb7-4" data-line-number="4">   <span class="fu">&lt;:</span> <span class="fu">#</span>rect   <span class="fu">@=</span> ((<span class="fu">*</span>) <span class="fu">&lt;$&gt;</span> width <span class="fu">&lt;*&gt;</span> height)</a>
<a class="sourceLine" id="cb7-5" data-line-number="5">   <span class="fu">&lt;:</span> nil</a>
<a class="sourceLine" id="cb7-6" data-line-number="6"></a>
<a class="sourceLine" id="cb7-7" data-line-number="7">width,<span class="ot"> height ::</span> <span class="dt">Rect</span> <span class="ot">-&gt;</span> <span class="dt">Double</span></a>
<a class="sourceLine" id="cb7-8" data-line-number="8">width  (<span class="dt">Rect</span> s) <span class="fu">=</span> abs <span class="fu">$</span> s <span class="fu">^.</span> <span class="fu">#</span>ur <span class="fu">^.</span> <span class="fu">#</span>x <span class="fu">-</span> s <span class="fu">^.</span> <span class="fu">#</span>ll <span class="fu">^.</span> <span class="fu">#</span>x</a>
<a class="sourceLine" id="cb7-9" data-line-number="9">height (<span class="dt">Rect</span> s) <span class="fu">=</span> abs <span class="fu">$</span> s <span class="fu">^.</span> <span class="fu">#</span>ur <span class="fu">^.</span> <span class="fu">#</span>y <span class="fu">-</span> s <span class="fu">^.</span> <span class="fu">#</span>ll <span class="fu">^.</span> <span class="fu">#</span>y</a></code></pre></div>
<p>意外と簡単にできた！</p>
<p>(なんでこれでうまくいくかを説明しようと思ったけど，ぼくには説明するのが難しすぎてやめた．) (ちなみに，すごい簡潔に書けるのは <a href="https://hackage.haskell.org/package/extensible-0.4.7.1/docs/Data-Extensible-Wrapper.html#t:Wrapper"><code>Wrapper</code></a> 型クラスのおかげだと思う．)</p>
<h2 id="型クラスを使う">型クラスを使う</h2>
<p>ここからが拡張可能直和型のすごいところ(パターンマッチしかできないなら普通の直和型でもいいもんね…)． 型クラスを用いて次のようにも <code>area</code> 関数を定義できる．</p>
<div class="sourceCode" id="cb8"><pre class="sourceCode haskell"><code class="sourceCode haskell"><a class="sourceLine" id="cb8-1" data-line-number="1"><span class="kw">class</span> <span class="dt">Area</span> a <span class="kw">where</span></a>
<a class="sourceLine" id="cb8-2" data-line-number="2"><span class="ot">  area ::</span> a <span class="ot">-&gt;</span> <span class="dt">Double</span></a>
<a class="sourceLine" id="cb8-3" data-line-number="3"></a>
<a class="sourceLine" id="cb8-4" data-line-number="4"><span class="kw">instance</span> <span class="dt">Area</span> <span class="dt">Circle</span> <span class="kw">where</span></a>
<a class="sourceLine" id="cb8-5" data-line-number="5">  area (<span class="dt">Circle</span> s) <span class="fu">=</span> pi <span class="fu">*</span> (s <span class="fu">^.</span> <span class="fu">#</span>r) <span class="fu">^</span> <span class="dv">2</span></a>
<a class="sourceLine" id="cb8-6" data-line-number="6"></a>
<a class="sourceLine" id="cb8-7" data-line-number="7"><span class="kw">instance</span> <span class="dt">Area</span> <span class="dt">Rect</span> <span class="kw">where</span></a>
<a class="sourceLine" id="cb8-8" data-line-number="8">  area <span class="fu">=</span> (<span class="fu">*</span>) <span class="fu">&lt;$&gt;</span> width <span class="fu">&lt;*&gt;</span> height</a>
<a class="sourceLine" id="cb8-9" data-line-number="9"></a>
<a class="sourceLine" id="cb8-10" data-line-number="10"><span class="kw">instance</span> <span class="dt">Forall</span> (<span class="dt">KeyValue</span> <span class="dt">KnownSymbol</span> <span class="dt">Area</span>) xs <span class="ot">=&gt;</span> <span class="dt">Area</span> (<span class="dt">Variant</span> xs) <span class="kw">where</span></a>
<a class="sourceLine" id="cb8-11" data-line-number="11">  area <span class="fu">=</span> matchField <span class="fu">$</span></a>
<a class="sourceLine" id="cb8-12" data-line-number="12">    htabulateFor (<span class="dt">Proxy</span><span class="ot"> ::</span> <span class="dt">Proxy</span> (<span class="dt">KeyValue</span> <span class="dt">KnownSymbol</span> <span class="dt">Area</span>)) <span class="fu">$</span></a>
<a class="sourceLine" id="cb8-13" data-line-number="13">      \_ <span class="ot">-&gt;</span> <span class="dt">Field</span> (<span class="dt">Match</span> <span class="fu">$</span> area <span class="fu">.</span> runIdentity)</a></code></pre></div>
<p><code>Forall (KeyValue KnownSymbol Area) xs</code> という型制約の直観的な解釈は，型レベルリスト <code>xs</code> の全ての要素 <code>k &gt;: v</code> が <code>KnownSymbol k</code> と <code>Area v</code> を満たす，という意味だ． 即ち，拡張可能直和型の全ての要素が <code>Area</code> 型クラスのインスタンスであれば，その拡張可能直和型は <code>Area</code> 型クラスのインスタンスになり得るのだ． ちゃんと次のように動作する．</p>
<div class="sourceCode" id="cb9"><pre class="sourceCode haskell"><code class="sourceCode haskell"><a class="sourceLine" id="cb9-1" data-line-number="1">ghci<span class="fu">&gt;</span> shape1</a>
<a class="sourceLine" id="cb9-2" data-line-number="2"><span class="dt">EmbedAt</span> <span class="fu">$</span>(mkMembership <span class="dv">0</span>) (circle <span class="fu">@=</span> <span class="dt">Circle</span> (mid <span class="fu">@=</span> (x <span class="fu">@=</span> <span class="fl">1.0</span> <span class="fu">&lt;:</span> y <span class="fu">@=</span> <span class="fl">2.0</span> <span class="fu">&lt;:</span> nil) <span class="fu">&lt;:</span> r <span class="fu">@=</span> <span class="fl">2.0</span> <span class="fu">&lt;:</span> nil))</a>
<a class="sourceLine" id="cb9-3" data-line-number="3">ghci<span class="fu">&gt;</span> <span class="fu">:</span>t shape1</a>
<a class="sourceLine" id="cb9-4" data-line-number="4"><span class="ot">shape1 ::</span> <span class="dt">Shape</span></a>
<a class="sourceLine" id="cb9-5" data-line-number="5">ghci<span class="fu">&gt;</span> area shape1</a>
<a class="sourceLine" id="cb9-6" data-line-number="6"><span class="fl">12.566370614359172</span></a></code></pre></div>
<p>これの何がすごいかと言うと，例えば次のように <code>Shape</code> 型を拡張しよう．</p>
<div class="sourceCode" id="cb10"><pre class="sourceCode haskell"><code class="sourceCode haskell"><a class="sourceLine" id="cb10-1" data-line-number="1"><span class="kw">newtype</span> <span class="dt">Triangle</span> <span class="fu">=</span></a>
<a class="sourceLine" id="cb10-2" data-line-number="2">  <span class="dt">Triangle</span> (<span class="dt">Point</span>, <span class="dt">Point</span>, <span class="dt">Point</span>) <span class="kw">deriving</span> (<span class="dt">Show</span>, <span class="dt">Eq</span>)</a>
<a class="sourceLine" id="cb10-3" data-line-number="3"></a>
<a class="sourceLine" id="cb10-4" data-line-number="4"><span class="kw">type</span> <span class="dt">Shape</span> <span class="fu">=</span> <span class="dt">Variant</span></a>
<a class="sourceLine" id="cb10-5" data-line-number="5">  <span class="ch">&#39;[ &quot;circle&quot; &gt;: Circle</span></a>
<a class="sourceLine" id="cb10-6" data-line-number="6">   , <span class="st">&quot;rect&quot;</span> <span class="fu">&gt;:</span> <span class="dt">Rect</span></a>
<a class="sourceLine" id="cb10-7" data-line-number="7">   , <span class="st">&quot;triangle&quot;</span> <span class="fu">&gt;:</span> <span class="dt">Triangle</span></a>
<a class="sourceLine" id="cb10-8" data-line-number="8">   ]</a></code></pre></div>
<p>一般的な直和型の場合は，<code>Shape</code> 型のパターンマッチしている部分を全て増やさないといけない． しかし，型クラスを用いた拡張可能直和型の関数であれば，次のようにインスタンスを増やすだけで良い．</p>
<div class="sourceCode" id="cb11"><pre class="sourceCode haskell"><code class="sourceCode haskell"><a class="sourceLine" id="cb11-1" data-line-number="1"><span class="kw">instance</span> <span class="dt">Area</span> <span class="dt">Triangle</span> <span class="kw">where</span></a>
<a class="sourceLine" id="cb11-2" data-line-number="2">  area (<span class="dt">Triangle</span> (p1, p2, p3)) <span class="fu">=</span></a>
<a class="sourceLine" id="cb11-3" data-line-number="3">    abs ((p1 <span class="fu">^.</span> <span class="fu">#</span>x <span class="fu">-</span> p3 <span class="fu">^.</span> <span class="fu">#</span>x) <span class="fu">*</span> (p2 <span class="fu">^.</span> <span class="fu">#</span>y <span class="fu">-</span> p3 <span class="fu">^.</span> <span class="fu">#</span>y) <span class="fu">-</span> (p2 <span class="fu">^.</span> <span class="fu">#</span>x <span class="fu">-</span> p3 <span class="fu">^.</span> <span class="fu">#</span>x) <span class="fu">*</span> (p1 <span class="fu">^.</span> <span class="fu">#</span>y <span class="fu">-</span> p3 <span class="fu">^.</span> <span class="fu">#</span>y)) <span class="fu">/</span> <span class="dv">2</span></a></code></pre></div>
<p>書き込んでる行数は大差ないかもしれないが，例えばファイルを分けたりなど，より柔軟に関数を定義できる！</p>
<h2 id="おしまい">おしまい</h2>
<p>ちなみに，<code>area</code> 関数は <code>a -&gt; Double</code> で返り値の型が <code>Double</code> だったから楽だった． これが，例えば座標移動をする <code>nudge :: a -&gt; Point -&gt; a</code> のように，返り値が <code>a</code> なものは <code>Variant</code> のインスタンスを定義するのが大変(<a href="https://github.com/matsubara0507/test-extensible/blob/d5e58f59ad4b1a2f4809bbecd79eeffbe04eec51/src/Sample/Variant.hs#L94">頑張った</a>)．</p>
  </div>
</div>
</article>
]]></summary>
</entry>
<entry>
    <title>AdC の Haskell 記事を Haskell で集めた</title>
    <link href="https://matsubara0507.github.io/posts/2018-01-30-scraping-posts-on-adc.html" />
    <id>https://matsubara0507.github.io/posts/2018-01-30-scraping-posts-on-adc.html</id>
    <published>2018-01-30T00:00:00Z</published>
    <updated>2018-01-30T00:00:00Z</updated>
    <summary type="html"><![CDATA[<article class="post card" itemscope itemtype="http://schema.org/BlogPosting">
 <div class="card-content">
  <header class="post-header">
    <h1 class="post-title" itemprop="name headline">AdC の Haskell 記事を Haskell で集めた</h1>
    <p class="post-meta">
      <time datetime="2018-01-30" itemprop="datePublished">
        Jan 30, 2018
      </time>
      
      
      <div class="tags">
          <i class="fa fa-tags"></i> <a href="/tags/Haskell.html">Haskell</a> <a href="/tags/application.html">application</a> <a href="/tags/scraping.html">scraping</a>
      </div>
      
    </p>
  </header>

  <div class="post-content" itemprop="articleBody">
    <p>昨年最後に，Haskell-jp へ以下の記事を寄稿しました．</p>
<ul>
<li><a href="https://haskell.jp/blog/posts/2017/advent-calendar-2017.html">Haskell Advent Calendar 2017 まとめ - Haskell-jp</a></li>
</ul>
<p>2017年のアドベントカレンダーに投稿された Haskell 記事を分類して紹介してるだけです． <a href="https://scrapbox.io/miyamoen/Elm_Advent_Calendar_2017_まとめ">Elm のやつ</a>を見かけて <del>パクリ</del> オマージュしました．</p>
<h2 id="section"></h2>
<p>分類は温もりのある手作業ですが，Haskell 記事は機械的にあ集めました． 本記事はそのために作った Haskell プログラムに関するメモ書きです．</p>
<p>全てのコードは以下のリポジトリにあります．</p>
<ul>
<li><a href="https://github.com/matsubara0507/haskell-advent-calendar">matsubara0507/haskell-advent-calendar - GitHub</a></li>
</ul>
<p>特に本質的な意味は無いんですが CLI として作っています．</p>
<h2 id="作る">作る</h2>
<p>ゴールとしては，<strong>年を指定すると Qiita と ADVENTAR の全てのカレンダーをスクレイピングして，結果(Haskell 記事のリスト)を JSON ファイルに書き出す</strong> プログラムを作る． Haskell に関する記事かどうかは，単純にカレンダーか記事のタイトルに “Haskell” という単語か含まれているかどうかで判断する．</p>
<h3 id="パッケージ">パッケージ</h3>
<p>お世話になった主要なパッケージ達を先に示しておく(<a href="https://github.com/matsubara0507/haskell-advent-calendar/blob/master/package.yaml">package.yaml</a> を見れば十分なんだけどね)．</p>
<ul>
<li><a href="https://hackage.haskell.org/package/extensible">extensible</a> : フィールド数の多いレコード型は拡張可能レコードにしちゃえ
<ul>
<li>フィールドへのアクセスには <a href="https://hackage.haskell.org/package/lens">lens</a> を用いる</li>
</ul></li>
<li><a href="https://hackage.haskell.org/package/aeson">aeson</a> : JSON の読み書きパッケージの金字塔
<ul>
<li><a href="https://hackage.haskell.org/package/aeson-pretty">aeson-pretty</a> : JSON を綺麗にインデントしてくれる</li>
</ul></li>
<li><a href="https://hackage.haskell.org/package/scalpel-core">scalpel-core</a> : スクレイパーパッケージ(core じゃなくて <a href="https://hackage.haskell.org/package/scalpel">scalpel</a> は Windows だとビルドめんどい)
<ul>
<li>Qiita の HTML の取得には <a href="https://hackage.haskell.org/package/wreq">wreq</a> を使った(操作が簡単なので)</li>
<li>ADVENTAR は React 製なので <a href="https://hackage.haskell.org/package/webdriver">webdriver</a> で Selenium を使う</li>
<li><a href="https://hackage.haskell.org/package/shelly">shelly</a> : スクレイピングが攻撃にならんよう1秒スリープ(OSに依存せずに書ける)</li>
</ul></li>
<li><a href="https://hackage.haskell.org/package/conduit-combinators">conduit-combinators</a> : ストリーミングパッケージの金字塔
<ul>
<li>コッチの方が <a href="https://hackage.haskell.org/package/conduit">conduit</a> より名前の衝突なく関数が使えるので(大本は同じ)</li>
</ul></li>
<li><a href="https://hackage.haskell.org/package/optparse-applicative">optparse-applicative</a> : CLI の引数をいい感じに処理してくれる</li>
</ul>
<p>今回の主目的ではないが，このプログラムは extensible の拡張可能レコードを用いた optparse-applicative のサンプルコードにもなっていると思う．</p>
<h3 id="記事の型を考える">記事の型を考える</h3>
<p>最低限必要なのは，記事のタイトルと URL である． 他に，記事の著者と記事が投稿されたカレンダー・日付があった方が，あとで列挙するときに映えるだろう． ということで，以下の型を考えた．</p>
<div class="sourceCode" id="cb1"><pre class="sourceCode haskell"><code class="sourceCode haskell"><a class="sourceLine" id="cb1-1" data-line-number="1"><span class="ot">{-# LANGUAGE DataKinds         #-}</span></a>
<a class="sourceLine" id="cb1-2" data-line-number="2"><span class="ot">{-# LANGUAGE TypeOperators     #-}</span></a>
<a class="sourceLine" id="cb1-3" data-line-number="3"></a>
<a class="sourceLine" id="cb1-4" data-line-number="4"><span class="kw">import</span> <span class="dt">Data.Extensible</span></a>
<a class="sourceLine" id="cb1-5" data-line-number="5"><span class="kw">import</span> <span class="dt">Data.Text</span> (<span class="dt">Text</span>)</a>
<a class="sourceLine" id="cb1-6" data-line-number="6"></a>
<a class="sourceLine" id="cb1-7" data-line-number="7"><span class="kw">type</span> <span class="dt">Post</span> <span class="fu">=</span> <span class="dt">Record</span></a>
<a class="sourceLine" id="cb1-8" data-line-number="8">   <span class="ch">&#39;[ &quot;title&quot; &gt;: Text</span></a>
<a class="sourceLine" id="cb1-9" data-line-number="9">    , <span class="st">&quot;auther&quot;</span> <span class="fu">&gt;:</span> <span class="dt">Text</span></a>
<a class="sourceLine" id="cb1-10" data-line-number="10">    , <span class="st">&quot;url&quot;</span> <span class="fu">&gt;:</span> <span class="dt">URL</span></a>
<a class="sourceLine" id="cb1-11" data-line-number="11">    , <span class="st">&quot;date&quot;</span> <span class="fu">&gt;:</span> <span class="dt">Date</span></a>
<a class="sourceLine" id="cb1-12" data-line-number="12">    , <span class="st">&quot;calendar&quot;</span> <span class="fu">&gt;:</span> <span class="dt">Calendar</span></a>
<a class="sourceLine" id="cb1-13" data-line-number="13">    , <span class="st">&quot;category&quot;</span> <span class="fu">&gt;:</span> <span class="dt">Text</span></a>
<a class="sourceLine" id="cb1-14" data-line-number="14">    ]</a>
<a class="sourceLine" id="cb1-15" data-line-number="15"></a>
<a class="sourceLine" id="cb1-16" data-line-number="16"><span class="kw">type</span> <span class="dt">URL</span> <span class="fu">=</span> <span class="dt">Text</span></a>
<a class="sourceLine" id="cb1-17" data-line-number="17"><span class="kw">type</span> <span class="dt">Date</span> <span class="fu">=</span> <span class="dt">Text</span></a>
<a class="sourceLine" id="cb1-18" data-line-number="18"></a>
<a class="sourceLine" id="cb1-19" data-line-number="19"><span class="kw">type</span> <span class="dt">Calendar</span> <span class="fu">=</span> <span class="dt">Record</span></a>
<a class="sourceLine" id="cb1-20" data-line-number="20">   <span class="ch">&#39;[ &quot;title&quot; &gt;: Text</span></a>
<a class="sourceLine" id="cb1-21" data-line-number="21">    , <span class="st">&quot;url&quot;</span> <span class="fu">&gt;:</span> <span class="dt">URL</span></a>
<a class="sourceLine" id="cb1-22" data-line-number="22">    ]</a></code></pre></div>
<p><code>&quot;category&quot;</code> は後の(手作業による)分類で用いる． extensible による拡張可能レコードな型だが，何となく読めるだろう(分からなかったググって)．</p>
<h2 id="section-1"></h2>
<p>インターフェースを揃えるために，<code>Qiita</code> や <code>ADVENTAR</code> って感じの型から 記事のリスト <code>[Post]</code> を返す型クラスを定義しておく(正直あんまり意味はない)．</p>
<div class="sourceCode" id="cb2"><pre class="sourceCode haskell"><code class="sourceCode haskell"><a class="sourceLine" id="cb2-1" data-line-number="1"><span class="kw">class</span> <span class="dt">ToPosts</span> a <span class="kw">where</span></a>
<a class="sourceLine" id="cb2-2" data-line-number="2"><span class="ot">  getPosts ::</span> a <span class="ot">-&gt;</span> <span class="dt">IO</span> [<span class="dt">Post</span>]</a></code></pre></div>
<p>順にインスタンスを定義していく．</p>
<h3 id="adventar">ADVENTAR</h3>
<p><a href="/posts/2017-12-02-re-adventar-slack-bot-part1.html">ADVENTAR は昔集めた</a>ので簡単だ．</p>
<h4 id="カレンダーの記事を集める">カレンダーの記事を集める</h4>
<p>まずは，カレンダーの URL を与えたら記事のリストを返す関数を書く．</p>
<div class="sourceCode" id="cb3"><pre class="sourceCode haskell"><code class="sourceCode haskell"><a class="sourceLine" id="cb3-1" data-line-number="1"><span class="kw">import</span> <span class="kw">qualified</span> <span class="dt">Data.Text.IO</span> <span class="kw">as</span> <span class="dt">TIO</span></a>
<a class="sourceLine" id="cb3-2" data-line-number="2"><span class="kw">import</span> <span class="dt">Shelly</span> (shelly, sleep)</a>
<a class="sourceLine" id="cb3-3" data-line-number="3"><span class="kw">import</span> <span class="dt">Test.WebDriver</span> (<span class="dt">WDConfig</span>)</a>
<a class="sourceLine" id="cb3-4" data-line-number="4"><span class="kw">import</span> <span class="dt">Text.HTML.Scalpel.Core</span></a>
<a class="sourceLine" id="cb3-5" data-line-number="5"></a>
<a class="sourceLine" id="cb3-6" data-line-number="6"><span class="kw">data</span> <span class="dt">Adventar</span> <span class="fu">=</span> <span class="dt">Adventar</span> <span class="dt">URL</span> <span class="dt">WDConfig</span></a>
<a class="sourceLine" id="cb3-7" data-line-number="7"></a>
<a class="sourceLine" id="cb3-8" data-line-number="8"><span class="kw">instance</span> <span class="dt">ToPosts</span> <span class="dt">Adventar</span> <span class="kw">where</span></a>
<a class="sourceLine" id="cb3-9" data-line-number="9">  getPosts (<span class="dt">Adventar</span> url conf) <span class="fu">=</span> <span class="kw">do</span></a>
<a class="sourceLine" id="cb3-10" data-line-number="10">    html <span class="ot">&lt;-</span> fetchHtmlWith conf url</a>
<a class="sourceLine" id="cb3-11" data-line-number="11">  <span class="kw">let</span></a>
<a class="sourceLine" id="cb3-12" data-line-number="12">    posts <span class="fu">=</span> fromMaybe [] <span class="fu">$</span> scrapeHtml postsScraper html</a>
<a class="sourceLine" id="cb3-13" data-line-number="13">  TIO.putStrLn <span class="fu">$</span> <span class="st">&quot;get posts on &quot;</span> <span class="ot">`mappend`</span> url</a>
<a class="sourceLine" id="cb3-14" data-line-number="14">  shelly <span class="fu">$</span> sleep <span class="dv">1</span></a>
<a class="sourceLine" id="cb3-15" data-line-number="15">  return posts</a>
<a class="sourceLine" id="cb3-16" data-line-number="16"></a>
<a class="sourceLine" id="cb3-17" data-line-number="17"><span class="ot">scrapeHtml ::</span> <span class="dt">Scraper</span> <span class="dt">Html</span> a <span class="ot">-&gt;</span> <span class="dt">Html</span> <span class="ot">-&gt;</span> <span class="dt">Maybe</span> a</a>
<a class="sourceLine" id="cb3-18" data-line-number="18">scrapeHtml <span class="fu">=</span> flip scrapeStringLike</a>
<a class="sourceLine" id="cb3-19" data-line-number="19"></a>
<a class="sourceLine" id="cb3-20" data-line-number="20"><span class="kw">type</span> <span class="dt">Html</span> <span class="fu">=</span> <span class="dt">Text</span></a>
<a class="sourceLine" id="cb3-21" data-line-number="21"></a>
<a class="sourceLine" id="cb3-22" data-line-number="22"><span class="ot">fetchHtmlWith ::</span> <span class="dt">WDConfig</span> <span class="ot">-&gt;</span> <span class="dt">URL</span> <span class="ot">-&gt;</span> <span class="dt">IO</span> <span class="dt">Html</span></a>
<a class="sourceLine" id="cb3-23" data-line-number="23">fetchHtmlWith <span class="fu">=</span> undefined</a>
<a class="sourceLine" id="cb3-24" data-line-number="24"></a>
<a class="sourceLine" id="cb3-25" data-line-number="25"><span class="ot">postsScraper ::</span> <span class="dt">Scraper</span> <span class="dt">Html</span> [<span class="dt">Post</span>]</a>
<a class="sourceLine" id="cb3-26" data-line-number="26">postsScraper <span class="fu">=</span> undefined</a></code></pre></div>
<p>ADVENTAR のカレンダーのページは React 製(?)かなんからしく，静的な HTML からでは記事を参照することが出来ない そのために，Selenium などのヘッドレスブラウザを使ってアクセスする． <code>WDConfig</code> は Haskell から Selenium などを操作するための Web Driver の設定値の型である．</p>
<p><code>shelly $ sleep 1</code> はDOS攻撃にならないように，ここで処理を1秒止めるために書いている．</p>
<h2 id="section-2"></h2>
<p><code>fetchHtmlWith</code> と <code>postsScraper</code> はこんな感じ．</p>
<div class="sourceCode" id="cb4"><pre class="sourceCode haskell"><code class="sourceCode haskell"><a class="sourceLine" id="cb4-1" data-line-number="1"><span class="ot">fetchHtmlWith ::</span> <span class="dt">WDConfig</span> <span class="ot">-&gt;</span> <span class="dt">URL</span> <span class="ot">-&gt;</span> <span class="dt">IO</span> <span class="dt">Html</span></a>
<a class="sourceLine" id="cb4-2" data-line-number="2">fetchHtmlWith config url <span class="fu">=</span> runSession config <span class="fu">$</span> <span class="kw">do</span></a>
<a class="sourceLine" id="cb4-3" data-line-number="3">  openPage (unpack url)</a>
<a class="sourceLine" id="cb4-4" data-line-number="4">  html <span class="ot">&lt;-</span> getSource</a>
<a class="sourceLine" id="cb4-5" data-line-number="5">  closeSession</a>
<a class="sourceLine" id="cb4-6" data-line-number="6">  return html</a></code></pre></div>
<div class="sourceCode" id="cb5"><pre class="sourceCode haskell"><code class="sourceCode haskell"><a class="sourceLine" id="cb5-1" data-line-number="1"><span class="kw">import</span> <span class="dt">Data.Default</span> (def)</a>
<a class="sourceLine" id="cb5-2" data-line-number="2"></a>
<a class="sourceLine" id="cb5-3" data-line-number="3"><span class="ot">postsScraper ::</span> <span class="dt">Scraper</span> <span class="dt">Html</span> [<span class="dt">Post</span>]</a>
<a class="sourceLine" id="cb5-4" data-line-number="4">postsScraper <span class="fu">=</span></a>
<a class="sourceLine" id="cb5-5" data-line-number="5">  chroots (<span class="st">&quot;table&quot;</span> <span class="fu">@:</span> [hasClass <span class="st">&quot;mod-entryList&quot;</span>] <span class="fu">//</span> <span class="st">&quot;tr&quot;</span>) entryScraper</a>
<a class="sourceLine" id="cb5-6" data-line-number="6"></a>
<a class="sourceLine" id="cb5-7" data-line-number="7"><span class="ot">entryScraper ::</span> <span class="dt">Scraper</span> <span class="dt">Text</span> <span class="dt">Post</span></a>
<a class="sourceLine" id="cb5-8" data-line-number="8">entryScraper <span class="fu">=</span> hsequence</a>
<a class="sourceLine" id="cb5-9" data-line-number="9">    <span class="fu">$</span> <span class="fu">#</span>title    <span class="fu">&lt;@=&gt;</span> titleScraper</a>
<a class="sourceLine" id="cb5-10" data-line-number="10">   <span class="fu">&lt;:</span> <span class="fu">#</span>auther   <span class="fu">&lt;@=&gt;</span> autherScraper</a>
<a class="sourceLine" id="cb5-11" data-line-number="11">   <span class="fu">&lt;:</span> <span class="fu">#</span>url      <span class="fu">&lt;@=&gt;</span> urlScraper</a>
<a class="sourceLine" id="cb5-12" data-line-number="12">   <span class="fu">&lt;:</span> <span class="fu">#</span>date     <span class="fu">&lt;@=&gt;</span> dateScraper</a>
<a class="sourceLine" id="cb5-13" data-line-number="13">   <span class="fu">&lt;:</span> <span class="fu">#</span>calendar <span class="fu">&lt;@=&gt;</span> pure def</a>
<a class="sourceLine" id="cb5-14" data-line-number="14">   <span class="fu">&lt;:</span> <span class="fu">#</span>category <span class="fu">&lt;@=&gt;</span> pure <span class="st">&quot;&quot;</span></a>
<a class="sourceLine" id="cb5-15" data-line-number="15">   <span class="fu">&lt;:</span> nil</a>
<a class="sourceLine" id="cb5-16" data-line-number="16"></a>
<a class="sourceLine" id="cb5-17" data-line-number="17"><span class="ot">autherScraper ::</span> <span class="dt">Scraper</span> <span class="dt">Text</span> <span class="dt">Text</span></a>
<a class="sourceLine" id="cb5-18" data-line-number="18">autherScraper <span class="fu">=</span> text <span class="fu">$</span> <span class="st">&quot;td&quot;</span> <span class="fu">@:</span> [hasClass <span class="st">&quot;mod-entryList-user&quot;</span>] <span class="fu">//</span> <span class="st">&quot;span&quot;</span></a>
<a class="sourceLine" id="cb5-19" data-line-number="19"></a>
<a class="sourceLine" id="cb5-20" data-line-number="20"><span class="fu">...</span></a></code></pre></div>
<p><code>xxxScraper</code> を全部書いてると長くなるので割愛(<a href="https://github.com/matsubara0507/haskell-advent-calendar/blob/f6d6a097c08e741239f576693e3d6b2b7ae21a29/src/AdventCalendar/Adventar/Scraper.hs">ココ</a>に全部ある)．</p>
<h4 id="脱線-拡張可能レコードの-etc..">脱線 : 拡張可能レコードの etc..</h4>
<p><a href="https://hackage.haskell.org/package/extensible-0.4.7/docs/Data-Extensible-Field.html#v:-60--64--61--62-"><code>(&lt;@=&gt;)</code></a> 演算子は拡張可能レコードの値を設定する演算子 <a href="https://hackage.haskell.org/package/extensible-0.4.7/docs/Data-Extensible-Field.html#v:-64--61-"><code>(@=)</code></a> のモナディック版(正確には <code>Functor</code>)というイメージだ． <strong>かなり</strong> 直感的に型を書くと次のようになる．</p>
<div class="sourceCode" id="cb6"><pre class="sourceCode haskell"><code class="sourceCode haskell"><a class="sourceLine" id="cb6-1" data-line-number="1"><span class="ot">(@=) ::</span> k <span class="ot">-&gt;</span> v <span class="ot">-&gt;</span> (k <span class="fu">:&gt;</span> v)</a>
<a class="sourceLine" id="cb6-2" data-line-number="2"><span class="ot">(&lt;@=&gt;) ::</span> <span class="dt">Functor</span> f <span class="ot">=&gt;</span> k <span class="ot">-&gt;</span> f v <span class="ot">-&gt;</span> f (k <span class="fu">:&gt;</span> v)</a></code></pre></div>
<p>拡張可能レコードはフィールド名とフィールドの値の型レベル辞書みたいなモノであり，<code>k :&gt; v</code> が辞書のイチ要素というイメージだ． <a href="https://hackage.haskell.org/package/extensible-0.4.7/docs/Data-Extensible-Product.html#v:-60-:"><code>(&lt;:)</code></a> で <code>[kv1, kv2, ... kvn]</code> のような辞書を構築する(<a href="https://hackage.haskell.org/package/extensible-0.4.7/docs/Data-Extensible-Product.html#v:nil"><code>nil</code></a> が空リスト)．</p>
<p><a href="https://hackage.haskell.org/package/extensible-0.4.7/docs/Data-Extensible-Product.html#v:hsequence"><code>hsequence</code></a> 関数で <code>[f (k1 :&gt; v1), ..., f (kn :&gt; vn)] -&gt; f [(k1 :&gt; v1), ... (kn :&gt; vn)]</code> という型の変換をしているイメージだ(あくまでイメージね)．</p>
<h2 id="section-3"></h2>
<p><code>def</code> は <a href="https://hackage.haskell.org/package/data-default">data-default</a> パッケージの値で，<a href="https://hackage.haskell.org/package/data-default-0.7.1.1/docs/Data-Default.html#t:Default"><code>Default</code></a> 型クラスのインスタンスにしないと使えない． 拡張可能レコードのインスタンス化の説明はめんどくさいので割愛する． <a href="https://github.com/matsubara0507/haskell-advent-calendar/blob/f6d6a097c08e741239f576693e3d6b2b7ae21a29/src/Data/Extensible/Instance/Default.hs">ココ</a>に書いてあるので参照してください．</p>
<h4 id="カレンダーを加える">カレンダーを加える</h4>
<p>このままだとカレンダーが <code>def</code> のまま(URL もカレンダー名も <code>&quot;&quot;</code>)なので，スクレイピングしたカレンダーの情報を加えよう．</p>
<div class="sourceCode" id="cb7"><pre class="sourceCode haskell"><code class="sourceCode haskell"><a class="sourceLine" id="cb7-1" data-line-number="1"><span class="kw">import</span> <span class="dt">Control.Lens</span> (set)</a>
<a class="sourceLine" id="cb7-2" data-line-number="2"><span class="kw">import</span> <span class="dt">Data.Text</span> (strip)</a>
<a class="sourceLine" id="cb7-3" data-line-number="3"></a>
<a class="sourceLine" id="cb7-4" data-line-number="4">getPosts (<span class="dt">Adventar</span> url conf) <span class="fu">=</span> <span class="kw">do</span></a>
<a class="sourceLine" id="cb7-5" data-line-number="5">  html <span class="ot">&lt;-</span> fetchHtmlWith conf url</a>
<a class="sourceLine" id="cb7-6" data-line-number="6">  <span class="kw">let</span></a>
<a class="sourceLine" id="cb7-7" data-line-number="7">    posts <span class="fu">=</span> fromMaybe [] <span class="fu">$</span> scrapeHtml postsScraper html</a>
<a class="sourceLine" id="cb7-8" data-line-number="8">    calendar</a>
<a class="sourceLine" id="cb7-9" data-line-number="9">        <span class="fu">=</span> <span class="fu">#</span>title <span class="fu">@=</span> fromMaybe <span class="st">&quot;&quot;</span> (scrapeHtml headerTitleScraper html)</a>
<a class="sourceLine" id="cb7-10" data-line-number="10">       <span class="fu">&lt;:</span> <span class="fu">#</span>url   <span class="fu">@=</span> url</a>
<a class="sourceLine" id="cb7-11" data-line-number="11">       <span class="fu">&lt;:</span> emptyRecord</a>
<a class="sourceLine" id="cb7-12" data-line-number="12">  TIO.putStrLn <span class="fu">$</span> <span class="st">&quot;get posts on &quot;</span> <span class="ot">`mappend`</span> url</a>
<a class="sourceLine" id="cb7-13" data-line-number="13">  shelly <span class="fu">$</span> sleep <span class="dv">1</span></a>
<a class="sourceLine" id="cb7-14" data-line-number="14">  return <span class="fu">$</span> fmap (set <span class="fu">#</span>calendar calendar) posts</a>
<a class="sourceLine" id="cb7-15" data-line-number="15"></a>
<a class="sourceLine" id="cb7-16" data-line-number="16"><span class="ot">headerTitleScraper ::</span> <span class="dt">Scraper</span> <span class="dt">Html</span> <span class="dt">Text</span></a>
<a class="sourceLine" id="cb7-17" data-line-number="17">headerTitleScraper <span class="fu">=</span> strip <span class="fu">&lt;$&gt;</span> text (<span class="st">&quot;head&quot;</span> <span class="fu">//</span> <span class="st">&quot;title&quot;</span>)</a></code></pre></div>
<p><code>strip</code> は文字列の前後の空白などを排除してくれる．</p>
<h4 id="カレンダーを集める">カレンダーを集める</h4>
<p>カレンダーから記事を集めるだとまだ半分． カレンダー自体を集めないと全ての記事を確認できない．</p>
<p>ADVENTAR の場合は，<code>&quot;https://adventar.org/calendars?year=2017</code> という URL で任意の年のカレンダーの一覧を取得できる． この URL からカレンダーの URL のリストを返す関数を定義する．</p>
<div class="sourceCode" id="cb8"><pre class="sourceCode haskell"><code class="sourceCode haskell"><a class="sourceLine" id="cb8-1" data-line-number="1"><span class="ot">getUrls ::</span> <span class="dt">URL</span> <span class="ot">-&gt;</span> <span class="dt">IO</span> [<span class="dt">URL</span>]</a>
<a class="sourceLine" id="cb8-2" data-line-number="2">getUrls url <span class="fu">=</span> <span class="kw">do</span></a>
<a class="sourceLine" id="cb8-3" data-line-number="3">  html <span class="ot">&lt;-</span> fetchHtml url</a>
<a class="sourceLine" id="cb8-4" data-line-number="4">  return <span class="fu">$</span> fromMaybe [] (scrapeHtml calendarUrlsScraper html)</a>
<a class="sourceLine" id="cb8-5" data-line-number="5"></a>
<a class="sourceLine" id="cb8-6" data-line-number="6"><span class="ot">fetchHtml ::</span> <span class="dt">URL</span> <span class="ot">-&gt;</span> <span class="dt">IO</span> <span class="dt">Html</span></a>
<a class="sourceLine" id="cb8-7" data-line-number="7">fetchHtml url <span class="fu">=</span> <span class="kw">do</span></a>
<a class="sourceLine" id="cb8-8" data-line-number="8">  response <span class="ot">&lt;-</span> get <span class="fu">$</span> unpack url</a>
<a class="sourceLine" id="cb8-9" data-line-number="9">  return <span class="fu">$</span> fromMaybe <span class="st">&quot;&quot;</span> (decodeConvertText <span class="fu">.</span> <span class="dt">UTF8</span> <span class="fu">$</span> response <span class="fu">^.</span> responseBody)</a>
<a class="sourceLine" id="cb8-10" data-line-number="10"></a>
<a class="sourceLine" id="cb8-11" data-line-number="11"><span class="ot">calendarUrlsScraper ::</span> <span class="dt">Scraper</span> <span class="dt">Html</span> [<span class="dt">URL</span>]</a>
<a class="sourceLine" id="cb8-12" data-line-number="12">calendarUrlsScraper <span class="fu">=</span></a>
<a class="sourceLine" id="cb8-13" data-line-number="13">  chroots (<span class="st">&quot;div&quot;</span> <span class="fu">@:</span> [hasClass <span class="st">&quot;mod-calendarList&quot;</span>] <span class="fu">//</span> <span class="st">&quot;ul&quot;</span> <span class="fu">//</span> <span class="st">&quot;li&quot;</span>) <span class="fu">$</span> <span class="kw">do</span></a>
<a class="sourceLine" id="cb8-14" data-line-number="14">    url <span class="ot">&lt;-</span> attr <span class="st">&quot;href&quot;</span> <span class="fu">$</span></a>
<a class="sourceLine" id="cb8-15" data-line-number="15">      (<span class="st">&quot;div&quot;</span> <span class="fu">@:</span> [hasClass <span class="st">&quot;mod-calendarList-title&quot;</span>]) <span class="fu">//</span> <span class="st">&quot;a&quot;</span></a>
<a class="sourceLine" id="cb8-16" data-line-number="16">    return <span class="fu">$</span> append <span class="st">&quot;http://adventar.org&quot;</span> url</a></code></pre></div>
<p>こっちは静的な HTML で動作するのでヘッドレスブラウザは使わない． ただ単に HTML の文字列さへ手に入ればいいので，扱うのが簡単な wreq を今回は使った． <code>get</code> という関数に URL を適用するだけで，HTML (型は <code>ByteString</code>) を返してくれる．</p>
<h5 id="vs.文字コード">vs. 文字コード</h5>
<p><code>ByteString</code> から <code>Text</code> への変換はかなりめんどくさい． というのも，文字コード回りで簡単に例外を投げるからだ．</p>
<p>例えば，記事のリンク先が PDF のようなバイナリファイルだと UTF-8 の <code>Text</code> に変換できなくて例外を投げてくる． もちろん，カレンダーの URL を集める場合は，そんな心配は無いんだけど，Qiita のところで困る…</p>
<h2 id="section-4"></h2>
<p>ちゃんとやるなら例外に合わせて処理を分けるべきだが，めんどくさいので例外を返す場合は <code>Nothing</code> が返ってくる <a href="https://hackage.haskell.org/package/text-conversions">text-conversions</a> パッケージを文字列変換に用いた．</p>
<div class="sourceCode" id="cb9"><pre class="sourceCode haskell"><code class="sourceCode haskell"><a class="sourceLine" id="cb9-1" data-line-number="1"><span class="fu">&gt;&gt;</span> decodeConvertText (<span class="dt">UTF8</span> (<span class="st">&quot;hello&quot;</span><span class="ot"> ::</span> <span class="dt">ByteString</span>))<span class="ot"> ::</span> <span class="dt">Maybe</span> <span class="dt">Text</span></a>
<a class="sourceLine" id="cb9-2" data-line-number="2"><span class="dt">Just</span> <span class="st">&quot;hello&quot;</span></a>
<a class="sourceLine" id="cb9-3" data-line-number="3"><span class="fu">&gt;&gt;</span> decodeConvertText (<span class="dt">UTF8</span> (<span class="st">&quot;\xc3\x28&quot;</span><span class="ot"> ::</span> <span class="dt">ByteString</span>))<span class="ot"> ::</span> <span class="dt">Maybe</span> <span class="dt">Text</span></a>
<a class="sourceLine" id="cb9-4" data-line-number="4"><span class="dt">Nothing</span></a></code></pre></div>
<h4 id="インスタンスの更新">インスタンスの更新</h4>
<p><code>getUrls</code> を使ってインスタンスを書き換える．</p>
<div class="sourceCode" id="cb10"><pre class="sourceCode haskell"><code class="sourceCode haskell"><a class="sourceLine" id="cb10-1" data-line-number="1"><span class="kw">instance</span> <span class="dt">ToPosts</span> <span class="dt">Adventar</span> <span class="kw">where</span></a>
<a class="sourceLine" id="cb10-2" data-line-number="2">  getPosts (<span class="dt">Adventar</span> url conf) <span class="fu">=</span> <span class="kw">do</span></a>
<a class="sourceLine" id="cb10-3" data-line-number="3">    urls <span class="ot">&lt;-</span> getUrls url</a>
<a class="sourceLine" id="cb10-4" data-line-number="4">    mconcat <span class="fu">&lt;$&gt;</span> mapM (getPosts&#39; conf) urls</a>
<a class="sourceLine" id="cb10-5" data-line-number="5"></a>
<a class="sourceLine" id="cb10-6" data-line-number="6"><span class="ot">getPosts&#39; ::</span> <span class="dt">WDConfig</span> <span class="ot">-&gt;</span> <span class="dt">URL</span> <span class="ot">-&gt;</span> <span class="dt">IO</span> [<span class="dt">Post</span>]</a>
<a class="sourceLine" id="cb10-7" data-line-number="7">getPosts&#39; conf url <span class="fu">=</span> <span class="kw">do</span></a>
<a class="sourceLine" id="cb10-8" data-line-number="8">  <span class="fu">...</span></a></code></pre></div>
<p><code>getPosts'</code> は，もともとの <code>getPosts</code> 関数と同じ実装である． 扱うのが楽になるように，スマートコンストラクタを定義しておく．</p>
<div class="sourceCode" id="cb11"><pre class="sourceCode haskell"><code class="sourceCode haskell"><a class="sourceLine" id="cb11-1" data-line-number="1"><span class="ot">adventar ::</span> <span class="dt">Text</span> <span class="ot">-&gt;</span> <span class="dt">WDConfig</span> <span class="ot">-&gt;</span> <span class="dt">Adventar</span></a>
<a class="sourceLine" id="cb11-2" data-line-number="2">adventar year <span class="fu">=</span></a>
<a class="sourceLine" id="cb11-3" data-line-number="3">  <span class="dt">Adventar</span> <span class="fu">$</span> <span class="st">&quot;https://adventar.org/calendars?year=&quot;</span> <span class="ot">`mappend`</span> year</a>
<a class="sourceLine" id="cb11-4" data-line-number="4"></a>
<a class="sourceLine" id="cb11-5" data-line-number="5"><span class="ot">mkDriver ::</span> <span class="dt">Text</span> <span class="ot">-&gt;</span> <span class="dt">Int</span> <span class="ot">-&gt;</span> <span class="dt">WDConfig</span></a>
<a class="sourceLine" id="cb11-6" data-line-number="6">mkDriver host port <span class="fu">=</span> useBrowser chrome <span class="fu">$</span></a>
<a class="sourceLine" id="cb11-7" data-line-number="7">  defaultConfig { wdHost <span class="fu">=</span> T.unpack host, wdPort <span class="fu">=</span> port }</a></code></pre></div>
<h4 id="haskell-の記事か否か">Haskell の記事か否か</h4>
<p>分類はカレンダーか記事のタイトルに「Haskell」という単語か含まれるか否かで判断する． 雑だけど，自然言語処理とか良く分からないので勘弁して．</p>
<div class="sourceCode" id="cb12"><pre class="sourceCode haskell"><code class="sourceCode haskell"><a class="sourceLine" id="cb12-1" data-line-number="1"><span class="ot">isHaskellPost ::</span> <span class="dt">Post</span> <span class="ot">-&gt;</span> <span class="dt">Bool</span></a>
<a class="sourceLine" id="cb12-2" data-line-number="2">isHaskellPost post <span class="fu">=</span> any (<span class="st">&quot;Haskell&quot;</span> <span class="ot">`isInfixOf`</span>)</a>
<a class="sourceLine" id="cb12-3" data-line-number="3">  [ post <span class="fu">^.</span> <span class="fu">#</span>title</a>
<a class="sourceLine" id="cb12-4" data-line-number="4">  , post <span class="fu">^.</span> <span class="fu">#</span>calendar <span class="fu">^.</span> <span class="fu">#</span>title</a>
<a class="sourceLine" id="cb12-5" data-line-number="5">  ]</a></code></pre></div>
<p>この関数を使って <code>filter</code> すれば良い．</p>
<h4 id="実行">実行</h4>
<p>Selenium を <code>localhost:4444</code> として何らかの方法で起動しておく．</p>
<div class="sourceCode" id="cb13"><pre class="sourceCode haskell"><code class="sourceCode haskell"><a class="sourceLine" id="cb13-1" data-line-number="1"><span class="fu">$</span> stack ghci</a>
<a class="sourceLine" id="cb13-2" data-line-number="2"><span class="fu">&gt;&gt;</span> <span class="fu">:</span>set <span class="fu">-</span><span class="dt">XOverloadedStrings</span></a>
<a class="sourceLine" id="cb13-3" data-line-number="3"><span class="fu">&gt;&gt;</span> fmap (filter isHaskellPost) <span class="fu">.</span> getPosts <span class="fu">$</span> adventar <span class="st">&quot;2017&quot;</span> (mkDriver <span class="st">&quot;localhost&quot;</span> <span class="dv">4444</span>)</a>
<a class="sourceLine" id="cb13-4" data-line-number="4">get posts on http<span class="fu">://</span>adventar<span class="fu">.</span>org<span class="fu">/</span><span class="dv">1111</span></a>
<a class="sourceLine" id="cb13-5" data-line-number="5"><span class="fu">...</span></a></code></pre></div>
<p>すっごい時間かかるよ(笑)</p>
<h3 id="qiita">Qiita</h3>
<p>やることは基本同じなのでサクッと．</p>
<h4 id="カレンダーの-url-を集める">カレンダーの URL を集める</h4>
<p>Qiita の場合，カレンダーの一覧は複数ページに分かれている(URL は <code>https://qiita.com/advent-calendar/2017/calendars?page=1</code> って感じ)． 無限リストで試しにカレンダーの一覧を取得し，ひとつも取得できなければ止めるようにする．</p>
<div class="sourceCode" id="cb14"><pre class="sourceCode haskell"><code class="sourceCode haskell"><a class="sourceLine" id="cb14-1" data-line-number="1"><span class="ot">getUrls ::</span> <span class="dt">URL</span> <span class="ot">-&gt;</span> [<span class="dt">Int</span>] <span class="ot">-&gt;</span> <span class="dt">IO</span> [<span class="dt">URL</span>]</a>
<a class="sourceLine" id="cb14-2" data-line-number="2">getUrls _ [] <span class="fu">=</span> pure []</a>
<a class="sourceLine" id="cb14-3" data-line-number="3">getUrls url (n<span class="fu">:</span>ns) <span class="fu">=</span> <span class="kw">do</span></a>
<a class="sourceLine" id="cb14-4" data-line-number="4">  result <span class="ot">&lt;-</span> func n</a>
<a class="sourceLine" id="cb14-5" data-line-number="5">  <span class="kw">case</span> result <span class="kw">of</span></a>
<a class="sourceLine" id="cb14-6" data-line-number="6">    [] <span class="ot">-&gt;</span> pure result</a>
<a class="sourceLine" id="cb14-7" data-line-number="7">    _  <span class="ot">-&gt;</span> mappend result <span class="fu">&lt;$&gt;</span> getUrls url ns</a>
<a class="sourceLine" id="cb14-8" data-line-number="8">  <span class="kw">where</span></a>
<a class="sourceLine" id="cb14-9" data-line-number="9">    func index <span class="fu">=</span> <span class="kw">do</span></a>
<a class="sourceLine" id="cb14-10" data-line-number="10">      html <span class="ot">&lt;-</span> fetchHtml <span class="fu">$</span> calendarsUrl url index</a>
<a class="sourceLine" id="cb14-11" data-line-number="11">      shelly <span class="fu">$</span> sleep <span class="dv">1</span></a>
<a class="sourceLine" id="cb14-12" data-line-number="12">      return <span class="fu">$</span> fromMaybe [] (scrapeHtml calendarUrlsScraper html)</a>
<a class="sourceLine" id="cb14-13" data-line-number="13"></a>
<a class="sourceLine" id="cb14-14" data-line-number="14"><span class="ot">calendarsUrl ::</span> <span class="dt">URL</span> <span class="ot">-&gt;</span> <span class="dt">Int</span> <span class="ot">-&gt;</span> <span class="dt">URL</span></a>
<a class="sourceLine" id="cb14-15" data-line-number="15">calendarsUrl url index <span class="fu">=</span> mconcat [url, <span class="st">&quot;?page=&quot;</span>, pack <span class="fu">$</span> show index]</a>
<a class="sourceLine" id="cb14-16" data-line-number="16"></a>
<a class="sourceLine" id="cb14-17" data-line-number="17"><span class="ot">calendarUrlsScraper ::</span> <span class="dt">Scraper</span> <span class="dt">Html</span> [<span class="dt">URL</span>]</a>
<a class="sourceLine" id="cb14-18" data-line-number="18">calendarUrlsScraper <span class="fu">=</span></a>
<a class="sourceLine" id="cb14-19" data-line-number="19">  chroots (<span class="st">&quot;table&quot;</span> <span class="fu">@:</span> [hasClass <span class="st">&quot;adventCalendarList&quot;</span>] <span class="fu">//</span> <span class="st">&quot;tbody&quot;</span> <span class="fu">//</span> <span class="st">&quot;tr&quot;</span>) <span class="fu">$</span> <span class="kw">do</span></a>
<a class="sourceLine" id="cb14-20" data-line-number="20">    url <span class="ot">&lt;-</span> attr <span class="st">&quot;href&quot;</span> <span class="fu">$</span></a>
<a class="sourceLine" id="cb14-21" data-line-number="21">      (<span class="st">&quot;td&quot;</span> <span class="fu">@:</span> [hasClass <span class="st">&quot;adventCalendarList_calendarTitle&quot;</span>]) <span class="fu">//</span> <span class="st">&quot;a&quot;</span></a>
<a class="sourceLine" id="cb14-22" data-line-number="22">    return <span class="fu">$</span> append <span class="st">&quot;http://qiita.com&quot;</span> url</a></code></pre></div>
<p>なんかもっといい方法ありそう．</p>
<h4 id="カレンダーを集める-1">カレンダーを集める</h4>
<p>インスタンスを定義しよう．</p>
<div class="sourceCode" id="cb15"><pre class="sourceCode haskell"><code class="sourceCode haskell"><a class="sourceLine" id="cb15-1" data-line-number="1"><span class="kw">newtype</span> <span class="dt">Qiita</span> <span class="fu">=</span> <span class="dt">Qiita</span> <span class="dt">URL</span></a>
<a class="sourceLine" id="cb15-2" data-line-number="2"></a>
<a class="sourceLine" id="cb15-3" data-line-number="3"><span class="kw">instance</span> <span class="dt">ToPosts</span> <span class="dt">Qiita</span> <span class="kw">where</span></a>
<a class="sourceLine" id="cb15-4" data-line-number="4">  getPosts (<span class="dt">Qiita</span> url) <span class="fu">=</span> <span class="kw">do</span></a>
<a class="sourceLine" id="cb15-5" data-line-number="5">    urls <span class="ot">&lt;-</span> getUrls url [<span class="dv">1</span><span class="fu">..</span><span class="dv">1</span>]</a>
<a class="sourceLine" id="cb15-6" data-line-number="6">    mconcat <span class="fu">&lt;$&gt;</span> mapM getPosts&#39; urls</a>
<a class="sourceLine" id="cb15-7" data-line-number="7"></a>
<a class="sourceLine" id="cb15-8" data-line-number="8"><span class="ot">getPosts&#39; ::</span> <span class="dt">URL</span> <span class="ot">-&gt;</span> <span class="dt">IO</span> [<span class="dt">Post</span>]</a>
<a class="sourceLine" id="cb15-9" data-line-number="9">getPosts&#39; url <span class="fu">=</span> <span class="kw">do</span></a>
<a class="sourceLine" id="cb15-10" data-line-number="10">  html <span class="ot">&lt;-</span> fetchHtml url</a>
<a class="sourceLine" id="cb15-11" data-line-number="11">  <span class="kw">let</span></a>
<a class="sourceLine" id="cb15-12" data-line-number="12">    posts <span class="fu">=</span> fromMaybe [] <span class="fu">$</span> scrapeHtml postsScraper html</a>
<a class="sourceLine" id="cb15-13" data-line-number="13">    calendar</a>
<a class="sourceLine" id="cb15-14" data-line-number="14">        <span class="fu">=</span> <span class="fu">#</span>title <span class="fu">@=</span> fromMaybe <span class="st">&quot;&quot;</span> (scrapeHtml headerTitleScraper html)</a>
<a class="sourceLine" id="cb15-15" data-line-number="15">       <span class="fu">&lt;:</span> <span class="fu">#</span>url   <span class="fu">@=</span> url</a>
<a class="sourceLine" id="cb15-16" data-line-number="16">       <span class="fu">&lt;:</span> emptyRecord</a>
<a class="sourceLine" id="cb15-17" data-line-number="17">  TIO.putStrLn <span class="fu">$</span> <span class="st">&quot;get posts on &quot;</span> <span class="ot">`mappend`</span> url</a>
<a class="sourceLine" id="cb15-18" data-line-number="18">  shelly <span class="fu">$</span> sleep <span class="dv">1</span></a>
<a class="sourceLine" id="cb15-19" data-line-number="19">  return <span class="fu">$</span> fmap (set <span class="fu">#</span>calendar calendar) posts</a>
<a class="sourceLine" id="cb15-20" data-line-number="20"></a>
<a class="sourceLine" id="cb15-21" data-line-number="21"><span class="ot">postsScraper ::</span> <span class="dt">Scraper</span> <span class="dt">Html</span> [<span class="dt">Post</span>]</a>
<a class="sourceLine" id="cb15-22" data-line-number="22">postsScraper <span class="fu">=</span> <span class="fu">...</span></a></code></pre></div>
<p>長いのでスクレイパーは割愛(<a href="https://github.com/matsubara0507/haskell-advent-calendar/blob/f6d6a097c08e741239f576693e3d6b2b7ae21a29/src/AdventCalendar/Qiita/Scraper.hs">ココ</a>にある)． <code>fetchHtml</code> 関数は ADVENTAR のと同じ．</p>
<h4 id="記事のタイトルを取得">記事のタイトルを取得</h4>
<p>ADVENTAR と違い，Qiita のカレンダーには各記事のタイトルが書いてない． さすがに「なんか書く」で Haskell 記事か否かを判断するのもなぁと思い，どーーーー考えても時間がかかるけど，記事をひとつひとつスクレイピングしてタイトルを取ってくることにした．</p>
<div class="sourceCode" id="cb16"><pre class="sourceCode haskell"><code class="sourceCode haskell"><a class="sourceLine" id="cb16-1" data-line-number="1"><span class="ot">getPosts&#39; ::</span> <span class="dt">URL</span> <span class="ot">-&gt;</span> <span class="dt">IO</span> [<span class="dt">Post</span>]</a>
<a class="sourceLine" id="cb16-2" data-line-number="2">getPosts&#39; url <span class="fu">=</span> <span class="kw">do</span></a>
<a class="sourceLine" id="cb16-3" data-line-number="3">  <span class="fu">...</span></a>
<a class="sourceLine" id="cb16-4" data-line-number="4">  TIO.putStrLn <span class="fu">$</span> <span class="st">&quot;get posts on &quot;</span> <span class="ot">`mappend`</span> url</a>
<a class="sourceLine" id="cb16-5" data-line-number="5">  shelly <span class="fu">$</span> sleep <span class="dv">1</span></a>
<a class="sourceLine" id="cb16-6" data-line-number="6">  mapM updatePostTitle&#39; <span class="fu">$</span> set <span class="fu">#</span>calendar calendar <span class="fu">&lt;$&gt;</span> posts</a>
<a class="sourceLine" id="cb16-7" data-line-number="7"></a>
<a class="sourceLine" id="cb16-8" data-line-number="8"><span class="ot">updatePostTitle ::</span> <span class="dt">Post</span> <span class="ot">-&gt;</span> <span class="dt">IO</span> <span class="dt">Post</span></a>
<a class="sourceLine" id="cb16-9" data-line-number="9">updatePostTitle post <span class="fu">=</span> <span class="kw">do</span></a>
<a class="sourceLine" id="cb16-10" data-line-number="10">html <span class="ot">&lt;-</span> fetchHtml&#39; <span class="fu">$</span> post <span class="fu">^.</span> <span class="fu">#</span>url</a>
<a class="sourceLine" id="cb16-11" data-line-number="11"><span class="kw">let</span></a>
<a class="sourceLine" id="cb16-12" data-line-number="12">  title <span class="fu">=</span> fromMaybe (post <span class="fu">^.</span> <span class="fu">#</span>title) <span class="fu">$</span> scrapeHtml headerTitleScraper html</a>
<a class="sourceLine" id="cb16-13" data-line-number="13">return <span class="fu">$</span> post <span class="fu">&amp;</span> <span class="fu">#</span>title <span class="fu">.~</span> title</a>
<a class="sourceLine" id="cb16-14" data-line-number="14"></a>
<a class="sourceLine" id="cb16-15" data-line-number="15"><span class="ot">updatePostTitle&#39; ::</span> <span class="dt">Post</span> <span class="ot">-&gt;</span> <span class="dt">IO</span> <span class="dt">Post</span></a>
<a class="sourceLine" id="cb16-16" data-line-number="16">updatePostTitle&#39; post <span class="fu">=</span> shelly (sleep <span class="dv">1</span>) <span class="fu">&gt;&gt;</span> updatePostTitle post</a></code></pre></div>
<p><code>updatePostTitle'</code> 関数で(1秒だけスリープしつつ)タイトルをスクレイピングして更新している．</p>
<h4 id="実行してみる">実行してみる</h4>
<p>スマートコンストラクタを作って．</p>
<div class="sourceCode" id="cb17"><pre class="sourceCode haskell"><code class="sourceCode haskell"><a class="sourceLine" id="cb17-1" data-line-number="1"><span class="ot">qiita ::</span> <span class="dt">Text</span> <span class="ot">-&gt;</span> <span class="dt">Qiita</span></a>
<a class="sourceLine" id="cb17-2" data-line-number="2">qiita year <span class="fu">=</span></a>
<a class="sourceLine" id="cb17-3" data-line-number="3">  <span class="dt">Qiita</span> <span class="fu">$</span> mconcat [<span class="st">&quot;https://qiita.com/advent-calendar/&quot;</span>, year, <span class="st">&quot;/calendars&quot;</span>]</a></code></pre></div>
<p>実行してみる．</p>
<div class="sourceCode" id="cb18"><pre class="sourceCode haskell"><code class="sourceCode haskell"><a class="sourceLine" id="cb18-1" data-line-number="1"><span class="fu">$</span> stack ghci</a>
<a class="sourceLine" id="cb18-2" data-line-number="2"><span class="fu">&gt;&gt;</span> <span class="fu">:</span>set <span class="fu">-</span><span class="dt">XOverloadedStrings</span></a>
<a class="sourceLine" id="cb18-3" data-line-number="3"><span class="fu">&gt;&gt;</span> fmap (filter isHaskellPost) <span class="fu">.</span> getPosts <span class="fu">$</span> qiita <span class="st">&quot;2017&quot;</span></a>
<a class="sourceLine" id="cb18-4" data-line-number="4"><span class="fu">...</span></a></code></pre></div>
<p>悲しいことに，鬼のように時間がかかるのに…メモリダンプします… まぁわかってたけどね！</p>
<h3 id="ストリーミング">ストリーミング</h3>
<p>こういうパフォーマンス的なことは自分は詳しくない． しかしこういうのはたぶん，要らないデータ(<code>filter</code> して捨てるデータ)をいつ迄も保持してるのが悪いので(たぶん)，ストリーミングパッケージを使って効率よくリソース管理してもらおう．</p>
<p>今回は Conduit を使う． 最初は Pipes を使ってみたけど，よくわからなくてやめた．</p>
<h2 id="section-5"></h2>
<p>まずはインターフェースの型クラスを書き換える．</p>
<div class="sourceCode" id="cb19"><pre class="sourceCode haskell"><code class="sourceCode haskell"><a class="sourceLine" id="cb19-1" data-line-number="1"><span class="kw">import</span> <span class="dt">Conduit</span> (<span class="dt">Source</span>)</a>
<a class="sourceLine" id="cb19-2" data-line-number="2"></a>
<a class="sourceLine" id="cb19-3" data-line-number="3"><span class="kw">class</span> <span class="dt">ToPosts</span> a <span class="kw">where</span></a>
<a class="sourceLine" id="cb19-4" data-line-number="4"><span class="ot">  getPosts ::</span> a <span class="ot">-&gt;</span> <span class="dt">Source</span> <span class="dt">IO</span> <span class="dt">Post</span></a></code></pre></div>
<p>あとはそれぞれのインスタンスを書き換えるだけ．</p>
<div class="sourceCode" id="cb20"><pre class="sourceCode haskell"><code class="sourceCode haskell"><a class="sourceLine" id="cb20-1" data-line-number="1"><span class="kw">instance</span> <span class="dt">ToPosts</span> <span class="dt">Adventar</span> <span class="kw">where</span></a>
<a class="sourceLine" id="cb20-2" data-line-number="2">  getPosts (<span class="dt">Adventar</span> url conf) <span class="fu">=</span> <span class="kw">do</span></a>
<a class="sourceLine" id="cb20-3" data-line-number="3">    urls <span class="ot">&lt;-</span> lift <span class="fu">$</span> getUrls url</a>
<a class="sourceLine" id="cb20-4" data-line-number="4">    yieldMany urls <span class="fu">=$=</span> concatMapMC (getPosts&#39; conf)</a></code></pre></div>
<div class="sourceCode" id="cb21"><pre class="sourceCode haskell"><code class="sourceCode haskell"><a class="sourceLine" id="cb21-1" data-line-number="1"><span class="kw">instance</span> <span class="dt">ToPosts</span> <span class="dt">Qiita</span> <span class="kw">where</span></a>
<a class="sourceLine" id="cb21-2" data-line-number="2">  getPosts (<span class="dt">Qiita</span> url) <span class="fu">=</span> <span class="kw">do</span></a>
<a class="sourceLine" id="cb21-3" data-line-number="3">    urls <span class="ot">&lt;-</span> lift <span class="fu">$</span> getUrls url [<span class="dv">1</span><span class="fu">..</span>]</a>
<a class="sourceLine" id="cb21-4" data-line-number="4">    yieldMany urls <span class="fu">=$=</span> concatMapMC getPosts&#39;</a></code></pre></div>
<p>使うときは以下のようにすればよい．</p>
<div class="sourceCode" id="cb22"><pre class="sourceCode haskell"><code class="sourceCode haskell"><a class="sourceLine" id="cb22-1" data-line-number="1"><span class="fu">$</span> stack ghci</a>
<a class="sourceLine" id="cb22-2" data-line-number="2"><span class="fu">&gt;&gt;</span> <span class="fu">:</span>set <span class="fu">-</span><span class="dt">XOverloadedStrings</span></a>
<a class="sourceLine" id="cb22-3" data-line-number="3"><span class="fu">&gt;&gt;</span> <span class="kw">import</span> <span class="dt">Conduit</span> (($$), (=$=), sinkList)</a>
<a class="sourceLine" id="cb22-4" data-line-number="4"><span class="fu">&gt;&gt;</span> getPosts (qiita <span class="st">&quot;2017&quot;</span>) <span class="fu">$=</span> filterC isHaskellPost <span class="fu">$$</span> sinkList</a></code></pre></div>
<h3 id="json-に書き出す">JSON に書き出す</h3>
<p>前にやったものをそのままコピペした．</p>
<div class="sourceCode" id="cb23"><pre class="sourceCode haskell"><code class="sourceCode haskell"><a class="sourceLine" id="cb23-1" data-line-number="1"><span class="kw">import</span> <span class="dt">Data.Aeson.Encode.Pretty</span> (encodePrettyToTextBuilder)</a>
<a class="sourceLine" id="cb23-2" data-line-number="2"><span class="kw">import</span> <span class="dt">Data.Text</span> (<span class="dt">Text</span>, unpack)</a>
<a class="sourceLine" id="cb23-3" data-line-number="3"><span class="kw">import</span> <span class="dt">Data.Text.Lazy.Builder</span> (toLazyText)</a>
<a class="sourceLine" id="cb23-4" data-line-number="4"><span class="kw">import</span> <span class="kw">qualified</span> <span class="dt">Data.Text.Lazy.IO</span> <span class="kw">as</span> <span class="dt">LT</span></a>
<a class="sourceLine" id="cb23-5" data-line-number="5"></a>
<a class="sourceLine" id="cb23-6" data-line-number="6"><span class="ot">writeJson ::</span> <span class="dt">ToJSON</span> a <span class="ot">=&gt;</span> <span class="dt">Text</span> <span class="ot">-&gt;</span> a <span class="ot">-&gt;</span> <span class="dt">IO</span> ()</a>
<a class="sourceLine" id="cb23-7" data-line-number="7">writeJson jsonPath <span class="fu">=</span></a>
<a class="sourceLine" id="cb23-8" data-line-number="8">  <span class="dt">LT</span><span class="fu">.</span>writeFile (unpack jsonPath) <span class="fu">.</span> toLazyText <span class="fu">.</span> encodePrettyToTextBuilder</a></code></pre></div>
<p>拡張可能レコードの <code>ToJSON</code> のインスタンス化の部分は割愛(<a href="https://github.com/matsubara0507/haskell-advent-calendar/blob/f6d6a097c08e741239f576693e3d6b2b7ae21a29/src/Data/Extensible/Instance/Aeson.hs">ココ</a>にある)．</p>
<h3 id="コマンド化">コマンド化</h3>
<p>CLI のオプション(引数)のパースには optparse-applicative パッケージを使う． スクレイピングには，次のようなオプションの型を考える．</p>
<div class="sourceCode" id="cb24"><pre class="sourceCode haskell"><code class="sourceCode haskell"><a class="sourceLine" id="cb24-1" data-line-number="1"><span class="kw">data</span> <span class="dt">Cmd</span></a>
<a class="sourceLine" id="cb24-2" data-line-number="2">  <span class="fu">=</span> <span class="dt">Fetch</span> <span class="dt">FetchOptions</span></a>
<a class="sourceLine" id="cb24-3" data-line-number="3"></a>
<a class="sourceLine" id="cb24-4" data-line-number="4"><span class="kw">type</span> <span class="dt">FetchOptions</span> <span class="fu">=</span> <span class="dt">Record</span></a>
<a class="sourceLine" id="cb24-5" data-line-number="5">   <span class="ch">&#39;[ &quot;year&quot; &gt;: Text</span></a>
<a class="sourceLine" id="cb24-6" data-line-number="6">    , <span class="st">&quot;qiita&quot;</span> <span class="fu">&gt;:</span> <span class="dt">Bool</span></a>
<a class="sourceLine" id="cb24-7" data-line-number="7">    , <span class="st">&quot;adventar&quot;</span> <span class="fu">&gt;:</span> <span class="dt">Bool</span></a>
<a class="sourceLine" id="cb24-8" data-line-number="8">    , <span class="st">&quot;wdHost&quot;</span> <span class="fu">&gt;:</span> <span class="dt">Text</span></a>
<a class="sourceLine" id="cb24-9" data-line-number="9">    , <span class="st">&quot;wdPort&quot;</span> <span class="fu">&gt;:</span> <span class="dt">Int</span></a>
<a class="sourceLine" id="cb24-10" data-line-number="10">    , <span class="st">&quot;output&quot;</span> <span class="fu">&gt;:</span> <span class="dt">Text</span></a>
<a class="sourceLine" id="cb24-11" data-line-number="11">    ]</a></code></pre></div>
<p><code>year</code> はスクレイピングして欲しい年． <code>qiita</code> や <code>adventar</code> は <code>--qiita</code> って感じのフラグで，フラグが真のものだけ集めてくる(両方偽の場合は，両方真と同じく両方集める)． <code>wdHost</code> と <code>wdPort</code> はヘッドレスブラウザへのオプションで，指定が無ければ <code>localhost:4444</code> をデフォルト値にする． <code>output</code> は <code>-o hoge.json</code> みたいに出力先のファイルを指定する．</p>
<h2 id="section-6"></h2>
<p>例の如く，拡張可能レコードなので，<code>(&lt;@=&gt;)</code> 演算子を使ってパーサーを組み立てていく．</p>
<div class="sourceCode" id="cb25"><pre class="sourceCode haskell"><code class="sourceCode haskell"><a class="sourceLine" id="cb25-1" data-line-number="1"><span class="ot">cmdParser ::</span> <span class="dt">Parser</span> <span class="dt">Cmd</span></a>
<a class="sourceLine" id="cb25-2" data-line-number="2">cmdParser <span class="fu">=</span> subparser <span class="fu">$</span></a>
<a class="sourceLine" id="cb25-3" data-line-number="3">     command <span class="st">&quot;fetch&quot;</span></a>
<a class="sourceLine" id="cb25-4" data-line-number="4">       (<span class="dt">Fetch</span> <span class="fu">&lt;$&gt;</span> fetchOptsParser <span class="ot">`withInfo`</span> <span class="st">&quot;fetch posts on advent calendar to json file.&quot;</span>)</a>
<a class="sourceLine" id="cb25-5" data-line-number="5">  <span class="fu">&lt;&gt;</span> metavar <span class="st">&quot;( fetch )&quot;</span></a>
<a class="sourceLine" id="cb25-6" data-line-number="6">  <span class="fu">&lt;&gt;</span> help <span class="st">&quot;choice subcommand&quot;</span></a>
<a class="sourceLine" id="cb25-7" data-line-number="7"></a>
<a class="sourceLine" id="cb25-8" data-line-number="8"><span class="ot">fetchOptsParser ::</span> <span class="dt">Parser</span> <span class="dt">FetchOptions</span></a>
<a class="sourceLine" id="cb25-9" data-line-number="9">fetchOptsParser <span class="fu">=</span> hsequence</a>
<a class="sourceLine" id="cb25-10" data-line-number="10">    <span class="fu">$</span> <span class="fu">#</span>year     <span class="fu">&lt;@=&gt;</span> yearParser</a>
<a class="sourceLine" id="cb25-11" data-line-number="11">   <span class="fu">&lt;:</span> <span class="fu">#</span>qiita    <span class="fu">&lt;@=&gt;</span> qiitaFlagParser</a>
<a class="sourceLine" id="cb25-12" data-line-number="12">   <span class="fu">&lt;:</span> <span class="fu">#</span>adventar <span class="fu">&lt;@=&gt;</span> adventarFlagParser</a>
<a class="sourceLine" id="cb25-13" data-line-number="13">   <span class="fu">&lt;:</span> <span class="fu">#</span>wdHost   <span class="fu">&lt;@=&gt;</span> wdHostParser</a>
<a class="sourceLine" id="cb25-14" data-line-number="14">   <span class="fu">&lt;:</span> <span class="fu">#</span>wdPort   <span class="fu">&lt;@=&gt;</span> wdPortParser</a>
<a class="sourceLine" id="cb25-15" data-line-number="15">   <span class="fu">&lt;:</span> <span class="fu">#</span>output   <span class="fu">&lt;@=&gt;</span> outputParser</a>
<a class="sourceLine" id="cb25-16" data-line-number="16">   <span class="fu">&lt;:</span> nil</a></code></pre></div>
<p>細かいやつは割愛(<a href="https://github.com/matsubara0507/haskell-advent-calendar/blob/f6d6a097c08e741239f576693e3d6b2b7ae21a29/app/Options.hs">ココ</a>を見て)．</p>
<h2 id="section-7"></h2>
<p><code>main</code> 関数も長いので割愛(<a href="https://github.com/matsubara0507/haskell-advent-calendar/blob/f6d6a097c08e741239f576693e3d6b2b7ae21a29/app/Main.hs">ココ</a>を見て)．</p>
<p>こんな感じに実行する．</p>
<pre><code>$ stack exec -- advent-calendar fetch 2017 --qiita -o &quot;&quot;./out/qiita.json&quot;</code></pre>
<p>スクレイピングの結果は GitHub の<a href="https://github.com/matsubara0507/haskell-advent-calendar/tree/f6d6a097c08e741239f576693e3d6b2b7ae21a29/out/2017">ココ</a>に置いてある．</p>
<h3 id="マークダウンに変換">マークダウンに変換</h3>
<p>最後にマークダウンへ変換する部分を書く． 次のようなサブコマンドを追加する想定だ．</p>
<pre><code>$ stack exec -- advent-calendar markdown &quot;./out/qiita.json&quot; &quot;./out/adventar.json&quot; -o &quot;./out/posts.md&quot;</code></pre>
<p>そのために次のような型とパーサーを定義した．</p>
<div class="sourceCode" id="cb28"><pre class="sourceCode haskell"><code class="sourceCode haskell"><a class="sourceLine" id="cb28-1" data-line-number="1"><span class="kw">data</span> <span class="dt">Cmd</span></a>
<a class="sourceLine" id="cb28-2" data-line-number="2">  <span class="fu">=</span> <span class="dt">Fetch</span> <span class="dt">FetchOptions</span></a>
<a class="sourceLine" id="cb28-3" data-line-number="3">  <span class="fu">|</span> <span class="dt">Markdown</span> <span class="dt">MarkdownOptions</span></a>
<a class="sourceLine" id="cb28-4" data-line-number="4"></a>
<a class="sourceLine" id="cb28-5" data-line-number="5"><span class="kw">type</span> <span class="dt">MarkdownOptions</span> <span class="fu">=</span> <span class="dt">Record</span></a>
<a class="sourceLine" id="cb28-6" data-line-number="6">   <span class="ch">&#39;[ &quot;inputs&quot; &gt;: [Text]</span></a>
<a class="sourceLine" id="cb28-7" data-line-number="7">    , <span class="st">&quot;output&quot;</span> <span class="fu">&gt;:</span> <span class="dt">Maybe</span> <span class="dt">Text</span></a>
<a class="sourceLine" id="cb28-8" data-line-number="8">    , <span class="st">&quot;noCategory&quot;</span> <span class="fu">&gt;:</span> <span class="dt">Bool</span></a>
<a class="sourceLine" id="cb28-9" data-line-number="9">    ]</a>
<a class="sourceLine" id="cb28-10" data-line-number="10"></a>
<a class="sourceLine" id="cb28-11" data-line-number="11"><span class="ot">cmdParser ::</span> <span class="dt">Parser</span> <span class="dt">Cmd</span></a>
<a class="sourceLine" id="cb28-12" data-line-number="12">cmdParser <span class="fu">=</span> subparser <span class="fu">$</span></a>
<a class="sourceLine" id="cb28-13" data-line-number="13">     command <span class="st">&quot;fetch&quot;</span></a>
<a class="sourceLine" id="cb28-14" data-line-number="14">       (<span class="dt">Fetch</span> <span class="fu">&lt;$&gt;</span> fetchOptsParser <span class="ot">`withInfo`</span> <span class="st">&quot;fetch posts on advent calendar to json file.&quot;</span>)</a>
<a class="sourceLine" id="cb28-15" data-line-number="15">  <span class="fu">&lt;&gt;</span> command <span class="st">&quot;markdown&quot;</span></a>
<a class="sourceLine" id="cb28-16" data-line-number="16">       (<span class="dt">Markdown</span> <span class="fu">&lt;$&gt;</span> mdOptsParser <span class="ot">`withInfo`</span> <span class="st">&quot;convert markdown from posts json file.&quot;</span>)</a>
<a class="sourceLine" id="cb28-17" data-line-number="17">  <span class="fu">&lt;&gt;</span> metavar <span class="st">&quot;( fetch | markdown )&quot;</span></a>
<a class="sourceLine" id="cb28-18" data-line-number="18">  <span class="fu">&lt;&gt;</span> help <span class="st">&quot;choice subcommand&quot;</span></a>
<a class="sourceLine" id="cb28-19" data-line-number="19"></a>
<a class="sourceLine" id="cb28-20" data-line-number="20"><span class="ot">mdOptsParser ::</span> <span class="dt">Parser</span> <span class="dt">MarkdownOptions</span></a>
<a class="sourceLine" id="cb28-21" data-line-number="21">mdOptsParser <span class="fu">=</span> hsequence</a>
<a class="sourceLine" id="cb28-22" data-line-number="22">    <span class="fu">$</span> <span class="fu">#</span>inputs     <span class="fu">&lt;@=&gt;</span> inputsParser</a>
<a class="sourceLine" id="cb28-23" data-line-number="23">   <span class="fu">&lt;:</span> <span class="fu">#</span>output     <span class="fu">&lt;@=&gt;</span> outputParser&#39;</a>
<a class="sourceLine" id="cb28-24" data-line-number="24">   <span class="fu">&lt;:</span> <span class="fu">#</span>noCategory <span class="fu">&lt;@=&gt;</span> noCategoryParser</a>
<a class="sourceLine" id="cb28-25" data-line-number="25">   <span class="fu">&lt;:</span> nil</a>
<a class="sourceLine" id="cb28-26" data-line-number="26"></a>
<a class="sourceLine" id="cb28-27" data-line-number="27"><span class="ot">inputsParser ::</span> <span class="dt">Parser</span> [<span class="dt">Text</span>]</a>
<a class="sourceLine" id="cb28-28" data-line-number="28">inputsParser <span class="fu">=</span> some <span class="fu">$</span></a>
<a class="sourceLine" id="cb28-29" data-line-number="29">  textArgument (metavar <span class="st">&quot;inputs&quot;</span> <span class="fu">&lt;&gt;</span> help <span class="st">&quot;Input json file paths&quot;</span>)</a></code></pre></div>
<p><code>some</code> を使うことで，ひとつ以上の入力ファイルのパスを与える部分(<code>markdown &quot;./out/qiita.json&quot; &quot;./out/adventar.json&quot;</code>)のパーサーを簡単に書ける．</p>
<h2 id="section-8"></h2>
<p>マークダウンへの変換部分はこんな感じ．</p>
<div class="sourceCode" id="cb29"><pre class="sourceCode haskell"><code class="sourceCode haskell"><a class="sourceLine" id="cb29-1" data-line-number="1"><span class="ot">toMarkdown ::</span> <span class="dt">Post</span> <span class="ot">-&gt;</span> [<span class="dt">Text</span>]</a>
<a class="sourceLine" id="cb29-2" data-line-number="2">toMarkdown post <span class="fu">=</span> mconcat <span class="fu">&lt;$&gt;</span></a>
<a class="sourceLine" id="cb29-3" data-line-number="3">  [ [ <span class="st">&quot;**[&quot;</span>, post <span class="fu">^.</span> <span class="fu">#</span>title, <span class="st">&quot;](&quot;</span>, post <span class="fu">^.</span> <span class="fu">#</span>url, <span class="st">&quot;)**  &quot;</span> ]</a>
<a class="sourceLine" id="cb29-4" data-line-number="4">  , [ <span class="st">&quot; by &quot;</span>, post <span class="fu">^.</span> <span class="fu">#</span>auther</a>
<a class="sourceLine" id="cb29-5" data-line-number="5">    , <span class="st">&quot; on [&quot;</span>, post <span class="fu">^.</span> <span class="fu">#</span>calendar <span class="fu">^.</span> <span class="fu">#</span>title, <span class="st">&quot;](&quot;</span>, post <span class="fu">^.</span> <span class="fu">#</span>calendar <span class="fu">^.</span> <span class="fu">#</span>url, <span class="st">&quot;) &quot;</span></a>
<a class="sourceLine" id="cb29-6" data-line-number="6">    , post <span class="fu">^.</span> <span class="fu">#</span>date</a>
<a class="sourceLine" id="cb29-7" data-line-number="7">    ]</a>
<a class="sourceLine" id="cb29-8" data-line-number="8">  ]</a></code></pre></div>
<p>この関数の結果 <code>[Text]</code> を <code>unlines</code> してファイルに書き出せばよい． ちなみに，Haskell-jp のブログは，末尾に空白2つで改行となり，空行で HTML にも空行が入るようになっている．</p>
<h4 id="出力結果">出力結果</h4>
<p>は <a href="https://github.com/haskell-jp/blog/blob/02a2b1c68cd75a15d72eedd3148fc803c103a0b7/preprocessed-site/posts/2017/advent-calendar-2017.md#%E3%83%9D%E3%82%A8%E3%83%A0">Haskell-jp ブログのソースコード</a>(もちろん前半部分は手書き)を見ればいいと思うよ．</p>
<h2 id="おしまい">おしまい</h2>
<p>結局，<strong>全ての記事を集めてくるのに半日近くかかった(笑)</strong> 来年は投票機能とか，少しずつ集めたりとかできるといいよね．</p>
  </div>
</div>
</article>
]]></summary>
</entry>
<entry>
    <title>Elm でマークダウンプレゼンテーションエディタを作ってみた (その２)</title>
    <link href="https://matsubara0507.github.io/posts/2017-12-22-create-elmdeck-part2.html" />
    <id>https://matsubara0507.github.io/posts/2017-12-22-create-elmdeck-part2.html</id>
    <published>2017-12-22T00:00:00Z</published>
    <updated>2017-12-22T00:00:00Z</updated>
    <summary type="html"><![CDATA[<article class="post card" itemscope itemtype="http://schema.org/BlogPosting">
 <div class="card-content">
  <header class="post-header">
    <h1 class="post-title" itemprop="name headline">Elm でマークダウンプレゼンテーションエディタを作ってみた (その２)</h1>
    <p class="post-meta">
      <time datetime="2017-12-22" itemprop="datePublished">
        Dec 22, 2017
      </time>
      
      
      <div class="tags">
          <i class="fa fa-tags"></i> <a href="/tags/Elm.html">Elm</a> <a href="/tags/application.html">application</a>
      </div>
      
    </p>
  </header>

  <div class="post-content" itemprop="articleBody">
    <p><a href="https://qiita.com/advent-calendar/2017/electron">Electron Advent Calendar 2017</a> の22日目の記事です．</p>
<p><a href="https://qiita.com/advent-calendar/2017/elm2">Elm2 アドカレ</a>で 「Elm でマークダウンプレゼンテーションエディタを作るハナシ」を書いたのですが，長くなったので分けました． 前半は<a href="/posts/2017-12-18-create-elmdeck-part1.html">コチラ</a>(前半は Electron 関係ないけどね)．</p>
<h2 id="section"></h2>
<p>今回はローカルファイルの読み書きをするために Electron を導入します(Elm もといブラウザでいい感じにする方法が分からなかった)． 今回のコードは以下のリポジトリにあります．</p>
<ul>
<li><a href="https://github.com/matsubara0507/elmdeck/tree/electron">matsubara0507/elmdeck - GitHub</a></li>
</ul>
<h2 id="elm-と-electron">Elm と Electron</h2>
<p>結構いろんな人が挑戦してて，資料は豊富にある． ぼくは以下のリポジトリを参考にした．</p>
<ul>
<li><a href="https://github.com/yasuyuky/elmtrn">yasuyuky/elmtrn - GitHub</a></li>
</ul>
<p>アナログ時計を表示する Electron プログラムだったはず．</p>
<h2 id="つくる">つくる</h2>
<p>少しずつ拡張していく．</p>
<h3 id="electron-化">Electron 化</h3>
<p>まずは Electron 化する． <a href="https://github.com/matsubara0507/elmdeck/tree/6ff0520f65080c9a94ac85c99fc01e0374ca250e">もともと</a>は次のような構成だった(<code>main.js</code> は Elm ファイル群から生成)．</p>
<pre class="txt"><code>/
 |-- elm-package.json
 |-- index.html
 |-- src/
 |    |-- Main.elm
 |    \-- ..
 \-- js/
      |-- main.js
      \-- highlight.js</code></pre>
<p>これ，elmtrn を参考に次のような構成に変更した．</p>
<pre class="txt"><code>/
 |-- elm-package.json
 |-- gulpfile.js
 |-- package.json
 \-- app
      |-- index.html
      |-- src/
      |    |-- Main.elm
      |    \-- ..
      \-- js/
           |-- app.js
           |-- main.js
           \-- ..</code></pre>
<p><a href="https://github.com/matsubara0507/elmdeck/blob/97607bc1c2f069101d7d6012dcd46470d3a2d3fe/package.json">package.json</a> は elmtrn をほぼそのまんま(<code>main</code> の場所だけ違う)． gulp を使って，Elm のコードを監視・コンパイルし，生成した JS コードを Electron から呼び出す． elmtrn の gulpfile.js の設定では，各 Elm ファイルに対しひとつの JS ファイルを生成していたが，自分はひとまとめにした JS を生成したかったので，次のように gulpfile.js を書き換えた．</p>
<div class="sourceCode" id="cb3"><pre class="sourceCode javascript"><code class="sourceCode javascript"><a class="sourceLine" id="cb3-1" data-line-number="1"><span class="kw">const</span> g <span class="op">=</span> <span class="at">require</span>(<span class="st">&#39;gulp&#39;</span>)<span class="op">;</span></a>
<a class="sourceLine" id="cb3-2" data-line-number="2"><span class="kw">const</span> electron <span class="op">=</span> <span class="at">require</span>(<span class="st">&#39;electron-connect&#39;</span>).<span class="va">server</span>.<span class="at">create</span>()<span class="op">;</span></a>
<a class="sourceLine" id="cb3-3" data-line-number="3"><span class="kw">const</span> packager <span class="op">=</span> <span class="at">require</span>(<span class="st">&#39;electron-packager&#39;</span>)<span class="op">;</span></a>
<a class="sourceLine" id="cb3-4" data-line-number="4"><span class="kw">const</span> $ <span class="op">=</span> <span class="at">require</span>(<span class="st">&#39;gulp-load-plugins&#39;</span>)()<span class="op">;</span></a>
<a class="sourceLine" id="cb3-5" data-line-number="5"><span class="kw">const</span> packageJson <span class="op">=</span> <span class="at">require</span>(<span class="st">&#39;./package.json&#39;</span>)<span class="op">;</span></a>
<a class="sourceLine" id="cb3-6" data-line-number="6"><span class="kw">const</span> extend <span class="op">=</span> <span class="at">require</span>(<span class="st">&#39;util&#39;</span>).<span class="at">_extend</span><span class="op">;</span></a>
<a class="sourceLine" id="cb3-7" data-line-number="7"></a>
<a class="sourceLine" id="cb3-8" data-line-number="8"><span class="va">g</span>.<span class="at">task</span>(<span class="st">&#39;watch&#39;</span><span class="op">,</span> () <span class="op">=&gt;</span> <span class="op">{</span></a>
<a class="sourceLine" id="cb3-9" data-line-number="9">  <span class="va">g</span>.<span class="at">watch</span>([<span class="st">&#39;app/src/**/*.elm&#39;</span>]<span class="op">,</span>[<span class="st">&#39;elm&#39;</span>])<span class="op">;</span></a>
<a class="sourceLine" id="cb3-10" data-line-number="10">  <span class="va">electron</span>.<span class="at">start</span>()<span class="op">;</span></a>
<a class="sourceLine" id="cb3-11" data-line-number="11">  <span class="va">g</span>.<span class="at">watch</span>([<span class="st">&#39;app/js/*.js&#39;</span><span class="op">,</span> <span class="st">&#39;app/index.html&#39;</span>]<span class="op">,</span> <span class="va">electron</span>.<span class="at">restart</span>)<span class="op">;</span></a>
<a class="sourceLine" id="cb3-12" data-line-number="12">  <span class="va">g</span>.<span class="at">watch</span>([]<span class="op">,</span> <span class="va">electron</span>.<span class="at">reload</span>)<span class="op">;</span></a>
<a class="sourceLine" id="cb3-13" data-line-number="13"><span class="op">}</span>)</a>
<a class="sourceLine" id="cb3-14" data-line-number="14"></a>
<a class="sourceLine" id="cb3-15" data-line-number="15"><span class="va">g</span>.<span class="at">task</span>(<span class="st">&#39;elm&#39;</span><span class="op">,</span> () <span class="op">=&gt;{</span></a>
<a class="sourceLine" id="cb3-16" data-line-number="16">  <span class="va">g</span>.<span class="at">src</span>([<span class="st">&#39;app/src/**/*.elm&#39;</span>])</a>
<a class="sourceLine" id="cb3-17" data-line-number="17">    .<span class="at">pipe</span>(<span class="va">$</span>.<span class="at">logger</span>())</a>
<a class="sourceLine" id="cb3-18" data-line-number="18">    .<span class="at">pipe</span>(<span class="va">$</span>.<span class="at">plumber</span>())</a>
<a class="sourceLine" id="cb3-19" data-line-number="19">    .<span class="at">pipe</span>(<span class="va">$</span>.<span class="va">elm</span>.<span class="at">bundle</span>(<span class="st">&#39;main.js&#39;</span><span class="op">,</span> debug<span class="op">=</span><span class="kw">true</span>))</a>
<a class="sourceLine" id="cb3-20" data-line-number="20">    .<span class="at">pipe</span>(<span class="va">g</span>.<span class="at">dest</span>(<span class="st">&quot;app/js&quot;</span>))<span class="op">;</span></a>
<a class="sourceLine" id="cb3-21" data-line-number="21"><span class="op">}</span>)</a>
<a class="sourceLine" id="cb3-22" data-line-number="22"></a>
<a class="sourceLine" id="cb3-23" data-line-number="23"><span class="va">g</span>.<span class="at">task</span>(<span class="st">&#39;default&#39;</span><span class="op">,</span> [<span class="st">&#39;watch&#39;</span>])</a></code></pre></div>
<p><a href="https://github.com/philopon/gulp-elm">philopon/gulp-elm の README</a> が参考になった．</p>
<h2 id="section-1"></h2>
<p>あとは，次のように elmtrn の app.js を適当に書き直した．</p>
<div class="sourceCode" id="cb4"><pre class="sourceCode javascript"><code class="sourceCode javascript"><a class="sourceLine" id="cb4-1" data-line-number="1"><span class="kw">const</span> <span class="op">{</span>app<span class="op">,</span> BrowserWindow<span class="op">}</span> <span class="op">=</span> <span class="at">require</span>(<span class="st">&#39;electron&#39;</span>)<span class="op">;</span></a>
<a class="sourceLine" id="cb4-2" data-line-number="2"><span class="kw">var</span> mainWindow <span class="op">=</span> <span class="kw">null</span><span class="op">;</span></a>
<a class="sourceLine" id="cb4-3" data-line-number="3"></a>
<a class="sourceLine" id="cb4-4" data-line-number="4"><span class="va">app</span>.<span class="at">on</span>(<span class="st">&#39;window-all-closed&#39;</span><span class="op">,</span> <span class="kw">function</span>() <span class="op">{</span></a>
<a class="sourceLine" id="cb4-5" data-line-number="5">    <span class="va">app</span>.<span class="at">quit</span>()<span class="op">;</span></a>
<a class="sourceLine" id="cb4-6" data-line-number="6"><span class="op">}</span>)<span class="op">;</span></a>
<a class="sourceLine" id="cb4-7" data-line-number="7"></a>
<a class="sourceLine" id="cb4-8" data-line-number="8"><span class="va">app</span>.<span class="at">on</span>(<span class="st">&#39;ready&#39;</span><span class="op">,</span> <span class="kw">function</span>() <span class="op">{</span></a>
<a class="sourceLine" id="cb4-9" data-line-number="9">  mainWindow <span class="op">=</span> <span class="kw">new</span> <span class="at">BrowserWindow</span>(<span class="op">{</span></a>
<a class="sourceLine" id="cb4-10" data-line-number="10">    <span class="st">&quot;frame&quot;</span><span class="op">:</span> <span class="kw">true</span><span class="op">,</span></a>
<a class="sourceLine" id="cb4-11" data-line-number="11">    <span class="st">&quot;always-on-top&quot;</span><span class="op">:</span> <span class="kw">true</span><span class="op">,</span></a>
<a class="sourceLine" id="cb4-12" data-line-number="12">    <span class="st">&quot;resizable&quot;</span><span class="op">:</span> <span class="kw">true</span></a>
<a class="sourceLine" id="cb4-13" data-line-number="13">  <span class="op">}</span>)<span class="op">;</span></a>
<a class="sourceLine" id="cb4-14" data-line-number="14">  <span class="va">mainWindow</span>.<span class="at">maximize</span>()<span class="op">;</span></a>
<a class="sourceLine" id="cb4-15" data-line-number="15">  <span class="va">mainWindow</span>.<span class="at">loadURL</span>(<span class="st">&#39;file://&#39;</span> <span class="op">+</span> __dirname <span class="op">+</span> <span class="st">&#39;/../index.html&#39;</span>)<span class="op">;</span></a>
<a class="sourceLine" id="cb4-16" data-line-number="16">  <span class="va">mainWindow</span>.<span class="at">on</span>(<span class="st">&#39;closed&#39;</span><span class="op">,</span> <span class="kw">function</span>() <span class="op">{</span></a>
<a class="sourceLine" id="cb4-17" data-line-number="17">    mainWindow <span class="op">=</span> <span class="kw">null</span><span class="op">;</span></a>
<a class="sourceLine" id="cb4-18" data-line-number="18">  <span class="op">}</span>)<span class="op">;</span></a>
<a class="sourceLine" id="cb4-19" data-line-number="19"><span class="op">}</span>)<span class="op">;</span></a></code></pre></div>
<p>これで <code>gulp</code> を実行すればブラウザ版 elmdeck がそのまんま electron で実行できる． やったぁ．</p>
<h3 id="ファイルの読み込み">ファイルの読み込み</h3>
<p>ココからが本番．</p>
<p>設計として，デスクトップでよくある感じに，左上の <code>File</code> から <code>Open</code> とかしたい． こんな感じ(これは Atom だけど)．</p>
<p><img src="/assets/create-elmdeck/atom-file-open.jpg" /></p>
<p>Electron でファイルの呼び出しをする方法は以下の記事を参考にした．</p>
<ul>
<li><a href="https://qiita.com/_takwat/items/6544342fd4141345bb19">Electronでファイルやフォルダの選択 - Qiita</a></li>
</ul>
<p>Node の fs ライブラリを使えばよいようだ(Electron に限らないハナシかな)． <a href="https://nodejs.org/api/fs.html">fs の公式ドキュメント</a>とにらめっこして <a href="https://nodejs.org/api/fs.html#fs_fs_readfile_path_options_callback"><code>fs.readFile</code></a> を呼び出せば良いみたいなのは分かった． 取りあえず，次のような <code>files.js</code> ファイルを書いた．</p>
<div class="sourceCode" id="cb5"><pre class="sourceCode javascript"><code class="sourceCode javascript"><a class="sourceLine" id="cb5-1" data-line-number="1"><span class="st">&#39;use strict&#39;</span><span class="op">;</span></a>
<a class="sourceLine" id="cb5-2" data-line-number="2"></a>
<a class="sourceLine" id="cb5-3" data-line-number="3"><span class="kw">const</span> <span class="op">{</span>remote<span class="op">}</span> <span class="op">=</span> <span class="at">require</span>(<span class="st">&#39;electron&#39;</span>)<span class="op">;</span></a>
<a class="sourceLine" id="cb5-4" data-line-number="4"><span class="kw">const</span> <span class="op">{</span>dialog<span class="op">,</span> BrowserWindow<span class="op">}</span> <span class="op">=</span> remote<span class="op">;</span></a>
<a class="sourceLine" id="cb5-5" data-line-number="5"><span class="kw">const</span> fs <span class="op">=</span> <span class="at">require</span>(<span class="st">&#39;fs&#39;</span>)<span class="op">;</span></a>
<a class="sourceLine" id="cb5-6" data-line-number="6"></a>
<a class="sourceLine" id="cb5-7" data-line-number="7"><span class="va">module</span>.<span class="at">exports</span> <span class="op">=</span> <span class="op">{</span></a>
<a class="sourceLine" id="cb5-8" data-line-number="8">  <span class="dt">readFile</span><span class="op">:</span> <span class="kw">function</span> (app) <span class="op">{</span></a>
<a class="sourceLine" id="cb5-9" data-line-number="9">    <span class="va">dialog</span>.<span class="at">showOpenDialog</span>(<span class="kw">null</span><span class="op">,</span> <span class="op">{</span></a>
<a class="sourceLine" id="cb5-10" data-line-number="10">        <span class="dt">properties</span><span class="op">:</span> [<span class="st">&#39;openFile&#39;</span>]<span class="op">,</span></a>
<a class="sourceLine" id="cb5-11" data-line-number="11">        <span class="dt">title</span><span class="op">:</span> <span class="st">&#39;File&#39;</span><span class="op">,</span></a>
<a class="sourceLine" id="cb5-12" data-line-number="12">        <span class="dt">defaultPath</span><span class="op">:</span> <span class="st">&#39;.&#39;</span><span class="op">,</span></a>
<a class="sourceLine" id="cb5-13" data-line-number="13">        <span class="dt">filters</span><span class="op">:</span> [</a>
<a class="sourceLine" id="cb5-14" data-line-number="14">            <span class="op">{</span><span class="dt">name</span><span class="op">:</span> <span class="st">&#39;マークダウン&#39;</span><span class="op">,</span> <span class="dt">extensions</span><span class="op">:</span> [<span class="st">&#39;md&#39;</span><span class="op">,</span> <span class="st">&#39;markdown&#39;</span>]<span class="op">},</span></a>
<a class="sourceLine" id="cb5-15" data-line-number="15">        ]</a>
<a class="sourceLine" id="cb5-16" data-line-number="16">    <span class="op">},</span> (fileNames) <span class="op">=&gt;</span> <span class="op">{</span></a>
<a class="sourceLine" id="cb5-17" data-line-number="17">        <span class="va">fs</span>.<span class="at">readFile</span>(fileNames[<span class="dv">0</span>]<span class="op">,</span> <span class="st">&#39;utf8&#39;</span><span class="op">,</span> (err<span class="op">,</span> data) <span class="op">=&gt;</span> <span class="op">{</span></a>
<a class="sourceLine" id="cb5-18" data-line-number="18">          <span class="cf">if</span> (err) <span class="va">console</span>.<span class="at">log</span>(err)<span class="op">;</span></a>
<a class="sourceLine" id="cb5-19" data-line-number="19">          <span class="va">console</span>.<span class="at">log</span>(data)<span class="op">;</span></a>
<a class="sourceLine" id="cb5-20" data-line-number="20">        <span class="op">}</span>)</a>
<a class="sourceLine" id="cb5-21" data-line-number="21">    <span class="op">}</span>)<span class="op">;</span></a>
<a class="sourceLine" id="cb5-22" data-line-number="22">  <span class="op">}</span></a>
<a class="sourceLine" id="cb5-23" data-line-number="23"><span class="op">}</span></a></code></pre></div>
<p>次にこれをメニューバーから呼べるようにする． Electron のメニューバーを拡張するには <a href="https://electronjs.org/docs/api/menu"><code>Menu</code> クラス</a>を使えば良いらしい． サンプルやらを参考にしながらイロイロ試行錯誤してみた結果，次のような <code>menuItems.js</code> ファイルを書き，</p>
<div class="sourceCode" id="cb6"><pre class="sourceCode javascript"><code class="sourceCode javascript"><a class="sourceLine" id="cb6-1" data-line-number="1"><span class="kw">const</span> <span class="op">{</span>app<span class="op">,</span> Menu<span class="op">,</span> dialog<span class="op">}</span> <span class="op">=</span> <span class="at">require</span>(<span class="st">&#39;electron&#39;</span>)<span class="op">;</span></a>
<a class="sourceLine" id="cb6-2" data-line-number="2"></a>
<a class="sourceLine" id="cb6-3" data-line-number="3"><span class="kw">const</span> template <span class="op">=</span> [</a>
<a class="sourceLine" id="cb6-4" data-line-number="4">  <span class="op">{</span></a>
<a class="sourceLine" id="cb6-5" data-line-number="5">    <span class="dt">label</span><span class="op">:</span> <span class="st">&#39;Edit&#39;</span><span class="op">,</span></a>
<a class="sourceLine" id="cb6-6" data-line-number="6">    <span class="dt">submenu</span><span class="op">:</span> [</a>
<a class="sourceLine" id="cb6-7" data-line-number="7">      <span class="op">{</span><span class="dt">role</span><span class="op">:</span> <span class="st">&#39;undo&#39;</span><span class="op">},</span></a>
<a class="sourceLine" id="cb6-8" data-line-number="8">      <span class="op">{</span><span class="dt">role</span><span class="op">:</span> <span class="st">&#39;redo&#39;</span><span class="op">},</span></a>
<a class="sourceLine" id="cb6-9" data-line-number="9">      <span class="op">{</span><span class="dt">type</span><span class="op">:</span> <span class="st">&#39;separator&#39;</span><span class="op">},</span></a>
<a class="sourceLine" id="cb6-10" data-line-number="10">      <span class="op">{</span><span class="dt">role</span><span class="op">:</span> <span class="st">&#39;cut&#39;</span><span class="op">},</span></a>
<a class="sourceLine" id="cb6-11" data-line-number="11">      <span class="op">{</span><span class="dt">role</span><span class="op">:</span> <span class="st">&#39;copy&#39;</span><span class="op">},</span></a>
<a class="sourceLine" id="cb6-12" data-line-number="12">      <span class="op">{</span><span class="dt">role</span><span class="op">:</span> <span class="st">&#39;paste&#39;</span><span class="op">},</span></a>
<a class="sourceLine" id="cb6-13" data-line-number="13">      <span class="op">{</span><span class="dt">role</span><span class="op">:</span> <span class="st">&#39;pasteandmatchstyle&#39;</span><span class="op">},</span></a>
<a class="sourceLine" id="cb6-14" data-line-number="14">      <span class="op">{</span><span class="dt">role</span><span class="op">:</span> <span class="st">&#39;delete&#39;</span><span class="op">},</span></a>
<a class="sourceLine" id="cb6-15" data-line-number="15">      <span class="op">{</span><span class="dt">role</span><span class="op">:</span> <span class="st">&#39;selectall&#39;</span><span class="op">}</span></a>
<a class="sourceLine" id="cb6-16" data-line-number="16">    ]</a>
<a class="sourceLine" id="cb6-17" data-line-number="17">  <span class="op">},</span></a>
<a class="sourceLine" id="cb6-18" data-line-number="18">  <span class="op">{</span></a>
<a class="sourceLine" id="cb6-19" data-line-number="19">    <span class="dt">label</span><span class="op">:</span> <span class="st">&#39;View&#39;</span><span class="op">,</span></a>
<a class="sourceLine" id="cb6-20" data-line-number="20">    <span class="dt">submenu</span><span class="op">:</span> [</a>
<a class="sourceLine" id="cb6-21" data-line-number="21">      <span class="op">{</span><span class="dt">role</span><span class="op">:</span> <span class="st">&#39;reload&#39;</span><span class="op">},</span></a>
<a class="sourceLine" id="cb6-22" data-line-number="22">      <span class="op">{</span><span class="dt">role</span><span class="op">:</span> <span class="st">&#39;forcereload&#39;</span><span class="op">},</span></a>
<a class="sourceLine" id="cb6-23" data-line-number="23">      <span class="op">{</span><span class="dt">role</span><span class="op">:</span> <span class="st">&#39;toggledevtools&#39;</span><span class="op">},</span></a>
<a class="sourceLine" id="cb6-24" data-line-number="24">      <span class="op">{</span><span class="dt">type</span><span class="op">:</span> <span class="st">&#39;separator&#39;</span><span class="op">},</span></a>
<a class="sourceLine" id="cb6-25" data-line-number="25">      <span class="op">{</span><span class="dt">role</span><span class="op">:</span> <span class="st">&#39;resetzoom&#39;</span><span class="op">},</span></a>
<a class="sourceLine" id="cb6-26" data-line-number="26">      <span class="op">{</span><span class="dt">role</span><span class="op">:</span> <span class="st">&#39;zoomin&#39;</span><span class="op">},</span></a>
<a class="sourceLine" id="cb6-27" data-line-number="27">      <span class="op">{</span><span class="dt">role</span><span class="op">:</span> <span class="st">&#39;zoomout&#39;</span><span class="op">},</span></a>
<a class="sourceLine" id="cb6-28" data-line-number="28">      <span class="op">{</span><span class="dt">type</span><span class="op">:</span> <span class="st">&#39;separator&#39;</span><span class="op">},</span></a>
<a class="sourceLine" id="cb6-29" data-line-number="29">      <span class="op">{</span><span class="dt">role</span><span class="op">:</span> <span class="st">&#39;togglefullscreen&#39;</span><span class="op">},</span></a>
<a class="sourceLine" id="cb6-30" data-line-number="30">      <span class="op">{</span><span class="dt">role</span><span class="op">:</span> <span class="st">&#39;toggledevtools&#39;</span><span class="op">}</span></a>
<a class="sourceLine" id="cb6-31" data-line-number="31">    ]</a>
<a class="sourceLine" id="cb6-32" data-line-number="32">  <span class="op">},</span></a>
<a class="sourceLine" id="cb6-33" data-line-number="33">  <span class="op">{</span></a>
<a class="sourceLine" id="cb6-34" data-line-number="34">    <span class="dt">role</span><span class="op">:</span> <span class="st">&#39;window&#39;</span><span class="op">,</span></a>
<a class="sourceLine" id="cb6-35" data-line-number="35">    <span class="dt">submenu</span><span class="op">:</span> [</a>
<a class="sourceLine" id="cb6-36" data-line-number="36">      <span class="op">{</span><span class="dt">role</span><span class="op">:</span> <span class="st">&#39;minimize&#39;</span><span class="op">},</span></a>
<a class="sourceLine" id="cb6-37" data-line-number="37">      <span class="op">{</span><span class="dt">role</span><span class="op">:</span> <span class="st">&#39;close&#39;</span><span class="op">}</span></a>
<a class="sourceLine" id="cb6-38" data-line-number="38">    ]</a>
<a class="sourceLine" id="cb6-39" data-line-number="39">  <span class="op">},</span></a>
<a class="sourceLine" id="cb6-40" data-line-number="40">  <span class="op">{</span></a>
<a class="sourceLine" id="cb6-41" data-line-number="41">    <span class="dt">role</span><span class="op">:</span> <span class="st">&#39;help&#39;</span><span class="op">,</span></a>
<a class="sourceLine" id="cb6-42" data-line-number="42">    <span class="dt">submenu</span><span class="op">:</span> [</a>
<a class="sourceLine" id="cb6-43" data-line-number="43">      <span class="op">{</span></a>
<a class="sourceLine" id="cb6-44" data-line-number="44">        <span class="dt">label</span><span class="op">:</span> <span class="st">&#39;Learn More&#39;</span><span class="op">,</span></a>
<a class="sourceLine" id="cb6-45" data-line-number="45">        <span class="at">click</span> () <span class="op">{</span> <span class="at">require</span>(<span class="st">&#39;electron&#39;</span>).<span class="va">shell</span>.<span class="at">openExternal</span>(<span class="st">&#39;https://electron.atom.io&#39;</span>) <span class="op">}</span></a>
<a class="sourceLine" id="cb6-46" data-line-number="46">      <span class="op">}</span></a>
<a class="sourceLine" id="cb6-47" data-line-number="47">    ]</a>
<a class="sourceLine" id="cb6-48" data-line-number="48">  <span class="op">}</span></a>
<a class="sourceLine" id="cb6-49" data-line-number="49">]</a>
<a class="sourceLine" id="cb6-50" data-line-number="50"></a>
<a class="sourceLine" id="cb6-51" data-line-number="51"><span class="kw">const</span> items <span class="op">=</span> <span class="va">template</span>.<span class="at">map</span>( option <span class="op">=&gt;</span> <span class="op">{</span> <span class="cf">return</span> <span class="kw">new</span> <span class="at">MenuItem</span>(option) <span class="op">}</span>)<span class="op">;</span></a>
<a class="sourceLine" id="cb6-52" data-line-number="52"></a>
<a class="sourceLine" id="cb6-53" data-line-number="53"><span class="va">module</span>.<span class="at">exports</span> <span class="op">=</span> <span class="op">{</span></a>
<a class="sourceLine" id="cb6-54" data-line-number="54">  <span class="dt">get</span><span class="op">:</span> () <span class="op">=&gt;</span> <span class="op">{</span> <span class="cf">return</span> items<span class="op">;</span> <span class="op">}</span></a>
<a class="sourceLine" id="cb6-55" data-line-number="55"><span class="op">}</span></a></code></pre></div>
<p>これ(module exports した <code>get</code> 関数のコト)を <code>index.html</code> で次のように呼び出した．</p>
<div class="sourceCode" id="cb7"><pre class="sourceCode html"><code class="sourceCode html"><a class="sourceLine" id="cb7-1" data-line-number="1"><span class="kw">&lt;script&gt;</span></a>
<a class="sourceLine" id="cb7-2" data-line-number="2">  <span class="kw">const</span> <span class="op">{</span>remote<span class="op">}</span> <span class="op">=</span> <span class="at">require</span>(<span class="st">&#39;electron&#39;</span>)<span class="op">;</span></a>
<a class="sourceLine" id="cb7-3" data-line-number="3">  <span class="kw">const</span> <span class="op">{</span>Menu<span class="op">,</span> MenuItem<span class="op">}</span> <span class="op">=</span> remote<span class="op">;</span></a>
<a class="sourceLine" id="cb7-4" data-line-number="4">  <span class="kw">const</span> files <span class="op">=</span> <span class="at">require</span>(<span class="st">&#39;./js/files&#39;</span>)<span class="op">;</span></a>
<a class="sourceLine" id="cb7-5" data-line-number="5">  <span class="kw">const</span> menuItems <span class="op">=</span> <span class="at">require</span>(<span class="st">&#39;./js/menuItems&#39;</span>)</a>
<a class="sourceLine" id="cb7-6" data-line-number="6"></a>
<a class="sourceLine" id="cb7-7" data-line-number="7">  <span class="kw">var</span> node <span class="op">=</span> <span class="va">document</span>.<span class="at">getElementById</span>(<span class="st">&#39;main&#39;</span>)<span class="op">;</span></a>
<a class="sourceLine" id="cb7-8" data-line-number="8">  <span class="cf">while</span> (<span class="va">node</span>.<span class="at">firstChild</span>) <span class="op">{</span></a>
<a class="sourceLine" id="cb7-9" data-line-number="9">    <span class="va">node</span>.<span class="at">removeChild</span>(<span class="va">node</span>.<span class="at">firstChild</span>)<span class="op">;</span></a>
<a class="sourceLine" id="cb7-10" data-line-number="10">  <span class="op">}</span></a>
<a class="sourceLine" id="cb7-11" data-line-number="11">  <span class="kw">var</span> app <span class="op">=</span> <span class="va">module</span>.<span class="va">exports</span>.<span class="va">Main</span>.<span class="at">embed</span>(node)<span class="op">;</span></a>
<a class="sourceLine" id="cb7-12" data-line-number="12"></a>
<a class="sourceLine" id="cb7-13" data-line-number="13">  <span class="kw">var</span> menuvar <span class="op">=</span> <span class="kw">new</span> <span class="at">Menu</span>()<span class="op">;</span></a>
<a class="sourceLine" id="cb7-14" data-line-number="14">  <span class="va">menuvar</span>.<span class="at">append</span>(<span class="kw">new</span> <span class="at">MenuItem</span>(</a>
<a class="sourceLine" id="cb7-15" data-line-number="15">    <span class="op">{</span></a>
<a class="sourceLine" id="cb7-16" data-line-number="16">      <span class="dt">label</span><span class="op">:</span> <span class="st">&#39;File&#39;</span><span class="op">,</span></a>
<a class="sourceLine" id="cb7-17" data-line-number="17">      <span class="dt">submenu</span><span class="op">:</span> [</a>
<a class="sourceLine" id="cb7-18" data-line-number="18">        <span class="op">{</span></a>
<a class="sourceLine" id="cb7-19" data-line-number="19">          <span class="dt">label</span><span class="op">:</span> <span class="st">&#39;Open&#39;</span><span class="op">,</span></a>
<a class="sourceLine" id="cb7-20" data-line-number="20">          <span class="at">click</span>() <span class="op">{</span> <span class="va">files</span>.<span class="at">readFile</span>(app) <span class="op">}</span></a>
<a class="sourceLine" id="cb7-21" data-line-number="21">        <span class="op">}</span></a>
<a class="sourceLine" id="cb7-22" data-line-number="22">      ]</a>
<a class="sourceLine" id="cb7-23" data-line-number="23">    <span class="op">}</span></a>
<a class="sourceLine" id="cb7-24" data-line-number="24">  ))<span class="op">;</span></a>
<a class="sourceLine" id="cb7-25" data-line-number="25">  <span class="va">menuItems</span>.<span class="at">get</span>().<span class="at">forEach</span>( item <span class="op">=&gt;</span> <span class="op">{</span> <span class="va">menuvar</span>.<span class="at">append</span>(item) <span class="op">}</span> )<span class="op">;</span></a>
<a class="sourceLine" id="cb7-26" data-line-number="26">  <span class="va">Menu</span>.<span class="at">setApplicationMenu</span>(menuvar)</a>
<a class="sourceLine" id="cb7-27" data-line-number="27"><span class="kw">&lt;/script&gt;</span></a></code></pre></div>
<p><code>var menuvar = new Menu();</code> 以下からがキモです． どーしても，動的に処理を定義しない部分(<code>Edit</code> とか <code>View</code> とか)を別ファイル(<code>menuItems.js</code>)にまとめたうえで，<code>File</code> を先頭に突っ込みたかったのでこうなった． JS は全然詳しくないのでアンチパターンかもしれないけどね．</p>
<h4 id="elm-に繋げる">Elm に繋げる</h4>
<p>ここまでで</p>
<ol type="1">
<li>上部にあるメニューバーの <code>File</code> -&gt; <code>Open</code> を押して</li>
<li>ファイルをダイアログで選択し</li>
<li>コンソールに内容を吐き出す</li>
</ol>
<p>までは書けた． ここからは (3) が「Elm に渡して input エリアに書き出す」になるようにする．</p>
<p>Elm と JS を繋ぐには方法がいくつかあるが，今回は <code>Port</code> を使ってみる(前回はお行儀の悪い <code>Native</code> モジュールを使ったけど)． 次の記事が本当に参考になった．</p>
<ul>
<li><a href="https://qiita.com/jooex/items/5ff2d3b86563cf5dbd84">ElmのPortでJSを使う。 - Qiita</a></li>
</ul>
<p>マークダウンファイルの中身を JS から Elm に投げるので Elm で次のような <code>ports</code> 関数を定義した．</p>
<div class="sourceCode" id="cb8"><pre class="sourceCode haskell"><code class="sourceCode haskell"><a class="sourceLine" id="cb8-1" data-line-number="1"><span class="co">-- src/Port/FS.elm</span></a>
<a class="sourceLine" id="cb8-2" data-line-number="2">port <span class="kw">module</span> <span class="dt">Port.FS</span> exposing (<span class="fu">..</span>)</a>
<a class="sourceLine" id="cb8-3" data-line-number="3"></a>
<a class="sourceLine" id="cb8-4" data-line-number="4">port readFile <span class="fu">:</span> (<span class="dt">String</span> <span class="ot">-&gt;</span> msg) <span class="ot">-&gt;</span> <span class="dt">Sub</span> msg</a></code></pre></div>
<p>これを <code>Main.elm</code> で次のように呼び出す．</p>
<div class="sourceCode" id="cb9"><pre class="sourceCode haskell"><code class="sourceCode haskell"><a class="sourceLine" id="cb9-1" data-line-number="1"><span class="kw">type</span> alias <span class="dt">Model</span> <span class="fu">=</span></a>
<a class="sourceLine" id="cb9-2" data-line-number="2">  { textarea <span class="fu">:</span> <span class="dt">String</span></a>
<a class="sourceLine" id="cb9-3" data-line-number="3">  , window <span class="fu">:</span> <span class="dt">Window.Size</span></a>
<a class="sourceLine" id="cb9-4" data-line-number="4">  }</a>
<a class="sourceLine" id="cb9-5" data-line-number="5"></a>
<a class="sourceLine" id="cb9-6" data-line-number="6"><span class="kw">type</span> <span class="dt">Msg</span></a>
<a class="sourceLine" id="cb9-7" data-line-number="7">  <span class="fu">=</span> <span class="dt">TextAreaInput</span> <span class="dt">String</span></a>
<a class="sourceLine" id="cb9-8" data-line-number="8">  <span class="fu">|</span> <span class="dt">SizeUpdated</span> <span class="dt">Window.Size</span></a>
<a class="sourceLine" id="cb9-9" data-line-number="9"></a>
<a class="sourceLine" id="cb9-10" data-line-number="10">main <span class="fu">:</span> <span class="dt">Program</span> <span class="dt">Never</span> <span class="dt">Model</span> <span class="dt">Msg</span></a>
<a class="sourceLine" id="cb9-11" data-line-number="11">main <span class="fu">=</span></a>
<a class="sourceLine" id="cb9-12" data-line-number="12">  Html.program</a>
<a class="sourceLine" id="cb9-13" data-line-number="13">    { init <span class="fu">=</span> init model</a>
<a class="sourceLine" id="cb9-14" data-line-number="14">    , view <span class="fu">=</span> view</a>
<a class="sourceLine" id="cb9-15" data-line-number="15">    , update <span class="fu">=</span> update</a>
<a class="sourceLine" id="cb9-16" data-line-number="16">    , subscriptions <span class="fu">=</span> subscriptions</a>
<a class="sourceLine" id="cb9-17" data-line-number="17">    }</a>
<a class="sourceLine" id="cb9-18" data-line-number="18"></a>
<a class="sourceLine" id="cb9-19" data-line-number="19">subscriptions <span class="fu">:</span> <span class="dt">Model</span> <span class="ot">-&gt;</span> <span class="dt">Sub</span> <span class="dt">Msg</span></a>
<a class="sourceLine" id="cb9-20" data-line-number="20">subscriptions model <span class="fu">=</span></a>
<a class="sourceLine" id="cb9-21" data-line-number="21">  Sub.batch</a>
<a class="sourceLine" id="cb9-22" data-line-number="22">    [ Window.resizes <span class="dt">SizeUpdated</span></a>
<a class="sourceLine" id="cb9-23" data-line-number="23">    , FS.readFile <span class="dt">TextAreaInput</span></a>
<a class="sourceLine" id="cb9-24" data-line-number="24">    ]</a>
<a class="sourceLine" id="cb9-25" data-line-number="25"></a>
<a class="sourceLine" id="cb9-26" data-line-number="26">update <span class="fu">:</span> <span class="dt">Msg</span> <span class="ot">-&gt;</span> <span class="dt">Model</span> <span class="ot">-&gt;</span> ( <span class="dt">Model</span>, <span class="dt">Cmd</span> <span class="dt">Msg</span> )</a>
<a class="sourceLine" id="cb9-27" data-line-number="27">update msg model <span class="fu">=</span></a>
<a class="sourceLine" id="cb9-28" data-line-number="28">  <span class="kw">case</span> msg <span class="kw">of</span></a>
<a class="sourceLine" id="cb9-29" data-line-number="29">    <span class="dt">TextAreaInput</span> str <span class="ot">-&gt;</span></a>
<a class="sourceLine" id="cb9-30" data-line-number="30">      ( { model <span class="fu">|</span> textarea <span class="fu">=</span> str }, Cmd.none )</a>
<a class="sourceLine" id="cb9-31" data-line-number="31">    <span class="dt">SizeUpdated</span> size <span class="ot">-&gt;</span></a>
<a class="sourceLine" id="cb9-32" data-line-number="32">      ( { model <span class="fu">|</span> window <span class="fu">=</span> size }, Cmd.none )        </a></code></pre></div>
<p><code>Window.Size</code> とか <code>SizeUpdated</code> はブラウザやアプリのウィンドウサイズに合わせて，スライドのサイズを変更するためのサブスクリプションなので気にしないで． <code>TextAreaInput</code> は input エリアにテキストを書き込んだ時にも使っている． 同じ型なので使いまわした．</p>
<p>あとは <code>files.js</code> の <code>console.log(data);</code> としていた部分を <code>app.ports.readFile.send(data);</code> と<a href="https://github.com/matsubara0507/elmdeck/blob/a102ae0d82b162a3f219b7d33f9875c080ff6be9/app/js/files.js#L19">書き換える</a>だけ．</p>
<p><img src="/assets/create-elmdeck/openfile.gif" /></p>
<p>うまくいった．</p>
<h3 id="ファイルの書き込み">ファイルの書き込み</h3>
<p>さて次はファイルの保存を実装する．</p>
<h4 id="ファイルパスも投げておく">ファイルパスも投げておく</h4>
<p>ファイルを保存するには開いてるファイルのファイルパスがあった方が良いだろう(上書き保存とかするなら)． なのでまずは，読み込み時の処理をファイルパスも投げるように書き換える．</p>
<div class="sourceCode" id="cb10"><pre class="sourceCode haskell"><code class="sourceCode haskell"><a class="sourceLine" id="cb10-1" data-line-number="1"><span class="co">-- src/Port/FS.elm</span></a>
<a class="sourceLine" id="cb10-2" data-line-number="2">port <span class="kw">module</span> <span class="dt">Port.FS</span> exposing (<span class="fu">..</span>)</a>
<a class="sourceLine" id="cb10-3" data-line-number="3"></a>
<a class="sourceLine" id="cb10-4" data-line-number="4"><span class="kw">type</span> alias <span class="dt">File</span> <span class="fu">=</span></a>
<a class="sourceLine" id="cb10-5" data-line-number="5">  { path <span class="fu">:</span> <span class="dt">String</span></a>
<a class="sourceLine" id="cb10-6" data-line-number="6">  , body <span class="fu">:</span> <span class="dt">String</span></a>
<a class="sourceLine" id="cb10-7" data-line-number="7">  }</a>
<a class="sourceLine" id="cb10-8" data-line-number="8"></a>
<a class="sourceLine" id="cb10-9" data-line-number="9">port readFile <span class="fu">:</span> (<span class="dt">File</span> <span class="ot">-&gt;</span> msg) <span class="ot">-&gt;</span> <span class="dt">Sub</span> msg</a></code></pre></div>
<div class="sourceCode" id="cb11"><pre class="sourceCode haskell"><code class="sourceCode haskell"><a class="sourceLine" id="cb11-1" data-line-number="1"><span class="kw">type</span> alias <span class="dt">Model</span> <span class="fu">=</span></a>
<a class="sourceLine" id="cb11-2" data-line-number="2">  { textarea <span class="fu">:</span> <span class="dt">String</span></a>
<a class="sourceLine" id="cb11-3" data-line-number="3">  , window <span class="fu">:</span> <span class="dt">Window.Size</span></a>
<a class="sourceLine" id="cb11-4" data-line-number="4">  , filepath <span class="fu">:</span> <span class="dt">String</span></a>
<a class="sourceLine" id="cb11-5" data-line-number="5">  }</a>
<a class="sourceLine" id="cb11-6" data-line-number="6"></a>
<a class="sourceLine" id="cb11-7" data-line-number="7"><span class="kw">type</span> <span class="dt">Msg</span></a>
<a class="sourceLine" id="cb11-8" data-line-number="8">  <span class="fu">=</span> <span class="dt">TextAreaInput</span> <span class="dt">String</span></a>
<a class="sourceLine" id="cb11-9" data-line-number="9">  <span class="fu">|</span> <span class="dt">SizeUpdated</span> <span class="dt">Window.Size</span></a>
<a class="sourceLine" id="cb11-10" data-line-number="10">  <span class="fu">|</span> <span class="dt">ReadFile</span> <span class="dt">FS.File</span></a>
<a class="sourceLine" id="cb11-11" data-line-number="11"></a>
<a class="sourceLine" id="cb11-12" data-line-number="12">update <span class="fu">:</span> <span class="dt">Msg</span> <span class="ot">-&gt;</span> <span class="dt">Model</span> <span class="ot">-&gt;</span> ( <span class="dt">Model</span>, <span class="dt">Cmd</span> <span class="dt">Msg</span> )</a>
<a class="sourceLine" id="cb11-13" data-line-number="13">update msg model <span class="fu">=</span></a>
<a class="sourceLine" id="cb11-14" data-line-number="14">  <span class="kw">case</span> msg <span class="kw">of</span></a>
<a class="sourceLine" id="cb11-15" data-line-number="15">    <span class="dt">TextAreaInput</span> str <span class="ot">-&gt;</span></a>
<a class="sourceLine" id="cb11-16" data-line-number="16">      ( { model <span class="fu">|</span> textarea <span class="fu">=</span> str }, Cmd.none )</a>
<a class="sourceLine" id="cb11-17" data-line-number="17">    <span class="dt">SizeUpdated</span> size <span class="ot">-&gt;</span></a>
<a class="sourceLine" id="cb11-18" data-line-number="18">      ( { model <span class="fu">|</span> window <span class="fu">=</span> size }, Cmd.none )</a>
<a class="sourceLine" id="cb11-19" data-line-number="19">    <span class="dt">ReadFile</span> file <span class="ot">-&gt;</span></a>
<a class="sourceLine" id="cb11-20" data-line-number="20">      ( { model <span class="fu">|</span> textarea <span class="fu">=</span> file<span class="fu">.</span>body, filepath <span class="fu">=</span> file<span class="fu">.</span>path }, Cmd.none )</a>
<a class="sourceLine" id="cb11-21" data-line-number="21"></a>
<a class="sourceLine" id="cb11-22" data-line-number="22">subscriptions <span class="fu">:</span> <span class="dt">Model</span> <span class="ot">-&gt;</span> <span class="dt">Sub</span> <span class="dt">Msg</span></a>
<a class="sourceLine" id="cb11-23" data-line-number="23">subscriptions model <span class="fu">=</span></a>
<a class="sourceLine" id="cb11-24" data-line-number="24">  Sub.batch</a>
<a class="sourceLine" id="cb11-25" data-line-number="25">    [ Window.resizes <span class="dt">SizeUpdated</span></a>
<a class="sourceLine" id="cb11-26" data-line-number="26">    , FS.readFile <span class="dt">ReadFile</span></a>
<a class="sourceLine" id="cb11-27" data-line-number="27">    ]</a></code></pre></div>
<p>レコード型を JS から Elm に投げるには普通のオブジェクトを使えばよいらしい(最初はタプルを使おうとして良くわからなくなり諦めた…)．</p>
<div class="sourceCode" id="cb12"><pre class="sourceCode javascript"><code class="sourceCode javascript"><a class="sourceLine" id="cb12-1" data-line-number="1"><span class="co">// js/files.js</span></a>
<a class="sourceLine" id="cb12-2" data-line-number="2"><span class="va">module</span>.<span class="at">exports</span> <span class="op">=</span> <span class="op">{</span></a>
<a class="sourceLine" id="cb12-3" data-line-number="3">  <span class="dt">readFile</span><span class="op">:</span> <span class="kw">function</span> (app) <span class="op">{</span></a>
<a class="sourceLine" id="cb12-4" data-line-number="4">    <span class="va">dialog</span>.<span class="at">showOpenDialog</span>(<span class="kw">null</span><span class="op">,</span> <span class="op">{</span></a>
<a class="sourceLine" id="cb12-5" data-line-number="5">        <span class="dt">properties</span><span class="op">:</span> [<span class="st">&#39;openFile&#39;</span>]<span class="op">,</span></a>
<a class="sourceLine" id="cb12-6" data-line-number="6">        <span class="dt">title</span><span class="op">:</span> <span class="st">&#39;File&#39;</span><span class="op">,</span></a>
<a class="sourceLine" id="cb12-7" data-line-number="7">        <span class="dt">defaultPath</span><span class="op">:</span> <span class="st">&#39;.&#39;</span><span class="op">,</span></a>
<a class="sourceLine" id="cb12-8" data-line-number="8">        <span class="dt">filters</span><span class="op">:</span> [</a>
<a class="sourceLine" id="cb12-9" data-line-number="9">            <span class="op">{</span><span class="dt">name</span><span class="op">:</span> <span class="st">&#39;マークダウン&#39;</span><span class="op">,</span> <span class="dt">extensions</span><span class="op">:</span> [<span class="st">&#39;md&#39;</span><span class="op">,</span> <span class="st">&#39;markdown&#39;</span>]<span class="op">},</span></a>
<a class="sourceLine" id="cb12-10" data-line-number="10">        ]</a>
<a class="sourceLine" id="cb12-11" data-line-number="11">    <span class="op">},</span> (fileNames) <span class="op">=&gt;</span> <span class="op">{</span></a>
<a class="sourceLine" id="cb12-12" data-line-number="12">        <span class="va">fs</span>.<span class="at">readFile</span>(fileNames[<span class="dv">0</span>]<span class="op">,</span> <span class="st">&#39;utf8&#39;</span><span class="op">,</span> (err<span class="op">,</span> data) <span class="op">=&gt;</span> <span class="op">{</span></a>
<a class="sourceLine" id="cb12-13" data-line-number="13">          <span class="cf">if</span> (err) <span class="va">console</span>.<span class="at">log</span>(err)<span class="op">;</span></a>
<a class="sourceLine" id="cb12-14" data-line-number="14">          <span class="va">app</span>.<span class="va">ports</span>.<span class="va">readFile</span>.<span class="at">send</span>(<span class="op">{</span> <span class="dt">path</span><span class="op">:</span> fileNames[<span class="dv">0</span>]<span class="op">,</span> <span class="dt">body</span><span class="op">:</span> data <span class="op">}</span>)<span class="op">;</span></a>
<a class="sourceLine" id="cb12-15" data-line-number="15">        <span class="op">}</span>)</a>
<a class="sourceLine" id="cb12-16" data-line-number="16">    <span class="op">}</span>)<span class="op">;</span></a>
<a class="sourceLine" id="cb12-17" data-line-number="17">  <span class="op">}</span></a>
<a class="sourceLine" id="cb12-18" data-line-number="18"><span class="op">}</span></a></code></pre></div>
<h4 id="いよいよ書き出し">いよいよ書き出し</h4>
<p>保存するとき，データは Elm 側から投げられるが保存ボタンは Electron 側(JS側)から始めたい． なので</p>
<ol type="1">
<li>保存ボタンを押したら何らかの値を JS から Elm に送信</li>
<li>それを受けたら Elm から JS にマークダウンのデータを送信</li>
</ol>
<p>というお手製同期通信を行うことにした(これもアンチパターンかも…)． 上書き保存のときは <code>null</code> (Elm 側では <code>Nothing</code>) を JS から送り，新規保存ならファイル名を送ることにする．</p>
<h2 id="section-2"></h2>
<p>まずは Elm 側で，以上の戦略から次のような <code>port</code> を書いた．</p>
<div class="sourceCode" id="cb13"><pre class="sourceCode haskell"><code class="sourceCode haskell"><a class="sourceLine" id="cb13-1" data-line-number="1">port writeFileHook <span class="fu">:</span> (<span class="dt">Maybe</span> <span class="dt">String</span> <span class="ot">-&gt;</span> msg) <span class="ot">-&gt;</span> <span class="dt">Sub</span> msg</a>
<a class="sourceLine" id="cb13-2" data-line-number="2">port writeFile <span class="fu">:</span> <span class="dt">File</span> <span class="ot">-&gt;</span> <span class="dt">Cmd</span> msg</a></code></pre></div>
<p>次は JS 側に移る． ファイルの書き出しには <a href="https://nodejs.org/api/fs.html#fs_fs_writefile_file_data_options_callback"><code>fs.writeFile</code></a> 関数を用いた． 前述した <code>port</code> も使って，次のような関数を <code>files.js</code> に追加した．</p>
<div class="sourceCode" id="cb14"><pre class="sourceCode javascript"><code class="sourceCode javascript"><a class="sourceLine" id="cb14-1" data-line-number="1"><span class="kw">function</span> <span class="at">writeFileTo</span>(fileName<span class="op">,</span> data) <span class="op">{</span></a>
<a class="sourceLine" id="cb14-2" data-line-number="2">  <span class="cf">if</span> (fileName) <span class="op">{</span></a>
<a class="sourceLine" id="cb14-3" data-line-number="3">    <span class="va">fs</span>.<span class="at">writeFile</span>(fileName<span class="op">,</span> data<span class="op">,</span> (err) <span class="op">=&gt;</span> <span class="op">{</span></a>
<a class="sourceLine" id="cb14-4" data-line-number="4">      <span class="cf">if</span> (err) <span class="op">{</span></a>
<a class="sourceLine" id="cb14-5" data-line-number="5">        <span class="va">console</span>.<span class="at">log</span>(err)<span class="op">;</span></a>
<a class="sourceLine" id="cb14-6" data-line-number="6">        <span class="va">dialog</span>.<span class="at">showErrorBox</span>(<span class="st">&#39;Can not save fiel: &#39;</span> <span class="op">+</span> fileName<span class="op">,</span> err)<span class="op">;</span></a>
<a class="sourceLine" id="cb14-7" data-line-number="7">      <span class="op">}</span></a>
<a class="sourceLine" id="cb14-8" data-line-number="8">    <span class="op">}</span>)</a>
<a class="sourceLine" id="cb14-9" data-line-number="9">  <span class="op">}</span></a>
<a class="sourceLine" id="cb14-10" data-line-number="10"><span class="op">}</span></a>
<a class="sourceLine" id="cb14-11" data-line-number="11"></a>
<a class="sourceLine" id="cb14-12" data-line-number="12"><span class="va">module</span>.<span class="at">exports</span> <span class="op">=</span> <span class="op">{</span></a>
<a class="sourceLine" id="cb14-13" data-line-number="13">  <span class="dt">readFile</span><span class="op">:</span> <span class="kw">function</span> (app) <span class="op">{</span></a>
<a class="sourceLine" id="cb14-14" data-line-number="14">    ...</a>
<a class="sourceLine" id="cb14-15" data-line-number="15">  <span class="op">},</span></a>
<a class="sourceLine" id="cb14-16" data-line-number="16">  <span class="dt">writeFile</span><span class="op">:</span> <span class="kw">function</span> (app) <span class="op">{</span></a>
<a class="sourceLine" id="cb14-17" data-line-number="17">    <span class="va">app</span>.<span class="va">ports</span>.<span class="va">writeFileHook</span>.<span class="at">send</span>(<span class="kw">null</span>)<span class="op">;</span></a>
<a class="sourceLine" id="cb14-18" data-line-number="18">    <span class="va">app</span>.<span class="va">ports</span>.<span class="va">writeFile</span>.<span class="at">subscribe</span>(args <span class="op">=&gt;</span> <span class="op">{</span> <span class="at">writeFileTo</span>(args[<span class="st">&#39;path&#39;</span>]<span class="op">,</span> args[<span class="st">&#39;body&#39;</span>]) <span class="op">}</span>)<span class="op">;</span></a>
<a class="sourceLine" id="cb14-19" data-line-number="19">  <span class="op">},</span></a>
<a class="sourceLine" id="cb14-20" data-line-number="20">  <span class="dt">writeFileAs</span><span class="op">:</span> <span class="kw">function</span> (app) <span class="op">{</span></a>
<a class="sourceLine" id="cb14-21" data-line-number="21">    <span class="va">dialog</span>.<span class="at">showSaveDialog</span>(<span class="kw">null</span><span class="op">,</span> <span class="op">{</span></a>
<a class="sourceLine" id="cb14-22" data-line-number="22">        <span class="dt">properties</span><span class="op">:</span> [<span class="st">&#39;openFile&#39;</span>]<span class="op">,</span></a>
<a class="sourceLine" id="cb14-23" data-line-number="23">        <span class="dt">title</span><span class="op">:</span> <span class="st">&#39;File&#39;</span><span class="op">,</span></a>
<a class="sourceLine" id="cb14-24" data-line-number="24">        <span class="dt">defaultPath</span><span class="op">:</span> <span class="st">&#39;.&#39;</span><span class="op">,</span></a>
<a class="sourceLine" id="cb14-25" data-line-number="25">        <span class="dt">filters</span><span class="op">:</span> [</a>
<a class="sourceLine" id="cb14-26" data-line-number="26">            <span class="op">{</span><span class="dt">name</span><span class="op">:</span> <span class="st">&#39;Markdown&#39;</span><span class="op">,</span> <span class="dt">extensions</span><span class="op">:</span> [<span class="st">&#39;md&#39;</span><span class="op">,</span> <span class="st">&#39;markdown&#39;</span>]<span class="op">},</span></a>
<a class="sourceLine" id="cb14-27" data-line-number="27">        ]</a>
<a class="sourceLine" id="cb14-28" data-line-number="28">    <span class="op">},</span> (fileName) <span class="op">=&gt;</span> <span class="op">{</span></a>
<a class="sourceLine" id="cb14-29" data-line-number="29">        <span class="cf">if</span> (fileName <span class="op">==</span> <span class="kw">undefined</span>) <span class="op">{</span></a>
<a class="sourceLine" id="cb14-30" data-line-number="30">          <span class="va">console</span>.<span class="at">log</span>(fileName)<span class="op">;</span></a>
<a class="sourceLine" id="cb14-31" data-line-number="31">          <span class="va">dialog</span>.<span class="at">showErrorBox</span>(<span class="st">&#39;Can not save fiel: &#39;</span><span class="op">,</span> <span class="st">&#39;Please select file.&#39;</span>)<span class="op">;</span></a>
<a class="sourceLine" id="cb14-32" data-line-number="32">          <span class="cf">return</span></a>
<a class="sourceLine" id="cb14-33" data-line-number="33">        <span class="op">}</span></a>
<a class="sourceLine" id="cb14-34" data-line-number="34">        <span class="va">app</span>.<span class="va">ports</span>.<span class="va">writeFileHook</span>.<span class="at">send</span>(fileName)<span class="op">;</span></a>
<a class="sourceLine" id="cb14-35" data-line-number="35">        <span class="va">app</span>.<span class="va">ports</span>.<span class="va">writeFile</span>.<span class="at">subscribe</span>(args <span class="op">=&gt;</span> <span class="op">{</span> <span class="at">writeFileTo</span>(args[<span class="st">&#39;path&#39;</span>]<span class="op">,</span> args[<span class="st">&#39;body&#39;</span>]) <span class="op">}</span>)<span class="op">;</span></a>
<a class="sourceLine" id="cb14-36" data-line-number="36">    <span class="op">}</span>)<span class="op">;</span></a>
<a class="sourceLine" id="cb14-37" data-line-number="37">  <span class="op">}</span></a>
<a class="sourceLine" id="cb14-38" data-line-number="38"><span class="op">}</span></a></code></pre></div>
<p>上書き保存 <code>writeFile</code> と新しく保存 <code>writeFileAs</code> を用意し，共通部分は <code>writeFileTo</code> 関数として書き出した．</p>
<p>これをメニューバーに追加する．</p>
<div class="sourceCode" id="cb15"><pre class="sourceCode javascript"><code class="sourceCode javascript"><a class="sourceLine" id="cb15-1" data-line-number="1"><span class="kw">var</span> menuvar <span class="op">=</span> <span class="kw">new</span> <span class="at">Menu</span>()<span class="op">;</span></a>
<a class="sourceLine" id="cb15-2" data-line-number="2"><span class="va">menuvar</span>.<span class="at">append</span>(<span class="kw">new</span> <span class="at">MenuItem</span>(</a>
<a class="sourceLine" id="cb15-3" data-line-number="3">  <span class="op">{</span></a>
<a class="sourceLine" id="cb15-4" data-line-number="4">    <span class="dt">label</span><span class="op">:</span> <span class="st">&#39;File&#39;</span><span class="op">,</span></a>
<a class="sourceLine" id="cb15-5" data-line-number="5">    <span class="dt">submenu</span><span class="op">:</span> [</a>
<a class="sourceLine" id="cb15-6" data-line-number="6">      <span class="op">{</span></a>
<a class="sourceLine" id="cb15-7" data-line-number="7">        <span class="dt">label</span><span class="op">:</span> <span class="st">&#39;Open&#39;</span><span class="op">,</span></a>
<a class="sourceLine" id="cb15-8" data-line-number="8">        <span class="at">click</span>() <span class="op">{</span> <span class="va">files</span>.<span class="at">readFile</span>(app) <span class="op">}</span></a>
<a class="sourceLine" id="cb15-9" data-line-number="9">      <span class="op">},</span></a>
<a class="sourceLine" id="cb15-10" data-line-number="10">      <span class="op">{</span></a>
<a class="sourceLine" id="cb15-11" data-line-number="11">        <span class="dt">label</span><span class="op">:</span> <span class="st">&#39;Save&#39;</span><span class="op">,</span></a>
<a class="sourceLine" id="cb15-12" data-line-number="12">        <span class="at">click</span>() <span class="op">{</span> <span class="va">files</span>.<span class="at">writeFile</span>(app) <span class="op">}</span></a>
<a class="sourceLine" id="cb15-13" data-line-number="13">      <span class="op">},</span></a>
<a class="sourceLine" id="cb15-14" data-line-number="14">      <span class="op">{</span></a>
<a class="sourceLine" id="cb15-15" data-line-number="15">        <span class="dt">label</span><span class="op">:</span> <span class="st">&#39;Save As&#39;</span><span class="op">,</span></a>
<a class="sourceLine" id="cb15-16" data-line-number="16">        <span class="at">click</span>() <span class="op">{</span> <span class="va">files</span>.<span class="at">writeFileAs</span>(app) <span class="op">}</span></a>
<a class="sourceLine" id="cb15-17" data-line-number="17">      <span class="op">}</span></a>
<a class="sourceLine" id="cb15-18" data-line-number="18">    ]</a>
<a class="sourceLine" id="cb15-19" data-line-number="19">  <span class="op">}</span></a>
<a class="sourceLine" id="cb15-20" data-line-number="20">))<span class="op">;</span></a></code></pre></div>
<p>最後に Elm 側に処理を追加した．</p>
<div class="sourceCode" id="cb16"><pre class="sourceCode haskell"><code class="sourceCode haskell"><a class="sourceLine" id="cb16-1" data-line-number="1"><span class="co">-- app/src/Main.elm</span></a>
<a class="sourceLine" id="cb16-2" data-line-number="2"><span class="kw">type</span> <span class="dt">Msg</span></a>
<a class="sourceLine" id="cb16-3" data-line-number="3">  <span class="fu">=</span> <span class="dt">TextAreaInput</span> <span class="dt">String</span></a>
<a class="sourceLine" id="cb16-4" data-line-number="4">  <span class="fu">|</span> <span class="dt">SizeUpdated</span> <span class="dt">Window.Size</span></a>
<a class="sourceLine" id="cb16-5" data-line-number="5">  <span class="fu">|</span> <span class="dt">ReadFile</span> <span class="dt">FS.File</span></a>
<a class="sourceLine" id="cb16-6" data-line-number="6">  <span class="fu">|</span> <span class="dt">WriteFileHook</span> (<span class="dt">Maybe</span> <span class="dt">String</span>)</a>
<a class="sourceLine" id="cb16-7" data-line-number="7"></a>
<a class="sourceLine" id="cb16-8" data-line-number="8">update <span class="fu">:</span> <span class="dt">Msg</span> <span class="ot">-&gt;</span> <span class="dt">Model</span> <span class="ot">-&gt;</span> ( <span class="dt">Model</span>, <span class="dt">Cmd</span> <span class="dt">Msg</span> )</a>
<a class="sourceLine" id="cb16-9" data-line-number="9">update msg model <span class="fu">=</span></a>
<a class="sourceLine" id="cb16-10" data-line-number="10">  <span class="kw">case</span> msg <span class="kw">of</span></a>
<a class="sourceLine" id="cb16-11" data-line-number="11">    <span class="dt">TextAreaInput</span> str <span class="ot">-&gt;</span></a>
<a class="sourceLine" id="cb16-12" data-line-number="12">      ( { model <span class="fu">|</span> textarea <span class="fu">=</span> str }, Cmd.none )</a>
<a class="sourceLine" id="cb16-13" data-line-number="13">    <span class="dt">SizeUpdated</span> size <span class="ot">-&gt;</span></a>
<a class="sourceLine" id="cb16-14" data-line-number="14">      ( { model <span class="fu">|</span> window <span class="fu">=</span> size }, Cmd.none )</a>
<a class="sourceLine" id="cb16-15" data-line-number="15">    <span class="dt">ReadFile</span> file <span class="ot">-&gt;</span></a>
<a class="sourceLine" id="cb16-16" data-line-number="16">      ( { model <span class="fu">|</span> textarea <span class="fu">=</span> file<span class="fu">.</span>body, filepath <span class="fu">=</span> file<span class="fu">.</span>path }, Cmd.none )</a>
<a class="sourceLine" id="cb16-17" data-line-number="17">    <span class="dt">WriteFileHook</span> (<span class="dt">Just</span> filepath) <span class="ot">-&gt;</span></a>
<a class="sourceLine" id="cb16-18" data-line-number="18">      ( { model <span class="fu">|</span> filepath <span class="fu">=</span> filepath }, FS.writeFile { path <span class="fu">=</span> filepath, body <span class="fu">=</span> model<span class="fu">.</span>textarea } )</a>
<a class="sourceLine" id="cb16-19" data-line-number="19">    <span class="dt">WriteFileHook</span> <span class="dt">Nothing</span> <span class="ot">-&gt;</span></a>
<a class="sourceLine" id="cb16-20" data-line-number="20">      ( model, FS.writeFile { path <span class="fu">=</span> model<span class="fu">.</span>filepath, body <span class="fu">=</span> model<span class="fu">.</span>textarea } )</a>
<a class="sourceLine" id="cb16-21" data-line-number="21"></a>
<a class="sourceLine" id="cb16-22" data-line-number="22">subscriptions <span class="fu">:</span> <span class="dt">Model</span> <span class="ot">-&gt;</span> <span class="dt">Sub</span> <span class="dt">Msg</span></a>
<a class="sourceLine" id="cb16-23" data-line-number="23">subscriptions model <span class="fu">=</span></a>
<a class="sourceLine" id="cb16-24" data-line-number="24">  Sub.batch</a>
<a class="sourceLine" id="cb16-25" data-line-number="25">    [ Window.resizes <span class="dt">SizeUpdated</span></a>
<a class="sourceLine" id="cb16-26" data-line-number="26">    , FS.readFile <span class="dt">ReadFile</span></a>
<a class="sourceLine" id="cb16-27" data-line-number="27">    , FS.writeFileHook <span class="dt">WriteFileHook</span></a>
<a class="sourceLine" id="cb16-28" data-line-number="28">    ]</a></code></pre></div>
<p>これでうまく動作するはずだ．</p>
<p><img src="/assets/create-elmdeck/savefile.gif" /></p>
<h3 id="ショートカット">ショートカット</h3>
<p>最後にショートカットだ． 次の記事が参考になった．</p>
<ul>
<li><a href="https://qiita.com/okaxaki/items/8b8942b0c4e13ac67739">Electronに開発用メニューとショートカットを付ける - Qiita</a></li>
</ul>
<p><a href="https://electronjs.org/docs/api/accelerator"><code>Accelerator</code></a> というのを使えばよいらしい．</p>
<div class="sourceCode" id="cb17"><pre class="sourceCode javascript"><code class="sourceCode javascript"><a class="sourceLine" id="cb17-1" data-line-number="1"><span class="kw">var</span> menuvar <span class="op">=</span> <span class="kw">new</span> <span class="at">Menu</span>()<span class="op">;</span></a>
<a class="sourceLine" id="cb17-2" data-line-number="2"><span class="va">menuvar</span>.<span class="at">append</span>(<span class="kw">new</span> <span class="at">MenuItem</span>(</a>
<a class="sourceLine" id="cb17-3" data-line-number="3">  <span class="op">{</span></a>
<a class="sourceLine" id="cb17-4" data-line-number="4">    <span class="dt">label</span><span class="op">:</span> <span class="st">&#39;File&#39;</span><span class="op">,</span></a>
<a class="sourceLine" id="cb17-5" data-line-number="5">    <span class="dt">submenu</span><span class="op">:</span> [</a>
<a class="sourceLine" id="cb17-6" data-line-number="6">      <span class="op">{</span></a>
<a class="sourceLine" id="cb17-7" data-line-number="7">        <span class="dt">label</span><span class="op">:</span> <span class="st">&#39;Open&#39;</span><span class="op">,</span></a>
<a class="sourceLine" id="cb17-8" data-line-number="8">        <span class="dt">accelerator</span><span class="op">:</span> <span class="st">&#39;Ctrl+O&#39;</span><span class="op">,</span></a>
<a class="sourceLine" id="cb17-9" data-line-number="9">        <span class="at">click</span>() <span class="op">{</span> <span class="va">files</span>.<span class="at">readFile</span>(app) <span class="op">}</span></a>
<a class="sourceLine" id="cb17-10" data-line-number="10">      <span class="op">},</span></a>
<a class="sourceLine" id="cb17-11" data-line-number="11">      <span class="op">{</span></a>
<a class="sourceLine" id="cb17-12" data-line-number="12">        <span class="dt">label</span><span class="op">:</span> <span class="st">&#39;Save&#39;</span><span class="op">,</span></a>
<a class="sourceLine" id="cb17-13" data-line-number="13">        <span class="dt">accelerator</span><span class="op">:</span> <span class="st">&#39;Ctrl+S&#39;</span><span class="op">,</span></a>
<a class="sourceLine" id="cb17-14" data-line-number="14">        <span class="at">click</span>() <span class="op">{</span> <span class="va">files</span>.<span class="at">writeFile</span>(app) <span class="op">}</span></a>
<a class="sourceLine" id="cb17-15" data-line-number="15">      <span class="op">},</span></a>
<a class="sourceLine" id="cb17-16" data-line-number="16">      <span class="op">{</span></a>
<a class="sourceLine" id="cb17-17" data-line-number="17">        <span class="dt">label</span><span class="op">:</span> <span class="st">&#39;Save As&#39;</span><span class="op">,</span></a>
<a class="sourceLine" id="cb17-18" data-line-number="18">        <span class="dt">accelerator</span><span class="op">:</span> <span class="st">&#39;Ctrl+Shift+S&#39;</span><span class="op">,</span></a>
<a class="sourceLine" id="cb17-19" data-line-number="19">        <span class="at">click</span>() <span class="op">{</span> <span class="va">files</span>.<span class="at">writeFileAs</span>(app) <span class="op">}</span></a>
<a class="sourceLine" id="cb17-20" data-line-number="20">      <span class="op">}</span></a>
<a class="sourceLine" id="cb17-21" data-line-number="21">    ]</a>
<a class="sourceLine" id="cb17-22" data-line-number="22">  <span class="op">}</span></a>
<a class="sourceLine" id="cb17-23" data-line-number="23">))<span class="op">;</span></a></code></pre></div>
<p>これで目的のモノはできた！</p>
<h2 id="懸念">懸念</h2>
<p>なんか Electron のファイル IO にはセキュリティ的に甘いところがあるらしい…</p>
<ul>
<li><a href="http://utf-8.jp/public/2016/0307/electron.pdf">Electron の倒し方</a></li>
</ul>
<p>個人で使う分にはいいんだけど…対策しなきゃかなぁ… Elm を介してレンダラしたマークダウンを貼り付けてるので問題ないのだろうか… 良く分からない．</p>
<h2 id="思うところ">思うところ</h2>
<p>結局 JS は結構書いてるなーと思った(笑) JS 絶対書きたくないマンは Elm でできることは，まだ制限される印象だ． JS の知識も多少ないとキツソウだし．</p>
<p>まぁ綺麗に分離できるのがうれしいんだけどね．</p>
<h2 id="おしまい">おしまい</h2>
<p>頑張って作っていくぞ．</p>
  </div>
</div>
</article>
]]></summary>
</entry>
<entry>
    <title>Elm でマークダウンプレゼンテーションエディタを作ってみた (その１)</title>
    <link href="https://matsubara0507.github.io/posts/2017-12-18-create-elmdeck-part1.html" />
    <id>https://matsubara0507.github.io/posts/2017-12-18-create-elmdeck-part1.html</id>
    <published>2017-12-18T00:00:00Z</published>
    <updated>2017-12-18T00:00:00Z</updated>
    <summary type="html"><![CDATA[<article class="post card" itemscope itemtype="http://schema.org/BlogPosting">
 <div class="card-content">
  <header class="post-header">
    <h1 class="post-title" itemprop="name headline">Elm でマークダウンプレゼンテーションエディタを作ってみた (その１)</h1>
    <p class="post-meta">
      <time datetime="2017-12-18" itemprop="datePublished">
        Dec 18, 2017
      </time>
      
      
      <div class="tags">
          <i class="fa fa-tags"></i> <a href="/tags/Elm.html">Elm</a> <a href="/tags/application.html">application</a>
      </div>
      
    </p>
  </header>

  <div class="post-content" itemprop="articleBody">
    <p><a href="https://qiita.com/advent-calendar/2017/elm2">Elm Advent Calendar 2017 (その２)</a> の18日目の記事です．</p>
<p>ぼくが18日目に登録したとき(12月6日ごろ)は半分以上が空いてたのに全部埋まってる(笑) みんなすごいなぁ．</p>
<h2 id="section"></h2>
<p>タイトルの通り，思い付きで作り始めたマークダウンプレゼンテーションエディタについて書きます． 全てのコードは以下にあります．</p>
<ul>
<li><a href="https://github.com/matsubara0507/elmdeck">matsubara0507/elmdeck - GitHub</a></li>
</ul>
<p>まだ完成していないです． あと正直なこと言うと，まだ使える代物ではないです(笑) 徐々に改善していくつもりです．</p>
<h2 id="md-でスライドづくり">MD でスライドづくり</h2>
<p>自分はマークダウンでサクッとスライドを作るのが好きで，イロイロ試してみた結果，<a href="https://yhatt.github.io/marp/">Marp</a> というツールに落ち着いた． 基本的に不満は無いのだが，プレゼンテーションモード欲しいなーとか，もっと簡単にテーマを作りたいなーとかが微妙にある．</p>
<p>しかし，最近は<a href="https://github.com/yhatt/marp/wiki/Roadmap-to-Marp-1.0.0">バージョン1</a>に向けて構成から書き直しているようで更新が止まっている(個人的には，急かすつもりは全くなく，ゆっくり好きなように作ればいいと思ってる)．</p>
<h2 id="section-1"></h2>
<p>なので，自分でイチから作ってみることにした． ちなみに，Marp が再リリースされて，そっちの方で全然満足出来たらそっちに移るつもり．</p>
<p>個人的に最低限欲しい機能は</p>
<ol type="1">
<li>シンタックスハイライト</li>
<li>数式</li>
<li>画像の拡縮</li>
<li>PDF への出力</li>
</ol>
<p>があればよい． できればプレゼンテーションモードとか欲しいけど．</p>
<h2 id="作ってく">作ってく</h2>
<p>ちなみに，既にできているのは (1) シンタックスハイライト，(2) 数式 まで． あと，ローカルファイルの読み書きを Elm でする方法(というかブラウザでいい感じにする方法)が分からなかったので Electron にした．</p>
<h3 id="markdown-をスライドへ">Markdown をスライドへ</h3>
<p>戦略としては，テキストエリアで入力してもらったマークダウン表記のプレーンテキストを何らかのパッケージで構文木に変換し，さらに HTML に変換してもらうだけ． そして，変換したマークダウンの構文木を区切りワード <code>---</code> にしてスライド1枚1枚にするイメージ．</p>
<p>今回は以下のパッケージを使った．</p>
<ul>
<li><a href="http://package.elm-lang.org/packages/pablohirafuji/elm-markdown">pablohirafuji/elm-markdown - elm packages</a></li>
</ul>
<p>マークダウンパーサーとしては他にも，<a href="http://package.elm-lang.org/packages/evancz/elm-markdown">Elm の作者が作ったモノ</a>があったが，これは Native モジュールで JS の <a href="https://github.com/chjj/marked">marked</a> を呼んでるだけなので，マークダウンの構文木をいじれない． なので，構文木も扱える pablohirafuji/elm-markdown を使った(その代わり速度は遅い…)．</p>
<h2 id="section-2"></h2>
<p>pablohirafuji/elm-markdown は <a href="http://package.elm-lang.org/packages/pablohirafuji/elm-markdown/2.0.4/Markdown-Block#parse"><code>parse</code></a> 関数を用いることで文字列から次の <code>Block b i</code> 型のリストに変換する．</p>
<div class="sourceCode" id="cb1"><pre class="sourceCode haskell"><code class="sourceCode haskell"><a class="sourceLine" id="cb1-1" data-line-number="1"><span class="kw">type</span> <span class="dt">Block</span> b i</a>
<a class="sourceLine" id="cb1-2" data-line-number="2">    <span class="fu">=</span> <span class="dt">BlankLine</span> <span class="dt">String</span></a>
<a class="sourceLine" id="cb1-3" data-line-number="3">    <span class="fu">|</span> <span class="dt">ThematicBreak</span></a>
<a class="sourceLine" id="cb1-4" data-line-number="4">    <span class="fu">|</span> <span class="dt">Heading</span> <span class="dt">String</span> <span class="dt">Int</span> (<span class="dt">List</span> (<span class="dt">Inline</span> i))</a>
<a class="sourceLine" id="cb1-5" data-line-number="5">    <span class="fu">|</span> <span class="dt">CodeBlock</span> <span class="dt">CodeBlock</span> <span class="dt">String</span></a>
<a class="sourceLine" id="cb1-6" data-line-number="6">    <span class="fu">|</span> <span class="dt">Paragraph</span> <span class="dt">String</span> (<span class="dt">List</span> (<span class="dt">Inline</span> i))</a>
<a class="sourceLine" id="cb1-7" data-line-number="7">    <span class="fu">|</span> <span class="dt">BlockQuote</span> (<span class="dt">List</span> (<span class="dt">Block</span> b i))</a>
<a class="sourceLine" id="cb1-8" data-line-number="8">    <span class="fu">|</span> <span class="dt">List</span> <span class="dt">ListBlock</span> (<span class="dt">List</span> (<span class="dt">List</span> (<span class="dt">Block</span> b i)))</a>
<a class="sourceLine" id="cb1-9" data-line-number="9">    <span class="fu">|</span> <span class="dt">PlainInlines</span> (<span class="dt">List</span> (<span class="dt">Inline</span> i))</a>
<a class="sourceLine" id="cb1-10" data-line-number="10">    <span class="fu">|</span> <span class="dt">Custom</span> b (<span class="dt">List</span> (<span class="dt">Block</span> b i))</a></code></pre></div>
<p><code>Block b i</code> 型から <code>Html msg</code> へは <a href="http://package.elm-lang.org/packages/pablohirafuji/elm-markdown/2.0.4/Markdown-Block#toHtml"><code>toHtml</code></a> 関数を使えばよい．</p>
<p><code>elm repl</code> で試した結果，<code>---</code> は <code>ThematicBreak</code> になることが分かった． なので，<code>ThematicBreak</code> で <code>List (Block b i)</code> を <code>List (List (Block b i))</code> に分割する． <code>(a -&gt; Bool) -&gt; List a -&gt; List (List a)</code> って感じの関数が無かったので<a href="https://github.com/matsubara0507/elmdeck/blob/6ff0520f65080c9a94ac85c99fc01e0374ca250e/src/Utils.elm#L9">自分で定義した</a>．</p>
<div class="sourceCode" id="cb2"><pre class="sourceCode haskell"><code class="sourceCode haskell"><a class="sourceLine" id="cb2-1" data-line-number="1">markdownView <span class="fu">:</span> <span class="dt">Model</span> <span class="ot">-&gt;</span> <span class="dt">Html</span> <span class="dt">Msg</span></a>
<a class="sourceLine" id="cb2-2" data-line-number="2">markdownView { textarea, window } <span class="fu">=</span></a>
<a class="sourceLine" id="cb2-3" data-line-number="3">    textarea</a>
<a class="sourceLine" id="cb2-4" data-line-number="4">        <span class="fu">|&gt;</span> Block.parse <span class="dt">Nothing</span></a>
<a class="sourceLine" id="cb2-5" data-line-number="5">        <span class="fu">|&gt;</span> Utils.split ((<span class="fu">==</span>) <span class="dt">Block.ThematicBreak</span>)</a>
<a class="sourceLine" id="cb2-6" data-line-number="6">        <span class="fu">|&gt;</span> List.map (toSlide window)</a>
<a class="sourceLine" id="cb2-7" data-line-number="7">        <span class="fu">|&gt;</span> div []</a>
<a class="sourceLine" id="cb2-8" data-line-number="8"></a>
<a class="sourceLine" id="cb2-9" data-line-number="9">toSlide <span class="fu">:</span> <span class="dt">Window.Size</span> <span class="ot">-&gt;</span> <span class="dt">List</span> (<span class="dt">Block</span> b i) <span class="ot">-&gt;</span> <span class="dt">Html</span> msg</a>
<a class="sourceLine" id="cb2-10" data-line-number="10">toSlide window blocks <span class="fu">=</span></a>
<a class="sourceLine" id="cb2-11" data-line-number="11">    blocks</a>
<a class="sourceLine" id="cb2-12" data-line-number="12">        <span class="fu">|&gt;</span> List.concatMap customHtmlBlock</a>
<a class="sourceLine" id="cb2-13" data-line-number="13">        <span class="fu">|&gt;</span> slideView window</a>
<a class="sourceLine" id="cb2-14" data-line-number="14"></a>
<a class="sourceLine" id="cb2-15" data-line-number="15">customHtmlBlock <span class="fu">:</span> <span class="dt">Block</span> b i <span class="ot">-&gt;</span> <span class="dt">List</span> (<span class="dt">Html</span> msg)</a>
<a class="sourceLine" id="cb2-16" data-line-number="16">customHtmlBlock block <span class="fu">=</span></a>
<a class="sourceLine" id="cb2-17" data-line-number="17">    Block.defaultHtml (<span class="dt">Just</span> customHtmlBlock) <span class="dt">Nothing</span> block</a></code></pre></div>
<p>取りあえずは <code>customHtmlBlock</code> 関数では標準のを呼んでいる． <code>window</code> を引き回しているのは，ウィンドウサイズに合わせてスライドの大きさを拡縮するため．</p>
<h3 id="シンタックスハイライト">シンタックスハイライト</h3>
<p>シンタックスハイライトは皆さんご存知 <a href="https://highlightjs.org/">highlight.js</a> を使う． Elm 製のパッケージは見当たらなかったので，js のパッケージを使うことにした．</p>
<p><a href="https://github.com/evancz/elm-markdown/blob/e395295cbe0b460ab051c4040011470628f05b72/src/Native/Markdown.js#L77">evancz/elm-markdown が highlight.js を使っていた</a>ので，それを参考に Native モジュールを作った．</p>
<div class="sourceCode" id="cb3"><pre class="sourceCode javascript"><code class="sourceCode javascript"><a class="sourceLine" id="cb3-1" data-line-number="1"><span class="co">// src/Native/Highlight.js</span></a>
<a class="sourceLine" id="cb3-2" data-line-number="2"><span class="kw">var</span> _matsubara0507$elmdeck$Native_Highlight <span class="op">=</span> <span class="kw">function</span>() <span class="op">{</span></a>
<a class="sourceLine" id="cb3-3" data-line-number="3">  <span class="kw">function</span> <span class="at">toHighlight</span>(lang<span class="op">,</span> code)</a>
<a class="sourceLine" id="cb3-4" data-line-number="4">  <span class="op">{</span></a>
<a class="sourceLine" id="cb3-5" data-line-number="5">    <span class="cf">if</span> (<span class="kw">typeof</span> hljs <span class="op">!==</span> <span class="st">&#39;undefined&#39;</span> <span class="op">&amp;&amp;</span> lang <span class="op">&amp;&amp;</span> <span class="va">hljs</span>.<span class="at">listLanguages</span>().<span class="at">indexOf</span>(lang) <span class="op">&gt;=</span> <span class="dv">0</span>)</a>
<a class="sourceLine" id="cb3-6" data-line-number="6">    <span class="op">{</span></a>
<a class="sourceLine" id="cb3-7" data-line-number="7">      <span class="cf">return</span> <span class="va">hljs</span>.<span class="at">highlight</span>(lang<span class="op">,</span> code<span class="op">,</span> <span class="kw">true</span>).<span class="at">value</span><span class="op">;</span></a>
<a class="sourceLine" id="cb3-8" data-line-number="8">    <span class="op">}</span></a>
<a class="sourceLine" id="cb3-9" data-line-number="9">    <span class="cf">return</span> code<span class="op">;</span></a>
<a class="sourceLine" id="cb3-10" data-line-number="10">  <span class="op">}</span></a>
<a class="sourceLine" id="cb3-11" data-line-number="11"></a>
<a class="sourceLine" id="cb3-12" data-line-number="12">  <span class="cf">return</span> <span class="op">{</span></a>
<a class="sourceLine" id="cb3-13" data-line-number="13">    <span class="dt">toHighlight</span><span class="op">:</span> <span class="at">F2</span>(toHighlight)</a>
<a class="sourceLine" id="cb3-14" data-line-number="14">  <span class="op">}</span></a>
<a class="sourceLine" id="cb3-15" data-line-number="15"><span class="op">}</span>()<span class="op">;</span></a></code></pre></div>
<p>Elm 側はこんな感じ．</p>
<div class="sourceCode" id="cb4"><pre class="sourceCode haskell"><code class="sourceCode haskell"><a class="sourceLine" id="cb4-1" data-line-number="1"><span class="kw">import</span> <span class="dt">Native.Highlight</span></a>
<a class="sourceLine" id="cb4-2" data-line-number="2"></a>
<a class="sourceLine" id="cb4-3" data-line-number="3">toHighlight <span class="fu">:</span> <span class="dt">String</span> <span class="ot">-&gt;</span> <span class="dt">String</span> <span class="ot">-&gt;</span> <span class="dt">String</span></a>
<a class="sourceLine" id="cb4-4" data-line-number="4">toHighlight <span class="fu">=</span></a>
<a class="sourceLine" id="cb4-5" data-line-number="5">    Native.Highlight.toHighlight</a></code></pre></div>
<p>返ってくるのは <code>&quot;&lt;div&gt;...&lt;/div&gt;&quot;</code> のような HTML の文字列なので，これを <code>Html a</code> 型に変換してやる必要がある． それには jinjor 先生の <a href="http://package.elm-lang.org/packages/jinjor/elm-html-parser/latest">jinjor/elm-html-parser</a> を用いた．</p>
<ul>
<li><a href="http://jinjor-labo.hatenablog.com/entry/2016/09/11/222251">ElmでHTMLパーサを作って公開するまでの手順 - ジンジャー研究室</a></li>
</ul>
<p>これをこんな感じに呼び出す</p>
<div class="sourceCode" id="cb5"><pre class="sourceCode haskell"><code class="sourceCode haskell"><a class="sourceLine" id="cb5-1" data-line-number="1">customHtmlBlock <span class="fu">:</span> <span class="dt">Block</span> b i <span class="ot">-&gt;</span> <span class="dt">List</span> (<span class="dt">Html</span> msg)</a>
<a class="sourceLine" id="cb5-2" data-line-number="2">customHtmlBlock block <span class="fu">=</span></a>
<a class="sourceLine" id="cb5-3" data-line-number="3">    <span class="kw">case</span> block <span class="kw">of</span></a>
<a class="sourceLine" id="cb5-4" data-line-number="4">        <span class="dt">Block.CodeBlock</span> (<span class="dt">Block.Fenced</span> _ fence) code <span class="ot">-&gt;</span></a>
<a class="sourceLine" id="cb5-5" data-line-number="5">            <span class="kw">let</span></a>
<a class="sourceLine" id="cb5-6" data-line-number="6">                language <span class="fu">=</span></a>
<a class="sourceLine" id="cb5-7" data-line-number="7">                    <span class="dt">Maybe</span><span class="fu">.</span>withDefault <span class="st">&quot;&quot;</span> fence<span class="fu">.</span>language</a>
<a class="sourceLine" id="cb5-8" data-line-number="8">            <span class="kw">in</span></a>
<a class="sourceLine" id="cb5-9" data-line-number="9">            code</a>
<a class="sourceLine" id="cb5-10" data-line-number="10">                <span class="fu">|&gt;</span> Utils.toHighlight language</a>
<a class="sourceLine" id="cb5-11" data-line-number="11">                <span class="fu">|&gt;</span> precode language</a>
<a class="sourceLine" id="cb5-12" data-line-number="12">                <span class="fu">|&gt;</span> Html.parse</a>
<a class="sourceLine" id="cb5-13" data-line-number="13">                <span class="fu">|&gt;</span> Html.toVirtualDom</a>
<a class="sourceLine" id="cb5-14" data-line-number="14"></a>
<a class="sourceLine" id="cb5-15" data-line-number="15">        _ <span class="ot">-&gt;</span></a>
<a class="sourceLine" id="cb5-16" data-line-number="16">            Block.defaultHtml (<span class="dt">Just</span> customHtmlBlock) <span class="dt">Nothing</span> block</a>
<a class="sourceLine" id="cb5-17" data-line-number="17"></a>
<a class="sourceLine" id="cb5-18" data-line-number="18">precode <span class="fu">:</span> <span class="dt">String</span> <span class="ot">-&gt;</span> <span class="dt">String</span> <span class="ot">-&gt;</span> <span class="dt">String</span></a>
<a class="sourceLine" id="cb5-19" data-line-number="19">precode lang code <span class="fu">=</span></a>
<a class="sourceLine" id="cb5-20" data-line-number="20">    <span class="st">&quot;&lt;pre&gt;&lt;code class=\&quot;&quot;</span> <span class="fu">++</span> lang <span class="fu">++</span> <span class="st">&quot;\&quot;&gt;&quot;</span> <span class="fu">++</span> code <span class="fu">++</span> <span class="st">&quot;&lt;/code&gt;&lt;/pre&gt;&quot;</span></a></code></pre></div>
<p>どう考えても効率悪いけど(笑)</p>
<h3 id="数式">数式</h3>
<p>Marp を参考にして <a href="https://khan.github.io/KaTeX/">KaTeX</a> を使うことにした． KaTeX も highlight.js と同じように文字列を受け取って HTML に変換した文字列を返す関数 <code>renderToString</code> がある． 注意点は，<code>renderToString</code> の場合は失敗すると例外を投げてくるところ．</p>
<div class="sourceCode" id="cb6"><pre class="sourceCode javascript"><code class="sourceCode javascript"><a class="sourceLine" id="cb6-1" data-line-number="1"><span class="kw">var</span> _matsubara0507$elmdeck$Native_Katex <span class="op">=</span> <span class="kw">function</span>() <span class="op">{</span></a>
<a class="sourceLine" id="cb6-2" data-line-number="2">  <span class="kw">function</span> <span class="at">toKatex</span>(code)</a>
<a class="sourceLine" id="cb6-3" data-line-number="3">  <span class="op">{</span></a>
<a class="sourceLine" id="cb6-4" data-line-number="4">    <span class="cf">if</span> (<span class="kw">typeof</span> katex <span class="op">!==</span> <span class="st">&#39;undefined&#39;</span>)</a>
<a class="sourceLine" id="cb6-5" data-line-number="5">    <span class="op">{</span></a>
<a class="sourceLine" id="cb6-6" data-line-number="6">      <span class="cf">try</span> <span class="op">{</span></a>
<a class="sourceLine" id="cb6-7" data-line-number="7">        <span class="cf">return</span> <span class="va">katex</span>.<span class="at">renderToString</span>(code)<span class="op">;</span></a>
<a class="sourceLine" id="cb6-8" data-line-number="8">      <span class="op">}</span> <span class="cf">catch</span> (e) <span class="op">{</span></a>
<a class="sourceLine" id="cb6-9" data-line-number="9">        <span class="cf">return</span> code</a>
<a class="sourceLine" id="cb6-10" data-line-number="10">      <span class="op">}</span></a>
<a class="sourceLine" id="cb6-11" data-line-number="11">    <span class="op">}</span></a>
<a class="sourceLine" id="cb6-12" data-line-number="12">    <span class="cf">return</span> code<span class="op">;</span></a>
<a class="sourceLine" id="cb6-13" data-line-number="13">  <span class="op">}</span></a>
<a class="sourceLine" id="cb6-14" data-line-number="14"></a>
<a class="sourceLine" id="cb6-15" data-line-number="15">  <span class="cf">return</span> <span class="op">{</span></a>
<a class="sourceLine" id="cb6-16" data-line-number="16">    <span class="dt">toKatex</span><span class="op">:</span> toKatex</a>
<a class="sourceLine" id="cb6-17" data-line-number="17">  <span class="op">}</span></a>
<a class="sourceLine" id="cb6-18" data-line-number="18"><span class="op">}</span>()<span class="op">;</span></a></code></pre></div>
<p>Elm 側はほぼ同じ．</p>
<div class="sourceCode" id="cb7"><pre class="sourceCode haskell"><code class="sourceCode haskell"><a class="sourceLine" id="cb7-1" data-line-number="1"><span class="kw">import</span> <span class="dt">Native.Katex</span></a>
<a class="sourceLine" id="cb7-2" data-line-number="2"></a>
<a class="sourceLine" id="cb7-3" data-line-number="3">toKatex <span class="fu">:</span> <span class="dt">String</span> <span class="ot">-&gt;</span> <span class="dt">String</span></a>
<a class="sourceLine" id="cb7-4" data-line-number="4">toKatex <span class="fu">=</span></a>
<a class="sourceLine" id="cb7-5" data-line-number="5">    Native.Katex.toKatex</a></code></pre></div>
<p>最初は以下の LaTeX 表記ををパースしようと思った</p>
<pre><code>$$
  a + 1
$$</code></pre>
<p>が難しくてやめた(笑) 結局 <code>katex</code> のシンタックスハイライトを KaTeX にした．</p>
<div class="sourceCode" id="cb9"><pre class="sourceCode haskell"><code class="sourceCode haskell"><a class="sourceLine" id="cb9-1" data-line-number="1">customHtmlBlock <span class="fu">:</span> <span class="dt">Block</span> b <span class="dt">Formula</span> <span class="ot">-&gt;</span> <span class="dt">List</span> (<span class="dt">Html</span> msg)</a>
<a class="sourceLine" id="cb9-2" data-line-number="2">customHtmlBlock block <span class="fu">=</span></a>
<a class="sourceLine" id="cb9-3" data-line-number="3">    <span class="kw">case</span> block <span class="kw">of</span></a>
<a class="sourceLine" id="cb9-4" data-line-number="4">        <span class="dt">Block.CodeBlock</span> (<span class="dt">Block.Fenced</span> _ fence) code <span class="ot">-&gt;</span></a>
<a class="sourceLine" id="cb9-5" data-line-number="5">            <span class="kw">let</span></a>
<a class="sourceLine" id="cb9-6" data-line-number="6">                language <span class="fu">=</span></a>
<a class="sourceLine" id="cb9-7" data-line-number="7">                    <span class="dt">Maybe</span><span class="fu">.</span>withDefault <span class="st">&quot;&quot;</span> fence<span class="fu">.</span>language</a>
<a class="sourceLine" id="cb9-8" data-line-number="8"></a>
<a class="sourceLine" id="cb9-9" data-line-number="9">                toHighlight_ <span class="fu">=</span></a>
<a class="sourceLine" id="cb9-10" data-line-number="10">                    <span class="kw">if</span> List.member language [ <span class="st">&quot;katex&quot;</span>, <span class="st">&quot;Katex&quot;</span> ] <span class="kw">then</span></a>
<a class="sourceLine" id="cb9-11" data-line-number="11">                        Utils.toKatex <span class="fu">&gt;&gt;</span> divFormula</a>
<a class="sourceLine" id="cb9-12" data-line-number="12">                    <span class="kw">else</span></a>
<a class="sourceLine" id="cb9-13" data-line-number="13">                        Utils.toHighlight language <span class="fu">&gt;&gt;</span> precode language</a>
<a class="sourceLine" id="cb9-14" data-line-number="14">            <span class="kw">in</span></a>
<a class="sourceLine" id="cb9-15" data-line-number="15">            code</a>
<a class="sourceLine" id="cb9-16" data-line-number="16">                <span class="fu">|&gt;</span> toHighlight_</a>
<a class="sourceLine" id="cb9-17" data-line-number="17">                <span class="fu">|&gt;</span> Html.parse</a>
<a class="sourceLine" id="cb9-18" data-line-number="18">                <span class="fu">|&gt;</span> Html.toVirtualDom</a>
<a class="sourceLine" id="cb9-19" data-line-number="19"></a>
<a class="sourceLine" id="cb9-20" data-line-number="20">        _ <span class="ot">-&gt;</span></a>
<a class="sourceLine" id="cb9-21" data-line-number="21">            block</a>
<a class="sourceLine" id="cb9-22" data-line-number="22">                <span class="fu">|&gt;</span> Block.defaultHtml</a>
<a class="sourceLine" id="cb9-23" data-line-number="23">                    (<span class="dt">Just</span> customHtmlBlock)</a>
<a class="sourceLine" id="cb9-24" data-line-number="24">                    <span class="dt">Nothing</span></a>
<a class="sourceLine" id="cb9-25" data-line-number="25"></a>
<a class="sourceLine" id="cb9-26" data-line-number="26">divFormula <span class="fu">:</span> <span class="dt">String</span> <span class="ot">-&gt;</span> <span class="dt">String</span></a>
<a class="sourceLine" id="cb9-27" data-line-number="27">divFormula code <span class="fu">=</span></a>
<a class="sourceLine" id="cb9-28" data-line-number="28">    <span class="st">&quot;&lt;div class=\&quot;formula\&quot;&gt;&quot;</span> <span class="fu">++</span> code <span class="fu">++</span> <span class="st">&quot;&lt;/div&gt;&quot;</span></a></code></pre></div>
<h3 id="インラインの数式">インラインの数式</h3>
<p>次はインラインの数式 <code>$a + 1$</code> を変換する． シンタックスハイライトと数式のブロック要素はかなり雑にやったが，ここはもう少し真面目にやらないといけない．</p>
<p>インライン要素を追加する方法は <a href="https://github.com/pablohirafuji/elm-markdown/tree/2.0.4#implementing-gfm-task-list">pablohirafuji/elm-markdown に少し書いてある</a>． これを参考に拡張していった．</p>
<h4 id="カスタムインライン要素">カスタムインライン要素</h4>
<p>インライン要素の型 <code>Inline i</code> は次のようになっている．</p>
<div class="sourceCode" id="cb10"><pre class="sourceCode haskell"><code class="sourceCode haskell"><a class="sourceLine" id="cb10-1" data-line-number="1"><span class="kw">type</span> <span class="dt">Inline</span> i</a>
<a class="sourceLine" id="cb10-2" data-line-number="2">    <span class="fu">=</span> <span class="dt">Text</span> <span class="dt">String</span></a>
<a class="sourceLine" id="cb10-3" data-line-number="3">    <span class="fu">|</span> <span class="dt">HardLineBreak</span></a>
<a class="sourceLine" id="cb10-4" data-line-number="4">    <span class="fu">|</span> <span class="dt">CodeInline</span> <span class="dt">String</span></a>
<a class="sourceLine" id="cb10-5" data-line-number="5">    <span class="fu">|</span> <span class="dt">Link</span> <span class="dt">String</span> (<span class="dt">Maybe</span> <span class="dt">String</span>) (<span class="dt">List</span> (<span class="dt">Inline</span> i))</a>
<a class="sourceLine" id="cb10-6" data-line-number="6">    <span class="fu">|</span> <span class="dt">Image</span> <span class="dt">String</span> (<span class="dt">Maybe</span> <span class="dt">String</span>) (<span class="dt">List</span> (<span class="dt">Inline</span> i))</a>
<a class="sourceLine" id="cb10-7" data-line-number="7">    <span class="fu">|</span> <span class="dt">HtmlInline</span> <span class="dt">String</span> (<span class="dt">List</span> (<span class="dt">String</span>, <span class="dt">Maybe</span> <span class="dt">String</span>)) (<span class="dt">List</span> (<span class="dt">Inline</span> i))</a>
<a class="sourceLine" id="cb10-8" data-line-number="8">    <span class="fu">|</span> <span class="dt">Emphasis</span> <span class="dt">Int</span> (<span class="dt">List</span> (<span class="dt">Inline</span> i))</a>
<a class="sourceLine" id="cb10-9" data-line-number="9">    <span class="fu">|</span> <span class="dt">Custom</span> i (<span class="dt">List</span> (<span class="dt">Inline</span> i))</a></code></pre></div>
<p>インライン要素を増やすには <code>Custom i (List (Inline i))</code> を用いる． <code>i</code> の部分に新しい型を追加すればよいのだ． なので，数式のインライン要素用の型を定義する．</p>
<div class="sourceCode" id="cb11"><pre class="sourceCode haskell"><code class="sourceCode haskell"><a class="sourceLine" id="cb11-1" data-line-number="1"><span class="kw">type</span> <span class="dt">Formula</span></a>
<a class="sourceLine" id="cb11-2" data-line-number="2">    <span class="fu">=</span> <span class="dt">Formula</span> <span class="dt">String</span></a></code></pre></div>
<p><code>Formula String</code> の <code>String</code> が数式に変換すべき文字列．</p>
<p>そして <code>Block b i</code> だったところを <code>Block b Formula</code> に置き換える． 次に上から順に変えていこう．</p>
<div class="sourceCode" id="cb12"><pre class="sourceCode haskell"><code class="sourceCode haskell"><a class="sourceLine" id="cb12-1" data-line-number="1">customHtmlBlock <span class="fu">:</span> <span class="dt">Block</span> b <span class="dt">Formula</span> <span class="ot">-&gt;</span> <span class="dt">List</span> (<span class="dt">Html</span> msg)</a>
<a class="sourceLine" id="cb12-2" data-line-number="2">customHtmlBlock block <span class="fu">=</span></a>
<a class="sourceLine" id="cb12-3" data-line-number="3">    <span class="kw">case</span> block <span class="kw">of</span></a>
<a class="sourceLine" id="cb12-4" data-line-number="4">        <span class="fu">...</span></a>
<a class="sourceLine" id="cb12-5" data-line-number="5">        _ <span class="ot">-&gt;</span></a>
<a class="sourceLine" id="cb12-6" data-line-number="6">            block</a>
<a class="sourceLine" id="cb12-7" data-line-number="7">                <span class="fu">|&gt;</span> Block.defaultHtml</a>
<a class="sourceLine" id="cb12-8" data-line-number="8">                    (<span class="dt">Just</span> customHtmlBlock)</a>
<a class="sourceLine" id="cb12-9" data-line-number="9">                    (<span class="dt">Just</span> customHtmlInline)</a>
<a class="sourceLine" id="cb12-10" data-line-number="10"></a>
<a class="sourceLine" id="cb12-11" data-line-number="11">customHtmlInline <span class="fu">:</span> <span class="dt">Inline</span> <span class="dt">Formula</span> <span class="ot">-&gt;</span> <span class="dt">Html</span> msg</a>
<a class="sourceLine" id="cb12-12" data-line-number="12">customHtmlInline inline <span class="fu">=</span></a>
<a class="sourceLine" id="cb12-13" data-line-number="13">    <span class="kw">case</span> inline <span class="kw">of</span></a>
<a class="sourceLine" id="cb12-14" data-line-number="14">        <span class="dt">Inline.Custom</span> (<span class="dt">Formula</span> txt) _ <span class="ot">-&gt;</span></a>
<a class="sourceLine" id="cb12-15" data-line-number="15">            Utils.toKatex txt</a>
<a class="sourceLine" id="cb12-16" data-line-number="16">                <span class="fu">|&gt;</span> Html.parse</a>
<a class="sourceLine" id="cb12-17" data-line-number="17">                <span class="fu">|&gt;</span> Html.toVirtualDom</a>
<a class="sourceLine" id="cb12-18" data-line-number="18">                <span class="fu">|&gt;</span> span []</a>
<a class="sourceLine" id="cb12-19" data-line-number="19"></a>
<a class="sourceLine" id="cb12-20" data-line-number="20">        _ <span class="ot">-&gt;</span></a>
<a class="sourceLine" id="cb12-21" data-line-number="21">            Inline.defaultHtml (<span class="dt">Just</span> customHtmlInline) inline</a></code></pre></div>
<p>ここまでは難しくない． 問題は <code>Custom (Formula txt) blocks</code> な値をどうやって構築するか．</p>
<h2 id="section-3"></h2>
<p><code>Inline i</code> 型の <code>Text String</code> のうち <code>$...$</code> のモノを <code>Custom (Formula txt) []</code> に変換する．</p>
<div class="sourceCode" id="cb13"><pre class="sourceCode haskell"><code class="sourceCode haskell"><a class="sourceLine" id="cb13-1" data-line-number="1">parseFormulaInline <span class="fu">:</span> <span class="dt">Inline</span> <span class="dt">Formula</span> <span class="ot">-&gt;</span> <span class="dt">List</span> (<span class="dt">Inline</span> <span class="dt">Formula</span>)</a>
<a class="sourceLine" id="cb13-2" data-line-number="2">parseFormulaInline inline <span class="fu">=</span></a>
<a class="sourceLine" id="cb13-3" data-line-number="3">    <span class="kw">case</span> inline <span class="kw">of</span></a>
<a class="sourceLine" id="cb13-4" data-line-number="4">        <span class="dt">Inline.Text</span> text <span class="ot">-&gt;</span></a>
<a class="sourceLine" id="cb13-5" data-line-number="5">            <span class="kw">case</span> parseFormula text <span class="kw">of</span></a>
<a class="sourceLine" id="cb13-6" data-line-number="6">                [] <span class="ot">-&gt;</span></a>
<a class="sourceLine" id="cb13-7" data-line-number="7">                    [ inline ]</a>
<a class="sourceLine" id="cb13-8" data-line-number="8"></a>
<a class="sourceLine" id="cb13-9" data-line-number="9">                [ _ ] <span class="ot">-&gt;</span></a>
<a class="sourceLine" id="cb13-10" data-line-number="10">                    [ inline ]</a>
<a class="sourceLine" id="cb13-11" data-line-number="11"></a>
<a class="sourceLine" id="cb13-12" data-line-number="12">                inlines <span class="ot">-&gt;</span></a>
<a class="sourceLine" id="cb13-13" data-line-number="13">                    inlines</a>
<a class="sourceLine" id="cb13-14" data-line-number="14"></a>
<a class="sourceLine" id="cb13-15" data-line-number="15">        _ <span class="ot">-&gt;</span></a>
<a class="sourceLine" id="cb13-16" data-line-number="16">            [ inline ]</a>
<a class="sourceLine" id="cb13-17" data-line-number="17"></a>
<a class="sourceLine" id="cb13-18" data-line-number="18">parseFormula <span class="fu">:</span> <span class="dt">String</span> <span class="ot">-&gt;</span> <span class="dt">List</span> (<span class="dt">Inline</span> <span class="dt">Formula</span>)</a>
<a class="sourceLine" id="cb13-19" data-line-number="19">parseFormula text <span class="fu">=</span> undefined ()</a></code></pre></div>
<p><code>abc$1+2$def</code> なども考えられるので <code>String -&gt; List (Inline Formula)</code> に変換している．</p>
<h4 id="パーサーを作る">パーサーを作る</h4>
<p>いよいよパーサーだ． カレンダーのいつぞやで jinjor 先生が <a href="http://package.elm-lang.org/packages/elm-tools/parser/latest">elm-tools/parser</a> を紹介してくれた．</p>
<ul>
<li><a href="https://qiita.com/jinjor/items/d0d4b83b530251df913e">Elm で構文解析しよう - Qiita</a></li>
</ul>
<p>が，自分には Haskell の Parsec 由来の <a href="http://package.elm-lang.org/packages/elm-community/parser-combinators/latest">elm-community/parser-combinators</a> の方が使いやすかったのでコッチに逃げた(ゴメンナサイ)．</p>
<div class="sourceCode" id="cb14"><pre class="sourceCode haskell"><code class="sourceCode haskell"><a class="sourceLine" id="cb14-1" data-line-number="1">withFormula <span class="fu">:</span> <span class="dt">Parser</span> s ( <span class="dt">String</span>, <span class="dt">String</span> )</a>
<a class="sourceLine" id="cb14-2" data-line-number="2">withFormula <span class="fu">=</span></a>
<a class="sourceLine" id="cb14-3" data-line-number="3">    (,) <span class="fu">&lt;$&gt;</span> (<span class="dt">String</span><span class="fu">.</span>concat <span class="fu">&lt;$&gt;</span> many noneDal) <span class="fu">&lt;*&gt;</span> formula</a>
<a class="sourceLine" id="cb14-4" data-line-number="4"></a>
<a class="sourceLine" id="cb14-5" data-line-number="5">formula <span class="fu">:</span> <span class="dt">Parser</span> s <span class="dt">String</span></a>
<a class="sourceLine" id="cb14-6" data-line-number="6">formula <span class="fu">=</span></a>
<a class="sourceLine" id="cb14-7" data-line-number="7">    <span class="dt">String</span><span class="fu">.</span>concat <span class="fu">&lt;$&gt;</span> between (string <span class="st">&quot;$&quot;</span>) (string <span class="st">&quot;$&quot;</span>) (many term)</a>
<a class="sourceLine" id="cb14-8" data-line-number="8"></a>
<a class="sourceLine" id="cb14-9" data-line-number="9">term <span class="fu">:</span> <span class="dt">Parser</span> s <span class="dt">String</span></a>
<a class="sourceLine" id="cb14-10" data-line-number="10">term <span class="fu">=</span></a>
<a class="sourceLine" id="cb14-11" data-line-number="11">    escapedChar <span class="fu">&lt;|&gt;</span> noneDal</a>
<a class="sourceLine" id="cb14-12" data-line-number="12"></a>
<a class="sourceLine" id="cb14-13" data-line-number="13">noneDal <span class="fu">:</span> <span class="dt">Parser</span> s <span class="dt">String</span></a>
<a class="sourceLine" id="cb14-14" data-line-number="14">noneDal <span class="fu">=</span></a>
<a class="sourceLine" id="cb14-15" data-line-number="15">    <span class="dt">String</span><span class="fu">.</span>fromChar <span class="fu">&lt;$&gt;</span> noneOf [ <span class="ch">&#39;$&#39;</span> ]</a>
<a class="sourceLine" id="cb14-16" data-line-number="16"></a>
<a class="sourceLine" id="cb14-17" data-line-number="17">escapedChar <span class="fu">:</span> <span class="dt">Parser</span> s <span class="dt">String</span></a>
<a class="sourceLine" id="cb14-18" data-line-number="18">escapedChar <span class="fu">=</span></a>
<a class="sourceLine" id="cb14-19" data-line-number="19">    <span class="dt">String</span><span class="fu">.</span>append <span class="fu">&lt;$&gt;</span> string <span class="st">&quot;\\&quot;</span> <span class="fu">&lt;*&gt;</span> (<span class="dt">String</span><span class="fu">.</span>fromChar <span class="fu">&lt;$&gt;</span> anyChar)</a></code></pre></div>
<p><code>abc$1+2$</code> が <code>(&quot;abc&quot;, &quot;1+2&quot;)</code> になるようにパーサーを書いた(<code>$1+2$</code> は <code>(&quot;&quot;, &quot;1+2&quot;)</code> となる)． このパーサーを再帰的に適用する．</p>
<div class="sourceCode" id="cb15"><pre class="sourceCode haskell"><code class="sourceCode haskell"><a class="sourceLine" id="cb15-1" data-line-number="1">parseFormula <span class="fu">:</span> <span class="dt">String</span> <span class="ot">-&gt;</span> <span class="dt">List</span> (<span class="dt">Inline</span> <span class="dt">Formula</span>)</a>
<a class="sourceLine" id="cb15-2" data-line-number="2">parseFormula text <span class="fu">=</span></a>
<a class="sourceLine" id="cb15-3" data-line-number="3">    <span class="kw">case</span> Combine.parse withFormula text <span class="kw">of</span></a>
<a class="sourceLine" id="cb15-4" data-line-number="4">        <span class="dt">Result.Err</span> ( (), stream, _ ) <span class="ot">-&gt;</span></a>
<a class="sourceLine" id="cb15-5" data-line-number="5">            <span class="kw">if</span> stream<span class="fu">.</span><span class="kw">data</span> <span class="fu">==</span> <span class="st">&quot;&quot;</span> <span class="kw">then</span></a>
<a class="sourceLine" id="cb15-6" data-line-number="6">                []</a>
<a class="sourceLine" id="cb15-7" data-line-number="7">            <span class="kw">else</span></a>
<a class="sourceLine" id="cb15-8" data-line-number="8">                [ <span class="dt">Inline.Text</span> stream<span class="fu">.</span><span class="kw">data</span> ]</a>
<a class="sourceLine" id="cb15-9" data-line-number="9"></a>
<a class="sourceLine" id="cb15-10" data-line-number="10">        <span class="dt">Result.Ok</span> ( (), stream, ( txt, exp ) ) <span class="ot">-&gt;</span></a>
<a class="sourceLine" id="cb15-11" data-line-number="11">            <span class="dt">Inline.Text</span> txt</a>
<a class="sourceLine" id="cb15-12" data-line-number="12"><span class="ot">                ::</span> <span class="dt">Inline.Custom</span> (<span class="dt">Formula</span> exp) []</a>
<a class="sourceLine" id="cb15-13" data-line-number="13"><span class="ot">                ::</span> parseFormula stream<span class="fu">.</span>input</a></code></pre></div>
<p><code>parse withFormula text</code> をすると，core の <a href="http://package.elm-lang.org/packages/elm-lang/core/latest/Result#Result"><code>Result</code></a> 型を返す． <code>stream</code> はパースした残りなので，パース成功 <code>Result.Ok</code> なら <code>stream</code> に再度パーサーをかけ，失敗 <code>Result.Err</code> ならそのまま返す．</p>
<h4 id="高階関数">高階関数</h4>
<p>pablohirafuji/elm-markdown には便利な高階関数がいくつか定義されている．</p>
<div class="sourceCode" id="cb16"><pre class="sourceCode haskell"><code class="sourceCode haskell"><a class="sourceLine" id="cb16-1" data-line-number="1">walk <span class="fu">:</span> (<span class="dt">Block</span> b i <span class="ot">-&gt;</span> <span class="dt">Block</span> b i) <span class="ot">-&gt;</span> <span class="dt">Block</span> b i <span class="ot">-&gt;</span> <span class="dt">Block</span> b i</a>
<a class="sourceLine" id="cb16-2" data-line-number="2">walkInlines <span class="fu">:</span> (<span class="dt">Inline</span> i <span class="ot">-&gt;</span> <span class="dt">Inline</span> i) <span class="ot">-&gt;</span> <span class="dt">Block</span> b i <span class="ot">-&gt;</span> <span class="dt">Block</span> b i</a></code></pre></div>
<p>前述したとおり <code>Block b i</code> 型は再帰型になっているので，<code>Block b i</code> や <code>Inline i</code> をリストで持っている． なので，<a href="http://package.elm-lang.org/packages/pablohirafuji/elm-markdown/2.0.4/Markdown-Block#walk"><code>walk</code></a> や <a href="http://package.elm-lang.org/packages/pablohirafuji/elm-markdown/2.0.4/Markdown-Block#walkInlines"><code>walkInlines</code></a> 関数はそれらに対し再帰的に関数を適用してくれる．</p>
<p>しかし，用意した関数は <code>Inline Formula -&gt; List (Inline Formula)</code> なのでどちらも使えない． なので，<code>walkInlinesWithConcat : (Inline i -&gt; List (Inline i)) -&gt; Block b i -&gt; Block b i</code> というのを定義した．</p>
<div class="sourceCode" id="cb17"><pre class="sourceCode haskell"><code class="sourceCode haskell"><a class="sourceLine" id="cb17-1" data-line-number="1">parseFormulaInBlock <span class="fu">:</span> <span class="dt">Block</span> b <span class="dt">Formula</span> <span class="ot">-&gt;</span> <span class="dt">Block</span> b <span class="dt">Formula</span></a>
<a class="sourceLine" id="cb17-2" data-line-number="2">parseFormulaInBlock <span class="fu">=</span></a>
<a class="sourceLine" id="cb17-3" data-line-number="3">    Block.walkInlinesWithConcat parseFormulaInline</a></code></pre></div>
<p>あとはこれを呼ぶだけ</p>
<div class="sourceCode" id="cb18"><pre class="sourceCode haskell"><code class="sourceCode haskell"><a class="sourceLine" id="cb18-1" data-line-number="1">toSlide <span class="fu">:</span> <span class="dt">Window.Size</span> <span class="ot">-&gt;</span> <span class="dt">List</span> (<span class="dt">Block</span> b <span class="dt">Formula</span>) <span class="ot">-&gt;</span> <span class="dt">Html</span> msg</a>
<a class="sourceLine" id="cb18-2" data-line-number="2">toSlide window blocks <span class="fu">=</span></a>
<a class="sourceLine" id="cb18-3" data-line-number="3">    blocks</a>
<a class="sourceLine" id="cb18-4" data-line-number="4">        <span class="fu">|&gt;</span> List.map (Block.walk parseFormulaInBlock)</a>
<a class="sourceLine" id="cb18-5" data-line-number="5">        <span class="fu">|&gt;</span> List.concatMap customHtmlBlock</a>
<a class="sourceLine" id="cb18-6" data-line-number="6">        <span class="fu">|&gt;</span> slideView window</a></code></pre></div>
<h2 id="demo">Demo</h2>
<p>こんな感じ</p>
<p><img src="/assets/create-elmdeck/elmdeck.jpg" /></p>
<p><a href="https://matsubara0507.github.io/elmdeck/">GitHub Pages においた</a>．</p>
<h2 id="おしまい">おしまい</h2>
<p>長くなったのでココまで． Electron の部分も面白いんだけどなぁ．</p>
<p>頑張って作っていくぞ．</p>
  </div>
</div>
</article>
]]></summary>
</entry>
<entry>
    <title>Re: ゼロから作る ADVENTAR の Slack Bot (GAS 編)</title>
    <link href="https://matsubara0507.github.io/posts/2017-12-16-re-adventar-slack-bot-part3.html" />
    <id>https://matsubara0507.github.io/posts/2017-12-16-re-adventar-slack-bot-part3.html</id>
    <published>2017-12-16T00:00:00Z</published>
    <updated>2017-12-16T00:00:00Z</updated>
    <summary type="html"><![CDATA[<article class="post card" itemscope itemtype="http://schema.org/BlogPosting">
 <div class="card-content">
  <header class="post-header">
    <h1 class="post-title" itemprop="name headline">Re: ゼロから作る ADVENTAR の Slack Bot (GAS 編)</h1>
    <p class="post-meta">
      <time datetime="2017-12-16" itemprop="datePublished">
        Dec 16, 2017
      </time>
      
      
      <div class="tags">
          <i class="fa fa-tags"></i> <a href="/tags/GoogleAppsScript.html">GoogleAppsScript</a> <a href="/tags/application.html">application</a> <a href="/tags/bot.html">bot</a>
      </div>
      
    </p>
  </header>

  <div class="post-content" itemprop="articleBody">
    <p><a href="https://adventar.org/calendars/2300">IGGG アドベントカレンダー 2017</a> の16日目の記事です．</p>
<h2 id="section"></h2>
<p>前後編で終わると言ったが，あれはウソだ！</p>
<ul>
<li><a href="/posts/2017-12-02-re-adventar-slack-bot-part1.html">Re: ゼロから作る ADVENTAR の Slack Bot (Haskell 編) - ひげメモ</a></li>
<li><a href="/posts/2017-12-09-re-adventar-slack-bot-part2.html">Re: ゼロから作る ADVENTAR の Slack Bot (CircleCI 編) - ひげメモ</a></li>
</ul>
<p>ADVENTAR の更新を通知する Slack Bot を Haskell で作って，Circle CI で回すとこまでは話した． 一応話はそこでお終いだが「<strong>Bot なんだから Slack 側からのアクションも受け取れろよ！</strong>」みたいな圧力を受けた(嘘)ので，今回はそこら辺を何とかした話です．</p>
<h2 id="戦略">戦略</h2>
<p>もちろん，弊サークルは貧者なので Google Apps Script を使う． 戦略は簡単，<strong>GAS から GitHub に向けて空コミットを送る</strong> だけ． そのコミットで CircleCI が動き出す (完)</p>
<p><img src="/assets/re-adventar-slack-bot/run-with-gas.jpg" /></p>
<h2 id="作る">作る</h2>
<h3 id="gas-で-slack-bot">GAS で Slack Bot</h3>
<p>Slack から受け取るときは <a href="https://api.slack.com/custom-integrations/outgoing-webhooks">Outgoing Webhooks</a> を使う． 適当にトリガーワードを決める(今回は <code>update?</code>)． そのワードが設定したチャンネルで打たれると，空コミットを送るのだ．</p>
<h2 id="section-1"></h2>
<p>ただ，打ってから結果を CircleCI が返すまで1分ほどかかるので「ちょっと待って」って感じのメッセージを送ることにしよう． そこで，いつものやつ．</p>
<ul>
<li><a href="http://qiita.com/soundTricker/items/43267609a870fc9c7453">Slack BotをGASでいい感じで書くためのライブラリを作った - Qiita</a></li>
</ul>
<p>こんな感じ</p>
<div class="sourceCode" id="cb1"><pre class="sourceCode javascript"><code class="sourceCode javascript"><a class="sourceLine" id="cb1-1" data-line-number="1"><span class="kw">function</span> <span class="at">doPost</span>(e) <span class="op">{</span></a>
<a class="sourceLine" id="cb1-2" data-line-number="2">  <span class="kw">var</span> prop <span class="op">=</span> <span class="va">PropertiesService</span>.<span class="at">getScriptProperties</span>().<span class="at">getProperties</span>()<span class="op">;</span></a>
<a class="sourceLine" id="cb1-3" data-line-number="3"></a>
<a class="sourceLine" id="cb1-4" data-line-number="4">  <span class="cf">if</span> (<span class="va">prop</span>.<span class="at">VERIFY_TOKEN</span> <span class="op">!=</span> <span class="va">e</span>.<span class="va">parameter</span>.<span class="at">token</span>) <span class="op">{</span></a>
<a class="sourceLine" id="cb1-5" data-line-number="5">    <span class="cf">throw</span> <span class="kw">new</span> <span class="at">Error</span>(<span class="st">&#39;invalid token.&#39;</span>)<span class="op">;</span></a>
<a class="sourceLine" id="cb1-6" data-line-number="6">  <span class="op">}</span></a>
<a class="sourceLine" id="cb1-7" data-line-number="7"></a>
<a class="sourceLine" id="cb1-8" data-line-number="8">  <span class="co">/* for Slack */</span></a>
<a class="sourceLine" id="cb1-9" data-line-number="9">  <span class="kw">var</span> slackApp <span class="op">=</span> <span class="va">SlackApp</span>.<span class="at">create</span>(<span class="va">prop</span>.<span class="at">SLACK_API_TOKEN</span>)<span class="op">;</span></a>
<a class="sourceLine" id="cb1-10" data-line-number="10"></a>
<a class="sourceLine" id="cb1-11" data-line-number="11">  <span class="kw">const</span> BOT_NAME <span class="op">=</span> <span class="st">&#39;gunmer&#39;</span><span class="op">;</span></a>
<a class="sourceLine" id="cb1-12" data-line-number="12">  <span class="kw">const</span> BOT_ICON <span class="op">=</span> <span class="st">&#39;http://drive.google.com/uc?export=view&amp;id=&#39;</span> <span class="op">+</span> <span class="va">prop</span>.<span class="at">ICON_ID</span><span class="op">;</span></a>
<a class="sourceLine" id="cb1-13" data-line-number="13">  <span class="kw">var</span> option <span class="op">=</span> <span class="op">{</span> <span class="dt">username </span><span class="op">:</span> BOT_NAME<span class="op">,</span> <span class="dt">icon_url </span><span class="op">:</span> BOT_ICON<span class="op">,</span> <span class="dt">link_names </span><span class="op">:</span> <span class="dv">1</span> <span class="op">};</span></a>
<a class="sourceLine" id="cb1-14" data-line-number="14">  <span class="kw">var</span> channelName <span class="op">=</span> <span class="va">e</span>.<span class="va">parameter</span>.<span class="at">channel_name</span><span class="op">;</span></a>
<a class="sourceLine" id="cb1-15" data-line-number="15"></a>
<a class="sourceLine" id="cb1-16" data-line-number="16">  <span class="va">Logger</span>.<span class="at">log</span>(<span class="va">slackApp</span>.<span class="at">postMessage</span>(channelName<span class="op">,</span> <span class="st">&#39;just a moment...&#39;</span><span class="op">,</span> option))<span class="op">;</span></a>
<a class="sourceLine" id="cb1-17" data-line-number="17"><span class="op">}</span></a></code></pre></div>
<p>ちなみに，<code>doPost</code> 関数を呼び出す関数を用意して，テストではそいつを実行するとデバッグがはかどる．</p>
<div class="sourceCode" id="cb2"><pre class="sourceCode javascript"><code class="sourceCode javascript"><a class="sourceLine" id="cb2-1" data-line-number="1"><span class="kw">function</span> <span class="at">test</span>() <span class="op">{</span></a>
<a class="sourceLine" id="cb2-2" data-line-number="2">  <span class="kw">var</span> prop <span class="op">=</span> <span class="va">PropertiesService</span>.<span class="at">getScriptProperties</span>().<span class="at">getProperties</span>()<span class="op">;</span></a>
<a class="sourceLine" id="cb2-3" data-line-number="3">  <span class="kw">var</span> e <span class="op">=</span> <span class="op">{</span></a>
<a class="sourceLine" id="cb2-4" data-line-number="4">    <span class="dt">parameter</span><span class="op">:</span> <span class="op">{</span></a>
<a class="sourceLine" id="cb2-5" data-line-number="5">      <span class="dt">token</span><span class="op">:</span> <span class="va">prop</span>.<span class="at">VERIFY_TOKEN</span><span class="op">,</span></a>
<a class="sourceLine" id="cb2-6" data-line-number="6">      <span class="dt">text</span><span class="op">:</span> <span class="st">&#39;update?&#39;</span><span class="op">,</span></a>
<a class="sourceLine" id="cb2-7" data-line-number="7">      <span class="dt">channel_name</span><span class="op">:</span> <span class="st">&#39;bot-test&#39;</span></a>
<a class="sourceLine" id="cb2-8" data-line-number="8">    <span class="op">}</span></a>
<a class="sourceLine" id="cb2-9" data-line-number="9">  <span class="op">}</span></a>
<a class="sourceLine" id="cb2-10" data-line-number="10">  <span class="at">doPost</span>(e)<span class="op">;</span></a>
<a class="sourceLine" id="cb2-11" data-line-number="11"><span class="op">}</span></a></code></pre></div>
<h3 id="gas-で-github-api">GAS で GitHub API</h3>
<p>GitHub に任意のコミットを出すためには，GitHub API の <a href="https://developer.github.com/v3/git">Git Data</a> を使う．</p>
<p>GitHub API を GAS で簡単に扱うために昔作った<a href="https://github.com/matsubara0507/gasdump/tree/githubapi/GitHubAPI">ライブラリ</a>があるので，コレを使えば良い(ググったら他にも<a href="https://github.com/soundTricker/gas-github">あった</a>けど，Git Data は未実装っぽい)． 昔のオレ Good job !</p>
<p>使い方については<a href="https://matsubara0507.github.io/posts/2017-05-03-make-githubapi-lib-for-gas.html">昔書いた記事</a>を参考にして．</p>
<p>取りあえずは，こんな感じにすれば準備OK．</p>
<div class="sourceCode" id="cb3"><pre class="sourceCode javascript"><code class="sourceCode javascript"><a class="sourceLine" id="cb3-1" data-line-number="1"><span class="kw">function</span> <span class="at">doPost</span>(e) <span class="op">{</span></a>
<a class="sourceLine" id="cb3-2" data-line-number="2">  <span class="kw">var</span> prop <span class="op">=</span> <span class="va">PropertiesService</span>.<span class="at">getScriptProperties</span>().<span class="at">getProperties</span>()<span class="op">;</span></a>
<a class="sourceLine" id="cb3-3" data-line-number="3"></a>
<a class="sourceLine" id="cb3-4" data-line-number="4">  <span class="cf">if</span> (<span class="va">prop</span>.<span class="at">VERIFY_TOKEN</span> <span class="op">!=</span> <span class="va">e</span>.<span class="va">parameter</span>.<span class="at">token</span>) <span class="op">{</span></a>
<a class="sourceLine" id="cb3-5" data-line-number="5">    <span class="cf">throw</span> <span class="kw">new</span> <span class="at">Error</span>(<span class="st">&#39;invalid token.&#39;</span>)<span class="op">;</span></a>
<a class="sourceLine" id="cb3-6" data-line-number="6">  <span class="op">}</span></a>
<a class="sourceLine" id="cb3-7" data-line-number="7"></a>
<a class="sourceLine" id="cb3-8" data-line-number="8">  <span class="co">/* push empty commit */</span>  </a>
<a class="sourceLine" id="cb3-9" data-line-number="9">  <span class="kw">var</span> option <span class="op">=</span> <span class="op">{</span> <span class="dt">name</span><span class="op">:</span> <span class="va">prop</span>.<span class="at">NAME</span><span class="op">,</span> <span class="dt">email</span><span class="op">:</span> <span class="va">prop</span>.<span class="at">EMAIL</span> <span class="op">};</span></a>
<a class="sourceLine" id="cb3-10" data-line-number="10">  <span class="kw">var</span> github <span class="op">=</span> <span class="kw">new</span> <span class="va">GitHubAPI</span>.<span class="at">GitHubAPI</span>(<span class="va">prop</span>.<span class="at">GITHUB_USERNAME</span><span class="op">,</span> <span class="va">prop</span>.<span class="at">GITHUB_REPO</span><span class="op">,</span> <span class="va">prop</span>.<span class="at">GITHUB_TOKEN</span><span class="op">,</span> option)<span class="op">;</span></a>
<a class="sourceLine" id="cb3-11" data-line-number="11"></a>
<a class="sourceLine" id="cb3-12" data-line-number="12">  ...</a>
<a class="sourceLine" id="cb3-13" data-line-number="13"><span class="op">}</span></a></code></pre></div>
<p>Commit 用の名前(<code>prop.NAME</code>)とメールアドレス(<code>prop.EMAIL</code>)に，API を叩くためのトークン(<code>prop.GITHUB_TOKEN</code>)と，API を叩く先のアカウント(<code>prop.GITHUB_USERNAME</code>)とリポジトリ(<code>prop.GITHUB_REPO</code>)をスクリプトのプロパティに定義してある(直接書いたって良い)．</p>
<h3 id="空コミットを出す">空コミットを出す</h3>
<p>Git は <code>blob</code>, <code>tree</code>, <code>commit</code>， <code>tag</code> の4つのオブジェクト(ファイル)を使って過去のデータなどを管理している． <code>blob</code> はファイルそのもの，<code>tree</code> はディレクトリ構造，<code>commit</code> と <code>tag</code> は名前の通りコミットとタグを表している． また，どの種類のオブジェクトも SHA-1 ハッシュ値で名前付けされている．</p>
<p>コミットを出すには，<code>commit</code> オブジェクトを作る必要があり，その中には親コミットと <code>tree</code> オブジェクトの SHA-1 が書かれている． では空コミットの場合はどうなるのか． 簡単だ，<strong>親コミットと同じ <code>tree</code> オブジェクトを中に書けばよい</strong> ．</p>
<div class="sourceCode" id="cb4"><pre class="sourceCode javascript"><code class="sourceCode javascript"><a class="sourceLine" id="cb4-1" data-line-number="1"><span class="kw">function</span> <span class="at">doPost</span>(e) <span class="op">{</span></a>
<a class="sourceLine" id="cb4-2" data-line-number="2">  ...</a>
<a class="sourceLine" id="cb4-3" data-line-number="3">  <span class="kw">var</span> github <span class="op">=</span> <span class="kw">new</span> <span class="va">GitHubAPI</span>.<span class="at">GitHubAPI</span>(<span class="va">prop</span>.<span class="at">GITHUB_USERNAME</span><span class="op">,</span> <span class="va">prop</span>.<span class="at">GITHUB_REPO</span><span class="op">,</span> <span class="va">prop</span>.<span class="at">GITHUB_TOKEN</span><span class="op">,</span> option)<span class="op">;</span></a>
<a class="sourceLine" id="cb4-4" data-line-number="4"></a>
<a class="sourceLine" id="cb4-5" data-line-number="5">  <span class="kw">var</span> branch <span class="op">=</span> <span class="va">github</span>.<span class="at">getBranch</span>(<span class="va">prop</span>.<span class="at">GITHUB_BRANCH</span>)<span class="op">;</span></a>
<a class="sourceLine" id="cb4-6" data-line-number="6">  <span class="kw">var</span> pcommit <span class="op">=</span> branch[<span class="st">&#39;commit&#39;</span>][<span class="st">&#39;sha&#39;</span>]<span class="op">;</span></a>
<a class="sourceLine" id="cb4-7" data-line-number="7">  <span class="kw">var</span> ptree <span class="op">=</span> branch[<span class="st">&#39;commit&#39;</span>][<span class="st">&#39;commit&#39;</span>][<span class="st">&#39;tree&#39;</span>][<span class="st">&#39;sha&#39;</span>]<span class="op">;</span></a>
<a class="sourceLine" id="cb4-8" data-line-number="8">  <span class="kw">var</span> commit <span class="op">=</span> <span class="va">github</span>.<span class="at">createCommit</span>(<span class="st">&#39;empty!&#39;</span><span class="op">,</span> ptree<span class="op">,</span> pcommit)<span class="op">;</span></a>
<a class="sourceLine" id="cb4-9" data-line-number="9">  <span class="va">github</span>.<span class="at">updateReference</span>(<span class="va">prop</span>.<span class="at">GITHUB_BRANCH</span><span class="op">,</span> commit[<span class="st">&#39;sha&#39;</span>])</a>
<a class="sourceLine" id="cb4-10" data-line-number="10"></a>
<a class="sourceLine" id="cb4-11" data-line-number="11">  ...</a>
<a class="sourceLine" id="cb4-12" data-line-number="12"><span class="op">}</span></a></code></pre></div>
<p>最後にしてるのは，ブランチ指しているコミットの更新である．</p>
<h2 id="完成">完成</h2>
<p><img src="/assets/re-adventar-slack-bot/adventar-bot-2.jpg" /></p>
<h2 id="おしまい">おしまい</h2>
<p>今回は少なめ． というかすごく簡単にできた． 昔のオレ Good job !!</p>
  </div>
</div>
</article>
]]></summary>
</entry>
<entry>
    <title>Elm と Haskell で作る ToDo アプリ</title>
    <link href="https://matsubara0507.github.io/posts/2017-12-13-elm-and-haskell-for-elmer.html" />
    <id>https://matsubara0507.github.io/posts/2017-12-13-elm-and-haskell-for-elmer.html</id>
    <published>2017-12-13T00:00:00Z</published>
    <updated>2017-12-13T00:00:00Z</updated>
    <summary type="html"><![CDATA[<article class="post card" itemscope itemtype="http://schema.org/BlogPosting">
 <div class="card-content">
  <header class="post-header">
    <h1 class="post-title" itemprop="name headline">Elm と Haskell で作る ToDo アプリ</h1>
    <p class="post-meta">
      <time datetime="2017-12-13" itemprop="datePublished">
        Dec 13, 2017
      </time>
      
      
      <div class="tags">
          <i class="fa fa-tags"></i> <a href="/tags/Haskell.html">Haskell</a> <a href="/tags/Elm.html">Elm</a> <a href="/tags/application.html">application</a>
      </div>
      
    </p>
  </header>

  <div class="post-content" itemprop="articleBody">
    <p><a href="https://qiita.com/advent-calendar/2017/elm">Elm Advent Calendar 2017</a> の13日目の記事です．</p>
<p>普段はよく Haskell を使っていますが，ひょんなことから Elm を触り始め，フロントを表現する良いサブウェポンとしてかなり気に入りました．</p>
<p>今回は Elm の相棒として大本命である(要出典) Haskell と組み合わせた場合の書き方などを ToDo アプリを例にして説明します．</p>
<p>最終的なコードは以下にあります．</p>
<ul>
<li><a href="https://github.com/matsubara0507/haskell-and-elm/tree/unuse-extensible">matsubara0507/haskell-and-elm tree:unuse-extensible - GitHub</a></li>
</ul>
<p>ちなみに，この内容については以前に記事にしました．</p>
<ul>
<li><a href="https://matsubara0507.github.io/posts/2017-09-17-create-haskell-and-elm.html">Haskell × Elm のサンプルアプリケーションを書いてみた - ひげメモ</a></li>
</ul>
<p>同じこと書いてもアレなので，今回は Haskell 知らない人向けにブラッシュアップします(できるだけ)．</p>
<h2 id="haskell-の準備">Haskell の準備</h2>
<p>(Haskell は分かってるよ勢は読み飛ばして)</p>
<p>Elm 処理系は既にある前提です． Haskell は特殊な要件(Backpack システムを使いたいとか)が無い限りはstack を使いましょう．</p>
<p><a href="https://docs.haskellstack.org/en/stable/README/#how-to-install">公式サイトにある</a>通り，Windows は専用のインストーラーを，それ以外は <code>curl -sSL https://get.haskellstack.org/ | sh</code> と叩けばいいはず．</p>
<h3 id="プロジェクト">プロジェクト</h3>
<p>Haskell プロジェクトは <code>.cabal</code> ファイルというのに構成を書く． ただし，<code>.cabal</code> ファイルは独自記法なため慣れてないと扱いにくい． そこで，<a href="https://github.com/sol/hpack">hpack</a> というのを用いて，よくある yaml ファイルによる構成記述から <code>.cabal</code> に変換して使うのが最近の主流だ．</p>
<p>例えば以下のような <code>package.yaml</code> ファイルを書く．</p>
<div class="sourceCode" id="cb1"><pre class="sourceCode yaml"><code class="sourceCode yaml"><a class="sourceLine" id="cb1-1" data-line-number="1"><span class="fu">name:</span><span class="at">                haskell-and-elm</span></a>
<a class="sourceLine" id="cb1-2" data-line-number="2"><span class="fu">version:</span><span class="at">             0.1.0.0</span></a>
<a class="sourceLine" id="cb1-3" data-line-number="3"><span class="fu">homepage:</span><span class="at">            https://github.com/matsubara0507/haskell-and-elm</span><span class="co">#readme</span></a>
<a class="sourceLine" id="cb1-4" data-line-number="4"><span class="fu">license:</span><span class="at">             MIT</span></a>
<a class="sourceLine" id="cb1-5" data-line-number="5"><span class="fu">author:</span><span class="at">              MATSUBARA Nobutada</span></a>
<a class="sourceLine" id="cb1-6" data-line-number="6"><span class="fu">copyright:</span><span class="at">           2017 MATSUBARA Nobutada</span></a>
<a class="sourceLine" id="cb1-7" data-line-number="7"><span class="fu">category:</span><span class="at">            Web</span></a>
<a class="sourceLine" id="cb1-8" data-line-number="8"></a>
<a class="sourceLine" id="cb1-9" data-line-number="9"><span class="fu">dependencies:</span></a>
<a class="sourceLine" id="cb1-10" data-line-number="10">  <span class="kw">-</span> aeson</a>
<a class="sourceLine" id="cb1-11" data-line-number="11">  <span class="kw">-</span> base &gt;= 4.7 &amp;&amp; &lt; 5</a>
<a class="sourceLine" id="cb1-12" data-line-number="12">  <span class="kw">-</span> elm-export</a>
<a class="sourceLine" id="cb1-13" data-line-number="13">  <span class="kw">-</span> servant-elm</a>
<a class="sourceLine" id="cb1-14" data-line-number="14"></a>
<a class="sourceLine" id="cb1-15" data-line-number="15"><span class="fu">library:</span></a>
<a class="sourceLine" id="cb1-16" data-line-number="16">  <span class="fu">source-dirs:</span><span class="at">        src</span></a>
<a class="sourceLine" id="cb1-17" data-line-number="17">  <span class="fu">exposed-modules:</span></a>
<a class="sourceLine" id="cb1-18" data-line-number="18">    <span class="kw">-</span> Hoge</a>
<a class="sourceLine" id="cb1-19" data-line-number="19">  <span class="fu">other-modules:</span><span class="at"> </span><span class="kw">[]</span></a>
<a class="sourceLine" id="cb1-20" data-line-number="20"></a>
<a class="sourceLine" id="cb1-21" data-line-number="21"><span class="fu">executables:</span></a>
<a class="sourceLine" id="cb1-22" data-line-number="22">  <span class="fu">hoge-exe:</span></a>
<a class="sourceLine" id="cb1-23" data-line-number="23">    <span class="fu">source-dirs:</span><span class="at">      src</span></a>
<a class="sourceLine" id="cb1-24" data-line-number="24">    <span class="fu">main:</span><span class="at">             Main.hs</span></a></code></pre></div>
<p><code>homepage</code> とか <code>license</code> とか <code>author</code> とかは無くても動く． <code>dependencies</code> は依存パッケージを指定し，<code>library</code> はプロジェクトで作るライブラリの設定を記述し，<code>executables</code> は実行プログラムの設定を記述する． 他にも <code>tests</code> とかもある．</p>
<h3 id="stack-の役割">stack の役割</h3>
<p><code>.cabal</code> ファイル(<code>package.yaml</code>) の他に <code>stack.yaml</code> ファイルを用意する必要がある． そもそも stack の役割は，依存しているパッケージ間のバージョンをいい感じに取ってきてくれるパッケージ群のスナップショットを提供することだ．</p>
<p>例えば次のような <code>stack.yaml</code> を書く．</p>
<div class="sourceCode" id="cb2"><pre class="sourceCode yaml"><code class="sourceCode yaml"><a class="sourceLine" id="cb2-1" data-line-number="1"><span class="fu">resolver:</span><span class="at"> lts-9.17</span></a>
<a class="sourceLine" id="cb2-2" data-line-number="2"><span class="fu">packages:</span></a>
<a class="sourceLine" id="cb2-3" data-line-number="3"><span class="kw">-</span> .</a>
<a class="sourceLine" id="cb2-4" data-line-number="4"><span class="fu">extra-deps:</span><span class="at"> </span><span class="kw">[]</span></a>
<a class="sourceLine" id="cb2-5" data-line-number="5"><span class="fu">flags:</span><span class="at"> </span><span class="kw">{}</span></a>
<a class="sourceLine" id="cb2-6" data-line-number="6"><span class="fu">extra-package-dbs:</span><span class="at"> </span><span class="kw">[]</span></a></code></pre></div>
<p>重要なのは <code>resolver</code> で，他は無くてもたぶん動きます． <code>resolver</code> でいい感じのパッケージ群のスナップショットを指定する． どんなのがあるかは<a href="https://www.stackage.org/">公式サイト</a>を参照．</p>
<p>もし，指定したスナップショットにはないパッケージやバージョンを使いたい場合は <code>extra-deps</code> に書くといい．</p>
<h2 id="作るもの">作るもの</h2>
<p>さて本題．</p>
<p>タイトルの通り，フロントを Elm で，バックを Haskell で書いた，超簡易版 ToDo アプリを書きます．</p>
<p>具体的には以下の記事と同じものを書きます．</p>
<ul>
<li><a href="https://qiita.com/lotz/items/883b41fa79f060e59efa#単純な例">【型レベルWeb DSL】 Servantの紹介 - Qiita</a></li>
</ul>
<p>整理すると以下のようなエンドポイントを Haskell で実装し，Elm 側でアクセスして操作する UI を作る．</p>
<pre><code>GET    /todos
POST   /todos
PUT    /todos/:id
DELETE /todos/:id</code></pre>
<p>ちなみに，めんどくさいので DB は使わず，Haskell 内部で配列のようにして持つだけにする．</p>
<h2 id="作る">作る</h2>
<p>肝になるのは Elm と Haskell をどうやってつなぐか． もちろん RESTful API を定義するので，各々を別々に書くこともできるが，ここはもっと賢くやってみよう．</p>
<h3 id="まずは-haskell-から">まずは Haskell から</h3>
<h4 id="プロジェクトの準備">プロジェクトの準備</h4>
<p><code>stack new</code> でプロジェクトを生成する．</p>
<pre><code>$ stack new haskell-and-elm simple-hpack</code></pre>
<p><code>elm-and-haskell</code> がプロジェクト名で，<code>simple-hpack</code> がテンプレート名だ．</p>
<p>次に <code>package.yaml</code> を書き換える．</p>
<div class="sourceCode" id="cb5"><pre class="sourceCode yaml"><code class="sourceCode yaml"><a class="sourceLine" id="cb5-1" data-line-number="1"><span class="fu">name:</span><span class="at"> haskell-and-elm</span></a>
<a class="sourceLine" id="cb5-2" data-line-number="2"><span class="fu">version:</span><span class="at"> 0.1.0.0</span></a>
<a class="sourceLine" id="cb5-3" data-line-number="3"><span class="fu">ghc-options:</span><span class="at"> -Wall</span></a>
<a class="sourceLine" id="cb5-4" data-line-number="4"></a>
<a class="sourceLine" id="cb5-5" data-line-number="5"><span class="fu">dependencies:</span></a>
<a class="sourceLine" id="cb5-6" data-line-number="6">  <span class="kw">-</span> aeson</a>
<a class="sourceLine" id="cb5-7" data-line-number="7">  <span class="kw">-</span> base &gt;= 4.7 &amp;&amp; &lt; 5</a>
<a class="sourceLine" id="cb5-8" data-line-number="8">  <span class="kw">-</span> containers</a>
<a class="sourceLine" id="cb5-9" data-line-number="9">  <span class="kw">-</span> elm-export</a>
<a class="sourceLine" id="cb5-10" data-line-number="10">  <span class="kw">-</span> http-api-data</a>
<a class="sourceLine" id="cb5-11" data-line-number="11">  <span class="kw">-</span> servant</a>
<a class="sourceLine" id="cb5-12" data-line-number="12">  <span class="kw">-</span> servant-ede</a>
<a class="sourceLine" id="cb5-13" data-line-number="13">  <span class="kw">-</span> servant-elm</a>
<a class="sourceLine" id="cb5-14" data-line-number="14">  <span class="kw">-</span> servant-server</a>
<a class="sourceLine" id="cb5-15" data-line-number="15">  <span class="kw">-</span> stm</a>
<a class="sourceLine" id="cb5-16" data-line-number="16">  <span class="kw">-</span> transformers</a>
<a class="sourceLine" id="cb5-17" data-line-number="17"></a>
<a class="sourceLine" id="cb5-18" data-line-number="18"><span class="fu">library:</span></a>
<a class="sourceLine" id="cb5-19" data-line-number="19">  <span class="fu">source-dirs:</span><span class="at"> src</span></a>
<a class="sourceLine" id="cb5-20" data-line-number="20">  <span class="fu">exposed-modules:</span></a>
<a class="sourceLine" id="cb5-21" data-line-number="21">    <span class="kw">-</span> Todo</a>
<a class="sourceLine" id="cb5-22" data-line-number="22">  <span class="fu">other-modules:</span><span class="at"> </span><span class="kw">[]</span></a></code></pre></div>
<p>少し依存パッケージが多いが気にしない．</p>
<p><code>src</code> 以下にある <code>Main.hs</code> は要らないので削除して，代わりに <code>Todo.hs</code> を作ろう． まだ以下だけで十分．</p>
<div class="sourceCode" id="cb6"><pre class="sourceCode haskell"><code class="sourceCode haskell"><a class="sourceLine" id="cb6-1" data-line-number="1"><span class="kw">module</span> <span class="dt">Todo</span> <span class="kw">where</span></a>
<a class="sourceLine" id="cb6-2" data-line-number="2"><span class="kw">data</span> <span class="dt">Todo</span></a></code></pre></div>
<p>取りあえずコンパイルしてみると怒られるはずだ．</p>
<pre><code># stack build
Error: While constructing the build plan, the following exceptions were encountered:

In the dependencies for haskell-and-elm-0.1.0.0:
    servant-ede must match -any, but the stack configuration has no specified version (latest applicable is 0.6)
needed since haskell-and-elm-0.1.0.0 is a build target.

Recommended action: try adding the following to your extra-deps in C:\Users\noob\git\haskell\haskell-and-elm\stack.yaml:
- servant-ede-0.6

You may also want to try the &#39;stack solver&#39; command
Plan construction failed.</code></pre>
<p><code>package.yaml</code> で <code>servant-ede</code> を依存パッケージに指定してるけど，<code>stack.yaml</code> で指定してるスナップショットには無いから <code>stack.yaml</code> の <code>extra-deps</code> のところに書き加えて，と言われてるので，その通りにする．</p>
<div class="sourceCode" id="cb8"><pre class="sourceCode yaml"><code class="sourceCode yaml"><a class="sourceLine" id="cb8-1" data-line-number="1"><span class="fu">resolver:</span><span class="at"> lts-9.18</span></a>
<a class="sourceLine" id="cb8-2" data-line-number="2"><span class="fu">packages:</span></a>
<a class="sourceLine" id="cb8-3" data-line-number="3"><span class="kw">-</span> .</a>
<a class="sourceLine" id="cb8-4" data-line-number="4"><span class="fu">extra-deps:</span></a>
<a class="sourceLine" id="cb8-5" data-line-number="5"><span class="kw">-</span> servant-ede-0.6</a>
<a class="sourceLine" id="cb8-6" data-line-number="6"><span class="fu">flags:</span><span class="at"> </span><span class="kw">{}</span></a>
<a class="sourceLine" id="cb8-7" data-line-number="7"><span class="fu">extra-package-dbs:</span><span class="at"> </span><span class="kw">[]</span></a></code></pre></div>
<p>これで <code>stack build</code> が通るはず．</p>
<h4 id="型を考える">型を考える</h4>
<p>Haskell はまず，扱う型から考える． Elm もきっと同じですよね(Model の型から考えるよね？？)</p>
<p>今回扱うのは ToDo タスクの型． 話を簡単にするために，識別子と，ToDo タスクのタイトルと，タスクの完了を表す真偽値のみをフィールドに持つとする．</p>
<div class="sourceCode" id="cb9"><pre class="sourceCode haskell"><code class="sourceCode haskell"><a class="sourceLine" id="cb9-1" data-line-number="1"><span class="co">-- src/Todo.hs</span></a>
<a class="sourceLine" id="cb9-2" data-line-number="2"></a>
<a class="sourceLine" id="cb9-3" data-line-number="3"><span class="kw">module</span> <span class="dt">Todo</span> <span class="kw">where</span></a>
<a class="sourceLine" id="cb9-4" data-line-number="4"></a>
<a class="sourceLine" id="cb9-5" data-line-number="5"><span class="kw">data</span> <span class="dt">Todo</span> <span class="fu">=</span> <span class="dt">Todo</span></a>
<a class="sourceLine" id="cb9-6" data-line-number="6">  {<span class="ot"> todoId ::</span> <span class="dt">Int</span></a>
<a class="sourceLine" id="cb9-7" data-line-number="7">  ,<span class="ot"> title  ::</span> <span class="dt">String</span></a>
<a class="sourceLine" id="cb9-8" data-line-number="8">  ,<span class="ot"> done   ::</span> <span class="dt">Bool</span></a>
<a class="sourceLine" id="cb9-9" data-line-number="9">  }</a></code></pre></div>
<p>ちなみに，<code>data</code> 宣言による型定義は Elm での <code>type</code> 宣言による定義と同義だ．</p>
<p>次に，RESTful API の仕様を型として定義しよう． そのためには <a href="https://hackage.haskell.org/package/servant">servant</a> と呼ばれるパッケージを用いる． それを用いると次のような API の型を書ける．</p>
<div class="sourceCode" id="cb10"><pre class="sourceCode haskell"><code class="sourceCode haskell"><a class="sourceLine" id="cb10-1" data-line-number="1"><span class="co">-- src/Todo.hs</span></a>
<a class="sourceLine" id="cb10-2" data-line-number="2"></a>
<a class="sourceLine" id="cb10-3" data-line-number="3"><span class="ot">{-# LANGUAGE DataKinds     #-}</span></a>
<a class="sourceLine" id="cb10-4" data-line-number="4"><span class="ot">{-# LANGUAGE TypeOperators #-}</span></a>
<a class="sourceLine" id="cb10-5" data-line-number="5"></a>
<a class="sourceLine" id="cb10-6" data-line-number="6"><span class="kw">module</span> <span class="dt">Todo</span> <span class="kw">where</span></a>
<a class="sourceLine" id="cb10-7" data-line-number="7"></a>
<a class="sourceLine" id="cb10-8" data-line-number="8"><span class="kw">import</span>           <span class="dt">Servant.API</span></a>
<a class="sourceLine" id="cb10-9" data-line-number="9"><span class="kw">import</span>           <span class="dt">Data.Proxy</span></a>
<a class="sourceLine" id="cb10-10" data-line-number="10"></a>
<a class="sourceLine" id="cb10-11" data-line-number="11"><span class="kw">data</span> <span class="dt">Todo</span> <span class="fu">=</span> <span class="fu">...</span></a>
<a class="sourceLine" id="cb10-12" data-line-number="12"></a>
<a class="sourceLine" id="cb10-13" data-line-number="13"><span class="kw">type</span> <span class="dt">CRUD</span></a>
<a class="sourceLine" id="cb10-14" data-line-number="14">    <span class="fu">=</span> <span class="st">&quot;todos&quot;</span> <span class="fu">:&gt;</span> <span class="dt">Get</span> <span class="ch">&#39;[JSON] [Todo]</span></a>
<a class="sourceLine" id="cb10-15" data-line-number="15"> <span class="fu">:&lt;|&gt;</span> <span class="st">&quot;todos&quot;</span> <span class="fu">:&gt;</span> <span class="dt">ReqBody</span> <span class="ch">&#39;[JSON, FormUrlEncoded] Todo :&gt; Post &#39;</span>[<span class="dt">JSON</span>] <span class="dt">Todo</span></a>
<a class="sourceLine" id="cb10-16" data-line-number="16"> <span class="fu">:&lt;|&gt;</span> <span class="st">&quot;todos&quot;</span> <span class="fu">:&gt;</span> <span class="dt">Capture</span> <span class="st">&quot;id&quot;</span> <span class="dt">Int</span> <span class="fu">:&gt;</span> <span class="dt">ReqBody</span> <span class="ch">&#39;[JSON, FormUrlEncoded] Todo :&gt; Put &#39;</span>[<span class="dt">JSON</span>] ()</a>
<a class="sourceLine" id="cb10-17" data-line-number="17"> <span class="fu">:&lt;|&gt;</span> <span class="st">&quot;todos&quot;</span> <span class="fu">:&gt;</span> <span class="dt">Capture</span> <span class="st">&quot;id&quot;</span> <span class="dt">Int</span> <span class="fu">:&gt;</span> <span class="dt">Delete</span> <span class="ch">&#39;[JSON] ()</span></a></code></pre></div>
<p><code>{-# LANGUAGE ... #-}</code> というのは GHC拡張と呼ばれるもので，Haskell の仕様にはないが，GHC にのみ(便利・面白いから)取り入れられてる機能を使うというフラグみたいなものだ． <code>DataKinds</code> 拡張によって型定義に値レベルのはずの文字列やリストを扱えるようになり(<code>&quot;todos&quot;</code> とか <code>'[JSON]</code> の部分)，<code>TypeOperators</code> 拡張で型定義に演算子が使えるようになる．</p>
<p>ちなみに，<code>type</code> 宣言は Elm でいう <code>type alias</code> 宣言と同義で，型の別名を与えているだけだ．</p>
<p><code>CRUD</code> 型の意味は何となくわかるはずだ． 前述した RESTful API の仕様をそのまんま型にした感じでしょう？</p>
<h4 id="型クラスとジェネリクス">型クラスとジェネリクス</h4>
<p>これで一応ビルドは通るが <code>Todo</code> 型の JSON へのデコーダー・エンコーダーと，リクエスト Body にエンコードする関数が未定義のため，後々に怒られるだろう． 怒られないようにするためには <code>Todo</code> 型を <code>FromJSON</code>，<code>ToJSON</code>，<code>FromForm</code> 型クラスのインスタンスにしてやればよい(特定の関数を実装するだけ)． しかし，デコーダーやエンコーダーを手書きするのはめんどくさいよね？</p>
<p>そこで，Haskell のメタプログラミングのひとつ，ジェネリクスを用いる．</p>
<p><code>src/Todo.hs</code> に以下のようなのを書き加える．</p>
<div class="sourceCode" id="cb11"><pre class="sourceCode haskell"><code class="sourceCode haskell"><a class="sourceLine" id="cb11-1" data-line-number="1"><span class="ot">{-# LANGUAGE DeriveGeneric #-}</span></a>
<a class="sourceLine" id="cb11-2" data-line-number="2"></a>
<a class="sourceLine" id="cb11-3" data-line-number="3"><span class="kw">import</span>           <span class="dt">Data.Aeson</span></a>
<a class="sourceLine" id="cb11-4" data-line-number="4"><span class="kw">import</span>           <span class="dt">GHC.Generics</span></a>
<a class="sourceLine" id="cb11-5" data-line-number="5"><span class="kw">import</span>           <span class="dt">Web.Internal.FormUrlEncoded</span> (<span class="dt">FromForm</span>)</a>
<a class="sourceLine" id="cb11-6" data-line-number="6"></a>
<a class="sourceLine" id="cb11-7" data-line-number="7"><span class="kw">data</span> <span class="dt">Todo</span> <span class="fu">=</span> <span class="dt">Todo</span></a>
<a class="sourceLine" id="cb11-8" data-line-number="8">  {<span class="ot"> todoId ::</span> <span class="dt">Int</span></a>
<a class="sourceLine" id="cb11-9" data-line-number="9">  ,<span class="ot"> title  ::</span> <span class="dt">String</span></a>
<a class="sourceLine" id="cb11-10" data-line-number="10">  ,<span class="ot"> done   ::</span> <span class="dt">Bool</span></a>
<a class="sourceLine" id="cb11-11" data-line-number="11">  } <span class="kw">deriving</span> (<span class="dt">Generic</span>)</a>
<a class="sourceLine" id="cb11-12" data-line-number="12"></a>
<a class="sourceLine" id="cb11-13" data-line-number="13"><span class="kw">instance</span> <span class="dt">FromJSON</span> <span class="dt">Todo</span></a>
<a class="sourceLine" id="cb11-14" data-line-number="14"><span class="kw">instance</span> <span class="dt">ToJSON</span> <span class="dt">Todo</span></a>
<a class="sourceLine" id="cb11-15" data-line-number="15"><span class="kw">instance</span> <span class="dt">FromForm</span> <span class="dt">Todo</span></a></code></pre></div>
<p><code>deriving</code> というのは型クラスのインスタンスを自動で設定する仕組みだ． <code>deriving</code> は本来，<code>Show</code> や <code>Eq</code> のような組み込みにある型クラスにのみ使える． ここでは，GHC 固有の <code>Generic</code> と呼ばれる型クラスも <code>deriving</code> したいので，<code>DeriveGeneric</code> 拡張を書き加えている． <code>Generic</code> 型クラスのインスタンスであれば，多くの型クラスのインスタンスを自動で実装してくれる(型クラスを提供してる人がそのような仕組みを作る)．</p>
<p>結果として，<code>instance FromJSON Todo</code> と書くだけで <code>FromJSON</code> のインスタンス化が出来てしまう． すごいよね．</p>
<h4 id="サーバーを立てる">サーバーを立てる</h4>
<p>ここはざっくりと(丁寧にやると長くなるので)． 以下のような <code>app/Main.hs</code> ファイルを用意する．</p>
<div class="sourceCode" id="cb12"><pre class="sourceCode haskell"><code class="sourceCode haskell"><a class="sourceLine" id="cb12-1" data-line-number="1"><span class="ot">{-# LANGUAGE DataKinds     #-}</span></a>
<a class="sourceLine" id="cb12-2" data-line-number="2"><span class="ot">{-# LANGUAGE TypeOperators #-}</span></a>
<a class="sourceLine" id="cb12-3" data-line-number="3"></a>
<a class="sourceLine" id="cb12-4" data-line-number="4"><span class="kw">module</span> <span class="dt">Main</span> <span class="kw">where</span></a>
<a class="sourceLine" id="cb12-5" data-line-number="5"></a>
<a class="sourceLine" id="cb12-6" data-line-number="6"><span class="kw">import</span>           <span class="dt">Control.Arrow</span>             (second)</a>
<a class="sourceLine" id="cb12-7" data-line-number="7"><span class="kw">import</span>           <span class="dt">Control.Concurrent.STM</span></a>
<a class="sourceLine" id="cb12-8" data-line-number="8"><span class="kw">import</span>           <span class="dt">Control.Monad.IO.Class</span>    (liftIO)</a>
<a class="sourceLine" id="cb12-9" data-line-number="9"><span class="kw">import</span>           <span class="dt">Data.Aeson</span></a>
<a class="sourceLine" id="cb12-10" data-line-number="10"><span class="kw">import</span>           <span class="dt">Data.IntMap</span>               (<span class="dt">IntMap</span>)</a>
<a class="sourceLine" id="cb12-11" data-line-number="11"><span class="kw">import</span> <span class="kw">qualified</span> <span class="dt">Data.IntMap</span>               <span class="kw">as</span> <span class="dt">IntMap</span></a>
<a class="sourceLine" id="cb12-12" data-line-number="12"><span class="kw">import</span>           <span class="dt">Data.Proxy</span>                (<span class="dt">Proxy</span> (..))</a>
<a class="sourceLine" id="cb12-13" data-line-number="13"><span class="kw">import</span> <span class="kw">qualified</span> <span class="dt">Network.Wai.Handler.Warp</span>  <span class="kw">as</span> <span class="dt">Warp</span></a>
<a class="sourceLine" id="cb12-14" data-line-number="14"><span class="kw">import</span>           <span class="dt">Servant.API</span></a>
<a class="sourceLine" id="cb12-15" data-line-number="15"><span class="kw">import</span>           <span class="dt">Servant.EDE</span>               (<span class="dt">HTML</span>, loadTemplates)</a>
<a class="sourceLine" id="cb12-16" data-line-number="16"><span class="kw">import</span>           <span class="dt">Servant.Server</span></a>
<a class="sourceLine" id="cb12-17" data-line-number="17"><span class="kw">import</span>           <span class="dt">Servant.Utils.StaticFiles</span> (serveDirectoryFileServer)</a>
<a class="sourceLine" id="cb12-18" data-line-number="18"><span class="kw">import</span>           <span class="dt">Todo</span>                      (<span class="dt">Todo</span> (..))</a>
<a class="sourceLine" id="cb12-19" data-line-number="19"><span class="kw">import</span> <span class="kw">qualified</span> <span class="dt">Todo</span></a>
<a class="sourceLine" id="cb12-20" data-line-number="20"></a>
<a class="sourceLine" id="cb12-21" data-line-number="21"><span class="ot">main ::</span> <span class="dt">IO</span> ()</a>
<a class="sourceLine" id="cb12-22" data-line-number="22">main <span class="fu">=</span> <span class="kw">do</span></a>
<a class="sourceLine" id="cb12-23" data-line-number="23">  db <span class="ot">&lt;-</span> atomically <span class="fu">$</span> newTVar (length initTodoList, IntMap.fromList initTodoList)</a>
<a class="sourceLine" id="cb12-24" data-line-number="24">  _ <span class="ot">&lt;-</span> loadTemplates api [] <span class="st">&quot;.&quot;</span></a>
<a class="sourceLine" id="cb12-25" data-line-number="25">  putStrLn <span class="st">&quot;Listening on port 8080&quot;</span></a>
<a class="sourceLine" id="cb12-26" data-line-number="26">  Warp.run <span class="dv">8080</span> <span class="fu">$</span> serve api (server db)</a>
<a class="sourceLine" id="cb12-27" data-line-number="27"></a>
<a class="sourceLine" id="cb12-28" data-line-number="28"><span class="kw">type</span> <span class="dt">API</span></a>
<a class="sourceLine" id="cb12-29" data-line-number="29">    <span class="fu">=</span> <span class="dt">Get</span> <span class="ch">&#39;[HTML &quot;index.html&quot;] Object</span></a>
<a class="sourceLine" id="cb12-30" data-line-number="30"> <span class="fu">:&lt;|&gt;</span> <span class="st">&quot;static&quot;</span> <span class="fu">:&gt;</span> <span class="dt">Raw</span></a>
<a class="sourceLine" id="cb12-31" data-line-number="31"> <span class="fu">:&lt;|&gt;</span> <span class="dt">Todo.CRUD</span></a>
<a class="sourceLine" id="cb12-32" data-line-number="32"></a>
<a class="sourceLine" id="cb12-33" data-line-number="33"><span class="ot">api ::</span> <span class="dt">Proxy</span> <span class="dt">API</span></a>
<a class="sourceLine" id="cb12-34" data-line-number="34">api <span class="fu">=</span> <span class="dt">Proxy</span></a>
<a class="sourceLine" id="cb12-35" data-line-number="35"></a>
<a class="sourceLine" id="cb12-36" data-line-number="36"><span class="ot">server ::</span> <span class="dt">TVar</span> (<span class="dt">Int</span>, <span class="dt">IntMap</span> <span class="dt">Todo</span>) <span class="ot">-&gt;</span> <span class="dt">Server</span> <span class="dt">API</span></a>
<a class="sourceLine" id="cb12-37" data-line-number="37">server db <span class="fu">=</span> index</a>
<a class="sourceLine" id="cb12-38" data-line-number="38">     <span class="fu">:&lt;|&gt;</span> serveDirectoryFileServer <span class="st">&quot;static&quot;</span></a>
<a class="sourceLine" id="cb12-39" data-line-number="39">     <span class="fu">:&lt;|&gt;</span> getTodos</a>
<a class="sourceLine" id="cb12-40" data-line-number="40">     <span class="fu">:&lt;|&gt;</span> postTodo</a>
<a class="sourceLine" id="cb12-41" data-line-number="41">     <span class="fu">:&lt;|&gt;</span> putTodoId</a>
<a class="sourceLine" id="cb12-42" data-line-number="42">     <span class="fu">:&lt;|&gt;</span> deleteTodoId</a>
<a class="sourceLine" id="cb12-43" data-line-number="43">  <span class="kw">where</span></a>
<a class="sourceLine" id="cb12-44" data-line-number="44">    index <span class="fu">=</span> pure mempty</a>
<a class="sourceLine" id="cb12-45" data-line-number="45">    getTodos <span class="fu">=</span> liftIO <span class="fu">$</span> IntMap.elems <span class="fu">.</span> snd <span class="fu">&lt;$&gt;</span> atomically (readTVar db)</a>
<a class="sourceLine" id="cb12-46" data-line-number="46">    postTodo todo <span class="fu">=</span> liftIO <span class="fu">.</span> atomically <span class="fu">$</span> <span class="kw">do</span></a>
<a class="sourceLine" id="cb12-47" data-line-number="47">      (maxId, m) <span class="ot">&lt;-</span> readTVar db</a>
<a class="sourceLine" id="cb12-48" data-line-number="48">      <span class="kw">let</span></a>
<a class="sourceLine" id="cb12-49" data-line-number="49">        newId <span class="fu">=</span> maxId <span class="fu">+</span> <span class="dv">1</span></a>
<a class="sourceLine" id="cb12-50" data-line-number="50">        newTodo <span class="fu">=</span> todo { todoId <span class="fu">=</span> newId }</a>
<a class="sourceLine" id="cb12-51" data-line-number="51">      writeTVar db (newId, IntMap.insert newId newTodo m)</a>
<a class="sourceLine" id="cb12-52" data-line-number="52">      pure newTodo</a>
<a class="sourceLine" id="cb12-53" data-line-number="53">    putTodoId tid todo <span class="fu">=</span></a>
<a class="sourceLine" id="cb12-54" data-line-number="54">      liftIO <span class="fu">.</span> atomically <span class="fu">.</span> modifyTVar db <span class="fu">.</span> second <span class="fu">$</span> IntMap.insert tid todo</a>
<a class="sourceLine" id="cb12-55" data-line-number="55">    deleteTodoId tid   <span class="fu">=</span></a>
<a class="sourceLine" id="cb12-56" data-line-number="56">      liftIO <span class="fu">.</span> atomically <span class="fu">.</span> modifyTVar db <span class="fu">.</span> second <span class="fu">$</span> IntMap.delete tid</a>
<a class="sourceLine" id="cb12-57" data-line-number="57"></a>
<a class="sourceLine" id="cb12-58" data-line-number="58"><span class="ot">initTodoList ::</span> [(<span class="dt">Int</span>, <span class="dt">Todo</span>)]</a>
<a class="sourceLine" id="cb12-59" data-line-number="59">initTodoList <span class="fu">=</span></a>
<a class="sourceLine" id="cb12-60" data-line-number="60">  [ (<span class="dv">1</span>, <span class="dt">Todo</span> <span class="dv">1</span> <span class="st">&quot;アドベントカレンダーを書く&quot;</span> <span class="dt">True</span>)</a>
<a class="sourceLine" id="cb12-61" data-line-number="61">  , (<span class="dv">2</span>, <span class="dt">Todo</span> <span class="dv">2</span> <span class="st">&quot;Haskellで仕事する&quot;</span> <span class="dt">False</span>)</a>
<a class="sourceLine" id="cb12-62" data-line-number="62">  , (<span class="dv">3</span>, <span class="dt">Todo</span> <span class="dv">3</span> <span class="st">&quot;寝る&quot;</span> <span class="dt">False</span>)</a>
<a class="sourceLine" id="cb12-63" data-line-number="63">  ]</a></code></pre></div>
<p>キモなのは <code>server</code> 関数のところ． <code>getTodos</code> や <code>deleteTodoId</code> などの補助関数が，<code>src/Todo.hs</code> で定義した <code>CRUD</code> 型に対応しているのが分かるだろう．</p>
<p><code>API</code> 型は <code>CRUD</code> 型に <code>index.html</code> 用のパスと静的ファイル用のパス <code>static</code> を追加しただけだ． ちなみに，<code>TVar</code> 型とか <code>atomically</code> 関数とかは，並列処理の Software Transactional Memory という機能のためのモノです．</p>
<h2 id="section"></h2>
<p><code>stack build</code> したのち，<code>stack exec server</code> とすると API サーバーを起動できる．</p>
<pre><code>$ stack exec server
Listening on port 8080</code></pre>
<p>実際に curl でアクセスしてみる．</p>
<pre><code>$ curl http://localhost:8080/todos
[{&quot;done&quot;:true,&quot;todoId&quot;:1,&quot;title&quot;:&quot;アドベントカレンダーを書く&quot;},{&quot;done&quot;:false,&quot;todoId&quot;:2,&quot;title&quot;:&quot;Haskellで仕事する&quot;},{&quot;done&quot;:false,&quot;todoId&quot;:3,&quot;title&quot;:&quot;寝る&quot;}]</code></pre>
<h3 id="elm-にバトンタッチ">Elm にバトンタッチ</h3>
<p>Haskell の話ばっかりですいません… ここからはお待ちかねの Elm です．</p>
<h4 id="の前に準備">の前に準備</h4>
<p>Elm で HTTP リクエストを送るには <code>Http.request</code> を使うのが一般的だと思う． それで <code>http://localhost:8080/todos</code> を叩けば一応 ToDo タスクのリストは手に入る． しかし，せっかく自分で API を定義したなら，そのクライアントも自動で生成したいじゃない．</p>
<p>そこで使うのが <a href="https://hackage.haskell.org/package/servant-elm">servant-elm</a> パッケージ！ (あれ，また Haskell の話に戻ってる？)</p>
<h2 id="section-1"></h2>
<p>servant-elm と <a href="https://hackage.haskell.org/package/elm-export">elm-export</a> というパッケージを使うと</p>
<ul>
<li>Haskell の型から Elm の型の生成</li>
<li>生成した Elm の型のための JSON デコーダー・エンコーダーの生成</li>
<li>Servant の API 型から Elm のためのクライアントを生成</li>
</ul>
<p>してくれる． すごいね！</p>
<p>(ただし，<a href="https://github.com/krisajenkins/elm-export#status">全ての Haskell の型を Elm の型に変換できるわけではない…</a>)</p>
<h2 id="section-2"></h2>
<p>まずは Elm の型に変換できるように，<code>src/Todo.hs</code> に以下の行を書き加える．</p>
<div class="sourceCode" id="cb15"><pre class="sourceCode haskell"><code class="sourceCode haskell"><a class="sourceLine" id="cb15-1" data-line-number="1"><span class="kw">instance</span> <span class="dt">ToJSON</span> <span class="dt">Todo</span></a>
<a class="sourceLine" id="cb15-2" data-line-number="2"><span class="kw">instance</span> <span class="dt">FromForm</span> <span class="dt">Todo</span></a>
<a class="sourceLine" id="cb15-3" data-line-number="3"><span class="kw">instance</span> <span class="dt">ElmType</span> <span class="dt">Todo</span>  <span class="co">-- コレ</span></a></code></pre></div>
<p>そして，<code>app/Generate.hs</code> というファイルを作る．</p>
<div class="sourceCode" id="cb16"><pre class="sourceCode haskell"><code class="sourceCode haskell"><a class="sourceLine" id="cb16-1" data-line-number="1"><span class="ot">{-# LANGUAGE OverloadedStrings #-}</span></a>
<a class="sourceLine" id="cb16-2" data-line-number="2"></a>
<a class="sourceLine" id="cb16-3" data-line-number="3"><span class="kw">module</span> <span class="dt">Main</span> <span class="kw">where</span></a>
<a class="sourceLine" id="cb16-4" data-line-number="4"></a>
<a class="sourceLine" id="cb16-5" data-line-number="5"><span class="kw">import</span>           <span class="dt">Data.Proxy</span></a>
<a class="sourceLine" id="cb16-6" data-line-number="6"><span class="kw">import</span>           <span class="dt">Elm</span></a>
<a class="sourceLine" id="cb16-7" data-line-number="7"><span class="kw">import</span>           <span class="dt">Servant.Elm</span></a>
<a class="sourceLine" id="cb16-8" data-line-number="8"><span class="kw">import</span>           <span class="dt">Shelly</span>      (mkdir_p, shelly)</a>
<a class="sourceLine" id="cb16-9" data-line-number="9"><span class="kw">import</span>           <span class="dt">Todo</span>        (<span class="dt">CRUD</span>, <span class="dt">Todo</span>)</a>
<a class="sourceLine" id="cb16-10" data-line-number="10"></a>
<a class="sourceLine" id="cb16-11" data-line-number="11"></a>
<a class="sourceLine" id="cb16-12" data-line-number="12"><span class="ot">elmOpts ::</span> <span class="dt">ElmOptions</span></a>
<a class="sourceLine" id="cb16-13" data-line-number="13">elmOpts <span class="fu">=</span></a>
<a class="sourceLine" id="cb16-14" data-line-number="14">  defElmOptions</a>
<a class="sourceLine" id="cb16-15" data-line-number="15">    { urlPrefix <span class="fu">=</span> <span class="dt">Static</span> <span class="st">&quot;http://localhost:8080&quot;</span> }</a>
<a class="sourceLine" id="cb16-16" data-line-number="16"></a>
<a class="sourceLine" id="cb16-17" data-line-number="17"><span class="ot">spec ::</span> <span class="dt">Spec</span></a>
<a class="sourceLine" id="cb16-18" data-line-number="18">spec <span class="fu">=</span> <span class="dt">Spec</span> [<span class="st">&quot;Generated&quot;</span>, <span class="st">&quot;TodoAPI&quot;</span>]</a>
<a class="sourceLine" id="cb16-19" data-line-number="19">            (defElmImports</a>
<a class="sourceLine" id="cb16-20" data-line-number="20">             <span class="fu">:</span> toElmTypeSource    (<span class="dt">Proxy</span><span class="ot"> ::</span> <span class="dt">Proxy</span> <span class="dt">Todo</span>)</a>
<a class="sourceLine" id="cb16-21" data-line-number="21">             <span class="fu">:</span> toElmDecoderSource (<span class="dt">Proxy</span><span class="ot"> ::</span> <span class="dt">Proxy</span> <span class="dt">Todo</span>)</a>
<a class="sourceLine" id="cb16-22" data-line-number="22">             <span class="fu">:</span> toElmEncoderSource (<span class="dt">Proxy</span><span class="ot"> ::</span> <span class="dt">Proxy</span> <span class="dt">Todo</span>)</a>
<a class="sourceLine" id="cb16-23" data-line-number="23">             <span class="fu">:</span> generateElmForAPIWith elmOpts  (<span class="dt">Proxy</span><span class="ot"> ::</span> <span class="dt">Proxy</span> <span class="dt">CRUD</span>))</a>
<a class="sourceLine" id="cb16-24" data-line-number="24"></a>
<a class="sourceLine" id="cb16-25" data-line-number="25"><span class="ot">main ::</span> <span class="dt">IO</span> ()</a>
<a class="sourceLine" id="cb16-26" data-line-number="26">main <span class="fu">=</span> <span class="kw">do</span></a>
<a class="sourceLine" id="cb16-27" data-line-number="27">  shelly <span class="fu">$</span> mkdir_p <span class="st">&quot;elm-src/Generated&quot;</span></a>
<a class="sourceLine" id="cb16-28" data-line-number="28">  specsToDir [spec] <span class="st">&quot;elm-src&quot;</span></a></code></pre></div>
<p><a href="https://hackage.haskell.org/package/shelly">Shelly</a> というのは Hasksell 上で UNIX コマンドみたいのを叩くためのパッケージ．</p>
<p><code>spec</code> 関数の <code>Spec [&quot;Generated&quot;, &quot;TodoAPI&quot;]</code> で <code>Generated.TodoAPI</code> というモジュールを生成することを指定している． <code>main</code> 関数の <code>specsToDir [spec] &quot;elm-src&quot;</code> で <code>Generated.TodoAPI</code> モジュールを <code>elm-src</code> ディレクトリ以下に生成する． 結果として <code>elm-src/Generated/TodoAPI.elm</code> ファイルが生成される．</p>
<p>これを <code>package.yaml</code> にテストとして設定することで，<code>stack test</code> で生成してくれるようになる．</p>
<div class="sourceCode" id="cb17"><pre class="sourceCode yaml"><code class="sourceCode yaml"><a class="sourceLine" id="cb17-1" data-line-number="1"><span class="co"># package.yaml</span></a>
<a class="sourceLine" id="cb17-2" data-line-number="2"></a>
<a class="sourceLine" id="cb17-3" data-line-number="3"><span class="fu">tests:</span></a>
<a class="sourceLine" id="cb17-4" data-line-number="4">  <span class="fu">generate:</span></a>
<a class="sourceLine" id="cb17-5" data-line-number="5">    <span class="fu">source-dirs:</span><span class="at"> app</span></a>
<a class="sourceLine" id="cb17-6" data-line-number="6">    <span class="fu">main:</span><span class="at"> Generate.hs</span></a>
<a class="sourceLine" id="cb17-7" data-line-number="7">    <span class="fu">dependencies:</span></a>
<a class="sourceLine" id="cb17-8" data-line-number="8">      <span class="kw">-</span> haskell-and-elm</a>
<a class="sourceLine" id="cb17-9" data-line-number="9">      <span class="kw">-</span> shelly</a>
<a class="sourceLine" id="cb17-10" data-line-number="10">    <span class="fu">other-modules:</span><span class="at"> </span><span class="kw">[]</span></a></code></pre></div>
<pre><code>$ stack test
haskell-and-elm-0.1.0.0: test (suite: generate)

Writing: elm-src/Generated/TodoAPI.elm</code></pre>
<p>生成されたファイルは<a href="https://github.com/matsubara0507/haskell-and-elm/blob/unuse-extensible/elm-src/Generated/TodoAPI.elm">コチラ</a>(長いので載せない)．</p>
<h4 id="elm-の準備">Elm の準備</h4>
<p>さていよいよ Elm を手書きしよう． <code>elm-src/Generated/TodoAPI.elm</code> というファイルを生成していたので，<code>elm-src/Main.elm</code> というパスで <code>Main</code> ファイルを書く． 以下のような <code>elm-package.json</code> を用意する．</p>
<div class="sourceCode" id="cb19"><pre class="sourceCode json"><code class="sourceCode json"><a class="sourceLine" id="cb19-1" data-line-number="1"><span class="fu">{</span></a>
<a class="sourceLine" id="cb19-2" data-line-number="2">    <span class="dt">&quot;version&quot;</span><span class="fu">:</span> <span class="st">&quot;0.1.0&quot;</span><span class="fu">,</span></a>
<a class="sourceLine" id="cb19-3" data-line-number="3">    <span class="dt">&quot;summary&quot;</span><span class="fu">:</span> <span class="st">&quot;Sample for haskell and elm&quot;</span><span class="fu">,</span></a>
<a class="sourceLine" id="cb19-4" data-line-number="4">    <span class="dt">&quot;repository&quot;</span><span class="fu">:</span> <span class="st">&quot;https://github.com/yourname/haskell-and-elm.git&quot;</span><span class="fu">,</span></a>
<a class="sourceLine" id="cb19-5" data-line-number="5">    <span class="dt">&quot;license&quot;</span><span class="fu">:</span> <span class="st">&quot;MIT&quot;</span><span class="fu">,</span></a>
<a class="sourceLine" id="cb19-6" data-line-number="6">    <span class="dt">&quot;source-directories&quot;</span><span class="fu">:</span> <span class="ot">[</span></a>
<a class="sourceLine" id="cb19-7" data-line-number="7">        <span class="st">&quot;elm-src&quot;</span></a>
<a class="sourceLine" id="cb19-8" data-line-number="8">    <span class="ot">]</span><span class="fu">,</span></a>
<a class="sourceLine" id="cb19-9" data-line-number="9">    <span class="dt">&quot;exposed-modules&quot;</span><span class="fu">:</span> <span class="ot">[]</span><span class="fu">,</span></a>
<a class="sourceLine" id="cb19-10" data-line-number="10">    <span class="dt">&quot;dependencies&quot;</span><span class="fu">:</span> <span class="fu">{</span></a>
<a class="sourceLine" id="cb19-11" data-line-number="11">        <span class="dt">&quot;elm-lang/core&quot;</span><span class="fu">:</span> <span class="st">&quot;5.1.1 &lt;= v &lt; 6.0.0&quot;</span><span class="fu">,</span></a>
<a class="sourceLine" id="cb19-12" data-line-number="12">        <span class="dt">&quot;elm-lang/html&quot;</span><span class="fu">:</span> <span class="st">&quot;2.0.0 &lt;= v &lt; 3.0.0&quot;</span><span class="fu">,</span></a>
<a class="sourceLine" id="cb19-13" data-line-number="13">        <span class="dt">&quot;elm-lang/http&quot;</span><span class="fu">:</span> <span class="st">&quot;1.0.0 &lt;= v &lt; 2.0.0&quot;</span><span class="fu">,</span></a>
<a class="sourceLine" id="cb19-14" data-line-number="14">        <span class="dt">&quot;elm-lang/navigation&quot;</span><span class="fu">:</span> <span class="st">&quot;2.0.0 &lt;= v &lt; 3.0.0&quot;</span><span class="fu">,</span></a>
<a class="sourceLine" id="cb19-15" data-line-number="15">        <span class="dt">&quot;elm-community/json-extra&quot;</span><span class="fu">:</span> <span class="st">&quot;2.0.0 &lt;= v &lt; 3.0.0&quot;</span><span class="fu">,</span></a>
<a class="sourceLine" id="cb19-16" data-line-number="16">        <span class="dt">&quot;elm-community/list-extra&quot;</span><span class="fu">:</span> <span class="st">&quot;6.0.0 &lt;= v &lt; 7.0.0&quot;</span><span class="fu">,</span></a>
<a class="sourceLine" id="cb19-17" data-line-number="17">        <span class="dt">&quot;Bogdanp/elm-route&quot;</span><span class="fu">:</span> <span class="st">&quot;4.0.0 &lt;= v &lt; 5.0.0&quot;</span><span class="fu">,</span></a>
<a class="sourceLine" id="cb19-18" data-line-number="18">        <span class="dt">&quot;krisajenkins/remotedata&quot;</span><span class="fu">:</span> <span class="st">&quot;4.3.0 &lt;= v &lt; 5.0.0&quot;</span><span class="fu">,</span></a>
<a class="sourceLine" id="cb19-19" data-line-number="19">        <span class="dt">&quot;NoRedInk/elm-decode-pipeline&quot;</span><span class="fu">:</span> <span class="st">&quot;3.0.0 &lt;= v &lt; 4.0.0&quot;</span></a>
<a class="sourceLine" id="cb19-20" data-line-number="20">    <span class="fu">},</span></a>
<a class="sourceLine" id="cb19-21" data-line-number="21">    <span class="dt">&quot;elm-version&quot;</span><span class="fu">:</span> <span class="st">&quot;0.18.0 &lt;= v &lt; 0.19.0&quot;</span></a>
<a class="sourceLine" id="cb19-22" data-line-number="22"><span class="fu">}</span></a></code></pre></div>
<h4 id="モデルとメッセージの型">モデルとメッセージの型</h4>
<p>まずはモデル(フロントが持つべき状態)から．</p>
<p>あまり Elm の流儀を知らないが，HTTPリクエストのように外部から取得するデータは，<a href="http://package.elm-lang.org/packages/krisajenkins/remotedata/latest">remotedata</a> パッケージの <a href="http://package.elm-lang.org/packages/krisajenkins/remotedata/4.3.3/RemoteData#RemoteData"><code>RemoteData</code></a> 型のようなデータ構造を使う(？)</p>
<div class="sourceCode" id="cb20"><pre class="sourceCode haskell"><code class="sourceCode haskell"><a class="sourceLine" id="cb20-1" data-line-number="1"><span class="kw">module</span> <span class="dt">Main</span> exposing (<span class="fu">..</span>)</a>
<a class="sourceLine" id="cb20-2" data-line-number="2"></a>
<a class="sourceLine" id="cb20-3" data-line-number="3"><span class="kw">import</span> <span class="dt">Generated.TodoAPI</span> <span class="kw">as</span> <span class="dt">API</span> exposing (<span class="dt">Todo</span>)</a>
<a class="sourceLine" id="cb20-4" data-line-number="4"><span class="kw">import</span> <span class="dt">RemoteData</span> exposing (<span class="dt">RemoteData</span>(..))</a>
<a class="sourceLine" id="cb20-5" data-line-number="5"></a>
<a class="sourceLine" id="cb20-6" data-line-number="6"><span class="kw">type</span> alias <span class="dt">Model</span> <span class="fu">=</span></a>
<a class="sourceLine" id="cb20-7" data-line-number="7">  { todos <span class="fu">:</span> <span class="dt">RemoteData</span> <span class="dt">String</span> (<span class="dt">List</span> <span class="dt">API.Todo</span>)</a>
<a class="sourceLine" id="cb20-8" data-line-number="8">  , title <span class="fu">:</span> <span class="dt">String</span></a>
<a class="sourceLine" id="cb20-9" data-line-number="9">  }</a></code></pre></div>
<p><code>title</code> フィールドは ToDo タスクを追加するときに使うテキストボックスの値だ．</p>
<p>次に <code>Msg</code> を考える． <code>Msg</code> はフロントで起こり得る状態変化のパターンを考えればよい(んだよね？)．</p>
<p>今回は以下の4つがしたかった．</p>
<ol type="1">
<li>ToDo タスクを全て取得</li>
<li>ToDo タスクの追加(テキストボックス)</li>
<li>ToDo タスクを完了する(チェックボックス)</li>
<li>ToDo タスクの削除(ボタンを押す)</li>
</ol>
<p>(2)は更に細分化されて，「テキストボックスの入力」と「追加ボタンを押す」がある． また，追加や削除をした後に，(あんまり賢くないが)画面をリロードして再度 ToDo タスクを取得してくるべきだろう．</p>
<p>以上から以下のような <code>Msg</code> を定義すればよい(全部で6種類のパターンがある)．</p>
<div class="sourceCode" id="cb21"><pre class="sourceCode haskell"><code class="sourceCode haskell"><a class="sourceLine" id="cb21-1" data-line-number="1"><span class="kw">type</span> <span class="dt">Msg</span></a>
<a class="sourceLine" id="cb21-2" data-line-number="2">    <span class="fu">=</span> <span class="dt">FetchTodos</span> (<span class="dt">Result</span> <span class="dt">Http.Error</span> (<span class="dt">List</span> <span class="dt">API.Todo</span>))</a>
<a class="sourceLine" id="cb21-3" data-line-number="3">    <span class="fu">|</span> <span class="dt">Reload</span></a>
<a class="sourceLine" id="cb21-4" data-line-number="4">    <span class="fu">|</span> <span class="dt">ChangeTodo</span> <span class="dt">Todo</span></a>
<a class="sourceLine" id="cb21-5" data-line-number="5">    <span class="fu">|</span> <span class="dt">Title</span> <span class="dt">String</span></a>
<a class="sourceLine" id="cb21-6" data-line-number="6">    <span class="fu">|</span> <span class="dt">Push</span> <span class="dt">Button</span></a>
<a class="sourceLine" id="cb21-7" data-line-number="7"></a>
<a class="sourceLine" id="cb21-8" data-line-number="8"><span class="kw">type</span> <span class="dt">Button</span></a>
<a class="sourceLine" id="cb21-9" data-line-number="9">    <span class="fu">=</span> <span class="dt">Post</span> <span class="dt">String</span></a>
<a class="sourceLine" id="cb21-10" data-line-number="10">    <span class="fu">|</span> <span class="dt">Delete</span> <span class="dt">Int</span></a></code></pre></div>
<h4 id="トップダウンに書いていく">トップダウンに書いていく</h4>
<p>型はできたので，あとはトップダウンに作っていこう．</p>
<div class="sourceCode" id="cb22"><pre class="sourceCode haskell"><code class="sourceCode haskell"><a class="sourceLine" id="cb22-1" data-line-number="1">main <span class="fu">:</span> <span class="dt">Program</span> <span class="dt">Never</span> <span class="dt">Model</span> <span class="dt">Msg</span></a>
<a class="sourceLine" id="cb22-2" data-line-number="2">main <span class="fu">=</span></a>
<a class="sourceLine" id="cb22-3" data-line-number="3">    Html.program</a>
<a class="sourceLine" id="cb22-4" data-line-number="4">        { init <span class="fu">=</span> init model</a>
<a class="sourceLine" id="cb22-5" data-line-number="5">        , view <span class="fu">=</span> view</a>
<a class="sourceLine" id="cb22-6" data-line-number="6">        , update <span class="fu">=</span> update</a>
<a class="sourceLine" id="cb22-7" data-line-number="7">        , subscriptions <span class="fu">=</span> \_ <span class="ot">-&gt;</span> Sub.none</a>
<a class="sourceLine" id="cb22-8" data-line-number="8">        }</a>
<a class="sourceLine" id="cb22-9" data-line-number="9"></a>
<a class="sourceLine" id="cb22-10" data-line-number="10">model <span class="fu">:</span> <span class="dt">Model</span></a>
<a class="sourceLine" id="cb22-11" data-line-number="11">model <span class="fu">=</span> undefined ()</a>
<a class="sourceLine" id="cb22-12" data-line-number="12"></a>
<a class="sourceLine" id="cb22-13" data-line-number="13">init <span class="fu">:</span> <span class="dt">Model</span> <span class="ot">-&gt;</span> ( <span class="dt">Model</span>, <span class="dt">Cmd</span> <span class="dt">Msg</span> )</a>
<a class="sourceLine" id="cb22-14" data-line-number="14">init model <span class="fu">=</span> undefined ()</a>
<a class="sourceLine" id="cb22-15" data-line-number="15"></a>
<a class="sourceLine" id="cb22-16" data-line-number="16">view <span class="fu">:</span> <span class="dt">Model</span> <span class="ot">-&gt;</span> <span class="dt">Html</span> <span class="dt">Msg</span></a>
<a class="sourceLine" id="cb22-17" data-line-number="17">view model <span class="fu">=</span> undefined ()</a>
<a class="sourceLine" id="cb22-18" data-line-number="18"></a>
<a class="sourceLine" id="cb22-19" data-line-number="19">update <span class="fu">:</span> <span class="dt">Msg</span> <span class="ot">-&gt;</span> <span class="dt">Model</span> <span class="ot">-&gt;</span> ( <span class="dt">Model</span>, <span class="dt">Cmd</span> <span class="dt">Msg</span> )</a>
<a class="sourceLine" id="cb22-20" data-line-number="20">update msg model <span class="fu">=</span> undefined ()</a>
<a class="sourceLine" id="cb22-21" data-line-number="21"></a>
<a class="sourceLine" id="cb22-22" data-line-number="22">undefined <span class="fu">:</span> () <span class="ot">-&gt;</span> a</a>
<a class="sourceLine" id="cb22-23" data-line-number="23">undefined _ <span class="fu">=</span> Debug.crash <span class="st">&quot;undefined...&quot;</span></a></code></pre></div>
<p>まずは <code>main</code> 関数だけ書いた． Haskell でいう <code>undefined</code> という値が Elm では見つからなかったので自分で <code>undefined</code> という関数を定義した(Elm は正格評価なので関数にして遅延させないといけない)． (<code>undefind</code> が標準にない事から)Elm ではあまりなじみが無いのかもしれないが，Haskell (というか関数型プログラミング)ではまずは型だけ書いてトップから順に実装を書き加えていくのがセオリー(だよね？)．</p>
<p>まずはこれでビルドしてみる．</p>
<pre><code>$ elm make elm-src/Main.elm --output=static/main.js
Success! Compiled 1 module.
Successfully generated static/main.js</code></pre>
<p><code>index.html</code> を書いてなかったので適当に書いておく．</p>
<div class="sourceCode" id="cb24"><pre class="sourceCode html"><code class="sourceCode html"><a class="sourceLine" id="cb24-1" data-line-number="1"><span class="kw">&lt;head&gt;</span></a>
<a class="sourceLine" id="cb24-2" data-line-number="2">  <span class="kw">&lt;link</span><span class="ot"> rel=</span><span class="st">&quot;stylesheet&quot;</span><span class="ot"> type=</span><span class="st">&quot;text/css&quot;</span><span class="ot"> href=</span><span class="st">&quot;https://cdnjs.cloudflare.com/ajax/libs/Primer/10.0.0-rc.21/build.css&quot;</span><span class="ot"> media=</span><span class="st">&quot;all&quot;</span><span class="kw">&gt;</span></a>
<a class="sourceLine" id="cb24-3" data-line-number="3">  <span class="kw">&lt;link</span><span class="ot"> rel=</span><span class="st">&quot;stylesheet&quot;</span><span class="ot"> type=</span><span class="st">&quot;text/css&quot;</span><span class="ot"> href=</span><span class="st">&quot;https://cdnjs.cloudflare.com/ajax/libs/font-awesome/4.7.0/css/font-awesome.min.css&quot;</span><span class="ot"> media=</span><span class="st">&quot;all&quot;</span><span class="kw">&gt;</span></a>
<a class="sourceLine" id="cb24-4" data-line-number="4"><span class="kw">&lt;/head&gt;</span></a>
<a class="sourceLine" id="cb24-5" data-line-number="5"><span class="kw">&lt;div</span><span class="ot"> id=</span><span class="st">&quot;main&quot;</span><span class="kw">&gt;&lt;/div&gt;</span></a>
<a class="sourceLine" id="cb24-6" data-line-number="6"><span class="kw">&lt;script</span><span class="ot"> src=</span><span class="st">&quot;static/main.js&quot;</span><span class="kw">&gt;&lt;/script&gt;</span></a>
<a class="sourceLine" id="cb24-7" data-line-number="7"><span class="kw">&lt;script&gt;</span></a>
<a class="sourceLine" id="cb24-8" data-line-number="8">  <span class="kw">var</span> node <span class="op">=</span> <span class="va">document</span>.<span class="at">getElementById</span>(<span class="st">&#39;main&#39;</span>)<span class="op">;</span></a>
<a class="sourceLine" id="cb24-9" data-line-number="9">  <span class="kw">var</span> app <span class="op">=</span> <span class="va">Elm</span>.<span class="va">Main</span>.<span class="at">embed</span>(node)<span class="op">;</span></a>
<a class="sourceLine" id="cb24-10" data-line-number="10"><span class="kw">&lt;/script&gt;</span></a></code></pre></div>
<p>もう一度サーバーを立てて <code>localhost:8080</code> にアクセスしてみる． もちろん，真っ白で <code>Uncaught Error: Ran into a Debug.crash in module Main on line 68</code> というエラーメッセージが出るだけなんだが(笑)</p>
<h2 id="section-3"></h2>
<p><code>model</code> 式はただの初期値で，<code>init</code> 関数はただの初期化関数だ．</p>
<div class="sourceCode" id="cb25"><pre class="sourceCode haskell"><code class="sourceCode haskell"><a class="sourceLine" id="cb25-1" data-line-number="1">model <span class="fu">:</span> <span class="dt">Model</span></a>
<a class="sourceLine" id="cb25-2" data-line-number="2">model <span class="fu">=</span></a>
<a class="sourceLine" id="cb25-3" data-line-number="3">    { todos <span class="fu">=</span> <span class="dt">NotAsked</span>, title <span class="fu">=</span> <span class="st">&quot;&quot;</span> }</a>
<a class="sourceLine" id="cb25-4" data-line-number="4"></a>
<a class="sourceLine" id="cb25-5" data-line-number="5">init <span class="fu">:</span> <span class="dt">Model</span> <span class="ot">-&gt;</span> ( <span class="dt">Model</span>, <span class="dt">Cmd</span> <span class="dt">Msg</span> )</a>
<a class="sourceLine" id="cb25-6" data-line-number="6">init model <span class="fu">=</span></a>
<a class="sourceLine" id="cb25-7" data-line-number="7">    ( model, fetchTodos )</a>
<a class="sourceLine" id="cb25-8" data-line-number="8"></a>
<a class="sourceLine" id="cb25-9" data-line-number="9">fetchTodos <span class="fu">:</span> <span class="dt">Cmd</span> <span class="dt">Msg</span></a>
<a class="sourceLine" id="cb25-10" data-line-number="10">fetchTodos <span class="fu">=</span></a>
<a class="sourceLine" id="cb25-11" data-line-number="11">    Http.send <span class="dt">FetchTodos</span> API.getTodos</a></code></pre></div>
<p>まず最初に ToDo タスクを全て取得してくる必要があるので，<code>http://localhost:8080/todos</code> を叩く HTTP リクエストを呼んでいる．</p>
<p><code>view</code> 関数は泥臭くなるので割愛(<a href="https://github.com/matsubara0507/haskell-and-elm/blob/unuse-extensible/elm-src/Main.elm#L50">コードを見てね</a>)．</p>
<p><code>update</code> 関数は次のようになる</p>
<div class="sourceCode" id="cb26"><pre class="sourceCode haskell"><code class="sourceCode haskell"><a class="sourceLine" id="cb26-1" data-line-number="1">update <span class="fu">:</span> <span class="dt">Msg</span> <span class="ot">-&gt;</span> <span class="dt">Model</span> <span class="ot">-&gt;</span> ( <span class="dt">Model</span>, <span class="dt">Cmd</span> <span class="dt">Msg</span> )</a>
<a class="sourceLine" id="cb26-2" data-line-number="2">update msg model <span class="fu">=</span></a>
<a class="sourceLine" id="cb26-3" data-line-number="3">  <span class="kw">case</span> msg <span class="kw">of</span></a>
<a class="sourceLine" id="cb26-4" data-line-number="4">    <span class="dt">FetchTodos</span> (<span class="dt">Ok</span> todos) <span class="ot">-&gt;</span></a>
<a class="sourceLine" id="cb26-5" data-line-number="5">      ( { model <span class="fu">|</span> todos <span class="fu">=</span> <span class="dt">Success</span> todos }, Cmd.none )</a>
<a class="sourceLine" id="cb26-6" data-line-number="6">    <span class="dt">FetchTodos</span> (<span class="dt">Err</span> _) <span class="ot">-&gt;</span></a>
<a class="sourceLine" id="cb26-7" data-line-number="7">      ( { model <span class="fu">|</span> todos <span class="fu">=</span> <span class="dt">Failure</span> <span class="st">&quot;Something went wrong..&quot;</span> }, Cmd.none )</a>
<a class="sourceLine" id="cb26-8" data-line-number="8">    <span class="dt">ChangeTodo</span> todo <span class="ot">-&gt;</span></a>
<a class="sourceLine" id="cb26-9" data-line-number="9">      ( model, changeTodo todo )</a>
<a class="sourceLine" id="cb26-10" data-line-number="10">    <span class="dt">Title</span> title <span class="ot">-&gt;</span></a>
<a class="sourceLine" id="cb26-11" data-line-number="11">      ( { model <span class="fu">|</span> title <span class="fu">=</span> title }, Cmd.none )</a>
<a class="sourceLine" id="cb26-12" data-line-number="12">    <span class="dt">Push</span> (<span class="dt">Post</span> title) <span class="ot">-&gt;</span></a>
<a class="sourceLine" id="cb26-13" data-line-number="13">      ( model, addTodo <span class="fu">&lt;|</span> <span class="dt">Todo</span> <span class="dv">0</span> title <span class="dt">False</span> )</a>
<a class="sourceLine" id="cb26-14" data-line-number="14">    <span class="dt">Push</span> (<span class="dt">Delete</span> todoId) <span class="ot">-&gt;</span></a>
<a class="sourceLine" id="cb26-15" data-line-number="15">      ( model, removeTodo todoId )</a>
<a class="sourceLine" id="cb26-16" data-line-number="16">    <span class="dt">Reload</span> <span class="ot">-&gt;</span></a>
<a class="sourceLine" id="cb26-17" data-line-number="17">      ( model, fetchTodos )</a>
<a class="sourceLine" id="cb26-18" data-line-number="18"></a>
<a class="sourceLine" id="cb26-19" data-line-number="19">changeTodo <span class="fu">:</span> <span class="dt">Todo</span> <span class="ot">-&gt;</span> <span class="dt">Cmd</span> <span class="dt">Msg</span></a>
<a class="sourceLine" id="cb26-20" data-line-number="20">changeTodo todo <span class="fu">=</span></a>
<a class="sourceLine" id="cb26-21" data-line-number="21">  Http.send (always <span class="dt">Reload</span>) (API.putTodosById todo<span class="fu">.</span>todoId todo)</a>
<a class="sourceLine" id="cb26-22" data-line-number="22"></a>
<a class="sourceLine" id="cb26-23" data-line-number="23"></a>
<a class="sourceLine" id="cb26-24" data-line-number="24">addTodo <span class="fu">:</span> <span class="dt">Todo</span> <span class="ot">-&gt;</span> <span class="dt">Cmd</span> <span class="dt">Msg</span></a>
<a class="sourceLine" id="cb26-25" data-line-number="25">addTodo todo <span class="fu">=</span></a>
<a class="sourceLine" id="cb26-26" data-line-number="26">  Http.send (always <span class="dt">Reload</span>) (API.postTodos todo)</a>
<a class="sourceLine" id="cb26-27" data-line-number="27"></a>
<a class="sourceLine" id="cb26-28" data-line-number="28"></a>
<a class="sourceLine" id="cb26-29" data-line-number="29">removeTodo <span class="fu">:</span> <span class="dt">Int</span> <span class="ot">-&gt;</span> <span class="dt">Cmd</span> <span class="dt">Msg</span></a>
<a class="sourceLine" id="cb26-30" data-line-number="30">removeTodo todoId <span class="fu">=</span></a>
<a class="sourceLine" id="cb26-31" data-line-number="31">  Http.send (always <span class="dt">Reload</span>) (API.deleteTodosById todoId)</a></code></pre></div>
<p>各種 HTTP レスポンスのラッパー関数を用意して，対応する <code>Msg</code> で読んでいるだけだ． ただし，GET 以外の HTTP レスポンスが完了したときに，再度 ToDo タスクを読み込むよう <code>always Reload</code> という <code>Msg</code> 生成関数を渡している． ちなみに，<code>Todo</code> 型の <code>todoId</code> はサーバーサイドで勝手に書き換えるので，POST するときは <code>0</code> で良い．</p>
<h2 id="section-4"></h2>
<p>これで完成</p>
<h2 id="実行">実行</h2>
<p><img src="/assets/create-haskell-and-elm/sample.gif" /></p>
<h2 id="おまけ">おまけ</h2>
<p>いちいち，Elm をビルドしたり，Haskell ビルドしたり，サーバー起動したりめんどくさいよね． そこで <code>app/Generate.hs</code> の <code>main</code> 関数に以下を記述して</p>
<div class="sourceCode" id="cb27"><pre class="sourceCode haskell"><code class="sourceCode haskell"><a class="sourceLine" id="cb27-1" data-line-number="1"><span class="ot">main ::</span> <span class="dt">IO</span> ()</a>
<a class="sourceLine" id="cb27-2" data-line-number="2">main <span class="fu">=</span> <span class="kw">do</span></a>
<a class="sourceLine" id="cb27-3" data-line-number="3">  shelly <span class="fu">$</span> mkdir_p <span class="st">&quot;elm-src/Generated&quot;</span></a>
<a class="sourceLine" id="cb27-4" data-line-number="4">  specsToDir [spec] <span class="st">&quot;elm-src&quot;</span></a>
<a class="sourceLine" id="cb27-5" data-line-number="5">  <span class="co">-- ココから</span></a>
<a class="sourceLine" id="cb27-6" data-line-number="6">  shelly <span class="fu">$</span></a>
<a class="sourceLine" id="cb27-7" data-line-number="7">    run_ <span class="st">&quot;elm-make&quot;</span> [<span class="st">&quot;elm-src/Main.elm&quot;</span>, <span class="st">&quot;--output=static/main.js&quot;</span>]</a></code></pre></div>
<p><code>stack test --file-watch</code> と <code>stack exec server</code> を起動しておくと，勝手にどんどん更新される．</p>
<h2 id="おしまい">おしまい</h2>
<p>長くなってしまった． しかもほとんど Haskell のハナシ… Elm のカレンダーなのに…すいません…</p>
  </div>
</div>
</article>
]]></summary>
</entry>
<entry>
    <title>Haskell Backpack 覚え書き</title>
    <link href="https://matsubara0507.github.io/posts/2017-12-12-backpack-memo.html" />
    <id>https://matsubara0507.github.io/posts/2017-12-12-backpack-memo.html</id>
    <published>2017-12-12T00:00:00Z</published>
    <updated>2017-12-12T00:00:00Z</updated>
    <summary type="html"><![CDATA[<article class="post card" itemscope itemtype="http://schema.org/BlogPosting">
 <div class="card-content">
  <header class="post-header">
    <h1 class="post-title" itemprop="name headline">Haskell Backpack 覚え書き</h1>
    <p class="post-meta">
      <time datetime="2017-12-12" itemprop="datePublished">
        Dec 12, 2017
      </time>
      
      
      <div class="tags">
          <i class="fa fa-tags"></i> <a href="/tags/Haskell.html">Haskell</a> <a href="/tags/Backpack.html">Backpack</a>
      </div>
      
    </p>
  </header>

  <div class="post-content" itemprop="articleBody">
    <p><a href="https://qiita.com/advent-calendar/2017/haskell3">Haskell アドベントカレンダー 2017 (その３)</a> の12日目の記事です．</p>
<h2 id="section"></h2>
<p>GHC 8.2 より新しく追加された Backpack というモジュールシステムを知ってますか？ Backpack は個人的にすごい注目してる機能なんですけど，いかんせん日本語ドキュメントが皆無なんで，イロイロ調べたことを書いておこうと思います．</p>
<p>ただ，英語雑魚勢なので勘違いしてる部分もあるかもしれないので，その時は指摘してください 人</p>
<h2 id="section-1"></h2>
<p>基本的には <a href="https://github.com/matsubara0507/awesome-backpack">matsubara0507/awesome-backpack</a> リポジトリにまとめてます(コッチの方が新しいこと書いてあるかも)．</p>
<p>ちなみに，今回の記事は11月の頭に作った以下スライドをベースに書きます．</p>
<iframe src="//www.slideshare.net/slideshow/embed_code/key/nkfPRoekJfs5dl" width="595" height="485" frameborder="0" marginwidth="0" marginheight="0" scrolling="no" style="border:1px solid #CCC; border-width:1px; margin-bottom:5px; max-width: 100%;" allowfullscreen>
</iframe>
<h2 id="注意-実は-backpack-は2つある">注意: 実は Backpack は2つある</h2>
<p>Backpack は何年も前から学術的に研究されていた機能で，その研究過程には少なくとも2段階ありました．</p>
<ol type="1">
<li>Backpack’14:
<ul>
<li>Scott Kilpatrick 氏が<a href="http://plv.mpi-sws.org/backpack/">提案</a>(POPL 2014)</li>
<li>MixIn を利用して弱いモジュール言語に強いモジュール性を組み込む</li>
</ul></li>
<li>Backpack’17:
<ul>
<li>Edward Z. Yang 氏が<a href="https://github.com/ezyang/thesis/releases">提案</a>(彼の博士論文？)</li>
<li>既存の GHC に組み込めるように Backpack’14 をリファクタリング</li>
<li>GHC8.2 や Cabal2.0 に組み込まれたのはコッチ</li>
</ul></li>
</ol>
<p>概念的な解説が多い(と感じた)のは ’14 の方ですが，最終的に GHC に導入されたのは ’17 です． なので，前半は ’14 について説明します． もちろん ’17 は ’14 をベースにしてますが，どこまで概念的な背景まで継承しているかはよくわからなかったので，前半の説明が ’17 にとっては間違っている可能性もあります． すいません(ちゃんと論文を全部読めればいいんだけど…長い….)．</p>
<h2 id="backpack-14">Backpack ’14</h2>
<p>前述したとおり，’14 は Backpack の基本概念の話だけで，実際に GHC には組み込まれていない． なので，「具体的な用途だけくれ」派の人は飛ばして ’17 から読めばいいと思う．</p>
<h2 id="section-2"></h2>
<p>以降は以下のスライドをベースにしている．</p>
<ul>
<li><a href="http://plv.mpi-sws.org/backpack/backpack-popl.pdf">Backpack: Retrofitting Haskell with Interfaces</a></li>
</ul>
<p>何度も言うが，’14 は GHC に導入されてない． 即ち，以下の記法は正式ではないので注意してください．</p>
<h3 id="haskell-のモジュール性は弱い">Haskell のモジュール性は弱い</h3>
<p>そもそも，なんで Backpack という新しいモジュールシステムを導入する必要があるのか． 理由は簡単で，<strong>Haskell のモジュール性は弱い</strong> からだ．</p>
<h4 id="弱いモジュール性">弱いモジュール性</h4>
<p>例えば，あるモジュール A があるモジュール B に(構造的に)依存しているとする． モジュール A の実装がモジュール B の実装に依存する場合にはモジュール性が弱いという(らしい)． 要するに弱いモジュール性の場合，<strong>モジュールの実装を定義するときには依存する全てのモジュールの実装が決まっている</strong> 必要がある．</p>
<p>おそらく，インターフェースの依存性より <strong>弱い</strong> って意味っぽい．</p>
<p>そして，この定義で言うと，Haskell の既存のモジュールシステムと既存のパッケージシステムは弱いモジュール性で実装されている．</p>
<h4 id="強いモジュール性">強いモジュール性</h4>
<p>逆に強いモジュール性であるということは，インターフェースの実装が何に依存しているかとは <strong>独立</strong> にモジュールを型検査することが出来る(インターフェースの依存性より <strong>強い</strong> モジュール性)．</p>
<p>そして強いモジュール性を持つと以下のことを可能にするそうだ(具体的には後述する)</p>
<ol type="1">
<li>インターフェースとなるモジュール</li>
<li>リンクへのモジュールの再利用</li>
<li>モジュールの再帰的なリンク</li>
</ol>
<p>ココで言うリンクはインターフェースを利用しているモジュールに，そのインターフェースの実装を与えること．</p>
<p>しかし，Haskell は弱いモジュール性…</p>
<h3 id="そこで-backpack-14">そこで Backpack ’14</h3>
<p>以下の方法で Haskell に強いモジュール性を導入する．</p>
<ul>
<li>パッケージレベルでの設計
<ul>
<li>新しくシグネチャを導入(モジュールの型みたいなもの)</li>
<li>パッケージはシグネチャとモジュールを持てる</li>
</ul></li>
<li>シンプルな MixIn デザインを採用 - ベースは <a href="https://github.com/rossberg/mixml">MixML</a> - いくつか問題があったので Haskell に対応させた</li>
<li>ジェネリックな設計なので他の弱いモジュール性を持つ言語でも機能する(だろう)</li>
</ul>
<p>ちなみに，誰もが羨むモジュールシステム(要出典)ML系のファンクターではダメだったのかというと</p>
<ul>
<li>再帰的なリンクができない</li>
<li>弱いモジュール性に組み込む方法は不明</li>
<li>分割コンパイルに適していない</li>
</ul>
<p>ためだと書いてあった．</p>
<h4 id="例えば">例えば</h4>
<p>以下のような Haskell の Modules を考える．</p>
<div class="sourceCode" id="cb1"><pre class="sourceCode haskell"><code class="sourceCode haskell"><a class="sourceLine" id="cb1-1" data-line-number="1"><span class="co">-- Socket.hs</span></a>
<a class="sourceLine" id="cb1-2" data-line-number="2"><span class="kw">module</span> <span class="dt">Socket</span> <span class="kw">where</span></a>
<a class="sourceLine" id="cb1-3" data-line-number="3">  <span class="kw">data</span> <span class="dt">SocketT</span> <span class="fu">=</span> <span class="fu">...</span></a>
<a class="sourceLine" id="cb1-4" data-line-number="4">  open <span class="fu">=</span> <span class="fu">...</span></a></code></pre></div>
<div class="sourceCode" id="cb2"><pre class="sourceCode haskell"><code class="sourceCode haskell"><a class="sourceLine" id="cb2-1" data-line-number="1"><span class="co">-- Server.hs</span></a>
<a class="sourceLine" id="cb2-2" data-line-number="2"><span class="kw">module</span> <span class="dt">Server</span> <span class="kw">where</span></a>
<a class="sourceLine" id="cb2-3" data-line-number="3">  <span class="kw">import</span> <span class="dt">Socket</span></a>
<a class="sourceLine" id="cb2-4" data-line-number="4">  <span class="kw">data</span> <span class="dt">ServerT</span> <span class="fu">=</span> <span class="fu">...</span> <span class="dt">SocketT</span> <span class="fu">...</span></a></code></pre></div>
<p><code>Server</code> モジュールが <code>Socket</code> モジュールに依存している．</p>
<p>これを Backpack’14 だと次のように書ける</p>
<div class="sourceCode" id="cb3"><pre class="sourceCode haskell"><code class="sourceCode haskell"><a class="sourceLine" id="cb3-1" data-line-number="1">package complete<span class="fu">-</span>server <span class="kw">where</span></a>
<a class="sourceLine" id="cb3-2" data-line-number="2">  <span class="dt">Socket</span> <span class="fu">=</span> [</a>
<a class="sourceLine" id="cb3-3" data-line-number="3">    <span class="kw">data</span> <span class="dt">SocketT</span> <span class="fu">=</span> <span class="fu">...</span></a>
<a class="sourceLine" id="cb3-4" data-line-number="4">    open <span class="fu">=</span> <span class="fu">...</span></a>
<a class="sourceLine" id="cb3-5" data-line-number="5">  ]</a>
<a class="sourceLine" id="cb3-6" data-line-number="6">  <span class="dt">Server</span> <span class="fu">=</span> [</a>
<a class="sourceLine" id="cb3-7" data-line-number="7">    <span class="kw">import</span> <span class="dt">Socket</span></a>
<a class="sourceLine" id="cb3-8" data-line-number="8">    <span class="kw">data</span> <span class="dt">ServerT</span> <span class="fu">=</span> <span class="fu">...</span> <span class="dt">SocketT</span> <span class="fu">...</span></a>
<a class="sourceLine" id="cb3-9" data-line-number="9">  ]</a></code></pre></div>
<p>もちろん，この時点ではただまとめただけ…</p>
<p>これにシグネチャを導入する． <strong>シグネチャはモジュールの型みたいなもので，インターフェースの役割を持つ</strong> (1つ目の利点)． シグネチャには実装の無い型定義と関数の型を書ける．</p>
<div class="sourceCode" id="cb4"><pre class="sourceCode haskell"><code class="sourceCode haskell"><a class="sourceLine" id="cb4-1" data-line-number="1">package partial<span class="fu">-</span>server <span class="kw">where</span></a>
<a class="sourceLine" id="cb4-2" data-line-number="2">  <span class="dt">Socket</span><span class="ot"> ::</span> [</a>
<a class="sourceLine" id="cb4-3" data-line-number="3">    <span class="kw">data</span> <span class="dt">SocketT</span></a>
<a class="sourceLine" id="cb4-4" data-line-number="4"><span class="ot">    open ::</span> <span class="dt">Int</span> <span class="ot">-&gt;</span> <span class="dt">SocketT</span></a>
<a class="sourceLine" id="cb4-5" data-line-number="5">  ]</a>
<a class="sourceLine" id="cb4-6" data-line-number="6">  <span class="dt">Server</span> <span class="fu">=</span> [</a>
<a class="sourceLine" id="cb4-7" data-line-number="7">    <span class="kw">import</span> <span class="dt">Socket</span></a>
<a class="sourceLine" id="cb4-8" data-line-number="8">    <span class="kw">data</span> <span class="dt">ServerT</span> <span class="fu">=</span> <span class="fu">...</span> <span class="dt">SocketT</span> <span class="fu">...</span></a>
<a class="sourceLine" id="cb4-9" data-line-number="9">  ]</a></code></pre></div>
<p><code>Socket</code> シグネチャをインポートして <code>Server</code> モジュールの実装を書くとき，<code>Socket</code> シグネチャ内の関数の実装が決まっている必要は無い．</p>
<p>また，パッケージを別々に定義してインクルードすることもできる．</p>
<div class="sourceCode" id="cb5"><pre class="sourceCode haskell"><code class="sourceCode haskell"><a class="sourceLine" id="cb5-1" data-line-number="1">package socketsig <span class="kw">where</span></a>
<a class="sourceLine" id="cb5-2" data-line-number="2">  <span class="dt">Socket</span><span class="ot"> ::</span> [</a>
<a class="sourceLine" id="cb5-3" data-line-number="3">    <span class="kw">data</span> <span class="dt">SocketT</span></a>
<a class="sourceLine" id="cb5-4" data-line-number="4"><span class="ot">    open ::</span> <span class="dt">Int</span> <span class="ot">-&gt;</span> <span class="dt">SocketT</span></a>
<a class="sourceLine" id="cb5-5" data-line-number="5">  ]</a>
<a class="sourceLine" id="cb5-6" data-line-number="6"></a>
<a class="sourceLine" id="cb5-7" data-line-number="7">package partial<span class="fu">-</span>server <span class="kw">where</span></a>
<a class="sourceLine" id="cb5-8" data-line-number="8">  include socketsig</a>
<a class="sourceLine" id="cb5-9" data-line-number="9">  <span class="dt">Server</span> <span class="fu">=</span> [</a>
<a class="sourceLine" id="cb5-10" data-line-number="10">    <span class="kw">import</span> <span class="dt">Socket</span></a>
<a class="sourceLine" id="cb5-11" data-line-number="11">    <span class="kw">data</span> <span class="dt">ServerT</span> <span class="fu">=</span> <span class="fu">...</span> <span class="dt">SocketT</span> <span class="fu">...</span></a>
<a class="sourceLine" id="cb5-12" data-line-number="12">  ]</a></code></pre></div>
<p>無論，これらの <code>partial-server</code> パッケージは <code>Socket</code> シグネチャの実装が無いためアプリケーションとして呼び出すことはできない． 呼び出すためにはシグネチャを持つパッケージに，その実装を持つパッケージを <strong>リンク</strong> する必要がある．</p>
<div class="sourceCode" id="cb6"><pre class="sourceCode haskell"><code class="sourceCode haskell"><a class="sourceLine" id="cb6-1" data-line-number="1">package socketimpl <span class="kw">where</span></a>
<a class="sourceLine" id="cb6-2" data-line-number="2">  <span class="dt">Socket</span> <span class="fu">=</span> [</a>
<a class="sourceLine" id="cb6-3" data-line-number="3">    <span class="kw">data</span> <span class="dt">SocketT</span> <span class="fu">=</span> <span class="fu">...</span></a>
<a class="sourceLine" id="cb6-4" data-line-number="4">    open <span class="fu">=</span> <span class="fu">...</span></a>
<a class="sourceLine" id="cb6-5" data-line-number="5">  ]</a>
<a class="sourceLine" id="cb6-6" data-line-number="6"></a>
<a class="sourceLine" id="cb6-7" data-line-number="7">package main <span class="kw">where</span></a>
<a class="sourceLine" id="cb6-8" data-line-number="8">  include partial<span class="fu">-</span>server</a>
<a class="sourceLine" id="cb6-9" data-line-number="9">  include socketimpl</a></code></pre></div>
<p>もちろん <code>partial-server</code> パッケージは <strong>複数の実装パッケージに対し再利用できる</strong> (2つ目の利点)．</p>
<div class="sourceCode" id="cb7"><pre class="sourceCode haskell"><code class="sourceCode haskell"><a class="sourceLine" id="cb7-1" data-line-number="1">package server<span class="fu">-</span>linked<span class="fu">-</span><span class="dv">1</span> <span class="kw">where</span></a>
<a class="sourceLine" id="cb7-2" data-line-number="2">  include partial<span class="fu">-</span>server</a>
<a class="sourceLine" id="cb7-3" data-line-number="3">  include socketimpl<span class="fu">-</span><span class="dv">1</span></a>
<a class="sourceLine" id="cb7-4" data-line-number="4"></a>
<a class="sourceLine" id="cb7-5" data-line-number="5">package server<span class="fu">-</span>linked<span class="fu">-</span><span class="dv">2</span> <span class="kw">where</span></a>
<a class="sourceLine" id="cb7-6" data-line-number="6">  include partial<span class="fu">-</span>server</a>
<a class="sourceLine" id="cb7-7" data-line-number="7">  include socketimpl<span class="fu">-</span><span class="dv">2</span></a></code></pre></div>
<p>つまり，良くある文字列系ライブラリに対し <code>String</code> 用と <code>Text</code> 用と <code>ByteString</code> 用と…って複数のライブラリを作る必要が無くなる． 例えば正規表現ライブラリ <code>regex</code> で考える． 文字列型シグネチャパッケージ <code>str-sig</code> があり，<code>regex</code> は <code>str-sig</code> を用いて書かれているとする(そのため <code>regex</code> 単体ではアプリケーションに利用できない)． <code>str-sig</code> の実装パッケージである，<code>str-string</code> や <code>str-text</code>, <code>str-bytestring</code> があったとする． <code>regex</code> の利用者は正規表現を <code>String</code> で使いたければ <code>str-string</code> を， <code>Text</code> で使いたければ <code>str-text</code> をリンクするだけで良い． ライブラリ提供者がわざわざ複数の実装を用意する必要が無い！ すばらしい！！</p>
<h2 id="section-3"></h2>
<p>しかし，<code>str-string</code> と <code>str-text</code> をインクルードしたモノを同時に使いたい場合はどうするか． 安心してほしい，そういった構文も考えてある．</p>
<div class="sourceCode" id="cb8"><pre class="sourceCode haskell"><code class="sourceCode haskell"><a class="sourceLine" id="cb8-1" data-line-number="1">package multi <span class="kw">where</span></a>
<a class="sourceLine" id="cb8-2" data-line-number="2">  <span class="dt">A</span>    <span class="fu">=</span> { include server<span class="fu">-</span>linked<span class="fu">-</span><span class="dv">1</span> }</a>
<a class="sourceLine" id="cb8-3" data-line-number="3">  <span class="dt">B</span>    <span class="fu">=</span> { include server<span class="fu">-</span>linked<span class="fu">-</span><span class="dv">2</span> }</a>
<a class="sourceLine" id="cb8-4" data-line-number="4">  <span class="dt">Main</span> <span class="fu">=</span> [</a>
<a class="sourceLine" id="cb8-5" data-line-number="5">    <span class="kw">import</span> <span class="kw">qualified</span> <span class="dt">A.Server</span></a>
<a class="sourceLine" id="cb8-6" data-line-number="6">    <span class="kw">import</span> <span class="kw">qualified</span> <span class="dt">B.Server</span></a>
<a class="sourceLine" id="cb8-7" data-line-number="7">    <span class="fu">...</span></a>
<a class="sourceLine" id="cb8-8" data-line-number="8">  ]</a></code></pre></div>
<p>さらに，<strong>相互再帰みたいなリンクも提案されている</strong> (3つ目の利点)．</p>
<div class="sourceCode" id="cb9"><pre class="sourceCode haskell"><code class="sourceCode haskell"><a class="sourceLine" id="cb9-1" data-line-number="1">package ab<span class="fu">-</span>sigs <span class="kw">where</span></a>
<a class="sourceLine" id="cb9-2" data-line-number="2">  <span class="dt">A</span><span class="ot"> ::</span> [ <span class="dt">S_A</span> ]</a>
<a class="sourceLine" id="cb9-3" data-line-number="3">  <span class="dt">B</span><span class="ot"> ::</span> [ <span class="dt">S_B</span> ]</a>
<a class="sourceLine" id="cb9-4" data-line-number="4"></a>
<a class="sourceLine" id="cb9-5" data-line-number="5">package b<span class="fu">-</span>from<span class="fu">-</span>a <span class="kw">where</span></a>
<a class="sourceLine" id="cb9-6" data-line-number="6">  include ab<span class="fu">-</span>sigs</a>
<a class="sourceLine" id="cb9-7" data-line-number="7">  <span class="dt">B</span> <span class="fu">=</span> [ inport <span class="dt">A</span> ; <span class="fu">...</span> ]</a>
<a class="sourceLine" id="cb9-8" data-line-number="8">package a<span class="fu">-</span>from<span class="fu">-</span>b <span class="kw">where</span></a>
<a class="sourceLine" id="cb9-9" data-line-number="9">  include ab<span class="fu">-</span>sigs</a>
<a class="sourceLine" id="cb9-10" data-line-number="10">  <span class="dt">A</span> <span class="fu">=</span> [ inport <span class="dt">B</span> ; <span class="fu">...</span> ]</a>
<a class="sourceLine" id="cb9-11" data-line-number="11"></a>
<a class="sourceLine" id="cb9-12" data-line-number="12">package ab<span class="fu">-</span>rec<span class="fu">-</span>sep <span class="kw">where</span></a>
<a class="sourceLine" id="cb9-13" data-line-number="13">  include a<span class="fu">-</span>form<span class="fu">-</span>b</a>
<a class="sourceLine" id="cb9-14" data-line-number="14">  include b<span class="fu">-</span>form<span class="fu">-</span>a</a></code></pre></div>
<p><code>ab-sigs</code> には <code>A</code> と <code>B</code> の2つのシグネチャが定義されている． <code>b-from-a</code> では シグネチャ <code>A</code> を用いつつ <code>B</code> の実装を与えており，<code>a-from-b</code> では シグネチャ <code>B</code> を用いつつ <code>A</code> の実装を与えている． すごいね．</p>
<h4 id="しかし残念なことに">しかし…残念なことに…</h4>
<p>Backpack’14 では GHC での実装はできなかった…</p>
<p>何故かというと</p>
<ul>
<li>Backpack’14 の意味論は Haskell の意味論と密接に結びついている</li>
<li>そのため，GHC と Cabal を切り離して実装することが出来なかった</li>
</ul>
<p>Backpack’14 はコンパイラとパッケージマネージャー間の <strong>抽象化の障壁</strong> (abstraction barrier) を壊してしまうらしい(用語が良く分からないけど)． 要するに，Backpack’14 はパッケージレベルに設計したため，コンパイラ(GHC)とパッケージマネージャー(Cabal)とを分けている現在主流の Haskell 処理系に組み込むには，せっかく分けている2つを合体させる必要があり，それが認められなかったのだ．</p>
<h2 id="section-4"></h2>
<p>ちなみに，最近の処理系では必ずしもこの抽象化の障壁が守られているわけではないよね，ってハナシが Backpack’17 の論文の最後の方に書いてあった気がする． 例えば Go とか Elm とかは処理系そのものにパッケージマネージャが組み込まれているよねって(まぁこれらのパッケージマネージャーはお粗末な印象があるけど…)．</p>
<p>閑話休題</p>
<h2 id="backpack-17">Backpack ’17</h2>
<p>さて，お察しの通り <strong>抽象化の壁に関する問題を取り払ったのが，我らがヒーロー Backpack’17 ですよ！</strong></p>
<ul>
<li>Backpack’14 を実用的に改良</li>
<li>コンパイラとパッケージマネージャーの障壁(バリア)を保持</li>
<li>GHC8.2 と Cabal 2.0 に導入された - 我らがヒーロー Stack 様はまだ対応できてない…</li>
</ul>
<p>ちなみに，パッケージシステムが変わったため現状の Hackage は使えず，代わりに Hackage をフォークした <a href="http://next.hackage.haskell.org:8080/">next.hackage</a> を用いるらしい． また，<a href="https://github.com/ezyang/ghc-proposals/blob/backpack/proposals/0000-backpack.rst#unresolved-questions">既知の未解決問題</a>として，(3) の再帰的リンクは実現できていないそうだ． 残念(面白いけども有用か？と言われると分からんし困らない気はする)．</p>
<h3 id="ghc8.2-だけで試す">GHC8.2 だけで試す</h3>
<p>詳しくは以下の記事を参照してください．</p>
<ul>
<li><a href="http://blog.ezyang.com/2016/10/try-backpack-ghc-backpack/">Try Backpack: ghc –backpack : Inside 245-5D</a></li>
</ul>
<ol type="1">
<li><code>*.bkp</code> というファイルを作る</li>
<li><code>ghc --backpack xxx.bkp</code> と打つだけ</li>
</ol>
<p><code>*.bkp</code> は <code>*.hs</code> に比べて <code>unit</code> と言う階層ができた(Backpack’14 の構文で言う <code>package</code> みたいなもの)．</p>
<div class="sourceCode" id="cb10"><pre class="sourceCode haskell"><code class="sourceCode haskell"><a class="sourceLine" id="cb10-1" data-line-number="1">unit main <span class="kw">where</span></a>
<a class="sourceLine" id="cb10-2" data-line-number="2">  <span class="kw">module</span> <span class="dt">Main</span> <span class="kw">where</span></a>
<a class="sourceLine" id="cb10-3" data-line-number="3">    main <span class="fu">=</span> putStrLn <span class="st">&quot;Hello world!&quot;</span></a></code></pre></div>
<p>ひとつの <code>*.bkp</code> ファイルに <code>unit</code> は複数書いて良い． <code>unit</code> の中には従来の <code>module</code> と新しく <code>signature</code> が書ける．</p>
<h4 id="例-正規表現">例: 正規表現</h4>
<p>細かいところは割愛してある(元記事には全部書いてあるよ)．</p>
<div class="sourceCode" id="cb11"><pre class="sourceCode haskell"><code class="sourceCode haskell"><a class="sourceLine" id="cb11-1" data-line-number="1"><span class="co">-- regex.bkp</span></a>
<a class="sourceLine" id="cb11-2" data-line-number="2">unit regex<span class="fu">-</span>types <span class="kw">where</span></a>
<a class="sourceLine" id="cb11-3" data-line-number="3">  <span class="kw">module</span> <span class="dt">Regex.Types</span> <span class="kw">where</span></a>
<a class="sourceLine" id="cb11-4" data-line-number="4">    <span class="kw">data</span> <span class="dt">Reg</span> <span class="fu">=</span> <span class="fu">...</span></a>
<a class="sourceLine" id="cb11-5" data-line-number="5"></a>
<a class="sourceLine" id="cb11-6" data-line-number="6">unit regex<span class="fu">-</span>indef <span class="kw">where</span></a>
<a class="sourceLine" id="cb11-7" data-line-number="7">  dependency regex<span class="fu">-</span>types</a>
<a class="sourceLine" id="cb11-8" data-line-number="8">  signature <span class="dt">Str</span> <span class="kw">where</span></a>
<a class="sourceLine" id="cb11-9" data-line-number="9">    <span class="kw">data</span> <span class="dt">Str</span></a>
<a class="sourceLine" id="cb11-10" data-line-number="10">    <span class="kw">instance</span> <span class="dt">Eq</span> <span class="dt">Str</span></a>
<a class="sourceLine" id="cb11-11" data-line-number="11"><span class="ot">    splits ::</span> <span class="dt">Str</span> <span class="ot">-&gt;</span> [(<span class="dt">Str</span>, <span class="dt">Str</span>)]</a>
<a class="sourceLine" id="cb11-12" data-line-number="12">    <span class="fu">...</span></a>
<a class="sourceLine" id="cb11-13" data-line-number="13">  <span class="kw">module</span> <span class="dt">Regex</span> <span class="kw">where</span></a>
<a class="sourceLine" id="cb11-14" data-line-number="14">    <span class="kw">import</span> <span class="dt">Str</span></a>
<a class="sourceLine" id="cb11-15" data-line-number="15">    <span class="kw">import</span> <span class="dt">Regex.Types</span></a>
<a class="sourceLine" id="cb11-16" data-line-number="16"><span class="ot">    accept ::</span> <span class="dt">Reg</span> <span class="ot">-&gt;</span> <span class="dt">Str</span> <span class="ot">-&gt;</span> <span class="dt">Bool</span></a>
<a class="sourceLine" id="cb11-17" data-line-number="17">    accept <span class="fu">=</span> <span class="fu">...</span> <span class="co">-- use split etc..</span></a>
<a class="sourceLine" id="cb11-18" data-line-number="18"></a>
<a class="sourceLine" id="cb11-19" data-line-number="19">unit str<span class="fu">-</span>bytestring <span class="kw">where</span></a>
<a class="sourceLine" id="cb11-20" data-line-number="20">  <span class="kw">module</span> <span class="dt">Str</span>(<span class="kw">module</span> <span class="dt">Data.ByteString.Char8</span>, <span class="kw">module</span> <span class="dt">Str</span>) <span class="kw">where</span></a>
<a class="sourceLine" id="cb11-21" data-line-number="21">    <span class="kw">import</span> <span class="dt">Data.ByteString.Char8</span></a>
<a class="sourceLine" id="cb11-22" data-line-number="22">    <span class="kw">import</span> <span class="dt">Data.ByteString</span></a>
<a class="sourceLine" id="cb11-23" data-line-number="23">    <span class="kw">type</span> <span class="dt">Str</span> <span class="fu">=</span> <span class="dt">ByteString</span></a>
<a class="sourceLine" id="cb11-24" data-line-number="24"><span class="ot">    splits ::</span> <span class="dt">Str</span> <span class="ot">-&gt;</span> [(<span class="dt">Str</span>, <span class="dt">Str</span>)]</a>
<a class="sourceLine" id="cb11-25" data-line-number="25">    splits s <span class="fu">=</span> fmap (\n <span class="ot">-&gt;</span> splitAt n s) [<span class="dv">0</span><span class="fu">..</span>length s]</a>
<a class="sourceLine" id="cb11-26" data-line-number="26">    <span class="fu">...</span></a>
<a class="sourceLine" id="cb11-27" data-line-number="27"></a>
<a class="sourceLine" id="cb11-28" data-line-number="28">unit str<span class="fu">-</span>string <span class="kw">where</span></a>
<a class="sourceLine" id="cb11-29" data-line-number="29">  <span class="kw">module</span> <span class="dt">Str</span> <span class="kw">where</span></a>
<a class="sourceLine" id="cb11-30" data-line-number="30">    <span class="kw">import</span> <span class="kw">qualified</span> <span class="dt">Prelude</span> <span class="kw">as</span> <span class="dt">P</span></a>
<a class="sourceLine" id="cb11-31" data-line-number="31">    <span class="kw">type</span> <span class="dt">Str</span> <span class="fu">=</span> <span class="dt">String</span></a>
<a class="sourceLine" id="cb11-32" data-line-number="32"><span class="ot">    splits ::</span> <span class="dt">Str</span> <span class="ot">-&gt;</span> [(<span class="dt">Str</span>, <span class="dt">Str</span>)]</a>
<a class="sourceLine" id="cb11-33" data-line-number="33">    splits [] <span class="fu">=</span> [([], [])]</a>
<a class="sourceLine" id="cb11-34" data-line-number="34">    splits (c<span class="fu">:</span>cs) <span class="fu">=</span> ([], c<span class="fu">:</span>cs)<span class="fu">:</span>[(c<span class="fu">:</span>s1,s2) <span class="fu">|</span> (s1,s2) <span class="ot">&lt;-</span> splits cs]</a>
<a class="sourceLine" id="cb11-35" data-line-number="35">    <span class="fu">...</span></a>
<a class="sourceLine" id="cb11-36" data-line-number="36"></a>
<a class="sourceLine" id="cb11-37" data-line-number="37">unit main <span class="kw">where</span></a>
<a class="sourceLine" id="cb11-38" data-line-number="38">  dependency regex<span class="fu">-</span>types</a>
<a class="sourceLine" id="cb11-39" data-line-number="39">  dependency regex<span class="fu">-</span>indef[<span class="dt">Str</span><span class="fu">=</span>str<span class="fu">-</span>string<span class="fu">:</span><span class="dt">Str</span>]     (<span class="dt">Regex</span> as <span class="dt">Regex.String</span>)</a>
<a class="sourceLine" id="cb11-40" data-line-number="40">  dependency regex<span class="fu">-</span>indef[<span class="dt">Str</span><span class="fu">=</span>str<span class="fu">-</span>bytestring<span class="fu">:</span><span class="dt">Str</span>] (<span class="dt">Regex</span> as <span class="dt">Regex.ByteString</span>)</a>
<a class="sourceLine" id="cb11-41" data-line-number="41">  <span class="kw">module</span> <span class="dt">Main</span> <span class="kw">where</span></a>
<a class="sourceLine" id="cb11-42" data-line-number="42">    <span class="kw">import</span> <span class="dt">Regex.Types</span></a>
<a class="sourceLine" id="cb11-43" data-line-number="43">    <span class="kw">import</span> <span class="kw">qualified</span> <span class="dt">Regex.String</span></a>
<a class="sourceLine" id="cb11-44" data-line-number="44">    <span class="kw">import</span> <span class="kw">qualified</span> <span class="dt">Regex.ByteString</span></a>
<a class="sourceLine" id="cb11-45" data-line-number="45">    <span class="fu">...</span></a></code></pre></div>
<h3 id="cabal-2.0-で試す">Cabal 2.0 で試す</h3>
<p>詳しくは以下の記事を参照してください．</p>
<ul>
<li><a href="http://blog.ezyang.com/2017/01/try-backpack-cabal-packages">Try Backpack: Cabal packages : Inside 245-5D</a></li>
</ul>
<ol type="1">
<li><code>bkp</code> ファイルを <code>unit</code> ごとに分けて(<code>*.hs</code> と <code>*.hsig</code>)</li>
<li><code>cabal</code> ファイルで依存関係を定義し</li>
</ol>
<p>再構築するイメージ(たぶん)．</p>
<p>さっきの例のリポジトリがあるので，それを見た方が速い．</p>
<ul>
<li><a href="https://github.com/ezyang/backpack-regex-example">ezyang/backpack-regex-example - GitHub</a></li>
</ul>
<p><code>source-only</code> ブランチは，<code>unit</code> ごとにディレクトリを分けてモジュールとシグネチャごとにファイルに分けただけ． これらのディレクトリ間の依存関係を，<code>.bkp</code> ファイルの代わりに <code>cabal</code> ファイルへ記述するのだ．</p>
<h2 id="section-5"></h2>
<p>実はやり方は大きく分けて2つある．</p>
<ol type="1">
<li>単一のパッケージで管理する場合
<ul>
<li><a href="https://github.com/ezyang/backpack-regex-example/tree/single-package"><code>single-package</code></a>ブランチや</li>
<li><a href="https://github.com/ezyang/backpack-regex-example/tree/better-single-package"><code>better-single-package</code></a>ブランチ
<ul>
<li><code>cabal build</code> でビルドできる</li>
</ul></li>
</ul></li>
<li>分割してパッケージを管理する場合
<ul>
<li><a href="https://github.com/ezyang/backpack-regex-example/tree/multiple-packages"><code>multiple-packages</code></a>
<ul>
<li><code>cabal new-build</code> でビルドする</li>
</ul></li>
</ul></li>
</ol>
<p>単一のパッケージ(<code>cabal</code> ファイルがひとつ)の場合はパッケージでカプセル化される(要するにシグネチャと言う曖昧なものが外に出てこない)ため，<code>cabal-build</code> でうまく動作する(らしい)． しかし，各 <code>unit</code> を別々のパッケージとして公開する場合は，シグネチャを持つようなパッケージも個別にインスタンスする必要があり，それができるのは <code>cabal-new-build</code> だけだそうだ(この辺りはうっすらイメージできるぐらいで，自分も良く分かってない…)．</p>
<h2 id="section-6"></h2>
<p>ちなみに，参照記事の最後に「(1) であれば Stack と <code>cabal-install</code> でもビルド可能」という感じの文言があるが，これはおそらく Backpack で書いたパッケージを <code>cabal-install</code> して Stack で利用するという意味で， Backpack パッケージをビルドすることはできない．</p>
<h4 id="実際に試す">実際に試す</h4>
<p>試しに <a href="https://github.com/ezyang/backpack-regex-example">ezyang/backpack-regex-example</a> リポジトリの <code>better-single-package</code> ブランチをビルドしてみる． stack ではできないが，代わりに Haskell の Docker イメージではできる．</p>
<ul>
<li><a href="https://hub.docker.com/_/haskell/">library/haskell - Docker Hub</a></li>
</ul>
<pre><code>$ docker run -it --name test-backpack haskell /bin/bash
# git clone https://github.com/ezyang/backpack-regex-example.git
...
# cd backpack-regex-example
# git checkout better-single-package
# cabal run
Warning: The package list for &#39;hackage.haskell.org&#39; does not exist. Run &#39;cabal
update&#39; to download it.
Resolving dependencies...
Configuring regex-example-0.1.0.0...
Warning: Packages using &#39;cabal-version: &gt;= 1.10&#39; must specify the
&#39;default-language&#39; field for each component (e.g. Haskell98 or Haskell2010).
If a component uses different languages in different modules then list the
other ones in the &#39;other-languages&#39; field.
Preprocessing library &#39;str-impls&#39; for regex-example-0.1.0.0..
Building library &#39;str-impls&#39; for regex-example-0.1.0.0..
[1 of 2] Compiling Str.ByteString   ( str-impls/Str/ByteString.hs, dist/build/str-impls/Str/ByteString.o )
[2 of 2] Compiling Str.String       ( str-impls/Str/String.hs, dist/build/str-impls/Str/String.o )
Preprocessing library &#39;regex-types&#39; for regex-example-0.1.0.0..
Building library &#39;regex-types&#39; for regex-example-0.1.0.0..
[1 of 1] Compiling Regex.Types      ( regex-types/Regex/Types.hs, dist/build/regex-types/Regex/Types.o )
Preprocessing library &#39;regex-indef&#39; for regex-example-0.1.0.0..
Building library &#39;regex-indef&#39; instantiated with Str = &lt;Str&gt;
for regex-example-0.1.0.0..
[1 of 2] Compiling Str[sig]         ( regex-indef/Str.hsig, nothing )
[2 of 2] Compiling Regex            ( regex-indef/Regex.hs, nothing )
Preprocessing library &#39;regex-indef&#39; for regex-example-0.1.0.0..
Building library &#39;regex-indef&#39; instantiated with
  Str = regex-example-0.1.0.0-5fan9UmrI8c9D3SR3eJshp-str-impls:Str.ByteString
for regex-example-0.1.0.0..
[1 of 2] Compiling Str[sig]         ( regex-indef/Str.hsig, dist/build/regex-example-0.1.0.0-5fan9UmrI8c9D3SR3eJshp-regex-indef+DlrkqhaqfnHLeraBne3U6J/Str.o )
[2 of 2] Compiling Regex            ( regex-indef/Regex.hs, dist/build/regex-example-0.1.0.0-5fan9UmrI8c9D3SR3eJshp-regex-indef+DlrkqhaqfnHLeraBne3U6J/Regex.o )
Preprocessing library &#39;regex-indef&#39; for regex-example-0.1.0.0..
Building library &#39;regex-indef&#39; instantiated with
  Str = regex-example-0.1.0.0-5fan9UmrI8c9D3SR3eJshp-str-impls:Str.String
for regex-example-0.1.0.0..
[1 of 2] Compiling Str[sig]         ( regex-indef/Str.hsig, dist/build/regex-example-0.1.0.0-5fan9UmrI8c9D3SR3eJshp-regex-indef+FIqipABuofnDXePvW6rl2w/Str.o )
[2 of 2] Compiling Regex            ( regex-indef/Regex.hs, dist/build/regex-example-0.1.0.0-5fan9UmrI8c9D3SR3eJshp-regex-indef+FIqipABuofnDXePvW6rl2w/Regex.o )
Preprocessing executable &#39;regex-example&#39; for regex-example-0.1.0.0..
Building executable &#39;regex-example&#39; for regex-example-0.1.0.0..
[1 of 1] Compiling Main             ( regex-example/Main.hs, dist/build/regex-example/regex-example-tmp/Main.o ) [Regex.ByteString changed]
Linking dist/build/regex-example/regex-example ...
Running regex-example...
True
True</code></pre>
<h2 id="結局なにがうれしいのか">結局なにがうれしいのか</h2>
<p>ちゃんと論文読んでないので，ぼくが思うところですけど</p>
<ul>
<li>本質的には関係ない実装を利用者側で選択できる - <code>A</code> パッケージの文字列に <code>Text</code> を使うか <code>ByteString</code> を使うかは利用者の自由 - <code>A-text</code> とか <code>A-bytestring</code> とか別に作る必要が無い</li>
<li>型クラスに無理やり突っ込んでたモノが解決 - モジュールレベルにアドホック多相ができる(たぶん)</li>
<li><strong>面白い</strong></li>
</ul>
<h2 id="おまけ-stack-と-backpack">おまけ: stack と Backpack</h2>
<p>結果だけ先に言えば，Backpack は stack では今のところ動きません． 対応に向けて現状どうなのかと言うと，なんと1年前から <a href="https://github.com/commercialhaskell/stack/issues/2540">Issue</a> がありました．</p>
<p><a href="https://github.com/commercialhaskell/stack/issues/2540#issuecomment-319570811">IRCで議論してロードマップはできてる</a>ようです．</p>
<ol type="1">
<li>Stack が Cabal2.0 をサポート(済)</li>
<li>Stack をコンポーネントごとのビルドプランに切り替える(see <a href="https://github.com/haskell/cabal/issues/2802">haskell/cabal#2802</a>)
<ul>
<li>一番エキサイティングなところらしい(?)</li>
</ul></li>
<li>Cabal2.0前後でビルドプランを切り替える(難題)</li>
</ol>
<p>で，stack の何が問題なのかと言うと</p>
<ul>
<li>Stack Project 単位でモジュール群を持っていた</li>
<li>しかし Backpack はモジュール(コンポーネント)ごとに管理する必要がある
<ul>
<li>モジュールごとに依存関係が異なるため</li>
</ul></li>
<li>従ってモジュール群の管理方法を変える事が必要</li>
</ul>
<p><a href="https://github.com/commercialhaskell/stack/issues/2540#issuecomment-323256870">コレ</a>曰く，インターナルライブラリをサポートするのが一つの方法で，foreign libraries で既に採用済みとのこと．</p>
<p><a href="https://github.com/commercialhaskell/stack/pull/3430">最新のアクティビティ</a>がソレについてなので，その方向でやるんですかね？</p>
<h2 id="おしまい">おしまい</h2>
<p>なんか具体例を示したかったけど，丁度良いのを思いつかなった + 時間不足です，すいません． バイトでは丁度 Backpack が欲しいユースケースがあったんだけど，表に出してよいコードに落とせなかった． 文量も文量だし，そのうち別の記事にします．</p>
  </div>
</div>
</article>
]]></summary>
</entry>
<entry>
    <title>Re: ゼロから作る ADVENTAR の Slack Bot (CircleCI 編)</title>
    <link href="https://matsubara0507.github.io/posts/2017-12-09-re-adventar-slack-bot-part2.html" />
    <id>https://matsubara0507.github.io/posts/2017-12-09-re-adventar-slack-bot-part2.html</id>
    <published>2017-12-09T00:00:00Z</published>
    <updated>2017-12-09T00:00:00Z</updated>
    <summary type="html"><![CDATA[<article class="post card" itemscope itemtype="http://schema.org/BlogPosting">
 <div class="card-content">
  <header class="post-header">
    <h1 class="post-title" itemprop="name headline">Re: ゼロから作る ADVENTAR の Slack Bot (CircleCI 編)</h1>
    <p class="post-meta">
      <time datetime="2017-12-09" itemprop="datePublished">
        Dec 9, 2017
      </time>
      
      
      <div class="tags">
          <i class="fa fa-tags"></i> <a href="/tags/CircleCI.html">CircleCI</a> <a href="/tags/application.html">application</a> <a href="/tags/bot.html">bot</a>
      </div>
      
    </p>
  </header>

  <div class="post-content" itemprop="articleBody">
    <p>ドーモ CircleCI でなんでもするマンです．</p>
<p><img src="/assets/re-adventar-slack-bot/nandemoyaruman.jpg" /></p>
<p>ADVENTAR の更新通知 Slack Bot を作ったという話の後編です(書いてたら長くなったので分けた)． ちなみに，前半に書いた通り，わざわざスクレイピングとかしなくても RSS を取得できます (;ω;)</p>
<p><a href="/posts/2017-12-02-re-adventar-slack-bot-part1.html">前編</a>はコチラ．</p>
<h2 id="前回までのあらすじ">前回までのあらすじ</h2>
<p>Haskell 製 ADVENTAR の更新通知 Slack Bot プログラムが完成した．</p>
<h3 id="今回">今回</h3>
<p>できたけどドコで定期実行する？ お金ないのでタダで回したいよね？ CircleCI なら Docker 使えるからやりたい放題じゃん！！ ってことで CircleCI で Haskell プログラムを実行する．</p>
<h2 id="戦略">戦略</h2>
<p>Circle CI で実行するための戦略はこうだ．</p>
<ol type="1">
<li>プログラムを Dockerrize する</li>
<li>selenium のスタンドアローンと docker-compose する</li>
<li>Circle CI では docker-compose を実行する(だけ)</li>
<li>前の状態は JSON で管理し更新があったらリポジトリに push</li>
<li>コレを cron で回す</li>
</ol>
<p>いちいち CIrcle CI 上で Docker ビルドしてたら時間がかかりすぎる． なので，事前にビルドしたイメージを Docker Hub にあげておいて，Circle CI 上では docker pull するだけにする．</p>
<p><img src="/assets/re-adventar-slack-bot/run-on-circleci.jpg" /></p>
<h2 id="作る">作る</h2>
<h3 id="プログラムを-dockerize">1. プログラムを Dockerize</h3>
<p>前回で Haskell の話は終わりと言ったが <strong>あれはウソだ</strong> ！！</p>
<p>(※ 言ってません)</p>
<p>Haskell のビルドツール <a href="https://docs.haskellstack.org/en/stable/README/">stack</a> には <a href="https://docs.haskellstack.org/en/stable/docker_integration/">Docker Integration</a> と言う機能がある． Docker Integration は主に以下の2つの機能を提供する．</p>
<ol type="1">
<li>ホスト環境ではなく Docker の上でビルド</li>
<li>Docker イメージの作成</li>
</ol>
<p>これらの設定は <code>stack.yaml</code> で行う．</p>
<div class="sourceCode" id="cb1"><pre class="sourceCode yaml"><code class="sourceCode yaml"><a class="sourceLine" id="cb1-1" data-line-number="1"><span class="fu">resolver:</span><span class="at"> lts-9.12</span></a>
<a class="sourceLine" id="cb1-2" data-line-number="2"><span class="fu">packages:</span></a>
<a class="sourceLine" id="cb1-3" data-line-number="3">  <span class="kw">-</span> .</a>
<a class="sourceLine" id="cb1-4" data-line-number="4"><span class="fu">extra-deps:</span></a>
<a class="sourceLine" id="cb1-5" data-line-number="5">  <span class="kw">-</span> slack-api-0.12</a>
<a class="sourceLine" id="cb1-6" data-line-number="6"><span class="fu">flags:</span><span class="at"> </span><span class="kw">{}</span></a>
<a class="sourceLine" id="cb1-7" data-line-number="7"><span class="fu">extra-package-dbs:</span><span class="at"> </span><span class="kw">[]</span></a>
<a class="sourceLine" id="cb1-8" data-line-number="8"></a>
<a class="sourceLine" id="cb1-9" data-line-number="9"><span class="fu">docker:</span></a>
<a class="sourceLine" id="cb1-10" data-line-number="10">  <span class="fu">repo:</span><span class="at"> </span><span class="st">&quot;fpco/stack-build&quot;</span></a>
<a class="sourceLine" id="cb1-11" data-line-number="11"></a>
<a class="sourceLine" id="cb1-12" data-line-number="12"><span class="fu">image:</span></a>
<a class="sourceLine" id="cb1-13" data-line-number="13">  <span class="fu">container:</span></a>
<a class="sourceLine" id="cb1-14" data-line-number="14">    <span class="fu">name:</span><span class="at"> </span><span class="st">&quot;matsubara0507/adventar-bot&quot;</span></a>
<a class="sourceLine" id="cb1-15" data-line-number="15">    <span class="fu">base:</span><span class="at"> </span><span class="st">&quot;matsubara0507/ubuntu-tcp&quot;</span></a>
<a class="sourceLine" id="cb1-16" data-line-number="16">    <span class="fu">add:</span></a>
<a class="sourceLine" id="cb1-17" data-line-number="17">      <span class="fu">scripts:</span><span class="at"> /usr/local/bin</span></a></code></pre></div>
<p><code>docker</code> の部分が (1) でのビルドするイメージを指定している． <code>image</code> の部分が (2) で作成するイメージの設定だ．</p>
<p>あとは</p>
<pre><code>$ stack build --docker --ghc-options=&#39;-optl-static -optl-pthread&#39;
$ stack image container</code></pre>
<p>とすればよい． <code>--ghc-options='-optl-static -optl-pthread'</code> は Haskell のアプリケーションを静的コンパイルするためのオプションだ．</p>
<ul>
<li><a href="https://www.ishiy.xyz/posts/2016-02-28-haskell-docker.html">stackとdockerでHaskellプログラムを静的リンクする - iLog</a></li>
</ul>
<p>何故静的コンパイルする必要があるかと言うと，これは所謂，(Docker で最近追加された)マルチステージビルドのようなことをしているからだ． Haskell の実行環境は非常に重く，数GBは普通にいく． しかし，この方法で生成される Docker イメージはビルドした実行ファイルをコピペしてるだけなので非常に軽い．</p>
<p>これでビルドイメージがこちら．</p>
<ul>
<li><a href="https://hub.docker.com/r/matsubara0507/adventar-bot/">matsubara0507/adventar-bot - Docker Hub</a></li>
</ul>
<p>99MBしかない．</p>
<p>ちなみに，イメージを作成するときに使っている <code>matsubara0507/ubuntu-tcp</code> は，このアプリケーションを実行するためにイロイロと雑に <code>apt-get</code> したイメージだ(<a href="https://github.com/IGGG/adventar-bot/blob/master/Dockerfiles/ubuntu-tcp/Dockerfile">Dockerfileはココ</a>)．</p>
<ul>
<li><a href="https://hub.docker.com/r/matsubara0507/ubuntu-tcp/">matsubara0507/ubuntu-tcp - Docker Hub</a></li>
</ul>
<p><code>ubuntu-tcp</code> じゃなくて <code>ubuntu</code> のイメージを使うと，確か次のようなエラーが出る．</p>
<pre><code>ConnectionFailure Network.BSD.getProtocolByName: does not exist (no such protocol name: tcp)</code></pre>
<p>最終的に参考になったのは<a href="https://github.com/bos/wreq/issues/5#issuecomment-108086543">この Issue コメント</a>． 要するに <code>netbase</code> と <code>ca-certificates</code> を <code>apt-get</code> した．</p>
<h3 id="selenium-と-docker-compose">2. Selenium と docker-compose</h3>
<p>次は <a href="http://www.seleniumhq.org/">Selenuim</a> と docker-compose する． 前半の記事に詳しくは書いたが，React.js の Web ページをスクレイピングするために，Headless Browser (Selenium)を使っている．</p>
<p>今回は以下の Selenium のイメージを用いた．</p>
<ul>
<li><a href="https://hub.docker.com/r/selenium/standalone-chrome/">selenium/standalone-chrome - Docker Hub</a></li>
</ul>
<p><a href="https://github.com/IGGG/adventar-bot/blob/master/docker-compose.yml">docker-compose.yaml</a> はこんな感じ．</p>
<div class="sourceCode" id="cb4"><pre class="sourceCode yaml"><code class="sourceCode yaml"><a class="sourceLine" id="cb4-1" data-line-number="1"><span class="fu">version:</span><span class="at"> </span><span class="st">&quot;2&quot;</span></a>
<a class="sourceLine" id="cb4-2" data-line-number="2"><span class="fu">services:</span></a>
<a class="sourceLine" id="cb4-3" data-line-number="3">  <span class="fu">bot:</span></a>
<a class="sourceLine" id="cb4-4" data-line-number="4">    <span class="fu">image:</span><span class="at"> matsubara0507/adventar-bot</span></a>
<a class="sourceLine" id="cb4-5" data-line-number="5">    <span class="fu">command:</span><span class="at"> wait.sh adventar-bot &quot;${HTML_URL}&quot; &quot;/config/entry.json&quot; &quot;${SLACK_CHANNEL}&quot;</span></a>
<a class="sourceLine" id="cb4-6" data-line-number="6">    <span class="fu">volumes:</span></a>
<a class="sourceLine" id="cb4-7" data-line-number="7">      <span class="kw">-</span> <span class="fu">./.circleci:</span><span class="at">/config</span></a>
<a class="sourceLine" id="cb4-8" data-line-number="8">    <span class="fu">depends_on:</span></a>
<a class="sourceLine" id="cb4-9" data-line-number="9">      <span class="kw">-</span> selenium</a>
<a class="sourceLine" id="cb4-10" data-line-number="10">    <span class="fu">networks:</span></a>
<a class="sourceLine" id="cb4-11" data-line-number="11">      <span class="kw">-</span> apps</a>
<a class="sourceLine" id="cb4-12" data-line-number="12">    <span class="fu">environment:</span></a>
<a class="sourceLine" id="cb4-13" data-line-number="13">      <span class="fu">LANG:</span><span class="at"> C.utf-8</span></a>
<a class="sourceLine" id="cb4-14" data-line-number="14">      <span class="fu">TZ:</span><span class="at"> Asia/Tokyo</span></a>
<a class="sourceLine" id="cb4-15" data-line-number="15">      <span class="fu">WD_HOST:</span><span class="at"> selenium</span></a>
<a class="sourceLine" id="cb4-16" data-line-number="16">      <span class="fu">WD_PORT:</span><span class="at"> 4444</span></a>
<a class="sourceLine" id="cb4-17" data-line-number="17">      <span class="fu">SLACK_TOKEN:</span></a>
<a class="sourceLine" id="cb4-18" data-line-number="18">  <span class="fu">selenium:</span></a>
<a class="sourceLine" id="cb4-19" data-line-number="19">    <span class="fu">image:</span><span class="at"> selenium/standalone-chrome</span></a>
<a class="sourceLine" id="cb4-20" data-line-number="20">    <span class="fu">networks:</span></a>
<a class="sourceLine" id="cb4-21" data-line-number="21">      <span class="kw">-</span> apps</a>
<a class="sourceLine" id="cb4-22" data-line-number="22">    <span class="fu">ports:</span><span class="at"> </span><span class="kw">[</span><span class="st">&quot;4444&quot;</span><span class="kw">]</span></a>
<a class="sourceLine" id="cb4-23" data-line-number="23">    <span class="fu">environment:</span></a>
<a class="sourceLine" id="cb4-24" data-line-number="24">      <span class="fu">TZ:</span><span class="at"> Asia/Tokyo</span></a>
<a class="sourceLine" id="cb4-25" data-line-number="25"><span class="fu">networks:</span></a>
<a class="sourceLine" id="cb4-26" data-line-number="26">  <span class="fu">apps:</span></a></code></pre></div>
<p><code>adventar-bot</code> に渡している引数が前半の記事と違うのはあんまり気にしないで(適当にいくつかを環境変数で渡すようにした)． <code>wait.sh</code> は何かというと，<code>adventar-bot</code> の実行を遅延させる，こんな感じのシェルスクリプトだ．</p>
<pre class="shell"><code>#!/bin/bash
set -e
sleep 2
$@</code></pre>
<p>docker-compose あるあるだが，複数のコンテナの実行する順番を依存関係から制御することは可能だが，実行し始めてから通信の準備が完了するのを待ってはくれない． Selenium のコンテナは，通信が可能になるまで時間がかかるため，今回は 2,3 秒ほど <code>adventar-bot</code> の実行を遅らせているのだ．</p>
<h4 id="タイムゾーン">タイムゾーン</h4>
<p>これは運用し始めてからわかったのだが，ADVENTAR は事前にセットした URL の <code>hidden</code> 属性を <strong>アクセスしたマシンのタイムゾーンでの日付によって外していた</strong>． つまり，日本時間でアドベントカレンダーの担当日になっても，スクレイピングするマシーンのタイムゾーンが UTC だと，まだ日付が変わっていないので投稿していないことになってしまう(笑) なので，<code>TZ</code> 環境変数でコンテナのタイムゾーンを日本にした．</p>
<h3 id="circle-ci-で-docker-compose">3. Circle CI で docker-compose</h3>
<p>次はこの設定で <code>docker-compose</code> を CircleCI 上で実行する． これはかなり簡単で，次のような <code>.circleci/config.yml</code> を書くだけ．</p>
<div class="sourceCode" id="cb6"><pre class="sourceCode yaml"><code class="sourceCode yaml"><a class="sourceLine" id="cb6-1" data-line-number="1"><span class="fu">version:</span><span class="at"> 2</span></a>
<a class="sourceLine" id="cb6-2" data-line-number="2"><span class="fu">jobs:</span></a>
<a class="sourceLine" id="cb6-3" data-line-number="3">  <span class="fu">build:</span></a>
<a class="sourceLine" id="cb6-4" data-line-number="4">    <span class="fu">machine:</span><span class="at"> true</span></a>
<a class="sourceLine" id="cb6-5" data-line-number="5">    <span class="fu">steps:</span></a>
<a class="sourceLine" id="cb6-6" data-line-number="6">      <span class="kw">-</span> checkout</a>
<a class="sourceLine" id="cb6-7" data-line-number="7">      <span class="kw">-</span> <span class="fu">run:</span></a>
<a class="sourceLine" id="cb6-8" data-line-number="8">          <span class="fu">name:</span><span class="at"> Build Docker Image</span></a>
<a class="sourceLine" id="cb6-9" data-line-number="9">          <span class="fu">command:</span><span class="at"> docker-compose pull</span></a>
<a class="sourceLine" id="cb6-10" data-line-number="10">      <span class="kw">-</span> <span class="fu">run:</span></a>
<a class="sourceLine" id="cb6-11" data-line-number="11">          <span class="fu">name:</span><span class="at"> docker-compose run bot</span></a>
<a class="sourceLine" id="cb6-12" data-line-number="12">          <span class="fu">command:</span><span class="at"> |</span></a>
<a class="sourceLine" id="cb6-13" data-line-number="13">            docker-compose -f ./docker-compose.yml run bot</a>
<a class="sourceLine" id="cb6-14" data-line-number="14"><span class="fu">workflows:</span></a>
<a class="sourceLine" id="cb6-15" data-line-number="15">  <span class="fu">version:</span><span class="at"> 2</span></a>
<a class="sourceLine" id="cb6-16" data-line-number="16">  <span class="fu">normal_workflow:</span></a>
<a class="sourceLine" id="cb6-17" data-line-number="17">    <span class="fu">jobs:</span></a>
<a class="sourceLine" id="cb6-18" data-line-number="18">      <span class="kw">-</span> <span class="fu">build:</span></a>
<a class="sourceLine" id="cb6-19" data-line-number="19">          <span class="fu">filters:</span></a>
<a class="sourceLine" id="cb6-20" data-line-number="20">            <span class="fu">branches:</span></a>
<a class="sourceLine" id="cb6-21" data-line-number="21">              <span class="fu">only:</span><span class="at"> dump</span></a></code></pre></div>
<p>CircleCI は最初っから docker と docker-compose が入っているので，めちゃくちゃ楽ですね．</p>
<h3 id="リポジトリに-push">4. リポジトリに push</h3>
<p>ここが少しめんどくさい． CircleCI が自動で設定してくれるアクセストークンは Read Only なのだ． そのため，このままでは Push できない．</p>
<p>まぁこの辺りは公式も良く分かってるので，ちゃんとドキュメントが用意してある(英語だけどな！！)</p>
<ul>
<li><a href="https://circleci.com/docs/2.0/gh-bb-integration/#adding-readwrite-deployment-keys-to-github-or-bitbucket">Adding Read/Write Deployment Keys to GitHub or Bitbucket - CircleCI</a></li>
</ul>
<ol type="1">
<li><a href="https://help.github.com/articles/generating-ssh-keys/">GitHub のページ</a>を参考に SSH 鍵を作って(ただし <em>パスフレーズは入れちゃダメ</em>)</li>
<li>公開鍵を GitHub の <code>https://github.com/you/test-repo/settings/keys</code> に登録して</li>
<li>秘密鍵を CircleCI の <code>https://circleci.com/gh/you/test-repo/edit#ssh</code> に Hosename を <code>github.com</code> にして登録して</li>
<li>config.yml に以下のように fingerprints を書いて鍵を上書きする(チェックアウトする前に)</li>
</ol>
<div class="sourceCode" id="cb7"><pre class="sourceCode yaml"><code class="sourceCode yaml"><a class="sourceLine" id="cb7-1" data-line-number="1"><span class="fu">steps:</span></a>
<a class="sourceLine" id="cb7-2" data-line-number="2">  <span class="kw">-</span> <span class="fu">add_ssh_keys:</span></a>
<a class="sourceLine" id="cb7-3" data-line-number="3">    <span class="fu">fingerprints:</span></a>
<a class="sourceLine" id="cb7-4" data-line-number="4">      <span class="kw">-</span> <span class="st">&quot;SO:ME:FIN:G:ER:PR:IN:T&quot;</span></a></code></pre></div>
<h4 id="更新がある時だけ-push-する">更新がある時だけ Push する</h4>
<p>ようにしたいよね？ もちろんシェルスクリプトを書いて，<code>if</code> で分岐すればいいんだけど，めんどくさいのでシェル芸みたいにワンライナーで何とかしたい． 頑張ってググってみたら，同じ質問をしている人が居た．</p>
<ul>
<li><a href="https://stackoverflow.com/questions/22040113/how-to-let-jenkins-git-commit-only-if-there-are-changes">How to let Jenkins git commit only if there are changes? - Stack Overflow</a></li>
</ul>
<p><code>git diff --quiet &amp;&amp; git diff --staged --quiet || git commit -am 'Added license headers'</code> って感じにすれば良いみたい． なるほどなるほど．</p>
<h2 id="section"></h2>
<p>で，結果として <code>config.yml</code> の <code>jobs</code> の部分が以下のようになる．</p>
<div class="sourceCode" id="cb8"><pre class="sourceCode yaml"><code class="sourceCode yaml"><a class="sourceLine" id="cb8-1" data-line-number="1"><span class="fu">jobs:</span></a>
<a class="sourceLine" id="cb8-2" data-line-number="2">  <span class="fu">build:</span></a>
<a class="sourceLine" id="cb8-3" data-line-number="3">    <span class="fu">machine:</span><span class="at"> true</span></a>
<a class="sourceLine" id="cb8-4" data-line-number="4">    <span class="fu">steps:</span></a>
<a class="sourceLine" id="cb8-5" data-line-number="5">      <span class="kw">-</span> <span class="fu">add-ssh-keys:</span></a>
<a class="sourceLine" id="cb8-6" data-line-number="6">          <span class="fu">fingerprints:</span></a>
<a class="sourceLine" id="cb8-7" data-line-number="7">            <span class="kw">-</span> <span class="st">&quot;99:5c:f8:55:4d:2c:ab:aa:3a:e6:4b:73:1b:07:19:98&quot;</span></a>
<a class="sourceLine" id="cb8-8" data-line-number="8">      <span class="kw">-</span> checkout</a>
<a class="sourceLine" id="cb8-9" data-line-number="9">      <span class="kw">-</span> <span class="fu">run:</span></a>
<a class="sourceLine" id="cb8-10" data-line-number="10">          <span class="fu">name:</span><span class="at"> Git config</span></a>
<a class="sourceLine" id="cb8-11" data-line-number="11">          <span class="fu">command:</span><span class="at"> |</span></a>
<a class="sourceLine" id="cb8-12" data-line-number="12">             git config --global user.email <span class="st">&quot;example@example.com&quot;</span></a>
<a class="sourceLine" id="cb8-13" data-line-number="13">             git config --global user.name <span class="st">&quot;Bot&quot;</span></a>
<a class="sourceLine" id="cb8-14" data-line-number="14">      <span class="kw">-</span> <span class="fu">run:</span></a>
<a class="sourceLine" id="cb8-15" data-line-number="15">          <span class="fu">name:</span><span class="at"> Build Docker Image</span></a>
<a class="sourceLine" id="cb8-16" data-line-number="16">          <span class="fu">command:</span><span class="at"> docker-compose pull</span></a>
<a class="sourceLine" id="cb8-17" data-line-number="17">      <span class="kw">-</span> <span class="fu">run:</span></a>
<a class="sourceLine" id="cb8-18" data-line-number="18">          <span class="fu">name:</span><span class="at"> docker-compose run bot</span></a>
<a class="sourceLine" id="cb8-19" data-line-number="19">          <span class="fu">command:</span><span class="at"> |</span></a>
<a class="sourceLine" id="cb8-20" data-line-number="20">            docker-compose -f ./docker-compose.yml run bot</a>
<a class="sourceLine" id="cb8-21" data-line-number="21">      <span class="kw">-</span> <span class="fu">run:</span></a>
<a class="sourceLine" id="cb8-22" data-line-number="22">          <span class="fu">name:</span><span class="at"> Push update json</span></a>
<a class="sourceLine" id="cb8-23" data-line-number="23">          <span class="fu">command:</span><span class="at"> |</span></a>
<a class="sourceLine" id="cb8-24" data-line-number="24">            git status</a>
<a class="sourceLine" id="cb8-25" data-line-number="25">            git diff --quiet &amp;&amp; git diff --staged --quiet || git commit -am <span class="st">&quot;[skip ci] Update entry.json&quot;</span></a>
<a class="sourceLine" id="cb8-26" data-line-number="26">            git push origin dump</a></code></pre></div>
<p>コミットメッセージに <code>[skip ci]</code> と書いておけば，このコミットによる CI は無視される． また，<code>Git config</code> のところはコミットするのに最低限必要な設定を書いてある．</p>
<h3 id="cron-で回す">5. cron で回す</h3>
<p>CircleCI 2.0 で cron を書けるようになった． TravisCI と違い，どんな cron でも指定できる．</p>
<div class="sourceCode" id="cb9"><pre class="sourceCode yaml"><code class="sourceCode yaml"><a class="sourceLine" id="cb9-1" data-line-number="1"><span class="fu">workflows:</span></a>
<a class="sourceLine" id="cb9-2" data-line-number="2">  <span class="fu">version:</span><span class="at"> 2</span></a>
<a class="sourceLine" id="cb9-3" data-line-number="3">  <span class="fu">normal_workflow:</span></a>
<a class="sourceLine" id="cb9-4" data-line-number="4">    <span class="fu">jobs:</span></a>
<a class="sourceLine" id="cb9-5" data-line-number="5">      <span class="kw">-</span> <span class="fu">build:</span></a>
<a class="sourceLine" id="cb9-6" data-line-number="6">          <span class="fu">filters:</span></a>
<a class="sourceLine" id="cb9-7" data-line-number="7">            <span class="fu">branches:</span></a>
<a class="sourceLine" id="cb9-8" data-line-number="8">              <span class="fu">only:</span><span class="at"> dump</span></a>
<a class="sourceLine" id="cb9-9" data-line-number="9">  <span class="fu">nightly_workflow:</span></a>
<a class="sourceLine" id="cb9-10" data-line-number="10">    <span class="fu">triggers:</span></a>
<a class="sourceLine" id="cb9-11" data-line-number="11">      <span class="kw">-</span> <span class="fu">schedule:</span></a>
<a class="sourceLine" id="cb9-12" data-line-number="12">          <span class="fu">cron:</span><span class="at"> </span><span class="st">&quot;0 0 * * *&quot;</span></a>
<a class="sourceLine" id="cb9-13" data-line-number="13">          <span class="fu">filters:</span></a>
<a class="sourceLine" id="cb9-14" data-line-number="14">            <span class="fu">branches:</span></a>
<a class="sourceLine" id="cb9-15" data-line-number="15">              <span class="fu">only:</span><span class="at"> dump</span></a>
<a class="sourceLine" id="cb9-16" data-line-number="16">    <span class="fu">jobs:</span></a>
<a class="sourceLine" id="cb9-17" data-line-number="17">      <span class="kw">-</span> build</a></code></pre></div>
<p>ちなみに，CircleCI のタイムゾーンは UTC なので，毎朝9時に実行されることになる．</p>
<h2 id="完成">完成</h2>
<p>見た目全く変わらないけど，一応 CircleCI から実行されてる．</p>
<p><img src="/assets/re-adventar-slack-bot/adventar-bot-1.jpg" /></p>
<h2 id="おしまい">おしまい</h2>
<p>ただし，CircleCI は月に使えるビルド時間が決まってて，1500分しかない． こいつはだいたい1分ぐらいかかるので月1500回． まぁ1日1回ぐらいなら余裕か．</p>
  </div>
</div>
</article>
]]></summary>
</entry>

</feed>
