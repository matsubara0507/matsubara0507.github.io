<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
    <title>ひげメモ</title>
    <link href="https://matsubara0507.github.io/feed.xml" rel="self" />
    <link href="https://matsubara0507.github.io" />
    <id>https://matsubara0507.github.io/feed.xml</id>
    <author>
        <name>MATSUBARA Nobutada</name>
        <email></email>
    </author>
    <updated>2019-09-21T00:00:00Z</updated>
    <entry>
    <title>CI で Haskell Stack の Docker Integration するために</title>
    <link href="https://matsubara0507.github.io/posts/2019-09-21-stack-build-image.html" />
    <id>https://matsubara0507.github.io/posts/2019-09-21-stack-build-image.html</id>
    <published>2019-09-21T00:00:00Z</published>
    <updated>2019-09-21T00:00:00Z</updated>
    <summary type="html"><![CDATA[<div class="post-content" itemprop="articleBody">
    <p>Haskell のビルドツール Stack の Docker Integration を使うことで，指定したイメージ内でホストマシンと全く同じように別の OS のバイナリをビルドできます． さらに一工夫をすることで，そのバイナリを埋め込んだ Docker Image を作ることができます(一工夫については「<a href="/posts/2019-06-10-build-haskell-app-docker-image-without-stack-image-cmd.html">stack image コマンドなしに Haskell アプリの Docker イメージを作る</a>」に書いた)</p>
<p>僕はこのプロセスを TravisCI で行い，<code>master</code> プッシュした時に <code>latest</code> イメージを更新してました． が，どうしても CI のビルド時間が長すぎた(1ステップ30分かかることもしばしば)ので改善しました． っていう話です．</p>
<h2 id="何が遅いのか">何が遅いのか</h2>
<p>TravisCI のログを見てみる:</p>
<p><img src="/assets/stack-build-image/ci-log-1.jpg"></img></p>
<p><code>1571.75s</code> もかかってるのは依存パッケージのみをビルドしているステップだ． 現状の主原因は単純に Haskell Stack のビルドがゲキオモなせい(巷でもよく言われてる)． でもこれは初回だけで，Stack v2 からは <a href="https://www.fpcomplete.com/blog/2018/08/pantry-part-3/specifying-dependencies">Pantry</a> というシステムを導入して効率よく依存パッケージを SQLite にキャッシュしている(2回目以降でキャッシュを使うのは v1 もだったが v2 からは別のプロジェクトでも共有できるようになった)． なので，TravisCI にうまくキャッシュをする設定をすることで CI 中のビルド時間は劇的に改善する:</p>
<div class="sourceCode" id="cb1"><pre class="sourceCode yaml"><code class="sourceCode yaml"><span id="cb1-1"><a href="#cb1-1"></a><span class="co"># .travis.yml の一部</span></span>
<span id="cb1-2"><a href="#cb1-2"></a><span class="fu">cache</span><span class="kw">:</span></span>
<span id="cb1-3"><a href="#cb1-3"></a><span class="at">  </span><span class="fu">timeout</span><span class="kw">:</span><span class="at"> </span><span class="dv">360</span></span>
<span id="cb1-4"><a href="#cb1-4"></a><span class="at">  </span><span class="fu">directories</span><span class="kw">:</span></span>
<span id="cb1-5"><a href="#cb1-5"></a><span class="at">    </span><span class="kw">-</span><span class="at"> </span><span class="st">&quot;$HOME/.stack/&quot;</span><span class="co">     # Pantry のキャッシュはココ</span></span>
<span id="cb1-6"><a href="#cb1-6"></a><span class="at">    </span><span class="kw">-</span><span class="at"> </span><span class="st">&quot;$HOME/.local/bin/&quot;</span><span class="co"> # ココには stack が入る</span></span>
<span id="cb1-7"><a href="#cb1-7"></a><span class="at">    </span><span class="kw">-</span><span class="at"> </span><span class="st">&quot;.stack-work/&quot;</span><span class="co">      # プロジェクト固有のキャッシュはココ</span></span></code></pre></div>
<p><img src="/assets/stack-build-image/ci-log-2.jpg"></img></p>
<p>さて残りの <code>371.27s</code> はなんと <code>docker pull</code> にかかってる時間だ．</p>
<h3 id="fpcostack-build">fpco/stack-build</h3>
<p>Stack の Docker Integration を利用することで指定した Docker Image 内でビルドを実行する． つまり，指定した Docker Image をプルしてくる必要がある． ログからわかるようにこの時点では <a href="https://hub.docker.com/r/fpco/stack-build/"><code>fpco/stack-build</code></a> という Stack の開発チームが提供している公式イメージを使っている:</p>
<div class="sourceCode" id="cb2"><pre class="sourceCode yaml"><code class="sourceCode yaml"><span id="cb2-1"><a href="#cb2-1"></a><span class="co"># stack.yaml の一部</span></span>
<span id="cb2-2"><a href="#cb2-2"></a><span class="fu">docker</span><span class="kw">:</span></span>
<span id="cb2-3"><a href="#cb2-3"></a><span class="at">  </span><span class="fu">repo</span><span class="kw">:</span><span class="at"> fpco/stack-build</span></span>
<span id="cb2-4"><a href="#cb2-4"></a><span class="at">  </span><span class="fu">enable</span><span class="kw">:</span><span class="at"> </span><span class="ch">false</span></span></code></pre></div>
<p>Docker Hub を見てみるとわかるのだが，なんと3GBもある(<a href="https://github.com/docker/hub-feedback/issues/331#issuecomment-141544523">Docker Hub に書いてあるのは圧縮されたサイズ</a>なので，手元での実際のサイズはなんと8.5GBもある)． もちろんローカルなら同じイメージを何度もプルすることはないので問題ないのだが，残念ながら TravisCI には Docker Image をキャッシュしない． 無理やり固めてキャッシュすることは可能だが，試してみたらそっちの方が時間がかかった(8.5GBもあるからね)．</p>
<h2 id="軽いイメージを作る">軽いイメージを作る</h2>
<p>なんでこんなにもあるのかは知らないけど，大きいなら小さくすれば良い． ということで自作することにした:</p>
<ul>
<li><a href="https://hub.docker.com/r/matsubara0507/stack-build">matsubara0507/stack-build - Docker Hub</a></li>
</ul>
<p>イメージサイズは125MB(非圧縮サイズは380MB)． とりあえず，必要そうなものだけを <code>apt-get</code> して，自分のプログラムがビルドできるのだけ試した:</p>
<div class="sourceCode" id="cb3"><pre class="sourceCode dockerfile"><code class="sourceCode dockerfile"><span id="cb3-1"><a href="#cb3-1"></a><span class="kw">FROM</span> ubuntu:18.04</span>
<span id="cb3-2"><a href="#cb3-2"></a><span class="kw">RUN</span> apt-get update &amp;&amp; apt-get install -y \</span>
<span id="cb3-3"><a href="#cb3-3"></a>    curl \</span>
<span id="cb3-4"><a href="#cb3-4"></a>    gcc \</span>
<span id="cb3-5"><a href="#cb3-5"></a>    g++ \</span>
<span id="cb3-6"><a href="#cb3-6"></a>    git \</span>
<span id="cb3-7"><a href="#cb3-7"></a>    gnupg \</span>
<span id="cb3-8"><a href="#cb3-8"></a>    libc6-dev \</span>
<span id="cb3-9"><a href="#cb3-9"></a>    libffi-dev \</span>
<span id="cb3-10"><a href="#cb3-10"></a>    libgmp-dev \</span>
<span id="cb3-11"><a href="#cb3-11"></a>    make \</span>
<span id="cb3-12"><a href="#cb3-12"></a>    netbase \</span>
<span id="cb3-13"><a href="#cb3-13"></a>    xz-utils \</span>
<span id="cb3-14"><a href="#cb3-14"></a>    zlib1g-dev \</span>
<span id="cb3-15"><a href="#cb3-15"></a> &amp;&amp; apt-get clean \</span>
<span id="cb3-16"><a href="#cb3-16"></a> &amp;&amp; rm -rf /var/lib/apt/lists/*</span>
<span id="cb3-17"><a href="#cb3-17"></a><span class="kw">ENV</span> STACK_VERSION=<span class="st">&quot;2.1.3&quot;</span></span>
<span id="cb3-18"><a href="#cb3-18"></a><span class="kw">RUN</span> curl -sSL https://get.haskellstack.org/ | sh \</span>
<span id="cb3-19"><a href="#cb3-19"></a> &amp;&amp; stack upgrade --binary-version=${STACK_VERSION}</span></code></pre></div>
<p>なので，他の人が使ってもちゃんとビルドできる保証はない． もちろん，これで CI の時間も <code>30s</code> ぐらいに短縮した(キャッシュの解凍・圧縮に3分ぐらいかかっちゃうんだけど)．</p>
<h2 id="section"></h2>
<p>ちなみに，一通りできてから気づいたのだが，ちゃんと公式にも小さいイメージができてた(半年ぐらい前からっぽい)．</p>
<ul>
<li><a href="https://hub.docker.com/r/fpco/stack-build-small">fpco/stack-build-small - Docker Hub</a></li>
</ul>
<p>圧縮サイズが390MBなので，自作の方が小さいから自分のをとりあえず困るまでは使うことにします．</p>
<h3 id="docker-integration-と-resolver">Docker Integration と Resolver</h3>
<p>Stack はビルド可能なパッケージのバージョンをまとめた Resolver を提供している． Resolver は設定ファイルで指定し，Docker Integration でイメージタグを指定しないと Resolver と同じ名前のタグを自動で利用してくれる．</p>
<div class="sourceCode" id="cb4"><pre class="sourceCode yaml"><code class="sourceCode yaml"><span id="cb4-1"><a href="#cb4-1"></a><span class="co"># stack.yaml</span></span>
<span id="cb4-2"><a href="#cb4-2"></a><span class="fu">resolver</span><span class="kw">:</span><span class="at"> lts-14.6</span></span>
<span id="cb4-3"><a href="#cb4-3"></a><span class="fu">packages</span><span class="kw">:</span></span>
<span id="cb4-4"><a href="#cb4-4"></a><span class="kw">-</span><span class="at"> .</span></span>
<span id="cb4-5"><a href="#cb4-5"></a><span class="fu">extra-deps</span><span class="kw">:</span><span class="at"> </span><span class="kw">[]</span></span>
<span id="cb4-6"><a href="#cb4-6"></a></span>
<span id="cb4-7"><a href="#cb4-7"></a><span class="fu">docker</span><span class="kw">:</span></span>
<span id="cb4-8"><a href="#cb4-8"></a><span class="at">  </span><span class="fu">repo</span><span class="kw">:</span><span class="at"> matsubara0507/stack-build</span></span>
<span id="cb4-9"><a href="#cb4-9"></a><span class="at">  </span><span class="fu">enable</span><span class="kw">:</span><span class="at"> </span><span class="ch">false</span></span></code></pre></div>
<p>この場合は <code>matsubara0507/stack-build:lts-14.6</code> イメージを利用する． この Resolver の更新頻度は結構高く，Resolver が出るたびに <code>matsubara0507/stack-build</code> のタグを増やさないといけない． 困った．</p>
<p>(先にネタバレをすると，<code>docker.repo</code> でタグまで指定すれば更新する必要は微塵もなかった)</p>
<h2 id="どうやって更新するか">どうやって更新するか</h2>
<p>外のソフトウェアのバージョンアップを検知して自分の Docker Image を更新するのって結構大変なんだが，昔同じようなシチュエーションで支援プログラムを作ったのを思い出した:</p>
<h1 id="section-1"><iframe width="320" height="163" scrolling="no" frameborder="0" src="https://matsubara0507.github.io/my-github-cards/?target=matsubara0507/dockwright"></iframe></h1>
<p>こいつを改良してバージョンを追うことにした．</p>
<h3 id="dockwright">Dockwright</h3>
<p>もともと利用したのはこれ:</p>
<ul>
<li><a href="/posts/2018-06-15-introduce-elchemy-part1.html">Elchemy 入門 : その１</a></li>
</ul>
<p>Elchemy というプログラミング言語のバージョンを追って Dockerfile を作り直す． そのために GitHub のリリースなどをチェックして，Dockerfile の <code>ENV</code> を書き換えるような動作をしている． ちなみに，Docker Image の作成自体は DockerHub の自動ビルドを使っていた．</p>
<p>今回の要件は2つ:</p>
<ol type="1">
<li><code>ENV</code> ではなく Docker Image タグとして利用したい</li>
<li>GitHub ではなく <a href="https://www.stackage.org/download/snapshots.json">Stackage の API</a> の特定のキーの値を見たい</li>
</ol>
<p>そのためにタグをいじるための機能を追加した(実装それ自体に面白さは特にないので割愛):</p>
<pre><code># 設定したイメージの DockarHub 上の全てのタグを取得
$ dockwright --tags

# 設定した `tags` からタグを取得し DockerHub のタグにないものを出力
# dockwright --new-tags</code></pre>
<p><code>tags</code> の設定は次のような感じ:</p>
<div class="sourceCode" id="cb6"><pre class="sourceCode yaml"><code class="sourceCode yaml"><span id="cb6-1"><a href="#cb6-1"></a><span class="co"># .dockwright.yaml の一部</span></span>
<span id="cb6-2"><a href="#cb6-2"></a><span class="fu">tags</span><span class="kw">:</span></span>
<span id="cb6-3"><a href="#cb6-3"></a><span class="co"># latest は常に</span></span>
<span id="cb6-4"><a href="#cb6-4"></a><span class="kw">-</span><span class="at"> </span><span class="fu">type</span><span class="kw">:</span><span class="at"> value</span></span>
<span id="cb6-5"><a href="#cb6-5"></a><span class="at">  </span><span class="fu">keys</span><span class="kw">:</span></span>
<span id="cb6-6"><a href="#cb6-6"></a><span class="at">  </span><span class="kw">-</span><span class="at"> latest</span></span>
<span id="cb6-7"><a href="#cb6-7"></a><span class="at">  </span><span class="fu">always</span><span class="kw">:</span><span class="at"> </span><span class="ch">true</span></span>
<span id="cb6-8"><a href="#cb6-8"></a><span class="co"># 前述した API の返り値 JSON の特定のキーの値</span></span>
<span id="cb6-9"><a href="#cb6-9"></a><span class="kw">-</span><span class="at"> </span><span class="fu">type</span><span class="kw">:</span><span class="at"> refer</span></span>
<span id="cb6-10"><a href="#cb6-10"></a><span class="at">  </span><span class="fu">ref</span><span class="kw">:</span><span class="at"> https://www.stackage.org/download/snapshots.json</span></span>
<span id="cb6-11"><a href="#cb6-11"></a><span class="at">  </span><span class="fu">keys</span><span class="kw">:</span></span>
<span id="cb6-12"><a href="#cb6-12"></a><span class="at">  </span><span class="kw">-</span><span class="at"> nightly</span></span>
<span id="cb6-13"><a href="#cb6-13"></a><span class="at">  </span><span class="kw">-</span><span class="at"> lts</span></span></code></pre></div>
<p>そして次のような Makefile とシェルスクリプトを書いて更新している:</p>
<div class="sourceCode" id="cb7"><pre class="sourceCode makefile"><code class="sourceCode makefile"><span id="cb7-1"><a href="#cb7-1"></a><span class="co"># Makefile</span></span>
<span id="cb7-2"><a href="#cb7-2"></a><span class="dt">DOCKER_CMD   </span><span class="ch">=</span><span class="st"> docker run --rm</span></span>
<span id="cb7-3"><a href="#cb7-3"></a><span class="dt">IMAGE        </span><span class="ch">=</span><span class="st"> matsubara0507/dockwright:1.1.0</span></span>
<span id="cb7-4"><a href="#cb7-4"></a><span class="dt">BUILD_CMD    </span><span class="ch">=</span><span class="st"> dockwright .dockwright.yaml</span></span>
<span id="cb7-5"><a href="#cb7-5"></a></span>
<span id="cb7-6"><a href="#cb7-6"></a><span class="dv">tags:</span></span>
<span id="cb7-7"><a href="#cb7-7"></a>	<span class="ch">${</span><span class="dt">DOCKER_CMD</span><span class="ch">}</span> -v `pwd`/<span class="ch">${</span><span class="kw">dir</span><span class="ch">}</span>:/work <span class="ch">${</span><span class="dt">IMAGE</span><span class="ch">}</span> <span class="ch">${</span><span class="dt">BUILD_CMD</span><span class="ch">}</span> --tags --with-name</span>
<span id="cb7-8"><a href="#cb7-8"></a></span>
<span id="cb7-9"><a href="#cb7-9"></a><span class="dv">new-tags:</span></span>
<span id="cb7-10"><a href="#cb7-10"></a>	<span class="ch">${</span><span class="dt">DOCKER_CMD</span><span class="ch">}</span> -v `pwd`/<span class="ch">${</span><span class="kw">dir</span><span class="ch">}</span>:/work <span class="ch">${</span><span class="dt">IMAGE</span><span class="ch">}</span> <span class="ch">${</span><span class="dt">BUILD_CMD</span><span class="ch">}</span> --new-tags --with-name</span>
<span id="cb7-11"><a href="#cb7-11"></a></span>
<span id="cb7-12"><a href="#cb7-12"></a><span class="dv">dockerfile:</span></span>
<span id="cb7-13"><a href="#cb7-13"></a>	<span class="ch">${</span><span class="dt">DOCKER_CMD</span><span class="ch">}</span> -v `pwd`/<span class="ch">${</span><span class="kw">dir</span><span class="ch">}</span>:/work <span class="ch">${</span><span class="dt">IMAGE</span><span class="ch">}</span> <span class="ch">${</span><span class="dt">BUILD_CMD</span><span class="ch">}</span></span>
<span id="cb7-14"><a href="#cb7-14"></a></span>
<span id="cb7-15"><a href="#cb7-15"></a><span class="dv">image:</span></span>
<span id="cb7-16"><a href="#cb7-16"></a>	docker build -t <span class="ch">${</span><span class="dt">tag</span><span class="ch">}</span> <span class="ch">${</span><span class="kw">dir</span><span class="ch">}</span></span>
<span id="cb7-17"><a href="#cb7-17"></a></span>
<span id="cb7-18"><a href="#cb7-18"></a><span class="dv">push:</span><span class="dt"> image</span></span>
<span id="cb7-19"><a href="#cb7-19"></a>	docker push <span class="ch">${</span><span class="dt">tag</span><span class="ch">}</span></span></code></pre></div>
<div class="sourceCode" id="cb8"><pre class="sourceCode sh"><code class="sourceCode bash"><span id="cb8-1"><a href="#cb8-1"></a><span class="co"># update-image.sh</span></span>
<span id="cb8-2"><a href="#cb8-2"></a><span class="va">target=$1</span></span>
<span id="cb8-3"><a href="#cb8-3"></a><span class="fu">make</span> dockerfile dir=<span class="va">${target}</span></span>
<span id="cb8-4"><a href="#cb8-4"></a><span class="fu">git</span> status</span>
<span id="cb8-5"><a href="#cb8-5"></a><span class="fu">git</span> add -A <span class="va">${target}</span></span>
<span id="cb8-6"><a href="#cb8-6"></a><span class="fu">git</span> diff --quiet <span class="kw">&amp;&amp;</span> <span class="fu">git</span> diff --staged --quiet <span class="kw">||</span> <span class="fu">git</span> commit -m <span class="st">&quot;[skip ci] Update </span><span class="va">${target}</span><span class="st"> image&quot;</span></span>
<span id="cb8-7"><a href="#cb8-7"></a><span class="fu">make</span> -s new-tags dir=<span class="va">${target}</span> <span class="kw">|</span> <span class="fu">xargs</span> -ITAG make push dir=<span class="va">${target}</span> tag=TAG</span></code></pre></div>
<p>実際に使っているリポジトリは<a href="https://github.com/matsubara0507/haskell-dockerfiles">コレ</a>．</p>
<h2 id="おまけ-結局どこが重い">おまけ: 結局どこが重い？</h2>
<p>なんで <code>fpco/stack-build</code> がこんなに重いのか，調べてみた:</p>
<pre><code>$ docker history fpco/stack-build:lts-14.4
IMAGE               CREATED             CREATED BY                                      SIZE
9adc774bb5e5        5 weeks ago         /bin/sh -c #(nop)  CMD [&quot;bash&quot;]                 0B
&lt;missing&gt;           5 weeks ago         /bin/sh -c #(nop)  ENTRYPOINT [&quot;/usr/local/s…   0B
&lt;missing&gt;           5 weeks ago         |11 BOOTSTRAP_COMMIT=d4143f1845f26e8e99d0a1a…   391kB
&lt;missing&gt;           5 weeks ago         |11 BOOTSTRAP_COMMIT=d4143f1845f26e8e99d0a1a…   93.5MB
&lt;missing&gt;           5 weeks ago         |11 BOOTSTRAP_COMMIT=d4143f1845f26e8e99d0a1a…   17B
&lt;missing&gt;           5 weeks ago         |11 BOOTSTRAP_COMMIT=d4143f1845f26e8e99d0a1a…   8.12GB
&lt;missing&gt;           5 weeks ago         |11 BOOTSTRAP_COMMIT=d4143f1845f26e8e99d0a1a…   239MB
&lt;missing&gt;           5 weeks ago         /bin/sh -c #(nop)  ENV LANG=C.UTF-8 LC_ALL=C…   0B
&lt;missing&gt;           5 weeks ago         /bin/sh -c #(nop)  ARG STACK_ROOT=/home/stac…   0B
&lt;missing&gt;           5 weeks ago         /bin/sh -c #(nop)  ARG VARIANT=build            0B
&lt;missing&gt;           5 weeks ago         /bin/sh -c #(nop)  ARG DEBIAN_FRONTEND=nonin…   0B
&lt;missing&gt;           5 weeks ago         /bin/sh -c #(nop)  ARG BOOTSTRAP_COMMIT=d414…   0B
&lt;missing&gt;           5 weeks ago         /bin/sh -c #(nop)  ARG LLVM_VERSION=3.9         0B
&lt;missing&gt;           5 weeks ago         /bin/sh -c #(nop)  ARG JVM_PATH=/usr/lib/jvm…   0B
&lt;missing&gt;           5 weeks ago         /bin/sh -c #(nop)  ARG CUDA_VERSION=10.0        0B
&lt;missing&gt;           5 weeks ago         /bin/sh -c #(nop)  ARG STACK_VERSION=2.1.3      0B
&lt;missing&gt;           5 weeks ago         /bin/sh -c #(nop)  ARG PID1_VERSION=0.1.2.0     0B
&lt;missing&gt;           5 weeks ago         /bin/sh -c #(nop)  ARG LTS_SLUG=lts-14.0        0B
&lt;missing&gt;           5 weeks ago         /bin/sh -c #(nop)  ARG GHC_VERSION=8.6.5        0B
&lt;missing&gt;           5 weeks ago         /bin/sh -c #(nop)  LABEL maintainer=manny@fp…   0B
&lt;missing&gt;           8 weeks ago         /bin/sh -c #(nop)  CMD [&quot;/bin/bash&quot;]            0B
&lt;missing&gt;           8 weeks ago         /bin/sh -c mkdir -p /run/systemd &amp;&amp; echo &#39;do…   7B
&lt;missing&gt;           8 weeks ago         /bin/sh -c set -xe   &amp;&amp; echo &#39;#!/bin/sh&#39; &gt; /…   745B
&lt;missing&gt;           8 weeks ago         /bin/sh -c [ -z &quot;$(apt-get indextargets)&quot; ]     987kB
&lt;missing&gt;           8 weeks ago         /bin/sh -c #(nop) ADD file:3ddd02d976792b6c6…   63.2MB</code></pre>
<p>上から6番目，<code>--no-trunc</code> 付けて確認してみたら<a href="https://github.com/commercialhaskell/stack/blob/b8f8ec203209fccb1a86b9e8705f16125845254b/etc/dockerfiles/stack-build/lts-13.20/Dockerfile#L29-L46">ココ</a>だった． そう，犯人は <a href="https://github.com/commercialhaskell/stackage/blob/f5d1776c9c5d311469f889d251faa97bdd62e625/debian-bootstrap.sh"><code>debian-bootstrap.sh</code></a> です．</p>
<p>要するに，Stackage にある全てのパッケージを利用するための全ての <code>apt-get install</code> やらなんやらをしている． そりゃ重いわけだ．</p>
<h2 id="おしまい">おしまい</h2>
<p>CI が爆速になったし，自動で Resolver の追従もしてくれるし，私は満足です． ちょこっとずつ古いプロジェクトの置き換えしている．</p>
  </div>]]></summary>
</entry>
<entry>
    <title>Elm で QR コードリーダー</title>
    <link href="https://matsubara0507.github.io/posts/2019-08-26-qr-code-reader-with-elm.html" />
    <id>https://matsubara0507.github.io/posts/2019-08-26-qr-code-reader-with-elm.html</id>
    <published>2019-08-26T00:00:00Z</published>
    <updated>2019-08-26T00:00:00Z</updated>
    <summary type="html"><![CDATA[<div class="post-content" itemprop="articleBody">
    <p>タイトル通りです． ただし，jsQR とポートを使ってるだけです． Elm 側で QR コードのデコードをするわけじゃないので，そういうのを期待した人はすいません．</p>
<p>今回の実装は下記のリポジトリにあります:</p>
<h4 id="section"><iframe width="320" height="215" scrolling="no" frameborder="0" src="https://matsubara0507.github.io/my-github-cards/?target=matsubara0507/anaqram-web-samples"></iframe></h4>
<p>リポジトリの詳細のとこを読むとわかるんですけど，実はこの話は書典7のネタの一部を抜粋したものです(典の方はもっと丁寧に書いてます)．</p>
<h2 id="elm-からカメラを使う">Elm からカメラを使う</h2>
<p>ブラウザからカメラを使うには JavaScript の <a href="https://developer.mozilla.org/ja/docs/Web/API/MediaDevices/getUserMedia"><code>MediaDevices.getUserMedia()</code></a> を使う． このメソッドを使うには <a href="https://webrtc.github.io/samples/src/content/getusermedia/gum">WebRTC のサンプルコード</a>を参考に次のように書く:</p>
<div class="sourceCode" id="cb1"><pre class="sourceCode javascript"><code class="sourceCode javascript"><span id="cb1-1"><a href="#cb1-1"></a><span class="kw">const</span> constraints <span class="op">=</span> <span class="op">{</span> <span class="dt">audio</span><span class="op">:</span> <span class="kw">false</span><span class="op">,</span> <span class="dt">video</span><span class="op">:</span> <span class="kw">true</span> <span class="op">};</span></span>
<span id="cb1-2"><a href="#cb1-2"></a></span>
<span id="cb1-3"><a href="#cb1-3"></a><span class="kw">async</span> <span class="kw">function</span> <span class="at">initCamera</span>(videoId) <span class="op">{</span></span>
<span id="cb1-4"><a href="#cb1-4"></a>  <span class="cf">try</span> <span class="op">{</span></span>
<span id="cb1-5"><a href="#cb1-5"></a>    <span class="kw">const</span> stream <span class="op">=</span> <span class="cf">await</span> <span class="va">navigator</span>.<span class="va">mediaDevices</span>.<span class="at">getUserMedia</span>(constraints)<span class="op">;</span></span>
<span id="cb1-6"><a href="#cb1-6"></a>    <span class="va">document</span>.<span class="at">getElementById</span>(videoId).<span class="at">srcObject</span> <span class="op">=</span> stream<span class="op">;</span></span>
<span id="cb1-7"><a href="#cb1-7"></a>  <span class="op">}</span> <span class="cf">catch</span> (e) <span class="op">{</span></span>
<span id="cb1-8"><a href="#cb1-8"></a>    <span class="at">handleError</span>(e)<span class="op">;</span> <span class="co">// ここの実装は割愛</span></span>
<span id="cb1-9"><a href="#cb1-9"></a>  <span class="op">}</span></span>
<span id="cb1-10"><a href="#cb1-10"></a><span class="op">}</span></span></code></pre></div>
<p>HTML 側は <code>id=videoId</code> を設定した <code>video</code> タグを用意するだけで良い． <code>initCamera</code> メソッドを Elm から使うにはポート機能を使って呼び出す:</p>
<div class="sourceCode" id="cb2"><pre class="sourceCode elm"><code class="sourceCode elm"><span id="cb2-1"><a href="#cb2-1"></a><span class="co">-- QRCode.elm</span></span>
<span id="cb2-2"><a href="#cb2-2"></a><span class="kw">port</span> <span class="kw">module</span> <span class="dt">QRCode</span> <span class="kw">exposing</span> (<span class="op">..</span>)</span>
<span id="cb2-3"><a href="#cb2-3"></a></span>
<span id="cb2-4"><a href="#cb2-4"></a><span class="kw">port</span> <span class="fu">startCamera</span> : () <span class="op">-&gt;</span> <span class="dt">Cmd</span> <span class="fu">msg</span></span></code></pre></div>
<p>純粋関数型プログラミング言語である Elm にとって JavaScript のコードを直接呼び出すことは非純粋な行為(<code>Cmd a</code> 型は非純粋な型)であり，<code>port</code> プレフィックスを使って普通の関数とは全く別に管理される(<code>port</code> が付くモジュール・関数はパッケージに含めることができない)． より詳しいポート機能については <a href="https://guide.elm-lang.jp/interop/ports.html">guide.elm-lang.jp のポートのページ</a>を読むと良いだろう．</p>
<p>さて，<code>startCamera</code> 関数の実装は JavaScript 側で次のように行った:</p>
<div class="sourceCode" id="cb3"><pre class="sourceCode javascript"><code class="sourceCode javascript"><span id="cb3-1"><a href="#cb3-1"></a><span class="co">// flags は Elm コードの JavaScript 側から与える初期値</span></span>
<span id="cb3-2"><a href="#cb3-2"></a><span class="kw">const</span> flags <span class="op">=</span> <span class="op">{</span></span>
<span id="cb3-3"><a href="#cb3-3"></a>  <span class="dt">ids</span><span class="op">:</span> <span class="op">{</span> <span class="dt">video</span><span class="op">:</span> <span class="st">&#39;video_area&#39;</span> <span class="op">},</span></span>
<span id="cb3-4"><a href="#cb3-4"></a>  <span class="dt">size</span><span class="op">:</span> <span class="op">{</span> <span class="dt">width</span><span class="op">:</span> <span class="dv">300</span><span class="op">,</span> <span class="dt">height</span><span class="op">:</span> <span class="dv">300</span> <span class="op">}</span></span>
<span id="cb3-5"><a href="#cb3-5"></a><span class="op">};</span></span>
<span id="cb3-6"><a href="#cb3-6"></a></span>
<span id="cb3-7"><a href="#cb3-7"></a><span class="co">// true だけではなくカメラのサイズとリアカメラ優先フラグ(facingMode)を与える</span></span>
<span id="cb3-8"><a href="#cb3-8"></a><span class="kw">const</span> constraints <span class="op">=</span> <span class="op">{</span></span>
<span id="cb3-9"><a href="#cb3-9"></a>  <span class="dt">audio</span><span class="op">:</span> <span class="kw">false</span><span class="op">,</span></span>
<span id="cb3-10"><a href="#cb3-10"></a>  <span class="dt">video</span><span class="op">:</span> <span class="op">{</span>...<span class="va">flags</span>.<span class="at">size</span><span class="op">,</span> <span class="dt">facingMode</span><span class="op">:</span> <span class="st">&quot;environment&quot;</span> <span class="op">}</span></span>
<span id="cb3-11"><a href="#cb3-11"></a><span class="op">};</span></span>
<span id="cb3-12"><a href="#cb3-12"></a></span>
<span id="cb3-13"><a href="#cb3-13"></a><span class="kw">const</span> app <span class="op">=</span> <span class="va">Elm</span>.<span class="va">Main</span>.<span class="at">init</span>(<span class="op">{</span></span>
<span id="cb3-14"><a href="#cb3-14"></a>  <span class="dt">node</span><span class="op">:</span> <span class="va">document</span>.<span class="at">getElementById</span>(<span class="st">&#39;main&#39;</span>)<span class="op">,</span></span>
<span id="cb3-15"><a href="#cb3-15"></a>  <span class="dt">flags</span><span class="op">:</span> flags</span>
<span id="cb3-16"><a href="#cb3-16"></a><span class="op">}</span>)<span class="op">;</span></span>
<span id="cb3-17"><a href="#cb3-17"></a><span class="va">app</span>.<span class="va">ports</span>.<span class="va">startCamera</span>.<span class="at">subscribe</span>(<span class="kw">function</span>() <span class="op">{</span> <span class="at">initCamera</span>(<span class="va">flags</span>.<span class="va">ids</span>.<span class="at">video</span>) <span class="op">}</span>)<span class="op">;</span></span></code></pre></div>
<p>あとはこんな感じに Elm 側で呼び出す:</p>
<div class="sourceCode" id="cb4"><pre class="sourceCode elm"><code class="sourceCode elm"><span id="cb4-1"><a href="#cb4-1"></a><span class="kw">module</span> <span class="dt">Main</span> <span class="kw">exposing</span> (<span class="fu">main</span>)</span>
<span id="cb4-2"><a href="#cb4-2"></a></span>
<span id="cb4-3"><a href="#cb4-3"></a><span class="kw">import</span> <span class="dt">QRCode</span></span>
<span id="cb4-4"><a href="#cb4-4"></a><span class="kw">import</span> <span class="dt">Browser</span></span>
<span id="cb4-5"><a href="#cb4-5"></a><span class="kw">import</span> <span class="dt">Html</span> <span class="kw">exposing</span> (<span class="op">..</span>)</span>
<span id="cb4-6"><a href="#cb4-6"></a><span class="kw">import</span> <span class="dt">Html</span><span class="op">.</span><span class="dt">Attributes</span> <span class="kw">exposing</span> (<span class="op">..</span>)</span>
<span id="cb4-7"><a href="#cb4-7"></a><span class="kw">import</span> <span class="dt">Html</span><span class="op">.</span><span class="dt">Events</span> <span class="kw">exposing</span> (<span class="fu">onClick</span>)</span>
<span id="cb4-8"><a href="#cb4-8"></a></span>
<span id="cb4-9"><a href="#cb4-9"></a><span class="fu">main</span> : <span class="dt">Program</span> <span class="dt">Config</span> <span class="dt">Model</span> <span class="dt">Msg</span></span>
<span id="cb4-10"><a href="#cb4-10"></a><span class="fu">main</span> <span class="op">=</span></span>
<span id="cb4-11"><a href="#cb4-11"></a>  <span class="dt">Browser</span><span class="op">.</span><span class="fu">element</span></span>
<span id="cb4-12"><a href="#cb4-12"></a>    { <span class="fu">init</span> <span class="op">=</span> <span class="fu">init</span></span>
<span id="cb4-13"><a href="#cb4-13"></a>    <span class="op">,</span> <span class="fu">view</span> <span class="op">=</span> <span class="fu">view</span></span>
<span id="cb4-14"><a href="#cb4-14"></a>    <span class="op">,</span> <span class="fu">update</span> <span class="op">=</span> <span class="fu">update</span></span>
<span id="cb4-15"><a href="#cb4-15"></a>    <span class="op">,</span> <span class="fu">subscriptions</span> <span class="op">=</span> \<span class="fu">_</span> <span class="op">-&gt;</span> <span class="dt">Sub</span><span class="op">.</span><span class="fu">none</span></span>
<span id="cb4-16"><a href="#cb4-16"></a>    }</span>
<span id="cb4-17"><a href="#cb4-17"></a></span>
<span id="cb4-18"><a href="#cb4-18"></a><span class="kw">type</span> <span class="kw">alias</span> <span class="dt">Config</span> <span class="op">=</span></span>
<span id="cb4-19"><a href="#cb4-19"></a>  { <span class="fu">ids</span> : { <span class="fu">video</span> : <span class="dt">String</span> }<span class="op">,</span> <span class="fu">size</span> : { <span class="fu">width</span> : <span class="dt">Int</span><span class="op">,</span> <span class="fu">height</span> : <span class="dt">Int</span> } }</span>
<span id="cb4-20"><a href="#cb4-20"></a></span>
<span id="cb4-21"><a href="#cb4-21"></a><span class="kw">type</span> <span class="kw">alias</span> <span class="dt">Model</span> <span class="op">=</span> { <span class="fu">config</span> : <span class="dt">Config</span> }</span>
<span id="cb4-22"><a href="#cb4-22"></a></span>
<span id="cb4-23"><a href="#cb4-23"></a><span class="fu">init</span> : <span class="dt">Config</span> <span class="op">-&gt;</span> (<span class="dt">Model</span><span class="op">,</span> <span class="dt">Cmd</span> <span class="dt">Msg</span>)</span>
<span id="cb4-24"><a href="#cb4-24"></a><span class="fu">init</span> <span class="fu">config</span> <span class="op">=</span> (<span class="dt">Model</span> <span class="fu">config</span><span class="op">,</span> <span class="dt">Cmd</span><span class="op">.</span><span class="fu">none</span>)</span>
<span id="cb4-25"><a href="#cb4-25"></a></span>
<span id="cb4-26"><a href="#cb4-26"></a><span class="kw">type</span> <span class="dt">Msg</span> <span class="op">=</span> <span class="dt">EnableCamera</span></span>
<span id="cb4-27"><a href="#cb4-27"></a></span>
<span id="cb4-28"><a href="#cb4-28"></a><span class="fu">update</span> : <span class="dt">Msg</span> <span class="op">-&gt;</span> <span class="dt">Model</span> <span class="op">-&gt;</span> (<span class="dt">Model</span><span class="op">,</span> <span class="dt">Cmd</span> <span class="dt">Msg</span>)</span>
<span id="cb4-29"><a href="#cb4-29"></a><span class="fu">update</span> <span class="fu">msg</span> <span class="fu">model</span> <span class="op">=</span></span>
<span id="cb4-30"><a href="#cb4-30"></a>  <span class="cf">case</span> <span class="fu">msg</span> <span class="cf">of</span></span>
<span id="cb4-31"><a href="#cb4-31"></a>    <span class="dt">EnableCamera</span> <span class="op">-&gt;</span> (<span class="fu">model</span><span class="op">,</span> <span class="dt">QRCode</span><span class="op">.</span><span class="fu">startCamera</span> ())</span>
<span id="cb4-32"><a href="#cb4-32"></a></span>
<span id="cb4-33"><a href="#cb4-33"></a><span class="fu">view</span> : <span class="dt">Model</span> <span class="op">-&gt;</span> <span class="dt">Html</span> <span class="dt">Msg</span></span>
<span id="cb4-34"><a href="#cb4-34"></a><span class="fu">view</span> <span class="fu">model</span> <span class="op">=</span></span>
<span id="cb4-35"><a href="#cb4-35"></a>  <span class="fu">div</span> []</span>
<span id="cb4-36"><a href="#cb4-36"></a>    [ <span class="fu">video</span></span>
<span id="cb4-37"><a href="#cb4-37"></a>        [ <span class="fu">id</span> <span class="fu">model</span><span class="op">.</span><span class="fu">config</span><span class="op">.</span><span class="fu">ids</span><span class="op">.</span><span class="fu">video</span><span class="op">,</span> <span class="fu">style</span> <span class="st">&quot;background-color&quot;</span> <span class="st">&quot;#000&quot;</span><span class="op">,</span> <span class="fu">autoplay</span> <span class="dt">True</span></span>
<span id="cb4-38"><a href="#cb4-38"></a>        <span class="op">,</span> <span class="fu">width</span> <span class="fu">model</span><span class="op">.</span><span class="fu">config</span><span class="op">.</span><span class="fu">size</span><span class="op">.</span><span class="fu">width</span><span class="op">,</span> <span class="fu">height</span> <span class="fu">model</span><span class="op">.</span><span class="fu">config</span><span class="op">.</span><span class="fu">size</span><span class="op">.</span><span class="fu">height</span></span>
<span id="cb4-39"><a href="#cb4-39"></a>        <span class="co">-- iOS のために必要</span></span>
<span id="cb4-40"><a href="#cb4-40"></a>        <span class="op">,</span> <span class="fu">attribute</span> <span class="st">&quot;playsinline&quot;</span> <span class="st">&quot;&quot;</span></span>
<span id="cb4-41"><a href="#cb4-41"></a>        ] []</span>
<span id="cb4-42"><a href="#cb4-42"></a>    <span class="op">,</span> <span class="fu">p</span> [] [ <span class="fu">button</span> [ <span class="fu">onClick</span> <span class="dt">EnableCamera</span> ] [ <span class="fu">text</span> <span class="st">&quot;Enable Camera&quot;</span> ] ]</span>
<span id="cb4-43"><a href="#cb4-43"></a>    ]</span></code></pre></div>
<p>ボタンの <code>onClick</code> でイベントハンドラを受け取り，<code>startCamera</code> ポート関数を呼び出しているだけ． また，<code>Flags</code> 機能を使って <code>video</code> タグに必要な id を JavaScript 側と共有している． <a href="https://matsubara0507.github.io/anaqram-web-samples/step1/">ここ</a>で実際にビルド結果を触れる．</p>
<h2 id="qr-コードを読み取る">QR コードを読み取る</h2>
<p>Elm からカメラを起動できたので，次に QR コードを読み取る． 冒頭で述べた通り，QR コードのでコードには <a href="https://github.com/cozmo/jsQR">jsQR</a> という JavaScript のライブラリを利用する． jsQR の使い方は簡単で，<code>jsQR</code> というメソッドに <code>ImageData</code> オブジェクト(とサイズ)を渡してあげるだけ:</p>
<div class="sourceCode" id="cb5"><pre class="sourceCode javascript"><code class="sourceCode javascript"><span id="cb5-1"><a href="#cb5-1"></a><span class="co">// jsQR の README に載っているサンプルコード</span></span>
<span id="cb5-2"><a href="#cb5-2"></a><span class="kw">const</span> code <span class="op">=</span> <span class="at">jsQR</span>(imageData<span class="op">,</span> width<span class="op">,</span> height)<span class="op">;</span></span>
<span id="cb5-3"><a href="#cb5-3"></a><span class="co">// QR コードがなければ null になるようです</span></span>
<span id="cb5-4"><a href="#cb5-4"></a><span class="cf">if</span> (code) <span class="op">{</span></span>
<span id="cb5-5"><a href="#cb5-5"></a>  <span class="va">console</span>.<span class="at">log</span>(<span class="st">&quot;Found QR code&quot;</span><span class="op">,</span> code)<span class="op">;</span></span>
<span id="cb5-6"><a href="#cb5-6"></a><span class="op">}</span></span></code></pre></div>
<p><code>ImageData</code> オブジェクトはカメラ画像をいったん Canvas に退避させることで取得できる:</p>
<div class="sourceCode" id="cb6"><pre class="sourceCode javascript"><code class="sourceCode javascript"><span id="cb6-1"><a href="#cb6-1"></a><span class="kw">function</span> <span class="at">captureImage</span>(videoId<span class="op">,</span> captureId) <span class="op">{</span></span>
<span id="cb6-2"><a href="#cb6-2"></a>  <span class="kw">var</span> canvas <span class="op">=</span> <span class="va">document</span>.<span class="at">getElementById</span>(captureId)<span class="op">;</span></span>
<span id="cb6-3"><a href="#cb6-3"></a>  <span class="kw">var</span> video <span class="op">=</span> <span class="va">document</span>.<span class="at">getElementById</span>(videoId)<span class="op">;</span></span>
<span id="cb6-4"><a href="#cb6-4"></a>  <span class="va">canvas</span>.<span class="at">width</span>  <span class="op">=</span> <span class="va">video</span>.<span class="at">videoWidth</span><span class="op">;</span></span>
<span id="cb6-5"><a href="#cb6-5"></a>  <span class="va">canvas</span>.<span class="at">height</span> <span class="op">=</span> <span class="va">video</span>.<span class="at">videoHeight</span><span class="op">;</span></span>
<span id="cb6-6"><a href="#cb6-6"></a></span>
<span id="cb6-7"><a href="#cb6-7"></a>  <span class="kw">const</span> ctx <span class="op">=</span> <span class="va">canvas</span>.<span class="at">getContext</span>(<span class="st">&#39;2d&#39;</span>)<span class="op">;</span></span>
<span id="cb6-8"><a href="#cb6-8"></a>  <span class="va">ctx</span>.<span class="at">drawImage</span>(video<span class="op">,</span> <span class="dv">0</span><span class="op">,</span> <span class="dv">0</span>)<span class="op">;</span></span>
<span id="cb6-9"><a href="#cb6-9"></a>  <span class="cf">return</span> <span class="va">ctx</span>.<span class="at">getImageData</span>(<span class="dv">0</span><span class="op">,</span> <span class="dv">0</span><span class="op">,</span> <span class="va">video</span>.<span class="at">videoWidth</span><span class="op">,</span> <span class="va">video</span>.<span class="at">videoHeight</span>)<span class="op">;</span></span>
<span id="cb6-10"><a href="#cb6-10"></a><span class="op">}</span></span></code></pre></div>
<p>さて，後はこれを Elm で呼び出す． ただし，カメラを起動する <code>startCamera</code> 関数の時と違い，ボタンを押したらQRコードのデコード結果の文字列を取得したい． なので JavaScript 側から実行されることを想定した「内向き」のポート関数も定義する:</p>
<div class="sourceCode" id="cb7"><pre class="sourceCode elm"><code class="sourceCode elm"><span id="cb7-1"><a href="#cb7-1"></a><span class="co">-- QRCode.elm</span></span>
<span id="cb7-2"><a href="#cb7-2"></a><span class="kw">port</span> <span class="kw">module</span> <span class="dt">QRCode</span> <span class="kw">exposing</span> (<span class="op">..</span>)</span>
<span id="cb7-3"><a href="#cb7-3"></a></span>
<span id="cb7-4"><a href="#cb7-4"></a><span class="kw">import</span> <span class="dt">Json</span><span class="op">.</span><span class="dt">Decode</span> <span class="kw">as</span> <span class="dt">D</span> <span class="kw">exposing</span> (<span class="dt">Decoder</span>)</span>
<span id="cb7-5"><a href="#cb7-5"></a><span class="kw">import</span> <span class="dt">Json</span><span class="op">.</span><span class="dt">Encode</span> <span class="kw">as</span> <span class="dt">E</span></span>
<span id="cb7-6"><a href="#cb7-6"></a></span>
<span id="cb7-7"><a href="#cb7-7"></a><span class="kw">type</span> <span class="kw">alias</span> <span class="dt">QRCode</span> <span class="op">=</span> { <span class="fu">data</span> : <span class="dt">String</span> }</span>
<span id="cb7-8"><a href="#cb7-8"></a></span>
<span id="cb7-9"><a href="#cb7-9"></a><span class="fu">decoder</span> : <span class="dt">Decoder</span> <span class="dt">QRCode</span></span>
<span id="cb7-10"><a href="#cb7-10"></a><span class="fu">decoder</span> <span class="op">=</span> <span class="dt">D</span><span class="op">.</span><span class="fu">map</span> <span class="dt">QRCode</span> (<span class="dt">D</span><span class="op">.</span><span class="fu">field</span> <span class="st">&quot;data&quot;</span> <span class="dt">D</span><span class="op">.</span><span class="fu">string</span>)</span>
<span id="cb7-11"><a href="#cb7-11"></a></span>
<span id="cb7-12"><a href="#cb7-12"></a><span class="kw">port</span> <span class="fu">startCamera</span> : () <span class="op">-&gt;</span> <span class="dt">Cmd</span> <span class="fu">msg</span></span>
<span id="cb7-13"><a href="#cb7-13"></a></span>
<span id="cb7-14"><a href="#cb7-14"></a><span class="kw">port</span> <span class="fu">captureImage</span> : () <span class="op">-&gt;</span> <span class="dt">Cmd</span> <span class="fu">msg</span></span>
<span id="cb7-15"><a href="#cb7-15"></a></span>
<span id="cb7-16"><a href="#cb7-16"></a><span class="co">-- JS とは JSON データでやり取りするのが良いらしい</span></span>
<span id="cb7-17"><a href="#cb7-17"></a><span class="kw">port</span> <span class="fu">updateQRCode</span> : (<span class="dt">E</span><span class="op">.</span><span class="dt">Value</span> <span class="op">-&gt;</span> <span class="fu">msg</span>) <span class="op">-&gt;</span> <span class="dt">Sub</span> <span class="fu">msg</span></span>
<span id="cb7-18"><a href="#cb7-18"></a></span>
<span id="cb7-19"><a href="#cb7-19"></a><span class="fu">updateQRCodeWithDecode</span> : (<span class="dt">Result</span> <span class="dt">D</span><span class="op">.</span><span class="dt">Error</span> (<span class="dt">Maybe</span> <span class="dt">QRCode</span>) <span class="op">-&gt;</span> <span class="fu">msg</span>) <span class="op">-&gt;</span> <span class="dt">Sub</span> <span class="fu">msg</span></span>
<span id="cb7-20"><a href="#cb7-20"></a><span class="fu">updateQRCodeWithDecode</span> <span class="fu">msg</span> <span class="op">=</span></span>
<span id="cb7-21"><a href="#cb7-21"></a>  <span class="fu">updateQRCode</span> (<span class="fu">msg</span> <span class="op">&lt;&lt;</span> <span class="dt">D</span><span class="op">.</span><span class="fu">decodeValue</span> (<span class="dt">D</span><span class="op">.</span><span class="fu">nullable</span> <span class="fu">decoder</span>))</span></code></pre></div>
<p><code>updateQRCode</code> 関数が内向きのポート関数だ． <code>Sub a</code> 型はタイマーやマウスの動作など外部から非同期に送られてくるメッセージを取得するための型だ． 次のように，JS 側で実装する <code>captureImage</code> 関数の最後で <code>updateQRCode</code> 関数が呼ばれ <code>QRCode</code> 型を表す JS オブジェクトが送られてくる:</p>
<div class="sourceCode" id="cb8"><pre class="sourceCode javascript"><code class="sourceCode javascript"><span id="cb8-1"><a href="#cb8-1"></a><span class="co">// canvas の id を追加</span></span>
<span id="cb8-2"><a href="#cb8-2"></a><span class="kw">const</span> flags <span class="op">=</span> <span class="op">{</span></span>
<span id="cb8-3"><a href="#cb8-3"></a>  <span class="dt">ids</span><span class="op">:</span> <span class="op">{</span> <span class="dt">video</span><span class="op">:</span> <span class="st">&#39;video_area&#39;</span><span class="op">,</span> <span class="dt">capture</span><span class="op">:</span> <span class="st">&#39;capture_image&#39;</span> <span class="op">},</span></span>
<span id="cb8-4"><a href="#cb8-4"></a>  <span class="dt">size</span><span class="op">:</span> <span class="op">{</span> <span class="dt">width</span><span class="op">:</span> <span class="dv">300</span><span class="op">,</span> <span class="dt">height</span><span class="op">:</span> <span class="dv">300</span> <span class="op">}</span></span>
<span id="cb8-5"><a href="#cb8-5"></a><span class="op">};</span></span>
<span id="cb8-6"><a href="#cb8-6"></a></span>
<span id="cb8-7"><a href="#cb8-7"></a><span class="va">app</span>.<span class="va">ports</span>.<span class="va">captureImage</span>.<span class="at">subscribe</span>(<span class="kw">function</span>() <span class="op">{</span></span>
<span id="cb8-8"><a href="#cb8-8"></a>  <span class="kw">const</span> imageData <span class="op">=</span> <span class="at">captureImage</span>(<span class="va">flags</span>.<span class="va">ids</span>.<span class="at">video</span><span class="op">,</span> <span class="va">flags</span>.<span class="va">ids</span>.<span class="at">capture</span>)<span class="op">;</span></span>
<span id="cb8-9"><a href="#cb8-9"></a>  <span class="kw">const</span> qrcode <span class="op">=</span> <span class="at">jsQR</span>(<span class="va">imageData</span>.<span class="at">data</span><span class="op">,</span> <span class="va">imageData</span>.<span class="at">width</span><span class="op">,</span> <span class="va">imageData</span>.<span class="at">height</span>)</span>
<span id="cb8-10"><a href="#cb8-10"></a>  <span class="va">app</span>.<span class="va">ports</span>.<span class="va">updateQRCode</span>.<span class="at">send</span>(qrcode)<span class="op">;</span> <span class="co">// ココ</span></span>
<span id="cb8-11"><a href="#cb8-11"></a><span class="op">}</span>)</span></code></pre></div>
<p>Elm 側は次のように書き換える:</p>
<div class="sourceCode" id="cb9"><pre class="sourceCode elm"><code class="sourceCode elm"><span id="cb9-1"><a href="#cb9-1"></a><span class="kw">module</span> <span class="dt">Main</span> <span class="kw">exposing</span> (<span class="fu">main</span>)</span>
<span id="cb9-2"><a href="#cb9-2"></a></span>
<span id="cb9-3"><a href="#cb9-3"></a><span class="kw">import</span> <span class="dt">AnaQRam</span><span class="op">.</span><span class="dt">QRCode</span> <span class="kw">as</span> <span class="dt">QRCode</span> <span class="kw">exposing</span> (<span class="dt">QRCode</span>)</span>
<span id="cb9-4"><a href="#cb9-4"></a><span class="kw">import</span> <span class="dt">Json</span><span class="op">.</span><span class="dt">Decode</span> <span class="kw">exposing</span> (<span class="dt">Error</span><span class="op">,</span> <span class="fu">errorToString</span>)</span>
<span id="cb9-5"><a href="#cb9-5"></a></span>
<span id="cb9-6"><a href="#cb9-6"></a><span class="fu">main</span> : <span class="dt">Program</span> <span class="dt">Config</span> <span class="dt">Model</span> <span class="dt">Msg</span></span>
<span id="cb9-7"><a href="#cb9-7"></a><span class="fu">main</span> <span class="op">=</span></span>
<span id="cb9-8"><a href="#cb9-8"></a>  <span class="dt">Browser</span><span class="op">.</span><span class="fu">element</span></span>
<span id="cb9-9"><a href="#cb9-9"></a>    { <span class="op">..</span> <span class="co">-- 割愛</span></span>
<span id="cb9-10"><a href="#cb9-10"></a>    <span class="op">,</span> <span class="fu">subscriptions</span> <span class="op">=</span> <span class="fu">subscriptions</span></span>
<span id="cb9-11"><a href="#cb9-11"></a>    }</span>
<span id="cb9-12"><a href="#cb9-12"></a></span>
<span id="cb9-13"><a href="#cb9-13"></a><span class="co">-- capture を追加</span></span>
<span id="cb9-14"><a href="#cb9-14"></a><span class="kw">type</span> <span class="kw">alias</span> <span class="dt">Config</span> <span class="op">=</span></span>
<span id="cb9-15"><a href="#cb9-15"></a>  { <span class="fu">ids</span> : { <span class="fu">video</span> : <span class="dt">String</span><span class="op">,</span> <span class="fu">capture</span> : <span class="dt">String</span> }</span>
<span id="cb9-16"><a href="#cb9-16"></a>  <span class="op">,</span> <span class="fu">size</span> : { <span class="fu">width</span> : <span class="dt">Int</span><span class="op">,</span> <span class="fu">height</span> : <span class="dt">Int</span> }</span>
<span id="cb9-17"><a href="#cb9-17"></a>  }</span>
<span id="cb9-18"><a href="#cb9-18"></a></span>
<span id="cb9-19"><a href="#cb9-19"></a><span class="kw">type</span> <span class="kw">alias</span> <span class="dt">Model</span> <span class="op">=</span></span>
<span id="cb9-20"><a href="#cb9-20"></a>  { <span class="fu">config</span> : <span class="dt">Config</span></span>
<span id="cb9-21"><a href="#cb9-21"></a>  <span class="op">,</span> <span class="fu">qrcode</span> : <span class="dt">Maybe</span> <span class="dt">QRCode</span> <span class="co">-- QRコードのデコード結果</span></span>
<span id="cb9-22"><a href="#cb9-22"></a>  <span class="op">,</span> <span class="fu">error</span> : <span class="dt">String</span>        <span class="co">-- JSONのデコード失敗結果</span></span>
<span id="cb9-23"><a href="#cb9-23"></a>  }</span>
<span id="cb9-24"><a href="#cb9-24"></a></span>
<span id="cb9-25"><a href="#cb9-25"></a><span class="fu">init</span> : <span class="dt">Config</span> <span class="op">-&gt;</span> (<span class="dt">Model</span><span class="op">,</span> <span class="dt">Cmd</span> <span class="dt">Msg</span>)</span>
<span id="cb9-26"><a href="#cb9-26"></a><span class="fu">init</span> <span class="fu">config</span> <span class="op">=</span> (<span class="dt">Model</span> <span class="fu">config</span> <span class="dt">Nothing</span> <span class="st">&quot;&quot;</span><span class="op">,</span> <span class="dt">Cmd</span><span class="op">.</span><span class="fu">none</span>)</span>
<span id="cb9-27"><a href="#cb9-27"></a></span>
<span id="cb9-28"><a href="#cb9-28"></a><span class="kw">type</span> <span class="dt">Msg</span></span>
<span id="cb9-29"><a href="#cb9-29"></a>  <span class="op">=</span> <span class="dt">EnableCamera</span></span>
<span id="cb9-30"><a href="#cb9-30"></a>  <span class="op">|</span> <span class="dt">CaptureImage</span></span>
<span id="cb9-31"><a href="#cb9-31"></a>  <span class="op">|</span> <span class="dt">UpdateQRCode</span> (<span class="dt">Result</span> <span class="dt">Error</span> (<span class="dt">Maybe</span> <span class="dt">QRCode</span>))</span>
<span id="cb9-32"><a href="#cb9-32"></a></span>
<span id="cb9-33"><a href="#cb9-33"></a><span class="fu">update</span> : <span class="dt">Msg</span> <span class="op">-&gt;</span> <span class="dt">Model</span> <span class="op">-&gt;</span> (<span class="dt">Model</span><span class="op">,</span> <span class="dt">Cmd</span> <span class="dt">Msg</span>)</span>
<span id="cb9-34"><a href="#cb9-34"></a><span class="fu">update</span> <span class="fu">msg</span> <span class="fu">model</span> <span class="op">=</span></span>
<span id="cb9-35"><a href="#cb9-35"></a>  <span class="cf">case</span> <span class="fu">msg</span> <span class="cf">of</span></span>
<span id="cb9-36"><a href="#cb9-36"></a>    <span class="op">...</span> <span class="co">-- 割愛</span></span>
<span id="cb9-37"><a href="#cb9-37"></a></span>
<span id="cb9-38"><a href="#cb9-38"></a>    <span class="dt">CaptureImage</span> <span class="op">-&gt;</span> (<span class="fu">model</span><span class="op">,</span> <span class="dt">QRCode</span><span class="op">.</span><span class="fu">captureImage</span> ())</span>
<span id="cb9-39"><a href="#cb9-39"></a></span>
<span id="cb9-40"><a href="#cb9-40"></a>    <span class="co">-- QRコードがなかった場合(null が返ってくるので)</span></span>
<span id="cb9-41"><a href="#cb9-41"></a>    <span class="dt">UpdateQRCode</span> (<span class="dt">Ok</span> <span class="dt">Nothing</span>) <span class="op">-&gt;</span> ({ <span class="fu">model</span> <span class="op">|</span> <span class="fu">error</span> <span class="op">=</span> <span class="st">&quot;QR code is not found&quot;</span> }<span class="op">,</span> <span class="dt">Cmd</span><span class="op">.</span><span class="fu">none</span>)</span>
<span id="cb9-42"><a href="#cb9-42"></a></span>
<span id="cb9-43"><a href="#cb9-43"></a>    <span class="co">-- QRコードのデコード成功</span></span>
<span id="cb9-44"><a href="#cb9-44"></a>    <span class="dt">UpdateQRCode</span> (<span class="dt">Ok</span> <span class="fu">qrcode</span>) <span class="op">-&gt;</span> ({ <span class="fu">model</span> <span class="op">|</span> <span class="fu">qrcode</span> <span class="op">=</span> <span class="fu">qrcode</span><span class="op">,</span> <span class="fu">error</span> <span class="op">=</span> <span class="st">&quot;&quot;</span> }<span class="op">,</span> <span class="dt">Cmd</span><span class="op">.</span><span class="fu">none</span>)</span>
<span id="cb9-45"><a href="#cb9-45"></a></span>
<span id="cb9-46"><a href="#cb9-46"></a>    <span class="co">-- JSONのデコード失敗</span></span>
<span id="cb9-47"><a href="#cb9-47"></a>    <span class="dt">UpdateQRCode</span> (<span class="dt">Err</span> <span class="fu">message</span>) <span class="op">-&gt;</span> ({ <span class="fu">model</span> <span class="op">|</span> <span class="fu">error</span> <span class="op">=</span> <span class="fu">errorToString</span> <span class="fu">message</span> }<span class="op">,</span> <span class="dt">Cmd</span><span class="op">.</span><span class="fu">none</span>)</span>
<span id="cb9-48"><a href="#cb9-48"></a></span>
<span id="cb9-49"><a href="#cb9-49"></a><span class="fu">view</span> : <span class="dt">Model</span> <span class="op">-&gt;</span> <span class="dt">Html</span> <span class="dt">Msg</span></span>
<span id="cb9-50"><a href="#cb9-50"></a><span class="fu">view</span> <span class="fu">model</span> <span class="op">=</span></span>
<span id="cb9-51"><a href="#cb9-51"></a>  <span class="fu">div</span> []</span>
<span id="cb9-52"><a href="#cb9-52"></a>    [ <span class="fu">video</span> <span class="co">-- 割愛</span></span>
<span id="cb9-53"><a href="#cb9-53"></a>    <span class="op">,</span> <span class="fu">p</span> [] [ <span class="fu">button</span> [ <span class="fu">onClick</span> <span class="dt">EnableCamera</span> ] [ <span class="fu">text</span> <span class="st">&quot;Enable Camera&quot;</span> ] ]</span>
<span id="cb9-54"><a href="#cb9-54"></a>    <span class="op">,</span> <span class="fu">p</span> [] [ <span class="fu">button</span> [ <span class="fu">onClick</span> <span class="dt">CaptureImage</span> ] [ <span class="fu">text</span> <span class="st">&quot;Decode QR&quot;</span> ] ]</span>
<span id="cb9-55"><a href="#cb9-55"></a>    <span class="op">,</span> <span class="fu">canvas</span> [ <span class="fu">id</span> <span class="fu">model</span><span class="op">.</span><span class="fu">config</span><span class="op">.</span><span class="fu">ids</span><span class="op">.</span><span class="fu">capture</span><span class="op">,</span> <span class="fu">hidden</span> <span class="dt">True</span> ] [] <span class="co">-- カメラ画像退避用</span></span>
<span id="cb9-56"><a href="#cb9-56"></a>    <span class="op">,</span> <span class="fu">viewResult</span> <span class="fu">model</span></span>
<span id="cb9-57"><a href="#cb9-57"></a>    ]</span>
<span id="cb9-58"><a href="#cb9-58"></a></span>
<span id="cb9-59"><a href="#cb9-59"></a><span class="fu">viewResult</span> : <span class="dt">Model</span> <span class="op">-&gt;</span> <span class="dt">Html</span> <span class="dt">Msg</span></span>
<span id="cb9-60"><a href="#cb9-60"></a><span class="fu">viewResult</span> <span class="fu">model</span> <span class="op">=</span></span>
<span id="cb9-61"><a href="#cb9-61"></a>  <span class="cf">if</span> <span class="dt">String</span><span class="op">.</span><span class="fu">isEmpty</span> <span class="fu">model</span><span class="op">.</span><span class="fu">error</span> <span class="cf">then</span></span>
<span id="cb9-62"><a href="#cb9-62"></a>    <span class="fu">p</span> [] [ <span class="fu">text</span> (<span class="st">&quot;QR code: &quot;</span> <span class="op">++</span> <span class="dt">Maybe</span><span class="op">.</span><span class="fu">withDefault</span> <span class="st">&quot;&quot;</span> (<span class="dt">Maybe</span><span class="op">.</span><span class="fu">map</span> <span class="op">.</span><span class="fu">data</span> <span class="fu">model</span><span class="op">.</span><span class="fu">qrcode</span>)) ]</span>
<span id="cb9-63"><a href="#cb9-63"></a>  <span class="cf">else</span></span>
<span id="cb9-64"><a href="#cb9-64"></a>    <span class="fu">p</span> [] [ <span class="fu">text</span> <span class="fu">model</span><span class="op">.</span><span class="fu">error</span> ]</span>
<span id="cb9-65"><a href="#cb9-65"></a></span>
<span id="cb9-66"><a href="#cb9-66"></a><span class="fu">subscriptions</span> : <span class="dt">Model</span> <span class="op">-&gt;</span> <span class="dt">Sub</span> <span class="dt">Msg</span></span>
<span id="cb9-67"><a href="#cb9-67"></a><span class="fu">subscriptions</span> <span class="fu">_</span> <span class="op">=</span> <span class="dt">QRCode</span><span class="op">.</span><span class="fu">updateQRCodeWithDecode</span> <span class="dt">UpdateQRCode</span></span></code></pre></div>
<p>出来上がったのが<a href="https://matsubara0507.github.io/anaqram-web-samples/step2">こんな感じ</a>． ほんとはここがゴールじゃないんだが結果的に QR コードリーダーができた．</p>
<h2 id="おしまい">おしまい</h2>
<p>Elm 側でデコードする話は気が向いたらそのうち頑張るかもしれない(画像データをポートでやりとりするのは，あまり効率的ではないと思うけど)．</p>
  </div>]]></summary>
</entry>
<entry>
    <title>elmap.hs プロジェクトを作りました</title>
    <link href="https://matsubara0507.github.io/posts/2019-08-05-create-elmap-project.html" />
    <id>https://matsubara0507.github.io/posts/2019-08-05-create-elmap-project.html</id>
    <published>2019-08-05T00:00:00Z</published>
    <updated>2019-08-05T00:00:00Z</updated>
    <summary type="html"><![CDATA[<div class="post-content" itemprop="articleBody">
    <p>GUI 付きのツールを作成したい時、普段は Elm を使います． さらにバックエンドを付けるときは Haskell + Elm で実装し，Elm 側で呼び出す API クライアントは <a href="http://hackage.haskell.org/package/elm-export">elm-export</a> と <a href="http://hackage.haskell.org/package/servant-elm">servant-elm</a> というパッケージを使い，Haskell Servant の API 定義から自動生成させていました．</p>
<p>elm-export は Elm 0.19 に追いつけてなかったので独自にフォークして運用し，また愛用している extensible パッケージにも独自で対応していました． しかし，servant-elm が Elm 0.19 に対応するために依存パッケージを elm-export から <a href="http://hackage.haskell.org/package/elm-bridge">elm-bridge</a> に変更したところ，独自で対応してた部分と色々都合が悪かったので，それらのクッションとなる薄いラッパーパッケージ群として elmap.hs プロジェクトを作成しました:</p>
<h2 id="section"><iframe width="320" height="184" scrolling="no" frameborder="0" src="https://matsubara0507.github.io/my-github-cards/?target=matsubara0507/elmap.hs"></iframe></h2>
<p>この記事は elmap.hs を作る上で色々したことのメモ書きです．</p>
<h2 id="なぜ-elm-bridgeservant-elm-ではダメか">なぜ elm-bridge/servant-elm ではダメか</h2>
<p>を説明するためにまずは elm-bridge パッケージについて紹介する．</p>
<h3 id="elm-bridge-パッケージ">elm-bridge パッケージ</h3>
<p>elm-bridge は Haskell の型定義から Elm の型定義などを生成するためのパッケージだ． 型定義の他にも，Elm 側の JSON デコーダー・エンコーダーも自動生成してくれる(メタプログラミングなどが無い Elm にとってこれは大変嬉しい)．</p>
<p>仕組みは簡単で，簡易的な Elm の型定義などを Haskell で表現している．</p>
<div class="sourceCode" id="cb1"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span id="cb1-1"><a href="#cb1-1"></a><span class="co">-- Elm の型定義そのもの</span></span>
<span id="cb1-2"><a href="#cb1-2"></a><span class="kw">data</span> <span class="dt">ETypeDef</span></span>
<span id="cb1-3"><a href="#cb1-3"></a>   <span class="ot">=</span> <span class="dt">ETypeAlias</span> <span class="dt">EAlias</span>         <span class="co">-- レコードの型エイリアス</span></span>
<span id="cb1-4"><a href="#cb1-4"></a>   <span class="op">|</span> <span class="dt">ETypePrimAlias</span> <span class="dt">EPrimAlias</span> <span class="co">-- 普通の型エイリアス</span></span>
<span id="cb1-5"><a href="#cb1-5"></a>   <span class="op">|</span> <span class="dt">ETypeSum</span> <span class="dt">ESum</span>             <span class="co">-- 直和型</span></span>
<span id="cb1-6"><a href="#cb1-6"></a></span>
<span id="cb1-7"><a href="#cb1-7"></a><span class="co">-- Elm の型自身</span></span>
<span id="cb1-8"><a href="#cb1-8"></a><span class="kw">data</span> <span class="dt">EType</span></span>
<span id="cb1-9"><a href="#cb1-9"></a>   <span class="ot">=</span> <span class="dt">ETyVar</span> <span class="dt">ETVar</span>       <span class="co">-- 型変数</span></span>
<span id="cb1-10"><a href="#cb1-10"></a>   <span class="op">|</span> <span class="dt">ETyCon</span> <span class="dt">ETCon</span>       <span class="co">-- コンストラクタ</span></span>
<span id="cb1-11"><a href="#cb1-11"></a>   <span class="op">|</span> <span class="dt">ETyApp</span> <span class="dt">EType</span> <span class="dt">EType</span> <span class="co">-- 型適用</span></span>
<span id="cb1-12"><a href="#cb1-12"></a>   <span class="op">|</span> <span class="dt">ETyTuple</span> <span class="dt">Int</span>       <span class="co">-- タプル型</span></span></code></pre></div>
<p>Elm での型定義の構文を表したのが <code>ETypeDef</code> 型で，関数の型を書くときなどの型を表現する構文を表したのが <code>EType</code> 型だ． <code>toElmType</code> 関数を使うことで任意の型の <code>EType</code> を <code>Typeable</code> で機械的に導出したり，<code>deriveElmDef</code> と TemplateHaskell で <code>ETypeDef</code> への変換を導出することができる:</p>
<div class="sourceCode" id="cb2"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span id="cb2-1"><a href="#cb2-1"></a><span class="ot">toElmType ::</span> <span class="dt">Typeable</span> a <span class="ot">=&gt;</span> <span class="dt">Proxy</span> a <span class="ot">-&gt;</span> <span class="dt">EType</span></span>
<span id="cb2-2"><a href="#cb2-2"></a></span>
<span id="cb2-3"><a href="#cb2-3"></a><span class="co">-- ETypeDef への変換は型クラスで定義する</span></span>
<span id="cb2-4"><a href="#cb2-4"></a><span class="kw">class</span> <span class="dt">IsElmDefinition</span> a <span class="kw">where</span></span>
<span id="cb2-5"><a href="#cb2-5"></a><span class="ot">  compileElmDef ::</span> <span class="dt">Proxy</span> a <span class="ot">-&gt;</span> <span class="dt">ETypeDef</span></span>
<span id="cb2-6"><a href="#cb2-6"></a></span>
<span id="cb2-7"><a href="#cb2-7"></a><span class="co">-- Hoge 型の IsElmDefinition 型クラスのインスタンスを導出</span></span>
<span id="cb2-8"><a href="#cb2-8"></a>deriveElmDef defaultOptions &#39;<span class="dt">&#39;Hoge</span></span></code></pre></div>
<p>ちなみに <code>deriveElmDef</code> の代わりに <code>deriveBoth</code> を使うと aeson 系の型クラスのインスタンスも一緒に導出してくれる． そして <code>ETypeDef</code> などに変換したあとは，<code>renderElm</code> 関数や <code>makeElmModule</code> 関数を使うことで Elm のコードに変換できる．</p>
<h3 id="都合の悪い部分">都合の悪い部分</h3>
<p>問題はどっちかというと servant-elm にある． servant-elm は Elm 関数の変換に内部で <code>toElmType</code> 関数を使っている:</p>
<div class="sourceCode" id="cb3"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span id="cb3-1"><a href="#cb3-1"></a><span class="kw">data</span> <span class="dt">LangElm</span></span>
<span id="cb3-2"><a href="#cb3-2"></a></span>
<span id="cb3-3"><a href="#cb3-3"></a><span class="kw">instance</span> <span class="dt">Typeable</span> a <span class="ot">=&gt;</span> <span class="dt">HasForeignType</span> <span class="dt">LangElm</span> <span class="dt">EType</span> a <span class="kw">where</span></span>
<span id="cb3-4"><a href="#cb3-4"></a>  typeFor _ _ _ <span class="ot">=</span> toElmType (<span class="dt">Proxy</span><span class="ot"> ::</span> <span class="dt">Proxy</span> a)</span>
<span id="cb3-5"><a href="#cb3-5"></a></span>
<span id="cb3-6"><a href="#cb3-6"></a><span class="ot">getEndpoints ::</span></span>
<span id="cb3-7"><a href="#cb3-7"></a>  (<span class="dt">HasForeign</span> <span class="dt">LangElm</span> <span class="dt">EType</span> api, <span class="dt">GenerateList</span> <span class="dt">EType</span> (<span class="dt">Foreign</span> <span class="dt">EType</span> api))</span>
<span id="cb3-8"><a href="#cb3-8"></a>  <span class="ot">=&gt;</span> <span class="dt">Proxy</span> api</span>
<span id="cb3-9"><a href="#cb3-9"></a>  <span class="ot">-&gt;</span> [<span class="dt">Req</span> <span class="dt">EType</span>]</span>
<span id="cb3-10"><a href="#cb3-10"></a>getEndpoints <span class="ot">=</span> listFromAPI (<span class="dt">Proxy</span><span class="ot"> ::</span> <span class="dt">Proxy</span> <span class="dt">LangElm</span>) (<span class="dt">Proxy</span><span class="ot"> ::</span> <span class="dt">Proxy</span> <span class="dt">EType</span>)</span></code></pre></div>
<p>ここで，extensible パッケージの拡張可能レコード型に <code>toElmType</code> を使ってみると…</p>
<div class="sourceCode" id="cb4"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span id="cb4-1"><a href="#cb4-1"></a><span class="op">&gt;&gt;&gt;</span> <span class="kw">type</span> <span class="dt">User</span> <span class="ot">=</span> <span class="dt">Record</span> &#39;[ <span class="st">&quot;id&quot;</span> <span class="op">&gt;:</span> <span class="dt">Int</span>, <span class="st">&quot;name&quot;</span> <span class="op">&gt;:</span> <span class="dt">String</span> ]</span>
<span id="cb4-2"><a href="#cb4-2"></a><span class="op">&gt;&gt;&gt;</span> toElmType (<span class="dt">Proxy</span><span class="ot"> ::</span> <span class="dt">Proxy</span> <span class="dt">User</span>)</span>
<span id="cb4-3"><a href="#cb4-3"></a><span class="dt">ETyApp</span> (<span class="dt">ETyApp</span> (<span class="dt">ETyCon</span> (<span class="dt">ETCon</span> {tc_name <span class="ot">=</span> <span class="st">&quot;:&amp;&quot;</span>})) (<span class="dt">ETyApp</span> (<span class="dt">ETyApp</span> (<span class="dt">ETyCon</span> (<span class="dt">ETCon</span> {tc_name <span class="ot">=</span> <span class="st">&quot;&#39;:&quot;</span>})) (<span class="dt">ETyApp</span> (<span class="dt">ETyApp</span> (<span class="dt">ETyCon</span> (<span class="dt">ETCon</span> {tc_name <span class="ot">=</span> <span class="st">&quot;&#39;:&gt;&quot;</span>})) (<span class="dt">ETyCon</span> (<span class="dt">ETCon</span> {tc_name <span class="ot">=</span> <span class="st">&quot;\&quot;id\&quot;&quot;</span>}))) (<span class="dt">ETyCon</span> (<span class="dt">ETCon</span> {tc_name <span class="ot">=</span> <span class="st">&quot;Int&quot;</span>})))) (<span class="dt">ETyApp</span> (<span class="dt">ETyApp</span> (<span class="dt">ETyCon</span> (<span class="dt">ETCon</span> {tc_name <span class="ot">=</span> <span class="st">&quot;&#39;:&quot;</span>})) (<span class="dt">ETyApp</span> (<span class="dt">ETyApp</span> (<span class="dt">ETyCon</span> (<span class="dt">ETCon</span> {tc_name <span class="ot">=</span> <span class="st">&quot;&#39;:&gt;&quot;</span>})) (<span class="dt">ETyCon</span> (<span class="dt">ETCon</span> {tc_name <span class="ot">=</span> <span class="st">&quot;\&quot;name\&quot;&quot;</span>}))) (<span class="dt">ETyCon</span> (<span class="dt">ETCon</span> {tc_name <span class="ot">=</span> <span class="st">&quot;String&quot;</span>})))) (<span class="dt">ETyCon</span> (<span class="dt">ETCon</span> {tc_name <span class="ot">=</span> <span class="st">&quot;&#39;[]&quot;</span>}))))) (<span class="dt">ETyApp</span> (<span class="dt">ETyCon</span> (<span class="dt">ETCon</span> {tc_name <span class="ot">=</span> <span class="st">&quot;Field&quot;</span>})) (<span class="dt">ETyCon</span> (<span class="dt">ETCon</span> {tc_name <span class="ot">=</span> <span class="st">&quot;Identity&quot;</span>})))</span></code></pre></div>
<p>これは絶対に Elm 側で動かない… そもそも拡張可能レコードは型エイリアスで定義されているため型名の情報が落ちてしまうし，理想的には Elm のレコード型に変換してほしい．</p>
<h2 id="section-1"></h2>
<p>ということで，extensible の拡張可能レコードでもうまく動作する薄いラッパーパッケージを作ることにした．</p>
<h2 id="elmap.hs-プロジェクト">elmap.hs プロジェクト</h2>
<p>elm-bridge と servant-elm には生成した <code>ETypeDef</code> や <code>EType</code> を再変換する関数を指定することができる:</p>
<div class="sourceCode" id="cb5"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span id="cb5-1"><a href="#cb5-1"></a><span class="co">-- servant-elm</span></span>
<span id="cb5-2"><a href="#cb5-2"></a><span class="kw">data</span> <span class="dt">ElmOptions</span> <span class="ot">=</span> <span class="dt">ElmOptions</span></span>
<span id="cb5-3"><a href="#cb5-3"></a>  {<span class="ot"> urlPrefix             ::</span> <span class="dt">UrlPrefix</span></span>
<span id="cb5-4"><a href="#cb5-4"></a>  ,<span class="ot"> elmTypeAlterations    ::</span> (<span class="dt">EType</span> <span class="ot">-&gt;</span> <span class="dt">EType</span>)</span>
<span id="cb5-5"><a href="#cb5-5"></a>    <span class="co">-- ^ 生成した ETypes を変換しなおす</span></span>
<span id="cb5-6"><a href="#cb5-6"></a>  ,<span class="ot"> elmAlterations        ::</span> (<span class="dt">ETypeDef</span> <span class="ot">-&gt;</span> <span class="dt">ETypeDef</span>)</span>
<span id="cb5-7"><a href="#cb5-7"></a>    <span class="co">-- ^ 生成した ETypeDef を変換しなおす</span></span>
<span id="cb5-8"><a href="#cb5-8"></a>  ,<span class="ot"> emptyResponseElmTypes ::</span> [<span class="dt">EType</span>]</span>
<span id="cb5-9"><a href="#cb5-9"></a>  ,<span class="ot"> stringElmTypes        ::</span> [<span class="dt">EType</span>]</span>
<span id="cb5-10"><a href="#cb5-10"></a>  }</span></code></pre></div>
<p>しかし，これで extensible の型を変換しなおすのは大変なので <code>toElmType</code> のところから置き換える必要がある(そもそも型名の情報が落ちてしまっているし)．</p>
<h3 id="elmap-パッケージ">elmap パッケージ</h3>
<p><code>toElmType</code> が扱いにくい理由は，<code>Typeable</code> 型クラスから自動で定義を導出されてしまうからだ． 多くの場合，自動で導出される方が嬉しいのだが，今回は型名の情報を与えたり Elm のレコード型に対応させたりなど，個別に対応したいので型クラスを利用することにする:</p>
<div class="sourceCode" id="cb6"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span id="cb6-1"><a href="#cb6-1"></a><span class="kw">class</span> <span class="dt">IsElmType</span> a <span class="kw">where</span></span>
<span id="cb6-2"><a href="#cb6-2"></a><span class="ot">  compileElmType ::</span> <span class="dt">Proxy</span> a <span class="ot">-&gt;</span> <span class="dt">EType</span></span>
<span id="cb6-3"><a href="#cb6-3"></a></span>
<span id="cb6-4"><a href="#cb6-4"></a><span class="kw">instance</span> <span class="dt">IsElmType</span> <span class="dt">Int</span> <span class="kw">where</span></span>
<span id="cb6-5"><a href="#cb6-5"></a>  compileElmType _ <span class="ot">=</span> toElmType (<span class="dt">Proxy</span><span class="ot"> ::</span> <span class="dt">Proxy</span> <span class="dt">Int</span>)</span>
<span id="cb6-6"><a href="#cb6-6"></a><span class="kw">instance</span> <span class="dt">IsElmType</span> <span class="dt">Float</span> <span class="kw">where</span></span>
<span id="cb6-7"><a href="#cb6-7"></a>  compileElmType _ <span class="ot">=</span> toElmType (<span class="dt">Proxy</span><span class="ot"> ::</span> <span class="dt">Proxy</span> <span class="dt">Float</span>)</span></code></pre></div>
<p>さらに，リネームを簡単に行いやすいようにリネームする関数を定義しておいた:</p>
<div class="sourceCode" id="cb7"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span id="cb7-1"><a href="#cb7-1"></a><span class="ot">toElmTypeWith ::</span> <span class="dt">Typeable</span> a <span class="ot">=&gt;</span> <span class="dt">String</span> <span class="ot">-&gt;</span> <span class="dt">Proxy</span> a <span class="ot">-&gt;</span> <span class="dt">EType</span></span>
<span id="cb7-2"><a href="#cb7-2"></a></span>
<span id="cb7-3"><a href="#cb7-3"></a><span class="co">-- Elm の場合 `Order` という型名になっている</span></span>
<span id="cb7-4"><a href="#cb7-4"></a><span class="kw">instance</span> <span class="dt">IsElmType</span> <span class="dt">Ordering</span> <span class="kw">where</span></span>
<span id="cb7-5"><a href="#cb7-5"></a>  compileElmType _ <span class="ot">=</span> toElmTypeWith <span class="st">&quot;Order&quot;</span> (<span class="dt">Proxy</span> <span class="op">@</span> <span class="dt">Ordering</span>)</span></code></pre></div>
<h3 id="servant-elmap-パッケージ">servant-elmap パッケージ</h3>
<p>servant 側では elmap パッケージで定義した <code>IsElmType</code> 型クラスを利用するようにする:</p>
<div class="sourceCode" id="cb8"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span id="cb8-1"><a href="#cb8-1"></a><span class="kw">data</span> <span class="dt">LangElmap</span></span>
<span id="cb8-2"><a href="#cb8-2"></a></span>
<span id="cb8-3"><a href="#cb8-3"></a><span class="kw">instance</span> <span class="dt">IsElmType</span> a <span class="ot">=&gt;</span> <span class="dt">HasForeignType</span> <span class="dt">LangElmap</span> <span class="dt">EType</span> a <span class="kw">where</span></span>
<span id="cb8-4"><a href="#cb8-4"></a>  typeFor _ _ _ <span class="ot">=</span> compileElmType (<span class="dt">Proxy</span> <span class="op">@</span> a)</span>
<span id="cb8-5"><a href="#cb8-5"></a></span>
<span id="cb8-6"><a href="#cb8-6"></a><span class="ot">getEndpoints ::</span></span>
<span id="cb8-7"><a href="#cb8-7"></a>  (<span class="dt">HasForeign</span> <span class="dt">LangElmap</span> <span class="dt">EType</span> api, <span class="dt">GenerateList</span> <span class="dt">EType</span> (<span class="dt">Foreign</span> <span class="dt">EType</span> api))</span>
<span id="cb8-8"><a href="#cb8-8"></a>  <span class="ot">=&gt;</span> <span class="dt">Proxy</span> api</span>
<span id="cb8-9"><a href="#cb8-9"></a>  <span class="ot">-&gt;</span> [<span class="dt">Req</span> <span class="dt">EType</span>]</span>
<span id="cb8-10"><a href="#cb8-10"></a>getEndpoints <span class="ot">=</span> listFromAPI (<span class="dt">Proxy</span> <span class="op">@</span> <span class="dt">LangElmap</span>) (<span class="dt">Proxy</span> <span class="op">@</span> <span class="dt">EType</span>)</span></code></pre></div>
<p><code>getEndpoints</code> 関数を書き換えたので，この関数に依存している関数を全部置き換えた(ということをする必要があったのでフォークせずに薄いラッパーパッケージを作るようにした)．</p>
<h3 id="extensible-elmap-パッケージ">extensible-elmap パッケージ</h3>
<p>最後に，extensible の拡張可能レコード型に対して <code>IsElmType</code> 型クラスのインスタンスを定義すれば完成． 完成品はこちら:</p>
<div class="sourceCode" id="cb9"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span id="cb9-1"><a href="#cb9-1"></a><span class="ot">compileElmRecordTypeWith ::</span> <span class="dt">String</span> <span class="ot">-&gt;</span> <span class="dt">Proxy</span> (<span class="dt">RecordOf</span> h xs) <span class="ot">-&gt;</span> <span class="dt">EType</span></span>
<span id="cb9-2"><a href="#cb9-2"></a>compileElmRecordTypeWith name _ <span class="ot">=</span> <span class="dt">ETyCon</span> <span class="op">$</span> <span class="dt">ETCon</span> name</span>
<span id="cb9-3"><a href="#cb9-3"></a></span>
<span id="cb9-4"><a href="#cb9-4"></a><span class="co">-- ここから下は利用者側で定義する</span></span>
<span id="cb9-5"><a href="#cb9-5"></a><span class="kw">type</span> <span class="dt">User</span> <span class="ot">=</span> <span class="dt">Record</span> &#39;[ <span class="st">&quot;id&quot;</span> <span class="op">&gt;:</span> <span class="dt">Int</span>, <span class="st">&quot;name&quot;</span> <span class="op">&gt;:</span> <span class="dt">String</span> ]</span>
<span id="cb9-6"><a href="#cb9-6"></a></span>
<span id="cb9-7"><a href="#cb9-7"></a><span class="kw">instance</span> <span class="dt">IsElmType</span> <span class="dt">User</span> <span class="kw">where</span></span>
<span id="cb9-8"><a href="#cb9-8"></a>  compileElmType <span class="ot">=</span> compileElmRecordTypeWith <span class="st">&quot;User&quot;</span></span></code></pre></div>
<p><code>ElmType</code> 自体は型名を覚えるだけなので簡単(とはいえ，この定義だと型変数などには未対応だが…)． さらに <code>IsElmDefinition</code> 型クラスのインスタンスも定義する:</p>
<div class="sourceCode" id="cb10"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span id="cb10-1"><a href="#cb10-1"></a><span class="ot">compileElmRecordAliasWith ::</span></span>
<span id="cb10-2"><a href="#cb10-2"></a>  <span class="kw">forall</span> xs h <span class="op">.</span> <span class="dt">Forall</span> (<span class="dt">KeyTargetAre</span> <span class="dt">KnownSymbol</span> <span class="dt">IsElmType</span>) xs</span>
<span id="cb10-3"><a href="#cb10-3"></a>  <span class="ot">=&gt;</span> <span class="dt">String</span> <span class="ot">-&gt;</span> <span class="dt">Proxy</span> (<span class="dt">RecordOf</span> h xs) <span class="ot">-&gt;</span> <span class="dt">EAlias</span></span>
<span id="cb10-4"><a href="#cb10-4"></a>compileElmRecordAliasWith name _ <span class="ot">=</span> <span class="dt">EAlias</span></span>
<span id="cb10-5"><a href="#cb10-5"></a>  { ea_name <span class="ot">=</span> <span class="dt">ETypeName</span> name []</span>
<span id="cb10-6"><a href="#cb10-6"></a>  , ea_fields <span class="ot">=</span> fields</span>
<span id="cb10-7"><a href="#cb10-7"></a>  , ea_omit_null <span class="ot">=</span> <span class="dt">False</span></span>
<span id="cb10-8"><a href="#cb10-8"></a>  , ea_newtype <span class="ot">=</span> <span class="dt">False</span></span>
<span id="cb10-9"><a href="#cb10-9"></a>  , ea_unwrap_unary <span class="ot">=</span> <span class="dt">True</span></span>
<span id="cb10-10"><a href="#cb10-10"></a>  }</span>
<span id="cb10-11"><a href="#cb10-11"></a>  <span class="kw">where</span></span>
<span id="cb10-12"><a href="#cb10-12"></a>    fields <span class="ot">=</span> henumerateFor</span>
<span id="cb10-13"><a href="#cb10-13"></a>      (<span class="dt">Proxy</span> <span class="op">@</span> (<span class="dt">KeyTargetAre</span> <span class="dt">KnownSymbol</span> <span class="dt">IsElmType</span>))</span>
<span id="cb10-14"><a href="#cb10-14"></a>      (<span class="dt">Proxy</span> <span class="op">@</span> xs)</span>
<span id="cb10-15"><a href="#cb10-15"></a>      (\m acc <span class="ot">-&gt;</span> (stringKeyOf m, compileElmType <span class="op">$</span> proxyTargetOf m) <span class="op">:</span> acc)</span>
<span id="cb10-16"><a href="#cb10-16"></a>      []</span>
<span id="cb10-17"><a href="#cb10-17"></a></span>
<span id="cb10-18"><a href="#cb10-18"></a><span class="co">-- ここから下は利用者側で定義する</span></span>
<span id="cb10-19"><a href="#cb10-19"></a><span class="kw">instance</span> <span class="dt">IsElmDefinition</span> <span class="dt">User</span> <span class="kw">where</span></span>
<span id="cb10-20"><a href="#cb10-20"></a>  compileElmDef <span class="ot">=</span> <span class="dt">ETypeAlias</span> <span class="op">.</span> compileElmRecordAliasWith <span class="st">&quot;User&quot;</span></span></code></pre></div>
<p>多少ボイラーテンプレートができてしまったが，まぁ個人的には許容範囲．</p>
<h2 id="おまけ-普通のレコードに対応する">おまけ: 普通のレコードに対応する</h2>
<p>僕はほとんど使わないからいいんだけど，普通のレコード型も <code>IsElmType</code> に対応しやすいようなヘルパー関数を定義しておこう:</p>
<div class="sourceCode" id="cb11"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span id="cb11-1"><a href="#cb11-1"></a><span class="ot">toElmAlias ::</span> <span class="kw">forall</span> a<span class="op">.</span> (<span class="dt">GIsElmFields</span> (<span class="dt">Rep</span> a), <span class="dt">IsElmType</span> a) <span class="ot">=&gt;</span> <span class="dt">Proxy</span> a <span class="ot">-&gt;</span> <span class="dt">EAlias</span></span>
<span id="cb11-2"><a href="#cb11-2"></a>toElmAlias proxy <span class="ot">=</span> <span class="dt">EAlias</span></span>
<span id="cb11-3"><a href="#cb11-3"></a>  { ea_name <span class="ot">=</span> <span class="dt">ETypeName</span> (renderElm <span class="op">$</span> compileElmType proxy) []</span>
<span id="cb11-4"><a href="#cb11-4"></a>  , ea_fields <span class="ot">=</span> gcompileElmFields (<span class="dt">Proxy</span> <span class="op">@</span> (<span class="dt">Rep</span> a))</span>
<span id="cb11-5"><a href="#cb11-5"></a>  , ea_omit_null <span class="ot">=</span> <span class="dt">False</span></span>
<span id="cb11-6"><a href="#cb11-6"></a>  , ea_newtype <span class="ot">=</span> <span class="dt">False</span></span>
<span id="cb11-7"><a href="#cb11-7"></a>  , ea_unwrap_unary <span class="ot">=</span> <span class="dt">True</span></span>
<span id="cb11-8"><a href="#cb11-8"></a>  }</span>
<span id="cb11-9"><a href="#cb11-9"></a></span>
<span id="cb11-10"><a href="#cb11-10"></a><span class="kw">class</span> <span class="dt">GIsElmFields</span> (<span class="ot">rep ::</span> <span class="dt">Type</span> <span class="ot">-&gt;</span> <span class="dt">Type</span>) <span class="kw">where</span></span>
<span id="cb11-11"><a href="#cb11-11"></a><span class="ot">  gcompileElmFields ::</span> <span class="dt">Proxy</span> rep <span class="ot">-&gt;</span> [(<span class="dt">String</span>, <span class="dt">EType</span>)]</span>
<span id="cb11-12"><a href="#cb11-12"></a></span>
<span id="cb11-13"><a href="#cb11-13"></a><span class="co">-- ここから下は利用者側で定義する</span></span>
<span id="cb11-14"><a href="#cb11-14"></a><span class="kw">data</span> <span class="dt">User</span> <span class="ot">=</span> <span class="dt">User</span></span>
<span id="cb11-15"><a href="#cb11-15"></a>    {<span class="ot"> userId   ::</span> <span class="dt">String</span></span>
<span id="cb11-16"><a href="#cb11-16"></a>    ,<span class="ot"> userName ::</span> <span class="dt">String</span></span>
<span id="cb11-17"><a href="#cb11-17"></a>    } <span class="kw">deriving</span> (<span class="dt">Generic</span>)</span>
<span id="cb11-18"><a href="#cb11-18"></a></span>
<span id="cb11-19"><a href="#cb11-19"></a><span class="kw">instance</span> <span class="dt">IsElmType</span> <span class="dt">Book</span> <span class="kw">where</span></span>
<span id="cb11-20"><a href="#cb11-20"></a>  compileElmType _ <span class="ot">=</span> <span class="dt">ETyCon</span> <span class="op">$</span> <span class="dt">ETCon</span> <span class="st">&quot;Book&quot;</span></span>
<span id="cb11-21"><a href="#cb11-21"></a></span>
<span id="cb11-22"><a href="#cb11-22"></a><span class="kw">instance</span> <span class="dt">IsElmDefinition</span> <span class="dt">Book</span> <span class="kw">where</span></span>
<span id="cb11-23"><a href="#cb11-23"></a>  compileElmDef <span class="ot">=</span> <span class="dt">ETypeAlias</span> <span class="op">.</span> toElmAlias</span></code></pre></div>
<p><code>toElmAlias</code> 関数では，Haskell の総称プログラミング(Generics)という機能を利用している． Generics では Haskell 内での型や値のメタ情報を Haskell の型や値として取得できる． これと型クラスを組み合わせることで，型の構造毎に関数の実装を分岐することができる:</p>
<div class="sourceCode" id="cb12"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span id="cb12-1"><a href="#cb12-1"></a><span class="co">-- `M1 D` はデータ型を表現</span></span>
<span id="cb12-2"><a href="#cb12-2"></a><span class="kw">instance</span> <span class="dt">GIsElmFields</span> a <span class="ot">=&gt;</span> <span class="dt">GIsElmFields</span> (<span class="dt">M1</span> <span class="dt">D</span> x a) <span class="kw">where</span></span>
<span id="cb12-3"><a href="#cb12-3"></a>  gcompileElmFields _ <span class="ot">=</span> gcompileElmFields (<span class="dt">Proxy</span> <span class="op">@</span> a)</span>
<span id="cb12-4"><a href="#cb12-4"></a></span>
<span id="cb12-5"><a href="#cb12-5"></a><span class="co">-- `M1 C` はコンストラクタを表現</span></span>
<span id="cb12-6"><a href="#cb12-6"></a><span class="kw">instance</span> <span class="dt">GIsElmFields</span> a <span class="ot">=&gt;</span> <span class="dt">GIsElmFields</span> (<span class="dt">M1</span> <span class="dt">C</span> x a) <span class="kw">where</span></span>
<span id="cb12-7"><a href="#cb12-7"></a>  gcompileElmFields _ <span class="ot">=</span> gcompileElmFields (<span class="dt">Proxy</span> <span class="op">@</span> a)</span>
<span id="cb12-8"><a href="#cb12-8"></a></span>
<span id="cb12-9"><a href="#cb12-9"></a><span class="co">-- `M1 S` はレコードのセレクタを表現(`K1` はカインドの情報)</span></span>
<span id="cb12-10"><a href="#cb12-10"></a><span class="kw">instance</span> (<span class="dt">Selector</span> x, <span class="dt">IsElmType</span> a) <span class="ot">=&gt;</span> <span class="dt">GIsElmFields</span> (<span class="dt">M1</span> <span class="dt">S</span> x (<span class="dt">K1</span> <span class="dt">R</span> a)) <span class="kw">where</span></span>
<span id="cb12-11"><a href="#cb12-11"></a>  gcompileElmFields _ <span class="ot">=</span> [(selName (<span class="fu">undefined</span><span class="ot"> ::</span> <span class="dt">S1</span> x (<span class="dt">K1</span> <span class="dt">R</span> a) ()), compileElmType (<span class="dt">Proxy</span> <span class="op">@</span> a))]</span>
<span id="cb12-12"><a href="#cb12-12"></a></span>
<span id="cb12-13"><a href="#cb12-13"></a><span class="co">--- `:*:` は型の直積を表現</span></span>
<span id="cb12-14"><a href="#cb12-14"></a><span class="kw">instance</span> (<span class="dt">GIsElmFields</span> a, <span class="dt">GIsElmFields</span> b) <span class="ot">=&gt;</span> <span class="dt">GIsElmFields</span> (a <span class="op">:*:</span> b) <span class="kw">where</span></span>
<span id="cb12-15"><a href="#cb12-15"></a>  gcompileElmFields _ <span class="ot">=</span> gcompileElmFields (<span class="dt">Proxy</span> <span class="op">@</span> a) <span class="op">++</span> gcompileElmFields (<span class="dt">Proxy</span> <span class="op">@</span> b)</span></code></pre></div>
<h2 id="おしまい">おしまい</h2>
<p>もう少し簡単に解決する方法もあったような気もするけど，Haskell のメタプログラミングを色々味わえたのでまぁいいや． どうせ，僕ぐらいしか使わないだろうし(笑)</p>
  </div>]]></summary>
</entry>
<entry>
    <title>stack image コマンドなしに Haskell アプリの Docker イメージを作る</title>
    <link href="https://matsubara0507.github.io/posts/2019-06-10-build-haskell-app-docker-image-without-stack-image-cmd.html" />
    <id>https://matsubara0507.github.io/posts/2019-06-10-build-haskell-app-docker-image-without-stack-image-cmd.html</id>
    <published>2019-06-10T00:00:00Z</published>
    <updated>2019-06-10T00:00:00Z</updated>
    <summary type="html"><![CDATA[<div class="post-content" itemprop="articleBody">
    <p>自分は Haskell アプリケーションの Docker イメージを作るのに <code>stack image</code> コマンドを愛用している． しかし悲しいことに <strong>stack v2 からはこの機能が無くなってしまう</strong> のだ． ということで代替方法を考えてみた，というお話．</p>
<h2 id="tldr">tl;dr</h2>
<p>matsubara0507/whoami というリポジトリで試したので，その PR を見ると良い:</p>
<ul>
<li><a href="https://github.com/matsubara0507/whoami/pull/6">Build docker image without stack image command by matsubara0507 · Pull Request #6 · matsubara0507/whoami</a></li>
</ul>
<p>結論としては stack の <code>--local-bin-path</code> オプションと Docker Integration を使って Docker イメージ用の実行ファイルをワークディレクトリに置いて，<code>docker build</code> でコピーしているだけ．</p>
<h2 id="stack-image-コマンド">stack image コマンド</h2>
<p>簡単に今は亡き <code>stack image</code> コマンドを説明する． このコマンドは <code>stack image container</code> というサブコマンドにより，stack.yaml の設定を元にして実行ファイルだけを含んだ Docker イメージを作ってくれる． <code>docker</code> コマンドで普通にイメージを作るのと違い，<code>.stack-work</code> のビルドキャッシュをホストマシンのローカルに保存し，利用してくれる． そのおかげで2回目以降のビルドも高速に行える(<code>stack</code> による初回ビルドはとても時間がかかる…)．</p>
<p>使い方は簡単で，次のようなのを stack.yaml に記述し <code>stack --docker image container</code> とするだけ:</p>
<div class="sourceCode" id="cb1"><pre class="sourceCode yaml"><code class="sourceCode yaml"><span id="cb1-1"><a href="#cb1-1"></a><span class="fu">docker</span><span class="kw">:</span></span>
<span id="cb1-2"><a href="#cb1-2"></a><span class="at">  </span><span class="fu">repo</span><span class="kw">:</span><span class="at"> fpco/stack-build</span></span>
<span id="cb1-3"><a href="#cb1-3"></a><span class="at">  </span><span class="fu">enable</span><span class="kw">:</span><span class="at"> </span><span class="ch">false</span></span>
<span id="cb1-4"><a href="#cb1-4"></a><span class="fu">image</span><span class="kw">:</span></span>
<span id="cb1-5"><a href="#cb1-5"></a><span class="at">  </span><span class="fu">container</span><span class="kw">:</span></span>
<span id="cb1-6"><a href="#cb1-6"></a><span class="at">    </span><span class="fu">name</span><span class="kw">:</span><span class="at"> matsubara0507/whoami</span></span>
<span id="cb1-7"><a href="#cb1-7"></a><span class="at">    </span><span class="fu">base</span><span class="kw">:</span><span class="at"> matsubara0507/ubuntu-for-haskell:git</span></span></code></pre></div>
<p><code>docker</code> の方の設定は Docker Integration と呼ばれるもので，<code>repo</code> で設定したイメージのコンテナ内で stack のビルドをしてくれる(こいつがローカルの <code>.stack-work</code> を利用する)． <code>image</code> の方の設定が <code>stack image</code> の設定で，<code>base</code> が作成するイメージのベースイメージだ． やってることは実行ファイルを <code>.stack-work</code> からコピーしてくるだけで，ベースイメージが Docker Integration のイメージと同じ OS であればちゃんと動作する．</p>
<h2 id="section"></h2>
<p>さて，冒頭に書いた通り，<a href="https://github.com/commercialhaskell/stack/blob/c0c6510741a0f3e2f687a4fecf9b0ae625fca12a/ChangeLog.md#v2101-release-candidate"><strong>この機能は stack の新しいバージョンでは無くなってしまう</strong></a>．</p>
<blockquote>
<p>Remove the stack image command. With the advent of Docker multistage builds, this functionality is no longer useful. For an example, please see Building Haskell Apps with Docker.</p>
</blockquote>
<p>マルチステージビルドができたし，あんまりこれもう便利じゃないよね，とのこと． 代わりに「<a href="https://www.fpcomplete.com/blog/2017/12/building-haskell-apps-with-docker">Building Haskell Apps with Docker</a>」という記事を読むと良いらしい．</p>
<h2 id="マルチステージビルドする">マルチステージビルドする</h2>
<p>上記リンクではマルチステージビルドを使えと書いてある． 多分こんな感じ(試してない):</p>
<div class="sourceCode" id="cb2"><pre class="sourceCode dockerfile"><code class="sourceCode dockerfile"><span id="cb2-1"><a href="#cb2-1"></a><span class="kw">FROM</span> fpco/stack-build:lts-13.21 as bin</span>
<span id="cb2-2"><a href="#cb2-2"></a><span class="kw">RUN</span> mkdir -p /root/work</span>
<span id="cb2-3"><a href="#cb2-3"></a><span class="kw">COPY</span> . /root/work</span>
<span id="cb2-4"><a href="#cb2-4"></a><span class="kw">RUN</span> cd /root/work &amp;&amp; stack install --system-ghc</span>
<span id="cb2-5"><a href="#cb2-5"></a></span>
<span id="cb2-6"><a href="#cb2-6"></a><span class="kw">FROM</span> matsubara0507/ubuntu-for-haskell</span>
<span id="cb2-7"><a href="#cb2-7"></a><span class="kw">RUN</span> mkdir -p /root/.local/bin &amp;&amp; mkdir -p /root/work</span>
<span id="cb2-8"><a href="#cb2-8"></a><span class="kw">ENV</span> PATH /root/.local/bin:$PATH</span>
<span id="cb2-9"><a href="#cb2-9"></a><span class="kw">WORKDIR</span> /root/work</span>
<span id="cb2-10"><a href="#cb2-10"></a><span class="kw">COPY</span> --from=bin /root/.local/bin /root/.local/bin</span></code></pre></div>
<p>stack の Docker Integration は残ってるので <code>stack --docker build</code> とすることで Docker コンテナ内でのビルド自体は実行される(これによってローカルにキャッシュが作られる)． 一つ目のステージでは <code>stack install</code> により <code>.stack-work</code> 内の実行ファイルを <code>/root/.local/bin</code> にコピーし，二つ目のステージではさらにこの実行ファイルだけを最終的に作られるイメージにコピーしている． ちなみに，<code>/root/.local/bin</code> は stack が決めてるローカル実行ファイルを置くパスで，<code>stack path</code> で確認できる(OS によって違うはず)．</p>
<p>でもこれ一つ欠点があって． <code>docker build</code> するときに，肥大化しがちな <code>.stack-work</code> をいちいち上げる必要があるので，だんだん <code>docker build</code> の時間が長くなる(最近作ってたアプリケーションは4GBになってしまって…)． <code>.dockerignore</code> で無視できれば良いのだが，それだと <code>stack insatll</code> できない(<code>.stack-work</code> 内の実行ファイルのパスは resolver や GHC のバージョンなどで変わるので，これをイチイチ <code>.dockerignore</code> に書くのはめんどくさい)．</p>
<h2 id="local-bin-path-オプション">local-bin-path オプション</h2>
<p><code>docker build</code> する時は <code>.stack-work</code> を無視したい． じゃぁどうするか． 一つ目のステージでやっているのは既に出来上がった実行ファイルを <code>stack install</code> を使って分かりやすいパスに持ってきてるだけだ． そこで気づく，それを上書きするオプションがあるのではないかと． あった:</p>
<ul>
<li><a href="https://github.com/commercialhaskell/stack/issues/730">Specify local-bin-path · Issue #730 · commercialhaskell/stack · GitHub</a></li>
</ul>
<p><code>stack --local-bin-path=any_path install</code> とすることで任意のパスに実行ファイルをコピーできる！ 知らなかった． あとはここから <code>docker build</code> で実行ファイルコピーしてくるように Dockerfile を書くだけ:</p>
<div class="sourceCode" id="cb3"><pre class="sourceCode dockerfile"><code class="sourceCode dockerfile"><span id="cb3-1"><a href="#cb3-1"></a><span class="kw">FROM</span> matsubara0507/ubuntu-for-haskell</span>
<span id="cb3-2"><a href="#cb3-2"></a><span class="kw">ARG</span> local_bin_path</span>
<span id="cb3-3"><a href="#cb3-3"></a><span class="kw">RUN</span> mkdir -p /root/.local/bin &amp;&amp; mkdir -p /root/work</span>
<span id="cb3-4"><a href="#cb3-4"></a><span class="kw">ENV</span> PATH /root/.local/bin:$PATH</span>
<span id="cb3-5"><a href="#cb3-5"></a><span class="kw">WORKDIR</span> /root/work</span>
<span id="cb3-6"><a href="#cb3-6"></a><span class="kw">COPY</span> ${local_bin_path} /root/.local/bin</span></code></pre></div>
<p><code>ARG</code> を使ったので次のように <code>docker build</code> コマンドのオプションで指定する:</p>
<pre><code>$ stack --local-bin-path=./bin --docker install
$ docker build -t matsubara0507/whoami . --build-arg local_bin_path=./bin</code></pre>
<p>いい感じ！ もちろん <code>.dockerignore</code> に <code>.stack-work</code> が書いてあるのでイメージのビルドも速い．</p>
<h2 id="おしまい">おしまい</h2>
<p>これで心置き無く新しい stack のバージョンを使うことができる．</p>
  </div>]]></summary>
</entry>
<entry>
    <title>rio + extensible なフレームワーク: mix</title>
    <link href="https://matsubara0507.github.io/posts/2019-05-27-create-mix-libs.html" />
    <id>https://matsubara0507.github.io/posts/2019-05-27-create-mix-libs.html</id>
    <published>2019-05-27T00:00:00Z</published>
    <updated>2019-05-27T00:00:00Z</updated>
    <summary type="html"><![CDATA[<div class="post-content" itemprop="articleBody">
    <p>最近はよく <a href="https://hackage.haskell.org/package/rio">rio</a> + <a href="https://hackage.haskell.org/package/extensible">extensible</a> で Haskell アプリケーションを書きます(趣味の)． 前々から何となくパターン化できそうだなぁと思っていたのが，それをついにパターン化し mix パッケージとして形にしましたというお話です．</p>
<p>ちなみに，それぞれのパッケージを軽く説明すると:</p>
<ul>
<li>rio : Haskell のビルドツール Stack を開発しているチームが作っている Reader パターンをベースにした Alt. Prelude</li>
<li>extensible : 拡張可能レコードを始めとして様々な拡張可能なデータ構造を同一の形式で利用できるようになるパッケージ</li>
</ul>
<h2 id="mix-パッケージ">mix パッケージ</h2>
<p>リポジトリはこれ:</p>
<h5 id="section"><iframe width="320" height="184" scrolling="no" frameborder="0" src="https://matsubara0507.github.io/my-github-cards/?target=matsubara0507/mix.hs"></iframe></h5>
<p>mix パッケージの目的は rio パッケージの <code>RIO env a</code> モナドの <code>env</code> の部分を extensible パッケージを用いて簡単に構築することであり，<code>env</code> をプラグインとして構築する． プラグインで構築という部分は <a href="https://hackage.haskell.org/package/tonatona">tonatona</a> から着想を得た(tonatona も rio のラッパーパッケージなはず)． 例えば，<code>rio</code> パッケージのロガーを利用して次のような簡易的なプログラムをかける:</p>
<div class="sourceCode" id="cb1"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span id="cb1-1"><a href="#cb1-1"></a><span class="kw">module</span> <span class="dt">Main</span> <span class="kw">where</span></span>
<span id="cb1-2"><a href="#cb1-2"></a></span>
<span id="cb1-3"><a href="#cb1-3"></a><span class="kw">import</span>           <span class="dt">RIO</span></span>
<span id="cb1-4"><a href="#cb1-4"></a></span>
<span id="cb1-5"><a href="#cb1-5"></a><span class="kw">import</span>           <span class="dt">Data.Extensible</span></span>
<span id="cb1-6"><a href="#cb1-6"></a><span class="kw">import</span>           <span class="dt">Mix</span></span>
<span id="cb1-7"><a href="#cb1-7"></a><span class="kw">import</span>           <span class="dt">Mix.Plugin.Logger</span> <span class="kw">as</span> <span class="dt">MixLogger</span></span>
<span id="cb1-8"><a href="#cb1-8"></a></span>
<span id="cb1-9"><a href="#cb1-9"></a><span class="kw">type</span> <span class="dt">Env</span> <span class="ot">=</span> <span class="dt">Record</span></span>
<span id="cb1-10"><a href="#cb1-10"></a>  &#39;[ <span class="st">&quot;logger&quot;</span> <span class="op">&gt;:</span> <span class="dt">MixLogger.LogFunc</span></span>
<span id="cb1-11"><a href="#cb1-11"></a>   , <span class="st">&quot;name&quot;</span>   <span class="op">&gt;:</span> <span class="dt">Text</span></span>
<span id="cb1-12"><a href="#cb1-12"></a>   ]</span>
<span id="cb1-13"><a href="#cb1-13"></a></span>
<span id="cb1-14"><a href="#cb1-14"></a><span class="ot">main ::</span> <span class="dt">IO</span> ()</span>
<span id="cb1-15"><a href="#cb1-15"></a>main <span class="ot">=</span> Mix.run plugin <span class="op">$</span> <span class="kw">do</span></span>
<span id="cb1-16"><a href="#cb1-16"></a>  name <span class="ot">&lt;-</span> asks (view <span class="op">#</span>name)</span>
<span id="cb1-17"><a href="#cb1-17"></a>  MixLogger.logDebug <span class="op">$</span> display (<span class="st">&quot;This is debug: &quot;</span> <span class="op">&lt;&gt;</span> name)</span>
<span id="cb1-18"><a href="#cb1-18"></a>  MixLogger.logInfo  <span class="op">$</span> display (<span class="st">&quot;This is info: &quot;</span>  <span class="op">&lt;&gt;</span> name)</span>
<span id="cb1-19"><a href="#cb1-19"></a>  MixLogger.logWarn  <span class="op">$</span> display (<span class="st">&quot;This is warn: &quot;</span>  <span class="op">&lt;&gt;</span> name)</span>
<span id="cb1-20"><a href="#cb1-20"></a>  MixLogger.logError <span class="op">$</span> display (<span class="st">&quot;This is error: &quot;</span> <span class="op">&lt;&gt;</span> name)</span>
<span id="cb1-21"><a href="#cb1-21"></a>  <span class="kw">where</span></span>
<span id="cb1-22"><a href="#cb1-22"></a><span class="ot">    plugin ::</span> <span class="dt">Plugin</span> () <span class="dt">IO</span> <span class="dt">Env</span></span>
<span id="cb1-23"><a href="#cb1-23"></a>    plugin <span class="ot">=</span> hsequence</span>
<span id="cb1-24"><a href="#cb1-24"></a>        <span class="op">$</span> <span class="op">#</span>logger <span class="op">&lt;@=&gt;</span> MixLogger.buildPlugin (<span class="op">#</span>handle <span class="op">@=</span> stdout <span class="op">&lt;:</span> <span class="op">#</span>verbose <span class="op">@=</span> <span class="dt">True</span> <span class="op">&lt;:</span> nil)</span>
<span id="cb1-25"><a href="#cb1-25"></a>       <span class="op">&lt;:</span> <span class="op">#</span>name   <span class="op">&lt;@=&gt;</span> <span class="fu">pure</span> <span class="st">&quot;Hoge&quot;</span></span>
<span id="cb1-26"><a href="#cb1-26"></a>       <span class="op">&lt;:</span> nil</span></code></pre></div>
<p>tonatona との違いは <code>RIO env a</code> の <code>env</code> に当たる部分に対して，特別なインスタンス宣言がいらない点だ． 単純に，設定っぽい extensible の拡張可能レコード(<code>#logger &lt;@=&gt; ...</code> とか)を記述するだけで良い． これの実行結果は次のようになる:</p>
<pre class="code"><code>$ stack runghc mix/sample/Main.hs
2019-05-21 22:33:49.378471: [debug] This is debug: Hoge
@(mix/sample/Main.hs:23:3)
2019-05-21 22:33:49.381893: [info] This is info: Hoge
@(mix/sample/Main.hs:24:3)
2019-05-21 22:33:49.381943: [warn] This is warn: Hoge
@(mix/sample/Main.hs:25:3)
2019-05-21 22:33:49.382005: [error] This is error: Hoge
@(mix/sample/Main.hs:26:3)</code></pre>
<p>なぜ mix ではインスタンス宣言などせずに自由にプラグインのオンオフや設定のカスタマイズをすることができるのだろうか？ 言わずもがな，<code>extensible</code> の魔法によるものである．</p>
<h3 id="extensible-の魔法">extensible の魔法</h3>
<p>もっとも鬼門になったのは rio のロガーだ． rio のロガーは次のように利用する必要がある:</p>
<div class="sourceCode" id="cb3"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span id="cb3-1"><a href="#cb3-1"></a><span class="kw">newtype</span> <span class="dt">Env</span> <span class="ot">=</span> <span class="dt">Env</span> {<span class="ot"> logFunc ::</span> <span class="dt">LogFunc</span> }</span>
<span id="cb3-2"><a href="#cb3-2"></a></span>
<span id="cb3-3"><a href="#cb3-3"></a><span class="ot">main ::</span> <span class="dt">IO</span> ()</span>
<span id="cb3-4"><a href="#cb3-4"></a>main <span class="ot">=</span> <span class="kw">do</span></span>
<span id="cb3-5"><a href="#cb3-5"></a>  opt <span class="ot">&lt;-</span> logOptionsHandle stdout <span class="dt">False</span></span>
<span id="cb3-6"><a href="#cb3-6"></a>  withLogFunc opt <span class="op">$</span> \logFunc <span class="ot">-&gt;</span> runRIO <span class="dt">Env</span>{<span class="op">..</span>} <span class="op">$</span> <span class="kw">do</span></span>
<span id="cb3-7"><a href="#cb3-7"></a>    logInfo <span class="st">&quot;hoge&quot;</span></span>
<span id="cb3-8"><a href="#cb3-8"></a>    logDebug <span class="st">&quot;fuga&quot;</span></span></code></pre></div>
<p><code>withLogFunc opt</code> の型は <code>MonadUnliftIO m =&gt; (LogFunc -&gt; m a) -&gt; m a</code> となっている． なぜこのような形になっているのかの秘密は(たぶん) <code>MonadUnliftIO</code> にあるのだが今回は割愛する． この型，よく見ると継続になっているのがわかるだろうか？</p>
<div class="sourceCode" id="cb4"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span id="cb4-1"><a href="#cb4-1"></a><span class="ot">withLogFunc ::</span> <span class="dt">MonadUnliftIO</span> m <span class="ot">=&gt;</span> <span class="dt">LogOptions</span> <span class="ot">-&gt;</span> (<span class="dt">LogFunc</span> <span class="ot">-&gt;</span> m a) <span class="ot">-&gt;</span> m a</span>
<span id="cb4-2"><a href="#cb4-2"></a></span>
<span id="cb4-3"><a href="#cb4-3"></a><span class="co">-- 継続(Continuation)のモナドトランスフォーム仕様の型</span></span>
<span id="cb4-4"><a href="#cb4-4"></a><span class="kw">newtype</span> <span class="dt">ContT</span> r m a <span class="ot">=</span> <span class="dt">ContT</span> {<span class="ot"> runContT ::</span> ((a <span class="ot">-&gt;</span> m r) <span class="ot">-&gt;</span> m r) }</span></code></pre></div>
<p>継続は <code>Monad</code> 型クラスのインスタンスなのでモナディックに扱える． そして，extensible の拡張可能レコードの特徴として <strong>レコードのフィールドをモナディックに走査できる！</strong> というのがある(正確には <code>Applicative</code> ですが)． 例えば <a href="http://hackage.haskell.org/package/extensible-0.5/docs/Data-Extensible-Product.html#v:hsequence"><code>hsequence</code></a> という関数が走査する関数だ:</p>
<div class="sourceCode" id="cb5"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span id="cb5-1"><a href="#cb5-1"></a><span class="ot">hsequence ::</span> <span class="dt">Applicative</span> f <span class="ot">=&gt;</span> (<span class="dt">Comp</span> f h <span class="op">:*</span> xs) <span class="ot">-&gt;</span> f (h <span class="op">:*</span> xs)</span></code></pre></div>
<p>実は <code>Plugin</code> という型はただの継続で，<code>Mix.run plugin</code> は単純に <code>runContT</code> した中で <code>runRIO env action</code> しているだけだ:</p>
<div class="sourceCode" id="cb6"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span id="cb6-1"><a href="#cb6-1"></a><span class="kw">type</span> <span class="dt">Plugin</span> a m env <span class="ot">=</span> <span class="dt">ContT</span> a m env</span>
<span id="cb6-2"><a href="#cb6-2"></a></span>
<span id="cb6-3"><a href="#cb6-3"></a><span class="ot">run ::</span> <span class="dt">MonadIO</span> m <span class="ot">=&gt;</span> <span class="dt">Plugin</span> a m env <span class="ot">-&gt;</span> <span class="dt">RIO</span> env a <span class="ot">-&gt;</span> m a</span>
<span id="cb6-4"><a href="#cb6-4"></a>run plugin act <span class="ot">=</span> (<span class="ot">`runRIO`</span> act) <span class="ot">`withPlugin`</span> plugin</span>
<span id="cb6-5"><a href="#cb6-5"></a></span>
<span id="cb6-6"><a href="#cb6-6"></a><span class="ot">withPlugin ::</span> (env <span class="ot">-&gt;</span> m a) <span class="ot">-&gt;</span> <span class="dt">Plugin</span> a m env <span class="ot">-&gt;</span> m a</span>
<span id="cb6-7"><a href="#cb6-7"></a>withPlugin <span class="ot">=</span> <span class="fu">flip</span> runContT</span>
<span id="cb6-8"><a href="#cb6-8"></a></span>
<span id="cb6-9"><a href="#cb6-9"></a><span class="ot">toPlugin ::</span> ((env <span class="ot">-&gt;</span> m a) <span class="ot">-&gt;</span> m a) <span class="ot">-&gt;</span> <span class="dt">Plugin</span> a m env</span>
<span id="cb6-10"><a href="#cb6-10"></a>toPlugin <span class="ot">=</span> <span class="dt">ContT</span></span></code></pre></div>
<p>思いついてしまえば極めて簡単な仕組みだ(なおパフォーマンスについては特に考えていません)．</p>
<h2 id="プラグイン">プラグイン</h2>
<p>プラグインと言ったもののただの継続だ． 今あるのは:</p>
<ul>
<li>Logger</li>
<li>Config</li>
<li>API Client (GitHub, Drone)</li>
<li>Shell</li>
</ul>
<p>だけで，ちょうど最近作ってたOSSで必要になった分だけ． そのうちDB系のやつを作ってもいいかもしれない． これらは全て mix と同じリポジトリに置いてある．</p>
<h3 id="logger-と-config">Logger と Config</h3>
<p>この2つは mix ライブラリに入っている． Logger は上記に載せた rio の Logger のラッパー． Config というのは設定ファイルを指しているつもり． <code>&quot;config&quot;</code> フィールドと任意の型と紐づかせている:</p>
<div class="sourceCode" id="cb7"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span id="cb7-1"><a href="#cb7-1"></a><span class="kw">import</span> <span class="kw">qualified</span> <span class="dt">Mix.Plugin.Logger</span> <span class="kw">as</span> <span class="dt">MixLogger</span></span>
<span id="cb7-2"><a href="#cb7-2"></a><span class="kw">import</span> <span class="kw">qualified</span> <span class="dt">Mix.Plugin.Config</span> <span class="kw">as</span> <span class="dt">MixConfig</span></span>
<span id="cb7-3"><a href="#cb7-3"></a></span>
<span id="cb7-4"><a href="#cb7-4"></a><span class="kw">type</span> <span class="dt">Env</span> <span class="ot">=</span> <span class="dt">Record</span></span>
<span id="cb7-5"><a href="#cb7-5"></a>  &#39;[ <span class="st">&quot;logger&quot;</span> <span class="op">&gt;:</span> <span class="dt">MixLogger.LogFunc</span></span>
<span id="cb7-6"><a href="#cb7-6"></a>   , <span class="st">&quot;config&quot;</span> <span class="op">&gt;:</span> <span class="dt">Config</span></span>
<span id="cb7-7"><a href="#cb7-7"></a>   ]</span>
<span id="cb7-8"><a href="#cb7-8"></a></span>
<span id="cb7-9"><a href="#cb7-9"></a><span class="kw">type</span> <span class="dt">Config</span> <span class="ot">=</span> <span class="dt">Record</span></span>
<span id="cb7-10"><a href="#cb7-10"></a>  &#39;[ <span class="st">&quot;name&quot;</span> <span class="op">&gt;:</span> <span class="dt">Text</span></span>
<span id="cb7-11"><a href="#cb7-11"></a>   ]</span>
<span id="cb7-12"><a href="#cb7-12"></a></span>
<span id="cb7-13"><a href="#cb7-13"></a><span class="ot">main ::</span> <span class="dt">IO</span> ()</span>
<span id="cb7-14"><a href="#cb7-14"></a>main <span class="ot">=</span> Mix.run plugin <span class="op">$</span> <span class="kw">do</span></span>
<span id="cb7-15"><a href="#cb7-15"></a>  config <span class="ot">&lt;-</span> MixConfig.askConfig</span>
<span id="cb7-16"><a href="#cb7-16"></a>  MixLogger.logInfo <span class="op">$</span> display (<span class="st">&quot;This is info: &quot;</span> <span class="op">&lt;&gt;</span> config <span class="op">^.</span> <span class="op">#</span>name)</span>
<span id="cb7-17"><a href="#cb7-17"></a>  <span class="kw">where</span></span>
<span id="cb7-18"><a href="#cb7-18"></a><span class="ot">    plugin ::</span> <span class="dt">Plugin</span> () <span class="dt">IO</span> <span class="dt">Env</span></span>
<span id="cb7-19"><a href="#cb7-19"></a>    plugin <span class="ot">=</span> hsequence</span>
<span id="cb7-20"><a href="#cb7-20"></a>        <span class="op">$</span> <span class="op">#</span>logger <span class="op">&lt;@=&gt;</span> MixLogger.buildPlugin (<span class="op">#</span>handle <span class="op">@=</span> stdout <span class="op">&lt;:</span> <span class="op">#</span>verbose <span class="op">@=</span> <span class="dt">True</span> <span class="op">&lt;:</span> nil)</span>
<span id="cb7-21"><a href="#cb7-21"></a>       <span class="op">&lt;:</span> <span class="op">#</span>config <span class="op">&lt;@=&gt;</span> MixConfig.buildPlugin (<span class="op">#</span>name <span class="op">@=</span> <span class="st">&quot;hoge&quot;</span> <span class="op">&lt;:</span> nil)</span>
<span id="cb7-22"><a href="#cb7-22"></a>       <span class="op">&lt;:</span> nil</span></code></pre></div>
<p>Config は試しに作ってみたけど，いまいち使い道がない．</p>
<h3 id="api-client">API Client</h3>
<p>API クライアントを利用するのに必要な情報(API トークンなど)を <code>env</code> に載せて，クライアントを利用するときにほんの少しだけ簡単に利用できるプラグイン． GitHub と <a href="https://drone.io/">Drone CI</a> のものを作った． GitHub のクライアントは <a href="https://hackage.haskell.org/package/github">github</a> パッケージを Drone のクライアントは(僕が作った) <a href="https://hackage.haskell.org/package/drone">drone</a> パッケージを使う． 各プラグインのパッケージは <a href="https://github.com/matsubara0507/mix.hs/tree/master/mix-plugin-github">mix-plugin-github</a> と <a href="https://github.com/matsubara0507/mix.hs/tree/master/mix-plugin-drone">mix-plugin-drone</a> として matsubara0507/mix.hs リポジトリに置いてある．</p>
<p>こんな感じに使える:</p>
<div class="sourceCode" id="cb8"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span id="cb8-1"><a href="#cb8-1"></a><span class="kw">import</span> <span class="kw">qualified</span> <span class="dt">Drone</span></span>
<span id="cb8-2"><a href="#cb8-2"></a><span class="kw">import</span> <span class="kw">qualified</span> <span class="dt">GitHub</span></span>
<span id="cb8-3"><a href="#cb8-3"></a><span class="kw">import</span> <span class="kw">qualified</span> <span class="dt">GitHub.Endpoints.Users</span> <span class="kw">as</span> <span class="dt">GitHub</span></span>
<span id="cb8-4"><a href="#cb8-4"></a><span class="kw">import</span> <span class="kw">qualified</span> <span class="dt">Mix.Plugin.Drone</span>       <span class="kw">as</span> <span class="dt">MixDrone</span></span>
<span id="cb8-5"><a href="#cb8-5"></a><span class="kw">import</span> <span class="kw">qualified</span> <span class="dt">Mix.Plugin.GitHub</span>      <span class="kw">as</span> <span class="dt">MixGitHub</span></span>
<span id="cb8-6"><a href="#cb8-6"></a><span class="kw">import</span>           <span class="dt">System.Environment</span>     (getEnv)</span>
<span id="cb8-7"><a href="#cb8-7"></a></span>
<span id="cb8-8"><a href="#cb8-8"></a><span class="kw">type</span> <span class="dt">Env</span> <span class="ot">=</span> <span class="dt">Record</span></span>
<span id="cb8-9"><a href="#cb8-9"></a>  &#39;[ <span class="st">&quot;logger&quot;</span> <span class="op">&gt;:</span> <span class="dt">MixLogger.LogFunc</span></span>
<span id="cb8-10"><a href="#cb8-10"></a>   , <span class="st">&quot;github&quot;</span> <span class="op">&gt;:</span> <span class="dt">MixGitHub.Token</span></span>
<span id="cb8-11"><a href="#cb8-11"></a>   , <span class="st">&quot;drone&quot;</span>  <span class="op">&gt;:</span> <span class="dt">MixDrone.Config</span></span>
<span id="cb8-12"><a href="#cb8-12"></a>   ]</span>
<span id="cb8-13"><a href="#cb8-13"></a></span>
<span id="cb8-14"><a href="#cb8-14"></a><span class="ot">main ::</span> <span class="dt">IO</span> ()</span>
<span id="cb8-15"><a href="#cb8-15"></a>main <span class="ot">=</span> <span class="kw">do</span></span>
<span id="cb8-16"><a href="#cb8-16"></a>  gToken <span class="ot">&lt;-</span> liftIO <span class="op">$</span> fromString <span class="op">&lt;$&gt;</span> getEnv <span class="st">&quot;GH_TOKEN&quot;</span></span>
<span id="cb8-17"><a href="#cb8-17"></a>  dHost  <span class="ot">&lt;-</span> liftIO <span class="op">$</span> fromString <span class="op">&lt;$&gt;</span> getEnv <span class="st">&quot;DRONE_HOST&quot;</span></span>
<span id="cb8-18"><a href="#cb8-18"></a>  dToken <span class="ot">&lt;-</span> liftIO <span class="op">$</span> fromString <span class="op">&lt;$&gt;</span> getEnv <span class="st">&quot;DRONE_TOKEN&quot;</span></span>
<span id="cb8-19"><a href="#cb8-19"></a>  <span class="kw">let</span> logConf <span class="ot">=</span> <span class="op">#</span>handle <span class="op">@=</span> stdout <span class="op">&lt;:</span> <span class="op">#</span>verbose <span class="op">@=</span> <span class="dt">False</span> <span class="op">&lt;:</span> nil</span>
<span id="cb8-20"><a href="#cb8-20"></a>      dClient <span class="ot">=</span> <span class="op">#</span>host <span class="op">@=</span> dHost <span class="op">&lt;:</span> <span class="op">#</span>port <span class="op">@=</span> <span class="dt">Nothing</span> <span class="op">&lt;:</span> <span class="op">#</span>token <span class="op">@=</span> dToken <span class="op">&lt;:</span> nil</span>
<span id="cb8-21"><a href="#cb8-21"></a>      plugin <span class="ot">=</span> hsequence</span>
<span id="cb8-22"><a href="#cb8-22"></a>            <span class="op">$</span> <span class="op">#</span>logger <span class="op">&lt;@=&gt;</span> MixLogger.buildPlugin logConf</span>
<span id="cb8-23"><a href="#cb8-23"></a>           <span class="op">&lt;:</span> <span class="op">#</span>github <span class="op">&lt;@=&gt;</span> MixGitHub.buildPlugin gToken</span>
<span id="cb8-24"><a href="#cb8-24"></a>           <span class="op">&lt;:</span> <span class="op">#</span>drone  <span class="op">&lt;@=&gt;</span> MixDrone.buildPlugin dClient <span class="dt">True</span>  </span>
<span id="cb8-25"><a href="#cb8-25"></a>           <span class="op">&lt;:</span> nil</span>
<span id="cb8-26"><a href="#cb8-26"></a>  Mix.run plugin app</span>
<span id="cb8-27"><a href="#cb8-27"></a></span>
<span id="cb8-28"><a href="#cb8-28"></a><span class="ot">app ::</span> <span class="dt">RIO</span> <span class="dt">Env</span> ()</span>
<span id="cb8-29"><a href="#cb8-29"></a>app <span class="ot">=</span> <span class="kw">do</span></span>
<span id="cb8-30"><a href="#cb8-30"></a>  MixLogger.logInfo <span class="st">&quot;fetch GitHub user info:&quot;</span></span>
<span id="cb8-31"><a href="#cb8-31"></a>  resp <span class="ot">&lt;-</span> MixGitHub.fetch GitHub.userInfoCurrent&#39;</span>
<span id="cb8-32"><a href="#cb8-32"></a>  <span class="kw">case</span> resp <span class="kw">of</span></span>
<span id="cb8-33"><a href="#cb8-33"></a>    <span class="dt">Left</span> err   <span class="ot">-&gt;</span> logError <span class="st">&quot;GitHub fetch error....&quot;</span></span>
<span id="cb8-34"><a href="#cb8-34"></a>    <span class="dt">Right</span> user <span class="ot">-&gt;</span> logInfo <span class="op">$</span> display (<span class="st">&quot;Hi &quot;</span> <span class="op">&lt;&gt;</span> ghLogin user <span class="op">&lt;&gt;</span> <span class="st">&quot;!!&quot;</span>)</span>
<span id="cb8-35"><a href="#cb8-35"></a>  MixLogger.logInfo <span class="st">&quot;fetch Drone user info:&quot;</span></span>
<span id="cb8-36"><a href="#cb8-36"></a>  tryAny (responseBody <span class="op">&lt;$&gt;</span> MixDrone.fetch Drone.getSelf) <span class="op">&gt;&gt;=</span> \<span class="kw">case</span></span>
<span id="cb8-37"><a href="#cb8-37"></a>    <span class="dt">Left</span> err   <span class="ot">-&gt;</span> logError <span class="st">&quot;Drone CI fetch error...&quot;</span></span>
<span id="cb8-38"><a href="#cb8-38"></a>    <span class="dt">Right</span> user <span class="ot">-&gt;</span> logInfo <span class="op">$</span> display (<span class="st">&quot;Hi &quot;</span> <span class="op">&lt;&gt;</span> user <span class="op">^.</span> <span class="op">#</span>login <span class="op">&lt;&gt;</span> <span class="st">&quot;!!&quot;</span>)</span>
<span id="cb8-39"><a href="#cb8-39"></a>  <span class="kw">where</span></span>
<span id="cb8-40"><a href="#cb8-40"></a>    ghLogin <span class="ot">=</span> GitHub.untagName <span class="op">.</span> GitHub.userLogin</span></code></pre></div>
<p>これを実行するとこんな感じ:</p>
<pre class="code"><code>$ GH_TOKEN=xxx DRONE_HOST=cloud.drone.io DRONE_TOKEN=yyy stack runghc -- Main.hs
fetch GitHub user info:
Hi matsubara0507!!
fetch Drone user info:
Hi matsubara0507!!</code></pre>
<p>本来は <code>env</code> を <code>Reader</code> モナドから取ってきて使うのを省いているだけなので，まぁ対して変わらない． 試しに実験的に作ってみただけ． インターフェースを揃えるとか，もう少し手を加えてもいいかもしれない．</p>
<h3 id="shell-コマンド">Shell コマンド</h3>
<p><a href="https://hackage.haskell.org/package/shelly">shelly</a> というパッケージを利用したシェルコマンドの実行を支援する． <code>env</code> にはシェルコマンドを実行したいパスを保存し，与えたシェルコマンドを <code>cd</code> した上で実行してくれる:</p>
<div class="sourceCode" id="cb10"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span id="cb10-1"><a href="#cb10-1"></a><span class="kw">import</span> <span class="kw">qualified</span> <span class="dt">Mix.Plugin.Shell</span>  <span class="kw">as</span> <span class="dt">MixShell</span></span>
<span id="cb10-2"><a href="#cb10-2"></a><span class="kw">import</span> <span class="kw">qualified</span> <span class="dt">Shelly</span>            <span class="kw">as</span> <span class="dt">Shell</span></span>
<span id="cb10-3"><a href="#cb10-3"></a></span>
<span id="cb10-4"><a href="#cb10-4"></a><span class="kw">type</span> <span class="dt">Env</span> <span class="ot">=</span> <span class="dt">Record</span></span>
<span id="cb10-5"><a href="#cb10-5"></a>  &#39;[ <span class="st">&quot;logger&quot;</span> <span class="op">&gt;:</span> <span class="dt">MixLogger.LogFunc</span></span>
<span id="cb10-6"><a href="#cb10-6"></a>   , <span class="st">&quot;work&quot;</span>   <span class="op">&gt;:</span> <span class="dt">FilePath</span></span>
<span id="cb10-7"><a href="#cb10-7"></a>   ]</span>
<span id="cb10-8"><a href="#cb10-8"></a></span>
<span id="cb10-9"><a href="#cb10-9"></a><span class="ot">main ::</span> <span class="dt">IO</span> ()</span>
<span id="cb10-10"><a href="#cb10-10"></a>main <span class="ot">=</span> Mix.run plugin <span class="op">$</span> <span class="kw">do</span></span>
<span id="cb10-11"><a href="#cb10-11"></a>  paths <span class="ot">&lt;-</span> MixShell.exec <span class="op">$</span> Shell.ls <span class="st">&quot;.&quot;</span></span>
<span id="cb10-12"><a href="#cb10-12"></a>  forM_ paths <span class="op">$</span> \path <span class="ot">-&gt;</span> MixLogger.logInfo (display <span class="op">$</span> Shell.toTextIgnore path)</span>
<span id="cb10-13"><a href="#cb10-13"></a>  <span class="kw">where</span></span>
<span id="cb10-14"><a href="#cb10-14"></a><span class="ot">    plugin ::</span> <span class="dt">Plugin</span> () <span class="dt">IO</span> <span class="dt">Env</span></span>
<span id="cb10-15"><a href="#cb10-15"></a>    plugin <span class="ot">=</span> hsequence</span>
<span id="cb10-16"><a href="#cb10-16"></a>        <span class="op">$</span> <span class="op">#</span>logger <span class="op">&lt;@=&gt;</span> MixLogger.buildPlugin (<span class="op">#</span>handle <span class="op">@=</span> stdout <span class="op">&lt;:</span> <span class="op">#</span>verbose <span class="op">@=</span> <span class="dt">False</span> <span class="op">&lt;:</span> nil)</span>
<span id="cb10-17"><a href="#cb10-17"></a>       <span class="op">&lt;:</span> <span class="op">#</span>work   <span class="op">&lt;@=&gt;</span> <span class="fu">pure</span> <span class="st">&quot;.&quot;</span></span>
<span id="cb10-18"><a href="#cb10-18"></a>       <span class="op">&lt;:</span> nil</span></code></pre></div>
<h2 id="おしまい">おしまい</h2>
<p>過去のツールをこれで mix で置き換えていきたい2019です． ちなみにパッケージの名前は現在(2019/5)所属してる社名から(せっかく入社したならって気分)．</p>
  </div>]]></summary>
</entry>
<entry>
    <title>Drone Plugin を作ってみた: slack-notify-log</title>
    <link href="https://matsubara0507.github.io/posts/2019-05-26-create-drone-slack-notify-log.html" />
    <id>https://matsubara0507.github.io/posts/2019-05-26-create-drone-slack-notify-log.html</id>
    <published>2019-05-26T00:00:00Z</published>
    <updated>2019-05-26T00:00:00Z</updated>
    <summary type="html"><![CDATA[<div class="post-content" itemprop="articleBody">
    <p>とある事情で Drone CI のビルドログを Slack にスニペットとして通知したくなった． 公式の <a href="https://github.com/drone-plugins/drone-slack"><code>plugin/slack</code></a> では出来なそうだったので，Plugin を自作した，というお話．</p>
<h2 id="作ったもの">作ったもの</h2>
<iframe width="320" height="163" scrolling="no" frameborder="0" src="https://matsubara0507.github.io/my-github-cards/?target=matsubara0507/drone-slack-notify-log">
</iframe>
<p>色々調べてみたものの，同じビルド中の別のステップでのログを取得する方法がわからなかった… ので，最終手段として Drone API を使って引っ張ってくる方法をとった． ほぼほぼドキュメントは無いが，Drone API は <a href="https://github.com/drone/drone-go">drone/drone-go</a> を使うことで簡単に呼び出すことができる． ざっくりと次のような感じで呼び出している:</p>
<div class="sourceCode" id="cb1"><pre class="sourceCode go"><code class="sourceCode go"><span id="cb1-1"><a href="#cb1-1"></a><span class="kw">import</span> (</span>
<span id="cb1-2"><a href="#cb1-2"></a>	<span class="st">&quot;context&quot;</span></span>
<span id="cb1-3"><a href="#cb1-3"></a>	<span class="st">&quot;fmt&quot;</span></span>
<span id="cb1-4"><a href="#cb1-4"></a></span>
<span id="cb1-5"><a href="#cb1-5"></a>	<span class="st">&quot;github.com/drone/drone-go/drone&quot;</span></span>
<span id="cb1-6"><a href="#cb1-6"></a>	<span class="st">&quot;github.com/pkg/errors&quot;</span></span>
<span id="cb1-7"><a href="#cb1-7"></a>	log <span class="st">&quot;github.com/sirupsen/logrus&quot;</span></span>
<span id="cb1-8"><a href="#cb1-8"></a>	<span class="st">&quot;golang.org/x/oauth2&quot;</span></span>
<span id="cb1-9"><a href="#cb1-9"></a>)</span>
<span id="cb1-10"><a href="#cb1-10"></a></span>
<span id="cb1-11"><a href="#cb1-11"></a><span class="kw">func</span> (p Plugin) Exec() <span class="dt">error</span> {</span>
<span id="cb1-12"><a href="#cb1-12"></a>  config := <span class="bu">new</span>(oauth2.Config)</span>
<span id="cb1-13"><a href="#cb1-13"></a>  client := drone.NewClient(</span>
<span id="cb1-14"><a href="#cb1-14"></a>    p.Config.DroneHost,</span>
<span id="cb1-15"><a href="#cb1-15"></a>    config.Client(</span>
<span id="cb1-16"><a href="#cb1-16"></a>      context.Background(),</span>
<span id="cb1-17"><a href="#cb1-17"></a>      &amp;oauth2.Token{</span>
<span id="cb1-18"><a href="#cb1-18"></a>        AccessToken: p.Config.DroneToken,</span>
<span id="cb1-19"><a href="#cb1-19"></a>      },</span>
<span id="cb1-20"><a href="#cb1-20"></a>    ),</span>
<span id="cb1-21"><a href="#cb1-21"></a>  )</span>
<span id="cb1-22"><a href="#cb1-22"></a></span>
<span id="cb1-23"><a href="#cb1-23"></a>  logs, err := client.Logs(p.Repo.Owner, p.Repo.Name, p.Build.Number, p.Build.Stage, p.Config.StepNum)</span>
<span id="cb1-24"><a href="#cb1-24"></a>  <span class="kw">if</span> err != <span class="ot">nil</span> {</span>
<span id="cb1-25"><a href="#cb1-25"></a>    <span class="kw">return</span> errors.Wrapf(err, <span class="st">&quot;can&#39;t fetch drone logs: builds/%d/logs/%d/%d&quot;</span>, p.Build.Number, p.Build.Stage, p.Config.StepNum)</span>
<span id="cb1-26"><a href="#cb1-26"></a>  }</span>
<span id="cb1-27"><a href="#cb1-27"></a>  log.Infof(<span class="st">&quot;Success: fetch drone logs (lines num is %d)&quot;</span>, <span class="bu">len</span>(logs))</span>
<span id="cb1-28"><a href="#cb1-28"></a></span>
<span id="cb1-29"><a href="#cb1-29"></a>  ...</span>
<span id="cb1-30"><a href="#cb1-30"></a>}</span></code></pre></div>
<p>で，実際の Plugin の使い方はこんな感じ:</p>
<div class="sourceCode" id="cb2"><pre class="sourceCode yaml"><code class="sourceCode yaml"><span id="cb2-1"><a href="#cb2-1"></a><span class="fu">steps</span><span class="kw">:</span></span>
<span id="cb2-2"><a href="#cb2-2"></a><span class="at">  ...</span></span>
<span id="cb2-3"><a href="#cb2-3"></a><span class="kw">-</span><span class="at"> </span><span class="fu">name</span><span class="kw">:</span><span class="at"> notify drone log to slack</span></span>
<span id="cb2-4"><a href="#cb2-4"></a><span class="at">  </span><span class="fu">image</span><span class="kw">:</span><span class="at"> matsubara0507/slack-notify-log</span></span>
<span id="cb2-5"><a href="#cb2-5"></a><span class="at">  </span><span class="fu">settings</span><span class="kw">:</span></span>
<span id="cb2-6"><a href="#cb2-6"></a><span class="fu">    template</span><span class="kw">: </span><span class="ch">&gt;</span></span>
<span id="cb2-7"><a href="#cb2-7"></a>      {{#success build.status}}</span>
<span id="cb2-8"><a href="#cb2-8"></a>        {{repo.name}} is Success!</span>
<span id="cb2-9"><a href="#cb2-9"></a>      {{else}}</span>
<span id="cb2-10"><a href="#cb2-10"></a>        {{repo.name}} is Failure...</span>
<span id="cb2-11"><a href="#cb2-11"></a>      {{/success}}</span>
<span id="cb2-12"><a href="#cb2-12"></a><span class="at">    </span><span class="fu">token</span><span class="kw">:</span></span>
<span id="cb2-13"><a href="#cb2-13"></a><span class="at">      </span><span class="fu">from_secret</span><span class="kw">:</span><span class="at"> slack_token</span></span>
<span id="cb2-14"><a href="#cb2-14"></a><span class="at">    </span><span class="fu">channel</span><span class="kw">:</span><span class="at"> bot-test</span></span>
<span id="cb2-15"><a href="#cb2-15"></a><span class="at">    </span><span class="fu">step_number</span><span class="kw">:</span><span class="at"> </span><span class="dv">2</span></span>
<span id="cb2-16"><a href="#cb2-16"></a><span class="at">    </span><span class="fu">drone_host</span><span class="kw">:</span></span>
<span id="cb2-17"><a href="#cb2-17"></a><span class="at">      </span><span class="fu">from_secret</span><span class="kw">:</span><span class="at"> drone_host</span></span>
<span id="cb2-18"><a href="#cb2-18"></a><span class="at">    </span><span class="fu">drone_token</span><span class="kw">:</span></span>
<span id="cb2-19"><a href="#cb2-19"></a><span class="at">      </span><span class="fu">from_secret</span><span class="kw">:</span><span class="at"> drone_token</span></span>
<span id="cb2-20"><a href="#cb2-20"></a><span class="at">  </span><span class="fu">when</span><span class="kw">:</span></span>
<span id="cb2-21"><a href="#cb2-21"></a><span class="at">    </span><span class="fu">status</span><span class="kw">:</span></span>
<span id="cb2-22"><a href="#cb2-22"></a><span class="at">    </span><span class="kw">-</span><span class="at"> success</span></span>
<span id="cb2-23"><a href="#cb2-23"></a><span class="at">    </span><span class="kw">-</span><span class="at"> failure</span></span></code></pre></div>
<p>各 <code>settings</code> は:</p>
<ul>
<li><code>template</code> : スニペットのコメント</li>
<li><code>token</code> : slack にポストするための API トークン
<ul>
<li>個人トークンや <a href="https://slack.com/apps/A0F7YS25R-bots">Bots App</a> などから生成する</li>
</ul></li>
<li><code>channel</code> : 通知先チャンネル
<ul>
<li>無駄にテンプレートを利用できるようにした(ブランチやビルド結果によって通知先を変えるため)</li>
</ul></li>
<li><code>step_number</code> : 何ステップ目のログを通知したいか
<ul>
<li><code>step_number: 1</code> は git clone になる点に注意</li>
</ul></li>
<li><code>drone_host</code> : この CI を実行したい Drone のホスト
<ul>
<li>別にシークレットにする必要はないけど</li>
<li><code>https://cloud.drone.io</code> とか</li>
</ul></li>
<li><code>drone_token</code> : この CI を実行したい Drone の API トークン</li>
</ul>
<p>実行結果はこんな感じ:</p>
<p><img src="/assets/create-drone-slack-notify-log/example.jpg"></img></p>
<p>これは matsubara0507/drone-slack-notify-log のビルドステップ．</p>
<h2 id="おしまい">おしまい</h2>
<p>なんか他に良い方法が絶対にある気がするんだけどな…</p>
  </div>]]></summary>
</entry>
<entry>
    <title>Ruby のパターンマッチング機能を MinRuby で試す</title>
    <link href="https://matsubara0507.github.io/posts/2019-05-16-minruby-with-patternmatch.html" />
    <id>https://matsubara0507.github.io/posts/2019-05-16-minruby-with-patternmatch.html</id>
    <published>2019-05-16T00:00:00Z</published>
    <updated>2019-05-16T00:00:00Z</updated>
    <summary type="html"><![CDATA[<div class="post-content" itemprop="articleBody">
    <p>Ruby 2.7 で導入予定で，すでに <a href="https://github.com/ruby/ruby">Ruby リポジトリ</a>の trunk (いわゆる master ブランチのこと) にマージ済みの「パターンマッチング」機能を試してみたので，そのメモ書きです． 特に包括的に検証したわけではないので注意してください．</p>
<h2 id="パターンマッチング">パターンマッチング</h2>
<p>(わざわざ解説することでもないけど)</p>
<p>パターンマッチングは <code>if</code> 文や <code>case</code> 文のようなプログラムの分岐に使うプログラミング機能． <code>if</code> 文が真偽値を返す条件式 (e.g. <code>a &gt; 0 &amp;&amp; x == &#39;hoge&#39;</code>) の結果により分岐し，<code>case</code> 文が指定した変数の値によって分岐するのに対し，パターンマッチングは指定した変数のデータ構造によって分岐する．</p>
<p>例えば Ruby に導入されたパターンマッチングだと次のようになる:</p>
<div class="sourceCode" id="cb1"><pre class="sourceCode ruby"><code class="sourceCode ruby"><span id="cb1-1"><a href="#cb1-1"></a><span class="kw">case</span> var <span class="co"># var のデータ構造により分岐</span></span>
<span id="cb1-2"><a href="#cb1-2"></a><span class="kw">in</span> []</span>
<span id="cb1-3"><a href="#cb1-3"></a>  puts <span class="st">&quot;var is empty list&quot;</span></span>
<span id="cb1-4"><a href="#cb1-4"></a><span class="kw">in</span> [a]</span>
<span id="cb1-5"><a href="#cb1-5"></a>  puts <span class="st">&quot;var is singleton: </span><span class="ot">#{</span>a<span class="ot">}</span><span class="st">&quot;</span> <span class="co"># 変数 a に値を代入する</span></span>
<span id="cb1-6"><a href="#cb1-6"></a><span class="kw">in</span> [<span class="st">:hoge</span>, a, b]</span>
<span id="cb1-7"><a href="#cb1-7"></a>  puts <span class="st">&quot;var is hoge list: </span><span class="ot">#{</span>[a, b]<span class="ot">}</span><span class="st">&quot;</span> <span class="co"># 一要素目が :hoge の3要素リスト</span></span>
<span id="cb1-8"><a href="#cb1-8"></a><span class="kw">else</span></span>
<span id="cb1-9"><a href="#cb1-9"></a>  puts <span class="st">&quot;No match: </span><span class="ot">#{</span>var<span class="ot">}</span><span class="st">&quot;</span> <span class="co"># else はどれにもマッチしないとき</span></span>
<span id="cb1-10"><a href="#cb1-10"></a><span class="kw">end</span></span></code></pre></div>
<p>このようにデータ構造(例えば配列の要素数など)によって分岐かつ変数への代入が可能になる． パターンマッチングは様々なデータを扱うようなプログラミングを行う時に極めて簡潔にかつ直感的にプログラムを記述することができる．</p>
<p>ちなみに，パターンマッチングがあれば基本的に <code>if</code> 文も <code>case</code> 文も要らない． どちらもパターンマッチングの糖衣構文として表現でき，現に Haskell ではそうなっている(たぶん)．</p>
<h3 id="ruby-のパターンマッチング">Ruby のパターンマッチング</h3>
<p>ちょこちょこ既に記事があるが，RubyKaigi 2019 でも作者からの発表があり参考になる:</p>
<ul>
<li><a href="https://speakerdeck.com/k_tsj/pattern-matching-new-feature-in-ruby-2-dot-7">Pattern matching - New feature in Ruby 2.7</a></li>
</ul>
<p>すでに <a href="https://www.youtube.com/watch?v=paBlgsqoKk8">YouTube で動画も公開された</a>． ちなみに，2012 ぐらいからずっと作っていたらしい．</p>
<p>Elixir のピンパターン(<code>^var</code>)など，数多くのパターンマッチング機能がある(後発の利点ですね)． ただし，変数のスコープが個人的には思ってたのと違った:</p>
<div class="sourceCode" id="cb2"><pre class="sourceCode ruby"><code class="sourceCode ruby"><span id="cb2-1"><a href="#cb2-1"></a>irb(main):<span class="dv">001</span>:<span class="dv">0</span>&gt; <span class="kw">case</span> [<span class="dv">1</span>, <span class="dv">2</span>]</span>
<span id="cb2-2"><a href="#cb2-2"></a>irb(main):<span class="dv">002</span>:<span class="dv">1</span>&gt; <span class="kw">in</span> [a, <span class="dv">3</span>] <span class="kw">then</span> p a</span>
<span id="cb2-3"><a href="#cb2-3"></a>irb(main):<span class="dv">003</span>:<span class="dv">1</span>&gt; <span class="kw">in</span> [b, c] <span class="kw">then</span> p c</span>
<span id="cb2-4"><a href="#cb2-4"></a>irb(main):<span class="dv">004</span>:<span class="dv">1</span>&gt; <span class="kw">end</span></span>
<span id="cb2-5"><a href="#cb2-5"></a><span class="dv">2</span></span>
<span id="cb2-6"><a href="#cb2-6"></a>=&gt; <span class="dv">2</span></span>
<span id="cb2-7"><a href="#cb2-7"></a>irb(main):<span class="dv">005</span>:<span class="dv">0</span>&gt; [a,b,c]</span>
<span id="cb2-8"><a href="#cb2-8"></a>=&gt; [<span class="dv">1</span>, <span class="dv">1</span>, <span class="dv">2</span>]</span></code></pre></div>
<p><code>in ..</code> ごとにスコープは閉じてるのが一般的な気がするけど Ruby でそれは難しいのだろうか(<code>if</code> 文や <code>case</code> 文でもこんな感じの挙動)．</p>
<h2 id="試す">試す</h2>
<h3 id="ruby2.7-dev">Ruby2.7-dev</h3>
<p>前述した通り，パターンマッチングは trunk にマージされているので Ruby2.7-dev で試すことができる． trunk を試す方法はいくつかあると思うが，僕は手っ取り早く <a href="https://github.com/rbenv/rbenv">rbenv</a> を使った．</p>
<pre><code>$ rbenv install 2.7.0-dev</code></pre>
<h3 id="minruby">MinRuby</h3>
<p>パターンマッチングを試す対象として，「<a href="https://ascii.jp/elem/000/001/230/1230449/">Ruby で学ぶ Ruby</a>」という連載で作っている，かなり簡易的な Ruby のサブセット処理系 MinRuby を利用する．</p>
<p>最終的な処理系は <a href="https://github.com/matsubara0507/MinRuby.rb/blob/dbe9891f916877fc3c260135696f48344bceb98a/interp.rb">Ruby コード一枚</a>でできている(一番めんどくさい構文解析を <a href="https://github.com/ruby/ruby/tree/970a25b10415bc3735e6e3c165e167e6abc3d7f4/ext/ripper">ripper</a> とそのラッパー <a href="https://github.com/mame/minruby">minruby</a> というのに任せているので):</p>
<div class="sourceCode" id="cb4"><pre class="sourceCode ruby"><code class="sourceCode ruby"><span id="cb4-1"><a href="#cb4-1"></a><span class="co"># interp.rb</span></span>
<span id="cb4-2"><a href="#cb4-2"></a>require <span class="st">&quot;minruby&quot;</span></span>
<span id="cb4-3"><a href="#cb4-3"></a></span>
<span id="cb4-4"><a href="#cb4-4"></a><span class="kw">def</span> evaluate(tree, genv, lenv)</span>
<span id="cb4-5"><a href="#cb4-5"></a>  <span class="kw">case</span> tree[<span class="dv">0</span>]</span>
<span id="cb4-6"><a href="#cb4-6"></a>  <span class="kw">when</span> <span class="st">&quot;lit&quot;</span></span>
<span id="cb4-7"><a href="#cb4-7"></a>    tree[<span class="dv">1</span>]</span>
<span id="cb4-8"><a href="#cb4-8"></a>  <span class="kw">when</span> <span class="st">&quot;+&quot;</span></span>
<span id="cb4-9"><a href="#cb4-9"></a>    evaluate(tree[<span class="dv">1</span>], genv, lenv) + evaluate(tree[<span class="dv">2</span>], genv, lenv)</span>
<span id="cb4-10"><a href="#cb4-10"></a>  <span class="kw">when</span> <span class="st">&quot;-&quot;</span></span>
<span id="cb4-11"><a href="#cb4-11"></a>    evaluate(tree[<span class="dv">1</span>], genv, lenv) - evaluate(tree[<span class="dv">2</span>], genv, lenv)</span>
<span id="cb4-12"><a href="#cb4-12"></a>  <span class="kw">when</span> <span class="st">&quot;*&quot;</span></span>
<span id="cb4-13"><a href="#cb4-13"></a>    evaluate(tree[<span class="dv">1</span>], genv, lenv) * evaluate(tree[<span class="dv">2</span>], genv, lenv)</span>
<span id="cb4-14"><a href="#cb4-14"></a>  <span class="kw">when</span> <span class="st">&quot;/&quot;</span></span>
<span id="cb4-15"><a href="#cb4-15"></a>    evaluate(tree[<span class="dv">1</span>], genv, lenv) / evaluate(tree[<span class="dv">2</span>], genv, lenv)</span>
<span id="cb4-16"><a href="#cb4-16"></a>  <span class="kw">when</span> <span class="st">&quot;%&quot;</span></span>
<span id="cb4-17"><a href="#cb4-17"></a>    evaluate(tree[<span class="dv">1</span>], genv, lenv) % evaluate(tree[<span class="dv">2</span>], genv, lenv)</span>
<span id="cb4-18"><a href="#cb4-18"></a>  <span class="kw">when</span> <span class="st">&quot;&lt;&quot;</span></span>
<span id="cb4-19"><a href="#cb4-19"></a>    evaluate(tree[<span class="dv">1</span>], genv, lenv) &lt; evaluate(tree[<span class="dv">2</span>], genv, lenv)</span>
<span id="cb4-20"><a href="#cb4-20"></a>  <span class="kw">when</span> <span class="st">&quot;&lt;=&quot;</span></span>
<span id="cb4-21"><a href="#cb4-21"></a>    evaluate(tree[<span class="dv">1</span>], genv, lenv) &lt;= evaluate(tree[<span class="dv">2</span>], genv, lenv)</span>
<span id="cb4-22"><a href="#cb4-22"></a>  <span class="kw">when</span> <span class="st">&quot;==&quot;</span></span>
<span id="cb4-23"><a href="#cb4-23"></a>    evaluate(tree[<span class="dv">1</span>], genv, lenv) == evaluate(tree[<span class="dv">2</span>], genv, lenv)</span>
<span id="cb4-24"><a href="#cb4-24"></a>  <span class="kw">when</span> <span class="st">&quot;!=&quot;</span></span>
<span id="cb4-25"><a href="#cb4-25"></a>    evaluate(tree[<span class="dv">1</span>], genv, lenv) != evaluate(tree[<span class="dv">2</span>], genv, lenv)</span>
<span id="cb4-26"><a href="#cb4-26"></a>  <span class="kw">when</span> <span class="st">&quot;&gt;=&quot;</span></span>
<span id="cb4-27"><a href="#cb4-27"></a>    evaluate(tree[<span class="dv">1</span>], genv, lenv) &gt;= evaluate(tree[<span class="dv">2</span>], genv, lenv)</span>
<span id="cb4-28"><a href="#cb4-28"></a>  <span class="kw">when</span> <span class="st">&quot;&gt;&quot;</span></span>
<span id="cb4-29"><a href="#cb4-29"></a>    evaluate(tree[<span class="dv">1</span>], genv, lenv) &gt; evaluate(tree[<span class="dv">2</span>], genv, lenv)</span>
<span id="cb4-30"><a href="#cb4-30"></a>  <span class="kw">when</span> <span class="st">&quot;stmts&quot;</span></span>
<span id="cb4-31"><a href="#cb4-31"></a>    i = <span class="dv">1</span></span>
<span id="cb4-32"><a href="#cb4-32"></a>    last = <span class="dv">nil</span></span>
<span id="cb4-33"><a href="#cb4-33"></a>    <span class="kw">while</span> tree[i]</span>
<span id="cb4-34"><a href="#cb4-34"></a>      last = evaluate(tree[i], genv, lenv)</span>
<span id="cb4-35"><a href="#cb4-35"></a>      i = i + <span class="dv">1</span></span>
<span id="cb4-36"><a href="#cb4-36"></a>    <span class="kw">end</span></span>
<span id="cb4-37"><a href="#cb4-37"></a>    last</span>
<span id="cb4-38"><a href="#cb4-38"></a>  <span class="kw">when</span> <span class="st">&quot;var_assign&quot;</span></span>
<span id="cb4-39"><a href="#cb4-39"></a>    lenv[tree[<span class="dv">1</span>]] = evaluate(tree[<span class="dv">2</span>], genv, lenv)</span>
<span id="cb4-40"><a href="#cb4-40"></a>  <span class="kw">when</span> <span class="st">&quot;var_ref&quot;</span></span>
<span id="cb4-41"><a href="#cb4-41"></a>    lenv[tree[<span class="dv">1</span>]]</span>
<span id="cb4-42"><a href="#cb4-42"></a>  <span class="kw">when</span> <span class="st">&quot;if&quot;</span></span>
<span id="cb4-43"><a href="#cb4-43"></a>    <span class="kw">if</span> evaluate(tree[<span class="dv">1</span>], genv, lenv)</span>
<span id="cb4-44"><a href="#cb4-44"></a>      evaluate(tree[<span class="dv">2</span>], genv, lenv)</span>
<span id="cb4-45"><a href="#cb4-45"></a>    <span class="kw">else</span></span>
<span id="cb4-46"><a href="#cb4-46"></a>      evaluate(tree[<span class="dv">3</span>], genv, lenv)</span>
<span id="cb4-47"><a href="#cb4-47"></a>    <span class="kw">end</span></span>
<span id="cb4-48"><a href="#cb4-48"></a>  <span class="kw">when</span> <span class="st">&quot;while&quot;</span></span>
<span id="cb4-49"><a href="#cb4-49"></a>    <span class="kw">while</span> evaluate(tree[<span class="dv">1</span>], genv, lenv)</span>
<span id="cb4-50"><a href="#cb4-50"></a>      evaluate(tree[<span class="dv">2</span>], genv, lenv)</span>
<span id="cb4-51"><a href="#cb4-51"></a>    <span class="kw">end</span></span>
<span id="cb4-52"><a href="#cb4-52"></a>  <span class="kw">when</span> <span class="st">&quot;func_def&quot;</span></span>
<span id="cb4-53"><a href="#cb4-53"></a>    genv[tree[<span class="dv">1</span>]] = [<span class="st">&quot;user_defined&quot;</span>, tree[<span class="dv">2</span>], tree[<span class="dv">3</span>]]</span>
<span id="cb4-54"><a href="#cb4-54"></a>  <span class="kw">when</span> <span class="st">&quot;func_call&quot;</span></span>
<span id="cb4-55"><a href="#cb4-55"></a>    args = []</span>
<span id="cb4-56"><a href="#cb4-56"></a>    i = <span class="dv">0</span></span>
<span id="cb4-57"><a href="#cb4-57"></a>    <span class="kw">while</span> tree[i + <span class="dv">2</span>]</span>
<span id="cb4-58"><a href="#cb4-58"></a>      args[i] = evaluate(tree[i + <span class="dv">2</span>], genv, lenv)</span>
<span id="cb4-59"><a href="#cb4-59"></a>      i = i + <span class="dv">1</span></span>
<span id="cb4-60"><a href="#cb4-60"></a>    <span class="kw">end</span></span>
<span id="cb4-61"><a href="#cb4-61"></a>    mhd = genv[tree[<span class="dv">1</span>]]</span>
<span id="cb4-62"><a href="#cb4-62"></a>    <span class="kw">if</span> mhd[<span class="dv">0</span>] == <span class="st">&quot;builtin&quot;</span></span>
<span id="cb4-63"><a href="#cb4-63"></a>      minruby_call(mhd[<span class="dv">1</span>], args)</span>
<span id="cb4-64"><a href="#cb4-64"></a>    <span class="kw">else</span></span>
<span id="cb4-65"><a href="#cb4-65"></a>      new_lenv = {}</span>
<span id="cb4-66"><a href="#cb4-66"></a>      params = mhd[<span class="dv">1</span>]</span>
<span id="cb4-67"><a href="#cb4-67"></a>      i = <span class="dv">0</span></span>
<span id="cb4-68"><a href="#cb4-68"></a>      <span class="kw">while</span> params[i]</span>
<span id="cb4-69"><a href="#cb4-69"></a>        new_lenv[params[i]] = args[i]</span>
<span id="cb4-70"><a href="#cb4-70"></a>        i = i + <span class="dv">1</span></span>
<span id="cb4-71"><a href="#cb4-71"></a>      <span class="kw">end</span></span>
<span id="cb4-72"><a href="#cb4-72"></a>      evaluate(mhd[<span class="dv">2</span>], genv, new_lenv)</span>
<span id="cb4-73"><a href="#cb4-73"></a>    <span class="kw">end</span></span>
<span id="cb4-74"><a href="#cb4-74"></a>  <span class="kw">when</span> <span class="st">&quot;ary_new&quot;</span></span>
<span id="cb4-75"><a href="#cb4-75"></a>    ary = []</span>
<span id="cb4-76"><a href="#cb4-76"></a>    i = <span class="dv">0</span></span>
<span id="cb4-77"><a href="#cb4-77"></a>    <span class="kw">while</span> tree[i + <span class="dv">1</span>]</span>
<span id="cb4-78"><a href="#cb4-78"></a>      ary[i] = evaluate(tree[i + <span class="dv">1</span>], genv, lenv)</span>
<span id="cb4-79"><a href="#cb4-79"></a>      i = i + <span class="dv">1</span></span>
<span id="cb4-80"><a href="#cb4-80"></a>    <span class="kw">end</span></span>
<span id="cb4-81"><a href="#cb4-81"></a>    ary</span>
<span id="cb4-82"><a href="#cb4-82"></a>  <span class="kw">when</span> <span class="st">&quot;ary_ref&quot;</span></span>
<span id="cb4-83"><a href="#cb4-83"></a>    ary = evaluate(tree[<span class="dv">1</span>], genv, lenv)</span>
<span id="cb4-84"><a href="#cb4-84"></a>    idx = evaluate(tree[<span class="dv">2</span>], genv, lenv)</span>
<span id="cb4-85"><a href="#cb4-85"></a>    ary[idx]</span>
<span id="cb4-86"><a href="#cb4-86"></a>  <span class="kw">when</span> <span class="st">&quot;ary_assign&quot;</span></span>
<span id="cb4-87"><a href="#cb4-87"></a>    ary = evaluate(tree[<span class="dv">1</span>], genv, lenv)</span>
<span id="cb4-88"><a href="#cb4-88"></a>    idx = evaluate(tree[<span class="dv">2</span>], genv, lenv)</span>
<span id="cb4-89"><a href="#cb4-89"></a>    val = evaluate(tree[<span class="dv">3</span>], genv, lenv)</span>
<span id="cb4-90"><a href="#cb4-90"></a>    ary[idx] = val</span>
<span id="cb4-91"><a href="#cb4-91"></a>  <span class="kw">when</span> <span class="st">&quot;hash_new&quot;</span></span>
<span id="cb4-92"><a href="#cb4-92"></a>    hsh = {}</span>
<span id="cb4-93"><a href="#cb4-93"></a>    i = <span class="dv">0</span></span>
<span id="cb4-94"><a href="#cb4-94"></a>    <span class="kw">while</span> tree[i + <span class="dv">1</span>]</span>
<span id="cb4-95"><a href="#cb4-95"></a>      key = evaluate(tree[i + <span class="dv">1</span>], genv, lenv)</span>
<span id="cb4-96"><a href="#cb4-96"></a>      val = evaluate(tree[i + <span class="dv">2</span>], genv, lenv)</span>
<span id="cb4-97"><a href="#cb4-97"></a>      hsh[key] = val</span>
<span id="cb4-98"><a href="#cb4-98"></a>      i = i + <span class="dv">2</span></span>
<span id="cb4-99"><a href="#cb4-99"></a>    <span class="kw">end</span></span>
<span id="cb4-100"><a href="#cb4-100"></a>    hsh</span>
<span id="cb4-101"><a href="#cb4-101"></a>  <span class="kw">end</span></span>
<span id="cb4-102"><a href="#cb4-102"></a><span class="kw">end</span></span>
<span id="cb4-103"><a href="#cb4-103"></a></span>
<span id="cb4-104"><a href="#cb4-104"></a>str = minruby_load()</span>
<span id="cb4-105"><a href="#cb4-105"></a></span>
<span id="cb4-106"><a href="#cb4-106"></a>tree = minruby_parse(str)</span>
<span id="cb4-107"><a href="#cb4-107"></a></span>
<span id="cb4-108"><a href="#cb4-108"></a>genv = {</span>
<span id="cb4-109"><a href="#cb4-109"></a>  <span class="st">&quot;p&quot;</span> =&gt; [<span class="st">&quot;builtin&quot;</span>, <span class="st">&quot;p&quot;</span>],</span>
<span id="cb4-110"><a href="#cb4-110"></a>  <span class="st">&quot;require&quot;</span> =&gt; [<span class="st">&quot;builtin&quot;</span>, <span class="st">&quot;require&quot;</span>],</span>
<span id="cb4-111"><a href="#cb4-111"></a>  <span class="st">&quot;minruby_parse&quot;</span> =&gt; [<span class="st">&quot;builtin&quot;</span>, <span class="st">&quot;minruby_parse&quot;</span>],</span>
<span id="cb4-112"><a href="#cb4-112"></a>  <span class="st">&quot;minruby_load&quot;</span> =&gt; [<span class="st">&quot;builtin&quot;</span>, <span class="st">&quot;minruby_load&quot;</span>],</span>
<span id="cb4-113"><a href="#cb4-113"></a>  <span class="st">&quot;minruby_call&quot;</span> =&gt; [<span class="st">&quot;builtin&quot;</span>, <span class="st">&quot;minruby_call&quot;</span>],</span>
<span id="cb4-114"><a href="#cb4-114"></a>}</span>
<span id="cb4-115"><a href="#cb4-115"></a>lenv = {}</span>
<span id="cb4-116"><a href="#cb4-116"></a>evaluate(tree, genv, lenv)</span></code></pre></div>
<p>コードを見て分かるように(?)，配列の一引数目のリテラルで <code>case</code> 文による分岐をし，分岐先で配列の要素を引っ張っている． このようにデータ構造 + <code>case</code> 文による分岐はパターンマッチングにうってつけのユースケースだ．</p>
<h3 id="minruby-パターンマッチング">MinRuby + パターンマッチング</h3>
<p>作業リポジトリはこれ:</p>
<iframe width="320" height="163" scrolling="no" frameborder="0" src="https://matsubara0507.github.io/my-github-cards/?target=matsubara0507/MinRuby.rb">
</iframe>
<p><code>pattern-match</code> というブランチにパターンマッチングで書き換えたコードがある． パターンマッチングで書き換えたのは <code>evaluate</code> 関数だけなのでそこだけ載せる:</p>
<div class="sourceCode" id="cb5"><pre class="sourceCode ruby"><code class="sourceCode ruby"><span id="cb5-1"><a href="#cb5-1"></a><span class="kw">def</span> evaluate(tree, genv, lenv)</span>
<span id="cb5-2"><a href="#cb5-2"></a>  <span class="kw">case</span> tree</span>
<span id="cb5-3"><a href="#cb5-3"></a>  <span class="kw">in</span> <span class="st">&quot;lit&quot;</span>, lit</span>
<span id="cb5-4"><a href="#cb5-4"></a>    lit</span>
<span id="cb5-5"><a href="#cb5-5"></a>  <span class="kw">in</span> <span class="st">&quot;+&quot;</span>, exp1, exp2</span>
<span id="cb5-6"><a href="#cb5-6"></a>    evaluate(exp1, genv, lenv) + evaluate(exp2, genv, lenv)</span>
<span id="cb5-7"><a href="#cb5-7"></a>  <span class="kw">in</span> <span class="st">&quot;-&quot;</span>, exp1, exp2</span>
<span id="cb5-8"><a href="#cb5-8"></a>    evaluate(exp1, genv, lenv) - evaluate(exp2, genv, lenv)</span>
<span id="cb5-9"><a href="#cb5-9"></a>  <span class="kw">in</span> <span class="st">&quot;*&quot;</span>, exp1, exp2</span>
<span id="cb5-10"><a href="#cb5-10"></a>    evaluate(exp1, genv, lenv) * evaluate(exp2, genv, lenv)</span>
<span id="cb5-11"><a href="#cb5-11"></a>  <span class="kw">in</span> <span class="st">&quot;/&quot;</span>, exp1, exp2</span>
<span id="cb5-12"><a href="#cb5-12"></a>    evaluate(exp1, genv, lenv) / evaluate(exp2, genv, lenv)</span>
<span id="cb5-13"><a href="#cb5-13"></a>  <span class="kw">in</span> <span class="st">&quot;%&quot;</span>, exp1, exp2</span>
<span id="cb5-14"><a href="#cb5-14"></a>    evaluate(exp1, genv, lenv) % evaluate(exp2, genv, lenv)</span>
<span id="cb5-15"><a href="#cb5-15"></a>  <span class="kw">in</span> <span class="st">&quot;&lt;&quot;</span>, exp1, exp2</span>
<span id="cb5-16"><a href="#cb5-16"></a>    evaluate(exp1, genv, lenv) &lt; evaluate(exp2, genv, lenv)</span>
<span id="cb5-17"><a href="#cb5-17"></a>  <span class="kw">in</span> <span class="st">&quot;&lt;=&quot;</span>, exp1, exp2</span>
<span id="cb5-18"><a href="#cb5-18"></a>    evaluate(exp1, genv, lenv) &lt;= evaluate(exp2, genv, lenv)</span>
<span id="cb5-19"><a href="#cb5-19"></a>  <span class="kw">in</span> <span class="st">&quot;==&quot;</span>, exp1, exp2</span>
<span id="cb5-20"><a href="#cb5-20"></a>    evaluate(exp1, genv, lenv) == evaluate(exp2, genv, lenv)</span>
<span id="cb5-21"><a href="#cb5-21"></a>  <span class="kw">in</span> <span class="st">&quot;!=&quot;</span>, exp1, exp2</span>
<span id="cb5-22"><a href="#cb5-22"></a>    evaluate(exp1, genv, lenv) != evaluate(exp2, genv, lenv)</span>
<span id="cb5-23"><a href="#cb5-23"></a>  <span class="kw">in</span> <span class="st">&quot;&gt;=&quot;</span>, exp1, exp2</span>
<span id="cb5-24"><a href="#cb5-24"></a>    evaluate(exp1, genv, lenv) &gt;= evaluate(exp2, genv, lenv)</span>
<span id="cb5-25"><a href="#cb5-25"></a>  <span class="kw">in</span> <span class="st">&quot;&gt;&quot;</span>, exp1, exp2</span>
<span id="cb5-26"><a href="#cb5-26"></a>    evaluate(exp1, genv, lenv) &gt; evaluate(exp2, genv, lenv)</span>
<span id="cb5-27"><a href="#cb5-27"></a>  <span class="kw">in</span> <span class="st">&quot;stmts&quot;</span>, *stmts</span>
<span id="cb5-28"><a href="#cb5-28"></a>    last = <span class="dv">nil</span></span>
<span id="cb5-29"><a href="#cb5-29"></a>    i = <span class="dv">0</span></span>
<span id="cb5-30"><a href="#cb5-30"></a>    <span class="kw">while</span> stmts[i]</span>
<span id="cb5-31"><a href="#cb5-31"></a>      last = evaluate(stmts[i], genv, lenv)</span>
<span id="cb5-32"><a href="#cb5-32"></a>      i = i + <span class="dv">1</span></span>
<span id="cb5-33"><a href="#cb5-33"></a>    <span class="kw">end</span></span>
<span id="cb5-34"><a href="#cb5-34"></a>    last</span>
<span id="cb5-35"><a href="#cb5-35"></a>  <span class="kw">in</span> <span class="st">&quot;var_assign&quot;</span>, var_name, var_value</span>
<span id="cb5-36"><a href="#cb5-36"></a>    lenv[var_name] = evaluate(var_value, genv, lenv)</span>
<span id="cb5-37"><a href="#cb5-37"></a>  <span class="kw">in</span> <span class="st">&quot;var_ref&quot;</span>, var_name</span>
<span id="cb5-38"><a href="#cb5-38"></a>    lenv[var_name]</span>
<span id="cb5-39"><a href="#cb5-39"></a>  <span class="kw">in</span> <span class="st">&quot;if&quot;</span>, cond, exp1, exp2</span>
<span id="cb5-40"><a href="#cb5-40"></a>    <span class="kw">if</span> evaluate(cond, genv, lenv)</span>
<span id="cb5-41"><a href="#cb5-41"></a>      evaluate(exp1, genv, lenv)</span>
<span id="cb5-42"><a href="#cb5-42"></a>    <span class="kw">else</span></span>
<span id="cb5-43"><a href="#cb5-43"></a>      evaluate(exp2, genv, lenv)</span>
<span id="cb5-44"><a href="#cb5-44"></a>    <span class="kw">end</span></span>
<span id="cb5-45"><a href="#cb5-45"></a>  <span class="kw">in</span> <span class="st">&quot;while&quot;</span>, cond, exp</span>
<span id="cb5-46"><a href="#cb5-46"></a>    <span class="kw">while</span> evaluate(cond, genv, lenv)</span>
<span id="cb5-47"><a href="#cb5-47"></a>      evaluate(exp, genv, lenv)</span>
<span id="cb5-48"><a href="#cb5-48"></a>    <span class="kw">end</span></span>
<span id="cb5-49"><a href="#cb5-49"></a>  <span class="kw">in</span> <span class="st">&quot;func_def&quot;</span>, func_name, func_args, func_body</span>
<span id="cb5-50"><a href="#cb5-50"></a>    genv[func_name] = [<span class="st">&quot;user_defined&quot;</span>, func_args, func_body]</span>
<span id="cb5-51"><a href="#cb5-51"></a>  <span class="kw">in</span> <span class="st">&quot;func_call&quot;</span>, func_name, *func_args</span>
<span id="cb5-52"><a href="#cb5-52"></a>    args = []</span>
<span id="cb5-53"><a href="#cb5-53"></a>    i = <span class="dv">0</span></span>
<span id="cb5-54"><a href="#cb5-54"></a>    <span class="kw">while</span> func_args[i]</span>
<span id="cb5-55"><a href="#cb5-55"></a>      args[i] = evaluate(func_args[i], genv, lenv)</span>
<span id="cb5-56"><a href="#cb5-56"></a>      i = i + <span class="dv">1</span></span>
<span id="cb5-57"><a href="#cb5-57"></a>    <span class="kw">end</span></span>
<span id="cb5-58"><a href="#cb5-58"></a>    mhd = genv[func_name]</span>
<span id="cb5-59"><a href="#cb5-59"></a>    <span class="kw">if</span> mhd[<span class="dv">0</span>] == <span class="st">&quot;builtin&quot;</span></span>
<span id="cb5-60"><a href="#cb5-60"></a>      minruby_call(mhd[<span class="dv">1</span>], args)</span>
<span id="cb5-61"><a href="#cb5-61"></a>    <span class="kw">else</span></span>
<span id="cb5-62"><a href="#cb5-62"></a>      new_lenv = {}</span>
<span id="cb5-63"><a href="#cb5-63"></a>      params = mhd[<span class="dv">1</span>]</span>
<span id="cb5-64"><a href="#cb5-64"></a>      i = <span class="dv">0</span></span>
<span id="cb5-65"><a href="#cb5-65"></a>      <span class="kw">while</span> params[i]</span>
<span id="cb5-66"><a href="#cb5-66"></a>        new_lenv[params[i]] = args[i]</span>
<span id="cb5-67"><a href="#cb5-67"></a>        i = i + <span class="dv">1</span></span>
<span id="cb5-68"><a href="#cb5-68"></a>      <span class="kw">end</span></span>
<span id="cb5-69"><a href="#cb5-69"></a>      evaluate(mhd[<span class="dv">2</span>], genv, new_lenv)</span>
<span id="cb5-70"><a href="#cb5-70"></a>    <span class="kw">end</span></span>
<span id="cb5-71"><a href="#cb5-71"></a>  <span class="kw">in</span> <span class="st">&quot;ary_new&quot;</span>, ary_values</span>
<span id="cb5-72"><a href="#cb5-72"></a>    ary = []</span>
<span id="cb5-73"><a href="#cb5-73"></a>    i = <span class="dv">0</span></span>
<span id="cb5-74"><a href="#cb5-74"></a>    <span class="kw">while</span> ary_values[i]</span>
<span id="cb5-75"><a href="#cb5-75"></a>      ary [i] = evaluate(ary_values[i], genv, lenv)</span>
<span id="cb5-76"><a href="#cb5-76"></a>      i = i + <span class="dv">1</span></span>
<span id="cb5-77"><a href="#cb5-77"></a>    <span class="kw">end</span></span>
<span id="cb5-78"><a href="#cb5-78"></a>  <span class="kw">in</span> <span class="st">&quot;ary_ref&quot;</span>, ary_exp, idx_exp</span>
<span id="cb5-79"><a href="#cb5-79"></a>    ary = evaluate(ary_exp, genv, lenv)</span>
<span id="cb5-80"><a href="#cb5-80"></a>    idx = evaluate(idx_exp, genv, lenv)</span>
<span id="cb5-81"><a href="#cb5-81"></a>    ary[idx]</span>
<span id="cb5-82"><a href="#cb5-82"></a>  <span class="kw">in</span> <span class="st">&quot;ary_assign&quot;</span>, ary_exp, idx_exp, value_exp</span>
<span id="cb5-83"><a href="#cb5-83"></a>    ary = evaluate(ary_exp, genv, lenv)</span>
<span id="cb5-84"><a href="#cb5-84"></a>    idx = evaluate(idx_exp, genv, lenv)</span>
<span id="cb5-85"><a href="#cb5-85"></a>    val = evaluate(value_exp, genv, lenv)</span>
<span id="cb5-86"><a href="#cb5-86"></a>    ary[idx] = val</span>
<span id="cb5-87"><a href="#cb5-87"></a>  <span class="kw">in</span> <span class="st">&quot;hash_new&quot;</span>, *key_values</span>
<span id="cb5-88"><a href="#cb5-88"></a>    hsh = {}</span>
<span id="cb5-89"><a href="#cb5-89"></a>    i = <span class="dv">0</span></span>
<span id="cb5-90"><a href="#cb5-90"></a>    <span class="kw">while</span> key_values[i]</span>
<span id="cb5-91"><a href="#cb5-91"></a>      key = evaluate(key_values[i], genv, lenv)</span>
<span id="cb5-92"><a href="#cb5-92"></a>      val = evaluate(key_values[i + <span class="dv">1</span>], genv, lenv)</span>
<span id="cb5-93"><a href="#cb5-93"></a>      hsh[key] = val</span>
<span id="cb5-94"><a href="#cb5-94"></a>      i = i + <span class="dv">2</span></span>
<span id="cb5-95"><a href="#cb5-95"></a>    <span class="kw">end</span></span>
<span id="cb5-96"><a href="#cb5-96"></a>    hsh</span>
<span id="cb5-97"><a href="#cb5-97"></a>  <span class="kw">end</span></span>
<span id="cb5-98"><a href="#cb5-98"></a><span class="kw">end</span></span></code></pre></div>
<p>配列にマッチさせる場合，<code>in [a, b, c]</code> の <code>[]</code> を省くことができる． また，<code>in &quot;hoge&quot;, *rest</code> は配列の残りの要素全てを <code>*rest</code> にマッチさせる構文だ． 他は特別な機能を使ってないのできっと読めるでしょう．</p>
<h2 id="おまけ-minruby-パターンマッチング">おまけ: minruby + パターンマッチング</h2>
<p>試しに <code>minruby</code> もパターンマッチで書き換えてみた． 差分は<a href="https://github.com/matsubara0507/minruby-gem/pull/1">これ</a>． めちゃくちゃやっつけで作ったので穴があるかもしれない．</p>
<p>ここでは新しく Alternative Pattern を使っている． こういうのだ:</p>
<div class="sourceCode" id="cb6"><pre class="sourceCode ruby"><code class="sourceCode ruby"><span id="cb6-1"><a href="#cb6-1"></a><span class="co"># Alternative Pattern: hoge | fuga</span></span>
<span id="cb6-2"><a href="#cb6-2"></a><span class="kw">in</span> (<span class="st">:program</span> | <span class="st">:bodystmt</span>), exp1, *_</span>
<span id="cb6-3"><a href="#cb6-3"></a>    make_stmts(exp1)</span></code></pre></div>
<p>Alternative Pattern には注意点があって，このパターンでは変数へのマッチを利用することができない:</p>
<div class="sourceCode" id="cb7"><pre class="sourceCode ruby"><code class="sourceCode ruby"><span id="cb7-1"><a href="#cb7-1"></a><span class="co"># Error: illegal variable in alternative pattern</span></span>
<span id="cb7-2"><a href="#cb7-2"></a><span class="kw">in</span> (<span class="st">:program</span> exp1, *_ | <span class="st">:bodystmt</span> exp1, *_),</span>
<span id="cb7-3"><a href="#cb7-3"></a>    make_stmts(exp1)</span></code></pre></div>
<p>ここからは余談． MinRuby は <code>ruby interp.rb interp.rb fizzbuzz.rb</code> のように自身を自身で評価することが可能だ(そのため <code>map</code> や <code>foreach</code> などを使わずに少し冗長なコードになっている)． しかし，パターンマッチングを導入しちゃうとこれができない． なんとかできないかなぁと思って <code>minruby</code> をパターンマッチングで書き換えてみたけど，まぁ無理でした． いいアイデアあったら教えて．</p>
<h2 id="おしまい">おしまい</h2>
<p>次は型検査も試したいですね．</p>
  </div>]]></summary>
</entry>
<entry>
    <title>GitHub Card を生成する SPA を Elm で作った</title>
    <link href="https://matsubara0507.github.io/posts/2019-05-12-create-my-github-cards.html" />
    <id>https://matsubara0507.github.io/posts/2019-05-12-create-my-github-cards.html</id>
    <published>2019-05-12T00:00:00Z</published>
    <updated>2019-05-12T00:00:00Z</updated>
    <summary type="html"><![CDATA[<div class="post-content" itemprop="articleBody">
    <p>Qiita や自分のブログに GitHub のリポジトリのリンク貼ってもなんか寂しいからいい感じのカードっぽいやつ生成するやつを作ったって話です． iframe で埋め込むことができます。</p>
<p><strong>だがしかし！Qiita などに任意の iframe が埋め込めるわけないジャーーーン！</strong></p>
<p>ということに，だいたい完成してから気づいた orz</p>
<h3 id="github-card">GitHub Card</h3>
<p>特別定義はないけど，<a href="https://lab.lepture.com/github-cards/">こんな感じ</a>のを iframe で作りたかった．</p>
<h2 id="作る">作る</h2>
<p>マイフェィバリット JS 系プログラミング言語 Elm を使った． だいたい半日ぐらいかかった．GWの最終日．GW最高． リポジトリはこれ:</p>
<h4 id="section"><iframe width="320" height="163" scrolling="no" frameborder="0" src="https://matsubara0507.github.io/my-github-cards/?target=matsubara0507/github-card"></iframe></h4>
<p><a href="https://matsubara0507.github.io/github-card">GitHub Pages に置いた</a>ので誰でも試せる． ただし，裏では GitHub API v3 をトークンなしで叩いてる…</p>
<p>こんな感じになる:</p>
<p><a href="https://matsubara0507.github.io/github-card/#matsubara0507"><img src="/assets/create-my-github-cards/user-github-card.jpg" style="max-width: 500px;"></a></p>
<p><a href="https://matsubara0507.github.io/github-card/#matsubara0507/github-card"><img src="/assets/create-my-github-cards/repo-github-card.jpg" style="max-width: 500px;"></a></p>
<p>上がユーザーのカードで下がリポジトリのカード． <code>Embed:</code> の下に書いてある iframe タグをコピペすることで埋め込める．</p>
<h3 id="ちょっとした工夫">ちょっとした工夫</h3>
<p>Elm の <code>Browser.application</code> の URL 機能を<del>わざわざ</del>使って色々工夫してる:</p>
<ul>
<li><code>https://xxxx#name</code> とすることで直接任意ユーザー/リポジトリのカードのページを開ける
<ul>
<li>実は <code>Build</code> ボタンで <code>#name</code> にジャンプしてる笑</li>
</ul></li>
<li><code>https://xxx?target=name</code> とすることで <code>name</code> のカードだけを表示
<ul>
<li>iframe にはこっちを使う</li>
</ul></li>
<li><code>getElementById</code> とか<del>わざわざ</del>してぴったりの <code>width</code> と <code>height</code> を iframe に生成してる</li>
</ul>
<h3 id="問題点">問題点</h3>
<p>上述した通り，GitHub API をトークンなしで利用しているので rate limit がある(同一アドレスから60req/h)． 開いた人によってはページが見れないのは悲しい…</p>
<h2 id="作るパート2">作る(パート2)</h2>
<p>ウンウン考えながら帰宅してたら気づいた． どーせ GitHub のユーザーやリポジトリのステータスなんてコロコロ変わるもんでもないし，<strong>適当に JSON で吐いておいて毎日更新する CI でも回しておけば良くない??</strong> と．</p>
<p>ということで、思いついてしまったので作ってしまった． 気づいたら朝4時．GW延長戦(????)．</p>
<h3 id="できたもの">できたもの</h3>
<p>集める部分と表示する部分を分けた:</p>
<h4 id="section-1"><iframe width="320" height="163" scrolling="no" frameborder="0" src="https://matsubara0507.github.io/my-github-cards/?target=matsubara0507/selfcat"></iframe></h4>
<h4 id="section-2"><iframe width="320" height="163" scrolling="no" frameborder="0" src="https://matsubara0507.github.io/my-github-cards/?target=matsubara0507/my-github-cards"></iframe></h4>
<p>前回の <a href="https://github.com/matsubara0507/github-card">matsubara0507/github-card</a> と違い自分専用． selfcat という CLI ツールで次のような設定ファイル <code>.selfcat.yaml</code> にあるユーザーとリポジトリの情報を収集(GitHub API v3)し，JSON として保存する． もちろん Haskell 製．</p>
<div class="sourceCode" id="cb1"><pre class="sourceCode yaml"><code class="sourceCode yaml"><span id="cb1-1"><a href="#cb1-1"></a><span class="fu">owner</span><span class="kw">:</span><span class="at"> matsubara0507</span></span>
<span id="cb1-2"><a href="#cb1-2"></a><span class="fu">repos</span><span class="kw">:</span></span>
<span id="cb1-3"><a href="#cb1-3"></a><span class="kw">-</span><span class="at"> mix.hs</span></span>
<span id="cb1-4"><a href="#cb1-4"></a><span class="kw">-</span><span class="at"> selfcat</span></span></code></pre></div>
<p><code>--compact</code> オプションをつけることで一つの JSON にまとめてくれる． my-github-cards の方は selfcat を使って一つにまとめて生成した JSON ファイルを読み込んで GitHub Card を表示する． 表示した見た目は前回のと同じ．</p>
<h3 id="selfcat">selfcat</h3>
<p>これはやってること単純:</p>
<ol type="1">
<li>設定ファイルの YAML を読み込み (<a href="http://hackage.haskell.org/package/yaml">yaml</a> パッケージ)</li>
<li>GitHub API を叩き (<a href="http://hackage.haskell.org/package/github">github</a> パッケージ)</li>
<li>JSON を吐くだけ (<a href="http://hackage.haskell.org/package/aeson">aeson</a> パッケージ)</li>
</ol>
<p>例のごとく，<a href="http://hackage.haskell.org/package/rio">rio</a> + <a href="http://hackage.haskell.org/package/extensible">extensible</a> でサクッと作った．</p>
<p>中身を見るとわかるのだが <a href="https://github.com/matsubara0507/mix.hs">mix</a> というパッケージを使っている． これは rio + extensible のいつも自分が使うパターンをパッケージ化したもの． そのうちまたまとめます．</p>
<h3 id="生成した-json-ファイルを読み込む">生成した JSON ファイルを読み込む</h3>
<p>Elm で「生成した JSON ファイルを読み込む」というのは少し大変だった． Elm で初期値を与えるには <code>init</code> 関数の <code>Flag</code> というのを使う。<a href="https://qiita.com/jinjor/items/245959d2da710eda18fa#browserelement">このあたりが参考になる</a>．</p>
<p>で，問題はどうやってローカルの JSON を読み込むか． <a href="https://github.com/matsubara0507/git-plantation/blob/8b0c44e6e6e20bd23998f7df5e0817fcf17fb6a8/src/Git/Plantation/API.hs#L47-L48">git-plantation では Haskell で埋め込んでいた</a>のだが，今回はサーバー側がないのでできない． ググったら出てきた:</p>
<ul>
<li><a href="https://gist.github.com/laurenancona/bd560948d71054e3d1477e43c4d48cb6">Access local JSON data with Javascript・GitHub Gist</a></li>
</ul>
<p>JS 詳しくないのでこれが良い方法なのかはわからないけど，これを参考にして次のような JS を書いて <code>index.html</code> から読み込むようにした:</p>
<div class="sourceCode" id="cb2"><pre class="sourceCode javascript"><code class="sourceCode javascript"><span id="cb2-1"><a href="#cb2-1"></a><span class="st">&quot;use strict&quot;</span><span class="op">;</span></span>
<span id="cb2-2"><a href="#cb2-2"></a></span>
<span id="cb2-3"><a href="#cb2-3"></a><span class="kw">function</span> <span class="at">loadJSON</span>(callback) <span class="op">{</span></span>
<span id="cb2-4"><a href="#cb2-4"></a>   <span class="kw">var</span> xobj <span class="op">=</span> <span class="kw">new</span> <span class="at">XMLHttpRequest</span>()<span class="op">;</span></span>
<span id="cb2-5"><a href="#cb2-5"></a>       <span class="va">xobj</span>.<span class="at">overrideMimeType</span>(<span class="st">&quot;application/json&quot;</span>)<span class="op">;</span></span>
<span id="cb2-6"><a href="#cb2-6"></a>   <span class="va">xobj</span>.<span class="at">open</span>(<span class="st">&#39;GET&#39;</span><span class="op">,</span> <span class="st">&#39;static/info.json&#39;</span><span class="op">,</span> <span class="kw">true</span>)<span class="op">;</span></span>
<span id="cb2-7"><a href="#cb2-7"></a>   <span class="va">xobj</span>.<span class="at">onreadystatechange</span> <span class="op">=</span> <span class="kw">function</span> () <span class="op">{</span></span>
<span id="cb2-8"><a href="#cb2-8"></a>         <span class="cf">if</span> (<span class="va">xobj</span>.<span class="at">readyState</span> <span class="op">==</span> <span class="dv">4</span> <span class="op">&amp;&amp;</span> <span class="va">xobj</span>.<span class="at">status</span> <span class="op">==</span> <span class="st">&quot;200&quot;</span>) <span class="op">{</span></span>
<span id="cb2-9"><a href="#cb2-9"></a>           <span class="at">callback</span>(<span class="va">xobj</span>.<span class="at">responseText</span>)<span class="op">;</span></span>
<span id="cb2-10"><a href="#cb2-10"></a>         <span class="op">}</span></span>
<span id="cb2-11"><a href="#cb2-11"></a>   <span class="op">};</span></span>
<span id="cb2-12"><a href="#cb2-12"></a>   <span class="va">xobj</span>.<span class="at">send</span>(<span class="kw">null</span>)<span class="op">;</span></span>
<span id="cb2-13"><a href="#cb2-13"></a><span class="op">}</span></span>
<span id="cb2-14"><a href="#cb2-14"></a></span>
<span id="cb2-15"><a href="#cb2-15"></a><span class="at">loadJSON</span>(<span class="kw">function</span>(response) <span class="op">{</span></span>
<span id="cb2-16"><a href="#cb2-16"></a>  <span class="kw">var</span> json <span class="op">=</span> <span class="va">JSON</span>.<span class="at">parse</span>(response)<span class="op">;</span></span>
<span id="cb2-17"><a href="#cb2-17"></a>  <span class="va">Elm</span>.<span class="va">Main</span>.<span class="at">init</span>(</span>
<span id="cb2-18"><a href="#cb2-18"></a>    <span class="op">{</span> <span class="dt">node</span><span class="op">:</span> <span class="va">document</span>.<span class="at">getElementById</span>(<span class="st">&#39;main&#39;</span>)</span>
<span id="cb2-19"><a href="#cb2-19"></a>    <span class="op">,</span> <span class="dt">flags</span><span class="op">:</span> <span class="op">{</span> <span class="dt">info</span><span class="op">:</span> json <span class="op">}</span></span>
<span id="cb2-20"><a href="#cb2-20"></a>    <span class="op">}</span></span>
<span id="cb2-21"><a href="#cb2-21"></a>  )<span class="op">;</span></span>
<span id="cb2-22"><a href="#cb2-22"></a><span class="op">}</span>)<span class="op">;</span></span></code></pre></div>
<p>少なくとも，うまく動作はしている．</p>
<p>いつも通り，GitHub Pages に置いたので<a href="https://matsubara0507.github.io/my-github-cards/">ここ</a>から見れる． というか，さっきから表示している GitHub Card がこれで埋め込んだものだ．</p>
<h3 id="daily-cron-on-travisci">Daily cron on TravisCI</h3>
<p>更新は TravisCI の Daily cron を使う． <a href="https://hub.docker.com/r/matsubara0507/selfcat/">selfcat は Docker Image にした</a>ので selfcat をビルドする必要はない． <code>docker run</code> で JSON を生成し，差分があったら GitHub に push する．</p>
<p>知らぬ間に，TravisCI の設定方法に <code>deploy</code> という設定が増えていたんですね:</p>
<div class="sourceCode" id="cb3"><pre class="sourceCode yaml"><code class="sourceCode yaml"><span id="cb3-1"><a href="#cb3-1"></a><span class="co"># .travis.yml</span></span>
<span id="cb3-2"><a href="#cb3-2"></a><span class="fu">language</span><span class="kw">:</span><span class="at"> generic</span></span>
<span id="cb3-3"><a href="#cb3-3"></a><span class="fu">services</span><span class="kw">:</span></span>
<span id="cb3-4"><a href="#cb3-4"></a><span class="at">  </span><span class="kw">-</span><span class="at"> docker</span></span>
<span id="cb3-5"><a href="#cb3-5"></a></span>
<span id="cb3-6"><a href="#cb3-6"></a><span class="fu">before_install</span><span class="kw">:</span></span>
<span id="cb3-7"><a href="#cb3-7"></a><span class="kw">-</span><span class="at"> docker pull matsubara0507/selfcat</span></span>
<span id="cb3-8"><a href="#cb3-8"></a></span>
<span id="cb3-9"><a href="#cb3-9"></a><span class="fu">jobs</span><span class="kw">:</span></span>
<span id="cb3-10"><a href="#cb3-10"></a><span class="at">  </span><span class="fu">include</span><span class="kw">:</span></span>
<span id="cb3-11"><a href="#cb3-11"></a><span class="at">    </span><span class="kw">-</span><span class="at"> </span><span class="fu">stage</span><span class="kw">:</span><span class="at"> exec selfcat</span></span>
<span id="cb3-12"><a href="#cb3-12"></a><span class="at">      </span><span class="fu">if</span><span class="kw">:</span><span class="at"> branch = master</span></span>
<span id="cb3-13"><a href="#cb3-13"></a><span class="at">      </span><span class="fu">script</span><span class="kw">:</span><span class="at"> docker run --rm -e GH_TOKEN -v `pwd`:/app matsubara0507/selfcat bin/bash -c &#39;cd app &amp;&amp; selfcat --output=docs/static/info.json --compact .selfcat.yaml&#39;</span></span>
<span id="cb3-14"><a href="#cb3-14"></a></span>
<span id="cb3-15"><a href="#cb3-15"></a><span class="fu">deploy</span><span class="kw">:</span></span>
<span id="cb3-16"><a href="#cb3-16"></a><span class="at">  </span><span class="kw">-</span><span class="at"> </span><span class="fu">provider</span><span class="kw">:</span><span class="at"> script</span></span>
<span id="cb3-17"><a href="#cb3-17"></a><span class="at">    </span><span class="fu">skip_cleanup</span><span class="kw">:</span><span class="at"> </span><span class="ch">true</span></span>
<span id="cb3-18"><a href="#cb3-18"></a><span class="at">    </span><span class="fu">script</span><span class="kw">:</span><span class="at"> bash .travis/deploy.bash</span></span>
<span id="cb3-19"><a href="#cb3-19"></a><span class="at">    </span><span class="fu">on</span><span class="kw">:</span></span>
<span id="cb3-20"><a href="#cb3-20"></a><span class="at">      </span><span class="fu">branch</span><span class="kw">:</span><span class="at"> master</span></span></code></pre></div>
<p><code>deploy</code> のところで読んでいるスクリプトは以下:</p>
<div class="sourceCode" id="cb4"><pre class="sourceCode bash"><code class="sourceCode bash"><span id="cb4-1"><a href="#cb4-1"></a><span class="co">#!/bin/bash</span></span>
<span id="cb4-2"><a href="#cb4-2"></a><span class="kw">set</span> <span class="ex">-eux</span></span>
<span id="cb4-3"><a href="#cb4-3"></a></span>
<span id="cb4-4"><a href="#cb4-4"></a><span class="co"># setup ssh-agent and provide the GitHub deploy key</span></span>
<span id="cb4-5"><a href="#cb4-5"></a><span class="bu">eval</span> <span class="st">&quot;</span><span class="va">$(</span><span class="fu">ssh-agent</span> -s<span class="va">)</span><span class="st">&quot;</span></span>
<span id="cb4-6"><a href="#cb4-6"></a><span class="ex">openssl</span> aes-256-cbc -K <span class="va">$encrypted_3b94903f5871_key</span> -iv <span class="va">$encrypted_3b94903f5871_iv</span> -in .travis/id_rsa.enc -out .travis/id_rsa -d</span>
<span id="cb4-7"><a href="#cb4-7"></a><span class="fu">chmod</span> 600 .travis/id_rsa</span>
<span id="cb4-8"><a href="#cb4-8"></a><span class="fu">ssh-add</span> .travis/id_rsa</span>
<span id="cb4-9"><a href="#cb4-9"></a></span>
<span id="cb4-10"><a href="#cb4-10"></a><span class="co"># commit the assets in docs/ if changed, and push to GitHub using SSH</span></span>
<span id="cb4-11"><a href="#cb4-11"></a><span class="fu">git</span> config user.name <span class="st">&quot;</span><span class="va">${GIT_NAME}</span><span class="st">&quot;</span></span>
<span id="cb4-12"><a href="#cb4-12"></a><span class="fu">git</span> config user.email <span class="st">&quot;</span><span class="va">${GIT_EMAIL}</span><span class="st">&quot;</span></span>
<span id="cb4-13"><a href="#cb4-13"></a><span class="fu">git</span> remote set-url origin git@github.com:<span class="va">${TRAVIS_REPO_SLUG}</span>.git</span>
<span id="cb4-14"><a href="#cb4-14"></a></span>
<span id="cb4-15"><a href="#cb4-15"></a><span class="fu">git</span> checkout master</span>
<span id="cb4-16"><a href="#cb4-16"></a><span class="fu">git</span> status</span>
<span id="cb4-17"><a href="#cb4-17"></a><span class="fu">git</span> add docs</span>
<span id="cb4-18"><a href="#cb4-18"></a><span class="fu">git</span> diff --staged --quiet <span class="kw">||</span> <span class="fu">git</span> commit -m <span class="st">&quot;[skip ci] Update docs by selfcat&quot;</span></span>
<span id="cb4-19"><a href="#cb4-19"></a><span class="fu">git</span> push origin master</span></code></pre></div>
<p>GitHub の Personal Access Token を使うのが嫌なので deploy key を登録して，暗号化したものをリポジトリに置き，それを CI の中で複合して使うという方法をとっている． ググったら下記の記事が出てきてそのまま使わせてもらった:</p>
<ul>
<li><a href="https://medium.com/@simon.legner/deploy-to-github-pages-using-travis-ci-and-deploy-keys-db84fed7a929">Deploy to GitHub Pages using Travis CI and deploy keys - Medium</a></li>
</ul>
<p>暗号化/複合の部分は TravisCI の <a href="https://docs.travis-ci.com/user/encrypting-files/">Encrypting Files</a> を使うことで簡単に行える． 記事で1点，スクリプトの呼び出しが <code>script: ./.travis-deploy.sh</code> では呼べなかった． ググったら <a href="https://github.com/travis-ci/travis-ci/issues/5538">Issue</a> があり，<code>script: sh deploy.sh</code> とすれば良いみたいだったのでそうしたらうまくいった．</p>
<h1 id="section-3"></h1>
<p>ちなみに，<a href="https://github.com/matsubara0507/my-github-cards">matsubara0507/my-github-cards</a> をフォークして，selfcat と TravisCI の設定(<code>.travis/id_rsa.enc</code> と環境変数など)を変えれば誰でも my-github-cards を使える． 気が向いたらドキュメントにしよ．</p>
<h2 id="todo">ToDo</h2>
<ul>
<li>入力してエンターキーで Build ボタン押したことにしたい</li>
<li>Embed のところにクリップボードにコピーボタン欲しい</li>
</ul>
<p>あと，特に Elm はやっつけで書いたので全体的にコードが汚い気がする．</p>
<h2 id="おしまい">おしまい</h2>
<p>自分(self)の GitHub (Octocat)の情報を集めるから selfcat です(????)。</p>
  </div>]]></summary>
</entry>
<entry>
    <title>Drone 1.0 を GCE 上に構築する</title>
    <link href="https://matsubara0507.github.io/posts/2019-04-06-drone-1-0-in-gce.html" />
    <id>https://matsubara0507.github.io/posts/2019-04-06-drone-1-0-in-gce.html</id>
    <published>2019-04-06T00:00:00Z</published>
    <updated>2019-04-06T00:00:00Z</updated>
    <summary type="html"><![CDATA[<div class="post-content" itemprop="articleBody">
    <p>先月ついに <a href="https://drone.io/">Drone CI</a> のバージョン1.0がリリースされました(rc でも無い方)． まだドキュメントの方が追いついてないところもありますが，これで大手を振って本番導入できますね！</p>
<p>で，別に本番導入したわけじゃ無いんですけど，とあるイベントで Drone CI を使いたかったので GCE 上に立てました． 本記事はそのメモ書きです．</p>
<h2 id="drone-ci">Drone CI</h2>
<p>Jenkins のような OSS な CI/CD プラットフォーム． 使い勝手的には TravisCI や CircleCI に近く、<code>.drone.yml</code> という設定ファイルにパイプラインを使って記述する:</p>
<div class="sourceCode" id="cb1"><pre class="sourceCode yaml"><code class="sourceCode yaml"><span id="cb1-1"><a href="#cb1-1"></a><span class="fu">kind</span><span class="kw">:</span><span class="at"> pipeline</span></span>
<span id="cb1-2"><a href="#cb1-2"></a><span class="fu">steps</span><span class="kw">:</span></span>
<span id="cb1-3"><a href="#cb1-3"></a><span class="kw">-</span><span class="at"> </span><span class="fu">name</span><span class="kw">:</span><span class="at"> test</span></span>
<span id="cb1-4"><a href="#cb1-4"></a><span class="at">  </span><span class="fu">image</span><span class="kw">:</span><span class="at"> node</span></span>
<span id="cb1-5"><a href="#cb1-5"></a><span class="at">  </span><span class="fu">commands</span><span class="kw">:</span></span>
<span id="cb1-6"><a href="#cb1-6"></a><span class="at">  </span><span class="kw">-</span><span class="at"> npm install</span></span>
<span id="cb1-7"><a href="#cb1-7"></a><span class="at">  </span><span class="kw">-</span><span class="at"> npm test</span></span>
<span id="cb1-8"><a href="#cb1-8"></a><span class="fu">services</span><span class="kw">:</span></span>
<span id="cb1-9"><a href="#cb1-9"></a><span class="kw">-</span><span class="at"> </span><span class="fu">name</span><span class="kw">:</span><span class="at"> database</span></span>
<span id="cb1-10"><a href="#cb1-10"></a><span class="at">  </span><span class="fu">image</span><span class="kw">:</span><span class="at"> mysql</span></span>
<span id="cb1-11"><a href="#cb1-11"></a><span class="at">  </span><span class="fu">ports</span><span class="kw">:</span></span>
<span id="cb1-12"><a href="#cb1-12"></a><span class="at">  </span><span class="kw">-</span><span class="at"> </span><span class="dv">3306</span></span></code></pre></div>
<p>Go言語製で，Docker との親和性がかなり高いという特徴を持っている． また，<a href="https://cloud.drone.io/">Drone Cloud</a> というクラウドサービスも提供されているので，とりあえず試したい人はぜひ．</p>
<h2 id="drone-on-gcp">Drone on GCP</h2>
<p>Drone 自体は Docker で起動できる(<a href="https://docs.drone.io/installation">公式ドキュメント</a>)． docker-compose を次のように記述することで簡単に起動可能だ:</p>
<div class="sourceCode" id="cb2"><pre class="sourceCode yaml"><code class="sourceCode yaml"><span id="cb2-1"><a href="#cb2-1"></a><span class="fu">version</span><span class="kw">:</span><span class="at"> </span><span class="st">&#39;2&#39;</span></span>
<span id="cb2-2"><a href="#cb2-2"></a></span>
<span id="cb2-3"><a href="#cb2-3"></a><span class="fu">services</span><span class="kw">:</span></span>
<span id="cb2-4"><a href="#cb2-4"></a><span class="at">  </span><span class="fu">drone</span><span class="kw">:</span></span>
<span id="cb2-5"><a href="#cb2-5"></a><span class="at">    </span><span class="fu">image</span><span class="kw">:</span><span class="at"> drone/drone:1</span></span>
<span id="cb2-6"><a href="#cb2-6"></a><span class="at">    </span><span class="fu">ports</span><span class="kw">:</span></span>
<span id="cb2-7"><a href="#cb2-7"></a><span class="at">      </span><span class="kw">-</span><span class="at"> 8000:80</span></span>
<span id="cb2-8"><a href="#cb2-8"></a><span class="at">      </span><span class="kw">-</span><span class="at"> 443:443</span></span>
<span id="cb2-9"><a href="#cb2-9"></a><span class="at">    </span><span class="fu">volumes</span><span class="kw">:</span></span>
<span id="cb2-10"><a href="#cb2-10"></a><span class="at">      </span><span class="kw">-</span><span class="at"> /var/run/docker.sock:/var/run/docker.sock</span></span>
<span id="cb2-11"><a href="#cb2-11"></a><span class="at">      </span><span class="kw">-</span><span class="at"> /var/lib/drone:/data</span></span>
<span id="cb2-12"><a href="#cb2-12"></a><span class="at">    </span><span class="fu">restart</span><span class="kw">:</span><span class="at"> always</span></span>
<span id="cb2-13"><a href="#cb2-13"></a><span class="at">    </span><span class="fu">environment</span><span class="kw">:</span></span>
<span id="cb2-14"><a href="#cb2-14"></a><span class="at">      </span><span class="kw">-</span><span class="at"> DRONE_GITHUB_SERVER=https://github.com</span></span>
<span id="cb2-15"><a href="#cb2-15"></a><span class="at">      </span><span class="kw">-</span><span class="at"> DRONE_GITHUB_CLIENT_ID=${DRONE_GITHUB_CLIENT}</span></span>
<span id="cb2-16"><a href="#cb2-16"></a><span class="at">      </span><span class="kw">-</span><span class="at"> DRONE_GITHUB_CLIENT_SECRET=${DRONE_GITHUB_SECRET}</span></span>
<span id="cb2-17"><a href="#cb2-17"></a><span class="at">      </span><span class="kw">-</span><span class="at"> DRONE_AGENTS_ENABLED=true</span></span>
<span id="cb2-18"><a href="#cb2-18"></a><span class="at">      </span><span class="kw">-</span><span class="at"> DRONE_RPC_SECRET=${DRONE_SECRET}</span></span>
<span id="cb2-19"><a href="#cb2-19"></a><span class="at">      </span><span class="kw">-</span><span class="at"> DRONE_SERVER_HOST=${DRONE_HOST}</span></span>
<span id="cb2-20"><a href="#cb2-20"></a><span class="at">      </span><span class="kw">-</span><span class="at"> DRONE_SERVER_PROTO=https</span></span>
<span id="cb2-21"><a href="#cb2-21"></a><span class="at">      </span><span class="kw">-</span><span class="at"> DRONE_TLS_AUTOCERT=true</span></span>
<span id="cb2-22"><a href="#cb2-22"></a></span>
<span id="cb2-23"><a href="#cb2-23"></a><span class="at">  </span><span class="fu">agent</span><span class="kw">:</span></span>
<span id="cb2-24"><a href="#cb2-24"></a><span class="at">    </span><span class="fu">image</span><span class="kw">:</span><span class="at"> drone/agent:1</span></span>
<span id="cb2-25"><a href="#cb2-25"></a><span class="at">    </span><span class="fu">restart</span><span class="kw">:</span><span class="at"> always</span></span>
<span id="cb2-26"><a href="#cb2-26"></a><span class="at">    </span><span class="fu">depends_on</span><span class="kw">:</span></span>
<span id="cb2-27"><a href="#cb2-27"></a><span class="at">      </span><span class="kw">-</span><span class="at"> drone</span></span>
<span id="cb2-28"><a href="#cb2-28"></a><span class="at">    </span><span class="fu">volumes</span><span class="kw">:</span></span>
<span id="cb2-29"><a href="#cb2-29"></a><span class="at">      </span><span class="kw">-</span><span class="at"> /var/run/docker.sock:/var/run/docker.sock</span></span>
<span id="cb2-30"><a href="#cb2-30"></a><span class="at">    </span><span class="fu">environment</span><span class="kw">:</span></span>
<span id="cb2-31"><a href="#cb2-31"></a><span class="at">      </span><span class="kw">-</span><span class="at"> DRONE_RPC_SERVER=http://drone</span></span>
<span id="cb2-32"><a href="#cb2-32"></a><span class="at">      </span><span class="kw">-</span><span class="at"> DRONE_RPC_SECRET=${DRONE_SECRET}</span></span>
<span id="cb2-33"><a href="#cb2-33"></a><span class="at">      </span><span class="kw">-</span><span class="at"> DRONE_RUNNER_CAPACITY=2</span></span>
<span id="cb2-34"><a href="#cb2-34"></a><span class="at">      </span><span class="kw">-</span><span class="at"> DRONE_RUNNER_NAME=${HOSTNAME}</span></span></code></pre></div>
<p>(<a href="/posts/2019-01-05-docker-compose-up-drone-1-0.html">ローカルで試す話は前に書いた</a>)</p>
<p>今回はこれを GCE 上でやることにした(GKE を試そうとも思ったが，まだ時期尚早って感じだったのでやめた)．</p>
<h3 id="gcpでの準備">GCPでの準備</h3>
<p>HTTPS 通信をやりたいのでドメインの取得をし，HTTP(S) LB と Managed SSL を使って簡単に証明書を発行することにした． この仕組みは下記の記事を参考にした:</p>
<ul>
<li><a href="https://qiita.com/koshilife/items/a75a69d03e2524f33c8e">GCP managed SSL(β版)を利用したhttpsサーバ構築 - Qiita</a></li>
</ul>
<p>β版だったためか，ところどころ違った気がするけど概ね記事の通りできた．</p>
<ol type="1">
<li>GCEインスタンスを立てる
<ul>
<li>スペックは <code>n1-standard-1（vCPU x 1、メモリ 3.75 GB）+ 10GB disk</code> にした</li>
<li>HTTPアクセスを許可しておく</li>
</ul></li>
<li>インスタンスグループを作成</li>
<li>HTTP(S) LB を作成
<ul>
<li>バックエンド: (2)のインスタンスグループを選んで他はデフォルト値</li>
<li>ホストとパスのルール: 特になし</li>
<li>フロントエンド: エフェラメルIPでHTTP/HTTPSの2つを作成</li>
</ul></li>
<li>DNSのAレコードを作成
<ul>
<li>有効化されるのに長いと1時間ぐらいかかる</li>
</ul></li>
</ol>
<p>ドメインは Google Domain で取得したのだが，そっちの DNS 設定を切っておくのを忘れて有効化に失敗していた．</p>
<h3 id="drone-の準備と起動">Drone の準備と起動</h3>
<p>上記手順の(1)で以下のプログラムをインストール:</p>
<ul>
<li><code>docker</code></li>
<li><code>docker-compose</code></li>
<li><code>nginx</code></li>
</ul>
<p>nginx の設定は雑に次のような感じ(<a href="https://angristan.xyz/host-your-own-ci-cd-server-with-drone/">参考</a>):</p>
<pre class="conf"><code>server {
  listen 80 default_server;
  listen [::]:80 default_server;
  server_name _;
  return 444;
}

server {
  listen 80;
  server_name [(4)で設定するドメイン];

  if ($http_x_forwarded_proto = &#39;http&#39;) {
    return 301 https://$server_name$request_uri;
  }

  location / {
    proxy_set_header Host $http_host;
    proxy_set_header X-Real-IP $remote_addr;
    proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
    proxy_set_header X-Forwarded-Proto $scheme;
    proxy_pass http://localhost:8000;
    proxy_redirect off;
    proxy_buffering off;
    chunked_transfer_encoding off;
  }
}</code></pre>
<p>これで (4) で設定したドメインの HTTPS 通信のみ許可するようになった． あとは適当なところで <code>docker-compose up -d</code> とすれば良い．</p>
<p><img src="/assets/drone-1-0-in-gce/my-drone-example.jpg"></img></p>
<h2 id="おまけ">おまけ</h2>
<h3 id="drone-起動時の環境変数">Drone 起動時の環境変数</h3>
<p>このあたりのを適宜使った:</p>
<ul>
<li>DRONE_USER_FILTER
<ul>
<li>認証後に閲覧できるユーザーを絞る</li>
<li>ただし Public は誰でも見れる(はず)</li>
<li>ちなみに Internal はここで指定したユーザー全員が見れる</li>
</ul></li>
<li>DRONE_USER_CREATE
<ul>
<li>Admin ユーザーみたいな感じ</li>
</ul></li>
<li>DRONE_LOGS_DEBUG,DRONE_LOGS_TRACE
<ul>
<li>この二つをオンにしておくと <code>docker logs</code> でだいたいログを追える</li>
</ul></li>
</ul>
<h3 id="drone-の情報">Drone の情報</h3>
<p>冒頭で述べた通り，Drone の公式情報は綺麗にまとまってるとは言い難い． 基本は以下の公式ドキュメント:</p>
<ul>
<li><a href="https://docs.drone.io/">Drone Documentation</a></li>
</ul>
<p><code>.drone.yml</code> の書き方はここにまとまってるので Drone CI を使うってだけならここで概ね問題ないでしょう． API を使ったり，drone-cli を使ったり，コンテナ起動時の設定を調べたりは情報が足りない時がちょくちょくある． Drone は <a href="https://github.com/search?q=org%3Adrone&amp;type=Issues">GitHub Issue</a> の他に <a href="https://discourse.org/">Discourse</a> というサービスを使っている:</p>
<ul>
<li><a href="https://discourse.drone.io/">Drone</a></li>
</ul>
<p>具体的なエラーなんかは StackOverflow よりここを検索した方が見つかる． またチャットサービスとして Gitter も用意しているので，そこに聞きに行ってもいいかもしれない:</p>
<ul>
<li><a href="https://gitter.im/drone/home">drone/home - Gitter</a></li>
</ul>
<p>まぁあとは OSS なので直接コードを観に行けばだいたい仕様はわかる． 特に，API に関する情報は 0.8 以前の古いものしかなく，<a href="https://github.com/matsubara0507/drone-haskell">Haskell の Drone クライアント</a>を作るときは直接ソースコードを見ていた:</p>
<ul>
<li><a href="https://github.com/drone/drone">drone/drone - GitHub</a>: <code>handler/api</code> とか見ると良い</li>
<li><a href="https://github.com/drone/drone-go">drone/drone-go - GitHub</a>: Drone API の Go クライアント</li>
</ul>
<h1 id="おしまい">おしまい</h1>
  </div>]]></summary>
</entry>
<entry>
    <title>Re: Marp のすゝめ</title>
    <link href="https://matsubara0507.github.io/posts/2019-02-04-re-recommend-marp.html" />
    <id>https://matsubara0507.github.io/posts/2019-02-04-re-recommend-marp.html</id>
    <published>2019-02-04T00:00:00Z</published>
    <updated>2019-02-04T00:00:00Z</updated>
    <summary type="html"><![CDATA[<div class="post-content" itemprop="articleBody">
    <p><strong>2019.4.6 Marp-core-0.6.0 での更新を反映した</strong></p>
<h1 id="section"></h1>
<p><a href="https://yhatt.github.io/marp/">Marp</a> というのは Markdown 記法で書けるスライド作成ツールです．</p>
<ul>
<li>Markdown 記法で手軽に書ける</li>
<li>見た目が綺麗</li>
<li>画像の拡縮が可能</li>
</ul>
<p>などの特徴から個人的にかなり重宝しています． その辺りは昔<a href="/posts/2016-12-14-recommend-marp.html">記事にしました</a>．</p>
<p>しかし，現在 Marp は今後メンテナンスをしないという明言をし，新しくゼロから <a href="https://github.com/marp-team/marp">Marp Next</a> というのを作っているようです． そのあたりの話は作者の記事にすこーしずつ書いてあります:</p>
<ul>
<li><a href="https://yhatt.hatenablog.jp/entry/2017/02/27/markdown-it-incremental-dom_というプラグインを作ってます">markdown-it-incremental-dom というプラグインを作ってます - YHATT (わいはっと)</a></li>
<li><a href="https://qiita.com/yhatt/items/874d5bfa919c32728403">Puppeteer &amp; Carlo を Markdown スライド作成 CLI ツール (Marp CLI) で活用する - Qiita</a></li>
</ul>
<p>時折，リポジトリをチェックして更新がないかを見ていたのですが，いよいよ Web UI まで出来上がっているので，現状のを試しに使ってみることにしました，というメモです．</p>
<h1 id="section-1"></h1>
<p>ちなみに，本記事での Marp Next のバージョンは <code>marp-cli-0.6</code> ぐらいを想定しています(現在開発が活発なので既に古くなっているかも)．</p>
<h2 id="marp-next">Marp Next</h2>
<p>新しい Marp の大きな目的は，よりメンテナブルな設計になることのようで，旧 Marp と異なり，機能ごとに個別の JS パッケージとなっている:</p>
<table>
<thead>
<tr class="header">
<th style="text-align: center;">リポジトリ</th>
<th>備考</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td style="text-align: center;"><a href="https://github.com/marp-team/marp">marp-team/marp</a></td>
<td>Marp 全体を取りまとめるリポジトリ</td>
</tr>
<tr class="even">
<td style="text-align: center;"><a href="https://github.com/marp-team/marpit">Marpit</a></td>
<td>Markdown からスライドの HTML へ変換する部分 (画像の拡縮などもココ)</td>
</tr>
<tr class="odd">
<td style="text-align: center;"><a href="https://github.com/marp-team/marp-core">Marp Core</a></td>
<td>Markdown 以外の拡張構文 (e.g. LaTeX, Emoji, Embed HTML)</td>
</tr>
<tr class="even">
<td style="text-align: center;"><a href="https://github.com/marp-team/marp-cli">Marp CLI</a></td>
<td>Marp の CLI ツール</td>
</tr>
<tr class="odd">
<td style="text-align: center;"><a href="https://github.com/marp-team/marp-web">Marp Web</a></td>
<td>Marp の Web UI (まだベータっぽい)</td>
</tr>
<tr class="even">
<td style="text-align: center;">Marp Desktop</td>
<td>Marp Web を Electron でラップして Desktop アプリにしたいらしい (まだ無い)</td>
</tr>
</tbody>
</table>
<p>(どうでも良いですが，モノリポにした方良かったと思う… Marpit で更新があると全てのリポジトリで PR を出して更新する必要があるので…)</p>
<p>ちなみに，<a href="https://github.com/yhatt/marp/issues?q=is%3Aopen+is%3Aissue+label%3A%22Supports+in+Marp+Next%22">旧 Marp のリポジトリの Issue ラベルに <code>Marp Next</code> や <code>Supports in Marp Next</code> というのができている</a>． 旧 Marp の Issue には，かなり要望っぽい Issue がたくさんあり，その中でも Marp Next では対応する予定のものには <code>Support in Marp Next</code> を付けたようだ．</p>
<h3 id="旧-marp-との非互換な機能">旧 Marp との非互換な機能</h3>
<p>これらは旧 Marp ユーザーしか意味ないが，適当に書き連ねていおく:</p>
<ol type="1">
<li><code>==AAA==</code> というハイライト機能がない（辛い）</li>
<li>打ち消し線記法 <code>~~AAA~~</code> もない</li>
<li>画像の拡縮ルール (Marpit)
<ul>
<li>より<a href="https://marpit.marp.app/image-syntax">細かいルールができて</a>書きやすくなった</li>
<li>しかし前のは記法は非互換</li>
<li><code>center</code> がないので中央寄せができない</li>
</ul></li>
<li><code>&lt;!-- *template: xxx --&gt;</code> のようなそのページだけ機能追加 (Marpit)
<ul>
<li><code>&lt;!-- _class: xxx --&gt;</code> のように先頭にアンダースコア <code>_</code> を付けるスタイルになった</li>
<li>ちなみに <code>&lt;!-- $theme: xxx --&gt;</code> はあるっぽい</li>
</ul></li>
<li>テーマの取り扱い (Marpit ??)
<ul>
<li><code>#</code> だけだと中央寄せなどになっていた機能がなくなった</li>
<li>それらはテーマのイチ <code>class</code> となっている</li>
<li>前の <code>template</code> も <code>class</code> なので組み合わせれない</li>
<li>明示的に指定できるようになったのは嬉しい</li>
<li>class を複数設定できるようになった！ (<a href="https://github.com/marp-team/marp-core/pull/69">marp-core-0.6.0~</a>)</li>
</ul></li>
<li>KaTeX のバージョンアップ (Marp Core)
<ul>
<li>0.6.0 =&gt; 0.10.0</li>
<li>0.6.0 だと全然 LaTeX 記法をサポートしていないので<a href="https://katex.org/docs/supported.html">助かる</a></li>
<li>まぁ僕はフォークしてバージョンをあげてたけど</li>
</ul></li>
<li>スライドのサイズ・縦横比 (Marpit)
<ul>
<li><a href="https://github.com/marp-team/marpit/blob/9ab8e153e66db3a55e8edf9fec1356dd60ddf9e6/docs/theme-css.md#slide-size">テーマごとになったぽい</a>？</li>
<li><a href="https://marpit.marp.app/directives?id=tweak-theme-style"><code>style</code></a> で上書きすると変な余白ができる</li>
<li>どっちにせよ前の <code>&lt;!-- size: 4:3 --&gt;</code> みたいなのはできないっぽい</li>
</ul></li>
</ol>
<p>ちなみに，コードが全部 CoffeScript から TypeScript になってた．</p>
<h2 id="cli-を試す">CLI を試す</h2>
<p>リッチすぎてビビる</p>
<ul>
<li>README の通りで動いた (Mac, npx)
<ul>
<li><code>npx @marp-team/marp-cli slide.md</code></li>
</ul></li>
<li><a href="https://hub.docker.com/r/marpteam/marp-cli/">Docker もサポートされてる</a>
<ul>
<li>ただし一部機能に制限があるっぽい</li>
</ul></li>
<li>Markdown から HTML を生成する</li>
<li><code>--pdf</code> オプションで PDF を生成する
<ul>
<li>ただし <strong><a href="https://github.com/marp-team/marp-cli/pull/10">セキュリティの関係</a>でデフォルトではローカルファイルの画像などを埋め込めない</strong></li>
<li>そのためローカル画像を使うには <code>--allow-local-files</code> をつける</li>
<li>日本語フォントも変になっている気がする</li>
<li>日本語検索もダメっぽい</li>
</ul></li>
<li><code>--watch</code> オプションで Markdown の変更を検知し再生成する</li>
<li><code>--server</code> オプションで <code>localhost:8080</code> で閲覧やPDFの生成ができる (watch もされます)</li>
<li><code>--preview</code> でプレビューモード
<ul>
<li>待望の！！</li>
<li>ブラウザの全画面モードを使ってるみたい</li>
</ul></li>
<li><code>--theme</code> でカスタムテーマを設定可能 (CSS)</li>
<li>CLI のオプションを使わずに<a href="https://github.com/marp-team/marp-cli#configuration-file">設定ファイルでも設定可能</a>
<ul>
<li><code>package.json</code> <code>.marprc.yml</code> <code>marp.config.js</code> のどれでも</li>
</ul></li>
</ul>
<h2 id="cli-netlify-を試す">CLI + Netlify を試す</h2>
<p>試した:</p>
<ul>
<li><a href="https://github.com/matsubara0507/pub-slides">matsubara0507/pub-slides - GitHub</a></li>
</ul>
<p><a href="https://matsubara0507-slides.netlify.com/"><img src="/assets/re-recommend-marp/pub-slides-with-marp.jpg" alt="image.png"></img></a></p>
<p>試し方: Marp の作者の<a href="https://github.com/yhatt/marp-cli-example">リポジトリ</a>の <code>Deploy to netlify</code> をクリックするだけ．</p>
<p>この方法の場合，リポジトリの <code>PITCHME.md</code> を <code>index.html</code> に変換する． marp-cli の設定は <code>package.yml</code> に書いてある． <a href="https://github.com/marp-team/marp-cli#options">設定方法</a>はこれを参照．</p>
<p>僕はできれば，複数のスライドを一つのリポジトリに置きたかった． ので，僕のリポジトリでは:</p>
<ul>
<li><code>slides</code> 以下の <code>*.md</code> を全部変換
<ul>
<li><code>index.md</code> が <code>index.html</code> のスライドになる</li>
</ul></li>
<li>後述する自作テーマをサブモジュールで設定</li>
<li><code>slides/assets</code> にある画像を <code>public</code> にコピーしてる</li>
</ul>
<p>のように少しだけ設定を書き換えた．</p>
<h2 id="web-ui-を試す">Web UI を試す</h2>
<p>すでに<a href="https://web.marp.app/">ここ</a>から試せる． 手元で試すなら:</p>
<pre><code>git clone https://github.com/marp-team/marp-web.git
cd marp-web
yarn install
yarn start</code></pre>
<p>でできた．</p>
<p><img src="/assets/re-recommend-marp/editing_marp_next.jpg"></img></p>
<ul>
<li>ファイルの読み込みや保存が可能</li>
<li>プレゼンテーションモードは(まだ)なかった</li>
<li>PDFのエクスポートはブラウザの印刷機能を使うようだった</li>
<li>カスタムテーマの設定などはまだできない？？</li>
</ul>
<h2 id="テーマを移植する">テーマを移植する</h2>
<p>オリジナルテーマを作ってたので Marp Next にも移植した:</p>
<ul>
<li>olive</li>
<li>colors</li>
<li>haskell</li>
</ul>
<p><a href="https://github.com/matsubara0507/marp-themes">marp-themes</a> というリポジトリを作り，そこに置いてある． やったことは:</p>
<ul>
<li><a href="https://github.com/marp-team/marp-core/blob/26f2402d443d26af387adb0ee86cafa1149beb34/themes/gaia.scss">gaia の scss</a> を持ってきて主に色を変更
<ul>
<li>カスタムテーマとして指定できるのは CSS だけなので <code>scss</code> コマンドで手動変換する</li>
</ul></li>
<li>画像の中央寄せをできるようにした
<ul>
<li><code># ![](path/to/image.jpg)</code> とすると中央寄せになるようにした</li>
<li><code>h1</code> から <code>h6</code> のどれでも良いです</li>
<li>ただし，雑に <code>img</code> タグに適用してるので emoji を含ませるとずれる…</li>
<li>marpit に修正入れてもらった方が良いかな</li>
</ul></li>
<li><code>lead</code> + <code>invert</code> などの class を作っておいた
<ul>
<li>scss で書いてるので <code>lead</code> を適当に mixi-in にして include するだけ</li>
<li>これもできれば <code>class</code> の組み合わせができるようになって欲しい</li>
<li>marp-core-0.6.0 から class を複数設定できるようになったので、これはいらない ;)</li>
</ul></li>
</ul>
<h3 id="olive">Olive</h3>
<iframe src="//www.slideshare.net/slideshow/embed_code/key/797Uraln5Fo9gD" width="595" height="485" frameborder="0" marginwidth="0" marginheight="0" scrolling="no" style="border:1px solid #CCC; border-width:1px; margin-bottom:5px; max-width: 100%;" allowfullscreen>
</iframe>
<h3 id="colors">Colors</h3>
<iframe src="//www.slideshare.net/slideshow/embed_code/key/2kOvCIcUpOzKRg" width="595" height="485" frameborder="0" marginwidth="0" marginheight="0" scrolling="no" style="border:1px solid #CCC; border-width:1px; margin-bottom:5px; max-width: 100%;" allowfullscreen>
</iframe>
<h3 id="haskell">Haskell</h3>
<iframe src="//www.slideshare.net/slideshow/embed_code/key/kJqmkk54SJnaky" width="595" height="485" frameborder="0" marginwidth="0" marginheight="0" scrolling="no" style="border:1px solid #CCC; border-width:1px; margin-bottom:5px; max-width: 100%;" allowfullscreen>
</iframe>
<h2 id="おしまい">おしまい</h2>
<p>もう既に十分使える状態になっていました． すごい！</p>
  </div>]]></summary>
</entry>

</feed>
