<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
    <title>ひげメモ</title>
    <link href="https://matsubara0507.github.io/feed.xml" rel="self" />
    <link href="https://matsubara0507.github.io" />
    <id>https://matsubara0507.github.io/feed.xml</id>
    <author>
        <name>MATSUBARA Nobutada</name>
        <email></email>
    </author>
    <updated>2020-02-10T00:00:00Z</updated>
    <entry>
    <title>Elm + GitHub OAuth 2.0 (Firebase) のサンプルプログラムを書いてみた</title>
    <link href="https://matsubara0507.github.io/posts/2020-02-10-elm-github-oauth2-sample.html" />
    <id>https://matsubara0507.github.io/posts/2020-02-10-elm-github-oauth2-sample.html</id>
    <published>2020-02-10T00:00:00Z</published>
    <updated>2020-02-10T00:00:00Z</updated>
    <summary type="html"><![CDATA[<div class="post-content" itemprop="articleBody">
    <p>とあるアプリケーションに Elm + GitHub OAuth 2.0 を使ってみたいなと思い，その練習用のアプリケーションを作ってみました：</p>
<ul>
<li><a href="https://github.com/matsubara0507/elm-github-oauth2-sample">matsubara0507/elm-github-oauth2-sample - GitHub</a></li>
</ul>
<p>サンプルのために認可用のサーバーを用意するのがめんどくさかったので，近年話題の Firebase の Authorization 機能を利用することにしました．</p>
<h2 id="作ったアプリケーション">作ったアプリケーション</h2>
<p>作成した SPA は <a href="https://matsubara0507.github.io/elm-github-oauth2-sample">GitHub Pages</a> に置いてある． ログインっぽいボタンを押すと Firebase Authorization を介して，GitHub OAuth 2.0 での認可がされる． もちろん，もともと試したかったことはここまでだが，認可しておしまいだと味気がない． なので：</p>
<ol type="1">
<li>認可時に GitHub OAuth トークンを取得</li>
<li>トークンを使ってログインしたユーザーの公開リポジトリの情報を取得</li>
<li>リポジトリのスター数を使ってユーザーのステータスをリッチに描写する</li>
</ol>
<p>色々試して最終的にこんな感じ：</p>
<p><img src="/assets/elm-github-oauth2-sample/page.jpg"></img></p>
<p>ちょっとやりすぎた．</p>
<h2 id="実装する">実装する</h2>
<p>やったことは3ステップ</p>
<ol type="1">
<li>Elm と Firebase を繋ぐ</li>
<li>リポジトリを取得（GraphQL）</li>
<li>円グラフを描写</li>
</ol>
<p>2と3は完全におまけですね．</p>
<h3 id="elm-と-firebase">Elm と Firebase</h3>
<p>まずは Firebase を準備する． <a href="https://firebase.google.com/docs/auth/web/github-auth?hl=ja">公式サイトの手順</a>がしっかりしてるので，それに習って準備する（GitHub App の設定とか）． プロバイダ（今回は GitHub）の設定と JavaScript のアプリの設定をすると「コレをコピペしてね」っていう設定とかが出てくる． コレを index.html と index.js に書いておく：</p>
<div class="sourceCode" id="cb1"><pre class="sourceCode html"><code class="sourceCode html"><span id="cb1-1"><a href="#cb1-1"></a><span class="co">&lt;!-- index.html --&gt;</span></span>
<span id="cb1-2"><a href="#cb1-2"></a><span class="dt">&lt;!doctype </span>html<span class="dt">&gt;</span></span>
<span id="cb1-3"><a href="#cb1-3"></a><span class="kw">&lt;html&gt;</span></span>
<span id="cb1-4"><a href="#cb1-4"></a><span class="kw">&lt;head&gt;</span></span>
<span id="cb1-5"><a href="#cb1-5"></a>  <span class="kw">&lt;meta</span><span class="ot"> http-equiv=</span><span class="st">&quot;content-type&quot;</span><span class="ot"> charset=</span><span class="st">&quot;utf-8&quot;</span><span class="kw">&gt;</span></span>
<span id="cb1-6"><a href="#cb1-6"></a>  <span class="kw">&lt;link</span><span class="ot"> rel=</span><span class="st">&quot;stylesheet&quot;</span><span class="ot"> href=</span><span class="st">&quot;https://unpkg.com/@primer/css@14.2.0/dist/primer.css&quot;</span><span class="kw">&gt;</span></span>
<span id="cb1-7"><a href="#cb1-7"></a><span class="kw">&lt;/head&gt;</span></span>
<span id="cb1-8"><a href="#cb1-8"></a><span class="kw">&lt;body&gt;</span></span>
<span id="cb1-9"><a href="#cb1-9"></a>  <span class="kw">&lt;div</span><span class="ot"> id=</span><span class="st">&quot;elm-node&quot;</span><span class="kw">&gt;&lt;/div&gt;</span></span>
<span id="cb1-10"><a href="#cb1-10"></a>  <span class="co">&lt;!-- firebase-app と firebase-auth が必要 --&gt;</span></span>
<span id="cb1-11"><a href="#cb1-11"></a>  <span class="kw">&lt;script</span><span class="ot"> src=</span><span class="st">&quot;https://www.gstatic.com/firebasejs/7.8.1/firebase-app.js&quot;</span><span class="kw">&gt;&lt;/script&gt;</span></span>
<span id="cb1-12"><a href="#cb1-12"></a>  <span class="kw">&lt;script</span><span class="ot"> src=</span><span class="st">&quot;https://www.gstatic.com/firebasejs/7.8.1/firebase-auth.js&quot;</span><span class="kw">&gt;&lt;/script&gt;</span></span>
<span id="cb1-13"><a href="#cb1-13"></a>  <span class="co">&lt;!-- static/main.js は Elm からあとで生成する --&gt;</span></span>
<span id="cb1-14"><a href="#cb1-14"></a>  <span class="kw">&lt;script</span><span class="ot"> src=</span><span class="st">&quot;static/main.js&quot;</span><span class="kw">&gt;&lt;/script&gt;</span></span>
<span id="cb1-15"><a href="#cb1-15"></a>  <span class="co">&lt;!-- static/index.js は下記 --&gt;</span></span>
<span id="cb1-16"><a href="#cb1-16"></a>  <span class="kw">&lt;script</span><span class="ot"> src=</span><span class="st">&quot;static/index.js&quot;</span><span class="kw">&gt;&lt;/script&gt;</span></span>
<span id="cb1-17"><a href="#cb1-17"></a><span class="kw">&lt;/body&gt;</span></span>
<span id="cb1-18"><a href="#cb1-18"></a><span class="kw">&lt;/html&gt;</span></span></code></pre></div>
<div class="sourceCode" id="cb2"><pre class="sourceCode js"><code class="sourceCode javascript"><span id="cb2-1"><a href="#cb2-1"></a><span class="co">// static/index.js</span></span>
<span id="cb2-2"><a href="#cb2-2"></a><span class="st">&#39;use strict&#39;</span><span class="op">;</span></span>
<span id="cb2-3"><a href="#cb2-3"></a></span>
<span id="cb2-4"><a href="#cb2-4"></a><span class="co">// コレらの設定は公開してもいいらしいけど</span></span>
<span id="cb2-5"><a href="#cb2-5"></a><span class="kw">var</span> firebaseConfig <span class="op">=</span> {</span>
<span id="cb2-6"><a href="#cb2-6"></a>  <span class="dt">apiKey</span><span class="op">:</span> <span class="st">&quot;...&quot;</span><span class="op">,</span></span>
<span id="cb2-7"><a href="#cb2-7"></a>  <span class="dt">authDomain</span><span class="op">:</span> <span class="st">&quot;...&quot;</span><span class="op">,</span></span>
<span id="cb2-8"><a href="#cb2-8"></a>  <span class="dt">databaseURL</span><span class="op">:</span> <span class="st">&quot;...&quot;</span><span class="op">,</span></span>
<span id="cb2-9"><a href="#cb2-9"></a>  <span class="dt">projectId</span><span class="op">:</span> <span class="st">&quot;...&quot;</span><span class="op">,</span></span>
<span id="cb2-10"><a href="#cb2-10"></a>  <span class="dt">storageBucket</span><span class="op">:</span> <span class="st">&quot;...&quot;</span><span class="op">,</span></span>
<span id="cb2-11"><a href="#cb2-11"></a>  <span class="dt">messagingSenderId</span><span class="op">:</span> <span class="st">&quot;...&quot;</span><span class="op">,</span></span>
<span id="cb2-12"><a href="#cb2-12"></a>  <span class="dt">appId</span><span class="op">:</span> <span class="st">&quot;...&quot;</span></span>
<span id="cb2-13"><a href="#cb2-13"></a>}<span class="op">;</span></span>
<span id="cb2-14"><a href="#cb2-14"></a></span>
<span id="cb2-15"><a href="#cb2-15"></a>firebase<span class="op">.</span><span class="fu">initializeApp</span>(firebaseConfig)<span class="op">;</span></span>
<span id="cb2-16"><a href="#cb2-16"></a><span class="kw">const</span> provider <span class="op">=</span> <span class="kw">new</span> firebase<span class="op">.</span><span class="at">auth</span><span class="op">.</span><span class="fu">GithubAuthProvider</span>()<span class="op">;</span></span></code></pre></div>
<p>あとは Elm から Firebase のメソッドを呼び出す． 基本的にコレを参考にした：</p>
<ul>
<li><a href="https://qiita.com/ababup1192/items/f27f9af282d9fa642eb5">Elm portsでFirebase Firestoreを触ろう！ - Qiita</a></li>
</ul>
<p>Elm 用の Firebase パッケージ的なのはないので，Elm のポート機能を使って繋ぎ込む：</p>
<div class="sourceCode" id="cb3"><pre class="sourceCode elm"><code class="sourceCode elm"><span id="cb3-1"><a href="#cb3-1"></a><span class="kw">port</span> <span class="kw">module</span> <span class="dt">Firebase</span> <span class="kw">exposing</span> (<span class="op">..</span>)</span>
<span id="cb3-2"><a href="#cb3-2"></a></span>
<span id="cb3-3"><a href="#cb3-3"></a><span class="kw">import</span> <span class="dt">Json</span><span class="op">.</span><span class="dt">Encode</span> <span class="kw">as</span> <span class="dt">E</span></span>
<span id="cb3-4"><a href="#cb3-4"></a></span>
<span id="cb3-5"><a href="#cb3-5"></a><span class="kw">port</span> <span class="fu">signIn</span> : () <span class="op">-&gt;</span> <span class="dt">Cmd</span> <span class="fu">msg</span></span>
<span id="cb3-6"><a href="#cb3-6"></a><span class="kw">port</span> <span class="fu">getSignInResult</span> : () <span class="op">-&gt;</span> <span class="dt">Cmd</span> <span class="fu">msg</span></span>
<span id="cb3-7"><a href="#cb3-7"></a><span class="kw">port</span> <span class="fu">signedIn</span> : (<span class="dt">E</span><span class="op">.</span><span class="dt">Value</span> <span class="op">-&gt;</span> <span class="fu">msg</span>) <span class="op">-&gt;</span> <span class="dt">Sub</span> <span class="fu">msg</span></span></code></pre></div>
<div class="sourceCode" id="cb4"><pre class="sourceCode js"><code class="sourceCode javascript"><span id="cb4-1"><a href="#cb4-1"></a><span class="co">// static/index.js</span></span>
<span id="cb4-2"><a href="#cb4-2"></a><span class="op">...</span></span>
<span id="cb4-3"><a href="#cb4-3"></a></span>
<span id="cb4-4"><a href="#cb4-4"></a><span class="kw">const</span> app <span class="op">=</span> Elm<span class="op">.</span><span class="at">Main</span><span class="op">.</span><span class="fu">init</span>(</span>
<span id="cb4-5"><a href="#cb4-5"></a>  { <span class="dt">node</span><span class="op">:</span> <span class="bu">document</span><span class="op">.</span><span class="fu">getElementById</span>(<span class="st">&#39;main&#39;</span>)</span>
<span id="cb4-6"><a href="#cb4-6"></a>  <span class="op">,</span> <span class="dt">flags</span><span class="op">:</span> {}</span>
<span id="cb4-7"><a href="#cb4-7"></a>  }</span>
<span id="cb4-8"><a href="#cb4-8"></a>)<span class="op">;</span></span>
<span id="cb4-9"><a href="#cb4-9"></a></span>
<span id="cb4-10"><a href="#cb4-10"></a>app<span class="op">.</span><span class="at">ports</span><span class="op">.</span><span class="at">signIn</span><span class="op">.</span><span class="fu">subscribe</span>(_ <span class="kw">=&gt;</span> {</span>
<span id="cb4-11"><a href="#cb4-11"></a>  <span class="co">// popup の方はモバイル系でうまく動作しなかったのでこっちを使う</span></span>
<span id="cb4-12"><a href="#cb4-12"></a>  firebase<span class="op">.</span><span class="fu">auth</span>()<span class="op">.</span><span class="fu">signInWithRedirect</span>(provider)<span class="op">;</span></span>
<span id="cb4-13"><a href="#cb4-13"></a>})<span class="op">;</span></span>
<span id="cb4-14"><a href="#cb4-14"></a></span>
<span id="cb4-15"><a href="#cb4-15"></a>app<span class="op">.</span><span class="at">ports</span><span class="op">.</span><span class="at">getSignInResult</span><span class="op">.</span><span class="fu">subscribe</span>(_ <span class="kw">=&gt;</span> {</span>
<span id="cb4-16"><a href="#cb4-16"></a>  firebase<span class="op">.</span><span class="fu">auth</span>()<span class="op">.</span><span class="fu">getRedirectResult</span>()<span class="op">.</span><span class="fu">then</span>(<span class="kw">function</span>(result) {</span>
<span id="cb4-17"><a href="#cb4-17"></a>    <span class="cf">if</span> (result<span class="op">.</span><span class="at">credential</span>) {</span>
<span id="cb4-18"><a href="#cb4-18"></a>      app<span class="op">.</span><span class="at">ports</span><span class="op">.</span><span class="at">signedIn</span><span class="op">.</span><span class="fu">send</span>(result)<span class="op">;</span></span>
<span id="cb4-19"><a href="#cb4-19"></a>    }</span>
<span id="cb4-20"><a href="#cb4-20"></a>  })<span class="op">.</span><span class="fu">catch</span>(<span class="kw">function</span>(error) {</span>
<span id="cb4-21"><a href="#cb4-21"></a>    app<span class="op">.</span><span class="at">ports</span><span class="op">.</span><span class="at">failSignIn</span><span class="op">.</span><span class="fu">send</span>(error)</span>
<span id="cb4-22"><a href="#cb4-22"></a>  })<span class="op">;</span></span>
<span id="cb4-23"><a href="#cb4-23"></a>})<span class="op">;</span></span></code></pre></div>
<p>繋ぎ込みはできた． サクッとトークンだけもらって，GitHub API v3 からユーザー名を取得する部分を実装する：</p>
<div class="sourceCode" id="cb5"><pre class="sourceCode elm"><code class="sourceCode elm"><span id="cb5-1"><a href="#cb5-1"></a><span class="kw">module</span> <span class="dt">GitHub</span> <span class="kw">exposing</span> (<span class="op">..</span>)</span>
<span id="cb5-2"><a href="#cb5-2"></a></span>
<span id="cb5-3"><a href="#cb5-3"></a><span class="kw">import</span> <span class="dt">Http</span></span>
<span id="cb5-4"><a href="#cb5-4"></a><span class="kw">import</span> <span class="dt">Json</span><span class="op">.</span><span class="dt">Decode</span> <span class="kw">as</span> <span class="dt">D</span> <span class="kw">exposing</span> (<span class="dt">Decoder</span>)</span>
<span id="cb5-5"><a href="#cb5-5"></a><span class="kw">import</span> <span class="dt">Json</span><span class="op">.</span><span class="dt">Encode</span> <span class="kw">as</span> <span class="dt">E</span></span>
<span id="cb5-6"><a href="#cb5-6"></a></span>
<span id="cb5-7"><a href="#cb5-7"></a><span class="kw">type</span> <span class="dt">Token</span> <span class="op">=</span> <span class="dt">Token</span> <span class="dt">String</span></span>
<span id="cb5-8"><a href="#cb5-8"></a></span>
<span id="cb5-9"><a href="#cb5-9"></a><span class="fu">tokenDecoder</span> : <span class="dt">Decoder</span> <span class="dt">Token</span></span>
<span id="cb5-10"><a href="#cb5-10"></a><span class="fu">tokenDecoder</span> <span class="op">=</span> <span class="dt">D</span><span class="op">.</span><span class="fu">map</span> <span class="dt">Token</span> <span class="dt">D</span><span class="op">.</span><span class="fu">string</span></span>
<span id="cb5-11"><a href="#cb5-11"></a></span>
<span id="cb5-12"><a href="#cb5-12"></a><span class="kw">type</span> <span class="kw">alias</span> <span class="dt">User</span> <span class="op">=</span></span>
<span id="cb5-13"><a href="#cb5-13"></a>    { <span class="fu">login</span> : <span class="dt">String</span></span>
<span id="cb5-14"><a href="#cb5-14"></a>    <span class="op">,</span> <span class="fu">name</span> : <span class="dt">String</span></span>
<span id="cb5-15"><a href="#cb5-15"></a>    }</span>
<span id="cb5-16"><a href="#cb5-16"></a></span>
<span id="cb5-17"><a href="#cb5-17"></a><span class="fu">getUserInfo</span> : (<span class="dt">Result</span> <span class="dt">Http</span><span class="op">.</span><span class="dt">Error</span> <span class="dt">User</span> <span class="op">-&gt;</span> <span class="fu">msg</span>) <span class="op">-&gt;</span> <span class="dt">Token</span> <span class="op">-&gt;</span> <span class="dt">Cmd</span> <span class="fu">msg</span></span>
<span id="cb5-18"><a href="#cb5-18"></a><span class="fu">getUserInfo</span> <span class="fu">msg</span> (<span class="dt">Token</span> <span class="fu">t</span>) <span class="op">=</span> <span class="op">...</span> <span class="co">-- 割愛</span></span></code></pre></div>
<div class="sourceCode" id="cb6"><pre class="sourceCode elm"><code class="sourceCode elm"><span id="cb6-1"><a href="#cb6-1"></a><span class="kw">port</span> <span class="kw">module</span> <span class="dt">Firebase</span> <span class="kw">exposing</span> (<span class="op">..</span>)</span>
<span id="cb6-2"><a href="#cb6-2"></a></span>
<span id="cb6-3"><a href="#cb6-3"></a><span class="kw">import</span> <span class="dt">GitHub</span></span>
<span id="cb6-4"><a href="#cb6-4"></a><span class="kw">import</span> <span class="dt">Json</span><span class="op">.</span><span class="dt">Decode</span> <span class="kw">as</span> <span class="dt">D</span> <span class="kw">exposing</span> (<span class="dt">Decoder</span>)</span>
<span id="cb6-5"><a href="#cb6-5"></a></span>
<span id="cb6-6"><a href="#cb6-6"></a><span class="fu">decoder</span> : <span class="dt">Decoder</span> <span class="dt">GitHub</span><span class="op">.</span><span class="dt">Token</span></span>
<span id="cb6-7"><a href="#cb6-7"></a><span class="fu">decoder</span> <span class="op">=</span> <span class="dt">D</span><span class="op">.</span><span class="fu">map</span> <span class="fu">identity</span> (<span class="dt">D</span><span class="op">.</span><span class="fu">at</span> [ <span class="st">&quot;credential&quot;</span><span class="op">,</span> <span class="st">&quot;accessToken&quot;</span> ] <span class="dt">GitHub</span><span class="op">.</span><span class="fu">tokenDecoder</span>)</span>
<span id="cb6-8"><a href="#cb6-8"></a></span>
<span id="cb6-9"><a href="#cb6-9"></a><span class="fu">signedInWithDecode</span> : (<span class="dt">Result</span> <span class="dt">D</span><span class="op">.</span><span class="dt">Error</span> <span class="dt">GitHub</span><span class="op">.</span><span class="dt">Token</span> <span class="op">-&gt;</span> <span class="fu">msg</span>) <span class="op">-&gt;</span> <span class="dt">Sub</span> <span class="fu">msg</span></span>
<span id="cb6-10"><a href="#cb6-10"></a><span class="fu">signedInWithDecode</span> <span class="fu">msg</span> <span class="op">=</span> <span class="fu">signedIn</span> (<span class="fu">msg</span> <span class="op">&lt;&lt;</span> <span class="dt">D</span><span class="op">.</span><span class="fu">decodeValue</span> <span class="fu">decoder</span>)</span></code></pre></div>
<p>あとは適当に <code>Main</code> から呼び出すだけ：</p>
<div class="sourceCode" id="cb7"><pre class="sourceCode elm"><code class="sourceCode elm"><span id="cb7-1"><a href="#cb7-1"></a><span class="kw">module</span> <span class="dt">Main</span> <span class="kw">exposing</span> (<span class="fu">main</span>)</span>
<span id="cb7-2"><a href="#cb7-2"></a><span class="co">-- import は割愛</span></span>
<span id="cb7-3"><a href="#cb7-3"></a></span>
<span id="cb7-4"><a href="#cb7-4"></a><span class="fu">main</span> : <span class="dt">Program</span> () <span class="dt">Model</span> <span class="dt">Msg</span></span>
<span id="cb7-5"><a href="#cb7-5"></a><span class="fu">main</span> <span class="op">=</span></span>
<span id="cb7-6"><a href="#cb7-6"></a>    <span class="dt">Browser</span><span class="op">.</span><span class="fu">application</span></span>
<span id="cb7-7"><a href="#cb7-7"></a>        { <span class="fu">init</span> <span class="op">=</span> <span class="fu">init</span></span>
<span id="cb7-8"><a href="#cb7-8"></a>        <span class="op">,</span> <span class="fu">view</span> <span class="op">=</span> <span class="fu">view</span></span>
<span id="cb7-9"><a href="#cb7-9"></a>        <span class="op">,</span> <span class="fu">update</span> <span class="op">=</span> <span class="fu">update</span></span>
<span id="cb7-10"><a href="#cb7-10"></a>        <span class="op">,</span> <span class="fu">subscriptions</span> <span class="op">=</span> <span class="dt">Firebase</span><span class="op">.</span><span class="fu">signedInWithDecode</span> <span class="dt">SignedIn</span></span>
<span id="cb7-11"><a href="#cb7-11"></a>        <span class="op">,</span> <span class="fu">onUrlRequest</span> <span class="op">=</span> <span class="dt">LinkClicked</span></span>
<span id="cb7-12"><a href="#cb7-12"></a>        <span class="op">,</span> <span class="fu">onUrlChange</span> <span class="op">=</span> <span class="dt">UrlChanged</span></span>
<span id="cb7-13"><a href="#cb7-13"></a>        }</span>
<span id="cb7-14"><a href="#cb7-14"></a></span>
<span id="cb7-15"><a href="#cb7-15"></a><span class="kw">type</span> <span class="kw">alias</span> <span class="dt">Model</span> <span class="op">=</span></span>
<span id="cb7-16"><a href="#cb7-16"></a>    { <span class="fu">token</span> : <span class="dt">Maybe</span> <span class="dt">GitHub</span><span class="op">.</span><span class="dt">Token</span></span>
<span id="cb7-17"><a href="#cb7-17"></a>    <span class="op">,</span> <span class="fu">user</span> : <span class="dt">Maybe</span> <span class="dt">GitHub</span><span class="op">.</span><span class="dt">User</span></span>
<span id="cb7-18"><a href="#cb7-18"></a>    <span class="op">,</span> <span class="fu">error</span> : <span class="dt">Maybe</span> <span class="dt">String</span></span>
<span id="cb7-19"><a href="#cb7-19"></a>    <span class="op">,</span> <span class="fu">key</span> : <span class="dt">Nav</span><span class="op">.</span><span class="dt">Key</span></span>
<span id="cb7-20"><a href="#cb7-20"></a>    }</span>
<span id="cb7-21"><a href="#cb7-21"></a></span>
<span id="cb7-22"><a href="#cb7-22"></a><span class="kw">type</span> <span class="dt">Msg</span></span>
<span id="cb7-23"><a href="#cb7-23"></a>    <span class="op">=</span> <span class="dt">LinkClicked</span> <span class="dt">Browser</span><span class="op">.</span><span class="dt">UrlRequest</span></span>
<span id="cb7-24"><a href="#cb7-24"></a>    <span class="op">|</span> <span class="dt">UrlChanged</span> <span class="dt">Url</span></span>
<span id="cb7-25"><a href="#cb7-25"></a>    <span class="op">|</span> <span class="dt">SignIn</span></span>
<span id="cb7-26"><a href="#cb7-26"></a>    <span class="op">|</span> <span class="dt">SignedIn</span> (<span class="dt">Result</span> <span class="dt">Json</span><span class="op">.</span><span class="dt">Error</span> <span class="dt">GitHub</span><span class="op">.</span><span class="dt">Token</span>)</span>
<span id="cb7-27"><a href="#cb7-27"></a>    <span class="op">|</span> <span class="dt">FetchUser</span> (<span class="dt">Result</span> <span class="dt">Http</span><span class="op">.</span><span class="dt">Error</span> <span class="dt">GitHub</span><span class="op">.</span><span class="dt">User</span>)</span>
<span id="cb7-28"><a href="#cb7-28"></a></span>
<span id="cb7-29"><a href="#cb7-29"></a><span class="fu">init</span> : () <span class="op">-&gt;</span> <span class="dt">Url</span> <span class="op">-&gt;</span> <span class="dt">Nav</span><span class="op">.</span><span class="dt">Key</span> <span class="op">-&gt;</span> ( <span class="dt">Model</span><span class="op">,</span> <span class="dt">Cmd</span> <span class="dt">Msg</span> )</span>
<span id="cb7-30"><a href="#cb7-30"></a><span class="fu">init</span> <span class="fu">_</span> <span class="fu">_</span> <span class="fu">key</span> <span class="op">=</span> ( <span class="dt">Model</span> <span class="dt">Nothing</span> <span class="dt">Nothing</span> <span class="dt">Nothing</span> <span class="fu">key</span><span class="op">,</span> <span class="dt">Firebase</span><span class="op">.</span><span class="fu">getSignInResult</span> () )</span>
<span id="cb7-31"><a href="#cb7-31"></a></span>
<span id="cb7-32"><a href="#cb7-32"></a><span class="fu">update</span> : <span class="dt">Msg</span> <span class="op">-&gt;</span> <span class="dt">Model</span> <span class="op">-&gt;</span> ( <span class="dt">Model</span><span class="op">,</span> <span class="dt">Cmd</span> <span class="dt">Msg</span> )</span>
<span id="cb7-33"><a href="#cb7-33"></a><span class="fu">update</span> <span class="fu">msg</span> <span class="fu">model</span> <span class="op">=</span></span>
<span id="cb7-34"><a href="#cb7-34"></a>    <span class="cf">case</span> <span class="fu">msg</span> <span class="cf">of</span></span>
<span id="cb7-35"><a href="#cb7-35"></a>        <span class="op">...</span> <span class="co">-- URL 系は割愛</span></span>
<span id="cb7-36"><a href="#cb7-36"></a>        <span class="dt">SignIn</span> <span class="op">-&gt;</span></span>
<span id="cb7-37"><a href="#cb7-37"></a>            ( <span class="fu">model</span><span class="op">,</span> <span class="dt">Firebase</span><span class="op">.</span><span class="fu">signIn</span> () )</span>
<span id="cb7-38"><a href="#cb7-38"></a>        <span class="dt">SignedIn</span> (<span class="dt">Ok</span> <span class="fu">token</span>) <span class="op">-&gt;</span></span>
<span id="cb7-39"><a href="#cb7-39"></a>            ( { <span class="fu">model</span> <span class="op">|</span> <span class="fu">token</span> <span class="op">=</span> <span class="dt">Just</span> <span class="fu">token</span><span class="op">,</span> <span class="fu">error</span> <span class="op">=</span> <span class="dt">Nothing</span> }<span class="op">,</span> <span class="dt">GitHub</span><span class="op">.</span><span class="fu">getUserInfo</span> <span class="dt">FetchUser</span> <span class="fu">token</span> )</span>
<span id="cb7-40"><a href="#cb7-40"></a>        <span class="dt">SignedIn</span> (<span class="dt">Err</span> <span class="fu">err</span>) <span class="op">-&gt;</span></span>
<span id="cb7-41"><a href="#cb7-41"></a>            ( { <span class="fu">model</span> <span class="op">|</span> <span class="fu">error</span> <span class="op">=</span> <span class="dt">Just</span> (<span class="dt">Json</span><span class="op">.</span><span class="fu">errorToString</span> <span class="fu">err</span>) }<span class="op">,</span> <span class="dt">Cmd</span><span class="op">.</span><span class="fu">none</span> )</span>
<span id="cb7-42"><a href="#cb7-42"></a>        <span class="dt">FetchUser</span> (<span class="dt">Ok</span> <span class="fu">user</span>) <span class="op">-&gt;</span></span>
<span id="cb7-43"><a href="#cb7-43"></a>            ( { <span class="fu">model</span> <span class="op">|</span> <span class="fu">user</span> <span class="op">=</span> <span class="dt">Just</span> <span class="fu">user</span><span class="op">,</span> <span class="fu">error</span> <span class="op">=</span> <span class="dt">Nothing</span> }<span class="op">,</span> <span class="dt">Cmd</span><span class="op">.</span><span class="fu">none</span> )</span>
<span id="cb7-44"><a href="#cb7-44"></a>        <span class="dt">FetchUser</span> (<span class="dt">Err</span> <span class="fu">_</span>) <span class="op">-&gt;</span></span>
<span id="cb7-45"><a href="#cb7-45"></a>            ( { <span class="fu">model</span> <span class="op">|</span> <span class="fu">error</span> <span class="op">=</span> <span class="dt">Just</span> <span class="st">&quot;fetch github user error&quot;</span> }<span class="op">,</span> <span class="dt">Cmd</span><span class="op">.</span><span class="fu">none</span> )</span>
<span id="cb7-46"><a href="#cb7-46"></a></span>
<span id="cb7-47"><a href="#cb7-47"></a><span class="fu">view</span> : <span class="dt">Model</span> <span class="op">-&gt;</span> <span class="dt">Browser</span><span class="op">.</span><span class="dt">Document</span> <span class="dt">Msg</span></span>
<span id="cb7-48"><a href="#cb7-48"></a><span class="fu">view</span> <span class="fu">model</span> <span class="op">=</span> { <span class="fu">title</span> <span class="op">=</span> <span class="st">&quot;Elm GitHub OAuth 2.0 Sample&quot;</span><span class="op">,</span> <span class="fu">body</span> <span class="op">=</span> [ <span class="fu">viewBody</span> <span class="fu">model</span> ] }</span>
<span id="cb7-49"><a href="#cb7-49"></a></span>
<span id="cb7-50"><a href="#cb7-50"></a><span class="fu">viewBody</span> : <span class="dt">Model</span> <span class="op">-&gt;</span> <span class="dt">Html</span> <span class="dt">Msg</span></span>
<span id="cb7-51"><a href="#cb7-51"></a><span class="fu">viewBody</span> <span class="fu">model</span> <span class="op">=</span></span>
<span id="cb7-52"><a href="#cb7-52"></a>    <span class="dt">Html</span><span class="op">.</span><span class="fu">div</span> [ <span class="dt">Attr</span><span class="op">.</span><span class="fu">class</span> <span class="st">&quot;position-relative text-center&quot;</span> ]</span>
<span id="cb7-53"><a href="#cb7-53"></a>        [ <span class="cf">case</span> ( <span class="fu">model</span><span class="op">.</span><span class="fu">error</span><span class="op">,</span> <span class="fu">model</span><span class="op">.</span><span class="fu">user</span> ) <span class="cf">of</span></span>
<span id="cb7-54"><a href="#cb7-54"></a>            ( <span class="dt">Just</span> <span class="fu">err</span><span class="op">,</span> <span class="fu">_</span> ) <span class="op">-&gt;</span></span>
<span id="cb7-55"><a href="#cb7-55"></a>                <span class="fu">text</span> <span class="fu">err</span></span>
<span id="cb7-56"><a href="#cb7-56"></a>            ( <span class="fu">_</span><span class="op">,</span> <span class="dt">Just</span> <span class="fu">user</span> ) <span class="op">-&gt;</span></span>
<span id="cb7-57"><a href="#cb7-57"></a>                <span class="fu">viewUser</span> <span class="fu">user</span></span>
<span id="cb7-58"><a href="#cb7-58"></a>            <span class="fu">_</span> <span class="op">-&gt;</span></span>
<span id="cb7-59"><a href="#cb7-59"></a>                <span class="fu">signinButton</span> <span class="fu">model</span></span>
<span id="cb7-60"><a href="#cb7-60"></a>        ]</span>
<span id="cb7-61"><a href="#cb7-61"></a></span>
<span id="cb7-62"><a href="#cb7-62"></a><span class="fu">signinButton</span> : <span class="dt">Model</span> <span class="op">-&gt;</span> <span class="dt">Html</span> <span class="dt">Msg</span></span>
<span id="cb7-63"><a href="#cb7-63"></a><span class="fu">signinButton</span> <span class="fu">model</span> <span class="op">=</span></span>
<span id="cb7-64"><a href="#cb7-64"></a>    <span class="fu">div</span> [ <span class="dt">Attr</span><span class="op">.</span><span class="fu">class</span> <span class="st">&quot;f3 mt-3&quot;</span> ]</span>
<span id="cb7-65"><a href="#cb7-65"></a>        [ <span class="fu">button</span></span>
<span id="cb7-66"><a href="#cb7-66"></a>            [ <span class="dt">Event</span><span class="op">.</span><span class="fu">onClick</span> <span class="dt">SignIn</span></span>
<span id="cb7-67"><a href="#cb7-67"></a>            <span class="op">,</span> <span class="op">...</span> <span class="co">-- 割愛</span></span>
<span id="cb7-68"><a href="#cb7-68"></a>            ]</span>
<span id="cb7-69"><a href="#cb7-69"></a>            [ <span class="fu">text</span> <span class="st">&quot;Sign in with GitHub&quot;</span> ]</span>
<span id="cb7-70"><a href="#cb7-70"></a>        ]</span>
<span id="cb7-71"><a href="#cb7-71"></a></span>
<span id="cb7-72"><a href="#cb7-72"></a><span class="fu">viewUser</span> : <span class="dt">GitHub</span><span class="op">.</span><span class="dt">User</span> <span class="op">-&gt;</span> <span class="dt">Html</span> <span class="fu">msg</span></span>
<span id="cb7-73"><a href="#cb7-73"></a><span class="fu">viewUser</span> <span class="fu">user</span> <span class="op">=</span> <span class="fu">text</span> (<span class="st">&quot;Hi &quot;</span> <span class="op">++</span> <span class="fu">user</span><span class="op">.</span><span class="fu">login</span> <span class="op">++</span> <span class="st">&quot;!&quot;</span>)</span></code></pre></div>
<p>コレを</p>
<pre><code>$ elm make --output=docs/static/main.js src/Main.elm --optimize</code></pre>
<p>とビルドして <code>elm reactor</code> で <code>docs/index.html</code> にアクセスすると、サインインボタンがあってサインインすると <code>Hi matsubara0507!</code> って感じのメッセージが出るだけの SPA ができた．</p>
<h3 id="リポジトリを取得">リポジトリを取得</h3>
<p>こっからは完全におまけ． リポジトリのスターをなんかステータスっぽく表示するようにしたい．</p>
<p>リポジトリ一覧は GitHub の個別ユーザーページをモバイル版でみたときの感じにすることにした：</p>
<p><img src="/assets/elm-github-oauth2-sample/mobile.jpg"></img></p>
<p>必要なリポジトリの情報は名前とリンクと総スター数． GitHub API v3 は無駄な情報が多いので，GraphQL を使って一気に取得してみる． GraphQL のクエリの動作確認は<a href="https://developer.github.com/v4/explorer/">ココ</a>で行える：</p>
<p><img src="/assets/elm-github-oauth2-sample/graphql.jpg"></img></p>
<p>最終的に出来上がったクエリはこんな感じ：</p>
<pre class="graphql"><code>query {
  viewer {
    login
    name
    repositories(first: 100, orderBy: {field: STARGAZERS, direction: DESC}, ownerAffiliations: [OWNER], isFork: false) {
      nodes {
        name
        url
        stargazers { totalCount }
      }
    }
  }
}</code></pre>
<p>クエリの <code>viewer {..}</code> は渡したトークンのユーザー情報を指す． <code>viewer</code> 内で <code>login</code> や <code>name</code> を指定することで，さっきまで v3 で取得していたユーザー情報も取得できる． <code>repositories</code> で一気に所得できるリポジトリ数は100件が上限（<code>first:300</code> は怒られる）． <code>orderBy:{..}</code> でスターの多い順に並び替えて，<code>ownerAffiliations:[OWNER]</code> と <code>isFork:false</code> を指定することで自身のリポジトリだけを返してる． リポジトリのスター数は <code>stargazers { totalCount }</code> で取得できる．</p>
<h1 id="section"></h1>
<p>あとはクエリを叩くだけ． Elm の GraphQL パッケージに良さげのものがなかったのでそのまま <code>elm/http</code> を使うことにした：</p>
<div class="sourceCode" id="cb10"><pre class="sourceCode elm"><code class="sourceCode elm"><span id="cb10-1"><a href="#cb10-1"></a><span class="kw">module</span> <span class="dt">GitHub</span> <span class="kw">exposing</span> (<span class="op">..</span>)</span>
<span id="cb10-2"><a href="#cb10-2"></a></span>
<span id="cb10-3"><a href="#cb10-3"></a><span class="kw">type</span> <span class="kw">alias</span> <span class="dt">User</span> <span class="op">=</span></span>
<span id="cb10-4"><a href="#cb10-4"></a>    { <span class="fu">login</span> : <span class="dt">String</span></span>
<span id="cb10-5"><a href="#cb10-5"></a>    <span class="op">,</span> <span class="fu">name</span> : <span class="dt">String</span></span>
<span id="cb10-6"><a href="#cb10-6"></a>    <span class="op">,</span> <span class="fu">repos</span> : <span class="dt">List</span> <span class="dt">Repository</span></span>
<span id="cb10-7"><a href="#cb10-7"></a>    }</span>
<span id="cb10-8"><a href="#cb10-8"></a></span>
<span id="cb10-9"><a href="#cb10-9"></a><span class="kw">type</span> <span class="kw">alias</span> <span class="dt">Repository</span> <span class="op">=</span></span>
<span id="cb10-10"><a href="#cb10-10"></a>    { <span class="fu">name</span> : <span class="dt">String</span></span>
<span id="cb10-11"><a href="#cb10-11"></a>    <span class="op">,</span> <span class="fu">url</span> : <span class="dt">String</span></span>
<span id="cb10-12"><a href="#cb10-12"></a>    <span class="op">,</span> <span class="fu">star</span> : <span class="dt">Int</span></span>
<span id="cb10-13"><a href="#cb10-13"></a>    }</span>
<span id="cb10-14"><a href="#cb10-14"></a></span>
<span id="cb10-15"><a href="#cb10-15"></a><span class="fu">userDecoder</span> : <span class="dt">Decoder</span> <span class="dt">User</span></span>
<span id="cb10-16"><a href="#cb10-16"></a><span class="fu">userDecoder</span> <span class="op">=</span></span>
<span id="cb10-17"><a href="#cb10-17"></a>    <span class="dt">D</span><span class="op">.</span><span class="fu">map3</span> <span class="dt">User</span></span>
<span id="cb10-18"><a href="#cb10-18"></a>        (<span class="dt">D</span><span class="op">.</span><span class="fu">field</span> <span class="st">&quot;login&quot;</span> <span class="dt">D</span><span class="op">.</span><span class="fu">string</span>)</span>
<span id="cb10-19"><a href="#cb10-19"></a>        (<span class="dt">D</span><span class="op">.</span><span class="fu">field</span> <span class="st">&quot;name&quot;</span> <span class="dt">D</span><span class="op">.</span><span class="fu">string</span>)</span>
<span id="cb10-20"><a href="#cb10-20"></a>        (<span class="dt">D</span><span class="op">.</span><span class="fu">at</span> [ <span class="st">&quot;repositories&quot;</span><span class="op">,</span> <span class="st">&quot;nodes&quot;</span> ] (<span class="dt">D</span><span class="op">.</span><span class="fu">list</span> <span class="fu">repoDecoder</span>))</span>
<span id="cb10-21"><a href="#cb10-21"></a></span>
<span id="cb10-22"><a href="#cb10-22"></a><span class="fu">repoDecoder</span> : <span class="dt">Decoder</span> <span class="dt">Repository</span></span>
<span id="cb10-23"><a href="#cb10-23"></a><span class="fu">repoDecoder</span> <span class="op">=</span></span>
<span id="cb10-24"><a href="#cb10-24"></a>    <span class="dt">D</span><span class="op">.</span><span class="fu">map3</span> <span class="dt">Repository</span></span>
<span id="cb10-25"><a href="#cb10-25"></a>        (<span class="dt">D</span><span class="op">.</span><span class="fu">field</span> <span class="st">&quot;name&quot;</span> <span class="dt">D</span><span class="op">.</span><span class="fu">string</span>)</span>
<span id="cb10-26"><a href="#cb10-26"></a>        (<span class="dt">D</span><span class="op">.</span><span class="fu">field</span> <span class="st">&quot;url&quot;</span> <span class="dt">D</span><span class="op">.</span><span class="fu">string</span>)</span>
<span id="cb10-27"><a href="#cb10-27"></a>        (<span class="dt">D</span><span class="op">.</span><span class="fu">at</span> [ <span class="st">&quot;stargazers&quot;</span><span class="op">,</span> <span class="st">&quot;totalCount&quot;</span> ] <span class="dt">D</span><span class="op">.</span><span class="fu">int</span>)</span>
<span id="cb10-28"><a href="#cb10-28"></a></span>
<span id="cb10-29"><a href="#cb10-29"></a><span class="fu">getUserInfo</span> : (<span class="dt">Result</span> <span class="dt">Http</span><span class="op">.</span><span class="dt">Error</span> <span class="dt">User</span> <span class="op">-&gt;</span> <span class="fu">msg</span>) <span class="op">-&gt;</span> <span class="dt">Token</span> <span class="op">-&gt;</span> <span class="dt">Cmd</span> <span class="fu">msg</span></span>
<span id="cb10-30"><a href="#cb10-30"></a><span class="fu">getUserInfo</span> <span class="fu">msg</span> (<span class="dt">Token</span> <span class="fu">t</span>) <span class="op">=</span></span>
<span id="cb10-31"><a href="#cb10-31"></a>    <span class="kw">let</span></span>
<span id="cb10-32"><a href="#cb10-32"></a>        <span class="fu">query</span> <span class="op">=</span> <span class="op">...</span> <span class="co">-- さっきのクエリをヒアドキュメントとかで</span></span>
<span id="cb10-33"><a href="#cb10-33"></a>        <span class="fu">decoder</span> <span class="op">=</span> <span class="dt">D</span><span class="op">.</span><span class="fu">map</span> <span class="fu">identity</span> (<span class="dt">D</span><span class="op">.</span><span class="fu">at</span> [ <span class="st">&quot;data&quot;</span><span class="op">,</span> <span class="st">&quot;viewer&quot;</span> ] <span class="fu">userDecoder</span>)</span>
<span id="cb10-34"><a href="#cb10-34"></a>    <span class="kw">in</span></span>
<span id="cb10-35"><a href="#cb10-35"></a>    <span class="dt">Http</span><span class="op">.</span><span class="fu">request</span></span>
<span id="cb10-36"><a href="#cb10-36"></a>        { <span class="fu">method</span> <span class="op">=</span> <span class="st">&quot;POST&quot;</span></span>
<span id="cb10-37"><a href="#cb10-37"></a>        <span class="op">,</span> <span class="fu">headers</span> <span class="op">=</span> [ <span class="dt">Http</span><span class="op">.</span><span class="fu">header</span> <span class="st">&quot;Authorization&quot;</span> (<span class="st">&quot;token &quot;</span> <span class="op">++</span> <span class="fu">t</span>) ]</span>
<span id="cb10-38"><a href="#cb10-38"></a>        <span class="op">,</span> <span class="fu">url</span> <span class="op">=</span> <span class="st">&quot;https://api.github.com/graphql&quot;</span></span>
<span id="cb10-39"><a href="#cb10-39"></a>        <span class="op">,</span> <span class="fu">body</span> <span class="op">=</span> <span class="dt">Http</span><span class="op">.</span><span class="fu">jsonBody</span> (<span class="dt">E</span><span class="op">.</span><span class="fu">object</span> [ ( <span class="st">&quot;query&quot;</span><span class="op">,</span> <span class="dt">E</span><span class="op">.</span><span class="fu">string</span> <span class="fu">query</span> ) ])</span>
<span id="cb10-40"><a href="#cb10-40"></a>        <span class="op">,</span> <span class="fu">expect</span> <span class="op">=</span> <span class="dt">Http</span><span class="op">.</span><span class="fu">expectJson</span> <span class="fu">msg</span> <span class="fu">decoder</span></span>
<span id="cb10-41"><a href="#cb10-41"></a>        <span class="op">,</span> <span class="fu">timeout</span> <span class="op">=</span> <span class="dt">Nothing</span></span>
<span id="cb10-42"><a href="#cb10-42"></a>        <span class="op">,</span> <span class="fu">tracker</span> <span class="op">=</span> <span class="dt">Nothing</span></span>
<span id="cb10-43"><a href="#cb10-43"></a>        }</span></code></pre></div>
<p>インターフェースは全く変えてないので <code>Main</code> でいじるのは <code>view</code> だけ：</p>
<div class="sourceCode" id="cb11"><pre class="sourceCode elm"><code class="sourceCode elm"><span id="cb11-1"><a href="#cb11-1"></a><span class="kw">module</span> <span class="dt">Main</span> <span class="kw">exposing</span> (<span class="fu">main</span>)</span>
<span id="cb11-2"><a href="#cb11-2"></a></span>
<span id="cb11-3"><a href="#cb11-3"></a><span class="op">...</span></span>
<span id="cb11-4"><a href="#cb11-4"></a></span>
<span id="cb11-5"><a href="#cb11-5"></a><span class="fu">viewUser</span> : <span class="dt">GitHub</span><span class="op">.</span><span class="dt">User</span> <span class="op">-&gt;</span> <span class="dt">Html</span> <span class="fu">msg</span></span>
<span id="cb11-6"><a href="#cb11-6"></a><span class="fu">viewUser</span> <span class="fu">user</span> <span class="op">=</span></span>
<span id="cb11-7"><a href="#cb11-7"></a>    <span class="kw">let</span></span>
<span id="cb11-8"><a href="#cb11-8"></a>        <span class="fu">total</span> <span class="op">=</span> <span class="dt">String</span><span class="op">.</span><span class="fu">fromInt</span> (<span class="dt">List</span><span class="op">.</span><span class="fu">sum</span> (<span class="dt">List</span><span class="op">.</span><span class="fu">map</span> <span class="op">.</span><span class="fu">star</span> <span class="fu">user</span><span class="op">.</span><span class="fu">repos</span>))</span>
<span id="cb11-9"><a href="#cb11-9"></a>    <span class="kw">in</span></span>
<span id="cb11-10"><a href="#cb11-10"></a>    <span class="fu">div</span> [ <span class="dt">Attr</span><span class="op">.</span><span class="fu">class</span> <span class="st">&quot;container-sm my-3&quot;</span> ]</span>
<span id="cb11-11"><a href="#cb11-11"></a>        [ <span class="fu">h3</span> [ <span class="dt">Attr</span><span class="op">.</span><span class="fu">class</span> <span class="st">&quot;my-2&quot;</span> ] [ <span class="fu">text</span> (<span class="fu">user</span><span class="op">.</span><span class="fu">login</span> <span class="op">++</span> <span class="st">&quot;&#39;s points: &quot;</span> <span class="op">++</span> <span class="fu">total</span>) ]</span>
<span id="cb11-12"><a href="#cb11-12"></a>        <span class="op">,</span> <span class="fu">viewRepositories</span> <span class="fu">user</span></span>
<span id="cb11-13"><a href="#cb11-13"></a>        ]</span>
<span id="cb11-14"><a href="#cb11-14"></a></span>
<span id="cb11-15"><a href="#cb11-15"></a><span class="fu">viewRepositories</span> : <span class="dt">GitHub</span><span class="op">.</span><span class="dt">User</span> <span class="op">-&gt;</span> <span class="dt">Html</span> <span class="fu">msg</span></span>
<span id="cb11-16"><a href="#cb11-16"></a><span class="fu">viewRepositories</span> <span class="fu">user</span> <span class="op">=</span></span>
<span id="cb11-17"><a href="#cb11-17"></a>    <span class="kw">let</span></span>
<span id="cb11-18"><a href="#cb11-18"></a>        <span class="fu">viewRepository</span> <span class="fu">repo</span> <span class="op">=</span></span>
<span id="cb11-19"><a href="#cb11-19"></a>            <span class="fu">li</span> [ <span class="dt">Attr</span><span class="op">.</span><span class="fu">class</span> <span class="st">&quot;Box-row mb-3&quot;</span> ]</span>
<span id="cb11-20"><a href="#cb11-20"></a>                [ <span class="fu">div</span> [ <span class="dt">Attr</span><span class="op">.</span><span class="fu">class</span> <span class="st">&quot;float-left&quot;</span> ]</span>
<span id="cb11-21"><a href="#cb11-21"></a>                    [ <span class="dt">Octicons</span><span class="op">.</span><span class="fu">repo</span> <span class="dt">Octicons</span><span class="op">.</span><span class="fu">defaultOptions</span></span>
<span id="cb11-22"><a href="#cb11-22"></a>                    <span class="op">,</span> <span class="fu">a</span> [ <span class="dt">Attr</span><span class="op">.</span><span class="fu">href</span> <span class="fu">repo</span><span class="op">.</span><span class="fu">url</span><span class="op">,</span> <span class="dt">Attr</span><span class="op">.</span><span class="fu">class</span> <span class="st">&quot;ml-1&quot;</span> ]</span>
<span id="cb11-23"><a href="#cb11-23"></a>                        [ <span class="fu">text</span> (<span class="fu">user</span><span class="op">.</span><span class="fu">login</span> <span class="op">++</span> <span class="st">&quot;/&quot;</span> <span class="op">++</span> <span class="fu">repo</span><span class="op">.</span><span class="fu">name</span>) ]</span>
<span id="cb11-24"><a href="#cb11-24"></a>                    ]</span>
<span id="cb11-25"><a href="#cb11-25"></a>                <span class="op">,</span> <span class="fu">div</span> [ <span class="dt">Attr</span><span class="op">.</span><span class="fu">class</span> <span class="st">&quot;float-right&quot;</span> ]</span>
<span id="cb11-26"><a href="#cb11-26"></a>                    [ <span class="fu">text</span> (<span class="dt">String</span><span class="op">.</span><span class="fu">fromInt</span> <span class="fu">repo</span><span class="op">.</span><span class="fu">star</span>)</span>
<span id="cb11-27"><a href="#cb11-27"></a>                    <span class="op">,</span> <span class="dt">Octicons</span><span class="op">.</span><span class="fu">star</span> <span class="dt">Octicons</span><span class="op">.</span><span class="fu">defaultOptions</span></span>
<span id="cb11-28"><a href="#cb11-28"></a>                    ]</span>
<span id="cb11-29"><a href="#cb11-29"></a>                ]</span>
<span id="cb11-30"><a href="#cb11-30"></a>    <span class="kw">in</span></span>
<span id="cb11-31"><a href="#cb11-31"></a>    <span class="fu">div</span> [ <span class="dt">Attr</span><span class="op">.</span><span class="fu">class</span> <span class="st">&quot;Box&quot;</span> ]</span>
<span id="cb11-32"><a href="#cb11-32"></a>        [ <span class="fu">ul</span> [] (<span class="dt">List</span><span class="op">.</span><span class="fu">map</span> <span class="fu">viewRepository</span> <span class="fu">user</span><span class="op">.</span><span class="fu">repos</span>) ]</span></code></pre></div>
<h3 id="elm-で円グラフ">Elm で円グラフ</h3>
<p>なんかこう，リポジトリのプライマリ言語ごとに円グラフにしたら面白いなっていう欲がでてきたのでそうしてみることにした． まずはリポジトリのプライマリ言語を返すようにクエリをいじる：</p>
<pre><code>query {
  viewer {
    ...
    repositories(...) {
      nodes {
        ...
        primaryLanguage {
          name
          color
        }
      }
    }
  }
}</code></pre>
<p>データ構造も書き足す：</p>
<div class="sourceCode" id="cb13"><pre class="sourceCode elm"><code class="sourceCode elm"><span id="cb13-1"><a href="#cb13-1"></a><span class="kw">type</span> <span class="kw">alias</span> <span class="dt">Repository</span> <span class="op">=</span></span>
<span id="cb13-2"><a href="#cb13-2"></a>    { <span class="op">...</span> <span class="co">-- 割愛</span></span>
<span id="cb13-3"><a href="#cb13-3"></a>    <span class="op">,</span> <span class="fu">language</span> : <span class="dt">Maybe</span> <span class="dt">Language</span></span>
<span id="cb13-4"><a href="#cb13-4"></a>    }</span>
<span id="cb13-5"><a href="#cb13-5"></a></span>
<span id="cb13-6"><a href="#cb13-6"></a><span class="kw">type</span> <span class="kw">alias</span> <span class="dt">Language</span> <span class="op">=</span></span>
<span id="cb13-7"><a href="#cb13-7"></a>    { <span class="fu">name</span> : <span class="dt">String</span></span>
<span id="cb13-8"><a href="#cb13-8"></a>    <span class="op">,</span> <span class="fu">color</span> : <span class="dt">String</span></span>
<span id="cb13-9"><a href="#cb13-9"></a>    }</span>
<span id="cb13-10"><a href="#cb13-10"></a></span>
<span id="cb13-11"><a href="#cb13-11"></a><span class="fu">repoDecoder</span> : <span class="dt">Decoder</span> <span class="dt">Repository</span></span>
<span id="cb13-12"><a href="#cb13-12"></a><span class="fu">repoDecoder</span> <span class="op">=</span></span>
<span id="cb13-13"><a href="#cb13-13"></a>    <span class="dt">D</span><span class="op">.</span><span class="fu">map4</span> <span class="dt">Repository</span></span>
<span id="cb13-14"><a href="#cb13-14"></a>        <span class="op">...</span> <span class="co">-- 割愛</span></span>
<span id="cb13-15"><a href="#cb13-15"></a>        (<span class="dt">D</span><span class="op">.</span><span class="fu">field</span> <span class="st">&quot;primaryLanguage&quot;</span> <span class="op">&lt;|</span> <span class="dt">D</span><span class="op">.</span><span class="fu">nullable</span> <span class="fu">languageDecoder</span>)</span>
<span id="cb13-16"><a href="#cb13-16"></a></span>
<span id="cb13-17"><a href="#cb13-17"></a></span>
<span id="cb13-18"><a href="#cb13-18"></a><span class="fu">languageDecoder</span> : <span class="dt">Decoder</span> <span class="dt">Language</span></span>
<span id="cb13-19"><a href="#cb13-19"></a><span class="fu">languageDecoder</span> <span class="op">=</span></span>
<span id="cb13-20"><a href="#cb13-20"></a>    <span class="dt">D</span><span class="op">.</span><span class="fu">map2</span> <span class="dt">Language</span></span>
<span id="cb13-21"><a href="#cb13-21"></a>        (<span class="dt">D</span><span class="op">.</span><span class="fu">field</span> <span class="st">&quot;name&quot;</span> <span class="dt">D</span><span class="op">.</span><span class="fu">string</span>)</span>
<span id="cb13-22"><a href="#cb13-22"></a>        (<span class="dt">D</span><span class="op">.</span><span class="fu">field</span> <span class="st">&quot;color&quot;</span> <span class="dt">D</span><span class="op">.</span><span class="fu">string</span>)</span></code></pre></div>
<p>プライマリ言語の情報は <code>null</code> が返ってくる可能性があるので、<code>Maybe</code> でラップしている．</p>
<p>データは揃ったので，あとは円グラフを描くだけ． 円グラフの描写には <a href="https://package.elm-lang.org/packages/gampleman/elm-visualization/2.1.1"><code>gampleman/elm-visualization</code></a> を使うことにする． example 集にある「<a href="https://elm-visualization.netlify.com/custompiechart">Custom Pie Chart</a>」をベースにすることにした． コピペしてよしなに書き換える：</p>
<div class="sourceCode" id="cb14"><pre class="sourceCode elm"><code class="sourceCode elm"><span id="cb14-1"><a href="#cb14-1"></a><span class="kw">module</span> <span class="dt">Pie</span> <span class="kw">exposing</span> (<span class="fu">view</span>)</span>
<span id="cb14-2"><a href="#cb14-2"></a><span class="co">-- import は割愛</span></span>
<span id="cb14-3"><a href="#cb14-3"></a></span>
<span id="cb14-4"><a href="#cb14-4"></a><span class="kw">type</span> <span class="kw">alias</span> <span class="dt">Data</span> <span class="op">=</span></span>
<span id="cb14-5"><a href="#cb14-5"></a>    { <span class="fu">label</span> : <span class="dt">String</span> <span class="co">-- 言語名</span></span>
<span id="cb14-6"><a href="#cb14-6"></a>    <span class="op">,</span> <span class="fu">data</span> : <span class="dt">Float</span>   <span class="co">-- 総スター数</span></span>
<span id="cb14-7"><a href="#cb14-7"></a>    <span class="op">,</span> <span class="fu">color</span> : <span class="dt">Color</span>  <span class="co">-- GitHub 側で設定されてる言語の色</span></span>
<span id="cb14-8"><a href="#cb14-8"></a>    }</span>
<span id="cb14-9"><a href="#cb14-9"></a></span>
<span id="cb14-10"><a href="#cb14-10"></a><span class="fu">w</span> : <span class="dt">Float</span></span>
<span id="cb14-11"><a href="#cb14-11"></a><span class="fu">w</span> <span class="op">=</span> <span class="dv">990</span></span>
<span id="cb14-12"><a href="#cb14-12"></a></span>
<span id="cb14-13"><a href="#cb14-13"></a><span class="fu">h</span> : <span class="dt">Float</span></span>
<span id="cb14-14"><a href="#cb14-14"></a><span class="fu">h</span> <span class="op">=</span> <span class="dv">504</span></span>
<span id="cb14-15"><a href="#cb14-15"></a></span>
<span id="cb14-16"><a href="#cb14-16"></a><span class="fu">radius</span> : <span class="dt">Float</span></span>
<span id="cb14-17"><a href="#cb14-17"></a><span class="fu">radius</span> <span class="op">=</span> <span class="fu">min</span> <span class="fu">w</span> <span class="fu">h</span> <span class="op">/</span> <span class="dv">2</span></span>
<span id="cb14-18"><a href="#cb14-18"></a></span>
<span id="cb14-19"><a href="#cb14-19"></a><span class="kw">type</span> <span class="kw">alias</span> <span class="dt">ChartConfig</span> <span class="op">=</span></span>
<span id="cb14-20"><a href="#cb14-20"></a>    { <span class="fu">outerRadius</span> : <span class="dt">Float</span></span>
<span id="cb14-21"><a href="#cb14-21"></a>    <span class="op">,</span> <span class="fu">innerRadius</span> : <span class="dt">Float</span></span>
<span id="cb14-22"><a href="#cb14-22"></a>    <span class="op">,</span> <span class="fu">padAngle</span> : <span class="dt">Float</span></span>
<span id="cb14-23"><a href="#cb14-23"></a>    <span class="op">,</span> <span class="fu">cornerRadius</span> : <span class="dt">Float</span></span>
<span id="cb14-24"><a href="#cb14-24"></a>    <span class="op">,</span> <span class="fu">labelPosition</span> : <span class="dt">Float</span></span>
<span id="cb14-25"><a href="#cb14-25"></a>    }</span>
<span id="cb14-26"><a href="#cb14-26"></a></span>
<span id="cb14-27"><a href="#cb14-27"></a><span class="fu">drawChart</span> : <span class="dt">ChartConfig</span> <span class="op">-&gt;</span> <span class="dt">List</span> <span class="dt">Data</span> <span class="op">-&gt;</span> <span class="dt">Svg</span> <span class="fu">msg</span></span>
<span id="cb14-28"><a href="#cb14-28"></a><span class="fu">drawChart</span> <span class="fu">config</span> <span class="fu">model</span> <span class="op">=</span></span>
<span id="cb14-29"><a href="#cb14-29"></a>    <span class="kw">let</span></span>
<span id="cb14-30"><a href="#cb14-30"></a>        <span class="fu">pieData</span> <span class="op">=</span></span>
<span id="cb14-31"><a href="#cb14-31"></a>            <span class="dt">List</span><span class="op">.</span><span class="fu">map</span> <span class="op">.</span><span class="fu">data</span> <span class="fu">model</span></span>
<span id="cb14-32"><a href="#cb14-32"></a>                <span class="op">|&gt;</span> <span class="dt">Shape</span><span class="op">.</span><span class="fu">pie</span></span>
<span id="cb14-33"><a href="#cb14-33"></a>                    { <span class="fu">defaultPieConfig</span></span>
<span id="cb14-34"><a href="#cb14-34"></a>                        <span class="op">|</span> <span class="fu">innerRadius</span> <span class="op">=</span> <span class="fu">config</span><span class="op">.</span><span class="fu">innerRadius</span></span>
<span id="cb14-35"><a href="#cb14-35"></a>                        <span class="op">,</span> <span class="fu">outerRadius</span> <span class="op">=</span> <span class="fu">config</span><span class="op">.</span><span class="fu">outerRadius</span></span>
<span id="cb14-36"><a href="#cb14-36"></a>                        <span class="op">,</span> <span class="fu">padAngle</span> <span class="op">=</span> <span class="fu">config</span><span class="op">.</span><span class="fu">padAngle</span></span>
<span id="cb14-37"><a href="#cb14-37"></a>                        <span class="op">,</span> <span class="fu">cornerRadius</span> <span class="op">=</span> <span class="fu">config</span><span class="op">.</span><span class="fu">cornerRadius</span></span>
<span id="cb14-38"><a href="#cb14-38"></a>                        <span class="op">,</span> <span class="fu">sortingFn</span> <span class="op">=</span> \<span class="fu">_</span> <span class="fu">_</span> <span class="op">-&gt;</span> <span class="dt">EQ</span></span>
<span id="cb14-39"><a href="#cb14-39"></a>                    }</span>
<span id="cb14-40"><a href="#cb14-40"></a></span>
<span id="cb14-41"><a href="#cb14-41"></a>        <span class="fu">makeSlice</span> <span class="fu">pieDatum</span> <span class="fu">datum</span> <span class="op">=</span></span>
<span id="cb14-42"><a href="#cb14-42"></a>            <span class="dt">Path</span><span class="op">.</span><span class="fu">element</span> (<span class="dt">Shape</span><span class="op">.</span><span class="fu">arc</span> <span class="fu">pieDatum</span>) [ <span class="dt">Attr</span><span class="op">.</span><span class="fu">fill</span> (<span class="dt">Paint</span> <span class="fu">datum</span><span class="op">.</span><span class="fu">color</span>) ]</span>
<span id="cb14-43"><a href="#cb14-43"></a></span>
<span id="cb14-44"><a href="#cb14-44"></a>        <span class="fu">makeLabel</span> <span class="fu">pieDatum</span> <span class="fu">datum</span> <span class="op">=</span></span>
<span id="cb14-45"><a href="#cb14-45"></a>            <span class="kw">let</span></span>
<span id="cb14-46"><a href="#cb14-46"></a>                ( <span class="fu">x</span><span class="op">,</span> <span class="fu">y</span> ) <span class="op">=</span></span>
<span id="cb14-47"><a href="#cb14-47"></a>                    <span class="dt">Shape</span><span class="op">.</span><span class="fu">centroid</span></span>
<span id="cb14-48"><a href="#cb14-48"></a>                        { <span class="fu">pieDatum</span></span>
<span id="cb14-49"><a href="#cb14-49"></a>                            <span class="op">|</span> <span class="fu">innerRadius</span> <span class="op">=</span> <span class="fu">config</span><span class="op">.</span><span class="fu">labelPosition</span></span>
<span id="cb14-50"><a href="#cb14-50"></a>                            <span class="op">,</span> <span class="fu">outerRadius</span> <span class="op">=</span> <span class="fu">config</span><span class="op">.</span><span class="fu">labelPosition</span></span>
<span id="cb14-51"><a href="#cb14-51"></a>                        }</span>
<span id="cb14-52"><a href="#cb14-52"></a>            <span class="kw">in</span></span>
<span id="cb14-53"><a href="#cb14-53"></a>            <span class="fu">text_</span></span>
<span id="cb14-54"><a href="#cb14-54"></a>                [ <span class="dt">Attr</span><span class="op">.</span><span class="fu">transform</span> [ <span class="dt">Translate</span> <span class="fu">x</span> <span class="fu">y</span> ]</span>
<span id="cb14-55"><a href="#cb14-55"></a>                <span class="op">,</span> <span class="dt">Attr</span><span class="op">.</span><span class="fu">dy</span> (<span class="fu">em</span> <span class="dv">0</span><span class="op">.</span><span class="dv">35</span>)</span>
<span id="cb14-56"><a href="#cb14-56"></a>                <span class="op">,</span> <span class="dt">Attr</span><span class="op">.</span><span class="fu">textAnchor</span> <span class="dt">AnchorMiddle</span></span>
<span id="cb14-57"><a href="#cb14-57"></a>                ]</span>
<span id="cb14-58"><a href="#cb14-58"></a>                [ <span class="fu">text</span> <span class="fu">datum</span><span class="op">.</span><span class="fu">label</span> ]</span>
<span id="cb14-59"><a href="#cb14-59"></a>    <span class="kw">in</span></span>
<span id="cb14-60"><a href="#cb14-60"></a>    <span class="fu">svg</span> [ <span class="fu">width</span> (<span class="fu">radius</span> <span class="op">*</span> <span class="dv">2</span>)<span class="op">,</span> <span class="fu">height</span> (<span class="fu">radius</span> <span class="op">*</span> <span class="dv">2</span>) ]</span>
<span id="cb14-61"><a href="#cb14-61"></a>        [ <span class="fu">g</span> [ <span class="dt">Attr</span><span class="op">.</span><span class="fu">transform</span> [ <span class="dt">Translate</span> <span class="fu">radius</span> <span class="fu">radius</span> ] ]</span>
<span id="cb14-62"><a href="#cb14-62"></a>            [ <span class="fu">g</span> [] <span class="op">&lt;|</span> <span class="dt">List</span><span class="op">.</span><span class="fu">map2</span> <span class="fu">makeSlice</span> <span class="fu">pieData</span> <span class="fu">model</span></span>
<span id="cb14-63"><a href="#cb14-63"></a>            <span class="op">,</span> <span class="fu">g</span> [] <span class="op">&lt;|</span> <span class="dt">List</span><span class="op">.</span><span class="fu">map2</span> <span class="fu">makeLabel</span> <span class="fu">pieData</span> <span class="fu">model</span></span>
<span id="cb14-64"><a href="#cb14-64"></a>            ]</span>
<span id="cb14-65"><a href="#cb14-65"></a>        ]</span></code></pre></div>
<p>主に書き換えたのは色の部分． example では <code>colors</code> 的な色リストを利用してたが，リポジトリのプログラミング言語には GitHub 側で色が設定してあるので，それをモデルに持たせて引用することにした． あとは <code>Repository</code> 型から <code>Data</code> 型を組み立てる部分を書くだけ：</p>
<div class="sourceCode" id="cb15"><pre class="sourceCode elm"><code class="sourceCode elm"><span id="cb15-1"><a href="#cb15-1"></a><span class="kw">module</span> <span class="dt">Pie</span> <span class="kw">exposing</span> (<span class="fu">view</span>)</span>
<span id="cb15-2"><a href="#cb15-2"></a></span>
<span id="cb15-3"><a href="#cb15-3"></a><span class="op">...</span> <span class="co">-- 割愛</span></span>
<span id="cb15-4"><a href="#cb15-4"></a></span>
<span id="cb15-5"><a href="#cb15-5"></a><span class="fu">fromRepo</span> : <span class="dt">GitHub</span><span class="op">.</span><span class="dt">Repository</span> <span class="op">-&gt;</span> <span class="dt">Data</span></span>
<span id="cb15-6"><a href="#cb15-6"></a><span class="fu">fromRepo</span> <span class="fu">repo</span> <span class="op">=</span></span>
<span id="cb15-7"><a href="#cb15-7"></a>    <span class="cf">case</span> <span class="fu">repo</span><span class="op">.</span><span class="fu">language</span> <span class="cf">of</span></span>
<span id="cb15-8"><a href="#cb15-8"></a>        <span class="dt">Nothing</span> <span class="op">-&gt;</span></span>
<span id="cb15-9"><a href="#cb15-9"></a>            <span class="dt">Data</span> <span class="st">&quot;none&quot;</span> (<span class="fu">toFloat</span> <span class="fu">repo</span><span class="op">.</span><span class="fu">star</span>) <span class="dt">Color</span><span class="op">.</span><span class="fu">black</span></span>
<span id="cb15-10"><a href="#cb15-10"></a>        <span class="dt">Just</span> <span class="fu">lang</span> <span class="op">-&gt;</span></span>
<span id="cb15-11"><a href="#cb15-11"></a>            <span class="cf">case</span> <span class="fu">hexToColor</span> <span class="fu">lang</span><span class="op">.</span><span class="fu">color</span> <span class="cf">of</span></span>
<span id="cb15-12"><a href="#cb15-12"></a>                <span class="dt">Ok</span> <span class="fu">c</span> <span class="op">-&gt;</span></span>
<span id="cb15-13"><a href="#cb15-13"></a>                    <span class="dt">Data</span> <span class="fu">lang</span><span class="op">.</span><span class="fu">name</span> (<span class="fu">toFloat</span> <span class="fu">repo</span><span class="op">.</span><span class="fu">star</span>) <span class="fu">c</span></span>
<span id="cb15-14"><a href="#cb15-14"></a>                <span class="fu">_</span> <span class="op">-&gt;</span></span>
<span id="cb15-15"><a href="#cb15-15"></a>                    <span class="dt">Data</span> <span class="st">&quot;none&quot;</span> (<span class="fu">toFloat</span> <span class="fu">repo</span><span class="op">.</span><span class="fu">star</span>) <span class="dt">Color</span><span class="op">.</span><span class="fu">black</span></span>
<span id="cb15-16"><a href="#cb15-16"></a></span>
<span id="cb15-17"><a href="#cb15-17"></a><span class="fu">view</span> : <span class="dt">GitHub</span><span class="op">.</span><span class="dt">User</span> <span class="op">-&gt;</span> <span class="dt">Html</span> <span class="fu">msg</span></span>
<span id="cb15-18"><a href="#cb15-18"></a><span class="fu">view</span> <span class="fu">user</span> <span class="op">=</span></span>
<span id="cb15-19"><a href="#cb15-19"></a>    <span class="kw">let</span></span>
<span id="cb15-20"><a href="#cb15-20"></a>        <span class="fu">config</span> <span class="op">=</span> <span class="op">...</span> <span class="co">-- 割愛</span></span>
<span id="cb15-21"><a href="#cb15-21"></a></span>
<span id="cb15-22"><a href="#cb15-22"></a>        <span class="fu">updateBy</span> <span class="fu">d</span> <span class="fu">value</span> <span class="op">=</span></span>
<span id="cb15-23"><a href="#cb15-23"></a>            <span class="cf">case</span> <span class="fu">value</span> <span class="cf">of</span></span>
<span id="cb15-24"><a href="#cb15-24"></a>                <span class="dt">Nothing</span> <span class="op">-&gt;</span></span>
<span id="cb15-25"><a href="#cb15-25"></a>                    <span class="dt">Just</span> <span class="fu">d</span></span>
<span id="cb15-26"><a href="#cb15-26"></a></span>
<span id="cb15-27"><a href="#cb15-27"></a>                <span class="dt">Just</span> <span class="fu">v</span> <span class="op">-&gt;</span></span>
<span id="cb15-28"><a href="#cb15-28"></a>                    <span class="dt">Just</span> { <span class="fu">v</span> <span class="op">|</span> <span class="fu">data</span> <span class="op">=</span> <span class="fu">v</span><span class="op">.</span><span class="fu">data</span> <span class="op">+</span> <span class="fu">d</span><span class="op">.</span><span class="fu">data</span> }</span>
<span id="cb15-29"><a href="#cb15-29"></a></span>
<span id="cb15-30"><a href="#cb15-30"></a>        <span class="fu">model</span> <span class="op">=</span></span>
<span id="cb15-31"><a href="#cb15-31"></a>            <span class="dt">List</span><span class="op">.</span><span class="fu">map</span> <span class="fu">fromRepo</span> <span class="fu">user</span><span class="op">.</span><span class="fu">repos</span></span>
<span id="cb15-32"><a href="#cb15-32"></a>                <span class="op">|&gt;</span> <span class="dt">List</span><span class="op">.</span><span class="fu">foldl</span> (\<span class="fu">d</span> <span class="op">-&gt;</span> <span class="dt">Dict</span><span class="op">.</span><span class="fu">update</span> <span class="fu">d</span><span class="op">.</span><span class="fu">label</span> (<span class="fu">updateBy</span> <span class="fu">d</span>)) <span class="dt">Dict</span><span class="op">.</span><span class="fu">empty</span></span>
<span id="cb15-33"><a href="#cb15-33"></a>                <span class="op">|&gt;</span> <span class="dt">Dict</span><span class="op">.</span><span class="fu">filter</span> (\<span class="fu">_</span> <span class="fu">v</span> <span class="op">-&gt;</span> <span class="fu">v</span><span class="op">.</span><span class="fu">data</span> <span class="op">/=</span> <span class="dv">0</span>)</span>
<span id="cb15-34"><a href="#cb15-34"></a>    <span class="kw">in</span></span>
<span id="cb15-35"><a href="#cb15-35"></a>    <span class="fu">div</span> [ <span class="fu">class</span> <span class="st">&quot;position-relative&quot;</span> ]</span>
<span id="cb15-36"><a href="#cb15-36"></a>        [ <span class="fu">drawChart</span> <span class="fu">config</span> (<span class="dt">Dict</span><span class="op">.</span><span class="fu">values</span> <span class="fu">model</span>)</span>
<span id="cb15-37"><a href="#cb15-37"></a>        ]</span></code></pre></div>
<p>色々考えた結果，いったん各 <code>Repository</code> を <code>Data</code> に変換して，そのあと言語名をキーにした <code>Dict</code> へと畳み込んでいる（<code>.data</code> の部分だけ足し合わせてる）． あとは <code>Pie.view user</code> を <code>Main.view</code> で呼び出すだけ．</p>
<p>あ、ちなみに真ん中にアバター画像出したしてるのは割愛（ただ単にアバター画像を GraphQL で取ってきて，<code>Pie.view</code> で重ねてるだけ）．</p>
<h2 id="おしまい">おしまい</h2>
<p>Firebase 便利ですね．</p>
  </div>]]></summary>
</entry>
<entry>
    <title>Haskell で SSH Public Key の FingerPrint を計算する</title>
    <link href="https://matsubara0507.github.io/posts/2020-01-08-calc-ssh-pubkey-fingerprint-with-haskell.html" />
    <id>https://matsubara0507.github.io/posts/2020-01-08-calc-ssh-pubkey-fingerprint-with-haskell.html</id>
    <published>2020-01-08T00:00:00Z</published>
    <updated>2020-01-08T00:00:00Z</updated>
    <summary type="html"><![CDATA[<div class="post-content" itemprop="articleBody">
    <p>GitHub に登録している Public Key から <code>~/.ssh/authorized_key</code> を生成する簡易的な CLI ツールを作ろうと考えた． そして，Public Key をフィルタリングするために <code>https://github.com/settings/keys</code> で参照できる FingerPrint を使おうと考えたが，その場合は GitHub API で取得した Public Key から FingerPrint をプログラム側で計算しないといけない．</p>
<p>もちろん，<code>ssh-keygen -l -E md5 -f ssh_host_ecdsa_key.pub</code> なんかで生成できるのだが可能なら素の Haskell プログラムでやりたいなと考えた． ということで，本記事はタイトルの通り Haskell で SSH Public Key の FingerPrint を計算することになったので，そのために色々調べたメモ書き．</p>
<h2 id="fingerprint">FingerPrint</h2>
<p>そもそもどういうアルゴリズムで出しているのか． ちょうど良い記事があった，ありがたい:</p>
<ul>
<li><a href="https://qiita.com/hotpepsi/items/128f3a660cee8b5467c6">RSA公開鍵のファイル形式とfingerprint - Qiita</a></li>
</ul>
<p>要するに Base64 デコードして MD5 ハッシュをかければ良いようだ（本来は SHA256 の方が良いっぽいけど）． 上記記事では Base64 デコードしてできた <a href="https://www.ietf.org/rfc/rfc4253.txt">RFC4253</a> の中身まで説明してくれており，最後の Ruby プログラムではバイナリをちゃんと読んだ上で FingerPrint を計算している．</p>
<p>単純に RSA 形式の Public Key の FingerPrint を計算するだけならそこまでしなくて良さそうだ．</p>
<h2 id="haskell-で計算する">Haskell で計算する</h2>
<p>上述の通りやることは2つ</p>
<ol type="1">
<li>Base64 デコード</li>
<li>MD5 ハッシュ化</li>
</ol>
<p>あとその前に header と body を切り分ける．</p>
<p>ちなみに，最終的なコードは <a href="https://github.com/haskell-jp/playground/pull/1">haskell-jp/playground</a> においた．</p>
<h3 id="header-と-body-を切り分ける">header と body を切り分ける</h3>
<p>RSA の Public Key は <code>ssh-rsa AAAAXXX...</code> となっている（<code>X</code> 以降は適当）． 欲しいのは空白よりあとだけなので，まずはそこを切り出す（ついでにバリデーションする）． 後々楽なので全部 <code>ByteString</code> を使うことにする:</p>
<div class="sourceCode" id="cb1"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span id="cb1-1"><a href="#cb1-1"></a><span class="kw">import</span> <span class="dt">Data.ByteString</span> (<span class="dt">ByteString</span>)</span>
<span id="cb1-2"><a href="#cb1-2"></a><span class="kw">import</span> <span class="kw">qualified</span> <span class="dt">Data.ByteString</span> <span class="kw">as</span> <span class="dt">B</span></span>
<span id="cb1-3"><a href="#cb1-3"></a></span>
<span id="cb1-4"><a href="#cb1-4"></a><span class="ot">pubkeyBody ::</span> <span class="dt">ByteString</span> <span class="ot">-&gt;</span> <span class="dt">Maybe</span> <span class="dt">ByteString</span></span>
<span id="cb1-5"><a href="#cb1-5"></a>pubkeyBody content <span class="ot">=</span></span>
<span id="cb1-6"><a href="#cb1-6"></a>  <span class="kw">case</span> B.split <span class="dv">32</span> content <span class="kw">of</span></span>
<span id="cb1-7"><a href="#cb1-7"></a>    [header, body] <span class="op">|</span> header <span class="op">==</span> <span class="st">&quot;ssh-rsa&quot;</span> <span class="op">&amp;&amp;</span> <span class="st">&quot;AAAA&quot;</span> <span class="ot">`B.isPrefixOf`</span> body <span class="ot">-&gt;</span></span>
<span id="cb1-8"><a href="#cb1-8"></a>        <span class="dt">Just</span> body</span>
<span id="cb1-9"><a href="#cb1-9"></a>    _ <span class="ot">-&gt;</span></span>
<span id="cb1-10"><a href="#cb1-10"></a>        <span class="dt">Nothing</span></span></code></pre></div>
<p><code>Word8</code> 型の <code>32</code> は空白．</p>
<h3 id="base64-デコード">Base64 デコード</h3>
<p><a href="https://hackage.haskell.org/package/memory">memory</a> というパッケージを使う． なぜかというと，この後で使うあらゆる暗号アルゴリズムを詰め込んだ <a href="http://hackage.haskell.org/package/cryptonite">cryptonite</a> というパッケージがこれに依存していたからだ． cryptonite に習って Base64 デコードするとこんな感じだ（ついでにバリデーションする）:</p>
<div class="sourceCode" id="cb2"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span id="cb2-1"><a href="#cb2-1"></a><span class="co">-- これが memory パッケージのモジュール</span></span>
<span id="cb2-2"><a href="#cb2-2"></a><span class="kw">import</span> <span class="dt">Data.ByteArray.Encoding</span> (<span class="dt">Base</span> (<span class="dt">Base64</span>), convertFromBase)</span>
<span id="cb2-3"><a href="#cb2-3"></a></span>
<span id="cb2-4"><a href="#cb2-4"></a><span class="ot">decode ::</span> <span class="dt">ByteString</span> <span class="ot">-&gt;</span> <span class="dt">Maybe</span> <span class="dt">ByteString</span></span>
<span id="cb2-5"><a href="#cb2-5"></a>decode body <span class="ot">=</span></span>
<span id="cb2-6"><a href="#cb2-6"></a>  <span class="kw">case</span> convertFromBase <span class="dt">Base64</span> body <span class="kw">of</span></span>
<span id="cb2-7"><a href="#cb2-7"></a>    <span class="dt">Right</span> bin <span class="op">|</span> prefix <span class="ot">`B.isPrefixOf`</span> bin <span class="ot">-&gt;</span></span>
<span id="cb2-8"><a href="#cb2-8"></a>        <span class="dt">Just</span> bin</span>
<span id="cb2-9"><a href="#cb2-9"></a>    _ <span class="ot">-&gt;</span></span>
<span id="cb2-10"><a href="#cb2-10"></a>        <span class="dt">Nothing</span></span>
<span id="cb2-11"><a href="#cb2-11"></a>  <span class="kw">where</span></span>
<span id="cb2-12"><a href="#cb2-12"></a>    <span class="co">-- \x00 \x00 \x00 \x07 ssh-rsa (00000007 というのは ssh-rsa の長さ)</span></span>
<span id="cb2-13"><a href="#cb2-13"></a>    prefix <span class="ot">=</span> <span class="st">&quot;\NUL\NUL\NUL\assh-rsa&quot;</span></span></code></pre></div>
<h3 id="md5-ハッシュ化">MD5 ハッシュ化</h3>
<p>上述の通り，cryptonite というのを用いる． ちなみにこれらのパッケージについては <a href="https://www.fpcomplete.com/blog/2017/09/cryptographic-hashing-haskell">Cryptographic Hashing in Haskell - FPComplete</a> で紹介されてる(<a href="https://haskell.e-bigmoon.com/posts/2017/09-18-cryptographic-hashing-haskell.html">邦訳記事</a>)． 2017年と少し古い記事だが，このパッケージは今でも精力的にメンテナンスがされており，また個人ではなくチーム(<a href="https://github.com/haskell-crypto">Haskell Crypto</a>)で管理している点から信頼できるかなと考えた（暗号系のパッケージは結構シビアだから）．</p>
<p>このパッケージで何らかのハッシュ関数を利用するには <code>Crypto.Hash.hash</code> 関数を利用すれば良い． アルゴリズム（MD5 か SHA256 かなど）は返り値の型を明示することで指定できる． 今回の場合は <code>Digest MD5</code> 型とすれば良い:</p>
<div class="sourceCode" id="cb3"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span id="cb3-1"><a href="#cb3-1"></a><span class="kw">import</span> <span class="dt">Crypto.Hash</span> (<span class="dt">Digest</span>, <span class="dt">MD5</span>)</span>
<span id="cb3-2"><a href="#cb3-2"></a><span class="kw">import</span> <span class="kw">qualified</span> <span class="dt">Crypto.Hash</span> <span class="kw">as</span> <span class="dt">Crypto</span></span>
<span id="cb3-3"><a href="#cb3-3"></a></span>
<span id="cb3-4"><a href="#cb3-4"></a><span class="ot">fingerprint ::</span> <span class="dt">ByteString</span> <span class="ot">-&gt;</span> <span class="dt">Maybe</span> (<span class="dt">Digest</span> <span class="dt">MD5</span>)</span>
<span id="cb3-5"><a href="#cb3-5"></a>fingerprint content <span class="ot">=</span> <span class="kw">do</span></span>
<span id="cb3-6"><a href="#cb3-6"></a>  body <span class="ot">&lt;-</span> pubkeyBody content</span>
<span id="cb3-7"><a href="#cb3-7"></a>  bin  <span class="ot">&lt;-</span> decode body</span>
<span id="cb3-8"><a href="#cb3-8"></a>  <span class="fu">pure</span> <span class="op">$</span> Crypto.hash bin</span></code></pre></div>
<h2 id="試す">試す</h2>
<p>GHCi で適当に:</p>
<div class="sourceCode" id="cb4"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span id="cb4-1"><a href="#cb4-1"></a><span class="op">&gt;&gt;</span> <span class="op">:</span>set <span class="op">-</span><span class="dt">XOverloadedString</span></span>
<span id="cb4-2"><a href="#cb4-2"></a><span class="op">&gt;&gt;</span> <span class="kw">import</span> <span class="dt">Crypto.SSH.PubKey</span>      <span class="co">-- 今まで定義してた関数のモジュール</span></span>
<span id="cb4-3"><a href="#cb4-3"></a><span class="op">&gt;&gt;</span> fingerprint <span class="st">&quot;ssh-rsa AAAA...&quot;</span> <span class="co">-- 適当に public key の中身を貼り付ける</span></span>
<span id="cb4-4"><a href="#cb4-4"></a><span class="dt">Just</span> <span class="st">&quot;f3b17672020e4e8ad25516034facc12d&quot;</span></span></code></pre></div>
<p>GitHub では8ビットごとに <code>:</code> で区切られてるが，まぁそれはいいでしょ．</p>
<h2 id="おしまい">おしまい</h2>
<p>意外とこういう Crypto 系のテーマの Haskell コードの例って少ないよね． 全部コード読んで試したよ．</p>
  </div>]]></summary>
</entry>
<entry>
    <title>Elixir による JSON Parser</title>
    <link href="https://matsubara0507.github.io/posts/2019-12-22-json-parser-using-elixir.html" />
    <id>https://matsubara0507.github.io/posts/2019-12-22-json-parser-using-elixir.html</id>
    <published>2019-12-22T00:00:00Z</published>
    <updated>2019-12-22T00:00:00Z</updated>
    <summary type="html"><![CDATA[<div class="post-content" itemprop="articleBody">
    <p>「<a href="https://matsubara0507.github.io/posts/2019-12-08-re-create-thank-you-stars-ver-elixir.html">久しぶりに thank_you_stars をビルドする</a>」の続きというかおまけというかって感じの記事です． この記事の最後で poison を抜いてお手製 JSON パーサーを組み込みました． 綺麗に整えたので記事にまとめる．</p>
<h2 id="実装する">実装する</h2>
<p>外部パッケージを使えない縛りなので，完全な Pure Elixir で実装していく．</p>
<h3 id="result-型">Result 型</h3>
<p>その前に便利モジュールを作っておく． いわゆる <code>Either</code> 型だ．</p>
<div class="sourceCode" id="cb1"><pre class="sourceCode elixir"><code class="sourceCode elixir"><span id="cb1-1"><a href="#cb1-1"></a><span class="co"># Result e a = {:error, e} | {:ok, a} のような型を扱う</span></span>
<span id="cb1-2"><a href="#cb1-2"></a><span class="kw">defmodule</span> <span class="cn">ThankYouStars</span><span class="op">.</span><span class="cn">Result</span> <span class="kw">do</span></span>
<span id="cb1-3"><a href="#cb1-3"></a>  <span class="co"># {:ok, a}, {:error, e} をそのまま返す</span></span>
<span id="cb1-4"><a href="#cb1-4"></a>  <span class="kw">def</span> success(v), <span class="kw">do</span>: {<span class="va">:ok</span>, v}</span>
<span id="cb1-5"><a href="#cb1-5"></a>  <span class="kw">def</span> failure(v), <span class="kw">do</span>: {<span class="va">:error</span>, v}</span>
<span id="cb1-6"><a href="#cb1-6"></a></span>
<span id="cb1-7"><a href="#cb1-7"></a>  <span class="co"># {:ok, a} だった場合に {:ok, f(a)} を返す (f は a -&gt; b)</span></span>
<span id="cb1-8"><a href="#cb1-8"></a>  <span class="kw">def</span> map({<span class="va">:ok</span>, v}, f), <span class="kw">do</span>: success(f<span class="op">.</span>(v))</span>
<span id="cb1-9"><a href="#cb1-9"></a>  <span class="kw">def</span> map(err <span class="op">=</span> {<span class="va">:error</span>, _}, _), <span class="kw">do</span>: err</span>
<span id="cb1-10"><a href="#cb1-10"></a></span>
<span id="cb1-11"><a href="#cb1-11"></a>  <span class="co"># {:ok, a} だった場合に f(a) を返す (f は a -&gt; Result e b)</span></span>
<span id="cb1-12"><a href="#cb1-12"></a>  <span class="kw">def</span> and_then({<span class="va">:ok</span>, v}, f), <span class="kw">do</span>: f<span class="op">.</span>(v)</span>
<span id="cb1-13"><a href="#cb1-13"></a>  <span class="kw">def</span> and_then(err <span class="op">=</span> {<span class="va">:error</span>, _}, _), <span class="kw">do</span>: err</span>
<span id="cb1-14"><a href="#cb1-14"></a></span>
<span id="cb1-15"><a href="#cb1-15"></a>  <span class="co"># {:error, e} だった場合に {:error, f(e)} を返す (f は e -&gt; b)</span></span>
<span id="cb1-16"><a href="#cb1-16"></a>  <span class="kw">def</span> map_error({<span class="va">:error</span>, e}, f), <span class="kw">do</span>: failure(f<span class="op">.</span>(e))</span>
<span id="cb1-17"><a href="#cb1-17"></a>  <span class="kw">def</span> map_error(r <span class="op">=</span> {<span class="va">:ok</span>, _}, _), <span class="kw">do</span>: r</span>
<span id="cb1-18"><a href="#cb1-18"></a><span class="kw">end</span></span></code></pre></div>
<p>これを作っておくと <code>{:ok, a} | {:error, e}</code> なデータ型をパイプラインと組み合わせて利用できるようになる(実はプリミティブあったりしないよね？)．</p>
<h3 id="状態のデータ構造">状態のデータ構造</h3>
<p>シンプルにパース結果と残りの文字列を保存する連想配列を持ち回ることにする:</p>
<div class="sourceCode" id="cb2"><pre class="sourceCode elixir"><code class="sourceCode elixir"><span id="cb2-1"><a href="#cb2-1"></a><span class="kw">defmodule</span> <span class="cn">ThankYouStars</span><span class="op">.</span><span class="cn">JSON</span> <span class="kw">do</span></span>
<span id="cb2-2"><a href="#cb2-2"></a>  <span class="im">alias</span> <span class="cn">ThankYouStars</span><span class="op">.</span><span class="cn">Result</span>, <span class="va">as:</span> <span class="cn">Result</span></span>
<span id="cb2-3"><a href="#cb2-3"></a></span>
<span id="cb2-4"><a href="#cb2-4"></a>  <span class="kw">def</span> decode(str) <span class="kw">do</span></span>
<span id="cb2-5"><a href="#cb2-5"></a>    init_stat(str)</span>
<span id="cb2-6"><a href="#cb2-6"></a>    <span class="op">|&gt;</span> match_element() <span class="co"># これがパーサー</span></span>
<span id="cb2-7"><a href="#cb2-7"></a>    <span class="op">|&gt;</span> <span class="kw">case</span> <span class="kw">do</span></span>
<span id="cb2-8"><a href="#cb2-8"></a>      <span class="co"># パースが成功した場合 {:ok} かつ残り文字列が空になる想定</span></span>
<span id="cb2-9"><a href="#cb2-9"></a>      {<span class="va">:ok</span>, %{<span class="va">rest:</span> <span class="st">&quot;&quot;</span>, <span class="va">result:</span> result}} <span class="op">-&gt;</span> <span class="cn">Result</span><span class="op">.</span>success(result)</span>
<span id="cb2-10"><a href="#cb2-10"></a>      {_, %{<span class="va">rest:</span> rest}} <span class="op">-&gt;</span> <span class="cn">Result</span><span class="op">.</span>failure(rest)</span>
<span id="cb2-11"><a href="#cb2-11"></a>    <span class="kw">end</span></span>
<span id="cb2-12"><a href="#cb2-12"></a>  <span class="kw">end</span></span>
<span id="cb2-13"><a href="#cb2-13"></a></span>
<span id="cb2-14"><a href="#cb2-14"></a>  <span class="co"># rest が残り文字列で result がパース結果</span></span>
<span id="cb2-15"><a href="#cb2-15"></a>  <span class="kw">defp</span> init_stat(str), <span class="kw">do</span>: %{<span class="va">rest:</span> str, <span class="va">result:</span> %{}}</span>
<span id="cb2-16"><a href="#cb2-16"></a></span>
<span id="cb2-17"><a href="#cb2-17"></a>  <span class="op">...</span></span>
<span id="cb2-18"><a href="#cb2-18"></a><span class="kw">end</span></span></code></pre></div>
<p>今回実装する JSON パーサーは最終的に Elixir の連想配列や配列，真偽値や文字列などのプリミティブなデータ型へ変換することとする． なので，初期値として空の連想配列 <code>%{}</code> を渡している．</p>
<h3 id="json.org">JSON.org</h3>
<p>JSON の(基本的な)構文定義は <a href="https://json.org">JSON.org</a> に書いてある． ご丁寧に BNF が書いてあるので，これに沿って実装するだけだ． 例えば，こんな感じの BNF が記述されている:</p>
<div class="sourceCode" id="cb3"><pre class="sourceCode txt"><code class="sourceCode default"><span id="cb3-1"><a href="#cb3-1"></a>json</span>
<span id="cb3-2"><a href="#cb3-2"></a>  := element</span>
<span id="cb3-3"><a href="#cb3-3"></a></span>
<span id="cb3-4"><a href="#cb3-4"></a>element</span>
<span id="cb3-5"><a href="#cb3-5"></a>  := ws value ws</span>
<span id="cb3-6"><a href="#cb3-6"></a></span>
<span id="cb3-7"><a href="#cb3-7"></a>value</span>
<span id="cb3-8"><a href="#cb3-8"></a>  := object</span>
<span id="cb3-9"><a href="#cb3-9"></a>   | array</span>
<span id="cb3-10"><a href="#cb3-10"></a>   | string</span>
<span id="cb3-11"><a href="#cb3-11"></a>   | number</span>
<span id="cb3-12"><a href="#cb3-12"></a>   | &quot;true&quot;</span>
<span id="cb3-13"><a href="#cb3-13"></a>   | &quot;false&quot;</span>
<span id="cb3-14"><a href="#cb3-14"></a>   | &quot;null&quot;</span>
<span id="cb3-15"><a href="#cb3-15"></a></span>
<span id="cb3-16"><a href="#cb3-16"></a>ws</span>
<span id="cb3-17"><a href="#cb3-17"></a>  := ... // 空白除去</span></code></pre></div>
<p>これをパターンマッチを駆使して実装するとこんな感じ:</p>
<div class="sourceCode" id="cb4"><pre class="sourceCode elixir"><code class="sourceCode elixir"><span id="cb4-1"><a href="#cb4-1"></a><span class="kw">defp</span> match_element(stat) <span class="kw">do</span></span>
<span id="cb4-2"><a href="#cb4-2"></a>  trim_leading(stat) <span class="co"># rest の前方の空白を除去します</span></span>
<span id="cb4-3"><a href="#cb4-3"></a>  <span class="op">|&gt;</span> match_value()</span>
<span id="cb4-4"><a href="#cb4-4"></a>  <span class="op">|&gt;</span> <span class="cn">Result</span><span class="op">.</span>map(<span class="op">&amp;</span>trim_leading(<span class="op">&amp;</span><span class="dv">1</span>))</span>
<span id="cb4-5"><a href="#cb4-5"></a><span class="kw">end</span></span>
<span id="cb4-6"><a href="#cb4-6"></a></span>
<span id="cb4-7"><a href="#cb4-7"></a><span class="co"># match_string や match_array はあとで</span></span>
<span id="cb4-8"><a href="#cb4-8"></a><span class="kw">defp</span> match_value(%{<span class="va">rest:</span> <span class="st">&quot;true&quot;</span> <span class="op">&lt;&gt;</span> rest}), <span class="kw">do</span>: <span class="cn">Result</span><span class="op">.</span>success(%{<span class="va">result:</span> <span class="cn">true</span>, <span class="va">rest:</span> rest})</span>
<span id="cb4-9"><a href="#cb4-9"></a><span class="kw">defp</span> match_value(%{<span class="va">rest:</span> <span class="st">&quot;false&quot;</span> <span class="op">&lt;&gt;</span> rest}), <span class="kw">do</span>: <span class="cn">Result</span><span class="op">.</span>success(%{<span class="va">result:</span> <span class="cn">false</span>, <span class="va">rest:</span> rest})</span>
<span id="cb4-10"><a href="#cb4-10"></a><span class="kw">defp</span> match_value(%{<span class="va">rest:</span> <span class="st">&quot;null&quot;</span> <span class="op">&lt;&gt;</span> rest}), <span class="kw">do</span>: <span class="cn">Result</span><span class="op">.</span>success(%{<span class="va">result:</span> <span class="cn">nil</span>, <span class="va">rest:</span> rest})</span>
<span id="cb4-11"><a href="#cb4-11"></a><span class="kw">defp</span> match_value(stat <span class="op">=</span> %{<span class="va">rest:</span> <span class="st">&quot;\&quot;&quot;</span> <span class="op">&lt;&gt;</span> _}), <span class="kw">do</span>: match_string(stat)</span>
<span id="cb4-12"><a href="#cb4-12"></a><span class="kw">defp</span> match_value(stat <span class="op">=</span> %{<span class="va">rest:</span> <span class="st">&quot;[&quot;</span> <span class="op">&lt;&gt;</span> _}), <span class="kw">do</span>: match_array(stat)</span>
<span id="cb4-13"><a href="#cb4-13"></a><span class="kw">defp</span> match_value(stat <span class="op">=</span> %{<span class="va">rest:</span> <span class="st">&quot;{&quot;</span> <span class="op">&lt;&gt;</span> _}), <span class="kw">do</span>: match_object(stat)</span>
<span id="cb4-14"><a href="#cb4-14"></a><span class="kw">defp</span> match_value(stat), <span class="kw">do</span>: match_number(stat)</span></code></pre></div>
<p><code>match_xxx</code> 系の関数は全て前述した <code>Result e a</code> 型を返すイメージ(<code>e</code> も <code>a</code> も前述した状態の連想配列だが)．</p>
<h3 id="オブジェクトのパース">オブジェクトのパース</h3>
<p><code>{}</code> で囲まれた連想配列のようなもの，例えば <code>{ &quot;key&quot; : true }</code> がオブジェクトだ:</p>
<div class="sourceCode" id="cb5"><pre class="sourceCode txt"><code class="sourceCode default"><span id="cb5-1"><a href="#cb5-1"></a>object</span>
<span id="cb5-2"><a href="#cb5-2"></a>  := &#39;{&#39; ws &#39;}&#39;</span>
<span id="cb5-3"><a href="#cb5-3"></a>   | &#39;{&#39; members &#39;}&#39;</span>
<span id="cb5-4"><a href="#cb5-4"></a></span>
<span id="cb5-5"><a href="#cb5-5"></a>members</span>
<span id="cb5-6"><a href="#cb5-6"></a>  := member</span>
<span id="cb5-7"><a href="#cb5-7"></a>   | member &#39;,&#39; members</span>
<span id="cb5-8"><a href="#cb5-8"></a></span>
<span id="cb5-9"><a href="#cb5-9"></a>member</span>
<span id="cb5-10"><a href="#cb5-10"></a>  := ws string ws &#39;:&#39; element</span>
<span id="cb5-11"><a href="#cb5-11"></a></span>
<span id="cb5-12"><a href="#cb5-12"></a>string</span>
<span id="cb5-13"><a href="#cb5-13"></a>  := ... // 文字列</span></code></pre></div>
<p>文字列の部分はあとで実装するとして，他の部分だけをパターンマッチとパイプを利用して実装するとこんな感じ:</p>
<div class="sourceCode" id="cb6"><pre class="sourceCode elixir"><code class="sourceCode elixir"><span id="cb6-1"><a href="#cb6-1"></a><span class="co"># parse_when_unmatch_by(stat, char, parser) は</span></span>
<span id="cb6-2"><a href="#cb6-2"></a><span class="co"># char の文字列にマッチしなければ parser を実行し</span></span>
<span id="cb6-3"><a href="#cb6-3"></a><span class="co"># マッチした場合は parser を実行せずに stat をそのまま返す</span></span>
<span id="cb6-4"><a href="#cb6-4"></a><span class="kw">defp</span> match_object(stat) <span class="kw">do</span></span>
<span id="cb6-5"><a href="#cb6-5"></a>  match_left_par(stat)                               <span class="co"># `{` にマッチ</span></span>
<span id="cb6-6"><a href="#cb6-6"></a>  <span class="op">|&gt;</span> <span class="cn">Result</span><span class="op">.</span>map(<span class="op">&amp;</span>trim_leading(<span class="op">&amp;</span><span class="dv">1</span>))                   <span class="co"># 空白除去</span></span>
<span id="cb6-7"><a href="#cb6-7"></a>  <span class="op">|&gt;</span> <span class="cn">Result</span><span class="op">.</span>and_then(<span class="op">&amp;</span>update_stat(<span class="op">&amp;</span><span class="dv">1</span>, <span class="va">:result</span>, %{})) <span class="co"># 状態の result を空オブジェクト %{} に更新</span></span>
<span id="cb6-8"><a href="#cb6-8"></a>  <span class="op">|&gt;</span> <span class="cn">Result</span><span class="op">.</span>and_then(<span class="op">&amp;</span>parse_when_unmatch_by(<span class="op">&amp;</span><span class="dv">1</span>, <span class="st">&quot;}&quot;</span>, <span class="kw">fn</span> s <span class="op">-&gt;</span> match_members(s) <span class="kw">end</span>))</span>
<span id="cb6-9"><a href="#cb6-9"></a>  <span class="op">|&gt;</span> <span class="cn">Result</span><span class="op">.</span>and_then(<span class="op">&amp;</span>match_right_par(<span class="op">&amp;</span><span class="dv">1</span>))           <span class="co"># `}` にマッチ</span></span>
<span id="cb6-10"><a href="#cb6-10"></a><span class="kw">end</span></span>
<span id="cb6-11"><a href="#cb6-11"></a></span>
<span id="cb6-12"><a href="#cb6-12"></a><span class="kw">defp</span> match_members(stat) <span class="kw">do</span></span>
<span id="cb6-13"><a href="#cb6-13"></a>  match_member(stat)</span>
<span id="cb6-14"><a href="#cb6-14"></a>  <span class="op">|&gt;</span> <span class="cn">Result</span><span class="op">.</span>and_then(<span class="op">&amp;</span>match_members_tail(<span class="op">&amp;</span><span class="dv">1</span>))</span>
<span id="cb6-15"><a href="#cb6-15"></a><span class="kw">end</span></span>
<span id="cb6-16"><a href="#cb6-16"></a></span>
<span id="cb6-17"><a href="#cb6-17"></a><span class="co"># match_members_tail は members の再帰処理をする</span></span>
<span id="cb6-18"><a href="#cb6-18"></a><span class="co"># 先頭が `,` にマッチした時には再帰処理を行い</span></span>
<span id="cb6-19"><a href="#cb6-19"></a><span class="co"># マッチしない場合は stat をそのまま返す</span></span>
<span id="cb6-20"><a href="#cb6-20"></a><span class="kw">defp</span> match_members_tail(stat <span class="op">=</span> %{<span class="va">rest:</span> <span class="st">&quot;,&quot;</span> <span class="op">&lt;&gt;</span> rest}) <span class="kw">do</span></span>
<span id="cb6-21"><a href="#cb6-21"></a>  update_stat(stat, <span class="va">:rest</span>, rest)</span>
<span id="cb6-22"><a href="#cb6-22"></a>  <span class="op">|&gt;</span> <span class="cn">Result</span><span class="op">.</span>and_then(<span class="op">&amp;</span>match_members(<span class="op">&amp;</span><span class="dv">1</span>))</span>
<span id="cb6-23"><a href="#cb6-23"></a><span class="kw">end</span></span>
<span id="cb6-24"><a href="#cb6-24"></a><span class="kw">defp</span> match_members_tail(stat), <span class="kw">do</span>: <span class="cn">Result</span><span class="op">.</span>success(stat)</span>
<span id="cb6-25"><a href="#cb6-25"></a></span>
<span id="cb6-26"><a href="#cb6-26"></a><span class="kw">defp</span> match_member(stat <span class="op">=</span> %{<span class="va">result:</span> prev}) <span class="kw">do</span></span>
<span id="cb6-27"><a href="#cb6-27"></a>  <span class="co"># 空白を除去してから文字列にマッチさせてみる</span></span>
<span id="cb6-28"><a href="#cb6-28"></a>  <span class="kw">case</span> match_string(trim_leading(stat)) <span class="kw">do</span></span>
<span id="cb6-29"><a href="#cb6-29"></a>    {<span class="va">:error</span>, stat} <span class="op">-&gt;</span></span>
<span id="cb6-30"><a href="#cb6-30"></a>      <span class="cn">Result</span><span class="op">.</span>failure(stat)</span>
<span id="cb6-31"><a href="#cb6-31"></a></span>
<span id="cb6-32"><a href="#cb6-32"></a>    <span class="co"># string のパースに成功した場合にのみ，そのパース結果を `key` として残りをパースする</span></span>
<span id="cb6-33"><a href="#cb6-33"></a>    {<span class="va">:ok</span>, stat <span class="op">=</span> %{<span class="va">result:</span> key}} <span class="op">-&gt;</span></span>
<span id="cb6-34"><a href="#cb6-34"></a>      trim_leading(stat)</span>
<span id="cb6-35"><a href="#cb6-35"></a>      <span class="op">|&gt;</span> match_colon() <span class="co"># &#39;:&#39; にマッチ</span></span>
<span id="cb6-36"><a href="#cb6-36"></a>      <span class="op">|&gt;</span> <span class="cn">Result</span><span class="op">.</span>and_then(<span class="op">&amp;</span>match_element(<span class="op">&amp;</span><span class="dv">1</span>)) <span class="co">#match_element は前のと同じ</span></span>
<span id="cb6-37"><a href="#cb6-37"></a>      <span class="op">|&gt;</span> <span class="cn">Result</span><span class="op">.</span>and_then(<span class="op">&amp;</span>modify_stat(<span class="op">&amp;</span><span class="dv">1</span>, <span class="va">:result</span>, <span class="kw">fn</span> v <span class="op">-&gt;</span> <span class="cn">Map</span><span class="op">.</span>put(prev, key, v) <span class="kw">end</span>))</span>
<span id="cb6-38"><a href="#cb6-38"></a>  <span class="kw">end</span></span>
<span id="cb6-39"><a href="#cb6-39"></a><span class="kw">end</span></span></code></pre></div>
<p><code>update_stat(stat, key, value)</code> は <code>stat</code> の <code>key</code> を <code>value</code> で置き換える関数で，<code>modify_stat(stat, key, func)</code> は <code>stat</code> の <code>key</code> を <code>func</code> で更新する関数だ．</p>
<p>余談だが，Elixir は(僕が思うに)普通の関数それ自体は第一級では無いが，無名関数 <code>fn args -&gt; ... end</code> は第一級のようだ． <code>&amp;any_function(&amp;1, &amp;2)</code> などとすることで <code>fn arg1 arg2 -&gt; any_function(arg1, arg2) end</code> の糖衣構文になるっぽく，関数を関数の引数に渡す場合はこうするらしい． ただし，この記法は入れ子にできないので，<code>modify_stat</code> や <code>parse_when_unmatch_by</code> では内部の方の関数を <code>fn args -&gt; ... end</code> で直接囲っている(<a href="https://stackoverflow.com/questions/38217426/can-i-nest-anonymous-functions-in-elixir">参照</a>)．</p>
<h3 id="配列のパース">配列のパース</h3>
<div class="sourceCode" id="cb7"><pre class="sourceCode txt"><code class="sourceCode default"><span id="cb7-1"><a href="#cb7-1"></a>array</span>
<span id="cb7-2"><a href="#cb7-2"></a>  := &#39;[&#39; ws &#39;]&#39;</span>
<span id="cb7-3"><a href="#cb7-3"></a>   | &#39;[&#39; elements &#39;]&#39;</span>
<span id="cb7-4"><a href="#cb7-4"></a></span>
<span id="cb7-5"><a href="#cb7-5"></a>elements</span>
<span id="cb7-6"><a href="#cb7-6"></a>  := element</span>
<span id="cb7-7"><a href="#cb7-7"></a>   | element &#39;,&#39; elements</span></code></pre></div>
<p>実は <code>{}</code> が <code>[]</code> になっただけで，だいたいオブジェクトと同じだ:</p>
<div class="sourceCode" id="cb8"><pre class="sourceCode elixir"><code class="sourceCode elixir"><span id="cb8-1"><a href="#cb8-1"></a><span class="kw">defp</span> match_array(stat) <span class="kw">do</span></span>
<span id="cb8-2"><a href="#cb8-2"></a>  match_left_square(stat)                           <span class="co"># &#39;[&#39; にマッチ</span></span>
<span id="cb8-3"><a href="#cb8-3"></a>  <span class="op">|&gt;</span> <span class="cn">Result</span><span class="op">.</span>map(<span class="op">&amp;</span>trim_leading(<span class="op">&amp;</span><span class="dv">1</span>))                  <span class="co"># 空白除去</span></span>
<span id="cb8-4"><a href="#cb8-4"></a>  <span class="op">|&gt;</span> <span class="cn">Result</span><span class="op">.</span>and_then(<span class="op">&amp;</span>update_stat(<span class="op">&amp;</span><span class="dv">1</span>, <span class="va">:result</span>, [])) <span class="co"># 状態の result を空配列 [] に更新</span></span>
<span id="cb8-5"><a href="#cb8-5"></a>  <span class="op">|&gt;</span> <span class="cn">Result</span><span class="op">.</span>and_then(<span class="op">&amp;</span>parse_when_unmatch_by(<span class="op">&amp;</span><span class="dv">1</span>, <span class="st">&quot;]&quot;</span>, <span class="kw">fn</span> s <span class="op">-&gt;</span> match_elements(s) <span class="kw">end</span>))</span>
<span id="cb8-6"><a href="#cb8-6"></a>  <span class="op">|&gt;</span> <span class="cn">Result</span><span class="op">.</span>and_then(<span class="op">&amp;</span>match_right_square(<span class="op">&amp;</span><span class="dv">1</span>))       <span class="co"># &#39;]&#39; にマッチ</span></span>
<span id="cb8-7"><a href="#cb8-7"></a><span class="kw">end</span></span>
<span id="cb8-8"><a href="#cb8-8"></a></span>
<span id="cb8-9"><a href="#cb8-9"></a><span class="kw">defp</span> match_elements(stat <span class="op">=</span> %{<span class="va">result:</span> prev}) <span class="kw">do</span></span>
<span id="cb8-10"><a href="#cb8-10"></a>  match_element(stat)</span>
<span id="cb8-11"><a href="#cb8-11"></a>  <span class="co"># ここで状態(配列)の更新をしてる点だけが違う</span></span>
<span id="cb8-12"><a href="#cb8-12"></a>  <span class="op">|&gt;</span> <span class="cn">Result</span><span class="op">.</span>and_then(<span class="op">&amp;</span>modify_stat(<span class="op">&amp;</span><span class="dv">1</span>, <span class="va">:result</span>, <span class="kw">fn</span> v <span class="op">-&gt;</span> prev <span class="op">++</span> [v] <span class="kw">end</span>))</span>
<span id="cb8-13"><a href="#cb8-13"></a>  <span class="op">|&gt;</span> <span class="cn">Result</span><span class="op">.</span>and_then(<span class="op">&amp;</span>match_elements_tail(<span class="op">&amp;</span><span class="dv">1</span>))</span>
<span id="cb8-14"><a href="#cb8-14"></a><span class="kw">end</span></span>
<span id="cb8-15"><a href="#cb8-15"></a></span>
<span id="cb8-16"><a href="#cb8-16"></a><span class="kw">defp</span> match_elements_tail(stat <span class="op">=</span> %{<span class="va">rest:</span> <span class="st">&quot;,&quot;</span> <span class="op">&lt;&gt;</span> rest}) <span class="kw">do</span></span>
<span id="cb8-17"><a href="#cb8-17"></a>  update_stat(stat, <span class="va">:rest</span>, rest)</span>
<span id="cb8-18"><a href="#cb8-18"></a>  <span class="op">|&gt;</span> <span class="cn">Result</span><span class="op">.</span>and_then(<span class="op">&amp;</span>match_elements(<span class="op">&amp;</span><span class="dv">1</span>))</span>
<span id="cb8-19"><a href="#cb8-19"></a><span class="kw">end</span></span>
<span id="cb8-20"><a href="#cb8-20"></a><span class="kw">defp</span> match_elements_tail(stat), <span class="kw">do</span>: <span class="cn">Result</span><span class="op">.</span>success(stat)</span></code></pre></div>
<h3 id="文字列のパース">文字列のパース</h3>
<p>さぁこっからが大変． 文字列内でのエスケープをそれっぽく処理する必要がある:</p>
<div class="sourceCode" id="cb9"><pre class="sourceCode elixir"><code class="sourceCode elixir"><span id="cb9-1"><a href="#cb9-1"></a><span class="kw">defp</span> match_string(stat) <span class="kw">do</span></span>
<span id="cb9-2"><a href="#cb9-2"></a>  match_double_quote(stat)                          <span class="co"># &#39;&quot;&#39; にマッチ</span></span>
<span id="cb9-3"><a href="#cb9-3"></a>  <span class="op">|&gt;</span> <span class="cn">Result</span><span class="op">.</span>and_then(<span class="op">&amp;</span>update_stat(<span class="op">&amp;</span><span class="dv">1</span>, <span class="va">:result</span>, <span class="st">&quot;&quot;</span>)) <span class="co"># 状態の result を空文字列 &quot;&quot; に更新</span></span>
<span id="cb9-4"><a href="#cb9-4"></a>  <span class="op">|&gt;</span> <span class="cn">Result</span><span class="op">.</span>and_then(<span class="op">&amp;</span>match_characters(<span class="op">&amp;</span><span class="dv">1</span>))</span>
<span id="cb9-5"><a href="#cb9-5"></a>  <span class="op">|&gt;</span> <span class="cn">Result</span><span class="op">.</span>and_then(<span class="op">&amp;</span>match_double_quote(<span class="op">&amp;</span><span class="dv">1</span>))       <span class="co"># &#39;&quot;&#39; にマッチ</span></span>
<span id="cb9-6"><a href="#cb9-6"></a><span class="kw">end</span></span>
<span id="cb9-7"><a href="#cb9-7"></a></span>
<span id="cb9-8"><a href="#cb9-8"></a><span class="co"># どう見ても成功じゃ無いがどーせ後々エラーになるので...</span></span>
<span id="cb9-9"><a href="#cb9-9"></a><span class="kw">defp</span> match_characters(stat <span class="op">=</span> %{<span class="va">rest:</span> <span class="st">&quot;&quot;</span>}), <span class="kw">do</span>: <span class="cn">Result</span><span class="op">.</span>success(stat)</span>
<span id="cb9-10"><a href="#cb9-10"></a></span>
<span id="cb9-11"><a href="#cb9-11"></a><span class="co"># &#39;&quot;&#39; にマッチしたら終わり</span></span>
<span id="cb9-12"><a href="#cb9-12"></a><span class="kw">defp</span> match_characters(stat <span class="op">=</span> %{<span class="va">rest:</span> <span class="st">&quot;\&quot;&quot;</span> <span class="op">&lt;&gt;</span> _}), <span class="kw">do</span>: <span class="cn">Result</span><span class="op">.</span>success(stat)</span>
<span id="cb9-13"><a href="#cb9-13"></a><span class="kw">defp</span> match_characters(stat) <span class="kw">do</span></span>
<span id="cb9-14"><a href="#cb9-14"></a>  <span class="co"># &quot;\&quot; はエスケープ文字として処理する必要があるのでまずはそれ以外</span></span>
<span id="cb9-15"><a href="#cb9-15"></a>  parse_when_unmatch_by(stat, <span class="st">&quot;\\&quot;</span>, <span class="op">&amp;</span>match_noescape_characters(<span class="op">&amp;</span><span class="dv">1</span>))</span>
<span id="cb9-16"><a href="#cb9-16"></a>  <span class="op">|&gt;</span> <span class="cn">Result</span><span class="op">.</span>and_then(<span class="op">&amp;</span>match_escape(<span class="op">&amp;</span><span class="dv">1</span>))     <span class="co"># 次にエスケープ文字の処理</span></span>
<span id="cb9-17"><a href="#cb9-17"></a>  <span class="op">|&gt;</span> <span class="cn">Result</span><span class="op">.</span>and_then(<span class="op">&amp;</span>match_characters(<span class="op">&amp;</span><span class="dv">1</span>)) <span class="co"># 再帰する</span></span>
<span id="cb9-18"><a href="#cb9-18"></a><span class="kw">end</span></span></code></pre></div>
<p>関数名の通り，<code>match_noescape_characters</code> がエスケープ文字以外のパーサーで，<code>match_escape</code> がエスケープ文字のパーサーだ． <code>match_noescape_characters</code> ではまず <code>\</code> や <code>&quot;</code> を含まない文字列をマッチさせたい． しかし，パターンマッチは exclude なマッチはできないので，あんまり良く無いが正規表現でサボることにする:</p>
<div class="sourceCode" id="cb10"><pre class="sourceCode elixir"><code class="sourceCode elixir"><span id="cb10-1"><a href="#cb10-1"></a><span class="co"># エスケープされてない文字はダメっぽい</span></span>
<span id="cb10-2"><a href="#cb10-2"></a><span class="kw">defp</span> match_noescape_characters(stat <span class="op">=</span> %{<span class="va">rest:</span> <span class="st">&quot;\n&quot;</span> <span class="op">&lt;&gt;</span> _}), <span class="kw">do</span>: <span class="cn">Result</span><span class="op">.</span>failure(stat)</span>
<span id="cb10-3"><a href="#cb10-3"></a><span class="kw">defp</span> match_noescape_characters(stat <span class="op">=</span> %{<span class="va">rest:</span> <span class="st">&quot;\t&quot;</span> <span class="op">&lt;&gt;</span> _}), <span class="kw">do</span>: <span class="cn">Result</span><span class="op">.</span>failure(stat)</span>
<span id="cb10-4"><a href="#cb10-4"></a><span class="kw">defp</span> match_noescape_characters(stat <span class="op">=</span> %{<span class="va">rest:</span> <span class="st">&quot;\u0000&quot;</span> <span class="op">&lt;&gt;</span> _}), <span class="kw">do</span>: <span class="cn">Result</span><span class="op">.</span>failure(stat)</span>
<span id="cb10-5"><a href="#cb10-5"></a></span>
<span id="cb10-6"><a href="#cb10-6"></a><span class="kw">defp</span> match_noescape_characters(stat <span class="op">=</span> %{<span class="va">result:</span> prev}) <span class="kw">do</span></span>
<span id="cb10-7"><a href="#cb10-7"></a>  <span class="co"># 名前付きキャプチャ，便利</span></span>
<span id="cb10-8"><a href="#cb10-8"></a>  %{<span class="st">&quot;body&quot;</span> <span class="op">=&gt;</span> body, <span class="st">&quot;rest&quot;</span> <span class="op">=&gt;</span> rest} <span class="op">=</span></span>
<span id="cb10-9"><a href="#cb10-9"></a>    <span class="cn">Regex</span><span class="op">.</span>named_captures(<span class="op">~</span>r<span class="op">/</span>(?<span class="op">&lt;</span>body<span class="op">&gt;</span>[<span class="op">^</span>\\\<span class="st">&quot;\n\x00\t]*)(?&lt;rest&gt;.*)/s, stat[:rest])</span></span>
<span id="cb10-10"><a href="#cb10-10"></a></span>
<span id="cb10-11"><a href="#cb10-11"></a><span class="st">  update_stat(%{result: prev &lt;&gt; body}, :rest, rest)</span></span>
<span id="cb10-12"><a href="#cb10-12"></a><span class="st">end</span></span></code></pre></div>
<p>エスケープ文字は，もうパターンマッチで頑張る:</p>
<div class="sourceCode" id="cb11"><pre class="sourceCode elixir"><code class="sourceCode elixir"><span id="cb11-1"><a href="#cb11-1"></a><span class="kw">defp</span> match_escape(%{<span class="va">rest:</span> <span class="st">&quot;\\\&quot;&quot;</span> <span class="op">&lt;&gt;</span> rest, <span class="va">result:</span> prev}),</span>
<span id="cb11-2"><a href="#cb11-2"></a>  <span class="kw">do</span>: update_stat(%{<span class="va">result:</span> prev <span class="op">&lt;&gt;</span> <span class="st">&quot;\&quot;&quot;</span>}, <span class="va">:rest</span>, rest)</span>
<span id="cb11-3"><a href="#cb11-3"></a></span>
<span id="cb11-4"><a href="#cb11-4"></a><span class="kw">defp</span> match_escape(%{<span class="va">rest:</span> <span class="st">&quot;\\\\&quot;</span> <span class="op">&lt;&gt;</span> rest, <span class="va">result:</span> prev}),</span>
<span id="cb11-5"><a href="#cb11-5"></a>  <span class="kw">do</span>: update_stat(%{<span class="va">result:</span> prev <span class="op">&lt;&gt;</span> <span class="st">&quot;\\&quot;</span>}, <span class="va">:rest</span>, rest)</span>
<span id="cb11-6"><a href="#cb11-6"></a></span>
<span id="cb11-7"><a href="#cb11-7"></a><span class="kw">defp</span> match_escape(%{<span class="va">rest:</span> <span class="st">&quot;\\\/&quot;</span> <span class="op">&lt;&gt;</span> rest, <span class="va">result:</span> prev}),</span>
<span id="cb11-8"><a href="#cb11-8"></a>  <span class="kw">do</span>: update_stat(%{<span class="va">result:</span> prev <span class="op">&lt;&gt;</span> <span class="st">&quot;\/&quot;</span>}, <span class="va">:rest</span>, rest)</span>
<span id="cb11-9"><a href="#cb11-9"></a></span>
<span id="cb11-10"><a href="#cb11-10"></a><span class="kw">defp</span> match_escape(%{<span class="va">rest:</span> <span class="st">&quot;\\b&quot;</span> <span class="op">&lt;&gt;</span> rest, <span class="va">result:</span> prev}),</span>
<span id="cb11-11"><a href="#cb11-11"></a>  <span class="kw">do</span>: update_stat(%{<span class="va">result:</span> prev <span class="op">&lt;&gt;</span> <span class="st">&quot;\b&quot;</span>}, <span class="va">:rest</span>, rest)</span>
<span id="cb11-12"><a href="#cb11-12"></a></span>
<span id="cb11-13"><a href="#cb11-13"></a><span class="kw">defp</span> match_escape(%{<span class="va">rest:</span> <span class="st">&quot;\\f&quot;</span> <span class="op">&lt;&gt;</span> rest, <span class="va">result:</span> prev}),</span>
<span id="cb11-14"><a href="#cb11-14"></a>  <span class="kw">do</span>: update_stat(%{<span class="va">result:</span> prev <span class="op">&lt;&gt;</span> <span class="st">&quot;\f&quot;</span>}, <span class="va">:rest</span>, rest)</span>
<span id="cb11-15"><a href="#cb11-15"></a></span>
<span id="cb11-16"><a href="#cb11-16"></a><span class="kw">defp</span> match_escape(%{<span class="va">rest:</span> <span class="st">&quot;\\n&quot;</span> <span class="op">&lt;&gt;</span> rest, <span class="va">result:</span> prev}),</span>
<span id="cb11-17"><a href="#cb11-17"></a>  <span class="kw">do</span>: update_stat(%{<span class="va">result:</span> prev <span class="op">&lt;&gt;</span> <span class="st">&quot;\n&quot;</span>}, <span class="va">:rest</span>, rest)</span>
<span id="cb11-18"><a href="#cb11-18"></a></span>
<span id="cb11-19"><a href="#cb11-19"></a><span class="kw">defp</span> match_escape(%{<span class="va">rest:</span> <span class="st">&quot;\\r&quot;</span> <span class="op">&lt;&gt;</span> rest, <span class="va">result:</span> prev}),</span>
<span id="cb11-20"><a href="#cb11-20"></a>  <span class="kw">do</span>: update_stat(%{<span class="va">result:</span> prev <span class="op">&lt;&gt;</span> <span class="st">&quot;\r&quot;</span>}, <span class="va">:rest</span>, rest)</span>
<span id="cb11-21"><a href="#cb11-21"></a></span>
<span id="cb11-22"><a href="#cb11-22"></a><span class="kw">defp</span> match_escape(%{<span class="va">rest:</span> <span class="st">&quot;\\t&quot;</span> <span class="op">&lt;&gt;</span> rest, <span class="va">result:</span> prev}),</span>
<span id="cb11-23"><a href="#cb11-23"></a>  <span class="kw">do</span>: update_stat(%{<span class="va">result:</span> prev <span class="op">&lt;&gt;</span> <span class="st">&quot;\t&quot;</span>}, <span class="va">:rest</span>, rest)</span>
<span id="cb11-24"><a href="#cb11-24"></a></span>
<span id="cb11-25"><a href="#cb11-25"></a><span class="co"># \u1234 とかいうやつ</span></span>
<span id="cb11-26"><a href="#cb11-26"></a><span class="kw">defp</span> match_escape(stat <span class="op">=</span> %{<span class="va">rest:</span> <span class="st">&quot;\\u&quot;</span> <span class="op">&lt;&gt;</span> rest, <span class="va">result:</span> prev}) <span class="kw">do</span></span>
<span id="cb11-27"><a href="#cb11-27"></a>  <span class="co"># /.{n,m}/ で n 個以上 m 個以下にマッチする</span></span>
<span id="cb11-28"><a href="#cb11-28"></a>  <span class="kw">case</span> <span class="cn">Regex</span><span class="op">.</span>named_captures(<span class="op">~</span>r<span class="op">/</span>(?<span class="op">&lt;</span>body<span class="op">&gt;</span>[\dA<span class="op">-</span><span class="cn">Fa</span><span class="op">-</span>f]{<span class="dv">4</span>,<span class="dv">4</span>})(?<span class="op">&lt;</span>rest<span class="op">&gt;.*</span>)<span class="op">/</span>s, rest) <span class="kw">do</span></span>
<span id="cb11-29"><a href="#cb11-29"></a>    %{<span class="st">&quot;body&quot;</span> <span class="op">=&gt;</span> body, <span class="st">&quot;rest&quot;</span> <span class="op">=&gt;</span> rest} <span class="op">-&gt;</span></span>
<span id="cb11-30"><a href="#cb11-30"></a>      <span class="co"># 4桁の16進数をエスケープされた文字列として変換する</span></span>
<span id="cb11-31"><a href="#cb11-31"></a>      <span class="co"># 変換できなかった場合は nil が返ってくる</span></span>
<span id="cb11-32"><a href="#cb11-32"></a>      <span class="kw">case</span> hex_to_string(body) <span class="kw">do</span></span>
<span id="cb11-33"><a href="#cb11-33"></a>        <span class="cn">nil</span> <span class="op">-&gt;</span> <span class="cn">Result</span><span class="op">.</span>failure(stat)</span>
<span id="cb11-34"><a href="#cb11-34"></a>        hex <span class="op">-&gt;</span> update_stat(%{<span class="va">result:</span> prev <span class="op">&lt;&gt;</span> hex}, <span class="va">:rest</span>, rest)</span>
<span id="cb11-35"><a href="#cb11-35"></a>      <span class="kw">end</span></span>
<span id="cb11-36"><a href="#cb11-36"></a></span>
<span id="cb11-37"><a href="#cb11-37"></a>    _ <span class="op">-&gt;</span></span>
<span id="cb11-38"><a href="#cb11-38"></a>      <span class="cn">Result</span><span class="op">.</span>failure(stat)</span>
<span id="cb11-39"><a href="#cb11-39"></a>  <span class="kw">end</span></span>
<span id="cb11-40"><a href="#cb11-40"></a><span class="kw">end</span></span>
<span id="cb11-41"><a href="#cb11-41"></a></span>
<span id="cb11-42"><a href="#cb11-42"></a><span class="kw">defp</span> hex_to_string(str) <span class="kw">do</span></span>
<span id="cb11-43"><a href="#cb11-43"></a>  <span class="cf">try</span> <span class="kw">do</span></span>
<span id="cb11-44"><a href="#cb11-44"></a>    <span class="co"># 文字列を16進数として int 型に変換</span></span>
<span id="cb11-45"><a href="#cb11-45"></a>    {hex, _} <span class="op">=</span> <span class="cn">Integer</span><span class="op">.</span>parse(str, <span class="dv">16</span>)</span>
<span id="cb11-46"><a href="#cb11-46"></a>    <span class="op">&lt;&lt;</span><span class="va">hex::utf8</span><span class="op">&gt;&gt;</span> <span class="co"># こういう記法で int を16進数でエスケープされた文字列に変換できる</span></span>
<span id="cb11-47"><a href="#cb11-47"></a>  <span class="cf">rescue</span></span>
<span id="cb11-48"><a href="#cb11-48"></a>    _ <span class="op">-&gt;</span> <span class="cn">nil</span></span>
<span id="cb11-49"><a href="#cb11-49"></a>  <span class="kw">end</span></span>
<span id="cb11-50"><a href="#cb11-50"></a><span class="kw">end</span></span></code></pre></div>
<p>まぁ正直，色々と雑で漏れてるケースもきっとあるのだが，そんな変な JSON をパースしたいわけでは無いのでこれでいいかな．</p>
<h3 id="数値のパース">数値のパース</h3>
<p>数値は，マイナス符号・整数・浮動小数点数・<code>e</code>記法を網羅する必要がある． これも，めんどくさいので正規表現に頼っちゃう:</p>
<div class="sourceCode" id="cb12"><pre class="sourceCode elixir"><code class="sourceCode elixir"><span id="cb12-1"><a href="#cb12-1"></a><span class="kw">defp</span> match_number(stat) <span class="kw">do</span></span>
<span id="cb12-2"><a href="#cb12-2"></a>  {value, rest} <span class="op">=</span> compile_number(stat[<span class="va">:rest</span>])</span>
<span id="cb12-3"><a href="#cb12-3"></a></span>
<span id="cb12-4"><a href="#cb12-4"></a>  <span class="co"># 文字列から数値を取得できなかった場合は nil が返ってくる</span></span>
<span id="cb12-5"><a href="#cb12-5"></a>  <span class="kw">case</span> value <span class="kw">do</span></span>
<span id="cb12-6"><a href="#cb12-6"></a>    <span class="cn">nil</span> <span class="op">-&gt;</span></span>
<span id="cb12-7"><a href="#cb12-7"></a>      <span class="cn">Result</span><span class="op">.</span>failure(stat)</span>
<span id="cb12-8"><a href="#cb12-8"></a></span>
<span id="cb12-9"><a href="#cb12-9"></a>    _ <span class="op">-&gt;</span></span>
<span id="cb12-10"><a href="#cb12-10"></a>      <span class="cn">Map</span><span class="op">.</span>put(stat, <span class="va">:result</span>, value)</span>
<span id="cb12-11"><a href="#cb12-11"></a>      <span class="op">|&gt;</span> <span class="cn">Map</span><span class="op">.</span>put(<span class="va">:rest</span>, rest)</span>
<span id="cb12-12"><a href="#cb12-12"></a>      <span class="op">|&gt;</span> <span class="cn">Result</span><span class="op">.</span>success()</span>
<span id="cb12-13"><a href="#cb12-13"></a>  <span class="kw">end</span></span>
<span id="cb12-14"><a href="#cb12-14"></a><span class="kw">end</span></span>
<span id="cb12-15"><a href="#cb12-15"></a></span>
<span id="cb12-16"><a href="#cb12-16"></a><span class="kw">def</span> compile_number(str) <span class="kw">do</span></span>
<span id="cb12-17"><a href="#cb12-17"></a>  <span class="co"># 名前付きキャプチャ，超便利</span></span>
<span id="cb12-18"><a href="#cb12-18"></a>  <span class="co"># minus は `-`，digit は整数部，frac は小数点以下，exp は `e`記法 (`10e-2`とか)</span></span>
<span id="cb12-19"><a href="#cb12-19"></a>  %{<span class="st">&quot;minus&quot;</span> <span class="op">=&gt;</span> minus, <span class="st">&quot;digit&quot;</span> <span class="op">=&gt;</span> digit, <span class="st">&quot;frac&quot;</span> <span class="op">=&gt;</span> frac, <span class="st">&quot;exp&quot;</span> <span class="op">=&gt;</span> exp, <span class="st">&quot;rest&quot;</span> <span class="op">=&gt;</span> rest} <span class="op">=</span></span>
<span id="cb12-20"><a href="#cb12-20"></a>    <span class="cn">Regex</span><span class="op">.</span>named_captures(</span>
<span id="cb12-21"><a href="#cb12-21"></a>      <span class="op">~</span>r<span class="op">/</span>(?<span class="op">&lt;</span>minus<span class="op">&gt;-</span>?)(?<span class="op">&lt;</span>digit<span class="op">&gt;</span>[[<span class="va">:digit</span>:]]<span class="op">*</span>)(?<span class="op">&lt;</span>frac<span class="op">&gt;</span>\<span class="op">.</span>?[[<span class="va">:digit</span>:]]<span class="op">*</span>)(?<span class="op">&lt;</span>exp<span class="op">&gt;</span>[eE]?[<span class="op">-+</span>]?[[<span class="va">:digit</span>:]]<span class="op">*</span>)(?<span class="op">&lt;</span>rest<span class="op">&gt;.*</span>)<span class="op">/</span>s,</span>
<span id="cb12-22"><a href="#cb12-22"></a>      str</span>
<span id="cb12-23"><a href="#cb12-23"></a>    )</span>
<span id="cb12-24"><a href="#cb12-24"></a></span>
<span id="cb12-25"><a href="#cb12-25"></a>  value <span class="op">=</span></span>
<span id="cb12-26"><a href="#cb12-26"></a>    <span class="kw">case</span> {digit, frac, exp} <span class="kw">do</span></span>
<span id="cb12-27"><a href="#cb12-27"></a>      {<span class="st">&quot;&quot;</span>, _, _} <span class="op">-&gt;</span></span>
<span id="cb12-28"><a href="#cb12-28"></a>        <span class="cn">nil</span> <span class="co"># 整数部が無い場合はダメ</span></span>
<span id="cb12-29"><a href="#cb12-29"></a></span>
<span id="cb12-30"><a href="#cb12-30"></a>      {<span class="st">&quot;0&quot;</span> <span class="op">&lt;&gt;</span> num, <span class="st">&quot;&quot;</span>, <span class="st">&quot;&quot;</span>} <span class="kw">when</span> num<span class="op"> !=</span> <span class="st">&quot;&quot;</span> <span class="op">-&gt;</span></span>
<span id="cb12-31"><a href="#cb12-31"></a>        <span class="cn">nil</span> <span class="co"># 0 から始まる整数もダメ(小数はOK)</span></span>
<span id="cb12-32"><a href="#cb12-32"></a></span>
<span id="cb12-33"><a href="#cb12-33"></a>      {_, <span class="st">&quot;.&quot;</span> <span class="op">&lt;&gt;</span> num, _} <span class="kw">when</span> num <span class="op">==</span> <span class="st">&quot;&quot;</span> <span class="op">-&gt;</span></span>
<span id="cb12-34"><a href="#cb12-34"></a>        <span class="cn">nil</span> <span class="co"># 小数点だけはダメ</span></span>
<span id="cb12-35"><a href="#cb12-35"></a></span>
<span id="cb12-36"><a href="#cb12-36"></a>      {_, _, <span class="st">&quot;e&quot;</span> <span class="op">&lt;&gt;</span> num} <span class="kw">when</span> num <span class="op">==</span> <span class="st">&quot;&quot;</span> <span class="op">-&gt;</span></span>
<span id="cb12-37"><a href="#cb12-37"></a>        <span class="cn">nil</span> <span class="co"># e だけはダメ</span></span>
<span id="cb12-38"><a href="#cb12-38"></a></span>
<span id="cb12-39"><a href="#cb12-39"></a>      {_, _, <span class="st">&quot;E&quot;</span> <span class="op">&lt;&gt;</span> num} <span class="kw">when</span> num <span class="op">==</span> <span class="st">&quot;&quot;</span> <span class="op">-&gt;</span></span>
<span id="cb12-40"><a href="#cb12-40"></a>        <span class="cn">nil</span> <span class="co"># E だけはダメ</span></span>
<span id="cb12-41"><a href="#cb12-41"></a></span>
<span id="cb12-42"><a href="#cb12-42"></a>      {_, <span class="st">&quot;&quot;</span>, <span class="st">&quot;&quot;</span>} <span class="op">-&gt;</span> <span class="co"># これは整数の場合</span></span>
<span id="cb12-43"><a href="#cb12-43"></a>        <span class="kw">case</span> <span class="cn">Integer</span><span class="op">.</span>parse(minus <span class="op">&lt;&gt;</span> digit) <span class="kw">do</span></span>
<span id="cb12-44"><a href="#cb12-44"></a>          {num, <span class="st">&quot;&quot;</span>} <span class="op">-&gt;</span> num</span>
<span id="cb12-45"><a href="#cb12-45"></a>          _ <span class="op">-&gt;</span> <span class="cn">nil</span></span>
<span id="cb12-46"><a href="#cb12-46"></a>        <span class="kw">end</span></span>
<span id="cb12-47"><a href="#cb12-47"></a></span>
<span id="cb12-48"><a href="#cb12-48"></a>      _ <span class="op">-&gt;</span> <span class="co"># これは浮動小数点数の場合</span></span>
<span id="cb12-49"><a href="#cb12-49"></a>        <span class="kw">case</span> <span class="cn">Float</span><span class="op">.</span>parse(minus <span class="op">&lt;&gt;</span> digit <span class="op">&lt;&gt;</span> frac <span class="op">&lt;&gt;</span> exp) <span class="kw">do</span></span>
<span id="cb12-50"><a href="#cb12-50"></a>          {num, <span class="st">&quot;&quot;</span>} <span class="op">-&gt;</span> num</span>
<span id="cb12-51"><a href="#cb12-51"></a>          _ <span class="op">-&gt;</span> <span class="cn">nil</span></span>
<span id="cb12-52"><a href="#cb12-52"></a>        <span class="kw">end</span></span>
<span id="cb12-53"><a href="#cb12-53"></a>    <span class="kw">end</span></span>
<span id="cb12-54"><a href="#cb12-54"></a></span>
<span id="cb12-55"><a href="#cb12-55"></a>  {value, rest}</span>
<span id="cb12-56"><a href="#cb12-56"></a><span class="kw">end</span></span></code></pre></div>
<p>これでとりあえず完成．</p>
<h2 id="テストする">テストする</h2>
<p>JSON のテストスイートとして <a href="https://github.com/nst/JSONTestSuite">nst/JSONTestSuite</a> と言うのがあるので使わせてもらう． こんな感じに配置する:</p>
<div class="sourceCode" id="cb13"><pre class="sourceCode txt"><code class="sourceCode default"><span id="cb13-1"><a href="#cb13-1"></a>\</span>
<span id="cb13-2"><a href="#cb13-2"></a>|- lib // elixir のコード置き場</span>
<span id="cb13-3"><a href="#cb13-3"></a>|- test</span>
<span id="cb13-4"><a href="#cb13-4"></a>|  |- fixture</span>
<span id="cb13-5"><a href="#cb13-5"></a>|  |  \- test_parsing // JSONTestSuite のテスト用 JSON ファイル群</span>
<span id="cb13-6"><a href="#cb13-6"></a>|  \- json_spec.exs</span>
<span id="cb13-7"><a href="#cb13-7"></a>\- mix.exs</span></code></pre></div>
<p>テストには espec を使ってこんな感じに記述した:</p>
<div class="sourceCode" id="cb14"><pre class="sourceCode elixir"><code class="sourceCode elixir"><span id="cb14-1"><a href="#cb14-1"></a><span class="co"># json_spec.exs</span></span>
<span id="cb14-2"><a href="#cb14-2"></a><span class="kw">defmodule</span> <span class="cn">JSONSuite</span> <span class="kw">do</span></span>
<span id="cb14-3"><a href="#cb14-3"></a>  <span class="kw">def</span> test_suite <span class="kw">do</span></span>
<span id="cb14-4"><a href="#cb14-4"></a>    [</span>
<span id="cb14-5"><a href="#cb14-5"></a>      <span class="co"># エラーケース</span></span>
<span id="cb14-6"><a href="#cb14-6"></a>      {<span class="st">&quot;n_array_1_true_without_comma.json&quot;</span>, {<span class="va">:error</span>, <span class="cn">nil</span>}},</span>
<span id="cb14-7"><a href="#cb14-7"></a>      {<span class="st">&quot;n_array_a_invalid_utf8.json&quot;</span>, {<span class="va">:error</span>, <span class="cn">nil</span>}},</span>
<span id="cb14-8"><a href="#cb14-8"></a>      <span class="op">...</span></span>
<span id="cb14-9"><a href="#cb14-9"></a>      <span class="co"># 成功ケース</span></span>
<span id="cb14-10"><a href="#cb14-10"></a>      {<span class="st">&quot;y_array_arraysWithSpaces.json&quot;</span>, {<span class="va">:ok</span>, [[]]}},</span>
<span id="cb14-11"><a href="#cb14-11"></a>      {<span class="st">&quot;y_array_empty-string.json&quot;</span>, {<span class="va">:ok</span>, [<span class="st">&quot;&quot;</span>]}},</span>
<span id="cb14-12"><a href="#cb14-12"></a>      <span class="op">...</span></span>
<span id="cb14-13"><a href="#cb14-13"></a>    ]</span>
<span id="cb14-14"><a href="#cb14-14"></a>  <span class="kw">end</span></span>
<span id="cb14-15"><a href="#cb14-15"></a><span class="kw">end</span></span>
<span id="cb14-16"><a href="#cb14-16"></a></span>
<span id="cb14-17"><a href="#cb14-17"></a><span class="co"># JSONSuite を先に宣言しないと使えなかった</span></span>
<span id="cb14-18"><a href="#cb14-18"></a><span class="kw">defmodule</span> <span class="cn">JSONSpec</span> <span class="kw">do</span></span>
<span id="cb14-19"><a href="#cb14-19"></a>  <span class="im">use</span> <span class="cn">ESpec</span></span>
<span id="cb14-20"><a href="#cb14-20"></a>  <span class="im">alias</span> <span class="cn">ThankYouStars</span><span class="op">.</span><span class="cn">JSON</span>, <span class="va">as:</span> <span class="cn">JSON</span></span>
<span id="cb14-21"><a href="#cb14-21"></a>  <span class="im">alias</span> <span class="cn">ThankYouStars</span><span class="op">.</span><span class="cn">Result</span>, <span class="va">as:</span> <span class="cn">Result</span></span>
<span id="cb14-22"><a href="#cb14-22"></a></span>
<span id="cb14-23"><a href="#cb14-23"></a>  describe <span class="st">&quot;JSON.decode&quot;</span> <span class="kw">do</span></span>
<span id="cb14-24"><a href="#cb14-24"></a>    <span class="cn">Enum</span><span class="op">.</span>map(<span class="cn">JSONSuite</span><span class="op">.</span>test_suite(), <span class="kw">fn</span> {path, result} <span class="op">-&gt;</span></span>
<span id="cb14-25"><a href="#cb14-25"></a>      context path <span class="kw">do</span></span>
<span id="cb14-26"><a href="#cb14-26"></a>        <span class="co"># 変数を利用するには unquote する必要がある(マクロのせい？)</span></span>
<span id="cb14-27"><a href="#cb14-27"></a>        let(<span class="va">:json</span>, <span class="kw">do</span>: <span class="cn">File</span><span class="op">.</span>read!(<span class="st">&quot;test/fixture/test_parsing/</span><span class="ot">#{</span><span class="kw">unquote</span>(path)<span class="ot">}</span><span class="st">&quot;</span>))</span>
<span id="cb14-28"><a href="#cb14-28"></a>        it(</span>
<span id="cb14-29"><a href="#cb14-29"></a>          <span class="kw">do</span>:</span>
<span id="cb14-30"><a href="#cb14-30"></a>            <span class="cn">Result</span><span class="op">.</span>map_error(<span class="cn">JSON</span><span class="op">.</span>decode(json()), <span class="kw">fn</span> _ <span class="op">-&gt;</span> <span class="cn">nil</span> <span class="kw">end</span>)</span>
<span id="cb14-31"><a href="#cb14-31"></a>            <span class="op">|&gt;</span> to(eq(<span class="kw">unquote</span>(<span class="cn">Macro</span><span class="op">.</span>escape(result))))</span>
<span id="cb14-32"><a href="#cb14-32"></a>        )</span>
<span id="cb14-33"><a href="#cb14-33"></a>      <span class="kw">end</span></span>
<span id="cb14-34"><a href="#cb14-34"></a>    <span class="kw">end</span>)</span>
<span id="cb14-35"><a href="#cb14-35"></a>  <span class="kw">end</span></span>
<span id="cb14-36"><a href="#cb14-36"></a><span class="kw">end</span></span></code></pre></div>
<p><code>unquote</code> やらモジュールの順序周りやら結構苦労した． なお，いくつかテストの通らない JSONTestSuite のケースがあるので，そう言うのはとりあえずコメントアウトしてる．</p>
<h2 id="おしまい">おしまい</h2>
<p>意外と綺麗にかけて満足． なお，パフォーマンスは無視してる笑．</p>
  </div>]]></summary>
</entry>
<entry>
    <title>Elm で作る TaPL のラムダ計算（その３）</title>
    <link href="https://matsubara0507.github.io/posts/2019-12-10-tapl-with-elm-part3.html" />
    <id>https://matsubara0507.github.io/posts/2019-12-10-tapl-with-elm-part3.html</id>
    <published>2019-12-10T00:00:00Z</published>
    <updated>2019-12-10T00:00:00Z</updated>
    <summary type="html"><![CDATA[<div class="post-content" itemprop="articleBody">
    <p>本記事は「<a href="https://adventar.org/calendars/4212">IGGG Advent Calendar 2019</a>」の10日目の記事です．</p>
<h1 id="section"></h1>
<p>表題の通り，TaPL という書籍で紹介されているプログラミング言語の実装例を Elm でやってみたという話です（その３）． <a href="https://matsubara0507.github.io/posts/2019-12-06-tapl-with-elm-part1.html">その１</a>と<a href="https://matsubara0507.github.io/posts/2019-12-07-tapl-with-elm-part2.html">その２</a>はこちら．</p>
<ul>
<li>第4章 算術式のML実装</li>
<li>第7章 ラムダ計算の ML 実装</li>
<li>第10章 単純型のML実装 (本記事はココ)
<ul>
<li>7章のを型付きラムダ計算にする</li>
</ul></li>
<li>第17章 部分型付けの ML 実装</li>
<li>第25章 System F の ML 実装
<ul>
<li>最後に型の多相性を追加</li>
</ul></li>
</ul>
<p>実装は全て下記のリポジトリにあげています:</p>
<ul>
<li><a href="https://github.com/matsubara0507/ELaMbda">matsubara0507/ELaMbda - GitHub</a></li>
</ul>
<p>また，今まで同様に<a href="https://matsubara0507.github.io/ELaMbda/?chap=chap10">Web ブラウザから遊べるようになってます</a>．</p>
<p><a href="https://matsubara0507.github.io/ELaMbda/?chap=chap10&amp;exp=(\x%20:%20Bool%20.%20if%20x%20then%20x%20else%20(\f%20:%20Bool%20-%3E%20Bool%20-%3E%20Bool%20.%20f%20x%20x)%20(\x%20:%20Bool%20.%20\y%20:%20Bool%20.%20y))%20(if%20true%20then%20false%20else%20true)"><img src="/assets/tapl-with-elm/chap10.jpg"></img></a></p>
<h2 id="第10章-単純型の-ml-実装">第10章 単純型の ML 実装</h2>
<p>さて，いよいよみんな大好き「型」の登場だ． 10章は少し面白くて，4章で実装した算術式の真偽値に関する部分と7章の型なしラムダ計算を組み合わせて，更にそれに型をのせるプログラミング言語を実装する． つまり，今までの実装をちゃんとやっていれば割とサクッとできています．</p>
<h1 id="section-1"></h1>
<p>なお，同期各位は全然やらなかったせいか10章を5週ぐらいやっている笑．</p>
<h3 id="構文規則">構文規則</h3>
<div class="sourceCode" id="cb1"><pre class="sourceCode txt"><code class="sourceCode default"><span id="cb1-1"><a href="#cb1-1"></a>t := x       [変数]</span>
<span id="cb1-2"><a href="#cb1-2"></a>   | \x:T.t  [ラムダ抽象]</span>
<span id="cb1-3"><a href="#cb1-3"></a>   | t t     [関数適用]</span>
<span id="cb1-4"><a href="#cb1-4"></a>   | true</span>
<span id="cb1-5"><a href="#cb1-5"></a>   | false</span>
<span id="cb1-6"><a href="#cb1-6"></a>   | if t then t else t</span>
<span id="cb1-7"><a href="#cb1-7"></a></span>
<span id="cb1-8"><a href="#cb1-8"></a>v := \x:T.t</span>
<span id="cb1-9"><a href="#cb1-9"></a>   | true</span>
<span id="cb1-10"><a href="#cb1-10"></a>   | false</span>
<span id="cb1-11"><a href="#cb1-11"></a></span>
<span id="cb1-12"><a href="#cb1-12"></a>T := Bool    [真偽値型]</span>
<span id="cb1-13"><a href="#cb1-13"></a>   | T -&gt; T  [関数型]</span></code></pre></div>
<p>ラムダ抽象には型注釈(<code>:T</code> の部分)がある． なんで付けるのかとかは9章に書いてあるのでぜひ TaPL を買って読んでください(おい)． これを Elm の型として実装する:</p>
<div class="sourceCode" id="cb2"><pre class="sourceCode elm"><code class="sourceCode elm"><span id="cb2-1"><a href="#cb2-1"></a><span class="kw">type</span> <span class="dt">Term</span></span>
<span id="cb2-2"><a href="#cb2-2"></a>    <span class="op">=</span> <span class="dt">TmVar</span> <span class="dt">Int</span> <span class="dt">Int</span></span>
<span id="cb2-3"><a href="#cb2-3"></a>    <span class="op">|</span> <span class="dt">TmAbs</span> <span class="dt">String</span> <span class="dt">Ty</span> <span class="dt">Term</span></span>
<span id="cb2-4"><a href="#cb2-4"></a>    <span class="op">|</span> <span class="dt">TmApp</span> <span class="dt">Term</span> <span class="dt">Term</span></span>
<span id="cb2-5"><a href="#cb2-5"></a>    <span class="op">|</span> <span class="dt">TmTrue</span></span>
<span id="cb2-6"><a href="#cb2-6"></a>    <span class="op">|</span> <span class="dt">TmFalse</span></span>
<span id="cb2-7"><a href="#cb2-7"></a>    <span class="op">|</span> <span class="dt">TmIf</span> <span class="dt">Term</span> <span class="dt">Term</span> <span class="dt">Term</span></span>
<span id="cb2-8"><a href="#cb2-8"></a></span>
<span id="cb2-9"><a href="#cb2-9"></a><span class="kw">type</span> <span class="dt">Ty</span></span>
<span id="cb2-10"><a href="#cb2-10"></a>    <span class="op">=</span> <span class="dt">TyArr</span> <span class="dt">Ty</span> <span class="dt">Ty</span> <span class="co">-- Arrow の Arr ね</span></span>
<span id="cb2-11"><a href="#cb2-11"></a>    <span class="op">|</span> <span class="dt">TyBool</span></span>
<span id="cb2-12"><a href="#cb2-12"></a></span>
<span id="cb2-13"><a href="#cb2-13"></a><span class="fu">isval</span> : <span class="dt">Context</span> <span class="op">-&gt;</span> <span class="dt">Term</span> <span class="op">-&gt;</span> <span class="dt">Bool</span></span>
<span id="cb2-14"><a href="#cb2-14"></a><span class="fu">isval</span> <span class="fu">_</span> <span class="fu">t</span> <span class="op">=</span></span>
<span id="cb2-15"><a href="#cb2-15"></a>    <span class="cf">case</span> <span class="fu">t</span> <span class="cf">of</span></span>
<span id="cb2-16"><a href="#cb2-16"></a>        <span class="dt">TmAbs</span> <span class="fu">_</span> <span class="fu">_</span> <span class="fu">_</span> <span class="op">-&gt;</span></span>
<span id="cb2-17"><a href="#cb2-17"></a>            <span class="dt">True</span></span>
<span id="cb2-18"><a href="#cb2-18"></a></span>
<span id="cb2-19"><a href="#cb2-19"></a>        <span class="dt">TmTrue</span> <span class="op">-&gt;</span></span>
<span id="cb2-20"><a href="#cb2-20"></a>            <span class="dt">True</span></span>
<span id="cb2-21"><a href="#cb2-21"></a></span>
<span id="cb2-22"><a href="#cb2-22"></a>        <span class="dt">TmFalse</span> <span class="op">-&gt;</span></span>
<span id="cb2-23"><a href="#cb2-23"></a>            <span class="dt">True</span></span>
<span id="cb2-24"><a href="#cb2-24"></a></span>
<span id="cb2-25"><a href="#cb2-25"></a>        <span class="fu">_</span> <span class="op">-&gt;</span></span>
<span id="cb2-26"><a href="#cb2-26"></a>            <span class="dt">False</span></span>
<span id="cb2-27"><a href="#cb2-27"></a></span>
<span id="cb2-28"><a href="#cb2-28"></a><span class="kw">type</span> <span class="kw">alias</span> <span class="dt">Context</span> <span class="op">=</span> <span class="dt">List</span> ( <span class="dt">String</span><span class="op">,</span> <span class="dt">Binding</span> )</span>
<span id="cb2-29"><a href="#cb2-29"></a><span class="kw">type</span> <span class="dt">Binding</span> <span class="op">=</span> <span class="dt">NameBind</span></span></code></pre></div>
<p>型の型 <code>Ty</code> 以外は，4章と7章の <code>Term</code> や <code>isval</code> を合体させているだけだ．</p>
<h3 id="評価規則">評価規則</h3>
<div class="sourceCode" id="cb3"><pre class="sourceCode txt"><code class="sourceCode default"><span id="cb3-1"><a href="#cb3-1"></a>// 7章の評価規則</span>
<span id="cb3-2"><a href="#cb3-2"></a> t1 =&gt; t1&#39;</span>
<span id="cb3-3"><a href="#cb3-3"></a>---------------</span>
<span id="cb3-4"><a href="#cb3-4"></a> t1 t2 =&gt; t1&#39; t2</span>
<span id="cb3-5"><a href="#cb3-5"></a></span>
<span id="cb3-6"><a href="#cb3-6"></a> t2 =&gt; t2&#39;</span>
<span id="cb3-7"><a href="#cb3-7"></a>---------------</span>
<span id="cb3-8"><a href="#cb3-8"></a> v1 t2 =&gt; v1 t2&#39;</span>
<span id="cb3-9"><a href="#cb3-9"></a></span>
<span id="cb3-10"><a href="#cb3-10"></a> (\x:T.t12) v2 -&gt; [x|-&gt; v2]t12</span>
<span id="cb3-11"><a href="#cb3-11"></a></span>
<span id="cb3-12"><a href="#cb3-12"></a>// 4章の評価規則</span>
<span id="cb3-13"><a href="#cb3-13"></a> if true then t2 else t3 =&gt; t2</span>
<span id="cb3-14"><a href="#cb3-14"></a></span>
<span id="cb3-15"><a href="#cb3-15"></a> if false then t2 else t3 =&gt; t3</span>
<span id="cb3-16"><a href="#cb3-16"></a></span>
<span id="cb3-17"><a href="#cb3-17"></a> t1 -&gt; t1&#39;</span>
<span id="cb3-18"><a href="#cb3-18"></a>-------------------------------------------------</span>
<span id="cb3-19"><a href="#cb3-19"></a> if t1 then t2 else t3 =&gt; if t1&#39; then t2 else t3</span></code></pre></div>
<p>評価規則も同様に型注釈の構文が追加されただけでほとんど変わらない． 変わらないということはすなわち，実行時(評価)には型の有無は影響しないということだ． 構文規則同様，4章と7章の実装を組み合わせることで実装が終わる:</p>
<div class="sourceCode" id="cb4"><pre class="sourceCode elm"><code class="sourceCode elm"><span id="cb4-1"><a href="#cb4-1"></a><span class="fu">eval</span> : <span class="dt">Context</span> <span class="op">-&gt;</span> <span class="dt">Term</span> <span class="op">-&gt;</span> <span class="dt">Maybe</span> <span class="dt">Term</span></span>
<span id="cb4-2"><a href="#cb4-2"></a><span class="fu">eval</span> <span class="fu">ctx</span> <span class="fu">t</span> <span class="op">=</span></span>
<span id="cb4-3"><a href="#cb4-3"></a>    <span class="cf">if</span> <span class="fu">isval</span> <span class="fu">ctx</span> <span class="fu">t</span> <span class="cf">then</span></span>
<span id="cb4-4"><a href="#cb4-4"></a>        <span class="dt">Just</span> <span class="fu">t</span></span>
<span id="cb4-5"><a href="#cb4-5"></a>    <span class="cf">else</span></span>
<span id="cb4-6"><a href="#cb4-6"></a>        <span class="dt">Maybe</span><span class="op">.</span><span class="fu">andThen</span> (<span class="fu">eval</span> <span class="fu">ctx</span>) (<span class="fu">eval1</span> <span class="fu">ctx</span> <span class="fu">t</span>)</span>
<span id="cb4-7"><a href="#cb4-7"></a></span>
<span id="cb4-8"><a href="#cb4-8"></a><span class="co">-- あらゆる TmAbs のパターンマッチに Ty のパラメーターを追加する必要はある</span></span>
<span id="cb4-9"><a href="#cb4-9"></a><span class="fu">eval1</span> : <span class="dt">Context</span> <span class="op">-&gt;</span> <span class="dt">Term</span> <span class="op">-&gt;</span> <span class="dt">Maybe</span> <span class="dt">Term</span></span>
<span id="cb4-10"><a href="#cb4-10"></a><span class="fu">eval1</span> <span class="fu">ctx</span> <span class="fu">t</span> <span class="op">=</span></span>
<span id="cb4-11"><a href="#cb4-11"></a>    <span class="cf">case</span> <span class="fu">t</span> <span class="cf">of</span></span>
<span id="cb4-12"><a href="#cb4-12"></a>        <span class="dt">TmApp</span> (<span class="dt">TmAbs</span> <span class="fu">x</span> <span class="fu">ty</span> <span class="fu">t12</span>) <span class="fu">t2</span> <span class="op">-&gt;</span></span>
<span id="cb4-13"><a href="#cb4-13"></a>            <span class="cf">if</span> <span class="fu">isval</span> <span class="fu">ctx</span> <span class="fu">t2</span> <span class="cf">then</span></span>
<span id="cb4-14"><a href="#cb4-14"></a>                <span class="dt">Just</span> (<span class="fu">termSubstTop</span> <span class="fu">t2</span> <span class="fu">t12</span>)</span>
<span id="cb4-15"><a href="#cb4-15"></a>            <span class="cf">else</span></span>
<span id="cb4-16"><a href="#cb4-16"></a>                <span class="dt">Maybe</span><span class="op">.</span><span class="fu">map</span> (<span class="dt">TmApp</span> (<span class="dt">TmAbs</span> <span class="fu">x</span> <span class="fu">ty</span> <span class="fu">t12</span>)) (<span class="fu">eval1</span> <span class="fu">ctx</span> <span class="fu">t2</span>)</span>
<span id="cb4-17"><a href="#cb4-17"></a></span>
<span id="cb4-18"><a href="#cb4-18"></a>        <span class="dt">TmApp</span> <span class="fu">t1</span> <span class="fu">t2</span> <span class="op">-&gt;</span></span>
<span id="cb4-19"><a href="#cb4-19"></a>            <span class="dt">Maybe</span><span class="op">.</span><span class="fu">map</span> (<span class="fu">flip</span> <span class="dt">TmApp</span> <span class="fu">t2</span>) (<span class="fu">eval1</span> <span class="fu">ctx</span> <span class="fu">t1</span>)</span>
<span id="cb4-20"><a href="#cb4-20"></a></span>
<span id="cb4-21"><a href="#cb4-21"></a>        <span class="dt">TmIf</span> <span class="dt">TmTrue</span> <span class="fu">t2</span> <span class="fu">_</span> <span class="op">-&gt;</span></span>
<span id="cb4-22"><a href="#cb4-22"></a>            <span class="dt">Just</span> <span class="fu">t2</span></span>
<span id="cb4-23"><a href="#cb4-23"></a></span>
<span id="cb4-24"><a href="#cb4-24"></a>        <span class="dt">TmIf</span> <span class="dt">TmFalse</span> <span class="fu">_</span> <span class="fu">t3</span> <span class="op">-&gt;</span></span>
<span id="cb4-25"><a href="#cb4-25"></a>            <span class="dt">Just</span> <span class="fu">t3</span></span>
<span id="cb4-26"><a href="#cb4-26"></a></span>
<span id="cb4-27"><a href="#cb4-27"></a>        <span class="dt">TmIf</span> <span class="fu">t1</span> <span class="fu">t2</span> <span class="fu">t3</span> <span class="op">-&gt;</span></span>
<span id="cb4-28"><a href="#cb4-28"></a>            <span class="fu">eval1</span> <span class="fu">ctx</span> <span class="fu">t1</span> <span class="op">|&gt;</span> <span class="dt">Maybe</span><span class="op">.</span><span class="fu">map</span> (\<span class="fu">t1_</span> <span class="op">-&gt;</span> <span class="dt">TmIf</span> <span class="fu">t1_</span> <span class="fu">t2</span> <span class="fu">t3</span>)</span>
<span id="cb4-29"><a href="#cb4-29"></a></span>
<span id="cb4-30"><a href="#cb4-30"></a>        <span class="fu">_</span> <span class="op">-&gt;</span></span>
<span id="cb4-31"><a href="#cb4-31"></a>            <span class="dt">Nothing</span></span>
<span id="cb4-32"><a href="#cb4-32"></a></span>
<span id="cb4-33"><a href="#cb4-33"></a><span class="co">-- t に s を代入する</span></span>
<span id="cb4-34"><a href="#cb4-34"></a><span class="fu">termSubstTop</span> : <span class="dt">Term</span> <span class="op">-&gt;</span> <span class="dt">Term</span> <span class="op">-&gt;</span> <span class="dt">Term</span></span>
<span id="cb4-35"><a href="#cb4-35"></a><span class="fu">termSubstTop</span> <span class="fu">s</span> <span class="fu">t</span> <span class="op">=</span> <span class="op">...</span></span></code></pre></div>
<h3 id="型付け規則">型付け規則</h3>
<p>ここからが新しい． いわゆる型検査のことだ． TaPL では「正しく型付けされた項はおかしくならない」という性質(安全性・健全性ともいう)について議論されている(8章で)． 例えば，これから定義する型検査が通った項(<code>Term</code>)は <code>eval</code> 関数を適用しても無限ループなどにはならない． さて，そのための型付け規則は次のようになっている:</p>
<div class="sourceCode" id="cb5"><pre class="sourceCode txt"><code class="sourceCode default"><span id="cb5-1"><a href="#cb5-1"></a>// 真偽値の型付け規則</span>
<span id="cb5-2"><a href="#cb5-2"></a> true : Bool</span>
<span id="cb5-3"><a href="#cb5-3"></a></span>
<span id="cb5-4"><a href="#cb5-4"></a> false : Bool</span>
<span id="cb5-5"><a href="#cb5-5"></a></span>
<span id="cb5-6"><a href="#cb5-6"></a> t1 : Bool    t2 : T    t3 : T</span>
<span id="cb5-7"><a href="#cb5-7"></a>-------------------------------</span>
<span id="cb5-8"><a href="#cb5-8"></a> if t1 then t2 else t3 : T</span>
<span id="cb5-9"><a href="#cb5-9"></a></span>
<span id="cb5-10"><a href="#cb5-10"></a>// 単純ラムダ計算の型付け規則</span>
<span id="cb5-11"><a href="#cb5-11"></a> x : T ∈ Γ</span>
<span id="cb5-12"><a href="#cb5-12"></a>-----------</span>
<span id="cb5-13"><a href="#cb5-13"></a> Γ ⊢ x : T</span>
<span id="cb5-14"><a href="#cb5-14"></a></span>
<span id="cb5-15"><a href="#cb5-15"></a> Γ, x : T1 ⊢ t2 : T2</span>
<span id="cb5-16"><a href="#cb5-16"></a>-----------------------------</span>
<span id="cb5-17"><a href="#cb5-17"></a> Γ ⊢ \x : T1 . t2 : T1 -&gt; T2</span>
<span id="cb5-18"><a href="#cb5-18"></a></span>
<span id="cb5-19"><a href="#cb5-19"></a> Γ ⊢ t1 : T11 -&gt; T12    Γ ⊢ t2 : T11</span>
<span id="cb5-20"><a href="#cb5-20"></a>-------------------------------------</span>
<span id="cb5-21"><a href="#cb5-21"></a> Γ ⊢ t1 t2 : T12</span></code></pre></div>
<p>ここで新しく出てくる <code>Γ</code> は型環境と言い，変数と型の対応関係を線形リストのような感じに保持している． <code>Γ ⊢ t : T</code> というのは「型環境 <code>Γ</code> のもと項 <code>t</code> は型 <code>T</code> に型付け可能」という風に読める(たぶん)． まぁ実装してみればわかる(ほんとか？):</p>
<div class="sourceCode" id="cb6"><pre class="sourceCode elm"><code class="sourceCode elm"><span id="cb6-1"><a href="#cb6-1"></a><span class="co">-- 型環境には Context を再利用する</span></span>
<span id="cb6-2"><a href="#cb6-2"></a><span class="kw">type</span> <span class="kw">alias</span> <span class="dt">Context</span> <span class="op">=</span> <span class="dt">List</span> ( <span class="dt">String</span><span class="op">,</span> <span class="dt">Binding</span> )</span>
<span id="cb6-3"><a href="#cb6-3"></a><span class="kw">type</span> <span class="dt">Binding</span></span>
<span id="cb6-4"><a href="#cb6-4"></a>    <span class="op">=</span> <span class="dt">NameBind</span></span>
<span id="cb6-5"><a href="#cb6-5"></a>    <span class="op">|</span> <span class="dt">VarBind</span> <span class="dt">Ty</span> <span class="co">-- 変数の型を保持</span></span>
<span id="cb6-6"><a href="#cb6-6"></a></span>
<span id="cb6-7"><a href="#cb6-7"></a><span class="co">-- 項 t の型が最終的に導出できれば型付け可能ということになる</span></span>
<span id="cb6-8"><a href="#cb6-8"></a><span class="fu">typeof</span> : <span class="dt">Context</span> <span class="op">-&gt;</span> <span class="dt">Term</span> <span class="op">-&gt;</span> <span class="dt">Maybe</span> <span class="dt">Ty</span></span>
<span id="cb6-9"><a href="#cb6-9"></a><span class="fu">typeof</span> <span class="fu">ctx</span> <span class="fu">t</span> <span class="op">=</span></span>
<span id="cb6-10"><a href="#cb6-10"></a>    <span class="cf">case</span> <span class="fu">t</span> <span class="cf">of</span></span>
<span id="cb6-11"><a href="#cb6-11"></a>        <span class="dt">TmVar</span> <span class="fu">x</span> <span class="fu">_</span> <span class="op">-&gt;</span></span>
<span id="cb6-12"><a href="#cb6-12"></a>            <span class="co">-- Context から型情報を引っ張ってくる</span></span>
<span id="cb6-13"><a href="#cb6-13"></a>            <span class="fu">getTypeFromContext</span> <span class="fu">ctx</span> <span class="fu">x</span></span>
<span id="cb6-14"><a href="#cb6-14"></a></span>
<span id="cb6-15"><a href="#cb6-15"></a>        <span class="dt">TmAbs</span> <span class="fu">x</span> <span class="fu">ty1</span> <span class="fu">t2</span> <span class="op">-&gt;</span></span>
<span id="cb6-16"><a href="#cb6-16"></a>            <span class="kw">let</span></span>
<span id="cb6-17"><a href="#cb6-17"></a>                <span class="co">-- Context に 変数と型の対応を追加する</span></span>
<span id="cb6-18"><a href="#cb6-18"></a>                <span class="fu">ctx1</span> <span class="op">=</span> <span class="fu">addbinding</span> <span class="fu">ctx</span> <span class="fu">x</span> (<span class="dt">VarBind</span> <span class="fu">ty1</span>)</span>
<span id="cb6-19"><a href="#cb6-19"></a>            <span class="kw">in</span></span>
<span id="cb6-20"><a href="#cb6-20"></a>            <span class="co">-- ラムダ抽象は中の項 t2 が型付け可能である必要がある</span></span>
<span id="cb6-21"><a href="#cb6-21"></a>            <span class="fu">typeof</span> <span class="fu">ctx1</span> <span class="fu">t2</span></span>
<span id="cb6-22"><a href="#cb6-22"></a>                <span class="op">|&gt;</span> <span class="dt">Maybe</span><span class="op">.</span><span class="fu">map</span> (\<span class="fu">ty2</span> <span class="op">-&gt;</span> <span class="dt">TyArr</span> <span class="fu">ty1</span> <span class="fu">ty2</span>)</span>
<span id="cb6-23"><a href="#cb6-23"></a></span>
<span id="cb6-24"><a href="#cb6-24"></a>        <span class="dt">TmApp</span> <span class="fu">t1</span> <span class="fu">t2</span> <span class="op">-&gt;</span></span>
<span id="cb6-25"><a href="#cb6-25"></a>            <span class="cf">case</span> ( <span class="fu">typeof</span> <span class="fu">ctx</span> <span class="fu">t1</span><span class="op">,</span> <span class="fu">typeof</span> <span class="fu">ctx</span> <span class="fu">t2</span> ) <span class="cf">of</span></span>
<span id="cb6-26"><a href="#cb6-26"></a>                ( <span class="dt">Just</span> (<span class="dt">TyArr</span> <span class="fu">ty11</span> <span class="fu">ty12</span>)<span class="op">,</span> <span class="dt">Just</span> <span class="fu">ty2</span> ) <span class="op">-&gt;</span></span>
<span id="cb6-27"><a href="#cb6-27"></a>                    <span class="co">-- 関数適用の場合は引数の型 ty11 と適用する項の型 ty2 が同じである必要がある</span></span>
<span id="cb6-28"><a href="#cb6-28"></a>                    <span class="cf">if</span> <span class="fu">ty11</span> <span class="op">==</span> <span class="fu">ty2</span> <span class="cf">then</span></span>
<span id="cb6-29"><a href="#cb6-29"></a>                        <span class="dt">Just</span> <span class="fu">ty12</span></span>
<span id="cb6-30"><a href="#cb6-30"></a>                    <span class="cf">else</span></span>
<span id="cb6-31"><a href="#cb6-31"></a>                        <span class="dt">Nothing</span></span>
<span id="cb6-32"><a href="#cb6-32"></a>                <span class="fu">_</span> <span class="op">-&gt;</span></span>
<span id="cb6-33"><a href="#cb6-33"></a>                    <span class="dt">Nothing</span></span>
<span id="cb6-34"><a href="#cb6-34"></a></span>
<span id="cb6-35"><a href="#cb6-35"></a>        <span class="dt">TmTrue</span> <span class="op">-&gt;</span></span>
<span id="cb6-36"><a href="#cb6-36"></a>            <span class="dt">Just</span> <span class="dt">TyBool</span></span>
<span id="cb6-37"><a href="#cb6-37"></a></span>
<span id="cb6-38"><a href="#cb6-38"></a>        <span class="dt">TmFalse</span> <span class="op">-&gt;</span></span>
<span id="cb6-39"><a href="#cb6-39"></a>            <span class="dt">Just</span> <span class="dt">TyBool</span></span>
<span id="cb6-40"><a href="#cb6-40"></a></span>
<span id="cb6-41"><a href="#cb6-41"></a>        <span class="dt">TmIf</span> <span class="fu">t1</span> <span class="fu">t2</span> <span class="fu">t3</span> <span class="op">-&gt;</span></span>
<span id="cb6-42"><a href="#cb6-42"></a>            <span class="cf">case</span> ( <span class="fu">typeof</span> <span class="fu">ctx</span> <span class="fu">t1</span><span class="op">,</span> <span class="fu">typeof</span> <span class="fu">ctx</span> <span class="fu">t2</span><span class="op">,</span> <span class="fu">typeof</span> <span class="fu">ctx</span> <span class="fu">t3</span> ) <span class="cf">of</span></span>
<span id="cb6-43"><a href="#cb6-43"></a>                ( <span class="dt">Just</span> <span class="dt">TyBool</span><span class="op">,</span> <span class="dt">Just</span> <span class="fu">ty2</span><span class="op">,</span> <span class="dt">Just</span> <span class="fu">ty3</span> ) <span class="op">-&gt;</span></span>
<span id="cb6-44"><a href="#cb6-44"></a>                    <span class="co">-- if-then-else の場合は t2 と t3 の型が同じである必要がある</span></span>
<span id="cb6-45"><a href="#cb6-45"></a>                    <span class="cf">if</span> <span class="fu">ty2</span> <span class="op">==</span> <span class="fu">ty3</span> <span class="cf">then</span></span>
<span id="cb6-46"><a href="#cb6-46"></a>                        <span class="dt">Just</span> <span class="fu">ty2</span></span>
<span id="cb6-47"><a href="#cb6-47"></a>                    <span class="cf">else</span></span>
<span id="cb6-48"><a href="#cb6-48"></a>                        <span class="dt">Nothing</span></span>
<span id="cb6-49"><a href="#cb6-49"></a>                <span class="fu">_</span> <span class="op">-&gt;</span></span>
<span id="cb6-50"><a href="#cb6-50"></a>                    <span class="dt">Nothing</span></span>
<span id="cb6-51"><a href="#cb6-51"></a></span>
<span id="cb6-52"><a href="#cb6-52"></a><span class="fu">getTypeFromContext</span> : <span class="dt">Context</span> <span class="op">-&gt;</span> <span class="dt">Int</span> <span class="op">-&gt;</span> <span class="dt">Maybe</span> <span class="dt">Ty</span></span>
<span id="cb6-53"><a href="#cb6-53"></a><span class="fu">getTypeFromContext</span> <span class="fu">ctx</span> <span class="fu">idx</span> <span class="op">=</span></span>
<span id="cb6-54"><a href="#cb6-54"></a>    <span class="cf">case</span> <span class="fu">getbinding</span> <span class="fu">ctx</span> <span class="fu">idx</span> <span class="cf">of</span></span>
<span id="cb6-55"><a href="#cb6-55"></a>        <span class="dt">Just</span> (<span class="dt">VarBind</span> <span class="fu">ty</span>) <span class="op">-&gt;</span></span>
<span id="cb6-56"><a href="#cb6-56"></a>            <span class="dt">Just</span> <span class="fu">ty</span></span>
<span id="cb6-57"><a href="#cb6-57"></a></span>
<span id="cb6-58"><a href="#cb6-58"></a>        <span class="fu">_</span> <span class="op">-&gt;</span></span>
<span id="cb6-59"><a href="#cb6-59"></a>            <span class="dt">Nothing</span></span>
<span id="cb6-60"><a href="#cb6-60"></a></span>
<span id="cb6-61"><a href="#cb6-61"></a><span class="fu">getbinding</span> : <span class="dt">Context</span> <span class="op">-&gt;</span> <span class="dt">Int</span> <span class="op">-&gt;</span> <span class="dt">Maybe</span> <span class="dt">Binding</span></span>
<span id="cb6-62"><a href="#cb6-62"></a><span class="fu">getbinding</span> <span class="fu">ctx</span> <span class="fu">n</span> <span class="op">=</span></span>
<span id="cb6-63"><a href="#cb6-63"></a>    <span class="cf">case</span> ( <span class="fu">ctx</span><span class="op">,</span> <span class="fu">n</span> ) <span class="cf">of</span></span>
<span id="cb6-64"><a href="#cb6-64"></a>        ( []<span class="op">,</span> <span class="fu">_</span> ) <span class="op">-&gt;</span></span>
<span id="cb6-65"><a href="#cb6-65"></a>            <span class="dt">Nothing</span></span>
<span id="cb6-66"><a href="#cb6-66"></a></span>
<span id="cb6-67"><a href="#cb6-67"></a>        ( ( <span class="fu">_</span><span class="op">,</span> <span class="fu">bind</span> ) <span class="op">::</span> <span class="fu">_</span><span class="op">,</span> <span class="dv">0</span> ) <span class="op">-&gt;</span></span>
<span id="cb6-68"><a href="#cb6-68"></a>            <span class="dt">Just</span> <span class="fu">bind</span></span>
<span id="cb6-69"><a href="#cb6-69"></a></span>
<span id="cb6-70"><a href="#cb6-70"></a>        ( <span class="fu">_</span> <span class="op">::</span> <span class="fu">next</span><span class="op">,</span> <span class="fu">_</span> ) <span class="op">-&gt;</span></span>
<span id="cb6-71"><a href="#cb6-71"></a>            <span class="fu">getbinding</span> <span class="fu">next</span> (<span class="fu">n</span> <span class="op">-</span> <span class="dv">1</span>)</span>
<span id="cb6-72"><a href="#cb6-72"></a></span>
<span id="cb6-73"><a href="#cb6-73"></a><span class="fu">addbinding</span> : <span class="dt">Context</span> <span class="op">-&gt;</span> <span class="dt">String</span> <span class="op">-&gt;</span> <span class="dt">Binding</span> <span class="op">-&gt;</span> <span class="dt">Context</span></span>
<span id="cb6-74"><a href="#cb6-74"></a><span class="fu">addbinding</span> <span class="fu">ctx</span> <span class="fu">x</span> <span class="fu">bind</span> <span class="op">=</span></span>
<span id="cb6-75"><a href="#cb6-75"></a>    ( <span class="fu">x</span><span class="op">,</span> <span class="fu">bind</span> ) <span class="op">::</span> <span class="fu">ctx</span></span></code></pre></div>
<p>REPL で試してみる:</p>
<div class="sourceCode" id="cb7"><pre class="sourceCode elm"><code class="sourceCode elm"><span id="cb7-1"><a href="#cb7-1"></a><span class="op">&gt;</span> <span class="kw">import</span> <span class="dt">TaPL</span><span class="op">.</span><span class="dt">Chap10</span> <span class="kw">as</span> <span class="dt">Chap10</span> <span class="kw">exposing</span> (<span class="dt">Term</span>(<span class="op">..</span>)<span class="op">,</span> <span class="dt">Ty</span>(<span class="op">..</span>)<span class="op">,</span> <span class="dt">Binding</span>(<span class="op">..</span>))</span>
<span id="cb7-2"><a href="#cb7-2"></a><span class="co">-- (\x : (Bool -&gt; Bool) . (\f : (Bool -&gt; Bool -&gt; Bool) . f x)) (\x : Bool . x)</span></span>
<span id="cb7-3"><a href="#cb7-3"></a><span class="op">&gt;</span> <span class="dt">Chap10</span><span class="op">.</span><span class="fu">typeof</span> [] (<span class="dt">TmApp</span> (<span class="dt">TmAbs</span> <span class="st">&quot;x&quot;</span> (<span class="dt">TyArr</span> <span class="dt">TyBool</span> <span class="dt">TyBool</span>) (<span class="dt">TmAbs</span> <span class="st">&quot;f&quot;</span> (<span class="dt">TyArr</span> (<span class="dt">TyArr</span> <span class="dt">TyBool</span> <span class="dt">TyBool</span>) <span class="dt">TyBool</span>) (<span class="dt">TmApp</span> (<span class="dt">TmVar</span> <span class="dv">0</span> <span class="dv">2</span>) (<span class="dt">TmVar</span> <span class="dv">1</span> <span class="dv">2</span>)))) (<span class="dt">TmAbs</span> <span class="st">&quot;x&quot;</span> <span class="dt">TyBool</span> (<span class="dt">TmVar</span> <span class="dv">0</span> <span class="dv">1</span>)))</span>
<span id="cb7-4"><a href="#cb7-4"></a><span class="dt">Just</span> (<span class="dt">TyArr</span> (<span class="dt">TyArr</span> (<span class="dt">TyArr</span> <span class="dt">TyBool</span> <span class="dt">TyBool</span>) <span class="dt">TyBool</span>) <span class="dt">TyBool</span>)</span>
<span id="cb7-5"><a href="#cb7-5"></a>    : <span class="dt">Maybe</span> <span class="dt">Ty</span></span>
<span id="cb7-6"><a href="#cb7-6"></a><span class="co">-- (\x . x x) (\x . x x) はうまく型付けできない</span></span>
<span id="cb7-7"><a href="#cb7-7"></a><span class="op">&gt;</span> <span class="dt">Chap10</span><span class="op">.</span><span class="fu">typeof</span> [] (<span class="dt">TmApp</span> (<span class="dt">TmAbs</span> <span class="st">&quot;x&quot;</span> (<span class="dt">TyArr</span> <span class="dt">TyBool</span> <span class="dt">TyBool</span>) (<span class="dt">TmApp</span> (<span class="dt">TmVar</span> <span class="dv">0</span> <span class="dv">1</span>) (<span class="dt">TmVar</span> <span class="dv">0</span> <span class="dv">1</span>))) (<span class="dt">TmAbs</span> <span class="st">&quot;x&quot;</span> (<span class="dt">TyArr</span> <span class="dt">TyBool</span> <span class="dt">TyBool</span>) (<span class="dt">TmApp</span> (<span class="dt">TmVar</span> <span class="dv">0</span> <span class="dv">1</span>) (<span class="dt">TmVar</span> <span class="dv">0</span> <span class="dv">1</span>))))</span>
<span id="cb7-8"><a href="#cb7-8"></a><span class="dt">Nothing</span> : <span class="dt">Maybe</span> <span class="dt">Ty</span></span></code></pre></div>
<h3 id="文字列に変換">文字列に変換</h3>
<p>基本的に4・7章の定義を利用すれば良いのだが，型注釈ができるようになったので型も変換できるようにする:</p>
<div class="sourceCode" id="cb8"><pre class="sourceCode elm"><code class="sourceCode elm"><span id="cb8-1"><a href="#cb8-1"></a><span class="fu">display</span> : <span class="dt">Term</span> <span class="op">-&gt;</span> <span class="dt">String</span></span>
<span id="cb8-2"><a href="#cb8-2"></a><span class="fu">display</span> <span class="fu">t</span> <span class="op">=</span></span>
<span id="cb8-3"><a href="#cb8-3"></a>    <span class="fu">printtm</span> [] <span class="fu">t</span></span>
<span id="cb8-4"><a href="#cb8-4"></a>        <span class="op">|&gt;</span> <span class="dt">Maybe</span><span class="op">.</span><span class="fu">map</span> (<span class="fu">dropIfStartsWith</span> <span class="st">&quot;(&quot;</span>) <span class="co">-- 最初と最後のカッコを消している</span></span>
<span id="cb8-5"><a href="#cb8-5"></a>        <span class="op">|&gt;</span> <span class="dt">Maybe</span><span class="op">.</span><span class="fu">map</span> (<span class="fu">dropIfEndsWith</span> <span class="st">&quot;)&quot;</span>)</span>
<span id="cb8-6"><a href="#cb8-6"></a>        <span class="op">|&gt;</span> <span class="dt">Maybe</span><span class="op">.</span><span class="fu">withDefault</span> <span class="st">&quot;&quot;</span></span>
<span id="cb8-7"><a href="#cb8-7"></a></span>
<span id="cb8-8"><a href="#cb8-8"></a><span class="fu">printtm</span> : <span class="dt">Context</span> <span class="op">-&gt;</span> <span class="dt">Term</span> <span class="op">-&gt;</span> <span class="dt">Maybe</span> <span class="dt">String</span></span>
<span id="cb8-9"><a href="#cb8-9"></a><span class="fu">printtm</span> <span class="fu">ctx</span> <span class="fu">t</span> <span class="op">=</span></span>
<span id="cb8-10"><a href="#cb8-10"></a>    <span class="cf">case</span> <span class="fu">t</span> <span class="cf">of</span></span>
<span id="cb8-11"><a href="#cb8-11"></a>        <span class="dt">TmAbs</span> <span class="fu">x</span> <span class="fu">ty</span> <span class="fu">t1</span> <span class="op">-&gt;</span></span>
<span id="cb8-12"><a href="#cb8-12"></a>            <span class="kw">let</span> <span class="co">-- 重複しない変数名を生成して Context に積む</span></span>
<span id="cb8-13"><a href="#cb8-13"></a>                ( <span class="fu">ctx1</span><span class="op">,</span> <span class="fu">x1</span> ) <span class="op">=</span> <span class="fu">pickfreshname</span> <span class="fu">ctx</span> <span class="fu">x</span></span>
<span id="cb8-14"><a href="#cb8-14"></a>            <span class="kw">in</span></span>
<span id="cb8-15"><a href="#cb8-15"></a>            <span class="dt">Maybe</span><span class="op">.</span><span class="fu">map</span></span>
<span id="cb8-16"><a href="#cb8-16"></a>                (\<span class="fu">s1</span> <span class="op">-&gt;</span> <span class="dt">String</span><span class="op">.</span><span class="fu">concat</span> [ <span class="st">&quot;(\\&quot;</span><span class="op">,</span> <span class="fu">x1</span><span class="op">,</span> <span class="st">&quot; : &quot;</span><span class="op">,</span> <span class="fu">printty</span> <span class="fu">ty</span><span class="op">,</span> <span class="st">&quot;. &quot;</span><span class="op">,</span> <span class="fu">s1</span><span class="op">,</span> <span class="st">&quot;)&quot;</span> ])</span>
<span id="cb8-17"><a href="#cb8-17"></a>                (<span class="fu">printtm</span> <span class="fu">ctx1</span> <span class="fu">t1</span>)</span>
<span id="cb8-18"><a href="#cb8-18"></a>        <span class="op">...</span> <span class="co">-- あとは同じ</span></span>
<span id="cb8-19"><a href="#cb8-19"></a></span>
<span id="cb8-20"><a href="#cb8-20"></a><span class="fu">printty</span> : <span class="dt">Ty</span> <span class="op">-&gt;</span> <span class="dt">String</span></span>
<span id="cb8-21"><a href="#cb8-21"></a><span class="fu">printty</span> <span class="fu">ty</span> <span class="op">=</span></span>
<span id="cb8-22"><a href="#cb8-22"></a>    <span class="cf">case</span> <span class="fu">ty</span> <span class="cf">of</span></span>
<span id="cb8-23"><a href="#cb8-23"></a>        <span class="dt">TyArr</span> <span class="fu">ty1</span> <span class="fu">ty2</span> <span class="op">-&gt;</span></span>
<span id="cb8-24"><a href="#cb8-24"></a>            <span class="dt">String</span><span class="op">.</span><span class="fu">concat</span> [ <span class="st">&quot;(&quot;</span><span class="op">,</span> <span class="fu">printty</span> <span class="fu">ty1</span><span class="op">,</span> <span class="st">&quot; -&gt; &quot;</span><span class="op">,</span> <span class="fu">printty</span> <span class="fu">ty2</span><span class="op">,</span> <span class="st">&quot;)&quot;</span> ]</span>
<span id="cb8-25"><a href="#cb8-25"></a></span>
<span id="cb8-26"><a href="#cb8-26"></a>        <span class="dt">TyBool</span> <span class="op">-&gt;</span></span>
<span id="cb8-27"><a href="#cb8-27"></a>            <span class="st">&quot;Bool&quot;</span></span>
<span id="cb8-28"><a href="#cb8-28"></a></span>
<span id="cb8-29"><a href="#cb8-29"></a><span class="co">-- Context から重複する変数名を探し &#39; を追加する</span></span>
<span id="cb8-30"><a href="#cb8-30"></a><span class="fu">pickfreshname</span> : <span class="dt">Context</span> <span class="op">-&gt;</span> <span class="dt">String</span> <span class="op">-&gt;</span> ( <span class="dt">Context</span><span class="op">,</span> <span class="dt">String</span> )</span>
<span id="cb8-31"><a href="#cb8-31"></a><span class="fu">pickfreshname</span> <span class="fu">ctx</span> <span class="fu">x</span> <span class="op">=</span> <span class="op">...</span></span></code></pre></div>
<p>REPL で試す:</p>
<div class="sourceCode" id="cb9"><pre class="sourceCode elm"><code class="sourceCode elm"><span id="cb9-1"><a href="#cb9-1"></a><span class="op">&gt;</span> <span class="dt">Chap10</span><span class="op">.</span><span class="fu">display</span> (<span class="dt">TmApp</span> (<span class="dt">TmAbs</span> <span class="st">&quot;x&quot;</span> (<span class="dt">TyArr</span> <span class="dt">TyBool</span> <span class="dt">TyBool</span>) (<span class="dt">TmAbs</span> <span class="st">&quot;f&quot;</span> (<span class="dt">TyArr</span> (<span class="dt">TyArr</span> <span class="dt">TyBool</span> <span class="dt">TyBool</span>) <span class="dt">TyBool</span>) (<span class="dt">TmApp</span> (<span class="dt">TmVar</span> <span class="dv">0</span> <span class="dv">2</span>) (<span class="dt">TmVar</span> <span class="dv">1</span> <span class="dv">2</span>)))) (<span class="dt">TmAbs</span> <span class="st">&quot;x&quot;</span> <span class="dt">TyBool</span> (<span class="dt">TmVar</span> <span class="dv">0</span> <span class="dv">1</span>)))</span>
<span id="cb9-2"><a href="#cb9-2"></a><span class="st">&quot;(\\x : (Bool -&gt; Bool). (\\f : ((Bool -&gt; Bool) -&gt; Bool). (f x))) (\\x : Bool. x)&quot;</span></span>
<span id="cb9-3"><a href="#cb9-3"></a>    : <span class="dt">String</span></span></code></pre></div>
<h3 id="パーサー">パーサー</h3>
<p>これも同様に4・7章の実装を合わせるだけ:</p>
<div class="sourceCode" id="cb10"><pre class="sourceCode elm"><code class="sourceCode elm"><span id="cb10-1"><a href="#cb10-1"></a><span class="kw">module</span> <span class="dt">TaPL</span><span class="op">.</span><span class="dt">Chap10</span><span class="op">.</span><span class="dt">Parser</span> <span class="kw">exposing</span> (<span class="fu">parse</span>)</span>
<span id="cb10-2"><a href="#cb10-2"></a></span>
<span id="cb10-3"><a href="#cb10-3"></a><span class="kw">import</span> <span class="dt">Parser</span> <span class="kw">exposing</span> ((<span class="op">|.</span>)<span class="op">,</span> (<span class="op">|=</span>)<span class="op">,</span> <span class="dt">Parser</span>)</span>
<span id="cb10-4"><a href="#cb10-4"></a><span class="kw">import</span> <span class="dt">TaPL</span><span class="op">.</span><span class="dt">Chap10</span> <span class="kw">exposing</span> (<span class="dt">Term</span>(<span class="op">..</span>)<span class="op">,</span> <span class="dt">Ty</span>(<span class="op">..</span>))</span>
<span id="cb10-5"><a href="#cb10-5"></a></span>
<span id="cb10-6"><a href="#cb10-6"></a><span class="kw">type</span> <span class="kw">alias</span> <span class="dt">Context</span> <span class="op">=</span></span>
<span id="cb10-7"><a href="#cb10-7"></a>    { <span class="fu">env</span> : <span class="dt">Dict</span> <span class="dt">String</span> <span class="dt">Int</span></span>
<span id="cb10-8"><a href="#cb10-8"></a>    <span class="op">,</span> <span class="fu">depth</span> : <span class="dt">Int</span></span>
<span id="cb10-9"><a href="#cb10-9"></a>    }</span>
<span id="cb10-10"><a href="#cb10-10"></a></span>
<span id="cb10-11"><a href="#cb10-11"></a><span class="fu">iniCtx</span> : <span class="dt">Context</span></span>
<span id="cb10-12"><a href="#cb10-12"></a><span class="fu">iniCtx</span> <span class="op">=</span></span>
<span id="cb10-13"><a href="#cb10-13"></a>    { <span class="fu">env</span> <span class="op">=</span> <span class="dt">Dict</span><span class="op">.</span><span class="fu">empty</span><span class="op">,</span> <span class="fu">depth</span> <span class="op">=</span> <span class="dv">0</span> }</span>
<span id="cb10-14"><a href="#cb10-14"></a></span>
<span id="cb10-15"><a href="#cb10-15"></a><span class="fu">parse</span> : <span class="dt">String</span> <span class="op">-&gt;</span> <span class="dt">Result</span> (<span class="dt">List</span> <span class="dt">Parser</span><span class="op">.</span><span class="dt">DeadEnd</span>) <span class="dt">Term</span></span>
<span id="cb10-16"><a href="#cb10-16"></a><span class="fu">parse</span> <span class="op">=</span></span>
<span id="cb10-17"><a href="#cb10-17"></a>    <span class="dt">Parser</span><span class="op">.</span><span class="fu">run</span> <span class="fu">parser</span></span>
<span id="cb10-18"><a href="#cb10-18"></a></span>
<span id="cb10-19"><a href="#cb10-19"></a><span class="fu">parser</span> : <span class="dt">Parser</span> <span class="dt">Term</span></span>
<span id="cb10-20"><a href="#cb10-20"></a><span class="fu">parser</span> <span class="op">=</span></span>
<span id="cb10-21"><a href="#cb10-21"></a>    <span class="fu">termParser</span> <span class="fu">iniCtx</span> <span class="op">|.</span> <span class="dt">Parser</span><span class="op">.</span><span class="fu">end</span></span>
<span id="cb10-22"><a href="#cb10-22"></a></span>
<span id="cb10-23"><a href="#cb10-23"></a><span class="fu">termParser</span> : <span class="dt">Context</span> <span class="op">-&gt;</span> <span class="dt">Parser</span> <span class="dt">Term</span></span>
<span id="cb10-24"><a href="#cb10-24"></a><span class="fu">termParser</span> <span class="fu">ctx</span> <span class="op">=</span></span>
<span id="cb10-25"><a href="#cb10-25"></a>    <span class="dt">Parser</span><span class="op">.</span><span class="fu">oneOf</span></span>
<span id="cb10-26"><a href="#cb10-26"></a>        [ <span class="fu">parParser</span> <span class="fu">ctx</span> <span class="co">-- 括弧のパーサー</span></span>
<span id="cb10-27"><a href="#cb10-27"></a>        <span class="op">,</span> <span class="fu">absParser</span> <span class="fu">ctx</span> <span class="co">-- ラムダ抽象のパーサー</span></span>
<span id="cb10-28"><a href="#cb10-28"></a>        <span class="op">,</span> <span class="fu">valParser</span>     <span class="co">-- ture/false のパーサー</span></span>
<span id="cb10-29"><a href="#cb10-29"></a>        <span class="op">,</span> <span class="fu">ifParser</span> <span class="fu">ctx</span>  <span class="co">-- if-then-else のパーサー</span></span>
<span id="cb10-30"><a href="#cb10-30"></a>        <span class="op">,</span> <span class="fu">varParser</span> <span class="fu">ctx</span> <span class="co">-- 変数のパーサー</span></span>
<span id="cb10-31"><a href="#cb10-31"></a>        ] <span class="co">-- 関数適用のパーサーだけ分けてるのは左再帰対策(その２参照)</span></span>
<span id="cb10-32"><a href="#cb10-32"></a>        <span class="op">|&gt;</span> <span class="dt">Parser</span><span class="op">.</span><span class="fu">andThen</span> (<span class="fu">appParser</span> <span class="fu">ctx</span>)</span></code></pre></div>
<p>言わずもがな，型注釈のパースをする必要があるので，<code>absParser</code> はその２のと若干異なる:</p>
<div class="sourceCode" id="cb11"><pre class="sourceCode elm"><code class="sourceCode elm"><span id="cb11-1"><a href="#cb11-1"></a><span class="fu">absParser</span> : <span class="dt">Context</span> <span class="op">-&gt;</span> <span class="dt">Parser</span> <span class="dt">Term</span></span>
<span id="cb11-2"><a href="#cb11-2"></a><span class="fu">absParser</span> <span class="fu">ctx</span> <span class="op">=</span></span>
<span id="cb11-3"><a href="#cb11-3"></a>    <span class="dt">Parser</span><span class="op">.</span><span class="fu">succeed</span> <span class="dt">Tuple</span><span class="op">.</span><span class="fu">pair</span></span>
<span id="cb11-4"><a href="#cb11-4"></a>        <span class="op">|.</span> <span class="dt">Parser</span><span class="op">.</span><span class="fu">symbol</span> <span class="st">&quot;\\&quot;</span></span>
<span id="cb11-5"><a href="#cb11-5"></a>        <span class="op">|.</span> <span class="dt">Parser</span><span class="op">.</span><span class="fu">spaces</span></span>
<span id="cb11-6"><a href="#cb11-6"></a>        <span class="op">|=</span> <span class="dt">Parser</span><span class="op">.</span><span class="fu">lazy</span> (\<span class="fu">_</span> <span class="op">-&gt;</span> <span class="fu">varStrParser</span>)</span>
<span id="cb11-7"><a href="#cb11-7"></a>        <span class="op">|.</span> <span class="dt">Parser</span><span class="op">.</span><span class="fu">spaces</span></span>
<span id="cb11-8"><a href="#cb11-8"></a>        <span class="op">|.</span> <span class="dt">Parser</span><span class="op">.</span><span class="fu">symbol</span> <span class="st">&quot;:&quot;</span>            <span class="co">-- ここから</span></span>
<span id="cb11-9"><a href="#cb11-9"></a>        <span class="op">|.</span> <span class="dt">Parser</span><span class="op">.</span><span class="fu">spaces</span></span>
<span id="cb11-10"><a href="#cb11-10"></a>        <span class="op">|=</span> <span class="dt">Parser</span><span class="op">.</span><span class="fu">lazy</span> (\<span class="fu">_</span> <span class="op">-&gt;</span> <span class="fu">tyParser</span>) <span class="co">-- ここまでが追加</span></span>
<span id="cb11-11"><a href="#cb11-11"></a>        <span class="op">|.</span> <span class="dt">Parser</span><span class="op">.</span><span class="fu">spaces</span></span>
<span id="cb11-12"><a href="#cb11-12"></a>        <span class="op">|.</span> <span class="dt">Parser</span><span class="op">.</span><span class="fu">symbol</span> <span class="st">&quot;.&quot;</span></span>
<span id="cb11-13"><a href="#cb11-13"></a>        <span class="op">|.</span> <span class="dt">Parser</span><span class="op">.</span><span class="fu">spaces</span></span>
<span id="cb11-14"><a href="#cb11-14"></a>        <span class="op">|&gt;</span> <span class="dt">Parser</span><span class="op">.</span><span class="fu">andThen</span> (<span class="fu">absParserN</span> <span class="fu">ctx</span>)</span>
<span id="cb11-15"><a href="#cb11-15"></a></span>
<span id="cb11-16"><a href="#cb11-16"></a><span class="co">-- 型のパーサー</span></span>
<span id="cb11-17"><a href="#cb11-17"></a><span class="fu">tyParser</span> : <span class="dt">Parser</span> <span class="dt">Ty</span></span>
<span id="cb11-18"><a href="#cb11-18"></a><span class="fu">tyParser</span> <span class="op">=</span></span>
<span id="cb11-19"><a href="#cb11-19"></a>    <span class="dt">Parser</span><span class="op">.</span><span class="fu">oneOf</span></span>
<span id="cb11-20"><a href="#cb11-20"></a>        [ <span class="fu">value</span> <span class="st">&quot;Bool&quot;</span> <span class="dt">TyBool</span></span>
<span id="cb11-21"><a href="#cb11-21"></a>        ]</span>
<span id="cb11-22"><a href="#cb11-22"></a>        <span class="op">|.</span> <span class="dt">Parser</span><span class="op">.</span><span class="fu">spaces</span></span>
<span id="cb11-23"><a href="#cb11-23"></a>        <span class="co">-- これも左再帰対策(その２参照)</span></span>
<span id="cb11-24"><a href="#cb11-24"></a>        <span class="op">|&gt;</span> <span class="dt">Parser</span><span class="op">.</span><span class="fu">andThen</span> <span class="fu">tyArrParser</span></span>
<span id="cb11-25"><a href="#cb11-25"></a></span>
<span id="cb11-26"><a href="#cb11-26"></a><span class="co">-- 関数型のパーサー</span></span>
<span id="cb11-27"><a href="#cb11-27"></a><span class="co">-- 関数型 T-&gt;T は右結合(T-&gt;T-&gt;T は T-&gt;(T-&gt;T) となる)</span></span>
<span id="cb11-28"><a href="#cb11-28"></a><span class="fu">tyArrParser</span> : <span class="dt">Ty</span> <span class="op">-&gt;</span> <span class="dt">Parser</span> <span class="dt">Ty</span></span>
<span id="cb11-29"><a href="#cb11-29"></a><span class="fu">tyArrParser</span> <span class="fu">ty</span> <span class="op">=</span></span>
<span id="cb11-30"><a href="#cb11-30"></a>    <span class="dt">Parser</span><span class="op">.</span><span class="fu">oneOf</span></span>
<span id="cb11-31"><a href="#cb11-31"></a>        [ <span class="dt">Parser</span><span class="op">.</span><span class="fu">succeed</span> (<span class="dt">TyArr</span> <span class="fu">ty</span>)</span>
<span id="cb11-32"><a href="#cb11-32"></a>            <span class="op">|.</span> <span class="dt">Parser</span><span class="op">.</span><span class="fu">keyword</span> <span class="st">&quot;-&gt;&quot;</span></span>
<span id="cb11-33"><a href="#cb11-33"></a>            <span class="op">|.</span> <span class="dt">Parser</span><span class="op">.</span><span class="fu">spaces</span></span>
<span id="cb11-34"><a href="#cb11-34"></a>            <span class="op">|=</span> <span class="dt">Parser</span><span class="op">.</span><span class="fu">lazy</span> (\<span class="fu">_</span> <span class="op">-&gt;</span> <span class="fu">tyParser</span>)</span>
<span id="cb11-35"><a href="#cb11-35"></a>        <span class="op">,</span> <span class="dt">Parser</span><span class="op">.</span><span class="fu">succeed</span> <span class="fu">ty</span></span>
<span id="cb11-36"><a href="#cb11-36"></a>        ]</span></code></pre></div>
<p>REPL で試してみる:</p>
<div class="sourceCode" id="cb12"><pre class="sourceCode elm"><code class="sourceCode elm"><span id="cb12-1"><a href="#cb12-1"></a><span class="op">&gt;</span>  <span class="st">&quot;(\\x : Bool . if x then x else (\\f : Bool -&gt; Bool -&gt; Bool . f x x) (\\x : Bool . \\y : Bool . y)) (if true then false else true)&quot;</span></span>
<span id="cb12-2"><a href="#cb12-2"></a><span class="op">|</span>   <span class="op">|&gt;</span> <span class="dt">Parser</span><span class="op">.</span><span class="fu">parse</span></span>
<span id="cb12-3"><a href="#cb12-3"></a><span class="op">|</span>   <span class="op">|&gt;</span> <span class="dt">Result</span><span class="op">.</span><span class="fu">toMaybe</span></span>
<span id="cb12-4"><a href="#cb12-4"></a><span class="op">|</span>   <span class="op">|&gt;</span> <span class="dt">Maybe</span><span class="op">.</span><span class="fu">andThen</span> (\<span class="fu">t</span> <span class="op">-&gt;</span> <span class="dt">Chap10</span><span class="op">.</span><span class="fu">typeof</span> [] <span class="fu">t</span> <span class="op">|&gt;</span> <span class="dt">Maybe</span><span class="op">.</span><span class="fu">map</span> (<span class="fu">always</span> <span class="fu">t</span>)) <span class="co">-- 型検査</span></span>
<span id="cb12-5"><a href="#cb12-5"></a><span class="op">|</span>   <span class="op">|&gt;</span> <span class="dt">Maybe</span><span class="op">.</span><span class="fu">andThen</span> (<span class="dt">Chap10</span><span class="op">.</span><span class="fu">eval</span> [])</span>
<span id="cb12-6"><a href="#cb12-6"></a><span class="op">|</span>   <span class="op">|&gt;</span> <span class="dt">Maybe</span><span class="op">.</span><span class="fu">map</span> <span class="dt">Chap10</span><span class="op">.</span><span class="fu">display</span></span>
<span id="cb12-7"><a href="#cb12-7"></a><span class="op">|</span>   </span>
<span id="cb12-8"><a href="#cb12-8"></a><span class="dt">Just</span> <span class="st">&quot;false&quot;</span> : <span class="dt">Maybe</span> <span class="dt">String</span></span></code></pre></div>
<p>完璧だ．</p>
<h2 id="おまけ-spa">おまけ: SPA</h2>
<p>前回整理したので基本的に足していくだけだ． ただし，型検査を <code>Calculus</code> に加える必要がある:</p>
<div class="sourceCode" id="cb13"><pre class="sourceCode elm"><code class="sourceCode elm"><span id="cb13-1"><a href="#cb13-1"></a><span class="kw">module</span> <span class="dt">TaPL</span><span class="op">.</span><span class="dt">Calculus</span> <span class="kw">exposing</span> (<span class="op">..</span>)</span>
<span id="cb13-2"><a href="#cb13-2"></a></span>
<span id="cb13-3"><a href="#cb13-3"></a><span class="kw">type</span> <span class="kw">alias</span> <span class="dt">Calculus</span> <span class="fu">ctx</span> <span class="fu">t</span> <span class="fu">ty</span> <span class="op">=</span></span>
<span id="cb13-4"><a href="#cb13-4"></a>    { <span class="fu">parse</span> : <span class="dt">String</span> <span class="op">-&gt;</span> <span class="dt">Result</span> (<span class="dt">List</span> <span class="dt">Parser</span><span class="op">.</span><span class="dt">DeadEnd</span>) <span class="fu">t</span></span>
<span id="cb13-5"><a href="#cb13-5"></a>    <span class="op">,</span> <span class="fu">typeof</span> : <span class="dt">Maybe</span> (<span class="fu">ctx</span> <span class="op">-&gt;</span> <span class="fu">t</span> <span class="op">-&gt;</span> <span class="dt">Maybe</span> <span class="fu">ty</span>) <span class="co">-- 追加</span></span>
<span id="cb13-6"><a href="#cb13-6"></a>    <span class="op">,</span> <span class="fu">eval1</span> : <span class="fu">ctx</span> <span class="op">-&gt;</span> <span class="fu">t</span> <span class="op">-&gt;</span> <span class="dt">Maybe</span> <span class="fu">t</span></span>
<span id="cb13-7"><a href="#cb13-7"></a>    <span class="op">,</span> <span class="fu">display</span> : <span class="fu">t</span> <span class="op">-&gt;</span> <span class="dt">String</span></span>
<span id="cb13-8"><a href="#cb13-8"></a>    <span class="op">,</span> <span class="fu">init</span> : <span class="fu">ctx</span></span>
<span id="cb13-9"><a href="#cb13-9"></a>    <span class="op">,</span> <span class="fu">logs</span> : <span class="dt">List</span> <span class="fu">t</span></span>
<span id="cb13-10"><a href="#cb13-10"></a>    }</span>
<span id="cb13-11"><a href="#cb13-11"></a></span>
<span id="cb13-12"><a href="#cb13-12"></a><span class="fu">eval1</span> : <span class="dt">Calculus</span> <span class="fu">ctx</span> <span class="fu">t</span> <span class="fu">ty</span> <span class="op">-&gt;</span> <span class="dt">Maybe</span> (<span class="dt">Calculus</span> <span class="fu">ctx</span> <span class="fu">t</span> <span class="fu">ty</span>)</span>
<span id="cb13-13"><a href="#cb13-13"></a><span class="fu">typecheck</span> : <span class="dt">Calculus</span> <span class="fu">ctx</span> <span class="fu">t</span> <span class="fu">ty</span> <span class="op">-&gt;</span> <span class="dt">Bool</span></span>
<span id="cb13-14"><a href="#cb13-14"></a><span class="fu">parse</span> : <span class="dt">String</span> <span class="op">-&gt;</span> <span class="dt">Calculus</span> <span class="fu">ctx</span> <span class="fu">t</span> <span class="fu">ty</span> <span class="op">-&gt;</span> <span class="dt">Result</span> (<span class="dt">List</span> <span class="dt">Parser</span><span class="op">.</span><span class="dt">DeadEnd</span>) (<span class="dt">Calculus</span> <span class="fu">ctx</span> <span class="fu">t</span> <span class="fu">ty</span>)</span>
<span id="cb13-15"><a href="#cb13-15"></a><span class="fu">display</span> : <span class="dt">Calculus</span> <span class="fu">ctx</span> <span class="fu">t</span> <span class="fu">ty</span> <span class="op">-&gt;</span> <span class="dt">List</span> <span class="dt">String</span></span></code></pre></div>
<p>あとは <code>chap10</code> の定義も追加するだけ:</p>
<div class="sourceCode" id="cb14"><pre class="sourceCode elm"><code class="sourceCode elm"><span id="cb14-1"><a href="#cb14-1"></a><span class="kw">module</span> <span class="dt">TaPL</span> <span class="kw">exposing</span> (<span class="op">..</span>)</span>
<span id="cb14-2"><a href="#cb14-2"></a></span>
<span id="cb14-3"><a href="#cb14-3"></a><span class="kw">type</span> <span class="dt">Chapter</span></span>
<span id="cb14-4"><a href="#cb14-4"></a>    <span class="op">=</span> <span class="dt">Chap0</span></span>
<span id="cb14-5"><a href="#cb14-5"></a>    <span class="op">|</span> <span class="dt">Chap4</span> (<span class="dt">Calculus</span> () <span class="dt">Chap4</span><span class="op">.</span><span class="dt">Term</span> <span class="dt">Never</span>)</span>
<span id="cb14-6"><a href="#cb14-6"></a>    <span class="op">|</span> <span class="dt">Chap7</span> (<span class="dt">Calculus</span> <span class="dt">Chap7</span><span class="op">.</span><span class="dt">Context</span> <span class="dt">Chap7</span><span class="op">.</span><span class="dt">Term</span> <span class="dt">Never</span>)</span>
<span id="cb14-7"><a href="#cb14-7"></a>    <span class="op">|</span> <span class="dt">Chap10</span> (<span class="dt">Calculus</span> <span class="dt">Chap10</span><span class="op">.</span><span class="dt">Context</span> <span class="dt">Chap10</span><span class="op">.</span><span class="dt">Term</span> <span class="dt">Chap10</span><span class="op">.</span><span class="dt">Ty</span>)</span>
<span id="cb14-8"><a href="#cb14-8"></a></span>
<span id="cb14-9"><a href="#cb14-9"></a><span class="fu">init</span> : <span class="dt">String</span> <span class="op">-&gt;</span> <span class="dt">Chapter</span></span>
<span id="cb14-10"><a href="#cb14-10"></a><span class="fu">init</span> <span class="fu">s</span> <span class="op">=</span></span>
<span id="cb14-11"><a href="#cb14-11"></a>    <span class="cf">case</span> <span class="fu">s</span> <span class="cf">of</span></span>
<span id="cb14-12"><a href="#cb14-12"></a>        <span class="st">&quot;chap4&quot;</span> <span class="op">-&gt;</span> <span class="op">...</span></span>
<span id="cb14-13"><a href="#cb14-13"></a></span>
<span id="cb14-14"><a href="#cb14-14"></a>        <span class="st">&quot;chap7&quot;</span> <span class="op">-&gt;</span> <span class="op">...</span></span>
<span id="cb14-15"><a href="#cb14-15"></a></span>
<span id="cb14-16"><a href="#cb14-16"></a>        <span class="co">-- 追加</span></span>
<span id="cb14-17"><a href="#cb14-17"></a>        <span class="st">&quot;chap10&quot;</span> <span class="op">-&gt;</span></span>
<span id="cb14-18"><a href="#cb14-18"></a>            <span class="dt">Chap10</span></span>
<span id="cb14-19"><a href="#cb14-19"></a>                { <span class="fu">eval1</span> <span class="op">=</span> <span class="dt">Chap10</span><span class="op">.</span><span class="fu">eval1</span></span>
<span id="cb14-20"><a href="#cb14-20"></a>                <span class="op">,</span> <span class="fu">display</span> <span class="op">=</span> <span class="dt">Chap10</span><span class="op">.</span><span class="fu">display</span></span>
<span id="cb14-21"><a href="#cb14-21"></a>                <span class="op">,</span> <span class="fu">parse</span> <span class="op">=</span> <span class="dt">Chap10</span><span class="op">.</span><span class="fu">parse</span></span>
<span id="cb14-22"><a href="#cb14-22"></a>                <span class="op">,</span> <span class="fu">init</span> <span class="op">=</span> []</span>
<span id="cb14-23"><a href="#cb14-23"></a>                <span class="op">,</span> <span class="fu">logs</span> <span class="op">=</span> []</span>
<span id="cb14-24"><a href="#cb14-24"></a>                <span class="op">,</span> <span class="fu">syntax</span> <span class="op">=</span> <span class="dt">Chap10</span><span class="op">.</span><span class="fu">syntax</span></span>
<span id="cb14-25"><a href="#cb14-25"></a>                <span class="op">,</span> <span class="fu">typeof</span> <span class="op">=</span> <span class="dt">Just</span> <span class="dt">Chap10</span><span class="op">.</span><span class="fu">typeof</span></span>
<span id="cb14-26"><a href="#cb14-26"></a>                }</span>
<span id="cb14-27"><a href="#cb14-27"></a></span>
<span id="cb14-28"><a href="#cb14-28"></a>        <span class="fu">_</span> <span class="op">-&gt;</span></span>
<span id="cb14-29"><a href="#cb14-29"></a>            <span class="dt">Chap0</span></span>
<span id="cb14-30"><a href="#cb14-30"></a></span>
<span id="cb14-31"><a href="#cb14-31"></a><span class="fu">parse</span> : <span class="dt">Chapter</span> <span class="op">-&gt;</span> <span class="dt">String</span> <span class="op">-&gt;</span> <span class="dt">Result</span> (<span class="dt">List</span> <span class="dt">Parser</span><span class="op">.</span><span class="dt">DeadEnd</span>) <span class="dt">Chapter</span></span>
<span id="cb14-32"><a href="#cb14-32"></a><span class="fu">eval1</span> : <span class="dt">Chapter</span> <span class="op">-&gt;</span> <span class="dt">Maybe</span> <span class="dt">Chapter</span></span>
<span id="cb14-33"><a href="#cb14-33"></a><span class="fu">typecheck</span> : <span class="dt">Chapter</span> <span class="op">-&gt;</span> <span class="dt">Bool</span></span>
<span id="cb14-34"><a href="#cb14-34"></a><span class="fu">display</span> : <span class="dt">Chapter</span> <span class="op">-&gt;</span> <span class="dt">List</span> <span class="dt">String</span></span></code></pre></div>
<p>あとはこれらを <code>Main</code> でいい感じに呼び出すだけ．</p>
<h2 id="おしまい">おしまい</h2>
<p>次回はいつになることやら．</p>
  </div>]]></summary>
</entry>
<entry>
    <title>久しぶりに thank_you_stars をビルドする</title>
    <link href="https://matsubara0507.github.io/posts/2019-12-08-re-create-thank-you-stars-ver-elixir.html" />
    <id>https://matsubara0507.github.io/posts/2019-12-08-re-create-thank-you-stars-ver-elixir.html</id>
    <published>2019-12-08T00:00:00Z</published>
    <updated>2019-12-08T00:00:00Z</updated>
    <summary type="html"><![CDATA[<div class="post-content" itemprop="articleBody">
    <p>本記事は「<a href="https://qiita.com/advent-calendar/2019/elixir">Elixir Advent Calendar 2019</a>」の8日目の記事です．</p>
<h1 id="section"></h1>
<p>学生の頃アルバイトした時(2年前)に初めて Elixir を触って，その集大成として作った(嘘) OSS をヒッサビッサにビルドチャレンジしてみたという話です．</p>
<ul>
<li>OSS: <a href="https://github.com/matsubara0507/thank-you-stars">matsubara0507/thank-you-stars</a> (elixir バージョン)</li>
<li>当時書いたブログ記事: <a href="https://matsubara0507.github.io/posts/2017-10-01-create-thank-you-stars-ver-elixir.html">Elixir ライブラリにスターを送るツール thank-you-stars を作ってみました - ひげメモ</a></li>
</ul>
<h2 id="思い出す">思い出す</h2>
<p>そもそもどういうプログラムだったかってのは覚えてる． 当時何故か流行ってた，自身のプロジェクトの依存ライブラリに GitHub Star を送る CLI ツールの Elixir 版だ．</p>
<p>で，こいつはどの環境でビルドしていたのか:</p>
<ul>
<li>Elixir のバージョンは多分 1.4 (ref. <a href="https://github.com/matsubara0507/thank-you-stars/blob/v0.1.0/mix.exs">mix.ex</a>)</li>
<li>Erlang/OTP のバージョン: 多分 19.x？ (手元にあったのがそれ)</li>
</ul>
<p>依存パッケージのバージョンを見比べてみてもめっちゃ古いのがわかる． 2年ってすごいんだなぁ．</p>
<h2 id="最新バージョンに対応する">最新バージョンに対応する</h2>
<p>まずはここから．</p>
<h3 id="最新-elixir-erlangotp-のインストール">最新 Elixir &amp; Erlang/OTP のインストール</h3>
<p>Elixir は長いこと触ってないので，そもそも手元に最新の環境がない． 昔はどうやってたかな，と遠い記憶を辿って見たがおそらく <code>exenv</code> と <code>erlenv</code> を使っていたはず:</p>
<ul>
<li><a href="https://github.com/exenv/exenv">exenv/exenv</a></li>
<li><a href="https://github.com/talentdeficit/erlenv">talentdeficit/erlenv</a> (いつのまにかアーカイブになってるのね)</li>
</ul>
<p>それぞれ別の Elixir や Erlang/OTP を取ってくるには <a href="https://github.com/mururu/elixir-build">elixir-build</a> や <a href="https://github.com/matsubara0507/erlang-build">erlang-build</a> を使う． 試しに手元でやってみたら，どうやら v20.x 以降の Erlang/OTP をビルドするには OpenSSL 1.1 を使わないといけないのだが，手元の OS が古くてできない（このためだけに更新したくない）． そして，最新の Elixir を使うには Erlang/OTP の v20.x 以降が必要っぽい． 詰んだ（？）．</p>
<p>もちろん，今ならもっと他の方法でいろんなバージョンの Elixir や Erlang/OTP をイストールする方法はあるだろう． しかし，できれば手元の環境を汚したくない． ということで Docker に甘えた（ぇ</p>
<pre><code>$ docker run --rm -v `pwd`:/work -it elixir:1.9.4 /bin/bash -c &quot;cd /work &amp;&amp; mix test&quot;</code></pre>
<h3 id="依存パケッケージの更新">依存パケッケージの更新</h3>
<p>とりあえず，Hex で最新のバージョンを取ってきて <code>mix.exs</code> を書き換えた． もちろん，すんなりビルドはできない． しかし，珍しくちゃんとテストを書いていたので，テストしつつ最新のバージョンに<a href="https://github.com/matsubara0507/thank-you-stars/commit/1574a16dec5ea5c7e8a4e39dbae4bf4729e8cfb6">合わせていく</a>:</p>
<ul>
<li><a href="https://github.com/CrowdHailer/OK/pull/57"><code>OK.with</code> は使えなくなっているので利用しない書き方に変更</a></li>
<li><a href="https://github.com/edgurgel/tentacat/pull/132"><code>Tentacat.put</code> の返り値のタプルサイズが変わっていた</a></li>
<li><a href="https://github.com/devinus/poison/commit/a4208a6252f4e58fbcc8d9fd2f4f64c99e974cc8"><code>Poison.decode</code> のエラーの返り値のタプルサイズが変わった</a></li>
<li><a href="https://github.com/elixir-lang/elixir/pull/7838"><code>[ &quot;hoge&quot;: 123 ]</code> こういう形式のキーワードハッシュは警告が出るようになった</a></li>
</ul>
<p>パターンマッチしてたタプルのサイズが変わるのはきつい．</p>
<h3 id="mix-format">mix format</h3>
<p>Elixir 1.6 からフォーマッターがエコシステムに入った． なので <code>mix format</code> をかけてみる．</p>
<p><code>mix format</code> をかけるには設定ファイル <code>.formatter.exs</code> を置かないと動作しないようだ（珍しい）． なので，公式ドキュメントにあったものをそのまま<a href="https://github.com/matsubara0507/thank-you-stars/commit/700910b927ff1abbd5701a177c83e0671ddffe29">コピペして <code>mix format</code> をかけた</a>．</p>
<h2 id="github-actions">GitHub Actions</h2>
<p>最近流行りだからね．</p>
<ul>
<li><a href="https://github.com/matsubara0507/thank-you-stars/pull/1">Add GitHub Actions config by matsubara0507 · Pull Request #1 · matsubara0507/thank-you-stars</a></li>
</ul>
<p>Elixir や Erlang/OTP のセットアップには <a href="https://github.com/actions/setup-elixir"><code>actions/setup-elixir</code></a> を使う． 色々と試して，最終的なジョブの設定はこんな感じ:</p>
<div class="sourceCode" id="cb2"><pre class="sourceCode yaml"><code class="sourceCode yaml"><span id="cb2-1"><a href="#cb2-1"></a><span class="co"># ほんとんど actions/elixir-setup の例のまんま</span></span>
<span id="cb2-2"><a href="#cb2-2"></a><span class="fu">jobs</span><span class="kw">:</span></span>
<span id="cb2-3"><a href="#cb2-3"></a><span class="at">  </span><span class="fu">build</span><span class="kw">:</span></span>
<span id="cb2-4"><a href="#cb2-4"></a><span class="at">    </span><span class="fu">runs-on</span><span class="kw">:</span><span class="at"> ubuntu-16.04</span></span>
<span id="cb2-5"><a href="#cb2-5"></a><span class="at">    </span><span class="fu">name</span><span class="kw">:</span><span class="at"> OTP ${{matrix.otp}} / Elixir ${{matrix.elixir}}</span></span>
<span id="cb2-6"><a href="#cb2-6"></a></span>
<span id="cb2-7"><a href="#cb2-7"></a><span class="at">    </span><span class="fu">strategy</span><span class="kw">:</span></span>
<span id="cb2-8"><a href="#cb2-8"></a><span class="at">      </span><span class="fu">matrix</span><span class="kw">:</span></span>
<span id="cb2-9"><a href="#cb2-9"></a><span class="at">        </span><span class="fu">otp</span><span class="kw">:</span><span class="at"> </span><span class="kw">[</span><span class="at">21.x</span><span class="kw">,</span><span class="at"> 22.x</span><span class="kw">]</span><span class="co">      # 20.x は ubuntu 16,18 には無い様子</span></span>
<span id="cb2-10"><a href="#cb2-10"></a><span class="at">        </span><span class="fu">elixir</span><span class="kw">:</span><span class="at"> </span><span class="kw">[</span><span class="at">1.8.x</span><span class="kw">,</span><span class="at"> 1.9.x</span><span class="kw">]</span></span>
<span id="cb2-11"><a href="#cb2-11"></a><span class="at">      </span><span class="fu">fail-fast</span><span class="kw">:</span><span class="at"> </span><span class="ch">false</span><span class="co">         # マトリックスのどれかのジョブが落ちても他のジョブは実行をやめない</span></span>
<span id="cb2-12"><a href="#cb2-12"></a></span>
<span id="cb2-13"><a href="#cb2-13"></a><span class="at">    </span><span class="fu">steps</span><span class="kw">:</span></span>
<span id="cb2-14"><a href="#cb2-14"></a><span class="at">    </span><span class="kw">-</span><span class="at"> </span><span class="fu">uses</span><span class="kw">:</span><span class="at"> actions/checkout@v1.0.0</span></span>
<span id="cb2-15"><a href="#cb2-15"></a><span class="at">      </span><span class="fu">with</span><span class="kw">:</span></span>
<span id="cb2-16"><a href="#cb2-16"></a><span class="at">        </span><span class="fu">fetch-depth</span><span class="kw">:</span><span class="at"> </span><span class="dv">1</span></span>
<span id="cb2-17"><a href="#cb2-17"></a><span class="at">    </span><span class="kw">-</span><span class="at"> </span><span class="fu">uses</span><span class="kw">:</span><span class="at"> actions/setup-elixir@v1.0.0</span></span>
<span id="cb2-18"><a href="#cb2-18"></a><span class="at">      </span><span class="fu">with</span><span class="kw">:</span></span>
<span id="cb2-19"><a href="#cb2-19"></a><span class="at">        </span><span class="fu">otp-version</span><span class="kw">:</span><span class="at"> ${{matrix.otp}}</span></span>
<span id="cb2-20"><a href="#cb2-20"></a><span class="at">        </span><span class="fu">elixir-version</span><span class="kw">:</span><span class="at"> ${{matrix.elixir}}</span></span>
<span id="cb2-21"><a href="#cb2-21"></a><span class="at">    </span><span class="kw">-</span><span class="at"> </span><span class="fu">run</span><span class="kw">:</span><span class="at"> mix deps.get</span></span>
<span id="cb2-22"><a href="#cb2-22"></a><span class="at">    </span><span class="kw">-</span><span class="at"> </span><span class="fu">run</span><span class="kw">:</span><span class="at"> mix test</span></span></code></pre></div>
<p><code>mix.exs</code> でどうやって複数の Elixir のバージョンを許容するんだ？と結構調べたけど，単純にボトムのバージョンを <code>elixir: ~&gt; ...</code> で指定すればいいだけだった（普通 <code>&gt;=</code> じゃ無いの．．．）．</p>
<p>キャッシュの導入も考えたが，たかが数分に入れてもしょうがないなってなってやめた．</p>
<h2 id="おまけ-依存パケージを減らす大作戦">おまけ: 依存パケージを減らす大作戦</h2>
<p>依存パッケージがなくなると <code>mix archive.install</code> で入れることができるはず． なので，もともと依存パッケージを無くしてみたかった． 今回，バージョンアップを追うのも大変だったし，せっかくのなので可能な限り減らしてみた:</p>
<ul>
<li><a href="https://github.com/matsubara0507/thank-you-stars/pull/2">Remove OK library by matsubara0507 · Pull Request #2 · matsubara0507/thank-you-stars</a></li>
<li><a href="https://github.com/matsubara0507/thank-you-stars/pull/3">Remove tentacat library by matsubara0507 · Pull Request #3 · matsubara0507/thank-you-stars</a></li>
<li><a href="https://github.com/matsubara0507/thank-you-stars/pull/4">Remove poison library by matsubara0507 · Pull Request #4 · matsubara0507/thank-you-stars</a></li>
</ul>
<p>3/4 減らせました． 残るは鬼門 <code>httpoison</code> だけ． 果たしてできるのか．</p>
<h3 id="vs.-ok">vs. <code>ok</code></h3>
<p><code>ok</code> パッケージはいわゆる <code>Either</code> モナドだ． <code>{:ok, hoge} | {:error, fuga}</code> のような型を簡単に扱うためのマクロを提供している．</p>
<p>これらの型の場合，Elixir の特徴であるパイプ演算子をうまく連結できない． なので，Elm 流に <code>and_then</code> 関数を用意して，それで賄うようにした:</p>
<div class="sourceCode" id="cb3"><pre class="sourceCode elixir"><code class="sourceCode elixir"><span id="cb3-1"><a href="#cb3-1"></a>  <span class="co"># Result a -&gt; (a -&gt; Result b) -&gt; Result b</span></span>
<span id="cb3-2"><a href="#cb3-2"></a>  <span class="co"># ただし Result a = {:ok, a} | {:error, e}</span></span>
<span id="cb3-3"><a href="#cb3-3"></a>  <span class="kw">defp</span> and_then({<span class="va">:ok</span>, v}, f), <span class="kw">do</span>: f<span class="op">.</span>(v)</span>
<span id="cb3-4"><a href="#cb3-4"></a>  <span class="kw">defp</span> and_then(err <span class="op">=</span> {<span class="va">:error</span>, _}, _), <span class="kw">do</span>: err</span>
<span id="cb3-5"><a href="#cb3-5"></a></span>
<span id="cb3-6"><a href="#cb3-6"></a>  <span class="co"># 使用例</span></span>
<span id="cb3-7"><a href="#cb3-7"></a>  <span class="kw">def</span> star_package(package_name, client) <span class="kw">do</span></span>
<span id="cb3-8"><a href="#cb3-8"></a>    fetch_package_github_url(package_name)</span>
<span id="cb3-9"><a href="#cb3-9"></a>    <span class="op">|&gt;</span> and_then(<span class="op">&amp;</span>star_github_package(<span class="op">&amp;</span><span class="dv">1</span>, client)) <span class="co"># ココ</span></span>
<span id="cb3-10"><a href="#cb3-10"></a>    <span class="op">|&gt;</span> <span class="kw">case</span> <span class="kw">do</span></span>
<span id="cb3-11"><a href="#cb3-11"></a>      {<span class="va">:ok</span>, url} <span class="op">-&gt;</span> <span class="st">&quot;Starred! </span><span class="ot">#{</span>url<span class="ot">}</span><span class="st">&quot;</span></span>
<span id="cb3-12"><a href="#cb3-12"></a>      {<span class="va">:error</span>, url} <span class="op">-&gt;</span> <span class="st">&quot;Error    </span><span class="ot">#{</span>url<span class="ot">}</span><span class="st">&quot;</span></span>
<span id="cb3-13"><a href="#cb3-13"></a>    <span class="kw">end</span></span>
<span id="cb3-14"><a href="#cb3-14"></a>  <span class="kw">end</span></span></code></pre></div>
<h3 id="vs.-tentacat">vs. <code>tentacat</code></h3>
<p>単純に HTTP リクエストの PUT を認証付きでしているだけなので，<code>httpoison</code> に書き直した． まぁ面倒を後に丸投げてるだけだが笑</p>
<div class="sourceCode" id="cb4"><pre class="sourceCode elixir"><code class="sourceCode elixir"><span id="cb4-1"><a href="#cb4-1"></a>  <span class="kw">def</span> star_github_package(url, token) <span class="kw">do</span></span>
<span id="cb4-2"><a href="#cb4-2"></a>    <span class="cn">URI</span><span class="op">.</span>parse(url)</span>
<span id="cb4-3"><a href="#cb4-3"></a>    <span class="op">|&gt;</span> <span class="cn">Map</span><span class="op">.</span>get(<span class="va">:path</span>, <span class="st">&quot;&quot;</span>)</span>
<span id="cb4-4"><a href="#cb4-4"></a>    <span class="op">|&gt;</span> (<span class="op">&amp;</span>put_github_api(<span class="st">&quot;user/starred</span><span class="ot">#{</span><span class="op">&amp;</span><span class="dv">1</span><span class="ot">}</span><span class="st">&quot;</span>, token))<span class="op">.</span>()</span>
<span id="cb4-5"><a href="#cb4-5"></a>    <span class="op">|&gt;</span> and_then(<span class="op">&amp;</span>map_get_with_ok(<span class="op">&amp;</span><span class="dv">1</span>, <span class="va">:status_code</span>))</span>
<span id="cb4-6"><a href="#cb4-6"></a>    <span class="op">|&gt;</span> <span class="kw">case</span> <span class="kw">do</span></span>
<span id="cb4-7"><a href="#cb4-7"></a>      {<span class="va">:ok</span>, <span class="dv">204</span>} <span class="op">-&gt;</span> {<span class="va">:ok</span>, url} <span class="co"># もちろん返り値も変わる</span></span>
<span id="cb4-8"><a href="#cb4-8"></a>      _ <span class="op">-&gt;</span> {<span class="va">:error</span>, url}</span>
<span id="cb4-9"><a href="#cb4-9"></a>    <span class="kw">end</span></span>
<span id="cb4-10"><a href="#cb4-10"></a>  <span class="kw">end</span></span>
<span id="cb4-11"><a href="#cb4-11"></a></span>
<span id="cb4-12"><a href="#cb4-12"></a>  <span class="kw">defp</span> put_github_api(path, token) <span class="kw">do</span></span>
<span id="cb4-13"><a href="#cb4-13"></a>    headers <span class="op">=</span> [{<span class="st">&quot;Authorization&quot;</span>, <span class="st">&quot;token </span><span class="ot">#{</span>token<span class="ot">}</span><span class="st">&quot;</span>}]</span>
<span id="cb4-14"><a href="#cb4-14"></a>    <span class="cn">HTTPoison</span><span class="op">.</span>put(<span class="st">&quot;https://api.github.com/</span><span class="ot">#{</span>path<span class="ot">}</span><span class="st">&quot;</span>, <span class="st">&quot;&quot;</span>, headers)</span>
<span id="cb4-15"><a href="#cb4-15"></a>  <span class="kw">end</span></span></code></pre></div>
<h3 id="vs.-poison">vs. <code>poison</code></h3>
<p><code>poison</code> は JSON デコーダー・エンコーダーだ． GitHub トークンを設定(JSON)から取得したり，Hex から取得したライブラリの設定(JSON)をパースするのに使う．</p>
<p>これを無くすにはどうするか．簡単ですね． <strong>JSON パーサーを自作すればいいのです</strong>．</p>
<div class="sourceCode" id="cb5"><pre class="sourceCode elixir"><code class="sourceCode elixir"><span id="cb5-1"><a href="#cb5-1"></a><span class="kw">defmodule</span> <span class="cn">ThankYouStars</span><span class="op">.</span><span class="cn">JSON</span> <span class="kw">do</span></span>
<span id="cb5-2"><a href="#cb5-2"></a>  <span class="im">alias</span> <span class="cn">ThankYouStars</span><span class="op">.</span><span class="cn">Result</span>, <span class="va">as:</span> <span class="cn">Result</span></span>
<span id="cb5-3"><a href="#cb5-3"></a></span>
<span id="cb5-4"><a href="#cb5-4"></a>  <span class="co"># String をもらって JSON として Map や Bool，List などを返す</span></span>
<span id="cb5-5"><a href="#cb5-5"></a>  <span class="kw">def</span> decode(str) <span class="kw">do</span></span>
<span id="cb5-6"><a href="#cb5-6"></a>    match_value(%{<span class="va">rest:</span> <span class="cn">String</span><span class="op">.</span>trim(str), <span class="va">result:</span> %{}})</span>
<span id="cb5-7"><a href="#cb5-7"></a>    <span class="op">|&gt;</span> <span class="kw">case</span> <span class="kw">do</span></span>
<span id="cb5-8"><a href="#cb5-8"></a>      {<span class="va">:ok</span>, %{<span class="va">rest:</span> <span class="st">&quot;&quot;</span>, <span class="va">result:</span> result}} <span class="op">-&gt;</span> <span class="cn">Result</span><span class="op">.</span>success(result)</span>
<span id="cb5-9"><a href="#cb5-9"></a>      {_, %{<span class="va">rest:</span> rest}} <span class="op">-&gt;</span> <span class="cn">Result</span><span class="op">.</span>failure(rest)</span>
<span id="cb5-10"><a href="#cb5-10"></a>    <span class="kw">end</span></span>
<span id="cb5-11"><a href="#cb5-11"></a>  <span class="kw">end</span></span>
<span id="cb5-12"><a href="#cb5-12"></a></span>
<span id="cb5-13"><a href="#cb5-13"></a>  <span class="kw">defp</span> match_value(stat) <span class="kw">do</span></span>
<span id="cb5-14"><a href="#cb5-14"></a>    trim_leading(stat)</span>
<span id="cb5-15"><a href="#cb5-15"></a>    <span class="op">|&gt;</span> match_value_body()</span>
<span id="cb5-16"><a href="#cb5-16"></a>    <span class="op">|&gt;</span> <span class="cn">Result</span><span class="op">.</span>map(<span class="op">&amp;</span>trim_leading(<span class="op">&amp;</span><span class="dv">1</span>))</span>
<span id="cb5-17"><a href="#cb5-17"></a>  <span class="kw">end</span></span>
<span id="cb5-18"><a href="#cb5-18"></a></span>
<span id="cb5-19"><a href="#cb5-19"></a>  <span class="co"># 無駄にパターンマッチとパイプを使ってみることにした(Elixir っぽい？)</span></span>
<span id="cb5-20"><a href="#cb5-20"></a>  <span class="kw">defp</span> match_value_body(stat <span class="op">=</span> %{<span class="va">rest:</span> <span class="st">&quot;true&quot;</span> <span class="op">&lt;&gt;</span> rest}) <span class="kw">do</span></span>
<span id="cb5-21"><a href="#cb5-21"></a>    <span class="cn">Map</span><span class="op">.</span>put(stat, <span class="va">:result</span>, <span class="cn">true</span>)</span>
<span id="cb5-22"><a href="#cb5-22"></a>    <span class="op">|&gt;</span> <span class="cn">Map</span><span class="op">.</span>put(<span class="va">:rest</span>, rest)</span>
<span id="cb5-23"><a href="#cb5-23"></a>    <span class="op">|&gt;</span> <span class="cn">Result</span><span class="op">.</span>success()</span>
<span id="cb5-24"><a href="#cb5-24"></a>  <span class="kw">end</span></span>
<span id="cb5-25"><a href="#cb5-25"></a></span>
<span id="cb5-26"><a href="#cb5-26"></a>  <span class="op">...</span></span></code></pre></div>
<p>JSON パーサーは比較的簡単だ(細かいところに目をつぶれば)． なんせ構文の定義が <a href="https://www.json.org/json-en.html">json.org</a> というサイトに書いてあるから． また，テストスイートも <a href="https://github.com/nst/JSONTestSuite">nst/JSONTestSuite</a> というところに置いてある．</p>
<h1 id="section-1"></h1>
<p>今回はガッっと一晩で雑に作ったので浮動小数点の <code>e</code> 記法やユニコードのエスケープ記法 <code>\u</code> なんかの実装は無視した（まぁ多分すぐできるけど）． また，Elixir ということで積極的にパターンマッチングとパイプを利用して実装している． 興味がある人は PR を見てください（汚いのでリファクタリングしたい）．</p>
<p>もう少し細かい紹介は気が向いたらするやもしれない．</p>
<h2 id="おしまい">おしまい</h2>
<p><code>httpoison</code> も無くしたいなぁ．</p>
  </div>]]></summary>
</entry>
<entry>
    <title>Elm で作る TaPL のラムダ計算（その２）</title>
    <link href="https://matsubara0507.github.io/posts/2019-12-07-tapl-with-elm-part2.html" />
    <id>https://matsubara0507.github.io/posts/2019-12-07-tapl-with-elm-part2.html</id>
    <published>2019-12-07T00:00:00Z</published>
    <updated>2019-12-07T00:00:00Z</updated>
    <summary type="html"><![CDATA[<div class="post-content" itemprop="articleBody">
    <p>本記事は「<a href="https://qiita.com/advent-calendar/2019/lang_dev">言語実装 Advent Calendar 2019</a>」の7日目の記事です．</p>
<h1 id="section"></h1>
<p>表題の通り，TaPL という書籍で紹介されているプログラミング言語の実装例を Elm でやってみたという話です（その２）． <a href="https://matsubara0507.github.io/posts/2019-12-06-tapl-with-elm-part1.html">その１</a>はこちら．</p>
<ul>
<li>第4章 算術式のML実装</li>
<li>第7章 ラムダ計算の ML 実装 (本記事はココ)
<ul>
<li>型無しラムダ計算を実装</li>
<li>以降はこれを拡張していく(たしか)</li>
</ul></li>
<li>第10章 単純型のML実装
<ul>
<li>7章のを型付きラムダ計算にする</li>
</ul></li>
<li>第17章 部分型付けの ML 実装</li>
<li>第25章 System F の ML 実装
<ul>
<li>最後に型の多相性を追加</li>
</ul></li>
</ul>
<p>実装は全て下記のリポジトリにあげています:</p>
<ul>
<li><a href="https://github.com/matsubara0507/ELaMbda">matsubara0507/ELaMbda - GitHub</a></li>
</ul>
<p>また，前回同様に<a href="https://matsubara0507.github.io/ELaMbda/?chap=chap7">Web ブラウザから遊べるようになってます</a>．</p>
<p><a href="https://matsubara0507.github.io/ELaMbda/?chap=chap7&amp;exp=(\x%20.%20x%20x)%20(\x%20.%20x%20x)"><img src="/assets/tapl-with-elm/chap7.jpg"></img></a></p>
<h2 id="第7章-ラムタ計算の-ml-実装">第7章 ラムダ計算の ML 実装</h2>
<p>さぁいよいよみんな大好き(型なし)ラムダ計算です． ちなみに，ラムダ計算の数理論理学的な議論は5章でしている．</p>
<h3 id="構文規則">構文規則</h3>
<p>構文規則はこんな感じ:</p>
<div class="sourceCode" id="cb1"><pre class="sourceCode txt"><code class="sourceCode default"><span id="cb1-1"><a href="#cb1-1"></a>t := x       [変数]</span>
<span id="cb1-2"><a href="#cb1-2"></a>   | \x . t  [ラムダ抽象]</span>
<span id="cb1-3"><a href="#cb1-3"></a>   | t t     [関数適用]</span>
<span id="cb1-4"><a href="#cb1-4"></a></span>
<span id="cb1-5"><a href="#cb1-5"></a>v := \x . t</span></code></pre></div>
<p>なんと前回の算術式より構文規則がシンプル． ラムダ計算というのは「関数」しかないプログラミング言語で，ラムダ抽象というのが最近の多くの言語で導入されている無名関数や関数オブジェクトと言われるものだ（たぶん）．</p>
<p>まずはこれを Elm 上の型として定義する:</p>
<div class="sourceCode" id="cb2"><pre class="sourceCode elm"><code class="sourceCode elm"><span id="cb2-1"><a href="#cb2-1"></a><span class="kw">type</span> <span class="dt">Term</span></span>
<span id="cb2-2"><a href="#cb2-2"></a>    <span class="op">=</span> <span class="dt">TmVar</span> <span class="dt">Int</span> <span class="dt">Int</span></span>
<span id="cb2-3"><a href="#cb2-3"></a>    <span class="op">|</span> <span class="dt">TmAbs</span> <span class="dt">String</span> <span class="dt">Term</span></span>
<span id="cb2-4"><a href="#cb2-4"></a>    <span class="op">|</span> <span class="dt">TmApp</span> <span class="dt">Term</span> <span class="dt">Term</span></span>
<span id="cb2-5"><a href="#cb2-5"></a></span>
<span id="cb2-6"><a href="#cb2-6"></a><span class="co">-- 値はラムダ抽象だけ</span></span>
<span id="cb2-7"><a href="#cb2-7"></a><span class="fu">isval</span> : <span class="dt">Context</span> <span class="op">-&gt;</span> <span class="dt">Term</span> <span class="op">-&gt;</span> <span class="dt">Bool</span></span>
<span id="cb2-8"><a href="#cb2-8"></a><span class="fu">isval</span> <span class="fu">_</span> <span class="fu">t</span> <span class="op">=</span></span>
<span id="cb2-9"><a href="#cb2-9"></a>    <span class="cf">case</span> <span class="fu">t</span> <span class="cf">of</span></span>
<span id="cb2-10"><a href="#cb2-10"></a>        <span class="dt">TmAbs</span> <span class="fu">_</span> <span class="fu">_</span> <span class="op">-&gt;</span></span>
<span id="cb2-11"><a href="#cb2-11"></a>            <span class="dt">True</span></span>
<span id="cb2-12"><a href="#cb2-12"></a></span>
<span id="cb2-13"><a href="#cb2-13"></a>        <span class="fu">_</span> <span class="op">-&gt;</span></span>
<span id="cb2-14"><a href="#cb2-14"></a>            <span class="dt">False</span></span>
<span id="cb2-15"><a href="#cb2-15"></a></span>
<span id="cb2-16"><a href="#cb2-16"></a><span class="co">-- 変数名を保持している（表示用）</span></span>
<span id="cb2-17"><a href="#cb2-17"></a><span class="co">-- Binding の意味は現状まだない（次回以降ちゃんと使う）</span></span>
<span id="cb2-18"><a href="#cb2-18"></a><span class="kw">type</span> <span class="kw">alias</span> <span class="dt">Context</span> <span class="op">=</span>　<span class="dt">List</span> ( <span class="dt">String</span><span class="op">,</span> <span class="dt">Binding</span> )</span>
<span id="cb2-19"><a href="#cb2-19"></a><span class="kw">type</span> <span class="dt">Binding</span>　<span class="op">=</span> <span class="dt">NameBind</span></span></code></pre></div>
<p><code>TmVar</code> が少しキモ． 2つの <code>Int</code> は変数が関数全体の中でどの位置にいるかを表している:</p>
<ul>
<li>1つ目の Int は<a href="https://en.wikipedia.org/wiki/De_Bruijn_index">ドブラウン・インデックス</a> (束縛されたラムダ抽象までの距離)</li>
<li>2つ目の Int は一番外のラムダ抽象までの距離(深さ)</li>
<li>e.g. <code>(\x. \f. f x) (\x. x)</code> の場合は <code>TmApp (TmAbs &quot;x&quot; (TmAbs &quot;f&quot; (TmApp (TmVar 0 2) (TmVar 1 2)))) (TmAbs &quot;x&quot; (TmVar 0 1))</code></li>
</ul>
<p>ちなみに，<code>TmAbs String Term</code> の文字列型は変数名で基本的に表示用．</p>
<h3 id="評価規則">評価規則</h3>
<p>評価規則も同様にシンプル:</p>
<div class="sourceCode" id="cb3"><pre class="sourceCode txt"><code class="sourceCode default"><span id="cb3-1"><a href="#cb3-1"></a> t1 =&gt; t1&#39;</span>
<span id="cb3-2"><a href="#cb3-2"></a>---------------</span>
<span id="cb3-3"><a href="#cb3-3"></a> t1 t2 =&gt; t1&#39; t2</span>
<span id="cb3-4"><a href="#cb3-4"></a></span>
<span id="cb3-5"><a href="#cb3-5"></a> t2 =&gt; t2&#39;</span>
<span id="cb3-6"><a href="#cb3-6"></a>---------------</span>
<span id="cb3-7"><a href="#cb3-7"></a> v1 t2 =&gt; v1 t2&#39;</span>
<span id="cb3-8"><a href="#cb3-8"></a></span>
<span id="cb3-9"><a href="#cb3-9"></a>(\x.t12) v2 -&gt; [x|-&gt; v2]t12</span></code></pre></div>
<p>3つ目のが関数適用で，<code>[x|-&gt; v2]t12</code> 記法は <code>t12</code> 内の変数 <code>x</code> を全て <code>v2</code> に置き換えるという意味である． ここで，<code>v2</code> が値というのがキモだ． すなわち正格評価される．</p>
<p>これをパターンマッチを使って実装すると次の通り:</p>
<div class="sourceCode" id="cb4"><pre class="sourceCode elm"><code class="sourceCode elm"><span id="cb4-1"><a href="#cb4-1"></a><span class="co">-- 止まらない可能性があるから注意</span></span>
<span id="cb4-2"><a href="#cb4-2"></a><span class="fu">eval</span> : <span class="dt">Context</span> <span class="op">-&gt;</span> <span class="dt">Term</span> <span class="op">-&gt;</span> <span class="dt">Maybe</span> <span class="dt">Term</span></span>
<span id="cb4-3"><a href="#cb4-3"></a><span class="fu">eval</span> <span class="fu">ctx</span> <span class="fu">t</span> <span class="op">=</span></span>
<span id="cb4-4"><a href="#cb4-4"></a>    <span class="cf">if</span> <span class="fu">isval</span> <span class="fu">ctx</span> <span class="fu">t</span> <span class="cf">then</span></span>
<span id="cb4-5"><a href="#cb4-5"></a>        <span class="dt">Just</span> <span class="fu">t</span></span>
<span id="cb4-6"><a href="#cb4-6"></a></span>
<span id="cb4-7"><a href="#cb4-7"></a>    <span class="cf">else</span></span>
<span id="cb4-8"><a href="#cb4-8"></a>        <span class="dt">Maybe</span><span class="op">.</span><span class="fu">andThen</span> (<span class="fu">eval</span> <span class="fu">ctx</span>) (<span class="fu">eval1</span> <span class="fu">ctx</span> <span class="fu">t</span>)</span>
<span id="cb4-9"><a href="#cb4-9"></a></span>
<span id="cb4-10"><a href="#cb4-10"></a><span class="fu">eval1</span> : <span class="dt">Context</span> <span class="op">-&gt;</span> <span class="dt">Term</span> <span class="op">-&gt;</span> <span class="dt">Maybe</span> <span class="dt">Term</span></span>
<span id="cb4-11"><a href="#cb4-11"></a><span class="fu">eval1</span> <span class="fu">ctx</span> <span class="fu">t</span> <span class="op">=</span></span>
<span id="cb4-12"><a href="#cb4-12"></a>    <span class="cf">case</span> <span class="fu">t</span> <span class="cf">of</span></span>
<span id="cb4-13"><a href="#cb4-13"></a>        <span class="dt">TmApp</span> (<span class="dt">TmAbs</span> <span class="fu">x</span> <span class="fu">t12</span>) <span class="fu">t2</span> <span class="op">-&gt;</span></span>
<span id="cb4-14"><a href="#cb4-14"></a>            <span class="cf">if</span> <span class="fu">isval</span> <span class="fu">ctx</span> <span class="fu">t2</span> <span class="cf">then</span></span>
<span id="cb4-15"><a href="#cb4-15"></a>                <span class="dt">Just</span> (<span class="fu">termSubstTop</span> <span class="fu">t2</span> <span class="fu">t12</span>)</span>
<span id="cb4-16"><a href="#cb4-16"></a>            <span class="cf">else</span></span>
<span id="cb4-17"><a href="#cb4-17"></a>                <span class="dt">Maybe</span><span class="op">.</span><span class="fu">map</span> (<span class="dt">TmApp</span> (<span class="dt">TmAbs</span> <span class="fu">x</span> <span class="fu">t12</span>)) (<span class="fu">eval1</span> <span class="fu">ctx</span> <span class="fu">t2</span>)</span>
<span id="cb4-18"><a href="#cb4-18"></a></span>
<span id="cb4-19"><a href="#cb4-19"></a>        <span class="dt">TmApp</span> <span class="fu">t1</span> <span class="fu">t2</span> <span class="op">-&gt;</span></span>
<span id="cb4-20"><a href="#cb4-20"></a>            <span class="dt">Maybe</span><span class="op">.</span><span class="fu">map</span> (<span class="fu">flip</span> <span class="dt">TmApp</span> <span class="fu">t2</span>) (<span class="fu">eval1</span> <span class="fu">ctx</span> <span class="fu">t1</span>)</span>
<span id="cb4-21"><a href="#cb4-21"></a></span>
<span id="cb4-22"><a href="#cb4-22"></a>        <span class="fu">_</span> <span class="op">-&gt;</span></span>
<span id="cb4-23"><a href="#cb4-23"></a>            <span class="dt">Nothing</span></span>
<span id="cb4-24"><a href="#cb4-24"></a></span>
<span id="cb4-25"><a href="#cb4-25"></a><span class="fu">termSubstTop</span> : <span class="dt">Term</span> <span class="op">-&gt;</span> <span class="dt">Term</span> <span class="op">-&gt;</span> <span class="dt">Term</span></span>
<span id="cb4-26"><a href="#cb4-26"></a><span class="fu">termSubstTop</span> <span class="op">=</span> <span class="op">...</span></span></code></pre></div>
<p><code>termSubstTop</code> という新しい関数が出てきた． 変数を置き換える(代入する)上で重要なのは同じ変数名の変数が出てきたときに，それらを区別して〜〜ってのがあり，それをいい感じにやるための工夫が <code>TmVar</code> の2つの <code>Int</code> だ． この実装上の工夫は第6章で説明されているので，買って読んでください(おい)．</p>
<h1 id="section-1"></h1>
<p>で，<code>termSubstTop</code> の実装はこんな感じ(本書にも全部書いてある):</p>
<div class="sourceCode" id="cb5"><pre class="sourceCode elm"><code class="sourceCode elm"><span id="cb5-1"><a href="#cb5-1"></a><span class="co">-- v2 と t12 を渡して [x|-&gt;v2]t12 が返ってくる</span></span>
<span id="cb5-2"><a href="#cb5-2"></a><span class="co">-- termSubst 0 なので一番外の変数を置き換える</span></span>
<span id="cb5-3"><a href="#cb5-3"></a><span class="co">-- 置き換えた後 -1 シフトしないといけない(一番外のラムダ抽象が剥がれるので)</span></span>
<span id="cb5-4"><a href="#cb5-4"></a><span class="co">-- 先に 1 だけシフトしてるのは代入後の s は -1 シフトして欲しくないから</span></span>
<span id="cb5-5"><a href="#cb5-5"></a><span class="fu">termSubstTop</span> : <span class="dt">Term</span> <span class="op">-&gt;</span> <span class="dt">Term</span> <span class="op">-&gt;</span> <span class="dt">Term</span></span>
<span id="cb5-6"><a href="#cb5-6"></a><span class="fu">termSubstTop</span> <span class="fu">s</span> <span class="fu">t</span> <span class="op">=</span></span>
<span id="cb5-7"><a href="#cb5-7"></a>    <span class="fu">termShift</span> <span class="op">-</span><span class="dv">1</span> (<span class="fu">termSubst</span> <span class="dv">0</span> (<span class="fu">termShift</span> <span class="dv">1</span> <span class="fu">s</span>) <span class="fu">t</span>)</span>
<span id="cb5-8"><a href="#cb5-8"></a></span>
<span id="cb5-9"><a href="#cb5-9"></a><span class="co">-- 項 tt 中の j 番の変数へ項 s を代入 [j|-&gt;s]t する</span></span>
<span id="cb5-10"><a href="#cb5-10"></a><span class="fu">termSubst</span> : <span class="dt">Int</span> <span class="op">-&gt;</span> <span class="dt">Term</span> <span class="op">-&gt;</span> <span class="dt">Term</span> <span class="op">-&gt;</span> <span class="dt">Term</span></span>
<span id="cb5-11"><a href="#cb5-11"></a><span class="fu">termSubst</span> <span class="fu">j</span> <span class="fu">s</span> <span class="fu">tt</span> <span class="op">=</span></span>
<span id="cb5-12"><a href="#cb5-12"></a>    <span class="kw">let</span></span>
<span id="cb5-13"><a href="#cb5-13"></a>        <span class="fu">walk</span> <span class="fu">c</span> <span class="fu">t</span> <span class="op">=</span></span>
<span id="cb5-14"><a href="#cb5-14"></a>            <span class="cf">case</span> <span class="fu">t</span> <span class="cf">of</span></span>
<span id="cb5-15"><a href="#cb5-15"></a>                <span class="dt">TmVar</span> <span class="fu">x</span> <span class="fu">n</span> <span class="op">-&gt;</span></span>
<span id="cb5-16"><a href="#cb5-16"></a>                    <span class="cf">if</span> <span class="fu">x</span> <span class="op">==</span> <span class="fu">j</span> <span class="op">+</span> <span class="fu">c</span> <span class="cf">then</span></span>
<span id="cb5-17"><a href="#cb5-17"></a>                        <span class="co">-- 潜ったぶんだけドブラウン・インデックスをシフト</span></span>
<span id="cb5-18"><a href="#cb5-18"></a>                        <span class="fu">termShift</span> <span class="fu">c</span> <span class="fu">s</span></span>
<span id="cb5-19"><a href="#cb5-19"></a>                    <span class="cf">else</span></span>
<span id="cb5-20"><a href="#cb5-20"></a>                        <span class="dt">TmVar</span> <span class="fu">x</span> <span class="fu">n</span></span>
<span id="cb5-21"><a href="#cb5-21"></a></span>
<span id="cb5-22"><a href="#cb5-22"></a>                <span class="dt">TmAbs</span> <span class="fu">x</span> <span class="fu">t1</span> <span class="op">-&gt;</span></span>
<span id="cb5-23"><a href="#cb5-23"></a>                    <span class="dt">TmAbs</span> <span class="fu">x</span> (<span class="fu">walk</span> (<span class="fu">c</span> <span class="op">+</span> <span class="dv">1</span>) <span class="fu">t1</span>)</span>
<span id="cb5-24"><a href="#cb5-24"></a></span>
<span id="cb5-25"><a href="#cb5-25"></a>                <span class="dt">TmApp</span> <span class="fu">t1</span> <span class="fu">t2</span> <span class="op">-&gt;</span></span>
<span id="cb5-26"><a href="#cb5-26"></a>                    <span class="dt">TmApp</span> (<span class="fu">walk</span> <span class="fu">c</span> <span class="fu">t1</span>) (<span class="fu">walk</span> <span class="fu">c</span> <span class="fu">t2</span>)</span>
<span id="cb5-27"><a href="#cb5-27"></a>    <span class="kw">in</span></span>
<span id="cb5-28"><a href="#cb5-28"></a>    <span class="fu">walk</span> <span class="dv">0</span> <span class="fu">tt</span></span>
<span id="cb5-29"><a href="#cb5-29"></a></span>
<span id="cb5-30"><a href="#cb5-30"></a><span class="co">-- 項 tt の自由変数のドブラウン・インデックスを d だけシフト</span></span>
<span id="cb5-31"><a href="#cb5-31"></a><span class="fu">termShift</span> : <span class="dt">Int</span> <span class="op">-&gt;</span> <span class="dt">Term</span> <span class="op">-&gt;</span> <span class="dt">Term</span></span>
<span id="cb5-32"><a href="#cb5-32"></a><span class="fu">termShift</span> <span class="fu">d</span> <span class="fu">tt</span> <span class="op">=</span></span>
<span id="cb5-33"><a href="#cb5-33"></a>    <span class="kw">let</span></span>
<span id="cb5-34"><a href="#cb5-34"></a>        <span class="fu">walk</span> <span class="fu">c</span> <span class="fu">t</span> <span class="op">=</span></span>
<span id="cb5-35"><a href="#cb5-35"></a>            <span class="cf">case</span> <span class="fu">t</span> <span class="cf">of</span></span>
<span id="cb5-36"><a href="#cb5-36"></a>                <span class="dt">TmVar</span> <span class="fu">x</span> <span class="fu">n</span> <span class="op">-&gt;</span></span>
<span id="cb5-37"><a href="#cb5-37"></a>                    <span class="co">-- c はラムダ抽象の深さ</span></span>
<span id="cb5-38"><a href="#cb5-38"></a>                    <span class="co">-- x は変数が束縛されたのラムダ抽象までの距離</span></span>
<span id="cb5-39"><a href="#cb5-39"></a>                    <span class="co">-- したがって x &gt;= c は自由変数</span></span>
<span id="cb5-40"><a href="#cb5-40"></a>                    <span class="cf">if</span> <span class="fu">x</span> <span class="op">&gt;=</span> <span class="fu">c</span> <span class="cf">then</span></span>
<span id="cb5-41"><a href="#cb5-41"></a>                        <span class="dt">TmVar</span> (<span class="fu">x</span> <span class="op">+</span> <span class="fu">d</span>) (<span class="fu">n</span> <span class="op">+</span> <span class="fu">d</span>)</span>
<span id="cb5-42"><a href="#cb5-42"></a>                    <span class="cf">else</span></span>
<span id="cb5-43"><a href="#cb5-43"></a>                        <span class="dt">TmVar</span> <span class="fu">x</span> (<span class="fu">n</span> <span class="op">+</span> <span class="fu">d</span>)</span>
<span id="cb5-44"><a href="#cb5-44"></a></span>
<span id="cb5-45"><a href="#cb5-45"></a>                <span class="dt">TmAbs</span> <span class="fu">x</span> <span class="fu">t1</span> <span class="op">-&gt;</span></span>
<span id="cb5-46"><a href="#cb5-46"></a>                    <span class="dt">TmAbs</span> <span class="fu">x</span> (<span class="fu">walk</span> (<span class="fu">c</span> <span class="op">+</span> <span class="dv">1</span>) <span class="fu">t1</span>)</span>
<span id="cb5-47"><a href="#cb5-47"></a></span>
<span id="cb5-48"><a href="#cb5-48"></a>                <span class="dt">TmApp</span> <span class="fu">t1</span> <span class="fu">t2</span> <span class="op">-&gt;</span></span>
<span id="cb5-49"><a href="#cb5-49"></a>                    <span class="dt">TmApp</span> (<span class="fu">walk</span> <span class="fu">c</span> <span class="fu">t1</span>) (<span class="fu">walk</span> <span class="fu">c</span> <span class="fu">t2</span>)</span>
<span id="cb5-50"><a href="#cb5-50"></a>    <span class="kw">in</span></span>
<span id="cb5-51"><a href="#cb5-51"></a>    <span class="fu">walk</span> <span class="dv">0</span> <span class="fu">tt</span></span></code></pre></div>
<p>REPL で確かめてみる:</p>
<div class="sourceCode" id="cb6"><pre class="sourceCode elm"><code class="sourceCode elm"><span id="cb6-1"><a href="#cb6-1"></a><span class="op">$</span> <span class="fu">elm</span> <span class="fu">repl</span></span>
<span id="cb6-2"><a href="#cb6-2"></a><span class="co">---- Elm 0.19.1 ----------------------------------------------------------------</span></span>
<span id="cb6-3"><a href="#cb6-3"></a><span class="dt">Say</span> :<span class="fu">help</span> <span class="fu">for</span> <span class="fu">help</span> <span class="fu">and</span> :<span class="fu">exit</span> <span class="fu">to</span> <span class="fu">exit</span><span class="op">!</span> <span class="dt">More</span> <span class="fu">at</span> <span class="op">&lt;</span><span class="fu">https</span>:<span class="op">//</span><span class="fu">elm</span><span class="op">-</span><span class="fu">lang</span><span class="op">.</span><span class="fu">org</span><span class="op">/</span><span class="dv">0</span><span class="op">.</span><span class="dv">19</span><span class="op">.</span><span class="dv">1</span><span class="op">/</span><span class="fu">repl</span><span class="op">&gt;</span></span>
<span id="cb6-4"><a href="#cb6-4"></a><span class="co">--------------------------------------------------------------------------------</span></span>
<span id="cb6-5"><a href="#cb6-5"></a><span class="op">&gt;</span> <span class="kw">import</span> <span class="dt">TaPL</span><span class="op">.</span><span class="dt">Chap7</span> <span class="kw">as</span> <span class="dt">Chap7</span> <span class="kw">exposing</span> (<span class="dt">Term</span> (<span class="op">..</span>))</span>
<span id="cb6-6"><a href="#cb6-6"></a><span class="op">&gt;</span> <span class="dt">Chap7</span><span class="op">.</span><span class="fu">eval</span> [] (<span class="dt">TmApp</span> (<span class="dt">TmAbs</span> <span class="st">&quot;x&quot;</span> (<span class="dt">TmAbs</span> <span class="st">&quot;f&quot;</span> (<span class="dt">TmApp</span> (<span class="dt">TmVar</span> <span class="dv">0</span> <span class="dv">2</span>) (<span class="dt">TmVar</span> <span class="dv">1</span> <span class="dv">2</span>)))) (<span class="dt">TmAbs</span> <span class="st">&quot;x&quot;</span> (<span class="dt">TmVar</span> <span class="dv">0</span> <span class="dv">1</span>)))</span>
<span id="cb6-7"><a href="#cb6-7"></a><span class="dt">Just</span> (<span class="dt">TmAbs</span> <span class="st">&quot;f&quot;</span> (<span class="dt">TmApp</span> (<span class="dt">TmVar</span> <span class="dv">0</span> <span class="dv">1</span>) (<span class="dt">TmAbs</span> <span class="st">&quot;x&quot;</span> (<span class="dt">TmVar</span> <span class="dv">0</span> <span class="dv">2</span>))))</span>
<span id="cb6-8"><a href="#cb6-8"></a>    : <span class="dt">Maybe</span> <span class="dt">Term</span></span></code></pre></div>
<p><code>(\x . (\f . f x)) (\x . x)</code> を評価して <code>\f . f (\x . x)</code> という結果を得た．</p>
<h3 id="文字列へ変換">文字列へ変換</h3>
<p>変数がインデックス表記になっているため読みにくい． なので文字列への変換関数とパーサーを記述しよう．</p>
<p>まずは文字列の変換から． こっちは TaPL にも(ほとんど)書いてある:</p>
<div class="sourceCode" id="cb7"><pre class="sourceCode elm"><code class="sourceCode elm"><span id="cb7-1"><a href="#cb7-1"></a><span class="co">-- これは TaPL にはない</span></span>
<span id="cb7-2"><a href="#cb7-2"></a><span class="fu">display</span> : <span class="dt">Term</span> <span class="op">-&gt;</span> <span class="dt">String</span></span>
<span id="cb7-3"><a href="#cb7-3"></a><span class="fu">display</span> <span class="fu">t</span> <span class="op">=</span></span>
<span id="cb7-4"><a href="#cb7-4"></a>    <span class="fu">printtm</span> [] <span class="fu">t</span></span>
<span id="cb7-5"><a href="#cb7-5"></a>        <span class="op">|&gt;</span> <span class="dt">Maybe</span><span class="op">.</span><span class="fu">map</span> (<span class="fu">dropIfStartsWith</span> <span class="st">&quot;(&quot;</span>) <span class="co">-- 最初と最後のカッコを消している</span></span>
<span id="cb7-6"><a href="#cb7-6"></a>        <span class="op">|&gt;</span> <span class="dt">Maybe</span><span class="op">.</span><span class="fu">map</span> (<span class="fu">dropIfEndsWith</span> <span class="st">&quot;)&quot;</span>)</span>
<span id="cb7-7"><a href="#cb7-7"></a>        <span class="op">|&gt;</span> <span class="dt">Maybe</span><span class="op">.</span><span class="fu">withDefault</span> <span class="st">&quot;&quot;</span></span>
<span id="cb7-8"><a href="#cb7-8"></a></span>
<span id="cb7-9"><a href="#cb7-9"></a><span class="co">-- インデックスが間違っている場合は Nothing になる</span></span>
<span id="cb7-10"><a href="#cb7-10"></a><span class="fu">printtm</span> : <span class="dt">Context</span> <span class="op">-&gt;</span> <span class="dt">Term</span> <span class="op">-&gt;</span> <span class="dt">Maybe</span> <span class="dt">String</span></span>
<span id="cb7-11"><a href="#cb7-11"></a><span class="fu">printtm</span> <span class="fu">ctx</span> <span class="fu">t</span> <span class="op">=</span>　<span class="op">...</span></span></code></pre></div>
<p>前回と異なり，今回は文字列に変換できない場合がある． インデックスが間違っている場合だ． その場合は <code>Notihng</code> が返るようにしている(TaPL の場合は例外)． <code>printtm</code> は <code>Term</code> 型に対するパターンマッチで記述する:</p>
<div class="sourceCode" id="cb8"><pre class="sourceCode elm"><code class="sourceCode elm"><span id="cb8-1"><a href="#cb8-1"></a><span class="fu">printtm</span> : <span class="dt">Context</span> <span class="op">-&gt;</span> <span class="dt">Term</span> <span class="op">-&gt;</span> <span class="dt">Maybe</span> <span class="dt">String</span></span>
<span id="cb8-2"><a href="#cb8-2"></a><span class="fu">printtm</span> <span class="fu">ctx</span> <span class="fu">t</span> <span class="op">=</span></span>
<span id="cb8-3"><a href="#cb8-3"></a>    <span class="cf">case</span> <span class="fu">t</span> <span class="cf">of</span></span>
<span id="cb8-4"><a href="#cb8-4"></a>        <span class="dt">TmAbs</span> <span class="fu">x</span> <span class="fu">t1</span> <span class="op">-&gt;</span></span>
<span id="cb8-5"><a href="#cb8-5"></a>            <span class="kw">let</span></span>
<span id="cb8-6"><a href="#cb8-6"></a>                ( <span class="fu">ctx1</span><span class="op">,</span> <span class="fu">x1</span> ) <span class="op">=</span></span>
<span id="cb8-7"><a href="#cb8-7"></a>                    <span class="co">-- 被らない変数名を生成</span></span>
<span id="cb8-8"><a href="#cb8-8"></a>                    <span class="fu">pickfreshname</span> <span class="fu">ctx</span> <span class="fu">x</span></span>
<span id="cb8-9"><a href="#cb8-9"></a>            <span class="kw">in</span></span>
<span id="cb8-10"><a href="#cb8-10"></a>            <span class="dt">Maybe</span><span class="op">.</span><span class="fu">map</span></span>
<span id="cb8-11"><a href="#cb8-11"></a>                (\<span class="fu">s1</span> <span class="op">-&gt;</span> <span class="dt">String</span><span class="op">.</span><span class="fu">concat</span> [ <span class="st">&quot;(\\&quot;</span><span class="op">,</span> <span class="fu">x1</span><span class="op">,</span> <span class="st">&quot;. &quot;</span><span class="op">,</span> <span class="fu">s1</span><span class="op">,</span> <span class="st">&quot;)&quot;</span> ])</span>
<span id="cb8-12"><a href="#cb8-12"></a>                (<span class="fu">printtm</span> <span class="fu">ctx1</span> <span class="fu">t1</span>)</span>
<span id="cb8-13"><a href="#cb8-13"></a></span>
<span id="cb8-14"><a href="#cb8-14"></a>        <span class="dt">TmApp</span> <span class="fu">t1</span> <span class="fu">t2</span> <span class="op">-&gt;</span></span>
<span id="cb8-15"><a href="#cb8-15"></a>            <span class="dt">Maybe</span><span class="op">.</span><span class="fu">map2</span></span>
<span id="cb8-16"><a href="#cb8-16"></a>                (\<span class="fu">s1</span> <span class="fu">s2</span> <span class="op">-&gt;</span> <span class="dt">String</span><span class="op">.</span><span class="fu">concat</span> [ <span class="st">&quot;(&quot;</span><span class="op">,</span> <span class="fu">s1</span><span class="op">,</span> <span class="st">&quot; &quot;</span><span class="op">,</span> <span class="fu">s2</span><span class="op">,</span> <span class="st">&quot;)&quot;</span> ])</span>
<span id="cb8-17"><a href="#cb8-17"></a>                (<span class="fu">printtm</span> <span class="fu">ctx</span> <span class="fu">t1</span>)</span>
<span id="cb8-18"><a href="#cb8-18"></a>                (<span class="fu">printtm</span> <span class="fu">ctx</span> <span class="fu">t2</span>)</span>
<span id="cb8-19"><a href="#cb8-19"></a></span>
<span id="cb8-20"><a href="#cb8-20"></a>        <span class="dt">TmVar</span> <span class="fu">x</span> <span class="fu">n</span> <span class="op">-&gt;</span></span>
<span id="cb8-21"><a href="#cb8-21"></a>            <span class="co">-- ctx には変数がどんどん保存される</span></span>
<span id="cb8-22"><a href="#cb8-22"></a>            <span class="co">-- そのため ctx の長さと n の長さが等しくないといけない</span></span>
<span id="cb8-23"><a href="#cb8-23"></a>            <span class="cf">if</span> <span class="fu">ctxlength</span> <span class="fu">ctx</span> <span class="op">==</span> <span class="fu">n</span> <span class="cf">then</span></span>
<span id="cb8-24"><a href="#cb8-24"></a>                <span class="co">-- ctx から変数名をドブラウン・インデックスで引いてくる</span></span>
<span id="cb8-25"><a href="#cb8-25"></a>                <span class="fu">index2name</span> <span class="fu">ctx</span> <span class="fu">x</span></span>
<span id="cb8-26"><a href="#cb8-26"></a>            <span class="cf">else</span></span>
<span id="cb8-27"><a href="#cb8-27"></a>                <span class="dt">Nothing</span></span></code></pre></div>
<p><code>pickfreshname</code> や <code>ctxlength</code> や <code>index2name</code> の実装は本書にはない． 振る舞いの説明が書いてあるので，それを読んで実装する必要がある． なので，僕は次のように実装したがもう少しエレガントな実装があるかもしれない:</p>
<div class="sourceCode" id="cb9"><pre class="sourceCode elm"><code class="sourceCode elm"><span id="cb9-1"><a href="#cb9-1"></a><span class="co">-- 変数名が重複しないように後ろに &#39; を足して Context の先頭に追加</span></span>
<span id="cb9-2"><a href="#cb9-2"></a><span class="fu">pickfreshname</span> : <span class="dt">Context</span> <span class="op">-&gt;</span> <span class="dt">String</span> <span class="op">-&gt;</span> ( <span class="dt">Context</span><span class="op">,</span> <span class="dt">String</span> )</span>
<span id="cb9-3"><a href="#cb9-3"></a><span class="fu">pickfreshname</span> <span class="fu">ctx</span> <span class="fu">x</span> <span class="op">=</span></span>
<span id="cb9-4"><a href="#cb9-4"></a>    <span class="kw">let</span></span>
<span id="cb9-5"><a href="#cb9-5"></a>        <span class="fu">x1</span> <span class="op">=</span></span>
<span id="cb9-6"><a href="#cb9-6"></a>            <span class="fu">ctx</span></span>
<span id="cb9-7"><a href="#cb9-7"></a>                <span class="op">|&gt;</span> <span class="dt">List</span><span class="op">.</span><span class="fu">map</span> <span class="dt">Tuple</span><span class="op">.</span><span class="fu">first</span></span>
<span id="cb9-8"><a href="#cb9-8"></a>                <span class="op">|&gt;</span> <span class="dt">List</span><span class="op">.</span><span class="fu">filter</span> (<span class="dt">String</span><span class="op">.</span><span class="fu">startsWith</span> <span class="fu">x</span>)</span>
<span id="cb9-9"><a href="#cb9-9"></a>                <span class="op">|&gt;</span> <span class="dt">List</span><span class="op">.</span><span class="fu">maximum</span></span>
<span id="cb9-10"><a href="#cb9-10"></a>                <span class="op">|&gt;</span> <span class="dt">Maybe</span><span class="op">.</span><span class="fu">map</span> (\<span class="fu">a</span> <span class="op">-&gt;</span> <span class="fu">a</span> <span class="op">++</span> <span class="st">&quot;&#39;&quot;</span>)</span>
<span id="cb9-11"><a href="#cb9-11"></a>                <span class="op">|&gt;</span> <span class="dt">Maybe</span><span class="op">.</span><span class="fu">withDefault</span> <span class="fu">x</span></span>
<span id="cb9-12"><a href="#cb9-12"></a>    <span class="kw">in</span></span>
<span id="cb9-13"><a href="#cb9-13"></a>    ( ( <span class="fu">x1</span><span class="op">,</span> <span class="dt">NameBind</span> ) <span class="op">::</span> <span class="fu">ctx</span><span class="op">,</span> <span class="fu">x1</span> )</span>
<span id="cb9-14"><a href="#cb9-14"></a></span>
<span id="cb9-15"><a href="#cb9-15"></a><span class="fu">ctxlength</span> : <span class="dt">Context</span> <span class="op">-&gt;</span> <span class="dt">Int</span></span>
<span id="cb9-16"><a href="#cb9-16"></a><span class="fu">ctxlength</span> <span class="fu">ctx</span> <span class="op">=</span></span>
<span id="cb9-17"><a href="#cb9-17"></a>    <span class="dt">List</span><span class="op">.</span><span class="fu">length</span> <span class="fu">ctx</span></span>
<span id="cb9-18"><a href="#cb9-18"></a></span>
<span id="cb9-19"><a href="#cb9-19"></a><span class="co">-- ドブラウン・インデックスは束縛されたラムダ抽象への距離</span></span>
<span id="cb9-20"><a href="#cb9-20"></a><span class="co">-- Context はラムダ抽象のたびに先頭に対応する変数を追加する</span></span>
<span id="cb9-21"><a href="#cb9-21"></a><span class="co">-- なので，そのままリストへのインデックスアクセスで良い</span></span>
<span id="cb9-22"><a href="#cb9-22"></a><span class="fu">index2name</span> : <span class="dt">Context</span> <span class="op">-&gt;</span> <span class="dt">Int</span> <span class="op">-&gt;</span> <span class="dt">Maybe</span> <span class="dt">String</span></span>
<span id="cb9-23"><a href="#cb9-23"></a><span class="fu">index2name</span> <span class="fu">ctx</span> <span class="fu">x</span> <span class="op">=</span></span>
<span id="cb9-24"><a href="#cb9-24"></a>    <span class="cf">case</span> <span class="dt">List</span><span class="op">.</span><span class="fu">getAt</span> <span class="fu">x</span> <span class="fu">ctx</span> <span class="cf">of</span></span>
<span id="cb9-25"><a href="#cb9-25"></a>        <span class="dt">Just</span> ( <span class="fu">str</span><span class="op">,</span> <span class="fu">_</span> ) <span class="op">-&gt;</span></span>
<span id="cb9-26"><a href="#cb9-26"></a>            <span class="dt">Just</span> <span class="fu">str</span></span>
<span id="cb9-27"><a href="#cb9-27"></a></span>
<span id="cb9-28"><a href="#cb9-28"></a>        <span class="fu">_</span> <span class="op">-&gt;</span></span>
<span id="cb9-29"><a href="#cb9-29"></a>            <span class="dt">Nothing</span></span></code></pre></div>
<p>REPL で試してみよう:</p>
<div class="sourceCode" id="cb10"><pre class="sourceCode elm"><code class="sourceCode elm"><span id="cb10-1"><a href="#cb10-1"></a><span class="op">&gt;</span> <span class="dt">Chap7</span><span class="op">.</span><span class="fu">display</span> (<span class="dt">TmApp</span> (<span class="dt">TmAbs</span> <span class="st">&quot;x&quot;</span> (<span class="dt">TmAbs</span> <span class="st">&quot;f&quot;</span> (<span class="dt">TmApp</span> (<span class="dt">TmVar</span> <span class="dv">0</span> <span class="dv">2</span>) (<span class="dt">TmVar</span> <span class="dv">1</span> <span class="dv">2</span>)))) (<span class="dt">TmAbs</span> <span class="st">&quot;x&quot;</span> (<span class="dt">TmVar</span> <span class="dv">0</span> <span class="dv">1</span>)))</span>
<span id="cb10-2"><a href="#cb10-2"></a><span class="st">&quot;(\\x. (\\f. (f x))) (\\x. x)&quot;</span> : <span class="dt">String</span></span>
<span id="cb10-3"><a href="#cb10-3"></a><span class="op">&gt;</span> <span class="dt">Chap7</span><span class="op">.</span><span class="fu">eval</span> [] (<span class="dt">TmApp</span> (<span class="dt">TmAbs</span> <span class="st">&quot;x&quot;</span> (<span class="dt">TmAbs</span> <span class="st">&quot;f&quot;</span> (<span class="dt">TmApp</span> (<span class="dt">TmVar</span> <span class="dv">0</span> <span class="dv">2</span>) (<span class="dt">TmVar</span> <span class="dv">1</span> <span class="dv">2</span>)))) (<span class="dt">TmAbs</span> <span class="st">&quot;x&quot;</span> (<span class="dt">TmVar</span> <span class="dv">0</span> <span class="dv">1</span>))) <span class="op">|&gt;</span> <span class="dt">Maybe</span><span class="op">.</span><span class="fu">map</span> <span class="dt">Chap7</span><span class="op">.</span><span class="fu">display</span></span>
<span id="cb10-4"><a href="#cb10-4"></a><span class="dt">Just</span> (<span class="st">&quot;\\f. (f (\\x. x))&quot;</span>) : <span class="dt">Maybe</span> <span class="dt">String</span></span></code></pre></div>
<p>いい感じ．</p>
<h3 id="パーサー">パーサー</h3>
<p>前回同様 <a href="https://package.elm-lang.org/packages/elm/parser">elm/parser</a> を使う． ドブラウン・インデックスなどを構築していく必要があるので，それらを保持した <code>Context</code> という型を用意する(紛らわしいが，モジュールが違い外に出さない型なので大丈夫):</p>
<div class="sourceCode" id="cb11"><pre class="sourceCode elm"><code class="sourceCode elm"><span id="cb11-1"><a href="#cb11-1"></a><span class="kw">module</span> <span class="dt">TaPL</span><span class="op">.</span><span class="dt">Chap7</span><span class="op">.</span><span class="dt">Parser</span> <span class="kw">exposing</span> (<span class="fu">parse</span>)</span>
<span id="cb11-2"><a href="#cb11-2"></a></span>
<span id="cb11-3"><a href="#cb11-3"></a><span class="kw">import</span> <span class="dt">Parser</span> <span class="kw">exposing</span> ((<span class="op">|.</span>)<span class="op">,</span> (<span class="op">|=</span>)<span class="op">,</span> <span class="dt">Parser</span>)</span>
<span id="cb11-4"><a href="#cb11-4"></a></span>
<span id="cb11-5"><a href="#cb11-5"></a><span class="kw">type</span> <span class="kw">alias</span> <span class="dt">Context</span> <span class="op">=</span></span>
<span id="cb11-6"><a href="#cb11-6"></a>    { <span class="fu">env</span> : <span class="dt">Dict</span> <span class="dt">String</span> <span class="dt">Int</span> <span class="co">-- 変数名とドブラウンインデックスの対応</span></span>
<span id="cb11-7"><a href="#cb11-7"></a>    <span class="op">,</span> <span class="fu">depth</span> : <span class="dt">Int</span>           <span class="co">-- ラムダ抽象の深さ</span></span>
<span id="cb11-8"><a href="#cb11-8"></a>    }</span>
<span id="cb11-9"><a href="#cb11-9"></a></span>
<span id="cb11-10"><a href="#cb11-10"></a><span class="fu">iniCtx</span> : <span class="dt">Context</span></span>
<span id="cb11-11"><a href="#cb11-11"></a><span class="fu">iniCtx</span> <span class="op">=</span></span>
<span id="cb11-12"><a href="#cb11-12"></a>    { <span class="fu">env</span> <span class="op">=</span> <span class="dt">Dict</span><span class="op">.</span><span class="fu">empty</span><span class="op">,</span> <span class="fu">depth</span> <span class="op">=</span> <span class="dv">0</span> }</span>
<span id="cb11-13"><a href="#cb11-13"></a></span>
<span id="cb11-14"><a href="#cb11-14"></a><span class="fu">parse</span> : <span class="dt">String</span> <span class="op">-&gt;</span> <span class="dt">Result</span> (<span class="dt">List</span> <span class="dt">Parser</span><span class="op">.</span><span class="dt">DeadEnd</span>) <span class="dt">Term</span></span>
<span id="cb11-15"><a href="#cb11-15"></a><span class="fu">parse</span> <span class="op">=</span></span>
<span id="cb11-16"><a href="#cb11-16"></a>    <span class="dt">Parser</span><span class="op">.</span><span class="fu">run</span> <span class="fu">parser</span></span>
<span id="cb11-17"><a href="#cb11-17"></a></span>
<span id="cb11-18"><a href="#cb11-18"></a><span class="fu">parser</span> : <span class="dt">Parser</span> <span class="dt">Term</span></span>
<span id="cb11-19"><a href="#cb11-19"></a><span class="fu">parser</span> <span class="op">=</span></span>
<span id="cb11-20"><a href="#cb11-20"></a>    <span class="fu">termParser</span> <span class="fu">iniCtx</span> <span class="op">|.</span> <span class="dt">Parser</span><span class="op">.</span><span class="fu">end</span></span>
<span id="cb11-21"><a href="#cb11-21"></a></span>
<span id="cb11-22"><a href="#cb11-22"></a><span class="fu">termParser</span> : <span class="dt">Context</span> <span class="op">-&gt;</span> <span class="dt">Parser</span> <span class="dt">Term</span></span>
<span id="cb11-23"><a href="#cb11-23"></a><span class="fu">termParser</span> <span class="fu">ctx</span> <span class="op">=</span> <span class="op">...</span></span></code></pre></div>
<p>まずは関数適用を無視してパーサーを定義する(難しいので):</p>
<div class="sourceCode" id="cb12"><pre class="sourceCode elm"><code class="sourceCode elm"><span id="cb12-1"><a href="#cb12-1"></a><span class="fu">termParser</span> : <span class="dt">Context</span> <span class="op">-&gt;</span> <span class="dt">Parser</span> <span class="dt">Term</span></span>
<span id="cb12-2"><a href="#cb12-2"></a><span class="fu">termParser</span> <span class="fu">ctx</span> <span class="op">=</span></span>
<span id="cb12-3"><a href="#cb12-3"></a>    <span class="co">-- oneOf は最初にマッチしたパース結果を採用する</span></span>
<span id="cb12-4"><a href="#cb12-4"></a>    <span class="dt">Parser</span><span class="op">.</span><span class="fu">oneOf</span></span>
<span id="cb12-5"><a href="#cb12-5"></a>        [ <span class="fu">parParser</span> <span class="fu">ctx</span> <span class="co">-- カッコのパーサー(割愛)</span></span>
<span id="cb12-6"><a href="#cb12-6"></a>        <span class="op">,</span> <span class="fu">absParser</span> <span class="fu">ctx</span></span>
<span id="cb12-7"><a href="#cb12-7"></a>        <span class="op">,</span> <span class="fu">varParser</span> <span class="fu">ctx</span></span>
<span id="cb12-8"><a href="#cb12-8"></a>        ]</span>
<span id="cb12-9"><a href="#cb12-9"></a></span>
<span id="cb12-10"><a href="#cb12-10"></a><span class="co">-- ラムダ抽象(`\x. t`)のパーサー</span></span>
<span id="cb12-11"><a href="#cb12-11"></a><span class="fu">absParser</span> : <span class="dt">Context</span> <span class="op">-&gt;</span> <span class="dt">Parser</span> <span class="dt">Term</span></span>
<span id="cb12-12"><a href="#cb12-12"></a><span class="fu">absParser</span> <span class="fu">ctx</span> <span class="op">=</span></span>
<span id="cb12-13"><a href="#cb12-13"></a>    <span class="dt">Parser</span><span class="op">.</span><span class="fu">succeed</span> <span class="fu">identity</span></span>
<span id="cb12-14"><a href="#cb12-14"></a>        <span class="op">|.</span> <span class="dt">Parser</span><span class="op">.</span><span class="fu">symbol</span> <span class="st">&quot;\\&quot;</span></span>
<span id="cb12-15"><a href="#cb12-15"></a>        <span class="op">|.</span> <span class="dt">Parser</span><span class="op">.</span><span class="fu">spaces</span></span>
<span id="cb12-16"><a href="#cb12-16"></a>        <span class="op">|=</span> <span class="fu">varStrParser</span></span>
<span id="cb12-17"><a href="#cb12-17"></a>        <span class="op">|.</span> <span class="dt">Parser</span><span class="op">.</span><span class="fu">spaces</span></span>
<span id="cb12-18"><a href="#cb12-18"></a>        <span class="op">|.</span> <span class="dt">Parser</span><span class="op">.</span><span class="fu">symbol</span> <span class="st">&quot;.&quot;</span></span>
<span id="cb12-19"><a href="#cb12-19"></a>        <span class="op">|.</span> <span class="dt">Parser</span><span class="op">.</span><span class="fu">spaces</span></span>
<span id="cb12-20"><a href="#cb12-20"></a>        <span class="op">|&gt;</span> <span class="dt">Parser</span><span class="op">.</span><span class="fu">andThen</span> (<span class="fu">absParserN</span> <span class="fu">ctx</span>)</span>
<span id="cb12-21"><a href="#cb12-21"></a></span>
<span id="cb12-22"><a href="#cb12-22"></a><span class="co">-- 変数名のパーサー (小文字始まりで [A-z0-9_&#39;] だけ許容する)</span></span>
<span id="cb12-23"><a href="#cb12-23"></a><span class="fu">varStrParser</span> : <span class="dt">Parser</span> <span class="dt">String</span></span>
<span id="cb12-24"><a href="#cb12-24"></a><span class="fu">varStrParser</span> <span class="op">=</span></span>
<span id="cb12-25"><a href="#cb12-25"></a>    <span class="dt">Parser</span><span class="op">.</span><span class="fu">variable</span></span>
<span id="cb12-26"><a href="#cb12-26"></a>        { <span class="fu">start</span> <span class="op">=</span> <span class="dt">Char</span><span class="op">.</span><span class="fu">isLower</span></span>
<span id="cb12-27"><a href="#cb12-27"></a>        <span class="op">,</span> <span class="fu">inner</span> <span class="op">=</span> \<span class="fu">c</span> <span class="op">-&gt;</span> <span class="dt">Char</span><span class="op">.</span><span class="fu">isAlphaNum</span> <span class="fu">c</span> <span class="op">||</span> <span class="fu">c</span> <span class="op">==</span> <span class="ch">&#39;_&#39;</span> <span class="op">||</span> <span class="fu">c</span> <span class="op">==</span> <span class="ch">&#39;\&#39;</span>&#39;</span>
<span id="cb12-28"><a href="#cb12-28"></a>        <span class="op">,</span> <span class="fu">reserved</span> <span class="op">=</span> <span class="dt">Set</span><span class="op">.</span><span class="fu">fromList</span> []</span>
<span id="cb12-29"><a href="#cb12-29"></a>        }</span>
<span id="cb12-30"><a href="#cb12-30"></a></span>
<span id="cb12-31"><a href="#cb12-31"></a><span class="co">-- ラムダ抽象が深くなるのでコンテキストを更新して再度 Term をパースする</span></span>
<span id="cb12-32"><a href="#cb12-32"></a><span class="fu">absParserN</span> : <span class="dt">Context</span> <span class="op">-&gt;</span> <span class="dt">String</span> <span class="op">-&gt;</span> <span class="dt">Parser</span> <span class="dt">Term</span></span>
<span id="cb12-33"><a href="#cb12-33"></a><span class="fu">absParserN</span> <span class="fu">ctx</span> <span class="fu">v</span> <span class="op">=</span></span>
<span id="cb12-34"><a href="#cb12-34"></a>  <span class="dt">Parser</span><span class="op">.</span><span class="fu">succeed</span> (<span class="dt">TmAbs</span> <span class="fu">v</span>)</span>
<span id="cb12-35"><a href="#cb12-35"></a>      <span class="op">|=</span> <span class="dt">Parser</span><span class="op">.</span><span class="fu">lazy</span> (\<span class="fu">_</span> <span class="op">-&gt;</span> <span class="fu">termParser</span> <span class="op">&lt;|</span> <span class="fu">pushVar</span> <span class="fu">v</span> <span class="op">&lt;|</span> <span class="fu">incrCtx</span> <span class="fu">ctx</span>)</span>
<span id="cb12-36"><a href="#cb12-36"></a></span>
<span id="cb12-37"><a href="#cb12-37"></a><span class="co">-- ラムダ抽象が1つ深くなる</span></span>
<span id="cb12-38"><a href="#cb12-38"></a><span class="co">-- なので深さと全てのドブラウン・インデックスを +1 する</span></span>
<span id="cb12-39"><a href="#cb12-39"></a><span class="fu">incrCtx</span> : <span class="dt">Context</span> <span class="op">-&gt;</span> <span class="dt">Context</span></span>
<span id="cb12-40"><a href="#cb12-40"></a><span class="fu">incrCtx</span> <span class="fu">ctx</span> <span class="op">=</span></span>
<span id="cb12-41"><a href="#cb12-41"></a>    { <span class="fu">ctx</span> <span class="op">|</span> <span class="fu">depth</span> <span class="op">=</span> <span class="fu">ctx</span><span class="op">.</span><span class="fu">depth</span> <span class="op">+</span> <span class="dv">1</span><span class="op">,</span> <span class="fu">env</span> <span class="op">=</span> <span class="dt">Dict</span><span class="op">.</span><span class="fu">map</span> (\<span class="fu">_</span> <span class="fu">v</span> <span class="op">-&gt;</span> <span class="fu">v</span> <span class="op">+</span> <span class="dv">1</span>) <span class="fu">ctx</span><span class="op">.</span><span class="fu">env</span> }</span>
<span id="cb12-42"><a href="#cb12-42"></a></span>
<span id="cb12-43"><a href="#cb12-43"></a><span class="co">-- 新しい変数名を追加する</span></span>
<span id="cb12-44"><a href="#cb12-44"></a><span class="co">-- 同じ変数名は上書きしてしまって良い</span></span>
<span id="cb12-45"><a href="#cb12-45"></a><span class="fu">pushVar</span> : <span class="dt">String</span> <span class="op">-&gt;</span> <span class="dt">Context</span> <span class="op">-&gt;</span> <span class="dt">Context</span></span>
<span id="cb12-46"><a href="#cb12-46"></a><span class="fu">pushVar</span> <span class="fu">v</span> <span class="fu">ctx</span> <span class="op">=</span></span>
<span id="cb12-47"><a href="#cb12-47"></a>    { <span class="fu">ctx</span> <span class="op">|</span> <span class="fu">env</span> <span class="op">=</span> <span class="dt">Dict</span><span class="op">.</span><span class="fu">insert</span> <span class="fu">v</span> <span class="dv">0</span> <span class="fu">ctx</span><span class="op">.</span><span class="fu">env</span> }</span>
<span id="cb12-48"><a href="#cb12-48"></a></span>
<span id="cb12-49"><a href="#cb12-49"></a><span class="co">-- 変数のパーサー</span></span>
<span id="cb12-50"><a href="#cb12-50"></a><span class="fu">varParser</span> : <span class="dt">Context</span> <span class="op">-&gt;</span> <span class="dt">Parser</span> <span class="dt">Term</span></span>
<span id="cb12-51"><a href="#cb12-51"></a><span class="fu">varParser</span> <span class="fu">ctx</span> <span class="op">=</span></span>
<span id="cb12-52"><a href="#cb12-52"></a>    <span class="fu">varStrParser</span></span>
<span id="cb12-53"><a href="#cb12-53"></a>        <span class="op">|&gt;</span> <span class="dt">Parser</span><span class="op">.</span><span class="fu">andThen</span> (<span class="fu">lookupVar</span> <span class="fu">ctx</span>)</span>
<span id="cb12-54"><a href="#cb12-54"></a>        <span class="op">|&gt;</span> <span class="dt">Parser</span><span class="op">.</span><span class="fu">map</span> (<span class="fu">flip</span> <span class="dt">TmVar</span> <span class="fu">ctx</span><span class="op">.</span><span class="fu">depth</span>)</span>
<span id="cb12-55"><a href="#cb12-55"></a></span>
<span id="cb12-56"><a href="#cb12-56"></a><span class="co">-- コンテキストには変数名とドブラウン・インデックスの連想配列がある</span></span>
<span id="cb12-57"><a href="#cb12-57"></a><span class="co">-- なので，変数名で引っ張ってくるだけ</span></span>
<span id="cb12-58"><a href="#cb12-58"></a><span class="fu">lookupVar</span> : <span class="dt">Context</span> <span class="op">-&gt;</span> <span class="dt">String</span> <span class="op">-&gt;</span> <span class="dt">Parser</span> <span class="dt">Int</span></span>
<span id="cb12-59"><a href="#cb12-59"></a><span class="fu">lookupVar</span> <span class="fu">ctx</span> <span class="fu">s</span> <span class="op">=</span></span>
<span id="cb12-60"><a href="#cb12-60"></a>  <span class="dt">Dict</span><span class="op">.</span><span class="fu">get</span> <span class="fu">s</span> <span class="fu">ctx</span><span class="op">.</span><span class="fu">env</span></span>
<span id="cb12-61"><a href="#cb12-61"></a>      <span class="op">|&gt;</span> <span class="dt">Maybe</span><span class="op">.</span><span class="fu">map</span> <span class="dt">Parser</span><span class="op">.</span><span class="fu">succeed</span></span>
<span id="cb12-62"><a href="#cb12-62"></a>      <span class="op">|&gt;</span> <span class="dt">Maybe</span><span class="op">.</span><span class="fu">withDefault</span> (<span class="dt">Parser</span><span class="op">.</span><span class="fu">problem</span> (<span class="st">&quot;undefined variable: &quot;</span> <span class="op">++</span> <span class="fu">s</span>))</span></code></pre></div>
<p>REPL で試してみる:</p>
<div class="sourceCode" id="cb13"><pre class="sourceCode elm"><code class="sourceCode elm"><span id="cb13-1"><a href="#cb13-1"></a><span class="op">&gt;</span> <span class="kw">import</span> <span class="dt">TaPL</span><span class="op">.</span><span class="dt">Chap7</span><span class="op">.</span><span class="dt">Parser</span> <span class="kw">as</span> <span class="dt">Parser</span></span>
<span id="cb13-2"><a href="#cb13-2"></a><span class="op">&gt;</span> <span class="dt">Parser</span><span class="op">.</span><span class="fu">parse</span> <span class="st">&quot;\\x. x&quot;</span></span>
<span id="cb13-3"><a href="#cb13-3"></a><span class="dt">Ok</span> (<span class="dt">TmAbs</span> <span class="st">&quot;x&quot;</span> (<span class="dt">TmVar</span> <span class="dv">0</span> <span class="dv">1</span>))</span>
<span id="cb13-4"><a href="#cb13-4"></a>    : <span class="dt">Result</span> (<span class="dt">List</span> <span class="dt">Parser</span><span class="op">.</span><span class="dt">DeadEnd</span>) <span class="dt">Term</span></span>
<span id="cb13-5"><a href="#cb13-5"></a><span class="op">&gt;</span> <span class="dt">Parser</span><span class="op">.</span><span class="fu">parse</span> <span class="st">&quot;\\x. (\\y . x)&quot;</span></span>
<span id="cb13-6"><a href="#cb13-6"></a><span class="dt">Ok</span> (<span class="dt">TmAbs</span> <span class="st">&quot;x&quot;</span> (<span class="dt">TmAbs</span> <span class="st">&quot;y&quot;</span> (<span class="dt">TmVar</span> <span class="dv">1</span> <span class="dv">2</span>)))</span>
<span id="cb13-7"><a href="#cb13-7"></a>    : <span class="dt">Result</span> (<span class="dt">List</span> <span class="dt">Parser</span><span class="op">.</span><span class="dt">DeadEnd</span>) <span class="dt">Term</span></span>
<span id="cb13-8"><a href="#cb13-8"></a><span class="op">&gt;</span> <span class="dt">Parser</span><span class="op">.</span><span class="fu">parse</span> <span class="st">&quot;\\x. (\\y . z)&quot;</span></span>
<span id="cb13-9"><a href="#cb13-9"></a><span class="dt">Err</span> [{ <span class="fu">col</span> <span class="op">=</span> <span class="dv">12</span><span class="op">,</span> <span class="fu">problem</span> <span class="op">=</span> <span class="dt">Problem</span> (<span class="st">&quot;undefined variable: z&quot;</span>)<span class="op">,</span> <span class="fu">row</span> <span class="op">=</span> <span class="dv">1</span> }]</span>
<span id="cb13-10"><a href="#cb13-10"></a>    : <span class="dt">Result</span> (<span class="dt">List</span> <span class="dt">Parser</span><span class="op">.</span><span class="dt">DeadEnd</span>) <span class="dt">Term</span></span></code></pre></div>
<p>自由変数が出てくるとちゃんとエラーになる．</p>
<p>残るは関数適用だ． 実はこいつが難しい． というのも，雑に実装をするといわゆる左再帰が出てくるからだ．</p>
<ul>
<li><a href="https://kazu-yamamoto.hatenablog.jp/entry/20110127/1296098875">chainl と左再帰 - あどけない話</a></li>
</ul>
<p>なので，一工夫する必要がある:</p>
<div class="sourceCode" id="cb14"><pre class="sourceCode elm"><code class="sourceCode elm"><span id="cb14-1"><a href="#cb14-1"></a><span class="fu">termParser</span> : <span class="dt">Context</span> <span class="op">-&gt;</span> <span class="dt">Parser</span> <span class="dt">Term</span></span>
<span id="cb14-2"><a href="#cb14-2"></a><span class="fu">termParser</span> <span class="fu">ctx</span> <span class="op">=</span></span>
<span id="cb14-3"><a href="#cb14-3"></a>    <span class="co">-- 関数適用は t1 t2 なのでまずは t1 にマッチさせ</span></span>
<span id="cb14-4"><a href="#cb14-4"></a>    <span class="dt">Parser</span><span class="op">.</span><span class="fu">oneOf</span></span>
<span id="cb14-5"><a href="#cb14-5"></a>        [ <span class="fu">parParser</span> <span class="fu">ctx</span></span>
<span id="cb14-6"><a href="#cb14-6"></a>        <span class="op">,</span> <span class="fu">absParser</span> <span class="fu">ctx</span></span>
<span id="cb14-7"><a href="#cb14-7"></a>        <span class="op">,</span> <span class="fu">varParser</span> <span class="fu">ctx</span></span>
<span id="cb14-8"><a href="#cb14-8"></a>        ]  <span class="co">-- 後から t2 を探す</span></span>
<span id="cb14-9"><a href="#cb14-9"></a>        <span class="op">|&gt;</span> <span class="dt">Parser</span><span class="op">.</span><span class="fu">andThen</span> (<span class="fu">appParser</span> <span class="fu">ctx</span>)</span>
<span id="cb14-10"><a href="#cb14-10"></a></span>
<span id="cb14-11"><a href="#cb14-11"></a><span class="co">-- 関数適用 t1 t2 のパーサー</span></span>
<span id="cb14-12"><a href="#cb14-12"></a><span class="fu">appParser</span> : <span class="dt">Context</span> <span class="op">-&gt;</span> <span class="dt">Term</span> <span class="op">-&gt;</span> <span class="dt">Parser</span> <span class="dt">Term</span></span>
<span id="cb14-13"><a href="#cb14-13"></a><span class="fu">appParser</span> <span class="fu">ctx</span> <span class="fu">t</span> <span class="op">=</span></span>
<span id="cb14-14"><a href="#cb14-14"></a>    <span class="dt">Parser</span><span class="op">.</span><span class="fu">oneOf</span></span>
<span id="cb14-15"><a href="#cb14-15"></a>        [ <span class="dt">Parser</span><span class="op">.</span><span class="fu">succeed</span> (<span class="dt">TmApp</span> <span class="fu">t</span>)</span>
<span id="cb14-16"><a href="#cb14-16"></a>            <span class="co">-- backtrackable や commit は一旦無視して良い</span></span>
<span id="cb14-17"><a href="#cb14-17"></a>            <span class="co">-- termWithoutAppParser が先に出てくるのは関数適用が左結合のため</span></span>
<span id="cb14-18"><a href="#cb14-18"></a>            <span class="co">-- 例: t1 t2 t3 は (t1 t2) t3 つまり (TmApp (TmApp t1 t2) t3)</span></span>
<span id="cb14-19"><a href="#cb14-19"></a>            <span class="op">|.</span> <span class="dt">Parser</span><span class="op">.</span><span class="fu">backtrackable</span> (<span class="dt">Parser</span><span class="op">.</span><span class="fu">symbol</span> <span class="st">&quot; &quot;</span> <span class="op">|.</span> <span class="dt">Parser</span><span class="op">.</span><span class="fu">spaces</span>)</span>
<span id="cb14-20"><a href="#cb14-20"></a>            <span class="op">|=</span> <span class="dt">Parser</span><span class="op">.</span><span class="fu">lazy</span> (\<span class="fu">_</span> <span class="op">-&gt;</span> <span class="fu">termWithoutAppParser</span> <span class="fu">ctx</span>)</span>
<span id="cb14-21"><a href="#cb14-21"></a>            <span class="op">|&gt;</span> <span class="dt">Parser</span><span class="op">.</span><span class="fu">andThen</span> <span class="dt">Parser</span><span class="op">.</span><span class="fu">commit</span></span>
<span id="cb14-22"><a href="#cb14-22"></a>            <span class="op">|&gt;</span> <span class="dt">Parser</span><span class="op">.</span><span class="fu">andThen</span> (<span class="fu">appParser</span> <span class="fu">ctx</span>)</span>
<span id="cb14-23"><a href="#cb14-23"></a>        <span class="co">-- t2 がなければ t1 のまんま返す</span></span>
<span id="cb14-24"><a href="#cb14-24"></a>        <span class="op">,</span> <span class="dt">Parser</span><span class="op">.</span><span class="fu">succeed</span> <span class="fu">t</span></span>
<span id="cb14-25"><a href="#cb14-25"></a>        ]</span>
<span id="cb14-26"><a href="#cb14-26"></a></span>
<span id="cb14-27"><a href="#cb14-27"></a><span class="co">-- 関数適用を抜いた termParser</span></span>
<span id="cb14-28"><a href="#cb14-28"></a><span class="fu">termWithoutAppParser</span> : <span class="dt">Context</span> <span class="op">-&gt;</span> <span class="dt">Parser</span> <span class="dt">Term</span></span>
<span id="cb14-29"><a href="#cb14-29"></a><span class="fu">termWithoutAppParser</span> <span class="fu">ctx</span> <span class="op">=</span></span>
<span id="cb14-30"><a href="#cb14-30"></a>    <span class="dt">Parser</span><span class="op">.</span><span class="fu">oneOf</span></span>
<span id="cb14-31"><a href="#cb14-31"></a>        [ <span class="fu">parParser</span> <span class="fu">ctx</span></span>
<span id="cb14-32"><a href="#cb14-32"></a>        <span class="op">,</span> <span class="fu">absParser</span> <span class="fu">ctx</span></span>
<span id="cb14-33"><a href="#cb14-33"></a>        <span class="op">,</span> <span class="fu">varParser</span> <span class="fu">ctx</span></span>
<span id="cb14-34"><a href="#cb14-34"></a>        ]</span></code></pre></div>
<p><code>backtrackable</code> と <code>commit</code> はパーサーが文字列を消費してしまう問題の解決方法だ． パーサーの処理が進むと対象の文字列をどんどん消費していく． <code>oneOf</code> で複数のパーサーを許容するとき，1文字目の結果で分岐できることが保証されているなら問題ないが，途中まで進み文字列を消費して失敗すると，その文字列を消費した状態で <code>oneOf</code> 内の次のパーサーへ進んでしまう． そこで，elm/parser の場合は消費を戻して欲しい場合はし <code>backtrackable</code> を使い，もう戻らなくて良くなった時点で <code>commit</code> を使う，という感じ（たぶん）． まぁ今回は必要ではない気がするが，後々必要になってくる．</p>
<h1 id="section-2"></h1>
<p>さぁ REPL で確認してみよう:</p>
<div class="sourceCode" id="cb15"><pre class="sourceCode elm"><code class="sourceCode elm"><span id="cb15-1"><a href="#cb15-1"></a><span class="op">&gt;</span>  <span class="dt">Parser</span><span class="op">.</span><span class="fu">parse</span> <span class="st">&quot;(\\x . \\f . f x) (\\x . x) (\\x . (\\x . x))&quot;</span></span>
<span id="cb15-2"><a href="#cb15-2"></a><span class="op">|</span>   <span class="op">|&gt;</span> <span class="dt">Result</span><span class="op">.</span><span class="fu">toMaybe</span></span>
<span id="cb15-3"><a href="#cb15-3"></a><span class="op">|</span>   <span class="op">|&gt;</span> <span class="dt">Maybe</span><span class="op">.</span><span class="fu">andThen</span> (<span class="dt">Chap7</span><span class="op">.</span><span class="fu">eval</span> [])</span>
<span id="cb15-4"><a href="#cb15-4"></a><span class="op">|</span>   <span class="op">|&gt;</span> <span class="dt">Maybe</span><span class="op">.</span><span class="fu">map</span> <span class="dt">Chap7</span><span class="op">.</span><span class="fu">display</span></span>
<span id="cb15-5"><a href="#cb15-5"></a><span class="op">|</span>   </span>
<span id="cb15-6"><a href="#cb15-6"></a><span class="dt">Just</span> (<span class="st">&quot;\\x. x&quot;</span>) : <span class="dt">Maybe</span> <span class="dt">String</span></span></code></pre></div>
<p>完璧だ．</p>
<h2 id="おまけ-spa-にする">おまけ: SPA にする</h2>
<p>今回も同様に SPA にする． 章ごとにページ分けても良かったが，試しに一つにまとめてみた． つまり，4章の言語と7章の言語を同じように扱う． どちらも:</p>
<ul>
<li>文字列をパースする(<code>parse</code>)</li>
<li>項を1ステップ評価する(<code>eval1</code>)</li>
<li>項を文字列に変換する(<code>display</code>)</li>
</ul>
<p>をしたい． こういった場合，多くの言語ではインターフェースや型クラスのようなアドホック多相を利用する． しかし，Elm にはアドホック多相はない． そのため，パラメトリック多相で模倣する:</p>
<div class="sourceCode" id="cb16"><pre class="sourceCode elm"><code class="sourceCode elm"><span id="cb16-1"><a href="#cb16-1"></a><span class="co">-- 各章の言語の Context と Term 型を受け取る</span></span>
<span id="cb16-2"><a href="#cb16-2"></a><span class="kw">type</span> <span class="kw">alias</span> <span class="dt">Calculus</span> <span class="fu">ctx</span> <span class="fu">t</span> <span class="op">=</span></span>
<span id="cb16-3"><a href="#cb16-3"></a>    { <span class="fu">parse</span> : <span class="dt">String</span> <span class="op">-&gt;</span> <span class="dt">Result</span> (<span class="dt">List</span> <span class="dt">Parser</span><span class="op">.</span><span class="dt">DeadEnd</span>) <span class="fu">t</span></span>
<span id="cb16-4"><a href="#cb16-4"></a>    <span class="op">,</span> <span class="fu">eval1</span> : <span class="fu">ctx</span> <span class="op">-&gt;</span> <span class="fu">t</span> <span class="op">-&gt;</span> <span class="dt">Maybe</span> <span class="fu">t</span></span>
<span id="cb16-5"><a href="#cb16-5"></a>    <span class="op">,</span> <span class="fu">display</span> : <span class="fu">t</span> <span class="op">-&gt;</span> <span class="dt">String</span></span>
<span id="cb16-6"><a href="#cb16-6"></a>    <span class="op">,</span> <span class="fu">init</span> : <span class="fu">ctx</span>     <span class="co">-- Context の初期値</span></span>
<span id="cb16-7"><a href="#cb16-7"></a>    <span class="op">,</span> <span class="fu">logs</span> : <span class="dt">List</span> <span class="fu">t</span>  <span class="co">-- Term の履歴(表示用)</span></span>
<span id="cb16-8"><a href="#cb16-8"></a>    }</span>
<span id="cb16-9"><a href="#cb16-9"></a></span>
<span id="cb16-10"><a href="#cb16-10"></a><span class="fu">parse</span> : <span class="dt">String</span> <span class="op">-&gt;</span> <span class="dt">Calculus</span> <span class="fu">ctx</span> <span class="fu">t</span> <span class="fu">ty</span> <span class="op">-&gt;</span> <span class="dt">Result</span> (<span class="dt">List</span> <span class="dt">Parser</span><span class="op">.</span><span class="dt">DeadEnd</span>) (<span class="dt">Calculus</span> <span class="fu">ctx</span> <span class="fu">t</span> <span class="fu">ty</span>)</span>
<span id="cb16-11"><a href="#cb16-11"></a><span class="fu">eval1</span> : <span class="dt">Calculus</span> <span class="fu">ctx</span> <span class="fu">t</span> <span class="fu">ty</span> <span class="op">-&gt;</span> <span class="dt">Maybe</span> (<span class="dt">Calculus</span> <span class="fu">ctx</span> <span class="fu">t</span> <span class="fu">ty</span>)</span>
<span id="cb16-12"><a href="#cb16-12"></a><span class="fu">display</span> : <span class="dt">Calculus</span> <span class="fu">ctx</span> <span class="fu">t</span> <span class="fu">ty</span> <span class="op">-&gt;</span> <span class="dt">List</span> <span class="dt">String</span></span></code></pre></div>
<p><code>Calculus</code> には章ごとに型が異なるものを全部突っ込む必要がある． そのため <code>logs</code> のようなフィールドもある(前回 <code>Model</code> 型の <code>exps</code> にあったやつ)． この型の値を各章ごとに定義しよう:</p>
<div class="sourceCode" id="cb17"><pre class="sourceCode elm"><code class="sourceCode elm"><span id="cb17-1"><a href="#cb17-1"></a><span class="kw">type</span> <span class="dt">Chapter</span></span>
<span id="cb17-2"><a href="#cb17-2"></a>    <span class="op">=</span> <span class="dt">Chap0</span></span>
<span id="cb17-3"><a href="#cb17-3"></a>    <span class="op">|</span> <span class="dt">Chap4</span> (<span class="dt">Calculus</span> () <span class="dt">Chap4</span><span class="op">.</span><span class="dt">Term</span>)</span>
<span id="cb17-4"><a href="#cb17-4"></a>    <span class="op">|</span> <span class="dt">Chap7</span> (<span class="dt">Calculus</span> <span class="dt">Chap7</span><span class="op">.</span><span class="dt">Context</span> <span class="dt">Chap7</span><span class="op">.</span><span class="dt">Term</span>)</span>
<span id="cb17-5"><a href="#cb17-5"></a></span>
<span id="cb17-6"><a href="#cb17-6"></a><span class="fu">init</span> : <span class="dt">String</span> <span class="op">-&gt;</span> <span class="dt">Chapter</span></span>
<span id="cb17-7"><a href="#cb17-7"></a><span class="fu">init</span> <span class="fu">s</span> <span class="op">=</span></span>
<span id="cb17-8"><a href="#cb17-8"></a>    <span class="cf">case</span> <span class="fu">s</span> <span class="cf">of</span></span>
<span id="cb17-9"><a href="#cb17-9"></a>        <span class="st">&quot;chap4&quot;</span> <span class="op">-&gt;</span></span>
<span id="cb17-10"><a href="#cb17-10"></a>            <span class="dt">Chap4</span></span>
<span id="cb17-11"><a href="#cb17-11"></a>                { <span class="fu">parse</span> <span class="op">=</span> <span class="dt">Chap4</span><span class="op">.</span><span class="fu">parse</span></span>
<span id="cb17-12"><a href="#cb17-12"></a>                <span class="op">,</span> <span class="fu">eval1</span> <span class="op">=</span> \<span class="fu">_</span> <span class="op">-&gt;</span> <span class="dt">Chap4</span><span class="op">.</span><span class="fu">eval1</span></span>
<span id="cb17-13"><a href="#cb17-13"></a>                <span class="op">,</span> <span class="fu">display</span> <span class="op">=</span> <span class="dt">Chap4</span><span class="op">.</span><span class="fu">display</span></span>
<span id="cb17-14"><a href="#cb17-14"></a>                <span class="op">,</span> <span class="fu">init</span> <span class="op">=</span> ()</span>
<span id="cb17-15"><a href="#cb17-15"></a>                <span class="op">,</span> <span class="fu">logs</span> <span class="op">=</span> []</span>
<span id="cb17-16"><a href="#cb17-16"></a>                }</span>
<span id="cb17-17"><a href="#cb17-17"></a></span>
<span id="cb17-18"><a href="#cb17-18"></a>        <span class="st">&quot;chap7&quot;</span> <span class="op">-&gt;</span></span>
<span id="cb17-19"><a href="#cb17-19"></a>            <span class="dt">Chap7</span></span>
<span id="cb17-20"><a href="#cb17-20"></a>                { <span class="fu">parse</span> <span class="op">=</span> <span class="dt">Chap7</span><span class="op">.</span><span class="fu">parse</span></span>
<span id="cb17-21"><a href="#cb17-21"></a>                <span class="op">,</span> <span class="fu">eval1</span> <span class="op">=</span> <span class="dt">Chap7</span><span class="op">.</span><span class="fu">eval1</span></span>
<span id="cb17-22"><a href="#cb17-22"></a>                <span class="op">,</span> <span class="fu">display</span> <span class="op">=</span> <span class="dt">Chap7</span><span class="op">.</span><span class="fu">display</span></span>
<span id="cb17-23"><a href="#cb17-23"></a>                <span class="op">,</span> <span class="fu">init</span> <span class="op">=</span> []</span>
<span id="cb17-24"><a href="#cb17-24"></a>                <span class="op">,</span> <span class="fu">logs</span> <span class="op">=</span> []</span>
<span id="cb17-25"><a href="#cb17-25"></a>                }</span>
<span id="cb17-26"><a href="#cb17-26"></a></span>
<span id="cb17-27"><a href="#cb17-27"></a><span class="fu">parse</span> : <span class="dt">Chapter</span> <span class="op">-&gt;</span> <span class="dt">String</span> <span class="op">-&gt;</span> <span class="dt">Result</span> (<span class="dt">List</span> <span class="dt">Parser</span><span class="op">.</span><span class="dt">DeadEnd</span>) <span class="dt">Chapter</span></span>
<span id="cb17-28"><a href="#cb17-28"></a><span class="fu">eval1</span> : <span class="dt">Chapter</span> <span class="op">-&gt;</span> <span class="dt">Maybe</span> <span class="dt">Chapter</span></span>
<span id="cb17-29"><a href="#cb17-29"></a><span class="fu">display</span> : <span class="dt">Chapter</span> <span class="op">-&gt;</span> <span class="dt">List</span> <span class="dt">String</span></span></code></pre></div>
<p>あとは <code>Chapter</code> 型を <code>main</code> の <code>Model</code> に持たせて，それぞれの関数を <code>Chapter</code> のものへと置き換えるだけ． これが良い方法かどうか，正直なんとも言えないが面白いモノができたの個人的には満足．</p>
<h2 id="おしまい">おしまい</h2>
<p>ところで，型なしラムダ計算は停止しない場合がある(例えば <code>(\x . x x) (\x . x x)</code> とか)． このような式を SPA に突っ込むと無限に eval ボタンを押せてしまう． そこで，同期からは「eval ボタンが下にずれていくから無限プチプチみたいなのができない」と言われた笑． 検討した結果，ボタン固定にすると式の結果を追うのに上下スクロールを何回もしないとなので却下した(ごめんね)．</p>
  </div>]]></summary>
</entry>
<entry>
    <title>Elm で作る TaPL のラムダ計算（その１）</title>
    <link href="https://matsubara0507.github.io/posts/2019-12-06-tapl-with-elm-part1.html" />
    <id>https://matsubara0507.github.io/posts/2019-12-06-tapl-with-elm-part1.html</id>
    <published>2019-12-06T00:00:00Z</published>
    <updated>2019-12-06T00:00:00Z</updated>
    <summary type="html"><![CDATA[<div class="post-content" itemprop="articleBody">
    <p>本記事は「<a href="https://qiita.com/advent-calendar/2019/elm">Elm Advent Calendar 2019</a>」の6日目の記事です．</p>
<h1 id="section"></h1>
<p>表題の通り，TaPL という書籍で紹介されているプログラミング言語の実装例を Elm でやってみたという話です（その１）．</p>
<h2 id="tapl-とプログラミング言語の実装">TaPL とプログラミング言語の実装</h2>
<p>「<a href="https://www.cis.upenn.edu/~bcpierce/tapl/">Type and Programming Language</a>」(翻訳本は「型システム入門 -プログラミング言語と型の理論-」というもの，以下 TaPL)という書籍を知ってますか？ この書籍はプログラミング言語の型システムの理論体系に関するとても有名な書籍だ（学術的なその分野における入門書）． TaPL の多くは数理論理学的な議論や証明で構成されているのだが，いくつかの章では簡易的なプログラミング言語の実装がある:</p>
<ul>
<li>第4章 算術式のML実装 (本記事はココ)
<ul>
<li>自然数と真偽値と if-then-else</li>
<li>変数などもない</li>
</ul></li>
<li>第7章 ラムダ計算のML実装
<ul>
<li>型無しラムダ計算を実装</li>
<li>以降はこれを拡張していく(たしか)</li>
</ul></li>
<li>第10章 単純型のML実装
<ul>
<li>7章のを型付きラムダ計算にする</li>
</ul></li>
<li>第17章 部分型付けのML実装</li>
<li>第25章 System F のML実装
<ul>
<li>最後に型の多相性を追加</li>
</ul></li>
</ul>
<p>本記事では4章の実装を行う．</p>
<h3 id="何で実装するか">何で実装するか</h3>
<p>TaPL では実装にあたり，以下のようなプログラミング言語で行うことをオススメしている:</p>
<ul>
<li>自動メモリ管理 (GC)</li>
<li>代数的データ型 (を容易に記述できる)</li>
<li>パターンマッチ</li>
</ul>
<p>ML系や Haskell，Scala であれば上記の条件にマッチするだろう． タイトルの通り私は Elm でやってみることにした(きっと事例が少ない)．</p>
<p>なお実装は全て下記のリポジトリにあげている:</p>
<ul>
<li><a href="https://github.com/matsubara0507/ELaMbda">matsubara0507/ELaMbda - GitHub</a></li>
</ul>
<p>Elm は Web フロントに特化した DSL だ． ということで，最終的にはパーサーも実装し，<a href="https://matsubara0507.github.io/ELaMbda/?chap=chap4">Web ブラウザから遊べるようにした</a>．</p>
<p><a href="https://matsubara0507.github.io/ELaMbda/?chap=chap4&amp;exp=if%20if%20true%20then%20false%20else%20true%20then%200%20else%20if%20false%20then%202%20else%203"><img src="/assets/tapl-with-elm/chap4.jpg"></img></a></p>
<h2 id="第4章-算術式のml実装">第4章 算術式のML実装</h2>
<p>4章で実装する言語の数理論理学的な議論は3章でやり，4章ではそれを ML で実装している． 以降の章では結構実装が省かれてたりするのだが，4章のは全部書いてあるので ML をお手元の言語に翻訳していくだけど簡単な作業です．</p>
<h3 id="構文規則">構文規則</h3>
<p>プログラミング言語の基本的な構成要素は「構文」と「評価」だ(たぶん)． まずは構文から:</p>
<div class="sourceCode" id="cb1"><pre class="sourceCode txt"><code class="sourceCode default"><span id="cb1-1"><a href="#cb1-1"></a>// 値</span>
<span id="cb1-2"><a href="#cb1-2"></a>v := true</span>
<span id="cb1-3"><a href="#cb1-3"></a>   | false</span>
<span id="cb1-4"><a href="#cb1-4"></a>   | nv</span>
<span id="cb1-5"><a href="#cb1-5"></a></span>
<span id="cb1-6"><a href="#cb1-6"></a>// 自然数</span>
<span id="cb1-7"><a href="#cb1-7"></a>nv := 0 | succ nv</span>
<span id="cb1-8"><a href="#cb1-8"></a></span>
<span id="cb1-9"><a href="#cb1-9"></a>// 項</span>
<span id="cb1-10"><a href="#cb1-10"></a>t := v</span>
<span id="cb1-11"><a href="#cb1-11"></a>   | if t then t else t</span>
<span id="cb1-12"><a href="#cb1-12"></a>   | succ t</span>
<span id="cb1-13"><a href="#cb1-13"></a>   | pred t</span>
<span id="cb1-14"><a href="#cb1-14"></a>   | iszero t</span></code></pre></div>
<p>自然数と真偽値だけの極めてシンプルなものだ． 項は型で表現し，値や自然数かどうかの判定はそう言う関数を用意する:</p>
<div class="sourceCode" id="cb2"><pre class="sourceCode elm"><code class="sourceCode elm"><span id="cb2-1"><a href="#cb2-1"></a><span class="co">-- 構文</span></span>
<span id="cb2-2"><a href="#cb2-2"></a><span class="kw">type</span> <span class="dt">Term</span></span>
<span id="cb2-3"><a href="#cb2-3"></a>    <span class="op">=</span> <span class="dt">TmTrue</span></span>
<span id="cb2-4"><a href="#cb2-4"></a>    <span class="op">|</span> <span class="dt">TmFalse</span></span>
<span id="cb2-5"><a href="#cb2-5"></a>    <span class="op">|</span> <span class="dt">TmIf</span> <span class="dt">Term</span> <span class="dt">Term</span> <span class="dt">Term</span></span>
<span id="cb2-6"><a href="#cb2-6"></a>    <span class="op">|</span> <span class="dt">TmZero</span></span>
<span id="cb2-7"><a href="#cb2-7"></a>    <span class="op">|</span> <span class="dt">TmSucc</span> <span class="dt">Term</span></span>
<span id="cb2-8"><a href="#cb2-8"></a>    <span class="op">|</span> <span class="dt">TmPred</span> <span class="dt">Term</span></span>
<span id="cb2-9"><a href="#cb2-9"></a>    <span class="op">|</span> <span class="dt">TmIsZero</span> <span class="dt">Term</span></span>
<span id="cb2-10"><a href="#cb2-10"></a></span>
<span id="cb2-11"><a href="#cb2-11"></a><span class="co">-- 値かどうか</span></span>
<span id="cb2-12"><a href="#cb2-12"></a><span class="fu">isval</span> : <span class="dt">Term</span> <span class="op">-&gt;</span> <span class="dt">Bool</span></span>
<span id="cb2-13"><a href="#cb2-13"></a><span class="fu">isval</span> <span class="fu">t</span> <span class="op">=</span></span>
<span id="cb2-14"><a href="#cb2-14"></a>    <span class="cf">case</span> <span class="fu">t</span> <span class="cf">of</span></span>
<span id="cb2-15"><a href="#cb2-15"></a>        <span class="dt">TmTrue</span> <span class="op">-&gt;</span></span>
<span id="cb2-16"><a href="#cb2-16"></a>            <span class="dt">True</span></span>
<span id="cb2-17"><a href="#cb2-17"></a></span>
<span id="cb2-18"><a href="#cb2-18"></a>        <span class="dt">TmFalse</span> <span class="op">-&gt;</span></span>
<span id="cb2-19"><a href="#cb2-19"></a>            <span class="dt">True</span></span>
<span id="cb2-20"><a href="#cb2-20"></a></span>
<span id="cb2-21"><a href="#cb2-21"></a>        <span class="fu">_</span> <span class="op">-&gt;</span></span>
<span id="cb2-22"><a href="#cb2-22"></a>            <span class="fu">isnumericval</span> <span class="fu">t</span></span>
<span id="cb2-23"><a href="#cb2-23"></a></span>
<span id="cb2-24"><a href="#cb2-24"></a><span class="co">-- 数値かどうか</span></span>
<span id="cb2-25"><a href="#cb2-25"></a><span class="fu">isnumericval</span> : <span class="dt">Term</span> <span class="op">-&gt;</span> <span class="dt">Bool</span></span>
<span id="cb2-26"><a href="#cb2-26"></a><span class="fu">isnumericval</span> <span class="fu">t</span> <span class="op">=</span></span>
<span id="cb2-27"><a href="#cb2-27"></a>    <span class="cf">case</span> <span class="fu">t</span> <span class="cf">of</span></span>
<span id="cb2-28"><a href="#cb2-28"></a>        <span class="dt">TmZero</span> <span class="op">-&gt;</span></span>
<span id="cb2-29"><a href="#cb2-29"></a>            <span class="dt">True</span></span>
<span id="cb2-30"><a href="#cb2-30"></a></span>
<span id="cb2-31"><a href="#cb2-31"></a>        <span class="dt">TmSucc</span> <span class="fu">t1</span> <span class="op">-&gt;</span></span>
<span id="cb2-32"><a href="#cb2-32"></a>            <span class="fu">isnumericval</span> <span class="fu">t1</span></span>
<span id="cb2-33"><a href="#cb2-33"></a></span>
<span id="cb2-34"><a href="#cb2-34"></a>        <span class="fu">_</span> <span class="op">-&gt;</span></span>
<span id="cb2-35"><a href="#cb2-35"></a>            <span class="dt">False</span></span></code></pre></div>
<p>TaPL では項に <code>Info</code> と言う型を持たせて，もともと何行何列目だったかのような情報を持たせているが，今回はそこまでリッチにする予定はないし煩わしいので省いた．</p>
<h3 id="評価規則">評価規則</h3>
<p>構文が定義できたので，次は評価規則を定義し実装する． 評価規則とは，プログラムコード(項)の実行の仕方そのもので，今回は次のように定義する:</p>
<div class="sourceCode" id="cb3"><pre class="sourceCode txt"><code class="sourceCode default"><span id="cb3-1"><a href="#cb3-1"></a>// if-then-else の評価規則(3つ)</span>
<span id="cb3-2"><a href="#cb3-2"></a></span>
<span id="cb3-3"><a href="#cb3-3"></a> if true then t2 else t3 =&gt; t2</span>
<span id="cb3-4"><a href="#cb3-4"></a></span>
<span id="cb3-5"><a href="#cb3-5"></a> if false then t2 else t3 =&gt; t3</span>
<span id="cb3-6"><a href="#cb3-6"></a></span>
<span id="cb3-7"><a href="#cb3-7"></a> t1 -&gt; t1&#39;</span>
<span id="cb3-8"><a href="#cb3-8"></a>-------------------------------------------------</span>
<span id="cb3-9"><a href="#cb3-9"></a> if t1 then t2 else t3 =&gt; if t1&#39; then t2 else t3</span>
<span id="cb3-10"><a href="#cb3-10"></a></span>
<span id="cb3-11"><a href="#cb3-11"></a>// 自然数の評価規則</span>
<span id="cb3-12"><a href="#cb3-12"></a> t1 -&gt; t1&#39;</span>
<span id="cb3-13"><a href="#cb3-13"></a>---------------------</span>
<span id="cb3-14"><a href="#cb3-14"></a> succ t1 =&gt; succ t1&#39;</span>
<span id="cb3-15"><a href="#cb3-15"></a></span>
<span id="cb3-16"><a href="#cb3-16"></a> pred 0 =&gt; 0</span>
<span id="cb3-17"><a href="#cb3-17"></a></span>
<span id="cb3-18"><a href="#cb3-18"></a> pred (succ nv1) =&gt; nv1</span>
<span id="cb3-19"><a href="#cb3-19"></a></span>
<span id="cb3-20"><a href="#cb3-20"></a> t1 -&gt; t1&#39;</span>
<span id="cb3-21"><a href="#cb3-21"></a>---------------------</span>
<span id="cb3-22"><a href="#cb3-22"></a> pred t1 =&gt; pred t1&#39;</span>
<span id="cb3-23"><a href="#cb3-23"></a></span>
<span id="cb3-24"><a href="#cb3-24"></a> iszero 0 =&gt; true</span>
<span id="cb3-25"><a href="#cb3-25"></a></span>
<span id="cb3-26"><a href="#cb3-26"></a> iszero (succ nv1) =&gt; false</span>
<span id="cb3-27"><a href="#cb3-27"></a></span>
<span id="cb3-28"><a href="#cb3-28"></a> t1 -&gt; t1&#39;</span>
<span id="cb3-29"><a href="#cb3-29"></a>-------------------------</span>
<span id="cb3-30"><a href="#cb3-30"></a> iszero t1 =&gt; iszero t1&#39;</span></code></pre></div>
<p>分数のような記述は上が成り立つならば下も成り立つと言うニュアンス(雑)． 次の <code>eval1</code> というのが評価規則を実装したものだ:</p>
<div class="sourceCode" id="cb4"><pre class="sourceCode elm"><code class="sourceCode elm"><span id="cb4-1"><a href="#cb4-1"></a><span class="co">-- 値になるまで評価する (これは TaPL にはない)</span></span>
<span id="cb4-2"><a href="#cb4-2"></a><span class="fu">eval</span> : <span class="dt">Term</span> <span class="op">-&gt;</span> <span class="dt">Maybe</span> <span class="dt">Term</span></span>
<span id="cb4-3"><a href="#cb4-3"></a><span class="fu">eval</span> <span class="fu">t</span> <span class="op">=</span></span>
<span id="cb4-4"><a href="#cb4-4"></a>    <span class="cf">if</span> <span class="fu">isval</span> <span class="fu">t</span> <span class="cf">then</span></span>
<span id="cb4-5"><a href="#cb4-5"></a>        <span class="dt">Just</span> <span class="fu">t</span></span>
<span id="cb4-6"><a href="#cb4-6"></a>    <span class="cf">else</span></span>
<span id="cb4-7"><a href="#cb4-7"></a>        <span class="dt">Maybe</span><span class="op">.</span><span class="fu">andThen</span> <span class="fu">eval</span> (<span class="fu">eval1</span> <span class="fu">t</span>)</span>
<span id="cb4-8"><a href="#cb4-8"></a></span>
<span id="cb4-9"><a href="#cb4-9"></a><span class="co">-- 評価規則を関数にする</span></span>
<span id="cb4-10"><a href="#cb4-10"></a><span class="fu">eval1</span> : <span class="dt">Term</span> <span class="op">-&gt;</span> <span class="dt">Maybe</span> <span class="dt">Term</span></span>
<span id="cb4-11"><a href="#cb4-11"></a><span class="fu">eval1</span> <span class="fu">t</span> <span class="op">=</span></span>
<span id="cb4-12"><a href="#cb4-12"></a>    <span class="cf">case</span> <span class="fu">t</span> <span class="cf">of</span></span>
<span id="cb4-13"><a href="#cb4-13"></a>        <span class="dt">TmIf</span> <span class="dt">TmTrue</span> <span class="fu">t2</span> <span class="fu">_</span> <span class="op">-&gt;</span></span>
<span id="cb4-14"><a href="#cb4-14"></a>            <span class="dt">Just</span> <span class="fu">t2</span></span>
<span id="cb4-15"><a href="#cb4-15"></a></span>
<span id="cb4-16"><a href="#cb4-16"></a>        <span class="dt">TmIf</span> <span class="dt">TmFalse</span> <span class="fu">_</span> <span class="fu">t3</span> <span class="op">-&gt;</span></span>
<span id="cb4-17"><a href="#cb4-17"></a>            <span class="dt">Just</span> <span class="fu">t3</span></span>
<span id="cb4-18"><a href="#cb4-18"></a></span>
<span id="cb4-19"><a href="#cb4-19"></a>        <span class="dt">TmIf</span> <span class="fu">t1</span> <span class="fu">t2</span> <span class="fu">t3</span> <span class="op">-&gt;</span></span>
<span id="cb4-20"><a href="#cb4-20"></a>            <span class="fu">eval1</span> <span class="fu">t1</span> <span class="op">|&gt;</span> <span class="dt">Maybe</span><span class="op">.</span><span class="fu">map</span> (\<span class="fu">t1_</span> <span class="op">-&gt;</span> <span class="dt">TmIf</span> <span class="fu">t1_</span> <span class="fu">t2</span> <span class="fu">t3</span>)</span>
<span id="cb4-21"><a href="#cb4-21"></a></span>
<span id="cb4-22"><a href="#cb4-22"></a>        <span class="dt">TmSucc</span> <span class="fu">t1</span> <span class="op">-&gt;</span></span>
<span id="cb4-23"><a href="#cb4-23"></a>            <span class="fu">eval1</span> <span class="fu">t1</span> <span class="op">|&gt;</span> <span class="dt">Maybe</span><span class="op">.</span><span class="fu">map</span> <span class="dt">TmSucc</span></span>
<span id="cb4-24"><a href="#cb4-24"></a></span>
<span id="cb4-25"><a href="#cb4-25"></a>        <span class="dt">TmPred</span> <span class="dt">TmZero</span> <span class="op">-&gt;</span></span>
<span id="cb4-26"><a href="#cb4-26"></a>            <span class="dt">Just</span> <span class="dt">TmZero</span></span>
<span id="cb4-27"><a href="#cb4-27"></a></span>
<span id="cb4-28"><a href="#cb4-28"></a>        <span class="dt">TmPred</span> (<span class="dt">TmSucc</span> <span class="fu">nv1</span>) <span class="op">-&gt;</span></span>
<span id="cb4-29"><a href="#cb4-29"></a>            <span class="cf">if</span> <span class="fu">isnumericval</span> <span class="fu">nv1</span> <span class="cf">then</span></span>
<span id="cb4-30"><a href="#cb4-30"></a>                <span class="dt">Just</span> <span class="fu">nv1</span></span>
<span id="cb4-31"><a href="#cb4-31"></a>            <span class="cf">else</span></span>
<span id="cb4-32"><a href="#cb4-32"></a>                <span class="fu">eval1</span> (<span class="dt">TmSucc</span> <span class="fu">nv1</span>) <span class="op">|&gt;</span> <span class="dt">Maybe</span><span class="op">.</span><span class="fu">map</span> <span class="dt">TmPred</span></span>
<span id="cb4-33"><a href="#cb4-33"></a></span>
<span id="cb4-34"><a href="#cb4-34"></a>        <span class="dt">TmPred</span> <span class="fu">t1</span> <span class="op">-&gt;</span></span>
<span id="cb4-35"><a href="#cb4-35"></a>            <span class="fu">eval1</span> <span class="fu">t1</span> <span class="op">|&gt;</span> <span class="dt">Maybe</span><span class="op">.</span><span class="fu">map</span> <span class="dt">TmPred</span></span>
<span id="cb4-36"><a href="#cb4-36"></a></span>
<span id="cb4-37"><a href="#cb4-37"></a>        <span class="dt">TmIsZero</span> <span class="dt">TmZero</span> <span class="op">-&gt;</span></span>
<span id="cb4-38"><a href="#cb4-38"></a>            <span class="dt">Just</span> <span class="dt">TmTrue</span></span>
<span id="cb4-39"><a href="#cb4-39"></a></span>
<span id="cb4-40"><a href="#cb4-40"></a>        <span class="dt">TmIsZero</span> (<span class="dt">TmSucc</span> <span class="fu">nv1</span>) <span class="op">-&gt;</span></span>
<span id="cb4-41"><a href="#cb4-41"></a>            <span class="cf">if</span> <span class="fu">isnumericval</span> <span class="fu">nv1</span> <span class="cf">then</span></span>
<span id="cb4-42"><a href="#cb4-42"></a>                <span class="dt">Just</span> <span class="dt">TmFalse</span></span>
<span id="cb4-43"><a href="#cb4-43"></a>            <span class="cf">else</span></span>
<span id="cb4-44"><a href="#cb4-44"></a>                <span class="fu">eval1</span> (<span class="dt">TmSucc</span> <span class="fu">nv1</span>) <span class="op">|&gt;</span> <span class="dt">Maybe</span><span class="op">.</span><span class="fu">map</span> <span class="dt">TmIsZero</span></span>
<span id="cb4-45"><a href="#cb4-45"></a></span>
<span id="cb4-46"><a href="#cb4-46"></a>        <span class="dt">TmIsZero</span> <span class="fu">t1</span> <span class="op">-&gt;</span></span>
<span id="cb4-47"><a href="#cb4-47"></a>            <span class="fu">eval1</span> <span class="fu">t1</span> <span class="op">|&gt;</span> <span class="dt">Maybe</span><span class="op">.</span><span class="fu">map</span> <span class="dt">TmIsZero</span></span>
<span id="cb4-48"><a href="#cb4-48"></a></span>
<span id="cb4-49"><a href="#cb4-49"></a>        <span class="fu">_</span> <span class="op">-&gt;</span></span>
<span id="cb4-50"><a href="#cb4-50"></a>            <span class="dt">Nothing</span></span></code></pre></div>
<p>TaPL と違い，僕は返り値にいわゆる Optional 型を利用している(TaPL では例外を投げてる)． あと，TaPL で利用している ML やパターンマッチのある多くの言語ではパターンマッチの中に条件式を記述できるが Elm にはない:</p>
<div class="sourceCode" id="cb5"><pre class="sourceCode elm"><code class="sourceCode elm"><span id="cb5-1"><a href="#cb5-1"></a><span class="co">-- こういうのが書きたい</span></span>
<span id="cb5-2"><a href="#cb5-2"></a><span class="fu">eval1</span> <span class="fu">t</span> <span class="op">=</span></span>
<span id="cb5-3"><a href="#cb5-3"></a>    <span class="cf">case</span> <span class="fu">t</span> <span class="cf">of</span></span>
<span id="cb5-4"><a href="#cb5-4"></a>        <span class="op">...</span></span>
<span id="cb5-5"><a href="#cb5-5"></a></span>
<span id="cb5-6"><a href="#cb5-6"></a>        <span class="dt">TmPred</span> (<span class="dt">TmSucc</span> <span class="fu">nv1</span>) <span class="cf">if</span> <span class="fu">isnumericval</span> <span class="fu">nv1</span> <span class="op">-&gt;</span></span>
<span id="cb5-7"><a href="#cb5-7"></a>            <span class="dt">Just</span> <span class="fu">nv1</span></span>
<span id="cb5-8"><a href="#cb5-8"></a></span>
<span id="cb5-9"><a href="#cb5-9"></a>        <span class="dt">TmPred</span> <span class="fu">t1</span> <span class="op">-&gt;</span></span>
<span id="cb5-10"><a href="#cb5-10"></a>            <span class="fu">eval1</span> <span class="fu">t1</span> <span class="op">|&gt;</span> <span class="dt">Maybe</span><span class="op">.</span><span class="fu">map</span> <span class="dt">TmPred</span></span>
<span id="cb5-11"><a href="#cb5-11"></a></span>
<span id="cb5-12"><a href="#cb5-12"></a>        <span class="op">...</span></span></code></pre></div>
<p>これが出来ないため分岐が多くなって冗長になってしまう．辛い． そのうち実装されると良いなぁ．</p>
<h1 id="section-1"></h1>
<p>実はこれで完成． Elm には REPL があるので試しに動かしてみる:</p>
<div class="sourceCode" id="cb6"><pre class="sourceCode elm"><code class="sourceCode elm"><span id="cb6-1"><a href="#cb6-1"></a><span class="op">$</span> <span class="fu">elm</span> <span class="fu">repl</span></span>
<span id="cb6-2"><a href="#cb6-2"></a><span class="co">---- Elm 0.19.1 ----------------------------------------------------------------</span></span>
<span id="cb6-3"><a href="#cb6-3"></a><span class="dt">Say</span> :<span class="fu">help</span> <span class="fu">for</span> <span class="fu">help</span> <span class="fu">and</span> :<span class="fu">exit</span> <span class="fu">to</span> <span class="fu">exit</span><span class="op">!</span> <span class="dt">More</span> <span class="fu">at</span> <span class="op">&lt;</span><span class="fu">https</span>:<span class="op">//</span><span class="fu">elm</span><span class="op">-</span><span class="fu">lang</span><span class="op">.</span><span class="fu">org</span><span class="op">/</span><span class="dv">0</span><span class="op">.</span><span class="dv">19</span><span class="op">.</span><span class="dv">1</span><span class="op">/</span><span class="fu">repl</span><span class="op">&gt;</span></span>
<span id="cb6-4"><a href="#cb6-4"></a><span class="co">--------------------------------------------------------------------------------</span></span>
<span id="cb6-5"><a href="#cb6-5"></a><span class="op">&gt;</span> <span class="kw">import</span> <span class="dt">TaPL</span><span class="op">.</span><span class="dt">Chap4</span> <span class="kw">as</span> <span class="dt">Chap4</span> <span class="kw">exposing</span> (<span class="dt">Term</span> (<span class="op">..</span>))</span>
<span id="cb6-6"><a href="#cb6-6"></a><span class="op">&gt;</span> <span class="dt">Chap4</span><span class="op">.</span><span class="fu">eval</span> (<span class="dt">TmIf</span> (<span class="dt">TmIsZero</span> (<span class="dt">TmPred</span> (<span class="dt">TmSucc</span> <span class="dt">TmZero</span>))) <span class="dt">TmZero</span> (<span class="dt">TmSucc</span> <span class="dt">TmZero</span>))</span>
<span id="cb6-7"><a href="#cb6-7"></a><span class="dt">Just</span> <span class="dt">TmZero</span> : <span class="dt">Maybe</span> <span class="dt">Term</span></span></code></pre></div>
<p>良さそう．</p>
<h3 id="パーサーを実装する">パーサーを実装する</h3>
<p>ここからは TaPL にはない話． 毎回 <code>Term</code> を手書きするのは大変なのでパーサーを実装しちゃおう．</p>
<p>Elm には <a href="https://package.elm-lang.org/packages/elm/parser">elm/parser</a> という(なぜか)公式が提供しているパーサーコンビネーターライブラリがある． もちろんこれを使う． パーサーコンビネーターの極意はトップダウンに考えること(ほんまか？)． まずは頭のインターフェースから:</p>
<div class="sourceCode" id="cb7"><pre class="sourceCode elm"><code class="sourceCode elm"><span id="cb7-1"><a href="#cb7-1"></a><span class="kw">module</span> <span class="dt">TaPL</span><span class="op">.</span><span class="dt">Chap4</span><span class="op">.</span><span class="dt">Parser</span> <span class="kw">exposing</span> (<span class="op">..</span>)</span>
<span id="cb7-2"><a href="#cb7-2"></a></span>
<span id="cb7-3"><a href="#cb7-3"></a><span class="kw">import</span> <span class="dt">Parser</span> <span class="kw">exposing</span> ((<span class="op">|.</span>)<span class="op">,</span> (<span class="op">|=</span>)<span class="op">,</span> <span class="dt">Parser</span>)</span>
<span id="cb7-4"><a href="#cb7-4"></a><span class="kw">import</span> <span class="dt">TaPL</span><span class="op">.</span><span class="dt">Chap4</span> <span class="kw">as</span> <span class="dt">Chap4</span> <span class="kw">exposing</span> (<span class="dt">Term</span>(<span class="op">..</span>))</span>
<span id="cb7-5"><a href="#cb7-5"></a></span>
<span id="cb7-6"><a href="#cb7-6"></a><span class="fu">parse</span> : <span class="dt">String</span> <span class="op">-&gt;</span> <span class="dt">Result</span> (<span class="dt">List</span> <span class="dt">Parser</span><span class="op">.</span><span class="dt">DeadEnd</span>) <span class="dt">Term</span></span>
<span id="cb7-7"><a href="#cb7-7"></a><span class="fu">parse</span> <span class="op">=</span></span>
<span id="cb7-8"><a href="#cb7-8"></a>    <span class="fu">termParser</span> <span class="op">|.</span> <span class="dt">Parser</span><span class="op">.</span><span class="fu">end</span></span>
<span id="cb7-9"><a href="#cb7-9"></a></span>
<span id="cb7-10"><a href="#cb7-10"></a></span>
<span id="cb7-11"><a href="#cb7-11"></a><span class="fu">termParser</span> : <span class="dt">Parser</span> <span class="dt">Term</span></span>
<span id="cb7-12"><a href="#cb7-12"></a><span class="fu">termParser</span> <span class="op">=</span> <span class="op">...</span></span></code></pre></div>
<p><code>Parser Term</code> という型は「パースした結果が <code>Term</code> 型になる」と言う意味(型なんてこう言うふわっとした理解で十分)． <code>parser</code> の <code>|. Parser.end</code> というのは，パースしきった文字列が空文字に達したという関数(達してないとエラーになる)．</p>
<p>で，<code>termParser</code> が項自体のパーサー． elm/parser には <code>oneOf</code> という便利パーサーコンビネーターがあるのでこれを使う:</p>
<div class="sourceCode" id="cb8"><pre class="sourceCode elm"><code class="sourceCode elm"><span id="cb8-1"><a href="#cb8-1"></a><span class="co">-- 与えたパーサーのリストで最初に成功したものをパース結果にする</span></span>
<span id="cb8-2"><a href="#cb8-2"></a><span class="fu">oneOf</span> : <span class="dt">List</span> (<span class="dt">Parser</span> <span class="fu">a</span>) <span class="op">-&gt;</span> <span class="dt">Parser</span> <span class="fu">a</span></span></code></pre></div>
<p>ここで重要なのは一つ一つ実装することができる点だ． まずは簡単な値から:</p>
<div class="sourceCode" id="cb9"><pre class="sourceCode elm"><code class="sourceCode elm"><span id="cb9-1"><a href="#cb9-1"></a><span class="fu">termParser</span> : <span class="dt">Parser</span> <span class="dt">Term</span></span>
<span id="cb9-2"><a href="#cb9-2"></a><span class="fu">termParser</span> <span class="op">=</span></span>
<span id="cb9-3"><a href="#cb9-3"></a>    <span class="dt">Parser</span><span class="op">.</span><span class="fu">oneOf</span></span>
<span id="cb9-4"><a href="#cb9-4"></a>      [ <span class="fu">valParser</span></span>
<span id="cb9-5"><a href="#cb9-5"></a>      ]</span>
<span id="cb9-6"><a href="#cb9-6"></a></span>
<span id="cb9-7"><a href="#cb9-7"></a><span class="fu">valParser</span> : <span class="dt">Parser</span> <span class="dt">Term</span></span>
<span id="cb9-8"><a href="#cb9-8"></a><span class="fu">valParser</span> <span class="op">=</span></span>
<span id="cb9-9"><a href="#cb9-9"></a>    <span class="dt">Parser</span><span class="op">.</span><span class="fu">oneOf</span></span>
<span id="cb9-10"><a href="#cb9-10"></a>        [ <span class="fu">value</span> <span class="st">&quot;true&quot;</span> <span class="dt">TmTrue</span></span>
<span id="cb9-11"><a href="#cb9-11"></a>        <span class="op">,</span> <span class="fu">value</span> <span class="st">&quot;false&quot;</span> <span class="dt">TmFalse</span></span>
<span id="cb9-12"><a href="#cb9-12"></a>        <span class="op">,</span> <span class="dt">Parser</span><span class="op">.</span><span class="fu">int</span> <span class="op">|&gt;</span> <span class="dt">Parser</span><span class="op">.</span><span class="fu">map</span> <span class="fu">fromInt</span></span>
<span id="cb9-13"><a href="#cb9-13"></a>        ]</span>
<span id="cb9-14"><a href="#cb9-14"></a></span>
<span id="cb9-15"><a href="#cb9-15"></a><span class="fu">value</span> : <span class="dt">String</span> <span class="op">-&gt;</span> <span class="dt">Term</span> <span class="op">-&gt;</span> <span class="dt">Parser</span> <span class="dt">Term</span></span>
<span id="cb9-16"><a href="#cb9-16"></a><span class="fu">value</span> <span class="fu">kw</span> <span class="fu">t</span> <span class="op">=</span></span>
<span id="cb9-17"><a href="#cb9-17"></a>    <span class="dt">Parser</span><span class="op">.</span><span class="fu">map</span> (<span class="fu">always</span> <span class="fu">t</span>) (<span class="dt">Parser</span><span class="op">.</span><span class="fu">keyword</span> <span class="fu">kw</span>)</span>
<span id="cb9-18"><a href="#cb9-18"></a></span>
<span id="cb9-19"><a href="#cb9-19"></a><span class="fu">fromInt</span> : <span class="dt">Int</span> <span class="op">-&gt;</span> <span class="dt">Term</span></span>
<span id="cb9-20"><a href="#cb9-20"></a><span class="fu">fromInt</span> <span class="fu">n</span> <span class="op">=</span></span>
<span id="cb9-21"><a href="#cb9-21"></a>    <span class="cf">if</span> <span class="fu">n</span> <span class="op">&gt;</span> <span class="dv">0</span> <span class="cf">then</span></span>
<span id="cb9-22"><a href="#cb9-22"></a>        <span class="dt">TmSucc</span> (<span class="fu">fromInt</span> (<span class="fu">n</span> <span class="op">-</span> <span class="dv">1</span>))</span>
<span id="cb9-23"><a href="#cb9-23"></a>    <span class="cf">else</span></span>
<span id="cb9-24"><a href="#cb9-24"></a>        <span class="dt">TmZero</span></span></code></pre></div>
<p>REPL で確認:</p>
<div class="sourceCode" id="cb10"><pre class="sourceCode elm"><code class="sourceCode elm"><span id="cb10-1"><a href="#cb10-1"></a><span class="op">&gt;</span> <span class="kw">import</span> <span class="dt">TaPL</span><span class="op">.</span><span class="dt">Chap4</span><span class="op">.</span><span class="dt">Parser</span> <span class="kw">as</span> <span class="dt">Parser</span></span>
<span id="cb10-2"><a href="#cb10-2"></a><span class="op">&gt;</span> <span class="dt">Parser</span><span class="op">.</span><span class="fu">parse</span> <span class="st">&quot;true&quot;</span></span>
<span id="cb10-3"><a href="#cb10-3"></a><span class="dt">Ok</span> <span class="dt">TmTrue</span> : <span class="dt">Result</span> (<span class="dt">List</span> <span class="dt">Parser</span><span class="op">.</span><span class="dt">DeadEnd</span>) <span class="dt">Term</span></span>
<span id="cb10-4"><a href="#cb10-4"></a><span class="op">&gt;</span> <span class="dt">Parser</span><span class="op">.</span><span class="fu">parse</span> <span class="st">&quot;false&quot;</span></span>
<span id="cb10-5"><a href="#cb10-5"></a><span class="dt">Ok</span> <span class="dt">TmFalse</span> : <span class="dt">Result</span> (<span class="dt">List</span> <span class="dt">Parser</span><span class="op">.</span><span class="dt">DeadEnd</span>) <span class="dt">Term</span></span>
<span id="cb10-6"><a href="#cb10-6"></a><span class="op">&gt;</span> <span class="dt">Parser</span><span class="op">.</span><span class="fu">parse</span> <span class="st">&quot;10&quot;</span></span>
<span id="cb10-7"><a href="#cb10-7"></a><span class="dt">Ok</span> (<span class="dt">TmSucc</span> (<span class="dt">TmSucc</span> (<span class="dt">TmSucc</span> (<span class="dt">TmSucc</span> (<span class="dt">TmSucc</span> (<span class="dt">TmSucc</span> (<span class="dt">TmSucc</span> (<span class="dt">TmSucc</span> (<span class="dt">TmSucc</span> (<span class="dt">TmSucc</span> <span class="dt">TmZero</span>))))))))))</span>
<span id="cb10-8"><a href="#cb10-8"></a>    : <span class="dt">Result</span> (<span class="dt">List</span> <span class="dt">Parser</span><span class="op">.</span><span class="dt">DeadEnd</span>) <span class="dt">Term</span></span></code></pre></div>
<p>良さそう． 次は if-then-else を書いてみる:</p>
<div class="sourceCode" id="cb11"><pre class="sourceCode elm"><code class="sourceCode elm"><span id="cb11-1"><a href="#cb11-1"></a><span class="fu">termParser</span> : <span class="dt">Parser</span> <span class="dt">Term</span></span>
<span id="cb11-2"><a href="#cb11-2"></a><span class="fu">termParser</span> <span class="op">=</span></span>
<span id="cb11-3"><a href="#cb11-3"></a>    <span class="dt">Parser</span><span class="op">.</span><span class="fu">oneOf</span></span>
<span id="cb11-4"><a href="#cb11-4"></a>      [ <span class="fu">valParser</span></span>
<span id="cb11-5"><a href="#cb11-5"></a>      <span class="op">,</span> <span class="fu">ifParser</span></span>
<span id="cb11-6"><a href="#cb11-6"></a>      ]</span>
<span id="cb11-7"><a href="#cb11-7"></a></span>
<span id="cb11-8"><a href="#cb11-8"></a><span class="fu">ifParser</span> : <span class="dt">Parser</span> <span class="dt">Term</span></span>
<span id="cb11-9"><a href="#cb11-9"></a><span class="fu">ifParser</span> <span class="op">=</span></span>
<span id="cb11-10"><a href="#cb11-10"></a>    <span class="dt">Parser</span><span class="op">.</span><span class="fu">succeed</span> <span class="dt">TmIf</span></span>
<span id="cb11-11"><a href="#cb11-11"></a>        <span class="op">|.</span> <span class="dt">Parser</span><span class="op">.</span><span class="fu">keyword</span> <span class="st">&quot;if&quot;</span></span>
<span id="cb11-12"><a href="#cb11-12"></a>        <span class="op">|.</span> <span class="dt">Parser</span><span class="op">.</span><span class="fu">spaces</span></span>
<span id="cb11-13"><a href="#cb11-13"></a>        <span class="op">|=</span> <span class="dt">Parser</span><span class="op">.</span><span class="fu">lazy</span> (\<span class="fu">_</span> <span class="op">-&gt;</span> <span class="fu">termParser</span>)</span>
<span id="cb11-14"><a href="#cb11-14"></a>        <span class="op">|.</span> <span class="dt">Parser</span><span class="op">.</span><span class="fu">spaces</span></span>
<span id="cb11-15"><a href="#cb11-15"></a>        <span class="op">|.</span> <span class="dt">Parser</span><span class="op">.</span><span class="fu">keyword</span> <span class="st">&quot;then&quot;</span></span>
<span id="cb11-16"><a href="#cb11-16"></a>        <span class="op">|.</span> <span class="dt">Parser</span><span class="op">.</span><span class="fu">spaces</span></span>
<span id="cb11-17"><a href="#cb11-17"></a>        <span class="op">|=</span> <span class="dt">Parser</span><span class="op">.</span><span class="fu">lazy</span> (\<span class="fu">_</span> <span class="op">-&gt;</span> <span class="fu">termParser</span>)</span>
<span id="cb11-18"><a href="#cb11-18"></a>        <span class="op">|.</span> <span class="dt">Parser</span><span class="op">.</span><span class="fu">spaces</span></span>
<span id="cb11-19"><a href="#cb11-19"></a>        <span class="op">|.</span> <span class="dt">Parser</span><span class="op">.</span><span class="fu">keyword</span> <span class="st">&quot;else&quot;</span></span>
<span id="cb11-20"><a href="#cb11-20"></a>        <span class="op">|.</span> <span class="dt">Parser</span><span class="op">.</span><span class="fu">spaces</span></span>
<span id="cb11-21"><a href="#cb11-21"></a>        <span class="op">|=</span> <span class="dt">Parser</span><span class="op">.</span><span class="fu">lazy</span> (\<span class="fu">_</span> <span class="op">-&gt;</span> <span class="fu">termParser</span>)</span></code></pre></div>
<p>Elm は普通に正格評価なので <code>Parser.lazy</code> などで遅延させてあげないと先に <code>termParser</code> を実行してしまう． REPL で確認:</p>
<div class="sourceCode" id="cb12"><pre class="sourceCode elm"><code class="sourceCode elm"><span id="cb12-1"><a href="#cb12-1"></a><span class="op">&gt;</span> <span class="dt">Parser</span><span class="op">.</span><span class="fu">parse</span> <span class="st">&quot;if true then 1 else 0&quot;</span></span>
<span id="cb12-2"><a href="#cb12-2"></a><span class="dt">Ok</span> (<span class="dt">TmIf</span> <span class="dt">TmTrue</span> (<span class="dt">TmSucc</span> <span class="dt">TmZero</span>) <span class="dt">TmZero</span>)</span>
<span id="cb12-3"><a href="#cb12-3"></a>    : <span class="dt">Result</span> (<span class="dt">List</span> <span class="dt">Parser</span><span class="op">.</span><span class="dt">DeadEnd</span>) <span class="dt">Term</span></span>
<span id="cb12-4"><a href="#cb12-4"></a><span class="co">-- どう見ても評価できないけどパースはできる</span></span>
<span id="cb12-5"><a href="#cb12-5"></a><span class="op">&gt;</span> <span class="dt">Parser</span><span class="op">.</span><span class="fu">parse</span> <span class="st">&quot;if 1 then true else false&quot;</span></span>
<span id="cb12-6"><a href="#cb12-6"></a><span class="dt">Ok</span> (<span class="dt">TmIf</span> (<span class="dt">TmSucc</span> <span class="dt">TmZero</span>) <span class="dt">TmTrue</span> <span class="dt">TmFalse</span>)</span>
<span id="cb12-7"><a href="#cb12-7"></a>    : <span class="dt">Result</span> (<span class="dt">List</span> <span class="dt">Parser</span><span class="op">.</span><span class="dt">DeadEnd</span>) <span class="dt">Term</span></span>
<span id="cb12-8"><a href="#cb12-8"></a><span class="co">-- 入れ子もOK</span></span>
<span id="cb12-9"><a href="#cb12-9"></a><span class="op">&gt;</span> <span class="dt">Parser</span><span class="op">.</span><span class="fu">parse</span> <span class="st">&quot;if if true then 0 else 1 then true else if false then 2 else 3&quot;</span></span>
<span id="cb12-10"><a href="#cb12-10"></a><span class="dt">Ok</span> (<span class="dt">TmIf</span> (<span class="dt">TmIf</span> <span class="dt">TmTrue</span> <span class="dt">TmZero</span> (<span class="dt">TmSucc</span> <span class="dt">TmZero</span>)) <span class="dt">TmTrue</span> (<span class="dt">TmIf</span> <span class="dt">TmFalse</span> (<span class="dt">TmSucc</span> (<span class="dt">TmSucc</span> <span class="dt">TmZero</span>)) (<span class="dt">TmSucc</span> (<span class="dt">TmSucc</span> (<span class="dt">TmSucc</span> <span class="dt">TmZero</span>)))))</span>
<span id="cb12-11"><a href="#cb12-11"></a>    : <span class="dt">Result</span> (<span class="dt">List</span> <span class="dt">Parser</span><span class="op">.</span><span class="dt">DeadEnd</span>) <span class="dt">Term</span></span></code></pre></div>
<p>はい． あとは同じようーに書くだけなので割愛:</p>
<div class="sourceCode" id="cb13"><pre class="sourceCode elm"><code class="sourceCode elm"><span id="cb13-1"><a href="#cb13-1"></a><span class="fu">termParser</span> : <span class="dt">Parser</span> <span class="dt">Term</span></span>
<span id="cb13-2"><a href="#cb13-2"></a><span class="fu">termParser</span> <span class="op">=</span></span>
<span id="cb13-3"><a href="#cb13-3"></a>    <span class="dt">Parser</span><span class="op">.</span><span class="fu">oneOf</span></span>
<span id="cb13-4"><a href="#cb13-4"></a>        [ <span class="fu">valParser</span></span>
<span id="cb13-5"><a href="#cb13-5"></a>        <span class="op">,</span> <span class="fu">ifParser</span></span>
<span id="cb13-6"><a href="#cb13-6"></a>        <span class="op">,</span> <span class="fu">succParser</span></span>
<span id="cb13-7"><a href="#cb13-7"></a>        <span class="op">,</span> <span class="fu">predParser</span></span>
<span id="cb13-8"><a href="#cb13-8"></a>        <span class="op">,</span> <span class="fu">isZeroParser</span></span>
<span id="cb13-9"><a href="#cb13-9"></a>        <span class="op">,</span> <span class="fu">parParser</span>    <span class="co">-- カッコ</span></span>
<span id="cb13-10"><a href="#cb13-10"></a>        ]</span></code></pre></div>
<p>ついでに <code>Term</code> から文字列に変換する関数も書いておこう:</p>
<div class="sourceCode" id="cb14"><pre class="sourceCode elm"><code class="sourceCode elm"><span id="cb14-1"><a href="#cb14-1"></a><span class="fu">display</span> : <span class="dt">Term</span> <span class="op">-&gt;</span> <span class="dt">String</span></span>
<span id="cb14-2"><a href="#cb14-2"></a><span class="fu">display</span> <span class="fu">t</span> <span class="op">=</span></span>
<span id="cb14-3"><a href="#cb14-3"></a>    <span class="fu">displayR</span> <span class="fu">t</span></span>
<span id="cb14-4"><a href="#cb14-4"></a>        <span class="op">|&gt;</span> <span class="fu">dropIfStartsWith</span> <span class="st">&quot;(&quot;</span> <span class="co">-- かっこ悪いので最後のカッコを消す</span></span>
<span id="cb14-5"><a href="#cb14-5"></a>        <span class="op">|&gt;</span> <span class="fu">dropIfEndsWith</span> <span class="st">&quot;)&quot;</span>   <span class="co">-- カッコだけに</span></span>
<span id="cb14-6"><a href="#cb14-6"></a></span>
<span id="cb14-7"><a href="#cb14-7"></a></span>
<span id="cb14-8"><a href="#cb14-8"></a><span class="fu">displayR</span> : <span class="dt">Term</span> <span class="op">-&gt;</span> <span class="dt">String</span></span>
<span id="cb14-9"><a href="#cb14-9"></a><span class="fu">displayR</span> <span class="fu">t</span> <span class="op">=</span></span>
<span id="cb14-10"><a href="#cb14-10"></a>    <span class="co">-- 分岐するのが面倒なので toInt も同時に</span></span>
<span id="cb14-11"><a href="#cb14-11"></a>    <span class="cf">case</span> ( <span class="fu">toInt</span> <span class="fu">t</span><span class="op">,</span> <span class="fu">t</span> ) <span class="cf">of</span></span>
<span id="cb14-12"><a href="#cb14-12"></a>        ( <span class="dt">Just</span> <span class="fu">n</span><span class="op">,</span> <span class="fu">_</span> ) <span class="op">-&gt;</span></span>
<span id="cb14-13"><a href="#cb14-13"></a>            <span class="dt">String</span><span class="op">.</span><span class="fu">fromInt</span> <span class="fu">n</span></span>
<span id="cb14-14"><a href="#cb14-14"></a></span>
<span id="cb14-15"><a href="#cb14-15"></a>        ( <span class="fu">_</span><span class="op">,</span> <span class="dt">TmTrue</span> ) <span class="op">-&gt;</span></span>
<span id="cb14-16"><a href="#cb14-16"></a>            <span class="st">&quot;true&quot;</span></span>
<span id="cb14-17"><a href="#cb14-17"></a></span>
<span id="cb14-18"><a href="#cb14-18"></a>        ( <span class="fu">_</span><span class="op">,</span> <span class="dt">TmFalse</span> ) <span class="op">-&gt;</span></span>
<span id="cb14-19"><a href="#cb14-19"></a>            <span class="st">&quot;false&quot;</span></span>
<span id="cb14-20"><a href="#cb14-20"></a></span>
<span id="cb14-21"><a href="#cb14-21"></a>        ( <span class="fu">_</span><span class="op">,</span> <span class="dt">TmIf</span> <span class="fu">t1</span> <span class="fu">t2</span> <span class="fu">t3</span> ) <span class="op">-&gt;</span></span>
<span id="cb14-22"><a href="#cb14-22"></a>            <span class="dt">String</span><span class="op">.</span><span class="fu">concat</span></span>
<span id="cb14-23"><a href="#cb14-23"></a>                [ <span class="st">&quot;(if &quot;</span></span>
<span id="cb14-24"><a href="#cb14-24"></a>                <span class="op">,</span> <span class="fu">displayR</span> <span class="fu">t1</span></span>
<span id="cb14-25"><a href="#cb14-25"></a>                <span class="op">,</span> <span class="st">&quot; then &quot;</span></span>
<span id="cb14-26"><a href="#cb14-26"></a>                <span class="op">,</span> <span class="fu">displayR</span> <span class="fu">t2</span></span>
<span id="cb14-27"><a href="#cb14-27"></a>                <span class="op">,</span> <span class="st">&quot; else &quot;</span></span>
<span id="cb14-28"><a href="#cb14-28"></a>                <span class="op">,</span> <span class="fu">displayR</span> <span class="fu">t3</span></span>
<span id="cb14-29"><a href="#cb14-29"></a>                <span class="op">,</span> <span class="st">&quot;)&quot;</span></span>
<span id="cb14-30"><a href="#cb14-30"></a>                ]</span>
<span id="cb14-31"><a href="#cb14-31"></a></span>
<span id="cb14-32"><a href="#cb14-32"></a>        <span class="co">-- あとは割愛</span></span>
<span id="cb14-33"><a href="#cb14-33"></a>        <span class="op">...</span></span>
<span id="cb14-34"><a href="#cb14-34"></a></span>
<span id="cb14-35"><a href="#cb14-35"></a><span class="fu">toInt</span> : <span class="dt">Term</span> <span class="op">-&gt;</span> <span class="dt">Maybe</span> <span class="dt">Int</span></span>
<span id="cb14-36"><a href="#cb14-36"></a><span class="fu">toInt</span> <span class="fu">t</span> <span class="op">=</span></span>
<span id="cb14-37"><a href="#cb14-37"></a>    <span class="cf">case</span> <span class="fu">t</span> <span class="cf">of</span></span>
<span id="cb14-38"><a href="#cb14-38"></a>        <span class="dt">TmZero</span> <span class="op">-&gt;</span></span>
<span id="cb14-39"><a href="#cb14-39"></a>            <span class="dt">Just</span> <span class="dv">0</span></span>
<span id="cb14-40"><a href="#cb14-40"></a></span>
<span id="cb14-41"><a href="#cb14-41"></a>        <span class="dt">TmSucc</span> <span class="fu">t1</span> <span class="op">-&gt;</span></span>
<span id="cb14-42"><a href="#cb14-42"></a>            <span class="dt">Maybe</span><span class="op">.</span><span class="fu">map</span> (\<span class="fu">n</span> <span class="op">-&gt;</span> <span class="dv">1</span> <span class="op">+</span> <span class="fu">n</span>) (<span class="fu">toInt</span> <span class="fu">t1</span>)</span>
<span id="cb14-43"><a href="#cb14-43"></a></span>
<span id="cb14-44"><a href="#cb14-44"></a>        <span class="fu">_</span> <span class="op">-&gt;</span></span>
<span id="cb14-45"><a href="#cb14-45"></a>            <span class="dt">Nothing</span></span></code></pre></div>
<p>REPL で確認:</p>
<div class="sourceCode" id="cb15"><pre class="sourceCode elm"><code class="sourceCode elm"><span id="cb15-1"><a href="#cb15-1"></a><span class="op">&gt;</span> <span class="fu">x</span> <span class="op">=</span></span>
<span id="cb15-2"><a href="#cb15-2"></a><span class="op">|</span>   <span class="dt">Parser</span><span class="op">.</span><span class="fu">parse</span> <span class="st">&quot;if if true then false else true then 0 else if false then 2 else 3&quot;</span></span>
<span id="cb15-3"><a href="#cb15-3"></a><span class="op">|</span>   <span class="op">|&gt;</span> <span class="dt">Result</span><span class="op">.</span><span class="fu">toMaybe</span></span>
<span id="cb15-4"><a href="#cb15-4"></a><span class="op">|</span>   <span class="op">|&gt;</span> <span class="dt">Maybe</span><span class="op">.</span><span class="fu">andThen</span> <span class="dt">Chap4</span><span class="op">.</span><span class="fu">eval</span></span>
<span id="cb15-5"><a href="#cb15-5"></a><span class="op">|</span>   <span class="op">|&gt;</span> <span class="dt">Maybe</span><span class="op">.</span><span class="fu">map</span> <span class="dt">Chap4</span><span class="op">.</span><span class="fu">display</span></span>
<span id="cb15-6"><a href="#cb15-6"></a><span class="op">|</span></span>
<span id="cb15-7"><a href="#cb15-7"></a><span class="dt">Just</span> <span class="st">&quot;3&quot;</span> : <span class="dt">Maybe</span> <span class="dt">String</span></span></code></pre></div>
<p>完璧！</p>
<h2 id="おまけ-spa-にする">おまけ: SPA にする</h2>
<p>せっかく Elm 使ってるので:</p>
<ul>
<li>文字列を入力してもらって</li>
<li>「パースボタン」を押したらパースして</li>
<li>さらに「評価ボタン」を押したら１ステップだけ評価する</li>
</ul>
<p>という簡単なものを作る． まぁこれぐらいならググれば出てくるサンプルコードを組み合わせるだけでできますね:</p>
<div class="sourceCode" id="cb16"><pre class="sourceCode elm"><code class="sourceCode elm"><span id="cb16-1"><a href="#cb16-1"></a><span class="fu">main</span> : <span class="dt">Program</span> () <span class="dt">Model</span> <span class="dt">Msg</span></span>
<span id="cb16-2"><a href="#cb16-2"></a><span class="fu">main</span> <span class="op">=</span></span>
<span id="cb16-3"><a href="#cb16-3"></a>    <span class="dt">Browser</span><span class="op">.</span><span class="fu">element</span></span>
<span id="cb16-4"><a href="#cb16-4"></a>        { <span class="fu">init</span> <span class="op">=</span> ( <span class="dt">Model</span> <span class="st">&quot;&quot;</span> [] <span class="st">&quot;&quot;</span><span class="op">,</span> <span class="dt">Cmd</span><span class="op">.</span><span class="fu">none</span> )</span>
<span id="cb16-5"><a href="#cb16-5"></a>        <span class="op">,</span> <span class="fu">view</span> <span class="op">=</span> <span class="fu">view</span></span>
<span id="cb16-6"><a href="#cb16-6"></a>        <span class="op">,</span> <span class="fu">update</span> <span class="op">=</span> <span class="fu">update</span></span>
<span id="cb16-7"><a href="#cb16-7"></a>        <span class="op">,</span> <span class="fu">subscriptions</span> <span class="op">=</span> \<span class="fu">_</span> <span class="op">-&gt;</span> <span class="dt">Sub</span><span class="op">.</span><span class="fu">none</span></span>
<span id="cb16-8"><a href="#cb16-8"></a>        }</span>
<span id="cb16-9"><a href="#cb16-9"></a></span>
<span id="cb16-10"><a href="#cb16-10"></a><span class="kw">type</span> <span class="kw">alias</span> <span class="dt">Model</span> <span class="op">=</span></span>
<span id="cb16-11"><a href="#cb16-11"></a>    { <span class="fu">input</span> : <span class="dt">String</span>           <span class="co">-- 入力文字列を保存</span></span>
<span id="cb16-12"><a href="#cb16-12"></a>    <span class="op">,</span> <span class="fu">exps</span> : <span class="dt">List</span> <span class="dt">Lambda</span><span class="op">.</span><span class="dt">Term</span>  <span class="co">-- 1ステップごとの評価結果を全部</span></span>
<span id="cb16-13"><a href="#cb16-13"></a>    <span class="op">,</span> <span class="fu">error</span> : <span class="dt">String</span></span>
<span id="cb16-14"><a href="#cb16-14"></a>    }</span>
<span id="cb16-15"><a href="#cb16-15"></a></span>
<span id="cb16-16"><a href="#cb16-16"></a><span class="kw">type</span> <span class="dt">Msg</span></span>
<span id="cb16-17"><a href="#cb16-17"></a>    <span class="co">-- 文字列の入力</span></span>
<span id="cb16-18"><a href="#cb16-18"></a>    <span class="op">=</span> <span class="dt">InputText</span> <span class="dt">String</span></span>
<span id="cb16-19"><a href="#cb16-19"></a>    <span class="co">-- パースボタン</span></span>
<span id="cb16-20"><a href="#cb16-20"></a>    <span class="op">|</span> <span class="dt">ParseInput</span> (<span class="dt">Result</span> (<span class="dt">List</span> <span class="dt">Parser</span><span class="op">.</span><span class="dt">DeadEnd</span>) <span class="dt">Term</span>)</span>
<span id="cb16-21"><a href="#cb16-21"></a>    <span class="co">-- 評価ボタン</span></span>
<span id="cb16-22"><a href="#cb16-22"></a>    <span class="op">|</span> <span class="dt">EvalTerm</span> (<span class="dt">Maybe</span> <span class="dt">Term</span>)</span>
<span id="cb16-23"><a href="#cb16-23"></a></span>
<span id="cb16-24"><a href="#cb16-24"></a><span class="fu">update</span> : <span class="dt">Msg</span> <span class="op">-&gt;</span> <span class="dt">Model</span> <span class="op">-&gt;</span> ( <span class="dt">Model</span><span class="op">,</span> <span class="dt">Cmd</span> <span class="dt">Msg</span> )</span>
<span id="cb16-25"><a href="#cb16-25"></a><span class="fu">update</span> <span class="fu">msg</span> <span class="fu">model</span> <span class="op">=</span></span>
<span id="cb16-26"><a href="#cb16-26"></a>    <span class="cf">case</span> <span class="fu">msg</span> <span class="cf">of</span></span>
<span id="cb16-27"><a href="#cb16-27"></a>        <span class="dt">InputText</span> <span class="fu">txt</span> <span class="op">-&gt;</span></span>
<span id="cb16-28"><a href="#cb16-28"></a>            ( { <span class="fu">model</span> <span class="op">|</span> <span class="fu">input</span> <span class="op">=</span> <span class="fu">txt</span> }<span class="op">,</span> <span class="dt">Cmd</span><span class="op">.</span><span class="fu">none</span> )</span>
<span id="cb16-29"><a href="#cb16-29"></a></span>
<span id="cb16-30"><a href="#cb16-30"></a>        <span class="dt">ParseInput</span> (<span class="dt">Ok</span> <span class="fu">t</span>) <span class="op">-&gt;</span></span>
<span id="cb16-31"><a href="#cb16-31"></a>            ( { <span class="fu">model</span> <span class="op">|</span> <span class="fu">exps</span> <span class="op">=</span> [ <span class="fu">t</span> ]<span class="op">,</span> <span class="fu">error</span> <span class="op">=</span> <span class="st">&quot;&quot;</span> }<span class="op">,</span> <span class="dt">Cmd</span><span class="op">.</span><span class="fu">none</span> )</span>
<span id="cb16-32"><a href="#cb16-32"></a></span>
<span id="cb16-33"><a href="#cb16-33"></a>        <span class="dt">ParseInput</span> (<span class="dt">Err</span> <span class="fu">_</span>) <span class="op">-&gt;</span></span>
<span id="cb16-34"><a href="#cb16-34"></a>            ( { <span class="fu">model</span> <span class="op">|</span> <span class="fu">exps</span> <span class="op">=</span> []<span class="op">,</span> <span class="fu">error</span> <span class="op">=</span> <span class="st">&quot;Can not parse&quot;</span> }<span class="op">,</span> <span class="dt">Cmd</span><span class="op">.</span><span class="fu">none</span> )</span>
<span id="cb16-35"><a href="#cb16-35"></a></span>
<span id="cb16-36"><a href="#cb16-36"></a>        <span class="dt">EvalTerm</span> (<span class="dt">Just</span> <span class="fu">t</span>) <span class="op">-&gt;</span></span>
<span id="cb16-37"><a href="#cb16-37"></a>            ( { <span class="fu">model</span> <span class="op">|</span> <span class="fu">exps</span> <span class="op">=</span> <span class="fu">t</span> <span class="op">::</span> <span class="fu">model</span><span class="op">.</span><span class="fu">exps</span> }<span class="op">,</span> <span class="dt">Cmd</span><span class="op">.</span><span class="fu">none</span> )</span>
<span id="cb16-38"><a href="#cb16-38"></a></span>
<span id="cb16-39"><a href="#cb16-39"></a>        <span class="dt">EvalTerm</span> <span class="fu">_</span> <span class="op">-&gt;</span></span>
<span id="cb16-40"><a href="#cb16-40"></a>            ( { <span class="fu">model</span> <span class="op">|</span> <span class="fu">error</span> <span class="op">=</span> <span class="st">&quot;Can not eval&quot;</span> }<span class="op">,</span> <span class="dt">Cmd</span><span class="op">.</span><span class="fu">none</span> )</span>
<span id="cb16-41"><a href="#cb16-41"></a></span>
<span id="cb16-42"><a href="#cb16-42"></a><span class="co">-- いくつかの見た目の実装は割愛してます(class とか)</span></span>
<span id="cb16-43"><a href="#cb16-43"></a><span class="fu">view</span> : <span class="dt">Model</span> <span class="op">-&gt;</span> <span class="dt">Html</span> <span class="dt">Msg</span></span>
<span id="cb16-44"><a href="#cb16-44"></a><span class="fu">view</span> <span class="fu">model</span> <span class="op">=</span></span>
<span id="cb16-45"><a href="#cb16-45"></a>    <span class="fu">div</span> []</span>
<span id="cb16-46"><a href="#cb16-46"></a>        [ <span class="fu">button</span></span>
<span id="cb16-47"><a href="#cb16-47"></a>            <span class="co">-- ここでボタンの前にパースしてるのはナンセンスな気もするけど...</span></span>
<span id="cb16-48"><a href="#cb16-48"></a>            [ <span class="fu">onClick</span> (<span class="dt">ParseInput</span> <span class="op">&lt;|</span> <span class="dt">Lambda</span><span class="op">.</span><span class="fu">parse</span> <span class="fu">model</span><span class="op">.</span><span class="fu">input</span>)<span class="op">,</span> <span class="fu">type_</span> <span class="st">&quot;button&quot;</span> ]</span>
<span id="cb16-49"><a href="#cb16-49"></a>            [ <span class="fu">text</span> <span class="st">&quot;Parse!&quot;</span> ]</span>
<span id="cb16-50"><a href="#cb16-50"></a>        <span class="op">,</span> <span class="fu">input</span></span>
<span id="cb16-51"><a href="#cb16-51"></a>            [ <span class="fu">onInput</span> <span class="dt">InputText</span><span class="op">,</span> <span class="fu">type_</span> <span class="st">&quot;text&quot;</span> ]</span>
<span id="cb16-52"><a href="#cb16-52"></a>            []</span>
<span id="cb16-53"><a href="#cb16-53"></a>        <span class="op">,</span> <span class="fu">div</span> [] (<span class="fu">viewExps</span> <span class="fu">model</span>)</span>
<span id="cb16-54"><a href="#cb16-54"></a>        <span class="op">,</span> <span class="cf">if</span> <span class="dt">String</span><span class="op">.</span><span class="fu">isEmpty</span> <span class="fu">model</span><span class="op">.</span><span class="fu">error</span> <span class="cf">then</span></span>
<span id="cb16-55"><a href="#cb16-55"></a>            <span class="fu">div</span> [] []</span>
<span id="cb16-56"><a href="#cb16-56"></a>          <span class="cf">else</span></span>
<span id="cb16-57"><a href="#cb16-57"></a>            <span class="fu">div</span> [ <span class="fu">class</span> <span class="st">&quot;flash flash-error&quot;</span> ] [ <span class="fu">text</span> <span class="fu">model</span><span class="op">.</span><span class="fu">error</span> ]</span>
<span id="cb16-58"><a href="#cb16-58"></a>        ]</span>
<span id="cb16-59"><a href="#cb16-59"></a></span>
<span id="cb16-60"><a href="#cb16-60"></a><span class="fu">viewExps</span> : <span class="dt">Model</span> <span class="op">-&gt;</span> <span class="dt">List</span> (<span class="dt">Html</span> <span class="dt">Msg</span>)</span>
<span id="cb16-61"><a href="#cb16-61"></a><span class="fu">viewExps</span> <span class="fu">model</span> <span class="op">=</span></span>
<span id="cb16-62"><a href="#cb16-62"></a>    <span class="cf">case</span> <span class="fu">model</span><span class="op">.</span><span class="fu">exps</span> <span class="cf">of</span></span>
<span id="cb16-63"><a href="#cb16-63"></a>        [] <span class="op">-&gt;</span></span>
<span id="cb16-64"><a href="#cb16-64"></a>            []</span>
<span id="cb16-65"><a href="#cb16-65"></a></span>
<span id="cb16-66"><a href="#cb16-66"></a>        <span class="fu">x</span> <span class="op">::</span> <span class="fu">xs</span> <span class="op">-&gt;</span></span>
<span id="cb16-67"><a href="#cb16-67"></a>            [ <span class="dt">List</span><span class="op">.</span><span class="fu">reverse</span> <span class="fu">model</span><span class="op">.</span><span class="fu">exps</span></span>
<span id="cb16-68"><a href="#cb16-68"></a>                <span class="op">|&gt;</span> <span class="dt">List</span><span class="op">.</span><span class="fu">map</span> <span class="fu">viewExp</span></span>
<span id="cb16-69"><a href="#cb16-69"></a>                <span class="op">|&gt;</span> <span class="dt">List</span><span class="op">.</span><span class="fu">intersperse</span> (<span class="fu">div</span> [ <span class="fu">class</span> <span class="st">&quot;my-1&quot;</span> ] [ <span class="fu">text</span> <span class="st">&quot;↓&quot;</span> ])</span>
<span id="cb16-70"><a href="#cb16-70"></a>                <span class="op">|&gt;</span> <span class="fu">div</span> []</span>
<span id="cb16-71"><a href="#cb16-71"></a>            <span class="op">,</span> <span class="fu">button</span></span>
<span id="cb16-72"><a href="#cb16-72"></a>                <span class="co">-- ここもボタンの前に評価してるのは(ry</span></span>
<span id="cb16-73"><a href="#cb16-73"></a>                [ <span class="fu">onClick</span> (<span class="dt">EvalTerm</span> <span class="op">&lt;|</span> <span class="dt">Lambda</span><span class="op">.</span><span class="fu">eval1</span> <span class="fu">x</span>)<span class="op">,</span> <span class="fu">type_</span> <span class="st">&quot;button&quot;</span>　]</span>
<span id="cb16-74"><a href="#cb16-74"></a>                [ <span class="fu">text</span> <span class="st">&quot;Eval!&quot;</span> ]</span>
<span id="cb16-75"><a href="#cb16-75"></a>            ]</span>
<span id="cb16-76"><a href="#cb16-76"></a></span>
<span id="cb16-77"><a href="#cb16-77"></a><span class="fu">viewExp</span> : <span class="dt">Lambda</span><span class="op">.</span><span class="dt">Term</span> <span class="op">-&gt;</span> <span class="dt">Html</span> <span class="dt">Msg</span></span>
<span id="cb16-78"><a href="#cb16-78"></a><span class="fu">viewExp</span> <span class="fu">t</span> <span class="op">=</span></span>
<span id="cb16-79"><a href="#cb16-79"></a>    <span class="fu">div</span> [ <span class="fu">class</span> <span class="st">&quot;my-1&quot;</span> ] [ <span class="fu">text</span> (<span class="dt">Lambda</span><span class="op">.</span><span class="fu">display</span> <span class="fu">t</span>) ]</span></code></pre></div>
<p>色々ととりあえずで作ったので雑だ（現在のは改良したあとなのでこのコードとは少し違う）．</p>
<h2 id="おしまい">おしまい</h2>
<p>ちなみに，会社で同期と TaPL (雑な)読書会をしており，このシリーズはその成果です． すでに半年ぐらいやってるが未だに10章です笑</p>
  </div>]]></summary>
</entry>
<entry>
    <title>Haskell で GitHub Actions する</title>
    <link href="https://matsubara0507.github.io/posts/2019-12-02-haskell-with-gh-actions.html" />
    <id>https://matsubara0507.github.io/posts/2019-12-02-haskell-with-gh-actions.html</id>
    <published>2019-12-02T00:00:00Z</published>
    <updated>2019-12-02T00:00:00Z</updated>
    <summary type="html"><![CDATA[<div class="post-content" itemprop="articleBody">
    <p>本記事は「<a href="https://qiita.com/advent-calendar/2019/haskell">Haskell Advent Calendar 2019</a>」の2日目の記事です．</p>
<h1 id="section"></h1>
<p>2019/11/13 に GA された GitHub Actions を使って，Haskell プロジェクト，とりわけ Haskell Stack を使ったプロジェクトを CI/CD します．</p>
<p>ちなみに，試すために導入した PR はこれです:</p>
<ul>
<li><a href="https://github.com/matsubara0507/octbook/pull/1">自動ビルドを追加 by matsubara0507 · Pull Request #1 · matsubara0507/octbook</a></li>
</ul>
<p>これは適当な設定ファイルから GitHub の Organization や Organization の Team 機能にユーザーを招待したりキックしたりするための CLI ツールです．</p>
<h2 id="cabal-の場合">Cabal の場合</h2>
<p>はわりかし簡単． Haskell のセットアップは公式がすでに用意してくれてるのでこれを使えば良い:</p>
<ul>
<li><a href="https://github.com/actions/setup-haskell">actions/setup-haskell: Set up your GitHub Actions workflow with a specific version of Haskell (GHC and Cabal)</a></li>
</ul>
<p>こんな感じ:</p>
<div class="sourceCode" id="cb1"><pre class="sourceCode yaml"><code class="sourceCode yaml"><span id="cb1-1"><a href="#cb1-1"></a><span class="fu">jobs</span><span class="kw">:</span></span>
<span id="cb1-2"><a href="#cb1-2"></a><span class="at">  </span><span class="fu">build</span><span class="kw">:</span></span>
<span id="cb1-3"><a href="#cb1-3"></a><span class="at">    </span><span class="fu">name</span><span class="kw">:</span><span class="at"> ghc ${{ matrix.ghc }}</span></span>
<span id="cb1-4"><a href="#cb1-4"></a><span class="at">    </span><span class="fu">runs-on</span><span class="kw">:</span><span class="at"> ubuntu-16.04</span></span>
<span id="cb1-5"><a href="#cb1-5"></a><span class="at">    </span><span class="fu">strategy</span><span class="kw">:</span></span>
<span id="cb1-6"><a href="#cb1-6"></a><span class="at">      </span><span class="fu">matrix</span><span class="kw">:</span></span>
<span id="cb1-7"><a href="#cb1-7"></a><span class="at">        </span><span class="fu">ghc</span><span class="kw">:</span><span class="at"> </span><span class="kw">[</span><span class="st">&quot;8.2.2&quot;</span><span class="kw">,</span><span class="at"> </span><span class="st">&quot;8.4.4&quot;</span><span class="kw">,</span><span class="at"> </span><span class="st">&quot;8.6.5&quot;</span><span class="kw">,</span><span class="at"> </span><span class="st">&quot;8.8.1&quot;</span><span class="kw">]</span></span>
<span id="cb1-8"><a href="#cb1-8"></a><span class="at">        </span><span class="fu">cabal</span><span class="kw">:</span><span class="at"> </span><span class="kw">[</span><span class="st">&quot;3.0&quot;</span><span class="kw">]</span></span>
<span id="cb1-9"><a href="#cb1-9"></a></span>
<span id="cb1-10"><a href="#cb1-10"></a><span class="at">    </span><span class="fu">steps</span><span class="kw">:</span></span>
<span id="cb1-11"><a href="#cb1-11"></a><span class="at">    </span><span class="kw">-</span><span class="at"> </span><span class="fu">uses</span><span class="kw">:</span><span class="at"> actions/checkout@master</span></span>
<span id="cb1-12"><a href="#cb1-12"></a><span class="at">      </span><span class="fu">with</span><span class="kw">:</span></span>
<span id="cb1-13"><a href="#cb1-13"></a><span class="at">        </span><span class="fu">fetch-depth</span><span class="kw">:</span><span class="at"> </span><span class="dv">1</span></span>
<span id="cb1-14"><a href="#cb1-14"></a><span class="at">    </span><span class="kw">-</span><span class="at"> </span><span class="fu">uses</span><span class="kw">:</span><span class="at"> actions/setup-haskell@v1</span></span>
<span id="cb1-15"><a href="#cb1-15"></a><span class="at">      </span><span class="fu">name</span><span class="kw">:</span><span class="at"> Setup Haskell</span></span>
<span id="cb1-16"><a href="#cb1-16"></a><span class="at">      </span><span class="fu">with</span><span class="kw">:</span></span>
<span id="cb1-17"><a href="#cb1-17"></a><span class="at">        </span><span class="fu">ghc-version</span><span class="kw">:</span><span class="at"> ${{ matrix.ghc }}</span></span>
<span id="cb1-18"><a href="#cb1-18"></a><span class="at">        </span><span class="fu">cabal-version</span><span class="kw">:</span><span class="at"> ${{ matrix.cabal }}</span></span></code></pre></div>
<p>Haskell パッケージ系のリポジトリなら，こんな感じに matrix の設定をすると良い． で，キャッシュする場合は，この matrix ごとに <code>~/.cabal/store</code> だけをキャッシュすれば十分らしい（教えてもらった）:</p>
<div class="sourceCode" id="cb2"><pre class="sourceCode yaml"><code class="sourceCode yaml"><span id="cb2-1"><a href="#cb2-1"></a><span class="at">   </span><span class="fu">steps</span><span class="kw">:</span></span>
<span id="cb2-2"><a href="#cb2-2"></a><span class="at">   ...</span></span>
<span id="cb2-3"><a href="#cb2-3"></a><span class="at">    </span><span class="kw">-</span><span class="at"> </span><span class="fu">name</span><span class="kw">:</span><span class="at"> Cache .cabal</span></span>
<span id="cb2-4"><a href="#cb2-4"></a><span class="at">      </span><span class="fu">uses</span><span class="kw">:</span><span class="at"> actions/cache@preview</span></span>
<span id="cb2-5"><a href="#cb2-5"></a><span class="at">      </span><span class="fu">with</span><span class="kw">:</span></span>
<span id="cb2-6"><a href="#cb2-6"></a><span class="at">        </span><span class="fu">path</span><span class="kw">:</span><span class="at"> ~/.cabal/store</span></span>
<span id="cb2-7"><a href="#cb2-7"></a><span class="at">        </span><span class="fu">key</span><span class="kw">:</span><span class="at"> ${{ matrix.ghc }}-cabal-${{ hashFiles(&#39;**/fallible.cabal&#39;) }}</span></span>
<span id="cb2-8"><a href="#cb2-8"></a><span class="fu">        restore-keys</span><span class="kw">: </span><span class="ch">|</span></span>
<span id="cb2-9"><a href="#cb2-9"></a>          ${{ matrix.ghc }}-cabal-</span>
<span id="cb2-10"><a href="#cb2-10"></a><span class="at">    </span><span class="kw">-</span><span class="at"> </span><span class="fu">uses</span><span class="kw">:</span><span class="at"> actions/setup-haskell@v1</span></span>
<span id="cb2-11"><a href="#cb2-11"></a><span class="at">      </span><span class="fu">name</span><span class="kw">:</span><span class="at"> Setup Haskell</span></span>
<span id="cb2-12"><a href="#cb2-12"></a><span class="at">      </span><span class="fu">with</span><span class="kw">:</span></span>
<span id="cb2-13"><a href="#cb2-13"></a><span class="at">        </span><span class="fu">ghc-version</span><span class="kw">:</span><span class="at"> ${{ matrix.ghc }}</span></span>
<span id="cb2-14"><a href="#cb2-14"></a><span class="at">        </span><span class="fu">cabal-version</span><span class="kw">:</span><span class="at"> ${{ matrix.cabal }}</span></span>
<span id="cb2-15"><a href="#cb2-15"></a><span class="at">    </span><span class="kw">-</span><span class="at"> </span><span class="fu">name</span><span class="kw">:</span><span class="at"> Install dependencies</span></span>
<span id="cb2-16"><a href="#cb2-16"></a><span class="fu">      run</span><span class="kw">: </span><span class="ch">|</span></span>
<span id="cb2-17"><a href="#cb2-17"></a>        cabal v2-update</span>
<span id="cb2-18"><a href="#cb2-18"></a>        cabal v2-build --only-dependencies</span>
<span id="cb2-19"><a href="#cb2-19"></a><span class="at">    </span><span class="kw">-</span><span class="at"> </span><span class="fu">name</span><span class="kw">:</span><span class="at"> Build &amp; test</span></span>
<span id="cb2-20"><a href="#cb2-20"></a><span class="fu">      run</span><span class="kw">: </span><span class="ch">|</span></span>
<span id="cb2-21"><a href="#cb2-21"></a>        cabal v2-build</span>
<span id="cb2-22"><a href="#cb2-22"></a>        cabal v2-test</span></code></pre></div>
<p>Cabal の方はちゃんと調査してないのでこんでお終い（すいません）．</p>
<h2 id="stack-の場合">Stack の場合</h2>
<p>こっからが本題．</p>
<p>Stack はキャッシュすべきディレクトリ <code>~/.stack</code> がでかすぎる． 下記は試しに GitHub Actions 上で <code>du</code> して見た結果だ:</p>
<pre><code>$ du -sh ~/.stack/*
4.0K    /home/runner/.stack/config.yaml
1.3G    /home/runner/.stack/pantry
553M    /home/runner/.stack/pantry.sqlite3
0       /home/runner/.stack/pantry.sqlite3.pantry-write-lock
1.8G    /home/runner/.stack/programs
16M     /home/runner/.stack/setup-exe-cache
64K     /home/runner/.stack/setup-exe-src
462M    /home/runner/.stack/snapshots
192K    /home/runner/.stack/stack.sqlite3
0       /home/runner/.stack/stack.sqlite3.pantry-write-lock</code></pre>
<p>現在，<code>actions/cache@v1</code> では一度にキャッシュできるディレクトリの最大サイズは400MBしかない（<del>今後緩和される可能性はあるが</del> <a href="https://github.com/actions/cache/issues/6#issuecomment-571290282">2020年1月7日ごろにリリースされた v1.1.0 より上限が2GBに緩和された</a>ので、以降の涙ぐましい努力をする必要はなくなった笑）． <code>actions/cache</code> は内部で gzip かなんかで圧縮しているので，この数字まんまではない． 試しに，このまんまキャッシュしてみたら次のような警告が出た:</p>
<pre><code>Post job cleanup.
/bin/tar -cz -f /home/runner/work/_temp/2706cc23-8789-4ed4-b4ec-4e7143b1cc98/cache.tgz -C /home/runner/.stack .
##[warning]Cache size of 814014541 bytes is over the 400MB limit, not saving cache.</code></pre>
<p>800MB強，意外と少ない！</p>
<p>余談だが，<del>そのうち</del> v1.0.2 から<a href="https://github.com/actions/cache/pull/85">毎回キャッシュサイズが見れるようになる</a>はず（今でも <code>ACTIONS_STEP_DEBUG</code> を Secret に設定すると見れる）．</p>
<h3 id="system-ghc-を使う">system-ghc を使う</h3>
<p>stack は <code>--system-ghc</code> オプションを使うことで stack がインストールした GHC の代わりに，ホストマシンの GHC を直接使ってくれる:</p>
<div class="sourceCode" id="cb5"><pre class="sourceCode yaml"><code class="sourceCode yaml"><span id="cb5-1"><a href="#cb5-1"></a><span class="fu">jobs</span><span class="kw">:</span></span>
<span id="cb5-2"><a href="#cb5-2"></a><span class="at">  </span><span class="fu">build</span><span class="kw">:</span></span>
<span id="cb5-3"><a href="#cb5-3"></a><span class="at">    </span><span class="fu">runs-on</span><span class="kw">:</span><span class="at"> ubuntu-18.04</span></span>
<span id="cb5-4"><a href="#cb5-4"></a><span class="at">    </span><span class="fu">strategy</span><span class="kw">:</span></span>
<span id="cb5-5"><a href="#cb5-5"></a><span class="at">      </span><span class="fu">matrix</span><span class="kw">:</span></span>
<span id="cb5-6"><a href="#cb5-6"></a><span class="at">        </span><span class="fu">ghc</span><span class="kw">:</span><span class="at"> </span><span class="kw">[</span><span class="st">&quot;8.6.5&quot;</span><span class="kw">]</span></span>
<span id="cb5-7"><a href="#cb5-7"></a><span class="at">        </span><span class="fu">cabal</span><span class="kw">:</span><span class="at"> </span><span class="kw">[</span><span class="st">&quot;3.0&quot;</span><span class="kw">]</span></span>
<span id="cb5-8"><a href="#cb5-8"></a><span class="at">        </span><span class="fu">cache-version</span><span class="kw">:</span><span class="at"> </span><span class="kw">[</span><span class="st">&quot;v4&quot;</span><span class="kw">]</span></span>
<span id="cb5-9"><a href="#cb5-9"></a></span>
<span id="cb5-10"><a href="#cb5-10"></a><span class="at">    </span><span class="fu">steps</span><span class="kw">:</span></span>
<span id="cb5-11"><a href="#cb5-11"></a><span class="at">    </span><span class="kw">-</span><span class="at"> </span><span class="fu">uses</span><span class="kw">:</span><span class="at"> actions/checkout@v1</span></span>
<span id="cb5-12"><a href="#cb5-12"></a><span class="at">      </span><span class="fu">with</span><span class="kw">:</span></span>
<span id="cb5-13"><a href="#cb5-13"></a><span class="at">        </span><span class="fu">fetch-depth</span><span class="kw">:</span><span class="at"> </span><span class="dv">1</span></span>
<span id="cb5-14"><a href="#cb5-14"></a><span class="at">    </span><span class="kw">-</span><span class="at"> </span><span class="fu">name</span><span class="kw">:</span><span class="at"> Setup Haskell</span></span>
<span id="cb5-15"><a href="#cb5-15"></a><span class="at">      </span><span class="fu">uses</span><span class="kw">:</span><span class="at"> actions/setup-haskell@v1</span></span>
<span id="cb5-16"><a href="#cb5-16"></a><span class="at">      </span><span class="fu">with</span><span class="kw">:</span></span>
<span id="cb5-17"><a href="#cb5-17"></a><span class="at">        </span><span class="fu">ghc-version</span><span class="kw">:</span><span class="at"> ${{ matrix.ghc }}</span></span>
<span id="cb5-18"><a href="#cb5-18"></a><span class="at">        </span><span class="fu">cabal-version</span><span class="kw">:</span><span class="at"> ${{ matrix.cabal }}</span></span>
<span id="cb5-19"><a href="#cb5-19"></a><span class="at">    </span><span class="kw">-</span><span class="at"> </span><span class="fu">uses</span><span class="kw">:</span><span class="at"> mstksg/setup-stack@v1</span></span>
<span id="cb5-20"><a href="#cb5-20"></a><span class="at">    </span><span class="kw">-</span><span class="at"> </span><span class="fu">name</span><span class="kw">:</span><span class="at"> Install dependencies</span></span>
<span id="cb5-21"><a href="#cb5-21"></a><span class="at">      </span><span class="fu">run</span><span class="kw">:</span><span class="at"> stack --system-ghc build --only-dependencies</span></span>
<span id="cb5-22"><a href="#cb5-22"></a><span class="at">    </span><span class="kw">-</span><span class="at"> </span><span class="fu">name</span><span class="kw">:</span><span class="at"> Build binary</span></span>
<span id="cb5-23"><a href="#cb5-23"></a><span class="at">      </span><span class="fu">run</span><span class="kw">:</span><span class="at"> stack --system-ghc install --local-bin-path=./bin</span></span></code></pre></div>
<p>なんと system-ghc を使うことで <code>~/.stack/programs</code> が保存されなくなった（ここには stack がインストールした GHC が保存されてた）． これで，半分弱の削減に成功．残り約500MB．</p>
<h3 id="必殺奥義-分割キャッシュ">必殺奥義: 分割キャッシュ</h3>
<p>実は，キャッシュの最大サイズ 400MB は <strong>一つのディレクトリ毎の最大サイズ</strong> だ． なので，別々のディレクトリを別々にキャッシュすれば，最大 2GB までキャッシュできる（これがリポジトリ単位での最大サイズ）．</p>
<p><code>~/.stack/pantry</code> というのが単体で 1.3GB ある． なので，これだけとそれ以外をキャッシュするようにしてみる． ちなみに，<a href="https://docs.haskellstack.org/en/stable/pantry">Pantry というのが Stack の依存パッケージのキャッシュシステム</a>だ．</p>
<p>ここで問題が1つ． actions/cache はディレクトリを1つ指定して，それを圧縮しキャッシュしする． 複数のディレクトリを指定したり，中の一部のファイルだけを除外したりなどはできない（少なくとも現在のバージョンでは）． もちろん，一旦 <code>mv</code> してキャッシュし，restore したら <code>mv</code> し直せば良い． が，めんどいね． 単純なことはソフトウェアで解決しよう． ソフトウェアエンジニアの精神です（？）．</p>
<p>ということで，それをやってくれるアクションがこちら:</p>
<ul>
<li><a href="https://github.com/matsubara0507/actions/tree/master/move-files">actions/move-files at master · matsubara0507/actions</a></li>
</ul>
<p>ついに TypeScript デビューした． はい，actions/cache を参考にしてきていい感じに書き直しただけです． <code>mkdir</code> や <code>mv</code> は <a href="https://github.com/actions/toolkit/tree/master/packages/io">actions/toolkit</a> にあるので簡単に実装できた:</p>
<div class="sourceCode" id="cb6"><pre class="sourceCode typescript"><code class="sourceCode typescript"><span id="cb6-1"><a href="#cb6-1"></a><span class="im">import</span> <span class="op">*</span> <span class="im">as</span> core from <span class="st">&quot;@actions/core&quot;</span><span class="op">;</span></span>
<span id="cb6-2"><a href="#cb6-2"></a><span class="im">import</span> <span class="op">*</span> <span class="im">as</span> io from <span class="st">&quot;@actions/io&quot;</span><span class="op">;</span></span>
<span id="cb6-3"><a href="#cb6-3"></a><span class="im">import</span> <span class="op">*</span> <span class="im">as</span> utils from <span class="st">&quot;./utils/actionUtils&quot;</span><span class="op">;</span></span>
<span id="cb6-4"><a href="#cb6-4"></a></span>
<span id="cb6-5"><a href="#cb6-5"></a>async <span class="kw">function</span> <span class="fu">run</span>()<span class="op">:</span> <span class="bu">Promise</span><span class="op">&lt;</span><span class="dt">void</span><span class="op">&gt;</span> {</span>
<span id="cb6-6"><a href="#cb6-6"></a>    try {</span>
<span id="cb6-7"><a href="#cb6-7"></a>        const source <span class="op">=</span> utils<span class="op">.</span><span class="fu">resolvePath</span>(</span>
<span id="cb6-8"><a href="#cb6-8"></a>            core<span class="op">.</span><span class="fu">getInput</span>(<span class="st">&quot;source_dir&quot;</span><span class="op">,</span> { required<span class="op">:</span> true })</span>
<span id="cb6-9"><a href="#cb6-9"></a>        )<span class="op">;</span></span>
<span id="cb6-10"><a href="#cb6-10"></a>        <span class="co">// 残念ながら inputs は文字列しか渡せないので改行で分割してる</span></span>
<span id="cb6-11"><a href="#cb6-11"></a>        const files <span class="op">=</span> core</span>
<span id="cb6-12"><a href="#cb6-12"></a>            <span class="op">.</span><span class="fu">getInput</span>(<span class="st">&quot;source_files&quot;</span><span class="op">,</span> { required<span class="op">:</span> true })</span>
<span id="cb6-13"><a href="#cb6-13"></a>            <span class="op">.</span><span class="fu">split</span>(<span class="ss">/</span><span class="sc">\r?\n</span><span class="ss">/</span>)</span>
<span id="cb6-14"><a href="#cb6-14"></a>            <span class="op">.</span><span class="fu">filter</span>(pat <span class="kw">=&gt;</span> pat)</span>
<span id="cb6-15"><a href="#cb6-15"></a>            <span class="op">.</span><span class="fu">map</span>(pat <span class="kw">=&gt;</span> pat<span class="op">.</span><span class="fu">trim</span>())<span class="op">;</span></span>
<span id="cb6-16"><a href="#cb6-16"></a>        const target <span class="op">=</span> utils<span class="op">.</span><span class="fu">resolvePath</span>(</span>
<span id="cb6-17"><a href="#cb6-17"></a>            core<span class="op">.</span><span class="fu">getInput</span>(<span class="st">&quot;target_dir&quot;</span><span class="op">,</span> { required<span class="op">:</span> true })</span>
<span id="cb6-18"><a href="#cb6-18"></a>        )<span class="op">;</span></span>
<span id="cb6-19"><a href="#cb6-19"></a></span>
<span id="cb6-20"><a href="#cb6-20"></a>        await io<span class="op">.</span><span class="fu">mkdirP</span>(target)<span class="op">;</span></span>
<span id="cb6-21"><a href="#cb6-21"></a>        core<span class="op">.</span><span class="fu">debug</span>(<span class="vs">`mkdir -p </span><span class="sc">${</span>target<span class="sc">}</span><span class="vs">`</span>)<span class="op">;</span></span>
<span id="cb6-22"><a href="#cb6-22"></a></span>
<span id="cb6-23"><a href="#cb6-23"></a>        files<span class="op">.</span><span class="fu">forEach</span>(async <span class="kw">function</span>(file) {</span>
<span id="cb6-24"><a href="#cb6-24"></a>            try {</span>
<span id="cb6-25"><a href="#cb6-25"></a>                const path <span class="op">=</span> source<span class="op">.</span><span class="fu">concat</span>(<span class="st">&quot;/&quot;</span><span class="op">,</span> file)<span class="op">;</span></span>
<span id="cb6-26"><a href="#cb6-26"></a>                await io<span class="op">.</span><span class="fu">mv</span>(path<span class="op">,</span> target)<span class="op">;</span></span>
<span id="cb6-27"><a href="#cb6-27"></a>                core<span class="op">.</span><span class="fu">debug</span>(<span class="vs">`mv </span><span class="sc">${</span>path<span class="sc">}</span><span class="vs"> to </span><span class="sc">${</span>target<span class="sc">}</span><span class="vs">`</span>)<span class="op">;</span></span>
<span id="cb6-28"><a href="#cb6-28"></a>            } catch (error) {</span>
<span id="cb6-29"><a href="#cb6-29"></a>                core<span class="op">.</span><span class="fu">warning</span>(error<span class="op">.</span><span class="at">message</span>)<span class="op">;</span></span>
<span id="cb6-30"><a href="#cb6-30"></a>            }</span>
<span id="cb6-31"><a href="#cb6-31"></a>        })<span class="op">;</span></span>
<span id="cb6-32"><a href="#cb6-32"></a>    } catch (error) {</span>
<span id="cb6-33"><a href="#cb6-33"></a>        core<span class="op">.</span><span class="fu">warning</span>(error<span class="op">.</span><span class="at">message</span>)<span class="op">;</span></span>
<span id="cb6-34"><a href="#cb6-34"></a>    }</span>
<span id="cb6-35"><a href="#cb6-35"></a>}</span>
<span id="cb6-36"><a href="#cb6-36"></a></span>
<span id="cb6-37"><a href="#cb6-37"></a>run()<span class="op">;</span></span>
<span id="cb6-38"><a href="#cb6-38"></a></span>
<span id="cb6-39"><a href="#cb6-39"></a>export default run<span class="op">;</span></span></code></pre></div>
<p>使うときはこんな感じ:</p>
<div class="sourceCode" id="cb7"><pre class="sourceCode yaml"><code class="sourceCode yaml"><span id="cb7-1"><a href="#cb7-1"></a><span class="at">    </span><span class="kw">-</span><span class="at"> </span><span class="fu">name</span><span class="kw">:</span><span class="at"> Move .stack/pantry to temp</span></span>
<span id="cb7-2"><a href="#cb7-2"></a><span class="at">      </span><span class="fu">uses</span><span class="kw">:</span><span class="at"> matsubara0507/actions/move-files@master</span></span>
<span id="cb7-3"><a href="#cb7-3"></a><span class="at">      </span><span class="fu">with</span><span class="kw">:</span></span>
<span id="cb7-4"><a href="#cb7-4"></a><span class="at">        </span><span class="fu">source_dir</span><span class="kw">:</span><span class="at"> ~/.stack-temp/pantry</span></span>
<span id="cb7-5"><a href="#cb7-5"></a><span class="fu">        source_files</span><span class="kw">: </span><span class="ch">|</span></span>
<span id="cb7-6"><a href="#cb7-6"></a>          pantry</span>
<span id="cb7-7"><a href="#cb7-7"></a><span class="at">        </span><span class="fu">target_dir</span><span class="kw">:</span><span class="at"> ~/.stack</span></span></code></pre></div>
<p>実は，GitHub Actions には隠し機能（現状ドキュメントには書いてない）として <code>post</code> と <code>post-if</code> というのがある（<code>actions.yml</code> に設定できる）:</p>
<div class="sourceCode" id="cb8"><pre class="sourceCode yaml"><code class="sourceCode yaml"><span id="cb8-1"><a href="#cb8-1"></a><span class="fu">name</span><span class="kw">:</span><span class="at"> </span><span class="st">&#39;Move Files&#39;</span></span>
<span id="cb8-2"><a href="#cb8-2"></a><span class="fu">description</span><span class="kw">:</span><span class="at"> </span><span class="st">&#39;move files to other direcotory&#39;</span></span>
<span id="cb8-3"><a href="#cb8-3"></a><span class="fu">inputs</span><span class="kw">:</span></span>
<span id="cb8-4"><a href="#cb8-4"></a><span class="at">  </span><span class="fu">source_dir</span><span class="kw">:</span></span>
<span id="cb8-5"><a href="#cb8-5"></a><span class="at">    </span><span class="fu">required</span><span class="kw">:</span><span class="at"> </span><span class="ch">true</span></span>
<span id="cb8-6"><a href="#cb8-6"></a><span class="at">  </span><span class="fu">source_files</span><span class="kw">:</span></span>
<span id="cb8-7"><a href="#cb8-7"></a><span class="at">    </span><span class="fu">required</span><span class="kw">:</span><span class="at"> </span><span class="ch">true</span></span>
<span id="cb8-8"><a href="#cb8-8"></a><span class="at">  </span><span class="fu">target_dir</span><span class="kw">:</span></span>
<span id="cb8-9"><a href="#cb8-9"></a><span class="at">    </span><span class="fu">require</span><span class="kw">:</span><span class="at"> </span><span class="ch">true</span></span>
<span id="cb8-10"><a href="#cb8-10"></a><span class="fu">runs</span><span class="kw">:</span></span>
<span id="cb8-11"><a href="#cb8-11"></a><span class="at">  </span><span class="fu">using</span><span class="kw">:</span><span class="at"> </span><span class="st">&#39;node12&#39;</span></span>
<span id="cb8-12"><a href="#cb8-12"></a><span class="at">  </span><span class="fu">main</span><span class="kw">:</span><span class="at"> </span><span class="st">&#39;dist/move/index.js&#39;</span></span>
<span id="cb8-13"><a href="#cb8-13"></a><span class="at">  </span><span class="fu">post</span><span class="kw">:</span><span class="at"> </span><span class="st">&#39;dist/restore/index.js&#39;</span><span class="co"> # move.ts とは全く逆のことをするだけ</span></span>
<span id="cb8-14"><a href="#cb8-14"></a><span class="at">  </span><span class="fu">post-if</span><span class="kw">:</span><span class="at"> </span><span class="st">&#39;success()&#39;</span><span class="co">          # move が成功したときにだけ</span></span></code></pre></div>
<p>これは <a href="https://github.com/actions/cache">actions/cache</a> や <a href="https://github.com/actions/checkout">actions/checkout</a> がやっているやつで，ジョブステップの最後にデストラクタのように指定したアクションを実行してくれる機能だ． ちなみに，実行したステップとは逆順にポストステップは実行する．</p>
<p>これと actions/cache を組み合わせることで，自由にキャッシュしたいディレクトリを分割してキャッシュすることができるようになった！</p>
<div class="sourceCode" id="cb9"><pre class="sourceCode yaml"><code class="sourceCode yaml"><span id="cb9-1"><a href="#cb9-1"></a><span class="at">    </span><span class="fu">steps</span><span class="kw">:</span></span>
<span id="cb9-2"><a href="#cb9-2"></a><span class="at">    </span><span class="kw">-</span><span class="at"> </span><span class="fu">uses</span><span class="kw">:</span><span class="at"> actions/checkout@v1</span></span>
<span id="cb9-3"><a href="#cb9-3"></a><span class="at">      </span><span class="fu">with</span><span class="kw">:</span></span>
<span id="cb9-4"><a href="#cb9-4"></a><span class="at">        </span><span class="fu">fetch-depth</span><span class="kw">:</span><span class="at"> </span><span class="dv">1</span></span>
<span id="cb9-5"><a href="#cb9-5"></a></span>
<span id="cb9-6"><a href="#cb9-6"></a><span class="at">    </span><span class="kw">-</span><span class="at"> </span><span class="fu">name</span><span class="kw">:</span><span class="at"> Cache .stack</span></span>
<span id="cb9-7"><a href="#cb9-7"></a><span class="at">      </span><span class="fu">id</span><span class="kw">:</span><span class="at"> cache-stack</span></span>
<span id="cb9-8"><a href="#cb9-8"></a><span class="at">      </span><span class="fu">uses</span><span class="kw">:</span><span class="at"> actions/cache@v1</span></span>
<span id="cb9-9"><a href="#cb9-9"></a><span class="at">      </span><span class="fu">with</span><span class="kw">:</span></span>
<span id="cb9-10"><a href="#cb9-10"></a><span class="at">        </span><span class="fu">path</span><span class="kw">:</span><span class="at"> ~/.stack</span></span>
<span id="cb9-11"><a href="#cb9-11"></a><span class="at">        </span><span class="fu">key</span><span class="kw">:</span><span class="at"> ${{ runner.os }}-stack-${{ hashFiles(&#39;**/stack.yaml.lock&#39;) }}</span></span>
<span id="cb9-12"><a href="#cb9-12"></a><span class="fu">        restore-keys</span><span class="kw">: </span><span class="ch">|</span></span>
<span id="cb9-13"><a href="#cb9-13"></a>          ${{ runner.os }}-stack-</span>
<span id="cb9-14"><a href="#cb9-14"></a></span>
<span id="cb9-15"><a href="#cb9-15"></a><span class="at">    </span><span class="kw">-</span><span class="at"> </span><span class="fu">name</span><span class="kw">:</span><span class="at"> Cache .stack/pantry</span></span>
<span id="cb9-16"><a href="#cb9-16"></a><span class="at">      </span><span class="fu">id</span><span class="kw">:</span><span class="at"> cache-pantry</span></span>
<span id="cb9-17"><a href="#cb9-17"></a><span class="at">      </span><span class="fu">uses</span><span class="kw">:</span><span class="at"> actions/cache@v1</span></span>
<span id="cb9-18"><a href="#cb9-18"></a><span class="at">      </span><span class="fu">with</span><span class="kw">:</span></span>
<span id="cb9-19"><a href="#cb9-19"></a><span class="at">        </span><span class="fu">path</span><span class="kw">:</span><span class="at"> ~/.stack-temp/pantry</span></span>
<span id="cb9-20"><a href="#cb9-20"></a><span class="at">        </span><span class="fu">key</span><span class="kw">:</span><span class="at"> ${{ runner.os }}-pantry-${{ hashFiles(&#39;**/stack.yaml.lock&#39;) }}</span></span>
<span id="cb9-21"><a href="#cb9-21"></a><span class="fu">        restore-keys</span><span class="kw">: </span><span class="ch">|</span></span>
<span id="cb9-22"><a href="#cb9-22"></a>          ${{ runner.os }}-pantry-</span>
<span id="cb9-23"><a href="#cb9-23"></a></span>
<span id="cb9-24"><a href="#cb9-24"></a><span class="at">    </span><span class="kw">-</span><span class="at"> </span><span class="fu">name</span><span class="kw">:</span><span class="at"> Move .stack/pantry to temp</span></span>
<span id="cb9-25"><a href="#cb9-25"></a><span class="at">      </span><span class="fu">uses</span><span class="kw">:</span><span class="at"> matsubara0507/actions/move-files@master</span></span>
<span id="cb9-26"><a href="#cb9-26"></a><span class="at">      </span><span class="fu">with</span><span class="kw">:</span></span>
<span id="cb9-27"><a href="#cb9-27"></a><span class="at">        </span><span class="fu">source_dir</span><span class="kw">:</span><span class="at"> ~/.stack-temp/pantry</span></span>
<span id="cb9-28"><a href="#cb9-28"></a><span class="fu">        source_files</span><span class="kw">: </span><span class="ch">|</span></span>
<span id="cb9-29"><a href="#cb9-29"></a>          pantry</span>
<span id="cb9-30"><a href="#cb9-30"></a><span class="at">        </span><span class="fu">target_dir</span><span class="kw">:</span><span class="at"> ~/.stack</span></span>
<span id="cb9-31"><a href="#cb9-31"></a></span>
<span id="cb9-32"><a href="#cb9-32"></a><span class="at">    </span><span class="kw">-</span><span class="at"> </span><span class="fu">uses</span><span class="kw">:</span><span class="at"> actions/setup-haskell@v1</span></span>
<span id="cb9-33"><a href="#cb9-33"></a><span class="at">    ...</span></span></code></pre></div>
<p>ちょっとわかりにくいですが，別々にキャッシュしたディレクトリを <code>move-files</code> で合体させるイメージ．</p>
<h3 id="キャッシュバージョンを付ける">キャッシュバージョンを付ける</h3>
<p>今回の PR のコミット履歴を見るとわかるのだが迷走してる． なぜかというと，actions/cache の「cache save は cache key が <strong>ヒットしなかったときにだけ</strong> 行う」という性質に気づくのに時間がかかったから． <code>key</code> にはヒットせず <code>restore-keys</code> でヒットしたときには restore をして更にキャッシュを更新する． しかし，key に変更が無いとズーーーット古いキャッシュを使い続けてしまった． 変だと思った．</p>
<p><a href="https://github.com/actions/cache/issues/2">現状キャッシュを手動でクリアする方法が無い</a>． まぁなんでも良かったので cache-version というサフィックスを付けることにした笑:</p>
<div class="sourceCode" id="cb10"><pre class="sourceCode yaml"><code class="sourceCode yaml"><span id="cb10-1"><a href="#cb10-1"></a><span class="at">    </span><span class="fu">strategy</span><span class="kw">:</span></span>
<span id="cb10-2"><a href="#cb10-2"></a><span class="at">      </span><span class="fu">matrix</span><span class="kw">:</span></span>
<span id="cb10-3"><a href="#cb10-3"></a><span class="at">        </span><span class="fu">ghc</span><span class="kw">:</span><span class="at"> </span><span class="kw">[</span><span class="st">&quot;8.6.5&quot;</span><span class="kw">]</span></span>
<span id="cb10-4"><a href="#cb10-4"></a><span class="at">        </span><span class="fu">cabal</span><span class="kw">:</span><span class="at"> </span><span class="kw">[</span><span class="st">&quot;3.0&quot;</span><span class="kw">]</span></span>
<span id="cb10-5"><a href="#cb10-5"></a><span class="at">        </span><span class="fu">cache-version</span><span class="kw">:</span><span class="at"> </span><span class="kw">[</span><span class="st">&quot;v4&quot;</span><span class="kw">]</span></span>
<span id="cb10-6"><a href="#cb10-6"></a></span>
<span id="cb10-7"><a href="#cb10-7"></a><span class="at">    </span><span class="fu">steps</span><span class="kw">:</span></span>
<span id="cb10-8"><a href="#cb10-8"></a><span class="at">    </span><span class="kw">-</span><span class="at"> </span><span class="fu">uses</span><span class="kw">:</span><span class="at"> actions/checkout@v1</span></span>
<span id="cb10-9"><a href="#cb10-9"></a><span class="at">      </span><span class="fu">with</span><span class="kw">:</span></span>
<span id="cb10-10"><a href="#cb10-10"></a><span class="at">        </span><span class="fu">fetch-depth</span><span class="kw">:</span><span class="at"> </span><span class="dv">1</span></span>
<span id="cb10-11"><a href="#cb10-11"></a></span>
<span id="cb10-12"><a href="#cb10-12"></a><span class="at">    </span><span class="kw">-</span><span class="at"> </span><span class="fu">name</span><span class="kw">:</span><span class="at"> Cache .stack</span></span>
<span id="cb10-13"><a href="#cb10-13"></a><span class="at">      </span><span class="fu">id</span><span class="kw">:</span><span class="at"> cache-stack</span></span>
<span id="cb10-14"><a href="#cb10-14"></a><span class="at">      </span><span class="fu">uses</span><span class="kw">:</span><span class="at"> actions/cache@v1</span></span>
<span id="cb10-15"><a href="#cb10-15"></a><span class="at">      </span><span class="fu">with</span><span class="kw">:</span></span>
<span id="cb10-16"><a href="#cb10-16"></a><span class="at">        </span><span class="fu">path</span><span class="kw">:</span><span class="at"> ~/.stack</span></span>
<span id="cb10-17"><a href="#cb10-17"></a><span class="at">        </span><span class="fu">key</span><span class="kw">:</span><span class="at"> ${{ runner.os }}-stack-${{ hashFiles(&#39;**/stack.yaml.lock&#39;) }}-${{ matrix.cache-version }}</span></span>
<span id="cb10-18"><a href="#cb10-18"></a><span class="fu">        restore-keys</span><span class="kw">: </span><span class="ch">|</span></span>
<span id="cb10-19"><a href="#cb10-19"></a>          ${{ runner.os }}-stack-</span></code></pre></div>
<p>少なくとも，キャッシュを試行錯誤してるときには便利だ．</p>
<h3 id="ビフォーアフター">ビフォーアフター</h3>
<p>もともと25分以上かかかっていたビルドが:</p>
<p><img src="/assets/haskell-with-gh-actions/before.jpg"></img></p>
<p>なんと2分まで減った！</p>
<p><img src="/assets/haskell-with-gh-actions/after.jpg"></img></p>
<h2 id="おまけ-github-packages">おまけ: GitHub Packages</h2>
<p>Haskell プログラムのバイナリを配布するために，僕は普段 Docker Image にして Docker Hub に置いてた． しかし，先日 GitHub の 2019年のもう一つの目玉機能「GitHub Packages」も GA されたので，こっちに置いてみることにした（なんと Docker レジストリにもなる）．</p>
<p><a href="https://github.com/matsubara0507/octbook/packages"><img src="/assets/haskell-with-gh-actions/image.jpg"></img></a></p>
<p>ちなみに，現状パブリックリポジトリのパッケージであっても <code>docker pull</code> するのに認証が必要である． その点がとても残念(改善されることを祈る)．</p>
<h3 id="ログイン">ログイン</h3>
<p>意外と手間取った． どうやら MFA 設定してるとトークンを使う他ないらしい． しかも，新しく（？）追加された <code>write:packages</code> というスコープをオンしないとダメっぽい．</p>
<h3 id="github-actions-からプッシュ">GitHub Actions からプッシュ</h3>
<p>こんな感じ</p>
<div class="sourceCode" id="cb11"><pre class="sourceCode yaml"><code class="sourceCode yaml"><span id="cb11-1"><a href="#cb11-1"></a><span class="at">    </span><span class="kw">-</span><span class="at"> </span><span class="fu">name</span><span class="kw">:</span><span class="at"> Build binary</span></span>
<span id="cb11-2"><a href="#cb11-2"></a><span class="at">      </span><span class="fu">run</span><span class="kw">:</span><span class="at"> stack --system-ghc install --local-bin-path=./bin</span></span>
<span id="cb11-3"><a href="#cb11-3"></a></span>
<span id="cb11-4"><a href="#cb11-4"></a><span class="at">    </span><span class="kw">-</span><span class="at"> </span><span class="fu">name</span><span class="kw">:</span><span class="at"> Build Docker Image</span></span>
<span id="cb11-5"><a href="#cb11-5"></a><span class="at">      </span><span class="fu">run</span><span class="kw">:</span><span class="at"> docker build -t octbook . --build-arg local_bin_path=./bin</span></span>
<span id="cb11-6"><a href="#cb11-6"></a></span>
<span id="cb11-7"><a href="#cb11-7"></a><span class="at">    </span><span class="kw">-</span><span class="at"> </span><span class="fu">name</span><span class="kw">:</span><span class="at"> Push Docker Image</span></span>
<span id="cb11-8"><a href="#cb11-8"></a><span class="at">      </span><span class="fu">if</span><span class="kw">:</span><span class="at"> github.ref == &#39;refs/heads/master&#39;</span></span>
<span id="cb11-9"><a href="#cb11-9"></a><span class="fu">      run</span><span class="kw">: </span><span class="ch">|</span></span>
<span id="cb11-10"><a href="#cb11-10"></a>        echo ${{ secrets.GITHUB_TOKEN }} | docker login docker.pkg.github.com -u matsubara0507 --password-stdin</span>
<span id="cb11-11"><a href="#cb11-11"></a>        docker tag octbook docker.pkg.github.com/matsubara0507/octbook/cli</span>
<span id="cb11-12"><a href="#cb11-12"></a>        docker push docker.pkg.github.com/matsubara0507/octbook/cli:latest</span>
<span id="cb11-13"><a href="#cb11-13"></a></span>
<span id="cb11-14"><a href="#cb11-14"></a><span class="at">    </span><span class="kw">-</span><span class="at"> </span><span class="fu">name</span><span class="kw">:</span><span class="at"> Push Docker Image (tag)</span></span>
<span id="cb11-15"><a href="#cb11-15"></a><span class="at">      </span><span class="fu">if</span><span class="kw">:</span><span class="at"> startsWith(github.ref, &#39;refs/tags/&#39;)</span></span>
<span id="cb11-16"><a href="#cb11-16"></a><span class="fu">      run</span><span class="kw">: </span><span class="ch">|</span></span>
<span id="cb11-17"><a href="#cb11-17"></a>        echo ${{ secrets.GITHUB_TOKEN }} | docker login docker.pkg.github.com -u matsubara0507 --password-stdin</span>
<span id="cb11-18"><a href="#cb11-18"></a>        docker tag octbook docker.pkg.github.com/matsubara0507/octbook/cli:${GITHUB_REF#refs/tags/}</span>
<span id="cb11-19"><a href="#cb11-19"></a>        docker push docker.pkg.github.com/matsubara0507/octbook/cli:${GITHUB_REF#refs/tags/}</span></code></pre></div>
<p><code>if: github.ref == &#39;refs/heads/master&#39;</code> とすることで master ブランチのときだけ，<code>if: startsWith(github.ref, &#39;refs/tags/&#39;)</code> とすることで tag のときだけ，それぞれのステップを評価させることができる．</p>
<p>ちなみに，<code>GITHUB_TOKEN</code> という Secret はデフォルトで用意されてる． <a href="https://help.github.com/en/actions/automating-your-workflow-with-github-actions/authenticating-with-the-github_token#permissions-for-the-github_token">スコープについてはここに書いてある</a>． packages の read/write があるのでそのまま利用できるね．</p>
<h2 id="おしまい">おしまい</h2>
<p>まぁきっと数ヶ月後ぐらいにはキャッシュ容量の制限が緩和されてこんなことしなくても良くなると思うけど．</p>
  </div>]]></summary>
</entry>
<entry>
    <title>Elm で line charts する</title>
    <link href="https://matsubara0507.github.io/posts/2019-11-15-line-charts-with-elm.html" />
    <id>https://matsubara0507.github.io/posts/2019-11-15-line-charts-with-elm.html</id>
    <published>2019-11-15T00:00:00Z</published>
    <updated>2019-11-15T00:00:00Z</updated>
    <summary type="html"><![CDATA[<div class="post-content" itemprop="articleBody">
    <p>Elm で作っているスコアボードにスコアの線グラフを追加したかったので <a href="https://package.elm-lang.org/packages/terezka/line-charts/"><code>terezka/line-charts</code></a> というパッケージを使って追加した． っていうメモ書き。 追加の PR はこれです:</p>
<ul>
<li><a href="https://github.com/matsubara0507/git-plantation/pull/49">スコアボードにグラフを描写するページを追加 by matsubara0507 · Pull Request #49 · matsubara0507/git-plantation</a></li>
</ul>
<p>最終的に出来上がったグラフがこんな感じ:</p>
<p><img src="/assets/line-charts-with-elm/graph.jpg"></img></p>
<p>実は色をランダムに生成している部分がキモ(?)です． ちなみに，本記事で扱う <code>terezka/line-charts</code> パッケージのバージョンは 2.0 です．</p>
<h2 id="terezkaline-charts">terezka/line-charts</h2>
<p>どんなグラフが書けるかは作者が用意してる<a href="https://terezka.github.io/line-charts">サンプルページ</a>を見ると良い． ただし，<code>see source</code> ボタンで右からニュッっと出てくるソースコードは Elm 0.19 では動かない点に注意． サンプルページのコードはおそらく<a href="https://github.com/terezka/line-charts/blob/2.0.0/docs/src">ココ</a>にある．</p>
<p>今回は競技プログラミングのスコア変遷をグラフ化したかったので <a href="https://github.com/terezka/line-charts/blob/2.0.0/docs/src/Stepped.elm"><code>Steeped</code></a> というグラフを使うことにする(段々になっているやつ)．</p>
<h3 id="linechart.viewcustom-を使ってみる"><code>LineChart.viewCustom</code> を使ってみる</h3>
<p>グラフを描写するには <code>LineChart.viewCustom</code> 関数を使う:</p>
<div class="sourceCode" id="cb1"><pre class="sourceCode elm"><code class="sourceCode elm"><span id="cb1-1"><a href="#cb1-1"></a><span class="fu">viewCustom</span></span>
<span id="cb1-2"><a href="#cb1-2"></a>  : <span class="dt">Config</span> <span class="fu">data</span> <span class="fu">msg</span></span>
<span id="cb1-3"><a href="#cb1-3"></a>  <span class="op">-&gt;</span> <span class="dt">List</span> (<span class="dt">Series</span> <span class="fu">data</span>)</span>
<span id="cb1-4"><a href="#cb1-4"></a>  <span class="op">-&gt;</span> <span class="dt">Svg</span> <span class="fu">msg</span></span></code></pre></div>
<p>1引数めがどうのように描写するかの設定で，2引数目は描写する(プロットする)データのリストをである． <code>Config data msg</code> 型は次のようになっている:</p>
<div class="sourceCode" id="cb2"><pre class="sourceCode elm"><code class="sourceCode elm"><span id="cb2-1"><a href="#cb2-1"></a><span class="kw">type</span> <span class="kw">alias</span> <span class="dt">Config</span> <span class="fu">data</span> <span class="fu">msg</span> <span class="op">=</span></span>
<span id="cb2-2"><a href="#cb2-2"></a>    { <span class="fu">x</span> : <span class="dt">Axis</span><span class="op">.</span><span class="dt">Config</span> <span class="fu">data</span> <span class="fu">msg</span></span>
<span id="cb2-3"><a href="#cb2-3"></a>    <span class="op">,</span> <span class="fu">y</span> : <span class="dt">Axis</span><span class="op">.</span><span class="dt">Config</span> <span class="fu">data</span> <span class="fu">msg</span></span>
<span id="cb2-4"><a href="#cb2-4"></a>    <span class="op">,</span> <span class="fu">container</span> : <span class="dt">Container</span><span class="op">.</span><span class="dt">Config</span> <span class="fu">msg</span></span>
<span id="cb2-5"><a href="#cb2-5"></a>    <span class="op">,</span> <span class="fu">intersection</span> : <span class="dt">Axis</span><span class="op">.</span><span class="dt">Intersection</span><span class="op">.</span><span class="dt">Config</span></span>
<span id="cb2-6"><a href="#cb2-6"></a>    <span class="op">,</span> <span class="fu">interpolation</span> : <span class="dt">Interpolation</span><span class="op">.</span><span class="dt">Config</span></span>
<span id="cb2-7"><a href="#cb2-7"></a>    <span class="op">,</span> <span class="fu">legends</span> : <span class="dt">Legends</span><span class="op">.</span><span class="dt">Config</span> <span class="fu">data</span> <span class="fu">msg</span></span>
<span id="cb2-8"><a href="#cb2-8"></a>    <span class="op">,</span> <span class="fu">events</span> : <span class="dt">Events</span><span class="op">.</span><span class="dt">Config</span> <span class="fu">data</span> <span class="fu">msg</span></span>
<span id="cb2-9"><a href="#cb2-9"></a>    <span class="op">,</span> <span class="fu">area</span> : <span class="dt">Area</span><span class="op">.</span><span class="dt">Config</span></span>
<span id="cb2-10"><a href="#cb2-10"></a>    <span class="op">,</span> <span class="fu">grid</span> : <span class="dt">Grid</span><span class="op">.</span><span class="dt">Config</span></span>
<span id="cb2-11"><a href="#cb2-11"></a>    <span class="op">,</span> <span class="fu">line</span> : <span class="dt">Line</span><span class="op">.</span><span class="dt">Config</span> <span class="fu">data</span></span>
<span id="cb2-12"><a href="#cb2-12"></a>    <span class="op">,</span> <span class="fu">dots</span> : <span class="dt">Dots</span><span class="op">.</span><span class="dt">Config</span> <span class="fu">data</span></span>
<span id="cb2-13"><a href="#cb2-13"></a>    <span class="op">,</span> <span class="fu">junk</span> : <span class="dt">Junk</span><span class="op">.</span><span class="dt">Config</span> <span class="fu">data</span> <span class="fu">msg</span></span>
<span id="cb2-14"><a href="#cb2-14"></a>    }</span></code></pre></div>
<p>それぞれサブモジュールの設定をしている(例えば <code>container</code> フィールドは <code>LineChart.Container</code> モジュール):</p>
<ul>
<li><code>x</code>,<code>y</code> はX軸とY軸の設定</li>
<li><code>container</code> はグラフを描写する外枠の設定(たぶん)</li>
<li><code>intersection</code> は両軸の交点の設定(真ん中にするとか左下にするとか)</li>
<li><code>interpolation</code> は点と点を結ぶ線の引き方を設定(直線か曲線かなど)</li>
<li><code>legends</code> はグラフの凡例のを設定(どの線が何のグラフかなど)</li>
<li><code>events</code> はグラフ上でのイベント(<code>Msg</code>)を設定(クリックとかマウスホバーとか)</li>
<li><code>area</code> は線の下の部分の描写の仕方を設定
<ul>
<li><code>default</code> だと何も描写しないのでただの線グラフになる</li>
<li><code>normal</code> だと同じ色で塗りつぶしてくれる(引数は <code>opacity</code>)</li>
</ul></li>
<li><code>grid</code> はグラフのグリッドを設定(そのまんま)</li>
<li><code>line</code> は線の幅やホバーした時の動作を設定</li>
<li><code>dots</code> は点の大きさやホバーした時の動作を設定</li>
<li><code>junk</code> は点や線にホバーした時にモーダル(?)かなんかを表示する設定(たぶん)</li>
</ul>
<p>今回は基本的にサンプルコードのまんまで，軸や <code>junk</code> の設定を少しだけいじった．</p>
<h3 id="プロットデータを用意する">プロットデータを用意する</h3>
<p>2引数目の <code>Series data</code> はプロットしたいデータ型(<code>data</code>)に描写するための情報を付与したデータ型だ． 次の関数などで変換する:</p>
<div class="sourceCode" id="cb3"><pre class="sourceCode elm"><code class="sourceCode elm"><span id="cb3-1"><a href="#cb3-1"></a><span class="fu">line</span> : <span class="dt">Color</span> <span class="op">-&gt;</span> <span class="dt">Shape</span> <span class="op">-&gt;</span> <span class="dt">String</span> <span class="op">-&gt;</span> <span class="dt">List</span> <span class="fu">data</span> <span class="op">-&gt;</span> <span class="dt">Series</span> <span class="fu">data</span></span>
<span id="cb3-2"><a href="#cb3-2"></a><span class="fu">dash</span> : <span class="dt">Color</span> <span class="op">-&gt;</span> <span class="dt">Shape</span> <span class="op">-&gt;</span> <span class="dt">String</span> <span class="op">-&gt;</span> <span class="dt">List</span> <span class="dt">Float</span> <span class="op">-&gt;</span> <span class="dt">List</span> <span class="fu">data</span> <span class="op">-&gt;</span> <span class="dt">Series</span> <span class="fu">data</span></span></code></pre></div>
<p><code>line</code> は直線で <code>dash</code> はたぶん破線． <code>Color</code> は色を，<code>Shape</code> は <code>LineChart.Dots</code> にある関数で点の形を，<code>String</code> は線の凡例名を与える． で，実際のプロットデータは <code>List data</code> だ． <code>data</code> から何をX軸にして，何をY軸にするかは <code>Config</code> の <code>x</code>・<code>y</code> で指定する(<code>variable</code>)．</p>
<p>今回は，各チームのスコアデータの時間毎での遷移を描写したいので，X軸に正解時間をY軸に総ポイントを割り当てる． そのためのデータ型を用意した:</p>
<div class="sourceCode" id="cb4"><pre class="sourceCode elm"><code class="sourceCode elm"><span id="cb4-1"><a href="#cb4-1"></a><span class="kw">type</span> <span class="kw">alias</span> <span class="dt">ScoreHistory</span> <span class="op">=</span></span>
<span id="cb4-2"><a href="#cb4-2"></a>    { <span class="fu">point</span> : <span class="dt">Int</span>                <span class="co">-- 総ポイント</span></span>
<span id="cb4-3"><a href="#cb4-3"></a>    <span class="op">,</span> <span class="fu">latest</span> : <span class="dt">Maybe</span> <span class="dt">API</span><span class="op">.</span><span class="dt">Status</span>  <span class="co">-- 最後にクリアステータス</span></span>
<span id="cb4-4"><a href="#cb4-4"></a>    }</span>
<span id="cb4-5"><a href="#cb4-5"></a></span>
<span id="cb4-6"><a href="#cb4-6"></a><span class="kw">type</span> <span class="kw">alias</span> <span class="dt">Status</span> <span class="op">=</span></span>
<span id="cb4-7"><a href="#cb4-7"></a>    { <span class="fu">problem_id</span> : <span class="dt">Int</span></span>
<span id="cb4-8"><a href="#cb4-8"></a>    <span class="op">,</span> <span class="fu">correct</span> : <span class="dt">Bool</span>           <span class="co">-- クリアしてると True</span></span>
<span id="cb4-9"><a href="#cb4-9"></a>    <span class="op">,</span> <span class="fu">corrected_at</span> : <span class="dt">Maybe</span> <span class="dt">Int</span> <span class="co">-- まだクリアしてないと Nothing</span></span>
<span id="cb4-10"><a href="#cb4-10"></a>    }</span></code></pre></div>
<p><code>Status</code> はもともとある型で，サーバーサイドからスコア(<code>Score</code>)を取得する際に用いる． このサーバーからのスコアから <code>Series ScoreHistory</code> を構築する関数を用意した:</p>
<div class="sourceCode" id="cb5"><pre class="sourceCode elm"><code class="sourceCode elm"><span id="cb5-1"><a href="#cb5-1"></a><span class="kw">type</span> <span class="kw">alias</span> <span class="dt">Score</span> <span class="op">=</span></span>
<span id="cb5-2"><a href="#cb5-2"></a>    { <span class="fu">team</span> : <span class="dt">String</span></span>
<span id="cb5-3"><a href="#cb5-3"></a>    <span class="op">,</span> <span class="fu">point</span> : <span class="dt">Int</span></span>
<span id="cb5-4"><a href="#cb5-4"></a>    <span class="op">,</span> <span class="fu">stats</span> : <span class="dt">List</span> <span class="dt">Status</span></span>
<span id="cb5-5"><a href="#cb5-5"></a>    }</span>
<span id="cb5-6"><a href="#cb5-6"></a></span>
<span id="cb5-7"><a href="#cb5-7"></a><span class="fu">buildScoreHistories</span> : <span class="dt">Model</span> <span class="op">-&gt;</span> <span class="dt">Color</span> <span class="op">-&gt;</span> <span class="dt">API</span><span class="op">.</span><span class="dt">Score</span> <span class="op">-&gt;</span> <span class="dt">LineChart</span><span class="op">.</span><span class="dt">Series</span> <span class="dt">ScoreHistory</span></span>
<span id="cb5-8"><a href="#cb5-8"></a><span class="fu">buildScoreHistories</span> <span class="fu">model</span> <span class="fu">color</span> <span class="fu">score</span> <span class="op">=</span></span>
<span id="cb5-9"><a href="#cb5-9"></a>    <span class="fu">score</span><span class="op">.</span><span class="fu">stats</span></span>
<span id="cb5-10"><a href="#cb5-10"></a>        <span class="op">|&gt;</span> <span class="dt">List</span><span class="op">.</span><span class="fu">filter</span> <span class="op">.</span><span class="fu">correct</span></span>
<span id="cb5-11"><a href="#cb5-11"></a>        <span class="op">|&gt;</span> <span class="dt">List</span><span class="op">.</span><span class="fu">sortBy</span> (<span class="dt">Maybe</span><span class="op">.</span><span class="fu">withDefault</span> <span class="dv">0</span> <span class="op">&lt;&lt;</span> <span class="op">.</span><span class="fu">corrected_at</span>)</span>
<span id="cb5-12"><a href="#cb5-12"></a>        <span class="op">|&gt;</span> <span class="dt">List</span><span class="op">.</span><span class="fu">scanl</span> (<span class="op">::</span>) []</span>
<span id="cb5-13"><a href="#cb5-13"></a>        <span class="op">|&gt;</span> <span class="dt">List</span><span class="op">.</span><span class="fu">map</span> (<span class="fu">buildScoreHistory</span> <span class="fu">model</span>)</span>
<span id="cb5-14"><a href="#cb5-14"></a>        <span class="op">|&gt;</span> <span class="dt">LineChart</span><span class="op">.</span><span class="fu">line</span> <span class="fu">color</span> <span class="dt">Dots</span><span class="op">.</span><span class="fu">circle</span> <span class="fu">score</span><span class="op">.</span><span class="fu">team</span></span>
<span id="cb5-15"><a href="#cb5-15"></a></span>
<span id="cb5-16"><a href="#cb5-16"></a><span class="fu">buildScoreHistory</span> : <span class="dt">Model</span> <span class="op">-&gt;</span> <span class="dt">List</span> <span class="dt">API</span><span class="op">.</span><span class="dt">Status</span> <span class="op">-&gt;</span> <span class="dt">ScoreHistory</span></span>
<span id="cb5-17"><a href="#cb5-17"></a><span class="fu">buildScoreHistory</span> <span class="fu">model</span> <span class="fu">stats</span> <span class="op">=</span></span>
<span id="cb5-18"><a href="#cb5-18"></a>    { <span class="fu">point</span> <span class="op">=</span> <span class="dt">List</span><span class="op">.</span><span class="fu">sum</span> (<span class="dt">List</span><span class="op">.</span><span class="fu">map</span> (<span class="fu">findProblemPoint</span> <span class="fu">model</span>) <span class="fu">stats</span>)</span>
<span id="cb5-19"><a href="#cb5-19"></a>    <span class="op">,</span> <span class="fu">latest</span> <span class="op">=</span> <span class="dt">List</span><span class="op">.</span><span class="fu">head</span> <span class="fu">stats</span></span>
<span id="cb5-20"><a href="#cb5-20"></a>    }</span>
<span id="cb5-21"><a href="#cb5-21"></a></span>
<span id="cb5-22"><a href="#cb5-22"></a><span class="co">-- どの問題が何点かは `Model.problems` にしか書いてない</span></span>
<span id="cb5-23"><a href="#cb5-23"></a><span class="fu">findProblemPoint</span> : <span class="dt">Model</span> <span class="op">-&gt;</span> <span class="dt">API</span><span class="op">.</span><span class="dt">Status</span> <span class="op">-&gt;</span> <span class="dt">Int</span></span>
<span id="cb5-24"><a href="#cb5-24"></a><span class="fu">findProblemPoint</span> <span class="fu">model</span> <span class="fu">status</span> <span class="op">=</span></span>
<span id="cb5-25"><a href="#cb5-25"></a>    <span class="fu">model</span><span class="op">.</span><span class="fu">problems</span></span>
<span id="cb5-26"><a href="#cb5-26"></a>        <span class="op">|&gt;</span> <span class="dt">List</span><span class="op">.</span><span class="fu">find</span> (\<span class="fu">p</span> <span class="op">-&gt;</span> <span class="fu">p</span><span class="op">.</span><span class="fu">id</span> <span class="op">==</span> <span class="fu">status</span><span class="op">.</span><span class="fu">problem_id</span>)</span>
<span id="cb5-27"><a href="#cb5-27"></a>        <span class="op">|&gt;</span> <span class="dt">Maybe</span><span class="op">.</span><span class="fu">map</span> <span class="op">.</span><span class="fu">difficulty</span></span>
<span id="cb5-28"><a href="#cb5-28"></a>        <span class="op">|&gt;</span> <span class="dt">Maybe</span><span class="op">.</span><span class="fu">withDefault</span> <span class="dv">0</span></span></code></pre></div>
<p><code>scanl</code> で綺麗になってるのが気持ちいい． また，<code>variable</code> は次のように設定した:</p>
<div class="sourceCode" id="cb6"><pre class="sourceCode elm"><code class="sourceCode elm"><span id="cb6-1"><a href="#cb6-1"></a><span class="fu">chart</span> : <span class="dt">Model</span> <span class="op">-&gt;</span> <span class="dt">Html</span><span class="op">.</span><span class="dt">Html</span> <span class="dt">Msg</span></span>
<span id="cb6-2"><a href="#cb6-2"></a><span class="fu">chart</span> <span class="fu">model</span> <span class="op">=</span></span>
<span id="cb6-3"><a href="#cb6-3"></a>    <span class="dt">LineChart</span><span class="op">.</span><span class="fu">viewCustom</span></span>
<span id="cb6-4"><a href="#cb6-4"></a>        { <span class="fu">y</span> <span class="op">=</span></span>
<span id="cb6-5"><a href="#cb6-5"></a>            <span class="dt">Axis</span><span class="op">.</span><span class="fu">custom</span></span>
<span id="cb6-6"><a href="#cb6-6"></a>                { <span class="fu">title</span> <span class="op">=</span> <span class="dt">Title</span><span class="op">.</span><span class="fu">default</span> <span class="st">&quot;Point&quot;</span></span>
<span id="cb6-7"><a href="#cb6-7"></a>                <span class="op">,</span> <span class="fu">variable</span> <span class="op">=</span> <span class="dt">Just</span> <span class="op">&lt;&lt;</span> <span class="fu">toFloat</span> <span class="op">&lt;&lt;</span> <span class="op">.</span><span class="fu">point</span></span>
<span id="cb6-8"><a href="#cb6-8"></a>                <span class="op">,</span> <span class="fu">pixels</span> <span class="op">=</span> <span class="dv">380</span></span>
<span id="cb6-9"><a href="#cb6-9"></a>                <span class="op">,</span> <span class="fu">range</span> <span class="op">=</span> <span class="dt">Range</span><span class="op">.</span><span class="fu">padded</span> <span class="dv">20</span> <span class="dv">20</span></span>
<span id="cb6-10"><a href="#cb6-10"></a>                <span class="op">,</span> <span class="fu">axisLine</span> <span class="op">=</span> <span class="dt">AxisLine</span><span class="op">.</span><span class="fu">full</span> <span class="dt">Colors</span><span class="op">.</span><span class="fu">gray</span></span>
<span id="cb6-11"><a href="#cb6-11"></a>                <span class="op">,</span> <span class="fu">ticks</span> <span class="op">=</span> <span class="dt">Ticks</span><span class="op">.</span><span class="fu">float</span> <span class="dv">5</span> <span class="co">-- これは軸に表示する数字の間隔</span></span>
<span id="cb6-12"><a href="#cb6-12"></a>                }</span>
<span id="cb6-13"><a href="#cb6-13"></a>        <span class="op">,</span> <span class="fu">x</span> <span class="op">=</span></span>
<span id="cb6-14"><a href="#cb6-14"></a>            <span class="dt">Axis</span><span class="op">.</span><span class="fu">custom</span></span>
<span id="cb6-15"><a href="#cb6-15"></a>                { <span class="fu">title</span> <span class="op">=</span> <span class="dt">Title</span><span class="op">.</span><span class="fu">default</span> <span class="st">&quot;Time&quot;</span></span>
<span id="cb6-16"><a href="#cb6-16"></a>                <span class="op">,</span> <span class="fu">variable</span> <span class="op">=</span></span>
<span id="cb6-17"><a href="#cb6-17"></a>                    <span class="dt">Maybe</span><span class="op">.</span><span class="fu">map</span> <span class="fu">toFloat</span></span>
<span id="cb6-18"><a href="#cb6-18"></a>                      <span class="op">&lt;&lt;</span> <span class="dt">Maybe</span><span class="op">.</span><span class="fu">map</span> (\<span class="fu">n</span> <span class="op">-&gt;</span> <span class="fu">n</span> <span class="op">*</span> <span class="dv">1000</span>) <span class="co">-- 確かデフォルト millisec</span></span>
<span id="cb6-19"><a href="#cb6-19"></a>                      <span class="op">&lt;&lt;</span> <span class="dt">Maybe</span><span class="op">.</span><span class="fu">andThen</span> <span class="op">.</span><span class="fu">corrected_at</span></span>
<span id="cb6-20"><a href="#cb6-20"></a>                      <span class="op">&lt;&lt;</span> <span class="op">.</span><span class="fu">latest</span></span>
<span id="cb6-21"><a href="#cb6-21"></a>                <span class="op">,</span> <span class="fu">pixels</span> <span class="op">=</span> <span class="dv">1270</span></span>
<span id="cb6-22"><a href="#cb6-22"></a>                <span class="op">,</span> <span class="fu">range</span> <span class="op">=</span> <span class="dt">Range</span><span class="op">.</span><span class="fu">padded</span> <span class="dv">20</span> <span class="dv">20</span></span>
<span id="cb6-23"><a href="#cb6-23"></a>                <span class="op">,</span> <span class="fu">axisLine</span> <span class="op">=</span> <span class="dt">AxisLine</span><span class="op">.</span><span class="fu">full</span> <span class="dt">Colors</span><span class="op">.</span><span class="fu">gray</span></span>
<span id="cb6-24"><a href="#cb6-24"></a>                <span class="op">,</span> <span class="fu">ticks</span> <span class="op">=</span> <span class="dt">Ticks</span><span class="op">.</span><span class="fu">time</span> <span class="fu">model</span><span class="op">.</span><span class="fu">zone</span> <span class="dv">10</span></span>
<span id="cb6-25"><a href="#cb6-25"></a>                }</span>
<span id="cb6-26"><a href="#cb6-26"></a>        <span class="op">...</span></span>
<span id="cb6-27"><a href="#cb6-27"></a>        }</span></code></pre></div>
<p>さて，ここまではいい感じにできた． 問題は <code>buildScoreHistories</code> の <code>Color</code> にどうやってチームごとに違う色を渡すか． <code>LineChart.Colors</code> には事前に色が用意されていたが全部で22色ぐらいしかない． できればチーム数に応じて可変にしたい．</p>
<h2 id="color-を付け変える">Color を付け変える</h2>
<p>グラフ描写に使うグラフの色はチーム数によって可変にしたい． 色を任意個数だけ生成する方法はないか調べてみたところ，<a href="https://package.elm-lang.org/packages/tesk9/palette"><code>tesk9/palette</code></a> の <code>Palette.Cubehelix.generate</code> を使えば実現できそうだ:</p>
<div class="sourceCode" id="cb7"><pre class="sourceCode elm"><code class="sourceCode elm"><span id="cb7-1"><a href="#cb7-1"></a><span class="op">#</span> ただし <span class="dv">0</span><span class="op">-</span><span class="dv">256</span> の間だけ有効</span>
<span id="cb7-2"><a href="#cb7-2"></a><span class="fu">generate</span> : <span class="dt">Int</span> <span class="op">-&gt;</span> <span class="dt">List</span> <span class="dt">Color</span></span></code></pre></div>
<p>ここで問題が一つ． line-charts は別の <code>Color</code> パッケージに依存しており，<code>Color</code> モジュールが衝突して使うことができない！</p>
<p>困った． とりあえず，フォークして差し替えるしかない． 差し替えたものがコチラ:</p>
<ul>
<li><a href="https://github.com/matsubara0507/line-charts/tree/color-palette">matsubara0507/line-charts at color-palette</a></li>
</ul>
<p>Elm のビルドツールにはパッケージをいい感じにフォーク先などに変更する方法がない． ざっくり調べてみたところ，フォークしたもの elm-packages にあげて使うか，プロジェクト内にフォークしたリポジトリを直接置いて参照するか． Elm-jp でも相談してみたところ，後者の方が良さそうなのでそうすることにした．</p>
<h3 id="elm-のパッケージをフォークしたのにa差し替える">Elm のパッケージをフォークしたのにa差し替える</h3>
<p>まずは普通に <code>git submodule</code> をします:</p>
<pre><code>$ mkdir elm-lib
$ git submodule add git@github.com:matsubara0507/line-charts.git elm-lib/line-charts
$ elm-lib/line-charts
$ git checkout color-palette</code></pre>
<p>そしてこのディレクトリも見るように <code>elm.json</code> を書き換えます:</p>
<div class="sourceCode" id="cb9"><pre class="sourceCode diff"><code class="sourceCode diff"><span id="cb9-1"><a href="#cb9-1"></a><span class="dt">@@ -1,30 +1,40 @@</span></span>
<span id="cb9-2"><a href="#cb9-2"></a>  {</span>
<span id="cb9-3"><a href="#cb9-3"></a>      &quot;type&quot;: &quot;application&quot;,</span>
<span id="cb9-4"><a href="#cb9-4"></a>      &quot;source-directories&quot;: [</span>
<span id="cb9-5"><a href="#cb9-5"></a><span class="st">-         &quot;elm-src&quot;</span></span>
<span id="cb9-6"><a href="#cb9-6"></a><span class="va">+         &quot;elm-src&quot;,</span></span>
<span id="cb9-7"><a href="#cb9-7"></a><span class="va">+         &quot;elm-lib/line-charts/src&quot;</span></span>
<span id="cb9-8"><a href="#cb9-8"></a>      ],</span></code></pre></div>
<p>そして，適当に <code>import LineChart</code> を追記して <code>elm make</code> するとどうなるでしょうか？ 残念ながらうまくいきません:</p>
<pre><code>$ elm make elm-src/Main.elm --output=static/main.js
-- UNKNOWN IMPORT -------- elm-lib/line-charts/src/Internal/Axis/Values/Time.elm

The Internal.Axis.Values.Time module has a bad import:

    import Time.Extra

I cannot find that module! Is there a typo in the module name?

The &quot;source-directories&quot; field of your elm.json tells me to look in directories
like elm-src, but it is not in any of them. Maybe it is in a package that is not
installed yet?</code></pre>
<p><code>Time.Extra</code> は line-charts が依存しているパッケージで，それが <code>elm.json</code> に書かれてないというエラーメッセージです． サブモジュール側の依存パッケージは自動で解決してくれない(単純にローカルのソースコードが増えてるだけなので，そりゃそうって感じだ)． なので，自分で書き足す必要がある:</p>
<div class="sourceCode" id="cb11"><pre class="sourceCode diff"><code class="sourceCode diff"><span id="cb11-1"><a href="#cb11-1"></a><span class="kw">diff --git a/elm.json b/elm.json</span></span>
<span id="cb11-2"><a href="#cb11-2"></a>index 30d0662..7c32604 100644</span>
<span id="cb11-3"><a href="#cb11-3"></a><span class="dt">--- a/elm.json</span></span>
<span id="cb11-4"><a href="#cb11-4"></a><span class="dt">+++ b/elm.json</span></span>
<span id="cb11-5"><a href="#cb11-5"></a><span class="dt">@@ -1,36 +1,36 @@</span></span>
<span id="cb11-6"><a href="#cb11-6"></a>     &quot;dependencies&quot;: {</span>
<span id="cb11-7"><a href="#cb11-7"></a>         &quot;direct&quot;: {</span>
<span id="cb11-8"><a href="#cb11-8"></a>             &quot;avh4/elm-color&quot;: &quot;1.0.0&quot;,</span>
<span id="cb11-9"><a href="#cb11-9"></a>             &quot;bartavelle/json-helpers&quot;: &quot;2.0.2&quot;,</span>
<span id="cb11-10"><a href="#cb11-10"></a><span class="va">+            &quot;debois/elm-dom&quot;: &quot;1.3.0&quot;,</span></span>
<span id="cb11-11"><a href="#cb11-11"></a>             &quot;elm/browser&quot;: &quot;1.0.1&quot;,</span>
<span id="cb11-12"><a href="#cb11-12"></a>             &quot;elm/core&quot;: &quot;1.0.2&quot;,</span>
<span id="cb11-13"><a href="#cb11-13"></a>             &quot;elm/html&quot;: &quot;1.0.0&quot;,</span>
<span id="cb11-14"><a href="#cb11-14"></a>             &quot;elm/http&quot;: &quot;2.0.0&quot;,</span>
<span id="cb11-15"><a href="#cb11-15"></a>             &quot;elm/json&quot;: &quot;1.1.3&quot;,</span>
<span id="cb11-16"><a href="#cb11-16"></a><span class="va">+            &quot;elm/svg&quot;: &quot;1.0.1&quot;,</span></span>
<span id="cb11-17"><a href="#cb11-17"></a>             &quot;elm/time&quot;: &quot;1.0.0&quot;,</span>
<span id="cb11-18"><a href="#cb11-18"></a>             &quot;elm/url&quot;: &quot;1.0.0&quot;,</span>
<span id="cb11-19"><a href="#cb11-19"></a>             &quot;elm-community/list-extra&quot;: &quot;8.2.2&quot;,</span>
<span id="cb11-20"><a href="#cb11-20"></a><span class="va">+            &quot;justinmimbs/time-extra&quot;: &quot;1.1.0&quot;,</span></span>
<span id="cb11-21"><a href="#cb11-21"></a>             &quot;justinmimbs/timezone-data&quot;: &quot;2.1.4&quot;,</span>
<span id="cb11-22"><a href="#cb11-22"></a>             &quot;krisajenkins/remotedata&quot;: &quot;6.0.1&quot;,</span>
<span id="cb11-23"><a href="#cb11-23"></a><span class="st">-            &quot;terezka/line-charts&quot;: &quot;2.0.0&quot;</span></span>
<span id="cb11-24"><a href="#cb11-24"></a><span class="va">+            &quot;myrho/elm-round&quot;: &quot;1.0.4&quot;,</span></span>
<span id="cb11-25"><a href="#cb11-25"></a><span class="va">+            &quot;ryannhg/date-format&quot;: &quot;2.3.0&quot;</span></span>
<span id="cb11-26"><a href="#cb11-26"></a>         },</span>
<span id="cb11-27"><a href="#cb11-27"></a>         &quot;indirect&quot;: {</span>
<span id="cb11-28"><a href="#cb11-28"></a><span class="st">-            &quot;debois/elm-dom&quot;: &quot;1.3.0&quot;,</span></span>
<span id="cb11-29"><a href="#cb11-29"></a>             &quot;elm/bytes&quot;: &quot;1.0.8&quot;,</span>
<span id="cb11-30"><a href="#cb11-30"></a>             &quot;elm/file&quot;: &quot;1.0.5&quot;,</span>
<span id="cb11-31"><a href="#cb11-31"></a>             &quot;elm/parser&quot;: &quot;1.1.0&quot;,</span>
<span id="cb11-32"><a href="#cb11-32"></a><span class="st">-            &quot;elm/svg&quot;: &quot;1.0.1&quot;,</span></span>
<span id="cb11-33"><a href="#cb11-33"></a>             &quot;elm/virtual-dom&quot;: &quot;1.0.0&quot;,</span>
<span id="cb11-34"><a href="#cb11-34"></a><span class="st">-            &quot;justinmimbs/date&quot;: &quot;3.2.0&quot;,</span></span>
<span id="cb11-35"><a href="#cb11-35"></a><span class="st">-            &quot;justinmimbs/time-extra&quot;: &quot;1.1.0&quot;,</span></span>
<span id="cb11-36"><a href="#cb11-36"></a><span class="st">-            &quot;myrho/elm-round&quot;: &quot;1.0.4&quot;,</span></span>
<span id="cb11-37"><a href="#cb11-37"></a><span class="st">-            &quot;ryannhg/date-format&quot;: &quot;2.3.0&quot;</span></span>
<span id="cb11-38"><a href="#cb11-38"></a><span class="va">+            &quot;justinmimbs/date&quot;: &quot;3.2.0&quot;</span></span>
<span id="cb11-39"><a href="#cb11-39"></a>         }</span>
<span id="cb11-40"><a href="#cb11-40"></a>     },</span>
<span id="cb11-41"><a href="#cb11-41"></a>     &quot;test-dependencies&quot;: {</span></code></pre></div>
<p>これで無事 <code>elm make</code> をすることができるようになった．</p>
<h3 id="palette.cubehelix-を使ってみる"><code>Palette.Cubehelix</code> を使ってみる</h3>
<p>いよいよ <code>Palette.Cubehelix</code> を使ってみる． そもそも Cubehelix とはなんなのか．</p>
<p><a href="http://www.mrao.cam.ac.uk/~dag/CUBEHELIX/">ググった感じこれっぽい</a>． 宇宙を撮影した画像を描写するときのためのカラースキーマーっぽい(なにが課題なのかはよくわからなんだw)． <code>Palette.Cubehelix.generate :: Int -&gt; List Color</code> を使うことで最大で256色を返してくれる． 更にどんな感じの色を返してくれるかは <code>generateAdvanced</code> の方を使い，<code>AdvancedConfig</code> 型の値を自作することでコントロールできる:</p>
<div class="sourceCode" id="cb12"><pre class="sourceCode elm"><code class="sourceCode elm"><span id="cb12-1"><a href="#cb12-1"></a><span class="kw">type</span> <span class="kw">alias</span> <span class="dt">AdvancedConfig</span> <span class="op">=</span></span>
<span id="cb12-2"><a href="#cb12-2"></a>    { <span class="fu">start</span> : <span class="dt">Color</span></span>
<span id="cb12-3"><a href="#cb12-3"></a>    <span class="op">,</span> <span class="fu">rotationDirection</span> : <span class="dt">RotationDirection</span></span>
<span id="cb12-4"><a href="#cb12-4"></a>    <span class="op">,</span> <span class="fu">rotations</span> : <span class="dt">Float</span></span>
<span id="cb12-5"><a href="#cb12-5"></a>    <span class="op">,</span> <span class="fu">gamma</span> : <span class="dt">Float</span></span>
<span id="cb12-6"><a href="#cb12-6"></a>    }</span></code></pre></div>
<p>色々試したところ各引数はこんな感じだった:</p>
<ul>
<li><code>start</code> は HSL の Hue + Saturation を元に起点を決める</li>
<li><code>rotationDirection</code> は回転方向 (RGB or BGR)</li>
<li><code>rotation</code> は回転角を 0-1.5 で指定（小さいほど似た色になる）</li>
<li><code>gamma</code> は明暗な色のバランスを 0-2 で指定（0は明るい、2は暗い色が長くなる）</li>
</ul>
<p>HSLとは RGB とは違う色の表現のし方で，色相（Hue）・彩度（Saturation）・輝度（Lightness）を指定する． 直感的なイメートして，黒から白へこうぐるっと指定した螺旋でカラーパレットを表現する感じ．</p>
<p>物は試し，repl で色々と試すと良い(色だけに):</p>
<div class="sourceCode" id="cb13"><pre class="sourceCode elm"><code class="sourceCode elm"><span id="cb13-1"><a href="#cb13-1"></a><span class="op">&gt;</span> <span class="dt">List</span><span class="op">.</span><span class="fu">map</span> <span class="dt">Color</span><span class="op">.</span><span class="fu">toHex</span> <span class="op">&lt;|</span> <span class="dt">Palette</span><span class="op">.</span><span class="fu">generateAdvanced</span> <span class="dv">10</span> { <span class="fu">start</span> <span class="op">=</span> <span class="dt">Color</span><span class="op">.</span><span class="fu">fromHSL</span> (<span class="op">-</span><span class="dv">60</span><span class="op">,</span><span class="dv">100</span><span class="op">,</span><span class="dv">0</span>)<span class="op">,</span> <span class="fu">rotationDirection</span> <span class="op">=</span> <span class="dt">Palette</span><span class="op">.</span><span class="dt">RGB</span><span class="op">,</span> <span class="fu">rotations</span> <span class="op">=</span> <span class="dv">1</span><span class="op">.</span><span class="dv">5</span><span class="op">,</span> <span class="fu">gamma</span> <span class="op">=</span> <span class="dv">1</span><span class="op">.</span><span class="dv">0</span> }</span>
<span id="cb13-2"><a href="#cb13-2"></a>[<span class="st">&quot;#000000&quot;</span><span class="op">,</span><span class="st">&quot;#311410&quot;</span><span class="op">,</span><span class="st">&quot;#3C3F0D&quot;</span><span class="op">,</span><span class="st">&quot;#2B6F39&quot;</span><span class="op">,</span><span class="st">&quot;#3E8590&quot;</span><span class="op">,</span><span class="st">&quot;#8984CC&quot;</span><span class="op">,</span><span class="st">&quot;#D490C6&quot;</span><span class="op">,</span><span class="st">&quot;#EAB8B1&quot;</span><span class="op">,</span><span class="st">&quot;#E5E6CA&quot;</span><span class="op">,</span><span class="st">&quot;#FFFFFF&quot;</span>]</span>
<span id="cb13-3"><a href="#cb13-3"></a>   : <span class="dt">List</span> <span class="dt">String</span></span></code></pre></div>
<p>なんとこれを Slack に貼ると色を確認できる(賢い)． で，最終的には最初と最後の黒白を抜いて適当に使った．</p>
<h2 id="おしまい">おしまい</h2>
<p>submodule のやつしんどいし，なんか自動で <code>elm.json</code> を書き換えてくれる CLI ツールでも作ろうかしら．</p>
  </div>]]></summary>
</entry>
<entry>
    <title>Haskell Day 2019 に参加してきた</title>
    <link href="https://matsubara0507.github.io/posts/2019-11-10-join-haskell-day-2019.html" />
    <id>https://matsubara0507.github.io/posts/2019-11-10-join-haskell-day-2019.html</id>
    <published>2019-11-10T00:00:00Z</published>
    <updated>2019-11-10T00:00:00Z</updated>
    <summary type="html"><![CDATA[<div class="post-content" itemprop="articleBody">
    <p>11月9日にあった「<a href="https://techplay.jp/event/727059">Haskell Day 2019</a>」に参加してきたのでメモ書きです． 裏方もほんの少しだけ手伝ったけど，裏方については公式のブログで(誰かが)書くと思うので割愛． ただ，全部オープンな場でやりとりしてるの気になる方は Haskell-jp slack を見に行くか Haskell-jp の GitHub を漁るといいと思う．</p>
<h3 id="関数型function-typeを見つめるプログラミング">関数型(function type)を見つめるプログラミング</h3>
<p><a href="https://github.com/nobsun">山下</a>氏の発表． <a href="https://github.com/nobsun/hday2019/blob/master/doc/ftype.pdf">発表資料はこちら</a>．</p>
<p>関数型(プログラミング)の話かとずっと思ってたら関数「型」の話だった(よく読め)． 今回で唯一の Basics なセッション． 特別動くコードは出てこないとのこと． 話の中で <code>A -&gt; B</code> という関数型があるときに，ドメイン(<code>A</code> 側)がさらに関数型なのは多くの人たちも慣れて来てる(他の言語の人たちも含め)が，コドメイン(<code>B</code> 側)が関数型になるのはしっくりこない人が多いらしい．</p>
<pre><code>f :: (X -&gt; Y) -&gt; Z -- は平気
g :: X -&gt; (Y -&gt; Z) -- はダメらしい(もちろん Haskell はカッコいらない)</code></pre>
<p>まぁ確かに，他の言語ではあんまり使わないですね． 自分は学生の頃に，なんかのプログラミング言語に慣れる前に C/C++/Java/Ruby/Haskell を学んだから困った記憶ないけど． ちなみに「拡張適用演算子」っていう用語は山下氏の造語らしい．</p>
<h3 id="hkdhigher-kinded-datatype">HKD(Higher Kinded Datatype)</h3>
<p><a href="https://github.com/fumieval">fumieval</a> 氏の発表． <a href="https://assets.adobe.com/public/b93f214d-58c2-482f-5528-a939d3e83660">発表資料はこちら</a>．</p>
<p>Haskell のレコードの各フィールドに共通の性質を付加したいことはしばしばある． 多相な型パラメータ <code>h :: Type -&gt; Type</code> を付けてあげれば実現可能． <a href="https://hackage.haskell.org/package/barbies">barbies</a>パッケージを使うと自動でやってくれるし，fumieval 氏が作った <a href="https://hackage.haskell.org/package/extensible">extensible</a> パッケージはその機能もサポートしてる(2014~)． 僕は2017年ぐらいから愛用していますありがとうございます．</p>
<p>他にも <code>TangleT</code> という機能を紹介してましたが，なんとこのサイトを生成してる Hakyll プログラムにも <code>TangleT</code> を使ってます笑． <code>TangleT</code> はレコードのフィールド間に依存関係がある場合に有用で，フィールドの評価順を制御できるようになる． これと，静的サイトのレンダリング順を組み合わせたらいいんじゃね？ってなってやってみた(別段効果があったわけじゃないけど)．</p>
<h3 id="しんさんきぼうghcのderivingテクノロジー">「しんさんきぼう」GHCのderivingテクノロジー</h3>
<p><a href="https://github.com/aiya000">aiya000</a> 氏の発表． <a href="https://aiya000.github.io/Maid/haskell-day-2019-deriving/#/">発表資料はこちら</a></p>
<p>表題の通り，型クラスのインスタンス宣言を容易にしてくれる <code>deriving</code> 機能の最近の話． 標準のを含め，現在 GHC には <code>deriving</code> は4種類もあり，特に <code>DerivingVia</code> GHC 拡張はすごいぞ！って感じです． で，さらに4種類の <code>deriving</code> を整理して綺麗に記述するために <code>DerivingStrategies</code> という GHC 拡張があるとのこと．</p>
<div class="sourceCode" id="cb2"><pre class="sourceCode haskell"><code class="sourceCode haskell"><span id="cb2-1"><a href="#cb2-1"></a><span class="ot">{-# LANGUAGE DerivingStrategies #-}</span></span>
<span id="cb2-2"><a href="#cb2-2"></a><span class="kw">newtype</span> <span class="dt">SomeBody</span> <span class="ot">=</span> <span class="dt">SomeBody</span> <span class="dt">Person</span></span>
<span id="cb2-3"><a href="#cb2-3"></a>  <span class="kw">deriving</span>          (<span class="dt">Show</span>)                <span class="co">-- 標準</span></span>
<span id="cb2-4"><a href="#cb2-4"></a>  <span class="kw">deriving</span> stock    (<span class="dt">Eq</span>)                  <span class="co">-- 標準</span></span>
<span id="cb2-5"><a href="#cb2-5"></a>  <span class="kw">deriving</span> anyclass (<span class="dt">Visible</span>)             <span class="co">-- DeriveAnyClass</span></span>
<span id="cb2-6"><a href="#cb2-6"></a>  <span class="kw">deriving</span> <span class="kw">newtype</span>  (<span class="dt">Enum</span>)                <span class="co">-- GeneralizedNewtypeDeriving</span></span>
<span id="cb2-7"><a href="#cb2-7"></a>  <span class="kw">deriving</span>          (<span class="dt">Bounded</span>) via <span class="dt">Person</span>  <span class="co">-- DerivingVia</span></span></code></pre></div>
<p>(発表資料より引用)ここまでのコードは書いたことも見たこともないけど笑</p>
<p>ちなみに，<code>DerivingVia</code> は僕も前に「<a href="https://speakerdeck.com/konn/ben-dang-hasugoi-newtype">本当はすごい newtype</a>」っていう資料を読んでびっくりした記憶． 今回紹介した git-plantation では CLI の「なんらかの型の ID を列挙する」引数から「なんらかの型」を探す部分の ID 側に <code>DerivingVia</code> を使った． 思うにただの <code>Int</code> や <code>String</code> になりやすい ID 系の型は <code>DerivingVia</code> との相性がいい気がする．</p>
<h3 id="haskellメタプログラミングによるegisonのパターンマッチの実装">HaskellメタプログラミングによるEgisonのパターンマッチの実装</h3>
<p><a href="https://github.com/egisatoshi">江木</a>氏の発表． <a href="https://www.egison.org/download/20191109HaskellDay.pdf">発表資料はこちら</a>．</p>
<p>egisatoshi 氏が学生時代(?)から作成し続けてるプログラミング言語 <a href="https://www.egison.org">Egison</a> の強力なパターンマッチング機能を Haskell に導入した話． <a href="https://github.com/egison/egison-haskell">リポジトリは多分これ</a>． Egison の機能を他の言語に突っ込むというのは Scheme ですでにやっていたが，Haskell の場合は型付けをしなくちゃいけないらしく苦労したとのこと． もう，すっごい GHC の型拡張機能をふんだんに使ってました(多くの人に手伝ってもらったらしい)．</p>
<p>なお，スライドはめっちゃ長く，時間が足りなかったので全部のページを丁寧に説明してはなかった笑． あとで読んでだって．</p>
<p>僕は Egison を学生の頃から知ってて，ずーっと何かに使えないかなぁって考えてるけど思いつかない． Egison パターンマッチングは，再帰の「全探索する部分」と「条件付けて絞り込む部分」の前者をサボることができるようになるらしい． つまり，順番を無視するために似たようなパターンを記述しなくて済むようになる． 順番を無視したい場合，うーん，CLI の引数とか？ 今度試してみるか(なんか違う気もする)．</p>
<p>あ，ちなみに，最後にステマ(?)してた Egison Jornal は全部買ってます． 面白いです．</p>
<h3 id="関数と型で理解する自動微分">関数と型で理解する自動微分</h3>
<p><a href="https://github.com/lotz84">lotz</a> 氏の発表． <a href="https://speakerdeck.com/lotz84/guan-shu-toxing-deli-jie-suruzi-dong-wei-fen">発表資料はこちら</a>．</p>
<p>ぱっと見，一番好評だった気がする． 急に導関数が欲しくなる時がありますよね？ってことで自動で導関数を導出する方法を紹介します，って感じの話です(?)． Haskell で自動微分するためには <a href="https://github.com/ekmett/ad">ad</a> パッケージを使うといいらしい． ちなみにこのパッケージは，今回の Haskell Day のスペシャルゲストとしていらしゃった ekmett 氏が作ったものだ． で，動作を理解するために <code>diff</code> 関数を自作してみたっていう流れでした．</p>
<p>本来，型エラーになって欲しい部分が型エラーにならないので，幽霊型や存在型を使って実現している． といった Haskell 型機能のアドバンスドな話から，自動微分というアカデミックな話まで，盛りだくさんでした． というか話が上手．</p>
<h3 id="ghcjs-による-web-フロントエンド開発">GHCJS による Web フロントエンド開発</h3>
<p><a href="https://github.com/y-taka-23">チャシャ猫</a>氏の発表． <a href="https://guide.elm-lang.jp/architecture/">The Elm Architecture</a> を表現した GHCJS の <a href="https://github.com/dmjio/miso">Miso</a> パッケージをライブコーデイング形式で紹介． 基本ライブコーディングだった結果，スライドはないのかな．</p>
<h3 id="haskell-で作る競技型イベントの裏側">Haskell で作る競技型イベントの裏側</h3>
<p>僕の発表． <a href="https://www.slideshare.net/noob00/haskell-191796924">発表資料はこちら</a>．</p>
<p>去年の6月ぐらいから少しずーつ作ってた <a href="https://github.com/matsubara0507/git-plantation">git-plantation</a> の紹介． 話題が逸れるから言わなかったけど「作り直すか〜」ってやり始めたのは技術書典5のネタ用でした笑． もちろん，作り直す意義は発表した通りですよ．</p>
<p>extensible・Servant・Elm・STM・Dhall など前回・今回の Haskell Day で出たような話題をふんだんに使ってるので「詳しくは〜」って形で引用させてもらった． この発表以外の多くは，Haskell の強力な「型」でいろんな問題を解決したよって感じの話でしたが，僕はその解決した機能をふんだんに使ってリアルアプリケーションをサクッと作ったって感じなのです． 巨人の肩に乗ろう．</p>
<h3 id="大規模数値計算を支える-haskell-pragmatic-haskell-in-large-scale-numerical-computation">大規模数値計算を支える Haskell ── Pragmatic Haskell in Large-Scale Numerical Computation</h3>
<p><a href="https://github.com/konn">石井</a>氏の発表． <del>内容があれなので写真は最初のスライドだけで，的なこと言ってたのでスライドは公開されないんじゃないかな</del><a href="https://speakerdeck.com/konn/da-gui-mo-shu-zhi-ji-suan-wozhi-eru-haskell-nil-nil-pragmatic-haskell-in-large-scale-numerical-computation-nil-nil">公開されました</a>．</p>
<p>GoS2014(?)で ekmett 氏にメンターをしてもらったとのこと．すごい． で，発表の内容は社長(?)が前に言っていた「<a href="https://twitter.com/hiroki_f/status/1135160082373652480">弊社のプロダクトはモナドで各々知っているべき領域を区分して仕事を分けています。ですので、全部知ってなくても、仕事ができます。</a>」というツイートの詳しい話(代弁)． どうやら，物理系ソルバを(Haskellで)記述してる人たちが，それに注力できるように本質的な部分以外は Haskell の魔法(モナド)で隠蔽しているという感じの話らしい． 今回はその魔法についてたくさん紹介してくれた． 例えば，前にも出てきた依存型や拡張可能レコード，他にも Tagless final など． 高度な Haskell (というか GHC)の機能を Real World に消化しておりすごかった(小並感)．</p>
<h3 id="special-talk-cadenza-building-fast-functional-languages-on-the-jvm">Special Talk: Cadenza: Building fast functional languages on the JVM</h3>
<p><a href="https://github.com/ekmett/">ekmett</a> 氏の特別講演． これまたライブコーデイングでした(まさかの被り)． タイトルでも言及してる <a href="https://github.com/ekmett/cadenza">Cadenza ってのはこれっぽい</a>． JVM の方は最近よく耳にする(?) <a href="https://www.graalvm.org/">GraalVM</a> のことだった． ライブコーデイングの内容は単純型付きラムダ計算をささっと作ってるみたいだった．</p>
<h3 id="lt">LT</h3>
<p>だいたい間に合ってない笑 特にメモも何も取ってなかったのでリンクの列挙だけ．</p>
<ul>
<li><a href="https://github.com/as-capabl">アズなんとかさん</a>氏の「<a href="https://docs.google.com/presentation/d/1TiDWz3zLUwEWgpzXfgVZFIib6JtYriB03TVgHsimJC0">3D Model in Haskell</a>」</li>
<li><a href="https://github.com/cyclone-t">CycloneT</a>氏の「HaskellでIoTやってます」
<ul>
<li>業務の紹介なのでスライドは公開されてないかも</li>
</ul></li>
<li><a href="https://github.com/jabaraster">河野</a>氏の「<a href="https://docs.google.com/presentation/d/1xcdZ42lF64b_S0wZfi1Er-3YTs8H_Ob15BO3kpuRSMU">QuoraでHaskellへの愛を語る</a>」</li>
<li><a href="https://github.com/coord-e">coord_e</a> 氏の「<a href="https://gitpitch.com/coord-e/slide-type-class-impl">Haskellで作ってわかる型クラス</a>」
<ul>
<li>型クラス機能自体を作る方の話だった笑(間に合ってはない)</li>
</ul></li>
<li><a href="https://github.com/minoki">mod_poppo</a> 氏の「<a href="https://drive.google.com/file/d/1YGKjl8S-LlfuB8yrHnKSK5G5MGsP9xd3/view">Abstract Typeclasses</a>」</li>
<li><a href="https://github.com/kazu-yamamoto">kazu_yamamoto</a> 氏の「<a href="http://www.mew.org/~kazu/material/2019-gc.pdf">GHCのGC</a>」</li>
</ul>
<h2 id="おしまい">おしまい</h2>
<p>さて，来年のネタ仕込みを始めるか(発表するかはさておき)．</p>
  </div>]]></summary>
</entry>

</feed>
