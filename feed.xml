<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
    <title>ひげメモ</title>
    <link href="https://matsubara0507.github.io/feed.xml" rel="self" />
    <link href="https://matsubara0507.github.io" />
    <id>https://matsubara0507.github.io/feed.xml</id>
    <author>
        <name>MATSUBARA Nobutada</name>
        <email></email>
    </author>
    <updated>2019-02-04T00:00:00Z</updated>
    <entry>
    <title>Re: Marp のすゝめ</title>
    <link href="https://matsubara0507.github.io/posts/2019-02-04-re-recommend-marp.html" />
    <id>https://matsubara0507.github.io/posts/2019-02-04-re-recommend-marp.html</id>
    <published>2019-02-04T00:00:00Z</published>
    <updated>2019-02-04T00:00:00Z</updated>
    <summary type="html"><![CDATA[<article class="post card" itemscope itemtype="http://schema.org/BlogPosting">
 <div class="card-content">
  <header class="post-header">
    <h1 class="post-title" itemprop="name headline">Re: Marp のすゝめ</h1>
    <p class="post-meta">
      <time datetime="2019-02-04" itemprop="datePublished">
        Feb 4, 2019
      </time>
      
      
      <div class="tags">
          <i class="fa fa-tags"></i> <a href="/tags/Marp.html">Marp</a>
      </div>
      
    </p>
  </header>

  <div class="post-content" itemprop="articleBody">
    <p><a href="https://yhatt.github.io/marp/">Marp</a> というのは Markdown 記法で書けるスライド作成ツールです．</p>
<ul>
<li>Markdown 記法で手軽に書ける</li>
<li>見た目が綺麗</li>
<li>画像の拡縮が可能</li>
</ul>
<p>などの特徴から個人的にかなり重宝しています． その辺りは昔<a href="/posts/2016-12-14-recommend-marp.html">記事にしました</a>．</p>
<p>しかし，現在 Marp は今後メンテナンスをしないという明言をし，新しくゼロから <a href="https://github.com/marp-team/marp">Marp Next</a> というのを作っているようです． そのあたりの話は作者の記事にすこーしずつ書いてあります:</p>
<ul>
<li><a href="https://yhatt.hatenablog.jp/entry/2017/02/27/markdown-it-incremental-dom_というプラグインを作ってます">markdown-it-incremental-dom というプラグインを作ってます - YHATT (わいはっと)</a></li>
<li><a href="https://qiita.com/yhatt/items/874d5bfa919c32728403">Puppeteer &amp; Carlo を Markdown スライド作成 CLI ツール (Marp CLI) で活用する - Qiita</a></li>
</ul>
<p>時折，リポジトリをチェックして更新がないかを見ていたのですが，いよいよ Web UI まで出来上がっているので，現状のを試しに使ってみることにしました，というメモです．</p>
<h1 id="section"></h1>
<p>ちなみに，本記事での Marp Next のバージョンは <code>marp-cli-0.6</code> ぐらいを想定しています(現在開発が活発なので既に古くなっているかも)．</p>
<h2 id="marp-next">Marp Next</h2>
<p>新しい Marp の大きな目的は，よりメンテナブルな設計になることのようで，旧 Marp と異なり，機能ごとに個別の JS パッケージとなっている:</p>
<table>
<thead>
<tr class="header">
<th style="text-align: center;">リポジトリ</th>
<th>備考</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td style="text-align: center;"><a href="https://github.com/marp-team/marp">marp-team/marp</a></td>
<td>Marp 全体を取りまとめるリポジトリ</td>
</tr>
<tr class="even">
<td style="text-align: center;"><a href="https://github.com/marp-team/marpit">Marpit</a></td>
<td>Markdown からスライドの HTML へ変換する部分 (画像の拡縮などもココ)</td>
</tr>
<tr class="odd">
<td style="text-align: center;"><a href="https://github.com/marp-team/marp-core">Marp Core</a></td>
<td>Markdown 以外の拡張構文 (e.g. LaTeX, Emoji, Embed HTML)</td>
</tr>
<tr class="even">
<td style="text-align: center;"><a href="https://github.com/marp-team/marp-cli">Marp CLI</a></td>
<td>Marp の CLI ツール</td>
</tr>
<tr class="odd">
<td style="text-align: center;"><a href="https://github.com/marp-team/marp-web">Marp Web</a></td>
<td>Marp の Web UI (まだベータっぽい)</td>
</tr>
<tr class="even">
<td style="text-align: center;">Marp Desktop</td>
<td>Marp Web を Electron でラップして Desktop アプリにしたいらしい (まだ無い)</td>
</tr>
</tbody>
</table>
<p>(どうでも良いですが，モノリポにした方良かったと思う… Marpit で更新があると全てのリポジトリで PR を出して更新する必要があるので…)</p>
<p>ちなみに，<a href="https://github.com/yhatt/marp/issues?q=is%3Aopen+is%3Aissue+label%3A%22Supports+in+Marp+Next%22">旧 Marp のリポジトリの Issue ラベルに <code>Marp Next</code> や <code>Supports in Marp Next</code> というのができている</a>． 旧 Marp の Issue には，かなり要望っぽい Issue がたくさんあり，その中でも Marp Next では対応する予定のものには <code>Support in Marp Next</code> を付けたようだ．</p>
<h3 id="旧-marp-との非互換な機能">旧 Marp との非互換な機能</h3>
<p>これらは旧 Marp ユーザーしか意味ないが，適当に書き連ねていおく:</p>
<ol type="1">
<li><code>==AAA==</code> というハイライト機能がない（辛い）</li>
<li>打ち消し線記法 <code>~~AAA~~</code> もない</li>
<li>画像の拡縮ルール (Marpit)
<ul>
<li>より<a href="https://marpit.marp.app/image-syntax">細かいルールができて</a>書きやすくなった</li>
<li>しかし前のは記法は非互換</li>
<li><code>center</code> がないので中央寄せができない</li>
</ul></li>
<li><code>&lt;!-- *template: xxx --&gt;</code> のようなそのページだけ機能追加 (Marpit)
<ul>
<li><code>&lt;!-- _class: xxx --&gt;</code> のように先頭にアンダースコア <code>_</code> を付けるスタイルになった</li>
<li>ちなみに <code>&lt;!-- $theme: xxx --&gt;</code> はあるっぽい</li>
</ul></li>
<li>テーマの取り扱い (Marpit ??)
<ul>
<li><code>#</code> だけだと中央寄せなどになっていた機能がなくなった</li>
<li>それらはテーマのイチ <code>class</code> となっている</li>
<li>前の <code>template</code> も <code>class</code> なので組み合わせれない</li>
<li>明示的に指定できるようになったのは嬉しい</li>
</ul></li>
<li>KaTeX のバージョンアップ (Marp Core)
<ul>
<li>0.6.0 =&gt; 0.10.0</li>
<li>0.6.0 だと全然 LaTeX 記法をサポートしていないので<a href="https://katex.org/docs/supported.html">助かる</a></li>
<li>まぁ僕はフォークしてバージョンをあげてたけど</li>
</ul></li>
<li>スライドのサイズ・縦横比 (Marpit)
<ul>
<li><a href="https://github.com/marp-team/marpit/blob/9ab8e153e66db3a55e8edf9fec1356dd60ddf9e6/docs/theme-css.md#slide-size">テーマごとになったぽい</a>？</li>
<li><a href="https://marpit.marp.app/directives?id=tweak-theme-style"><code>style</code></a> で上書きすると変な余白ができる</li>
<li>どっちにせよ前の <code>&lt;!-- size: 4:3 --&gt;</code> みたいなのはできないっぽい</li>
</ul></li>
</ol>
<p>ちなみに，コードが全部 CoffeScript から TypeScript になってた．</p>
<h2 id="cli-を試す">CLI を試す</h2>
<p>リッチすぎてビビる</p>
<ul>
<li>README の通りで動いた (Mac, npx)
<ul>
<li><code>npx @marp-team/marp-cli slide.md</code></li>
</ul></li>
<li><a href="https://hub.docker.com/r/marpteam/marp-cli/">Docker もサポートされてる</a>
<ul>
<li>ただし一部機能に制限があるっぽい</li>
</ul></li>
<li>Markdown から HTML を生成する</li>
<li><code>--pdf</code> オプションで PDF を生成する
<ul>
<li>ただし <strong><a href="https://github.com/marp-team/marp-cli/pull/10">セキュリティの関係</a>でデフォルトではローカルファイルの画像などを埋め込めない</strong></li>
<li>そのためローカル画像を使うには <code>--allow-local-files</code> をつける</li>
<li>日本語フォントも変になっている気がする</li>
<li>日本語検索もダメっぽい</li>
</ul></li>
<li><code>--watch</code> オプションで Markdown の変更を検知し再生成する</li>
<li><code>--server</code> オプションで <code>localhost:8080</code> で閲覧やPDFの生成ができる (watch もされます)</li>
<li><code>--preview</code> でプレビューモード
<ul>
<li>待望の！！</li>
<li>ブラウザの全画面モードを使ってるみたい</li>
</ul></li>
<li><code>--theme</code> でカスタムテーマを設定可能 (CSS)</li>
<li>CLI のオプションを使わずに<a href="https://github.com/marp-team/marp-cli#configuration-file">設定ファイルでも設定可能</a>
<ul>
<li><code>package.json</code> <code>.marprc.yml</code> <code>marp.config.js</code> のどれでも</li>
</ul></li>
</ul>
<h2 id="cli-netlify-を試す">CLI + Netlify を試す</h2>
<p>試した:</p>
<ul>
<li><a href="https://github.com/matsubara0507/pub-slides">matsubara0507/pub-slides - GitHub</a></li>
</ul>
<p><a href="https://matsubara0507-slides.netlify.com/"><img src="/assets/re-recommend-marp/pub-slides-with-marp.jpg" alt="image.png" /></a></p>
<p>試し方: Marp の作者の<a href="https://github.com/yhatt/marp-cli-example">リポジトリ</a>の <code>Deploy to netlify</code> をクリックするだけ．</p>
<p>この方法の場合，リポジトリの <code>PITCHME.md</code> を <code>index.html</code> に変換する． marp-cli の設定は <code>package.yml</code> に書いてある． <a href="https://github.com/marp-team/marp-cli#options">設定方法</a>はこれを参照．</p>
<p>僕はできれば，複数のスライドを一つのリポジトリに置きたかった． ので，僕のリポジトリでは:</p>
<ul>
<li><code>slides</code> 以下の <code>*.md</code> を全部変換
<ul>
<li><code>index.md</code> が <code>index.html</code> のスライドになる</li>
</ul></li>
<li>後述する自作テーマをサブモジュールで設定</li>
<li><code>slides/assets</code> にある画像を <code>public</code> にコピーしてる</li>
</ul>
<p>のように少しだけ設定を書き換えた．</p>
<h2 id="web-ui-を試す">Web UI を試す</h2>
<p>すでに<a href="https://web.marp.app/">ここ</a>から試せる． 手元で試すなら:</p>
<pre><code>git clone https://github.com/marp-team/marp-web.git
cd marp-web
yarn install
yarn start</code></pre>
<p>でできた．</p>
<p><img src="/assets/re-recommend-marp/editing_marp_next.jpg" /></p>
<ul>
<li>ファイルの読み込みや保存が可能</li>
<li>プレゼンテーションモードは(まだ)なかった</li>
<li>PDFのエクスポートはブラウザの印刷機能を使うようだった</li>
<li>カスタムテーマの設定などはまだできない？？</li>
</ul>
<h2 id="テーマを移植する">テーマを移植する</h2>
<p>オリジナルテーマを作ってたので Marp Next にも移植した:</p>
<ul>
<li>olive</li>
<li>colors</li>
<li>haskell</li>
</ul>
<p><a href="https://github.com/matsubara0507/marp-themes">marp-themes</a> というリポジトリを作り，そこに置いてある． やったことは:</p>
<ul>
<li><a href="https://github.com/marp-team/marp-core/blob/26f2402d443d26af387adb0ee86cafa1149beb34/themes/gaia.scss">gaia の scss</a> を持ってきて主に色を変更
<ul>
<li>カスタムテーマとして指定できるのは CSS だけなので <code>scss</code> コマンドで手動変換する</li>
</ul></li>
<li>画像の中央寄せをできるようにした
<ul>
<li><code># ![](path/to/image.jpg)</code> とすると中央寄せになるようにした</li>
<li><code>h1</code> から <code>h6</code> のどれでも良いです</li>
<li>ただし，雑に <code>img</code> タグに適用してるので emoji を含ませるとずれる…</li>
<li>marpit に修正入れてもらった方が良いかな</li>
</ul></li>
<li><code>lead</code> + <code>invert</code> などの class を作っておいた
<ul>
<li>scss で書いてるので <code>lead</code> を適当に mixi-in にして include するだけ</li>
<li>これもできれば <code>class</code> の組み合わせができるようになって欲しい</li>
</ul></li>
</ul>
<h3 id="olive">Olive</h3>
<iframe src="//www.slideshare.net/slideshow/embed_code/key/797Uraln5Fo9gD" width="595" height="485" frameborder="0" marginwidth="0" marginheight="0" scrolling="no" style="border:1px solid #CCC; border-width:1px; margin-bottom:5px; max-width: 100%;" allowfullscreen>
</iframe>
<h3 id="colors">Colors</h3>
<iframe src="//www.slideshare.net/slideshow/embed_code/key/2kOvCIcUpOzKRg" width="595" height="485" frameborder="0" marginwidth="0" marginheight="0" scrolling="no" style="border:1px solid #CCC; border-width:1px; margin-bottom:5px; max-width: 100%;" allowfullscreen>
</iframe>
<h3 id="haskell">Haskell</h3>
<iframe src="//www.slideshare.net/slideshow/embed_code/key/kJqmkk54SJnaky" width="595" height="485" frameborder="0" marginwidth="0" marginheight="0" scrolling="no" style="border:1px solid #CCC; border-width:1px; margin-bottom:5px; max-width: 100%;" allowfullscreen>
</iframe>
<h2 id="おしまい">おしまい</h2>
<p>もう既に十分使える状態になっていました． すごい！</p>
  </div>
</div>
</article>
]]></summary>
</entry>
<entry>
    <title>Drone Plugin を作ってみた: git-with-ssh</title>
    <link href="https://matsubara0507.github.io/posts/2019-01-20-create-drone-git-with-ssh.html" />
    <id>https://matsubara0507.github.io/posts/2019-01-20-create-drone-git-with-ssh.html</id>
    <published>2019-01-20T00:00:00Z</published>
    <updated>2019-01-20T00:00:00Z</updated>
    <summary type="html"><![CDATA[<article class="post card" itemscope itemtype="http://schema.org/BlogPosting">
 <div class="card-content">
  <header class="post-header">
    <h1 class="post-title" itemprop="name headline">Drone Plugin を作ってみた: git-with-ssh</h1>
    <p class="post-meta">
      <time datetime="2019-01-20" itemprop="datePublished">
        Jan 20, 2019
      </time>
      
      
      <div class="tags">
          <i class="fa fa-tags"></i> <a href="/tags/Drone.html">Drone</a> <a href="/tags/Go.html">Go</a>
      </div>
      
    </p>
  </header>

  <div class="post-content" itemprop="articleBody">
    <p>最近 <a href="https://drone.io">Drone</a> という CI プラットフォームを試しています． Drone は Plugin という形で拡張機能を提供するので Plugin を自作してみた，という話です．</p>
<h2 id="作ったもの">作ったもの</h2>
<p>表題の通り，git-with-ssh という Plugin を作った:</p>
<ul>
<li><a href="https://github.com/matsubara0507/drone-git-with-ssh">matsubara0507/drone-git-with-ssh - GitHub</a></li>
</ul>
<p>この Plugin は SSH による git コマンドの利用を可能にする． 例えば，Drone で GitHub へのプッシュをしたいとき，パーソナル API トークンを使うのではなく Deploy Key を使いたい場合は次のように書くと良い:</p>
<div class="sourceCode" id="cb1"><pre class="sourceCode yaml"><code class="sourceCode yaml"><a class="sourceLine" id="cb1-1" title="1"><span class="fu">steps:</span></a>
<a class="sourceLine" id="cb1-2" title="2"><span class="kw">-</span> <span class="fu">name:</span><span class="at"> clone gh-pages</span></a>
<a class="sourceLine" id="cb1-3" title="3">  <span class="fu">image:</span><span class="at"> docker:git</span></a>
<a class="sourceLine" id="cb1-4" title="4">  <span class="fu">environment:</span></a>
<a class="sourceLine" id="cb1-5" title="5">    <span class="fu">SSH_KEY:</span></a>
<a class="sourceLine" id="cb1-6" title="6">      <span class="fu">from_secret:</span><span class="at"> deploy_key</span></a>
<a class="sourceLine" id="cb1-7" title="7">  <span class="fu">commands:</span></a>
<a class="sourceLine" id="cb1-8" title="8">  <span class="kw">-</span> mkdir /root/.ssh &amp;&amp; echo <span class="st">&quot;$SSH_KEY&quot;</span> &gt; /root/.ssh/id_rsa &amp;&amp; chmod 0600 /root/.ssh/id_rsa</a>
<a class="sourceLine" id="cb1-9" title="9">  <span class="kw">-</span> echo -e <span class="st">&quot;Host github.com</span><span class="sc">\n\t</span><span class="st">StrictHostKeyChecking no</span><span class="sc">\n</span><span class="st">&quot;</span> &gt; /root/.ssh/config</a>
<a class="sourceLine" id="cb1-10" title="10">  <span class="kw">-</span> git clone -b gh-pages git@github.com:haskell-jp/antenna.git temp</a></code></pre></div>
<p>この方法は <a href="https://github.com/drone/drone/issues/1891#issuecomment-269629929">Issue で作者本人が提案している</a>ため，おそらく推奨されている方法なのだろう． 二行追加するだけだから特別な機能は提供しない，と述べてるので CircleCI のような Deploy key を追加する機能は実装されないだろう(少なくとも当分は)．</p>
<p>しかし，実際に使い始めてボイラーテンプレート化してしまったので，せっかくだからこれを Plugin にしてみようと考えた． 結果として，自作した Plugin を使うと次のようにかける:</p>
<div class="sourceCode" id="cb2"><pre class="sourceCode yaml"><code class="sourceCode yaml"><a class="sourceLine" id="cb2-1" title="1"><span class="fu">steps:</span></a>
<a class="sourceLine" id="cb2-2" title="2"><span class="kw">-</span> <span class="fu">name:</span><span class="at"> clone gh-pages</span></a>
<a class="sourceLine" id="cb2-3" title="3">  <span class="fu">image:</span><span class="at"> matsubara0507/git-with-ssh</span></a>
<a class="sourceLine" id="cb2-4" title="4">  <span class="fu">settings:</span></a>
<a class="sourceLine" id="cb2-5" title="5">    <span class="fu">ssh_private_key:</span></a>
<a class="sourceLine" id="cb2-6" title="6">      <span class="fu">from_secret:</span><span class="at"> deploy_key</span></a>
<a class="sourceLine" id="cb2-7" title="7">    <span class="fu">ssh_hosts:</span></a>
<a class="sourceLine" id="cb2-8" title="8">    <span class="kw">-</span> github.com</a>
<a class="sourceLine" id="cb2-9" title="9">    <span class="fu">commands:</span></a>
<a class="sourceLine" id="cb2-10" title="10">    <span class="kw">-</span> git clone -b gh-pages git@github.com:haskell-jp/antenna.git temp</a></code></pre></div>
<p>行数は大してかわらないけど，なんか綺麗になったでしょ？(笑)</p>
<h2 id="作る">作る</h2>
<p>だいたい<a href="https://docs.drone.io/plugins">公式ドキュメント</a>と，<a href="https://github.com/drone-plugins">drone-plugin 組織アカウント</a>にある公式のリポジトリのコードとにらめっこすればなんとかなった．</p>
<h3 id="drone-plugin">Drone Plugin</h3>
<p>Drone Plugin の中身はただの Docker イメージだ． 仕組みは簡単で，単純に ENTRYPOINT を設定し，<code>.drone.yml</code> の <code>settings</code> 以下の値を <code>PLUGIN_</code> というプレフィックスをつけて環境変数としておくだけだ． 例えば上記の <code>git-with-ssh</code> の例だと:</p>
<pre><code>PLUGIN_SSH_PRIVATE_KEY
PLUGIN_SSH_HOSTS
PLUGIN_COMMANDS</code></pre>
<p>という環境変数にそれぞれの値が代入される． なのであとは ENTRYPOINT を設定する Dockerfile を定義すれば良い． 公式ドキュメントにはシェルスクリプトと Go 言語で作る場合の方法が載っている． が，別に Docker の ENTRYPOINT として実行できればなんでも良いので Haskell でも Ruby でも作れるだろう．</p>
<p>今回は本家のを参考にするために Go 言語で作った．</p>
<h3 id="main.go-と-plugin.go">main.go と plugin.go</h3>
<p>Go で作る場合，main.go と plugin.go に分けるのがデファクトスタンダートみたいだ． main.go には ENTRYPOINT に設定する CLI アプリのインターフェースを記述し，plugin.go には処理のロジックを記述するようだ． ざっくりと雰囲気だけ書くと:</p>
<div class="sourceCode" id="cb4"><pre class="sourceCode go"><code class="sourceCode go"><a class="sourceLine" id="cb4-1" title="1"><span class="co">// main.go</span></a>
<a class="sourceLine" id="cb4-2" title="2"><span class="kw">package</span> main</a>
<a class="sourceLine" id="cb4-3" title="3"></a>
<a class="sourceLine" id="cb4-4" title="4"><span class="kw">import</span> (</a>
<a class="sourceLine" id="cb4-5" title="5">  <span class="st">&quot;fmt&quot;</span></a>
<a class="sourceLine" id="cb4-6" title="6">  <span class="st">&quot;os&quot;</span></a>
<a class="sourceLine" id="cb4-7" title="7">  <span class="st">&quot;strings&quot;</span></a>
<a class="sourceLine" id="cb4-8" title="8"></a>
<a class="sourceLine" id="cb4-9" title="9">  <span class="st">&quot;github.com/joho/godotenv&quot;</span></a>
<a class="sourceLine" id="cb4-10" title="10">  log <span class="st">&quot;github.com/sirupsen/logrus&quot;</span></a>
<a class="sourceLine" id="cb4-11" title="11">  <span class="st">&quot;github.com/urfave/cli&quot;</span></a>
<a class="sourceLine" id="cb4-12" title="12">)</a>
<a class="sourceLine" id="cb4-13" title="13"></a>
<a class="sourceLine" id="cb4-14" title="14"><span class="kw">var</span> build = <span class="st">&quot;0&quot;</span></a>
<a class="sourceLine" id="cb4-15" title="15"></a>
<a class="sourceLine" id="cb4-16" title="16"><span class="kw">func</span> main() {</a>
<a class="sourceLine" id="cb4-17" title="17">  app := cli.NewApp()</a>
<a class="sourceLine" id="cb4-18" title="18">  app.Name = <span class="st">&quot;git-with-ssh plugin&quot;</span></a>
<a class="sourceLine" id="cb4-19" title="19">  app.Usage = <span class="st">&quot;git-with-ssh plugin&quot;</span></a>
<a class="sourceLine" id="cb4-20" title="20">  app.Action = run</a>
<a class="sourceLine" id="cb4-21" title="21">  app.Version = fmt.Sprintf(<span class="st">&quot;1.0.0+%s&quot;</span>, build)</a>
<a class="sourceLine" id="cb4-22" title="22">  app.Flags = []cli.Flag{</a>
<a class="sourceLine" id="cb4-23" title="23">    cli.StringFlag{</a>
<a class="sourceLine" id="cb4-24" title="24">      Name:   <span class="st">&quot;ssh_private_key&quot;</span>,</a>
<a class="sourceLine" id="cb4-25" title="25">      Usage:  <span class="st">&quot;SSH private key for git&quot;</span>,</a>
<a class="sourceLine" id="cb4-26" title="26">      EnvVar: <span class="st">&quot;PLUGIN_SSH_PRIVATE_KEY&quot;</span>,</a>
<a class="sourceLine" id="cb4-27" title="27">    },</a>
<a class="sourceLine" id="cb4-28" title="28">    ...</a>
<a class="sourceLine" id="cb4-29" title="29">    <span class="co">// ここに CLI の引数を定義</span></a>
<a class="sourceLine" id="cb4-30" title="30">  }</a>
<a class="sourceLine" id="cb4-31" title="31"></a>
<a class="sourceLine" id="cb4-32" title="32">  <span class="kw">if</span> err := app.Run(os.Args); err != <span class="ot">nil</span> {</a>
<a class="sourceLine" id="cb4-33" title="33">    log.Fatal(err)</a>
<a class="sourceLine" id="cb4-34" title="34">  }</a>
<a class="sourceLine" id="cb4-35" title="35">}</a>
<a class="sourceLine" id="cb4-36" title="36"></a>
<a class="sourceLine" id="cb4-37" title="37"><span class="kw">func</span> run(c *cli.Context) <span class="dt">error</span> {</a>
<a class="sourceLine" id="cb4-38" title="38">  <span class="kw">if</span> c.String(<span class="st">&quot;env-file&quot;</span>) != <span class="st">&quot;&quot;</span> {</a>
<a class="sourceLine" id="cb4-39" title="39">    _ = godotenv.Load(c.String(<span class="st">&quot;env-file&quot;</span>))</a>
<a class="sourceLine" id="cb4-40" title="40">  }</a>
<a class="sourceLine" id="cb4-41" title="41">  plugin := Plugin{</a>
<a class="sourceLine" id="cb4-42" title="42">    SSHKey: c.String(<span class="st">&quot;ssh_private_key&quot;</span>),</a>
<a class="sourceLine" id="cb4-43" title="43">    ...</a>
<a class="sourceLine" id="cb4-44" title="44">    <span class="co">// ここで CLI の引数からロジックへ橋渡し</span></a>
<a class="sourceLine" id="cb4-45" title="45">    <span class="co">// Plugin 型とかは plugin.go に書いてある</span></a>
<a class="sourceLine" id="cb4-46" title="46">  }</a>
<a class="sourceLine" id="cb4-47" title="47">  <span class="kw">return</span> plugin.Exec()</a>
<a class="sourceLine" id="cb4-48" title="48">}</a></code></pre></div>
<p>CLI には <a href="https://github.com/urfave/cli"><code>urfave/cli</code></a> を使っている． 理由は特に知らない． <code>go build</code> することで実行ファイルが生成される．</p>
<h3 id="脱線-vs.改行">脱線: vs. 改行</h3>
<p>少し Drone Plugin とは本質的に関係ない話． <code>plugin.go</code> では <code>id_rsa</code> を次のように生成している:</p>
<div class="sourceCode" id="cb5"><pre class="sourceCode go"><code class="sourceCode go"><a class="sourceLine" id="cb5-1" title="1"><span class="co">// plugin.go</span></a>
<a class="sourceLine" id="cb5-2" title="2">...</a>
<a class="sourceLine" id="cb5-3" title="3"></a>
<a class="sourceLine" id="cb5-4" title="4"><span class="kw">type</span> Plugin <span class="kw">struct</span> {</a>
<a class="sourceLine" id="cb5-5" title="5">  Home     <span class="dt">string</span></a>
<a class="sourceLine" id="cb5-6" title="6">  SSHKey   <span class="dt">string</span></a>
<a class="sourceLine" id="cb5-7" title="7">  Hosts    []<span class="dt">string</span></a>
<a class="sourceLine" id="cb5-8" title="8">  Commands []<span class="dt">string</span></a>
<a class="sourceLine" id="cb5-9" title="9">}</a>
<a class="sourceLine" id="cb5-10" title="10"></a>
<a class="sourceLine" id="cb5-11" title="11"><span class="kw">func</span> (p Plugin) Exec() <span class="dt">error</span> {</a>
<a class="sourceLine" id="cb5-12" title="12">  sshDir := fmt.Sprintf(<span class="st">&quot;%s/.ssh&quot;</span>, p.Home)</a>
<a class="sourceLine" id="cb5-13" title="13">  <span class="kw">if</span> err := os.MkdirAll(sshDir, <span class="dv">0700</span>); err != <span class="ot">nil</span> {</a>
<a class="sourceLine" id="cb5-14" title="14">    <span class="kw">return</span> errors.Wrapf(err, <span class="st">&quot;Exec cmd: mkdir -p %s&quot;</span>, sshDir)</a>
<a class="sourceLine" id="cb5-15" title="15">  }</a>
<a class="sourceLine" id="cb5-16" title="16">  log.Infof(<span class="st">&quot;Exec cmd: mkdir -p %s&quot;</span>, sshDir)</a>
<a class="sourceLine" id="cb5-17" title="17"></a>
<a class="sourceLine" id="cb5-18" title="18">  <span class="kw">if</span> err := ioutil.WriteFile(fmt.Sprintf(<span class="st">&quot;%s/id_rsa&quot;</span>, sshDir), []<span class="dt">byte</span>(p.SSHKey), <span class="dv">0600</span>); err != <span class="ot">nil</span> {</a>
<a class="sourceLine" id="cb5-19" title="19">    <span class="kw">return</span> errors.Wrapf(err, <span class="st">&quot;Write file: %s/id_rsa&quot;</span>, sshDir)</a>
<a class="sourceLine" id="cb5-20" title="20">  }</a>
<a class="sourceLine" id="cb5-21" title="21">  log.Infof(<span class="st">&quot;Write file: %s/id_rsa&quot;</span>, sshDir)</a>
<a class="sourceLine" id="cb5-22" title="22"></a>
<a class="sourceLine" id="cb5-23" title="23">  ...</a>
<a class="sourceLine" id="cb5-24" title="24">}</a></code></pre></div>
<p>そして，<code>id_rsa</code> の中身をオプションないしは環境変数として Go アプリに渡したい． しかし，次のように単純に渡してみてもうまく動作しない:</p>
<div class="sourceCode" id="cb6"><pre class="sourceCode sh"><code class="sourceCode bash"><a class="sourceLine" id="cb6-1" title="1">$ <span class="ex">./drone-git-with-ssh</span> --ssh_private_key=<span class="st">&#39;aaa\nbbb&#39;</span></a></code></pre></div>
<p>これだと <code>id_rsa</code> の中身は <code>aaa\nbbb</code> となる． <code>--ssh_private_key=$'aaa\nbbb'</code> としたら一応動作するが環境変数などが使えなくなるので，<a href="https://blog.konboi.com/post/2018/05/01/225336/">内部で明示的に置換すると良い</a>ようだ:</p>
<div class="sourceCode" id="cb7"><pre class="sourceCode go"><code class="sourceCode go"><a class="sourceLine" id="cb7-1" title="1"><span class="co">// main.go</span></a>
<a class="sourceLine" id="cb7-2" title="2">...</a>
<a class="sourceLine" id="cb7-3" title="3"></a>
<a class="sourceLine" id="cb7-4" title="4"><span class="kw">func</span> run(c *cli.Context) <span class="dt">error</span> {</a>
<a class="sourceLine" id="cb7-5" title="5">  ...</a>
<a class="sourceLine" id="cb7-6" title="6">  plugin := Plugin{</a>
<a class="sourceLine" id="cb7-7" title="7">    SSHKey: strings.Replace(c.String(<span class="st">&quot;ssh_private_key&quot;</span>), <span class="st">`</span><span class="ch">\n</span><span class="st">`</span>, <span class="st">&quot;</span><span class="ch">\n</span><span class="st">&quot;</span>, <span class="dv">-1</span>),</a>
<a class="sourceLine" id="cb7-8" title="8">    ...</a>
<a class="sourceLine" id="cb7-9" title="9">  }</a>
<a class="sourceLine" id="cb7-10" title="10">  <span class="kw">return</span> plugin.Exec()</a>
<a class="sourceLine" id="cb7-11" title="11">}</a></code></pre></div>
<h3 id="docker-イメージ">Docker イメージ</h3>
<p>他の Drone Plugin のリポジトリを参考にすると，次のような Dockerfile を書くと良い:</p>
<div class="sourceCode" id="cb8"><pre class="sourceCode dockerfile"><code class="sourceCode dockerfile"><a class="sourceLine" id="cb8-1" title="1"><span class="kw">FROM</span> docker:git</a>
<a class="sourceLine" id="cb8-2" title="2"></a>
<a class="sourceLine" id="cb8-3" title="3"><span class="kw">ADD</span> release/linux/amd64/drone-git-with-ssh /bin/</a>
<a class="sourceLine" id="cb8-4" title="4"><span class="kw">ENTRYPOINT</span> [<span class="st">&quot;/bin/drone-git-with-ssh&quot;</span>]</a></code></pre></div>
<p><code>FROM</code> で指定するベースイメージには普通，<a href="https://hub.docker.com/r/plugins/base/"><code>plugins/base</code></a> を使うようだが，これは <code>scratch</code> にちょっとだけ毛が生えた程度のイメージで <code>git</code> がない． なので <a href="https://hub.docker.com/_/docker"><code>docker:git</code></a> をベースイメージにした． 次のコマンドを実行することで Docker イメージを作成できる:</p>
<div class="sourceCode" id="cb9"><pre class="sourceCode sh"><code class="sourceCode bash"><a class="sourceLine" id="cb9-1" title="1">$ <span class="va">GOOS=</span>linux <span class="va">GOARCH=</span>amd64 <span class="va">CGO_ENABLED=</span>0 <span class="ex">go</span> build -a -tags netgo -o release/linux/amd64/drone-git-with-ssh</a>
<a class="sourceLine" id="cb9-2" title="2">$ <span class="ex">docker</span> build --rm -t matsubara0507/git-with-ssh .</a></code></pre></div>
<h3 id="drone-を設定する">Drone を設定する</h3>
<p>せっかくなので Drone で Docker イメージのビルドなどを CI してみる． <a href="https://cloud.drone.io/">Drone Cloud</a> という OSS は無料で使える Drone のクラウドサービスがあるのでこれに設定する．</p>
<p>テストはあとで考えるとして，Go のビルドと Docker イメージのビルドを CI で回す． また，master のプッシュだけは Docker イメージの自動プッシュも実現したい． Drone は他の CI サービスみたいに YAML ファイルで設定ファイルを記述する:</p>
<div class="sourceCode" id="cb10"><pre class="sourceCode yaml"><code class="sourceCode yaml"><a class="sourceLine" id="cb10-1" title="1"><span class="co"># .drone.yml</span></a>
<a class="sourceLine" id="cb10-2" title="2"><span class="fu">kind:</span><span class="at"> pipeline</span></a>
<a class="sourceLine" id="cb10-3" title="3"><span class="fu">name:</span><span class="at"> default</span></a>
<a class="sourceLine" id="cb10-4" title="4"></a>
<a class="sourceLine" id="cb10-5" title="5"><span class="fu">steps:</span></a>
<a class="sourceLine" id="cb10-6" title="6"><span class="kw">-</span> <span class="fu">name:</span><span class="at"> build go</span></a>
<a class="sourceLine" id="cb10-7" title="7">  <span class="fu">image:</span><span class="at"> golang:1.11</span></a>
<a class="sourceLine" id="cb10-8" title="8">  <span class="fu">commands:</span></a>
<a class="sourceLine" id="cb10-9" title="9">  <span class="kw">-</span> GOOS=linux GOARCH=amd64 CGO_ENABLED=0 go build -a -tags netgo -o release/linux/amd64/drone-git-with-ssh</a>
<a class="sourceLine" id="cb10-10" title="10"></a>
<a class="sourceLine" id="cb10-11" title="11"><span class="kw">-</span> <span class="fu">name:</span><span class="at"> build docker image (dry_run)</span></a>
<a class="sourceLine" id="cb10-12" title="12">  <span class="fu">image:</span><span class="at"> plugins/docker</span></a>
<a class="sourceLine" id="cb10-13" title="13">  <span class="fu">settings:</span></a>
<a class="sourceLine" id="cb10-14" title="14">    <span class="fu">username:</span><span class="at"> matsubara0507</span></a>
<a class="sourceLine" id="cb10-15" title="15">    <span class="fu">password:</span></a>
<a class="sourceLine" id="cb10-16" title="16">      <span class="fu">from_secret:</span><span class="at"> docker_hub_password</span></a>
<a class="sourceLine" id="cb10-17" title="17">    <span class="fu">repo:</span><span class="at"> matsubara0507/git-with-ssh</span></a>
<a class="sourceLine" id="cb10-18" title="18">    <span class="fu">dry-run:</span><span class="at"> </span><span class="ch">true</span><span class="at"> </span><span class="co"># Push をしないフラグ</span></a>
<a class="sourceLine" id="cb10-19" title="19">  <span class="fu">when:</span></a>
<a class="sourceLine" id="cb10-20" title="20">    <span class="fu">event:</span></a>
<a class="sourceLine" id="cb10-21" title="21">      <span class="fu">exclude:</span></a>
<a class="sourceLine" id="cb10-22" title="22">        <span class="kw">-</span> pull_request</a>
<a class="sourceLine" id="cb10-23" title="23"></a>
<a class="sourceLine" id="cb10-24" title="24"><span class="kw">-</span> <span class="fu">name:</span><span class="at"> push docker image</span></a>
<a class="sourceLine" id="cb10-25" title="25">  <span class="fu">image:</span><span class="at"> plugins/docker</span></a>
<a class="sourceLine" id="cb10-26" title="26">  <span class="fu">settings:</span></a>
<a class="sourceLine" id="cb10-27" title="27">    <span class="fu">username:</span><span class="at"> matsubara0507</span></a>
<a class="sourceLine" id="cb10-28" title="28">    <span class="fu">password:</span></a>
<a class="sourceLine" id="cb10-29" title="29">      <span class="fu">from_secret:</span><span class="at"> docker_hub_password</span></a>
<a class="sourceLine" id="cb10-30" title="30">    <span class="fu">repo:</span><span class="at"> matsubara0507/git-with-ssh</span></a>
<a class="sourceLine" id="cb10-31" title="31">  <span class="fu">when:</span></a>
<a class="sourceLine" id="cb10-32" title="32">    <span class="fu">branch:</span></a>
<a class="sourceLine" id="cb10-33" title="33">    <span class="kw">-</span> master</a>
<a class="sourceLine" id="cb10-34" title="34">    <span class="fu">event:</span></a>
<a class="sourceLine" id="cb10-35" title="35">      <span class="fu">exclude:</span></a>
<a class="sourceLine" id="cb10-36" title="36">        <span class="kw">-</span> pull_request</a></code></pre></div>
<p>Docker Hub への操作には <a href="https://github.com/drone-plugins/drone-docker"><code>docker</code></a> という Plugin を用いた． パスワードのような，ハードコーディングすべきではない文字列は Drone の Secret という仕組みをを用いる． <code>from_secret: key</code> とすることで，Drone の Web UI で設定した <code>key</code> という名の Secret を参照してくれる． 僕はパスワード系の Secret を PR では参照できないようにしているので，<code>when.event.exclude.pull_request</code> とすることで PR の CI では Secret を参照しているステップが動作しないようにしている．</p>
<h3 id="テストをどうするか">テストをどうするか</h3>
<p><code>plugin.go</code> はただ単にファイルを作ってるだけなのでユニットテストなどはしてもしょうがない． 悩んだ末，最初のシェルコマンドで実行して生成されるファイルと自作 Plugin で生成されるを比較することにした:</p>
<div class="sourceCode" id="cb11"><pre class="sourceCode yaml"><code class="sourceCode yaml"><a class="sourceLine" id="cb11-1" title="1"><span class="co"># .drone.yml</span></a>
<a class="sourceLine" id="cb11-2" title="2"><span class="fu">kind:</span><span class="at"> pipeline</span></a>
<a class="sourceLine" id="cb11-3" title="3"><span class="fu">name:</span><span class="at"> default</span></a>
<a class="sourceLine" id="cb11-4" title="4"></a>
<a class="sourceLine" id="cb11-5" title="5"><span class="fu">steps:</span></a>
<a class="sourceLine" id="cb11-6" title="6">  <span class="kw">-</span> <span class="fu">name:</span><span class="at"> build go</span></a>
<a class="sourceLine" id="cb11-7" title="7">    <span class="fu">image:</span><span class="at"> golang:1.11</span></a>
<a class="sourceLine" id="cb11-8" title="8">    <span class="fu">commands:</span></a>
<a class="sourceLine" id="cb11-9" title="9">    <span class="kw">-</span> go build</a>
<a class="sourceLine" id="cb11-10" title="10">    <span class="kw">-</span> GOOS=linux GOARCH=amd64 CGO_ENABLED=0 go build -a -tags netgo -o release/linux/amd64/drone-git-with-ssh</a>
<a class="sourceLine" id="cb11-11" title="11"></a>
<a class="sourceLine" id="cb11-12" title="12">  <span class="kw">-</span> <span class="fu">name:</span><span class="at"> test</span></a>
<a class="sourceLine" id="cb11-13" title="13">    <span class="fu">image:</span><span class="at"> golang:1.11</span></a>
<a class="sourceLine" id="cb11-14" title="14">    <span class="fu">environment:</span></a>
<a class="sourceLine" id="cb11-15" title="15">      <span class="fu">SSH_KEY:</span><span class="at"> </span><span class="st">&#39;aaa\nbbb&#39;</span></a>
<a class="sourceLine" id="cb11-16" title="16">    <span class="fu">commands:</span></a>
<a class="sourceLine" id="cb11-17" title="17">    <span class="kw">-</span> printf $SSH_KEY &gt; ./test/expected/.ssh/id_rsa &amp;&amp; chmod 600 ./test/expected/.ssh/id_rsa</a>
<a class="sourceLine" id="cb11-18" title="18">    <span class="kw">-</span> ./drone-git-with-ssh --home ./test/result --ssh_private_key $SSH_KEY --ssh_hosts github.com --ssh_hosts bitbucket.org  --commands <span class="st">&#39;pwd&#39;</span> --commands <span class="st">&#39;ls&#39;</span></a>
<a class="sourceLine" id="cb11-19" title="19">    <span class="kw">-</span> diff ./test/result/.ssh ./test/expected/.ssh</a>
<a class="sourceLine" id="cb11-20" title="20"></a>
<a class="sourceLine" id="cb11-21" title="21">  ...</a></code></pre></div>
<p>expected な <code>id_rsa</code> をわざわざ test ステップで生成するのではなく，GitHub に直接おいても良いが，なんか <code>id_rsa</code> という名前のファイルをパブリックリポジトリに置くのはどうなのかなぁと思ってやめた． このテストのために <code>--home</code> というオプションで任意のディレクトリに SSH の設定 <code>.ssh</code> を生成してくれるようにした． デフォルトは <code>/root</code> だが．</p>
<h3 id="おまけ-バッチ">おまけ: バッチ</h3>
<p>公式の Drone Plugin のリポジトリをみると README にいろんなバッジがあった． ので，真似して git-with-ssh にも設定してみた:</p>
<p><a href="https://github.com/matsubara0507/drone-git-with-ssh/blob/aee8928379453d89aedba010a1664ca6adf1ee72/README.md"><img src="/assets/create-drone-git-with-ssh/badges.jpg" /></a></p>
<p>付けたのは4つ:</p>
<ol type="1">
<li>Drone のビルド結果</li>
<li><a href="https://godoc.org/">Go Doc</a></li>
<li><a href="https://goreportcard.com/">Go Report Card</a></li>
<li><a href="https://microbadger.com/">MicroBadger</a></li>
</ol>
<p>1つ目は Drone のビルド結果のバッジ． Drone のバッジは settings の一番下から取得できる．</p>
<h2 id="section"></h2>
<p>Go Doc は指定した Go のリポジトリからドキュメントを生成してくれるサービスである． 依存パッケージとかも解析していい感じに表示してくれる． すごい．</p>
<p>Go Report Card も同様に Go のリポジトリを指定することで動作する． こっちは go fmt がちゃんとかかってるかや linter の結果などをチェックしてくれる． すごい．</p>
<h2 id="section-1"></h2>
<p>MicroBadger は Docker Hub にあるイメージを静的検査してくれる． イメージサイズや生成時間はもちろん，Docker イメージのレイヤ構造も出してくれる． これで Dockerfile をわざわざ探さなくても良いのですごい助かる．</p>
<h2 id="おしまい">おしまい</h2>
<p>久しぶりにサンプルじゃない Go のアプリケーションを作ってみた． 楽しかった〜．</p>
  </div>
</div>
</article>
]]></summary>
</entry>
<entry>
    <title>GCS で Drone 1.0 をキャッシュする</title>
    <link href="https://matsubara0507.github.io/posts/2019-01-06-use-drone-cache-with-gcs.html" />
    <id>https://matsubara0507.github.io/posts/2019-01-06-use-drone-cache-with-gcs.html</id>
    <published>2019-01-06T00:00:00Z</published>
    <updated>2019-01-06T00:00:00Z</updated>
    <summary type="html"><![CDATA[<article class="post card" itemscope itemtype="http://schema.org/BlogPosting">
 <div class="card-content">
  <header class="post-header">
    <h1 class="post-title" itemprop="name headline">GCS で Drone 1.0 をキャッシュする</h1>
    <p class="post-meta">
      <time datetime="2019-01-06" itemprop="datePublished">
        Jan 6, 2019
      </time>
      
      
      <div class="tags">
          <i class="fa fa-tags"></i> <a href="/tags/Drone.html">Drone</a> <a href="/tags/Haskell.html">Haskell</a>
      </div>
      
    </p>
  </header>

  <div class="post-content" itemprop="articleBody">
    <p>Drone ネタ2本目． せっかく drone-haskell を作ったので TravisCI でテストを回すのではなく，Drone で回そうかなと思ったのだが，Stack でフルビルドするとめっちゃ時間かかる． なので，Drone のキャッシュをやってみましたっていう小話です．</p>
<h2 id="cache-in-drone">Cache in Drone</h2>
<p>Drone でキャッシュを利用するには次のような Plugin を使用する:</p>
<ul>
<li>drone-s3-cache: <a href="https://github.com/drone-plugins/drone-s3-cache">GitHub</a>・<a href="http://plugins.drone.io/drone-plugins/drone-s3-cache/">Marketplace</a></li>
<li>drone-volume-cache: <a href="https://github.com/drone-plugins/drone-volume-cache">GitHub</a>・<a href="http://plugins.drone.io/drillster/drone-volume-cache/">Marketplace</a></li>
<li>drone-gcs-cache: <a href="https://github.com/hvalle/drone-gcs-cache">GitHub</a>・<a href="http://plugins.drone.io/hvalle/drone-gcs-cache/">Marketplace</a></li>
</ul>
<p>s3-cache や gcs-cache は任意のフォルダを tar かなんかに固めて各種クラウドストレージに保存する． volume-cache はローカルに保存してくれるのだが，これを利用するためにはリポジトリの <code>Trusted</code> フラグを立てる必要がある． ただし，これは Admin しかできないので，Drone Cloud では利用できない． なので s3-cache や gcs-cache を使うしかない．</p>
<p>ちなみに公式で提供してくれてるのは s3-cache なので，そっちを使うべきなのだが，見事に AWS のパスワードやらを忘れてしまったので GCP の Cloud Storage の方を利用した(オイ)． ただ，gcs-cache は 0.8.x 時代の設定方法しか書いてない． いろいろ調べてみた結果，YAML の書き方を変えるだけでそのまま利用できそうだったのでそのまま drone-gcs-cache を利用する．</p>
<h2 id="drone-gcs-cache">Drone GCS Cache</h2>
<h3 id="認証鍵の設定">認証鍵の設定</h3>
<p>GCS の認証にはサービスアカウントの JSON Key を使う． GCP コンソールの <code>APIとサービス</code> の <code>認証情報</code> からサービスアカウントを作成し(このときに JSON が DL される)，<code>IAMと管理</code> の <code>IAM</code> からさっき作ったアカウントに <code>ストレージ管理者</code> を追加した IAM を作成する．</p>
<p>この JSON を Drone のウェブコンソールから Secret として設定する． 改行込みでファイルの中身そのままコピペで大丈夫． もし PR を作成したときにも動作させたいなら <code>Allow Pull Requests</code> にチェックする．</p>
<h3 id="yaml-の設定">YAML の設定</h3>
<p>あとは YAML を設定するだけ． 例えば drone-gcs-cache の古い設定を書き直すと次のようになる:</p>
<div class="sourceCode" id="cb1"><pre class="sourceCode yaml"><code class="sourceCode yaml"><a class="sourceLine" id="cb1-1" title="1"><span class="fu">kind:</span><span class="at"> pipeline</span></a>
<a class="sourceLine" id="cb1-2" title="2"><span class="fu">name:</span><span class="at"> default</span></a>
<a class="sourceLine" id="cb1-3" title="3"></a>
<a class="sourceLine" id="cb1-4" title="4"><span class="fu">steps:</span></a>
<a class="sourceLine" id="cb1-5" title="5"><span class="kw">-</span> <span class="fu">name:</span><span class="at"> restore</span></a>
<a class="sourceLine" id="cb1-6" title="6">  <span class="fu">image:</span><span class="at"> homerovalle/drone-gcs-cache</span></a>
<a class="sourceLine" id="cb1-7" title="7">  <span class="fu">settings:</span></a>
<a class="sourceLine" id="cb1-8" title="8">    <span class="fu">pull:</span><span class="at"> </span><span class="ch">true</span></a>
<a class="sourceLine" id="cb1-9" title="9">    <span class="fu">bucket:</span><span class="at"> gcs_bucket</span></a>
<a class="sourceLine" id="cb1-10" title="10">    <span class="fu">json_key:</span></a>
<a class="sourceLine" id="cb1-11" title="11">      <span class="fu">from_secret:</span><span class="at"> gcs-access-json-key</span></a>
<a class="sourceLine" id="cb1-12" title="12">    <span class="fu">restore:</span><span class="at"> </span><span class="ch">true</span></a>
<a class="sourceLine" id="cb1-13" title="13"></a>
<a class="sourceLine" id="cb1-14" title="14"><span class="kw">-</span> <span class="fu">name:</span><span class="at"> build</span></a>
<a class="sourceLine" id="cb1-15" title="15">  <span class="fu">image:</span><span class="at"> node</span></a>
<a class="sourceLine" id="cb1-16" title="16">  <span class="fu">commands:</span></a>
<a class="sourceLine" id="cb1-17" title="17">  <span class="kw">-</span> npm install</a>
<a class="sourceLine" id="cb1-18" title="18"></a>
<a class="sourceLine" id="cb1-19" title="19"><span class="kw">-</span> <span class="fu">name:</span><span class="at"> rebuild</span></a>
<a class="sourceLine" id="cb1-20" title="20">  <span class="fu">image:</span><span class="at"> homerovalle/drone-gcs-cache</span></a>
<a class="sourceLine" id="cb1-21" title="21">  <span class="fu">settings:</span></a>
<a class="sourceLine" id="cb1-22" title="22">    <span class="fu">pull:</span><span class="at"> </span><span class="ch">true</span></a>
<a class="sourceLine" id="cb1-23" title="23">    <span class="fu">bucket:</span><span class="at"> gcs_bucket</span></a>
<a class="sourceLine" id="cb1-24" title="24">    <span class="fu">json_key:</span></a>
<a class="sourceLine" id="cb1-25" title="25">      <span class="fu">from_secret:</span><span class="at"> gcs-access-json-key</span></a>
<a class="sourceLine" id="cb1-26" title="26">    <span class="fu">rebuild:</span><span class="at"> </span><span class="ch">true</span></a>
<a class="sourceLine" id="cb1-27" title="27">    <span class="fu">mount:</span></a>
<a class="sourceLine" id="cb1-28" title="28">      <span class="kw">-</span> node_modules</a>
<a class="sourceLine" id="cb1-29" title="29">    <span class="fu">when:</span></a>
<a class="sourceLine" id="cb1-30" title="30">      <span class="fu">event:</span><span class="at"> push</span></a>
<a class="sourceLine" id="cb1-31" title="31"></a>
<a class="sourceLine" id="cb1-32" title="32"><span class="kw">-</span> <span class="fu">name:</span><span class="at"> flush</span></a>
<a class="sourceLine" id="cb1-33" title="33">  <span class="fu">image:</span><span class="at"> homerovalle/drone-gcs-cache</span></a>
<a class="sourceLine" id="cb1-34" title="34">  <span class="fu">settings:</span></a>
<a class="sourceLine" id="cb1-35" title="35">    <span class="fu">pull:</span><span class="at"> </span><span class="ch">true</span></a>
<a class="sourceLine" id="cb1-36" title="36">    <span class="fu">bucket:</span><span class="at"> gcs_bucket</span></a>
<a class="sourceLine" id="cb1-37" title="37">    <span class="fu">json_key:</span></a>
<a class="sourceLine" id="cb1-38" title="38">      <span class="fu">from_secret:</span><span class="at"> gcs-access-json-key</span></a>
<a class="sourceLine" id="cb1-39" title="39">    <span class="fu">flush:</span><span class="at"> </span><span class="ch">true</span></a>
<a class="sourceLine" id="cb1-40" title="40">    <span class="fu">flush_age:</span><span class="at"> </span><span class="dv">14</span></a></code></pre></div>
<p>これは Drone の Secret に <code>gcs-access-json-key</code> という名前で登録している場合である． ちなみに <code>flush_age</code> は，ここで設定した日付よりも前のキャッシュを削除する設定のようだ(デフォルトは30)．</p>
<h2 id="haskell-で試す">Haskell で試す</h2>
<p>ちなみに<a href="https://github.com/matsubara0507/drone-haskell/pull/3">導入したPRはこれ</a>． <code>.stack</code> と <code>.stack-work</code> をキャッシュする:</p>
<div class="sourceCode" id="cb2"><pre class="sourceCode yaml"><code class="sourceCode yaml"><a class="sourceLine" id="cb2-1" title="1"><span class="fu">kind:</span><span class="at"> pipeline</span></a>
<a class="sourceLine" id="cb2-2" title="2"><span class="fu">name:</span><span class="at"> default</span></a>
<a class="sourceLine" id="cb2-3" title="3"></a>
<a class="sourceLine" id="cb2-4" title="4"><span class="fu">steps:</span></a>
<a class="sourceLine" id="cb2-5" title="5"><span class="kw">-</span> <span class="fu">name:</span><span class="at"> restore</span></a>
<a class="sourceLine" id="cb2-6" title="6">  <span class="fu">image:</span><span class="at"> homerovalle/drone-gcs-cache</span></a>
<a class="sourceLine" id="cb2-7" title="7">  <span class="fu">settings:</span></a>
<a class="sourceLine" id="cb2-8" title="8">    ...</a>
<a class="sourceLine" id="cb2-9" title="9"></a>
<a class="sourceLine" id="cb2-10" title="10"><span class="kw">-</span> <span class="fu">name:</span><span class="at"> test</span></a>
<a class="sourceLine" id="cb2-11" title="11">  <span class="fu">image:</span><span class="at"> haskell:8.6</span></a>
<a class="sourceLine" id="cb2-12" title="12">  <span class="fu">commands:</span></a>
<a class="sourceLine" id="cb2-13" title="13">  <span class="kw">-</span> stack --no-terminal --stack-root `pwd`/.stack --install-ghc test --bench --only-dependencies</a>
<a class="sourceLine" id="cb2-14" title="14">  <span class="kw">-</span> stack --no-terminal --stack-root `pwd`/.stack test --bench --no-run-benchmarks --no-haddock-deps --pedantic</a>
<a class="sourceLine" id="cb2-15" title="15"></a>
<a class="sourceLine" id="cb2-16" title="16"><span class="kw">-</span> <span class="fu">name:</span><span class="at"> rebuild</span></a>
<a class="sourceLine" id="cb2-17" title="17">  <span class="fu">image:</span><span class="at"> homerovalle/drone-gcs-cache</span></a>
<a class="sourceLine" id="cb2-18" title="18">  <span class="fu">settings:</span></a>
<a class="sourceLine" id="cb2-19" title="19">    <span class="fu">pull:</span><span class="at"> </span><span class="ch">true</span></a>
<a class="sourceLine" id="cb2-20" title="20">    <span class="fu">bucket:</span><span class="at"> matsubara-drone-cache</span></a>
<a class="sourceLine" id="cb2-21" title="21">    <span class="fu">json_key:</span></a>
<a class="sourceLine" id="cb2-22" title="22">      <span class="fu">from_secret:</span><span class="at"> gcs-access-json-key</span></a>
<a class="sourceLine" id="cb2-23" title="23">    <span class="fu">rebuild:</span><span class="at"> </span><span class="ch">true</span></a>
<a class="sourceLine" id="cb2-24" title="24">    <span class="fu">mount:</span></a>
<a class="sourceLine" id="cb2-25" title="25">      <span class="kw">-</span> .stack</a>
<a class="sourceLine" id="cb2-26" title="26">      <span class="kw">-</span> .stack-work</a>
<a class="sourceLine" id="cb2-27" title="27">    <span class="fu">when:</span></a>
<a class="sourceLine" id="cb2-28" title="28">      <span class="fu">event:</span><span class="at"> push</span></a>
<a class="sourceLine" id="cb2-29" title="29"></a>
<a class="sourceLine" id="cb2-30" title="30"><span class="kw">-</span> <span class="fu">name:</span><span class="at"> flush</span></a>
<a class="sourceLine" id="cb2-31" title="31">  <span class="fu">image:</span><span class="at"> homerovalle/drone-gcs-cache</span></a>
<a class="sourceLine" id="cb2-32" title="32">  <span class="fu">settings:</span></a>
<a class="sourceLine" id="cb2-33" title="33">    ...</a></code></pre></div>
<p><code>restore</code> と <code>flush</code> は同じなので割愛． <code>$HOME/.stack</code> だと動作しなかったので，いっそのことカレントディレクトリに <code>.stack</code> を持ってくることにした． で，実際どれくらい早くなったのか． ビフォー:</p>
<p><img src="/assets/use-drone-cache-with-gcs/before.jpg" /></p>
<p>9分は長い． そんでアフター:</p>
<p><img src="/assets/use-drone-cache-with-gcs/after.jpg" /></p>
<p>4GB弱キャッシュされてるので，restore に結構かかってしまう． まぁ半分近くになったのでこれで良しとしましょう(GCS分のお金はかかるけど)．</p>
<h2 id="おしまい">おしまい</h2>
<p>Drone は Crone を hourly で使えるから haskell-antenna を Drone に移行してみようかしら．</p>
  </div>
</div>
</article>
]]></summary>
</entry>
<entry>
    <title>Drone 1.0 を docker-compose up する</title>
    <link href="https://matsubara0507.github.io/posts/2019-01-05-docker-compose-up-drone-1-0.html" />
    <id>https://matsubara0507.github.io/posts/2019-01-05-docker-compose-up-drone-1-0.html</id>
    <published>2019-01-05T00:00:00Z</published>
    <updated>2019-01-05T00:00:00Z</updated>
    <summary type="html"><![CDATA[<article class="post card" itemscope itemtype="http://schema.org/BlogPosting">
 <div class="card-content">
  <header class="post-header">
    <h1 class="post-title" itemprop="name headline">Drone 1.0 を docker-compose up する</h1>
    <p class="post-meta">
      <time datetime="2019-01-05" itemprop="datePublished">
        Jan 5, 2019
      </time>
      
      
      <div class="tags">
          <i class="fa fa-tags"></i> <a href="/tags/Drone.html">Drone</a> <a href="/tags/Haskell.html">Haskell</a> <a href="/tags/library.html">library</a>
      </div>
      
    </p>
  </header>

  <div class="post-content" itemprop="articleBody">
    <p>新年一発目です． <a href="https://drone.io/">Drone CI</a> が，めでたくバージョン1.0(まだ rc だけど)をリリースしてドキュメントも刷新されたんですけど，<a href="https://0-8-0.docs.drone.io/install-for-github/">0.8.x 時代にはあった <code>docker-compose</code> でのやり方</a>が書いてなかった(見つけられなかった)ので，そのメモ書きです． ちなみに経緯は，結構前に作っていた <a href="https://github.com/matsubara0507/drone-haskell">drone-haskell</a> と言う Drone CI の Haskell クライアントを Drone 1.0 に対応したくて，手元で Drone を起動しようとしたためです． めでたく，Haskell クライアントも 1.0 に対応したので，それの紹介もおまけでします．</p>
<h2 id="drone-ci">Drone CI</h2>
<p>Drone.io, Inc. というアメリカ企業が開発している継続的デリバリーを支援するためのプラットフォームである． 同種のものに Jenkins や TravisCI，CircleCI などが挙げられます(多分)． 単純な利用者側(リポジトリにCIなどを設定する側)としては，TravisCI・CircleCI に似ているが，これらとの大きな違いとして，Drone は GitHub 上に OSS として公開されている点だ:</p>
<ul>
<li><a href="https://github.com/drone/drone">drone/drone - GitHub</a></li>
</ul>
<p>あと個人的に特徴的なのが Plugin という形で様々な機能を提供している点だ(このあたりは Jenkins に似ているのかな)． 公式のページより，組織アカウントを見た方が早い気がする(これに限らずドキュメントが色々追いついてない印象):</p>
<ul>
<li><a href="https://github.com/drone-plugins">drone-plugins - GitHub</a></li>
</ul>
<h2 id="docker-compose-する">docker-compose する</h2>
<p>さて本題． ローカルで Drone サーバを <code>docker-compose up</code> して GitHub で利用する． GitHub で利用するには Drone を <a href="https://docs.drone.io/installation/github/multi-machine/#create-an-oauth-application">GitHub の OAuth App として登録する必要がある</a>． OAuth App にするにはパブリックな URL が必要なので，<a href="https://ngrok.com/">ngrok</a> を利用する:</p>
<pre><code>$ ngrok http 8000</code></pre>
<p>これで仮に <code>abcdef.ngrok.io</code> と言うドメインを得たとする． 次のような OAuth App を登録する:</p>
<p><img src="/assets/docker-compose-up-drone-1-0/oauth-app.jpg" /></p>
<p>注意点として，8.0.x のときは callback URL が <code>/authorize</code> だったのに対し，1.0 では <code>/login</code> となっている． あとは次のような <code>docker-compose.yml</code> ファイルを書けば良い:</p>
<div class="sourceCode" id="cb2"><pre class="sourceCode yaml"><code class="sourceCode yaml"><a class="sourceLine" id="cb2-1" title="1"><span class="fu">version:</span><span class="at"> </span><span class="st">&#39;2&#39;</span></a>
<a class="sourceLine" id="cb2-2" title="2"></a>
<a class="sourceLine" id="cb2-3" title="3"><span class="fu">services:</span></a>
<a class="sourceLine" id="cb2-4" title="4">  <span class="fu">drone-server:</span></a>
<a class="sourceLine" id="cb2-5" title="5">    <span class="fu">image:</span><span class="at"> drone/drone:1.0.0-rc.3</span></a>
<a class="sourceLine" id="cb2-6" title="6">    <span class="fu">ports:</span></a>
<a class="sourceLine" id="cb2-7" title="7">      <span class="kw">-</span> 8000:80</a>
<a class="sourceLine" id="cb2-8" title="8">      <span class="kw">-</span> 443:443</a>
<a class="sourceLine" id="cb2-9" title="9">      <span class="kw">-</span> <span class="dv">9000</span></a>
<a class="sourceLine" id="cb2-10" title="10">    <span class="fu">volumes:</span></a>
<a class="sourceLine" id="cb2-11" title="11">      <span class="kw">-</span> /var/run/docker.sock:/var/run/docker.sock</a>
<a class="sourceLine" id="cb2-12" title="12">      <span class="kw">-</span> .:/data</a>
<a class="sourceLine" id="cb2-13" title="13">    <span class="fu">restart:</span><span class="at"> always</span></a>
<a class="sourceLine" id="cb2-14" title="14">    <span class="fu">environment:</span></a>
<a class="sourceLine" id="cb2-15" title="15">      <span class="kw">-</span> DRONE_GITHUB_SERVER=https://github.com</a>
<a class="sourceLine" id="cb2-16" title="16">      <span class="kw">-</span> DRONE_GITHUB_CLIENT_ID=XXX</a>
<a class="sourceLine" id="cb2-17" title="17">      <span class="kw">-</span> DRONE_GITHUB_CLIENT_SECRET=YYY</a>
<a class="sourceLine" id="cb2-18" title="18">      <span class="kw">-</span> DRONE_RPC_SECRET=ZZZ</a>
<a class="sourceLine" id="cb2-19" title="19">      <span class="kw">-</span> DRONE_SERVER_HOST=abcdef.ngrok.io</a>
<a class="sourceLine" id="cb2-20" title="20">      <span class="kw">-</span> DRONE_SERVER_PROTO=https</a>
<a class="sourceLine" id="cb2-21" title="21">      <span class="kw">-</span> DRONE_TLS_AUTOCERT=true</a>
<a class="sourceLine" id="cb2-22" title="22"></a>
<a class="sourceLine" id="cb2-23" title="23">  <span class="fu">drone-agent:</span></a>
<a class="sourceLine" id="cb2-24" title="24">    <span class="fu">image:</span><span class="at"> drone/agent:1.0.0-rc.3</span></a>
<a class="sourceLine" id="cb2-25" title="25">    <span class="fu">command:</span><span class="at"> agent</span></a>
<a class="sourceLine" id="cb2-26" title="26">    <span class="fu">restart:</span><span class="at"> always</span></a>
<a class="sourceLine" id="cb2-27" title="27">    <span class="fu">depends_on:</span></a>
<a class="sourceLine" id="cb2-28" title="28">      <span class="kw">-</span> drone-server</a>
<a class="sourceLine" id="cb2-29" title="29">    <span class="fu">volumes:</span></a>
<a class="sourceLine" id="cb2-30" title="30">      <span class="kw">-</span> /var/run/docker.sock:/var/run/docker.sock</a>
<a class="sourceLine" id="cb2-31" title="31">    <span class="fu">environment:</span></a>
<a class="sourceLine" id="cb2-32" title="32">      <span class="kw">-</span> DRONE_RPC_SERVER=drone-server:9000</a>
<a class="sourceLine" id="cb2-33" title="33">      <span class="kw">-</span> DRONE_RPC_SECRET=ZZZ</a>
<a class="sourceLine" id="cb2-34" title="34">      <span class="kw">-</span> DRONE_RUNNER_CAPACITY=2</a></code></pre></div>
<p><code>XXX</code> は GitHub OAuth App の Client ID を，<code>YYY</code> には Client Secret を記述する． <code>DRONE_RPC_SECRET</code> の <code>ZZZ</code> は server と agent で同じであればなんでも良いのだが，<a href="https://docs.drone.io/installation/github/multi-machine/#create-a-shared-secret">ここ</a>に <code>openssl rand -hex 16</code> で生成すると書いてあるので，それに従う． これであとは <code>docker-compose up</code> をすれば無事起動完了だ．</p>
<pre><code>$ curl http://localhost:8000/version
{&quot;source&quot;:&quot;https://github.com/drone/drone.git&quot;,&quot;version&quot;:&quot;latest&quot;,&quot;commit&quot;:&quot;ffe3ad2aa2a30d0ba4d848c1cd0f61238b73a21c&quot;}</code></pre>
<h3 id="ちなみに">ちなみに</h3>
<p>Drone ってクラウドのフリープランがあったのに記事を書いてる時に気づいた(遅い):</p>
<pre><code>$ curl https://cloud.drone.io/version
{&quot;source&quot;:&quot;https://github.com/drone/drone.git&quot;,&quot;version&quot;:&quot;latest&quot;,&quot;commit&quot;:&quot;f16b67b54fb462d3a4b2cfa93f527d4f8d1e19af&quot;}</code></pre>
<p>わざわざ検証用に立てる必要なかったな笑 ちなみにフリープランでは5リポジトリまでと書いてあったが，試しに6個 Activate したらできた． 謎．</p>
<h2 id="おまけ-drone-haskell">おまけ: drone-haskell</h2>
<p>ここからおまけ． drone の Haskell クライアントを作った． ちゃんとバージョン 1.0 に対応させてます:</p>
<ul>
<li><a href="https://github.com/matsubara0507/drone-haskell">matsubara0507/drone-haskell - GitHub</a></li>
</ul>
<p>Drone 1.0 の RESTful API に関するドキュメントは見つからなかったので，唯一公式から出ている Drone クライアントである <a href="https://github.com/drone/drone-go">drone-go</a> のコード読んで実装した． なので，drone-go が間違ってたらこっちも間違ってる．</p>
<h3 id="利用したパッケージ">利用したパッケージ</h3>
<p>HTTP クライアントには <a href="http://hackage.haskell.org/package/req">req</a> を，レスポンス型には <a href="http://hackage.haskell.org/package/extensible">extensible</a> を利用した． このあたりの組み合わせについては昔記事に書いた:</p>
<ul>
<li><a href="/posts/2017-08-13-create-rest-api-package-with-extensible.html">extensible の拡張可能レコードを使って REST API Haskell パッケージを作る - ひげメモ</a></li>
</ul>
<p>ちなみに，管理がめんどくさい(加えて extensible は今の LTS にはまだないし)ので，Stackage や Hackage には登録していない． なので Stack でビルドするには <code>extra-deps</code> に書き加える必要がある:</p>
<div class="sourceCode" id="cb5"><pre class="sourceCode yaml"><code class="sourceCode yaml"><a class="sourceLine" id="cb5-1" title="1"><span class="fu">extra-deps:</span></a>
<a class="sourceLine" id="cb5-2" title="2"><span class="kw">-</span> extensible-0.5</a>
<a class="sourceLine" id="cb5-3" title="3"><span class="kw">-</span> <span class="fu">github:</span><span class="at"> matsubara0507/drone-haskell</span></a>
<a class="sourceLine" id="cb5-4" title="4">  <span class="fu">commit:</span><span class="at"> XXX</span></a></code></pre></div>
<h3 id="ちょっと工夫">ちょっと工夫</h3>
<ul>
<li>テストは Servant でモックサーバーを立てて行ってる
<ul>
<li>テストケースも drone-go から取ってきてる</li>
<li>https://github.com/drone/drone-go/tree/master/drone/testdata</li>
</ul></li>
<li>API のパスに <a href="http://hackage.haskell.org/package/formatting">formatting</a> を使ってみた
<ul>
<li>あくまで試しに</li>
<li><a href="https://github.com/matsubara0507/drone-haskell/blob/e735b77171eebedc35160346afec71cd7631b532/src/Drone/Client/Path.hs#L65-L102">こんな感じ</a></li>
</ul></li>
</ul>
<h2 id="おしまい">おしまい</h2>
  </div>
</div>
</article>
]]></summary>
</entry>
<entry>
    <title>Elm 0.19 で作るライフゲーム</title>
    <link href="https://matsubara0507.github.io/posts/2018-12-19-create-lifegame.html" />
    <id>https://matsubara0507.github.io/posts/2018-12-19-create-lifegame.html</id>
    <published>2018-12-19T00:00:00Z</published>
    <updated>2018-12-19T00:00:00Z</updated>
    <summary type="html"><![CDATA[<article class="post card" itemscope itemtype="http://schema.org/BlogPosting">
 <div class="card-content">
  <header class="post-header">
    <h1 class="post-title" itemprop="name headline">Elm 0.19 で作るライフゲーム</h1>
    <p class="post-meta">
      <time datetime="2018-12-19" itemprop="datePublished">
        Dec 19, 2018
      </time>
      
      
      <div class="tags">
          <i class="fa fa-tags"></i> <a href="/tags/Elm.html">Elm</a> <a href="/tags/application.html">application</a>
      </div>
      
    </p>
  </header>

  <div class="post-content" itemprop="articleBody">
    <p>本記事は <a href="https://qiita.com/advent-calendar/2018/elm2">Elm2(完全版) Advent Calendar 2018</a> の19日目の記事です．</p>
<h2 id="section"></h2>
<p>ライフゲームを Elm で作りました。 ウェブアプリケーション(?)としては，鉄板中の鉄板ですね． 完全に一発ネタ+思いつきでやったのですが，Elm の最新バージョンによる違いもあり，いくつか躓いたのでそのメモ書きです(巷の資料の多くは旧バージョン)． まぁそれでも2日ぐらいでできるので Elm は便利ですね．</p>
<p>完成品は<a href="https://matsubara0507.github.io/lifegame">コレ</a>で，コードは GitHub においてある．</p>
<ul>
<li><a href="https://github.com/matsubara0507/lifegame">matsubara0507/lifegame - GitHub</a></li>
</ul>
<h2 id="ライフゲーム">ライフゲーム</h2>
<p>ライフゲームのルールは:</p>
<ul>
<li>囲碁や将棋のような NxM マスの盤上（今回は正方形 NxN）</li>
<li>マスの状態は「生」と「死」がある</li>
<li>状態の更新の規則は以下の3つ
<ol type="1">
<li>生の状態の回りに生の状態のマスが2つか3つならば生のまま</li>
<li>死の状態の回りに生の状態のマスが3つならば生になる</li>
<li>それ以外は死の状態になる</li>
</ol></li>
</ul>
<p>ここでいう「回り」というのは，自身のマスの周囲８マスのことを指す．</p>
<h2 id="作ったもの">作ったもの</h2>
<p>一般的なライフゲームに加えて，次のようなことを実現した．</p>
<ol type="1">
<li>レンジスライダーで盤面の粒度をコントロール</li>
<li>レンジスライダーで盤面の更新間隔をコントロール</li>
<li>URLのクエリから生と死の画像を上書き</li>
<li>スマホでも動作するように Touch イベントをいい感じに</li>
</ol>
<h2 id="実装について">実装について</h2>
<p>次の記事を参考にした:</p>
<ul>
<li><a href="https://qiita.com/miyamo_madoka/items/2cad5473010292982303">[Elm]Life Gameで生命を生み出す - Qiita</a></li>
</ul>
<p>記憶に新しいのでステップバイステップにまとめる．</p>
<h3 id="盤面の描写">盤面の描写</h3>
<p>まずはモデルを考える． 適当にパッケージを探して見たが， Elm 0.19 に対応している良さげなものはなかったので自作することにした:</p>
<div class="sourceCode" id="cb1"><pre class="sourceCode haskell"><code class="sourceCode haskell"><a class="sourceLine" id="cb1-1" title="1"><span class="kw">type</span> alisa <span class="dt">Board</span> <span class="fu">=</span></a>
<a class="sourceLine" id="cb1-2" title="2">    { size <span class="fu">:</span> <span class="dt">Int</span></a>
<a class="sourceLine" id="cb1-3" title="3">    , cells <span class="fu">:</span> <span class="dt">Array</span> <span class="dt">Cell</span></a>
<a class="sourceLine" id="cb1-4" title="4">    }</a>
<a class="sourceLine" id="cb1-5" title="5"></a>
<a class="sourceLine" id="cb1-6" title="6"><span class="kw">type</span> <span class="dt">Cell</span> <span class="fu">=</span> <span class="dt">Alive</span> <span class="fu">|</span> <span class="dt">Dead</span></a></code></pre></div>
<p>今回は正方形を想定するので <code>size</code> は一辺のマス数にする． つまり初期化関数は次のようになる．</p>
<div class="sourceCode" id="cb2"><pre class="sourceCode haskell"><code class="sourceCode haskell"><a class="sourceLine" id="cb2-1" title="1">initBoard <span class="fu">:</span> <span class="dt">Int</span> <span class="ot">-&gt;</span> <span class="dt">Board</span></a>
<a class="sourceLine" id="cb2-2" title="2">initBoard n <span class="fu">=</span> { size <span class="fu">=</span> n, cells <span class="fu">=</span> Array.repeat (n <span class="fu">*</span> n) <span class="dt">Dead</span> }</a></code></pre></div>
<p>次に盤面をどうやって描写するかを考えた． テーブルでゴリゴリ書くのもいいかなと思ったが，あんまりエレガントではない気がした． ヒントを得るために GitHub をブラブラしてたら個人ページの左下の組織アカウント一覧に目が行った． HTMLを見てみると，これは直列に繋いだ <code>div</code> を適当なタイミングで折り返しているようだ． このやり方なら <code>cells</code> を <code>size</code> 個ごとに行へとする必要がなく，完全にCSSだけでなんとかなる．</p>
<div class="sourceCode" id="cb3"><pre class="sourceCode haskell"><code class="sourceCode haskell"><a class="sourceLine" id="cb3-1" title="1">main <span class="fu">=</span> viewBoard (initBoard <span class="dv">30</span>)</a>
<a class="sourceLine" id="cb3-2" title="2"></a>
<a class="sourceLine" id="cb3-3" title="3">viewBoard <span class="fu">:</span> <span class="dt">Board</span> <span class="ot">-&gt;</span> <span class="dt">Html</span> msg</a>
<a class="sourceLine" id="cb3-4" title="4">viewBoard board <span class="fu">=</span></a>
<a class="sourceLine" id="cb3-5" title="5">    <span class="kw">let</span></a>
<a class="sourceLine" id="cb3-6" title="6">        attr <span class="fu">=</span></a>
<a class="sourceLine" id="cb3-7" title="7">            [ style <span class="st">&quot;width&quot;</span> (maxLength <span class="fu">|&gt;</span> vmin)</a>
<a class="sourceLine" id="cb3-8" title="8">            , style <span class="st">&quot;height&quot;</span> (maxLength <span class="fu">|&gt;</span> vmin)</a>
<a class="sourceLine" id="cb3-9" title="9">            ]</a>
<a class="sourceLine" id="cb3-10" title="10">    <span class="kw">in</span></a>
<a class="sourceLine" id="cb3-11" title="11">    concatMapWith (Html.div attr) (viewCell board) board</a>
<a class="sourceLine" id="cb3-12" title="12"></a>
<a class="sourceLine" id="cb3-13" title="13">viewCell <span class="fu">:</span> <span class="dt">Board</span> <span class="ot">-&gt;</span> <span class="dt">Cell</span> <span class="ot">-&gt;</span> <span class="dt">Html</span> msg</a>
<a class="sourceLine" id="cb3-14" title="14">viewCell board cell <span class="fu">=</span></a>
<a class="sourceLine" id="cb3-15" title="15">    <span class="kw">let</span></a>
<a class="sourceLine" id="cb3-16" title="16">        styleAttrs <span class="fu">=</span></a>
<a class="sourceLine" id="cb3-17" title="17">            [ style <span class="st">&quot;width&quot;</span> (maxLength <span class="fu">/</span> toFloat board<span class="fu">.</span>size <span class="fu">|&gt;</span> vmin)</a>
<a class="sourceLine" id="cb3-18" title="18">            , style <span class="st">&quot;height&quot;</span> (maxLength <span class="fu">/</span> toFloat board<span class="fu">.</span>size <span class="fu">|&gt;</span> vmin)</a>
<a class="sourceLine" id="cb3-19" title="19">            , style <span class="st">&quot;margin&quot;</span> <span class="st">&quot;0&quot;</span></a>
<a class="sourceLine" id="cb3-20" title="20">            , style <span class="st">&quot;box-sizing&quot;</span> <span class="st">&quot;border-box&quot;</span></a>
<a class="sourceLine" id="cb3-21" title="21">            , style <span class="st">&quot;border&quot;</span> <span class="st">&quot;0.2vmin solid gray&quot;</span></a>
<a class="sourceLine" id="cb3-22" title="22">            ]</a>
<a class="sourceLine" id="cb3-23" title="23">    <span class="kw">in</span></a>
<a class="sourceLine" id="cb3-24" title="24">    Html.img (List.concat [ styleAttrs, [ src <span class="st">&quot;static/image/dead.png&quot;</span> ] ]) []</a>
<a class="sourceLine" id="cb3-25" title="25"></a>
<a class="sourceLine" id="cb3-26" title="26">concatMapWith <span class="fu">:</span> (<span class="dt">List</span> a <span class="ot">-&gt;</span> b) <span class="ot">-&gt;</span> (<span class="dt">Cell</span> <span class="ot">-&gt;</span> a) <span class="ot">-&gt;</span> <span class="dt">Board</span> <span class="ot">-&gt;</span> b</a>
<a class="sourceLine" id="cb3-27" title="27">concatMapWith f g board <span class="fu">=</span></a>
<a class="sourceLine" id="cb3-28" title="28">    board<span class="fu">.</span>cells</a>
<a class="sourceLine" id="cb3-29" title="29">        <span class="fu">|&gt;</span> Array.map g</a>
<a class="sourceLine" id="cb3-30" title="30">        <span class="fu">|&gt;</span> Array.toList</a>
<a class="sourceLine" id="cb3-31" title="31">        <span class="fu">|&gt;</span> f</a>
<a class="sourceLine" id="cb3-32" title="32"></a>
<a class="sourceLine" id="cb3-33" title="33">maxLength <span class="fu">:</span> <span class="dt">Float</span></a>
<a class="sourceLine" id="cb3-34" title="34">maxLength <span class="fu">=</span> <span class="fl">90.0</span></a>
<a class="sourceLine" id="cb3-35" title="35"></a>
<a class="sourceLine" id="cb3-36" title="36">vmin <span class="fu">:</span> <span class="dt">Float</span> <span class="ot">-&gt;</span> <span class="dt">String</span></a>
<a class="sourceLine" id="cb3-37" title="37">vmin n <span class="fu">=</span> <span class="dt">String</span><span class="fu">.</span>append (<span class="dt">String</span><span class="fu">.</span>fromFloat n) <span class="st">&quot;vmin&quot;</span></a></code></pre></div>
<p><a href="https://ellie-app.com/4bx9X6b6S7Ma1">結果こんな感じ</a>．</p>
<p>プログラムの中で割り算を記述するのは気がひけるが，まぁ上手く描写されているのでよしとする．</p>
<h3 id="粒度スライダーの導入">粒度スライダーの導入</h3>
<p>スライダーには次のパッケージを利用した:</p>
<ul>
<li><a href="https://package.elm-lang.org/packages/carwow/elm-slider/6.0.1/">carwow/elm-slider - Elm Packages</a></li>
</ul>
<p>今回は <a href="https://package.elm-lang.org/packages/carwow/elm-slider/6.0.1/SingleSlider">SingleSlider</a> を使いたい． SingleSlider の中に <code>Model</code> や <code>Msg</code> などが定義されているので，それらを適切に使えば良い．</p>
<div class="sourceCode" id="cb4"><pre class="sourceCode haskell"><code class="sourceCode haskell"><a class="sourceLine" id="cb4-1" title="1">main <span class="fu">=</span> Browser.element</a>
<a class="sourceLine" id="cb4-2" title="2">  { <span class="fu">init</span> <span class="fu">=</span> <span class="fu">init</span></a>
<a class="sourceLine" id="cb4-3" title="3">  , view <span class="fu">=</span> view</a>
<a class="sourceLine" id="cb4-4" title="4">  , update <span class="fu">=</span> update</a>
<a class="sourceLine" id="cb4-5" title="5">  , subscriptions <span class="fu">=</span> always Sub.none</a>
<a class="sourceLine" id="cb4-6" title="6">  }</a>
<a class="sourceLine" id="cb4-7" title="7"></a>
<a class="sourceLine" id="cb4-8" title="8"><span class="kw">type</span> alias <span class="dt">Model</span> <span class="fu">=</span></a>
<a class="sourceLine" id="cb4-9" title="9">  { board <span class="fu">:</span> <span class="dt">Board</span></a>
<a class="sourceLine" id="cb4-10" title="10">  , sizeSlider <span class="fu">:</span> <span class="dt">SingleSlider.Model</span></a>
<a class="sourceLine" id="cb4-11" title="11">  }</a>
<a class="sourceLine" id="cb4-12" title="12"></a>
<a class="sourceLine" id="cb4-13" title="13"><span class="fu">init</span> <span class="fu">:</span> () <span class="ot">-&gt;</span> (<span class="dt">Model</span>, <span class="dt">Cmd</span> <span class="dt">Msg</span>)</a>
<a class="sourceLine" id="cb4-14" title="14"><span class="fu">init</span> <span class="fu">=</span> always (initModel, Cmd.none)</a>
<a class="sourceLine" id="cb4-15" title="15"></a>
<a class="sourceLine" id="cb4-16" title="16">initModel <span class="fu">:</span> <span class="dt">Model</span></a>
<a class="sourceLine" id="cb4-17" title="17">initModel <span class="fu">=</span></a>
<a class="sourceLine" id="cb4-18" title="18">    <span class="kw">let</span></a>
<a class="sourceLine" id="cb4-19" title="19">        size <span class="fu">=</span></a>
<a class="sourceLine" id="cb4-20" title="20">            <span class="dv">30</span></a>
<a class="sourceLine" id="cb4-21" title="21"></a>
<a class="sourceLine" id="cb4-22" title="22">        defaultSlider <span class="fu">=</span></a>
<a class="sourceLine" id="cb4-23" title="23">            SingleSlider.defaultModel</a>
<a class="sourceLine" id="cb4-24" title="24"></a>
<a class="sourceLine" id="cb4-25" title="25">        sizeSlider <span class="fu">=</span></a>
<a class="sourceLine" id="cb4-26" title="26">            { defaultSlider</a>
<a class="sourceLine" id="cb4-27" title="27">                <span class="fu">|</span> <span class="fu">min</span> <span class="fu">=</span> <span class="fl">5.0</span></a>
<a class="sourceLine" id="cb4-28" title="28">                , <span class="fu">max</span> <span class="fu">=</span> <span class="fl">50.0</span></a>
<a class="sourceLine" id="cb4-29" title="29">                , step <span class="fu">=</span> <span class="fl">1.0</span></a>
<a class="sourceLine" id="cb4-30" title="30">                , value <span class="fu">=</span> size</a>
<a class="sourceLine" id="cb4-31" title="31">                , minFormatter <span class="fu">=</span> always <span class="st">&quot;&quot;</span></a>
<a class="sourceLine" id="cb4-32" title="32">                , maxFormatter <span class="fu">=</span> always <span class="st">&quot;&quot;</span></a>
<a class="sourceLine" id="cb4-33" title="33">                , currentValueFormatter <span class="fu">=</span></a>
<a class="sourceLine" id="cb4-34" title="34">                    \n _ <span class="ot">-&gt;</span> <span class="dt">String</span><span class="fu">.concat</span> [ <span class="st">&quot;1列のマス数: &quot;</span>, <span class="dt">String</span><span class="fu">.</span>fromFloat n ]</a>
<a class="sourceLine" id="cb4-35" title="35">            }</a>
<a class="sourceLine" id="cb4-36" title="36">    <span class="kw">in</span></a>
<a class="sourceLine" id="cb4-37" title="37">    { board <span class="fu">=</span> initBoard size, sizeSlider <span class="fu">=</span> sizeSlider }</a>
<a class="sourceLine" id="cb4-38" title="38"></a>
<a class="sourceLine" id="cb4-39" title="39"><span class="kw">type</span> <span class="dt">Msg</span></a>
<a class="sourceLine" id="cb4-40" title="40">    <span class="fu">=</span> <span class="dt">SizeSliderMsg</span> <span class="dt">SingleSlider.Msg</span></a>
<a class="sourceLine" id="cb4-41" title="41"></a>
<a class="sourceLine" id="cb4-42" title="42">update <span class="fu">:</span> <span class="dt">Msg</span> <span class="ot">-&gt;</span> <span class="dt">Model</span> <span class="ot">-&gt;</span> (<span class="dt">Model</span>, <span class="dt">Cmd</span> <span class="dt">Msg</span>)</a>
<a class="sourceLine" id="cb4-43" title="43">update msg model <span class="fu">=</span></a>
<a class="sourceLine" id="cb4-44" title="44">    <span class="kw">case</span> msg <span class="kw">of</span></a>
<a class="sourceLine" id="cb4-45" title="45">        <span class="dt">SizeSliderMsg</span> subMsg <span class="ot">-&gt;</span></a>
<a class="sourceLine" id="cb4-46" title="46">            <span class="kw">let</span></a>
<a class="sourceLine" id="cb4-47" title="47">                ( updatedSlider, cmd, _ ) <span class="fu">=</span></a>
<a class="sourceLine" id="cb4-48" title="48">                    SingleSlider.update subMsg model<span class="fu">.</span>sizeSlider</a>
<a class="sourceLine" id="cb4-49" title="49"></a>
<a class="sourceLine" id="cb4-50" title="50">                updatedBoard <span class="fu">=</span></a>
<a class="sourceLine" id="cb4-51" title="51">                    initBoard (<span class="fu">truncate</span> updatedSlider<span class="fu">.</span>value)</a>
<a class="sourceLine" id="cb4-52" title="52">            <span class="kw">in</span></a>
<a class="sourceLine" id="cb4-53" title="53">            ( { model <span class="fu">|</span> board <span class="fu">=</span> updatedBoard, sizeSlider <span class="fu">=</span> updatedSlider }</a>
<a class="sourceLine" id="cb4-54" title="54">            , Cmd.map <span class="dt">SizeSliderMsg</span> cmd</a>
<a class="sourceLine" id="cb4-55" title="55">            )</a>
<a class="sourceLine" id="cb4-56" title="56"></a>
<a class="sourceLine" id="cb4-57" title="57">view <span class="fu">:</span> <span class="dt">Model</span> <span class="ot">-&gt;</span> <span class="dt">Html</span> <span class="dt">Msg</span></a>
<a class="sourceLine" id="cb4-58" title="58">view model <span class="fu">=</span></a>
<a class="sourceLine" id="cb4-59" title="59">    <span class="kw">let</span></a>
<a class="sourceLine" id="cb4-60" title="60">        sliderAttrs <span class="fu">=</span></a>
<a class="sourceLine" id="cb4-61" title="61">            [ style <span class="st">&quot;margin-left&quot;</span> <span class="st">&quot;10px&quot;</span></a>
<a class="sourceLine" id="cb4-62" title="62">            , style <span class="st">&quot;margin-right&quot;</span> <span class="st">&quot;10px&quot;</span></a>
<a class="sourceLine" id="cb4-63" title="63">            ]</a>
<a class="sourceLine" id="cb4-64" title="64">    <span class="kw">in</span></a>
<a class="sourceLine" id="cb4-65" title="65">      <span class="fu">div</span> []</a>
<a class="sourceLine" id="cb4-66" title="66">        [ <span class="fu">div</span></a>
<a class="sourceLine" id="cb4-67" title="67">            [ style <span class="st">&quot;text-align&quot;</span> <span class="st">&quot;center&quot;</span></a>
<a class="sourceLine" id="cb4-68" title="68">            , style <span class="st">&quot;display&quot;</span> <span class="st">&quot;flex&quot;</span></a>
<a class="sourceLine" id="cb4-69" title="69">            , style <span class="st">&quot;justify-content&quot;</span> <span class="st">&quot;center&quot;</span></a>
<a class="sourceLine" id="cb4-70" title="70">            ]</a>
<a class="sourceLine" id="cb4-71" title="71">            [ <span class="fu">div</span> sliderAttrs</a>
<a class="sourceLine" id="cb4-72" title="72">                [ Html.map <span class="dt">SizeSliderMsg</span> (SingleSlider.view model<span class="fu">.</span>sizeSlider) ]</a>
<a class="sourceLine" id="cb4-73" title="73">            ]</a>
<a class="sourceLine" id="cb4-74" title="74">        , viewBoard model<span class="fu">.</span>board</a>
<a class="sourceLine" id="cb4-75" title="75">        ]</a></code></pre></div>
<p><a href="https://ellie-app.com/4bXck9C58qFa1">結果こんな感じ</a>．</p>
<p><code>Model</code> の初期化関数，<code>update</code> と <code>view</code> メソッドがそれぞれあって，それを呼び出して <code>map</code> するだけ． こういう風に細かいパーツを呼び出すだけでできるデザインいいですよね．</p>
<h3 id="状態と入力">状態と入力</h3>
<p>現状はまだ全セルが死んでいる状態なので，何らかの入力を受け取って好きなセルを生きてる状態にできるようにする必要がある． まずはPCだけ考えるとして，できればセルを一個一個クリックして更新する形にはしたくない(めんどくさいから)． 生状態にできるかどうかのフラグと，オンの時だけマウスオーバーで生状態にするようにしたい． なので，まずはフラグを <code>Model</code> に追加した:</p>
<div class="sourceCode" id="cb5"><pre class="sourceCode haskell"><code class="sourceCode haskell"><a class="sourceLine" id="cb5-1" title="1"><span class="kw">type</span> alias <span class="dt">Board</span> <span class="fu">=</span></a>
<a class="sourceLine" id="cb5-2" title="2">    { size <span class="fu">:</span> <span class="dt">Int</span></a>
<a class="sourceLine" id="cb5-3" title="3">    , cells <span class="fu">:</span> <span class="dt">Array</span> <span class="dt">Cell</span></a>
<a class="sourceLine" id="cb5-4" title="4">    , planting <span class="fu">:</span> <span class="dt">Bool</span> <span class="co">-- 状態の更新が可能か</span></a>
<a class="sourceLine" id="cb5-5" title="5">    }</a>
<a class="sourceLine" id="cb5-6" title="6"></a>
<a class="sourceLine" id="cb5-7" title="7">initBoard <span class="fu">:</span> <span class="dt">Int</span> <span class="ot">-&gt;</span> <span class="dt">Board</span></a>
<a class="sourceLine" id="cb5-8" title="8">initBoard n <span class="fu">=</span></a>
<a class="sourceLine" id="cb5-9" title="9">    { size <span class="fu">=</span> n</a>
<a class="sourceLine" id="cb5-10" title="10">    , cells <span class="fu">=</span> Array.repeat (n <span class="fu">*</span> n) <span class="dt">Dead</span></a>
<a class="sourceLine" id="cb5-11" title="11">    , planting <span class="fu">=</span> <span class="dt">False</span></a>
<a class="sourceLine" id="cb5-12" title="12">    }</a></code></pre></div>
<p><code>planting</code> が真のときだけマウスオーバーでセルを生状態にできる(ようにする)． したがって「<code>planting</code> のオンオフ」と「セルを生状態にする」の二つの <code>Msg</code> が必要だ:</p>
<div class="sourceCode" id="cb6"><pre class="sourceCode haskell"><code class="sourceCode haskell"><a class="sourceLine" id="cb6-1" title="1"><span class="kw">type</span> <span class="dt">BoardMsg</span></a>
<a class="sourceLine" id="cb6-2" title="2">    <span class="fu">=</span> <span class="dt">Born</span> <span class="dt">Int</span> <span class="co">-- インデックスのセルを生状態にする</span></a>
<a class="sourceLine" id="cb6-3" title="3">    <span class="fu">|</span> <span class="dt">Planting</span> <span class="co">-- 生状態への変更を可能にする</span></a>
<a class="sourceLine" id="cb6-4" title="4"></a>
<a class="sourceLine" id="cb6-5" title="5">updateBoard <span class="fu">:</span> <span class="dt">BoardMsg</span> <span class="ot">-&gt;</span> <span class="dt">Board</span> <span class="ot">-&gt;</span> ( <span class="dt">Board</span>, <span class="dt">Cmd</span> <span class="dt">BoardMsg</span> )</a>
<a class="sourceLine" id="cb6-6" title="6">updateBoard msg board <span class="fu">=</span></a>
<a class="sourceLine" id="cb6-7" title="7">    <span class="kw">case</span> msg <span class="kw">of</span></a>
<a class="sourceLine" id="cb6-8" title="8">        <span class="dt">Born</span> idx <span class="ot">-&gt;</span></a>
<a class="sourceLine" id="cb6-9" title="9">            ( born idx board, Cmd.none )</a>
<a class="sourceLine" id="cb6-10" title="10"></a>
<a class="sourceLine" id="cb6-11" title="11">        <span class="dt">Planting</span> <span class="ot">-&gt;</span></a>
<a class="sourceLine" id="cb6-12" title="12">            ( { board <span class="fu">|</span> planting <span class="fu">=</span> xor board<span class="fu">.</span>planting <span class="dt">True</span> }, Cmd.none )</a>
<a class="sourceLine" id="cb6-13" title="13"></a>
<a class="sourceLine" id="cb6-14" title="14">born <span class="fu">:</span> <span class="dt">Int</span> <span class="ot">-&gt;</span> <span class="dt">Board</span> <span class="ot">-&gt;</span> <span class="dt">Board</span></a>
<a class="sourceLine" id="cb6-15" title="15">born idx board <span class="fu">=</span></a>
<a class="sourceLine" id="cb6-16" title="16">    { board <span class="fu">|</span> cells <span class="fu">=</span> Array.set idx <span class="dt">Alive</span> board<span class="fu">.</span>cells }</a></code></pre></div>
<p>そして，盤上をクリックして <code>planting</code> のオンオフをし，マウスオーバーで生状態にするように <code>view</code> へ <code>Msg</code> を追加する:</p>
<div class="sourceCode" id="cb7"><pre class="sourceCode haskell"><code class="sourceCode haskell"><a class="sourceLine" id="cb7-1" title="1"><span class="kw">import</span> <span class="dt">Html.Events.Extra.Pointer</span> <span class="kw">as</span> <span class="dt">Pointer</span></a>
<a class="sourceLine" id="cb7-2" title="2"></a>
<a class="sourceLine" id="cb7-3" title="3">viewBoard <span class="fu">:</span> <span class="dt">Board</span> <span class="ot">-&gt;</span> <span class="dt">Html</span> <span class="dt">BoardMsg</span></a>
<a class="sourceLine" id="cb7-4" title="4">viewBoard board <span class="fu">=</span></a>
<a class="sourceLine" id="cb7-5" title="5">    <span class="kw">let</span></a>
<a class="sourceLine" id="cb7-6" title="6">        attr <span class="fu">=</span></a>
<a class="sourceLine" id="cb7-7" title="7">            [ style <span class="st">&quot;width&quot;</span> (maxLength <span class="fu">|&gt;</span> vmin)</a>
<a class="sourceLine" id="cb7-8" title="8">            , style <span class="st">&quot;height&quot;</span> (maxLength <span class="fu">|&gt;</span> vmin)</a>
<a class="sourceLine" id="cb7-9" title="9">            ]</a>
<a class="sourceLine" id="cb7-10" title="10">    <span class="kw">in</span></a>
<a class="sourceLine" id="cb7-11" title="11">    concatIndexedMapWith (Html.div attr) (viewCell board) board</a>
<a class="sourceLine" id="cb7-12" title="12"></a>
<a class="sourceLine" id="cb7-13" title="13">viewCell <span class="fu">:</span> <span class="dt">Board</span> <span class="ot">-&gt;</span> <span class="dt">Int</span> <span class="ot">-&gt;</span> <span class="dt">Cell</span> <span class="ot">-&gt;</span> <span class="dt">Html</span> <span class="dt">Msg</span></a>
<a class="sourceLine" id="cb7-14" title="14">viewCell board idx cell <span class="fu">=</span></a>
<a class="sourceLine" id="cb7-15" title="15">    <span class="kw">let</span></a>
<a class="sourceLine" id="cb7-16" title="16">        styleAttrs <span class="fu">=</span></a>
<a class="sourceLine" id="cb7-17" title="17">            [ style <span class="st">&quot;width&quot;</span> (maxLength <span class="fu">/</span> toFloat board<span class="fu">.</span>size <span class="fu">|&gt;</span> vmin)</a>
<a class="sourceLine" id="cb7-18" title="18">            , style <span class="st">&quot;height&quot;</span> (maxLength <span class="fu">/</span> toFloat board<span class="fu">.</span>size <span class="fu">|&gt;</span> vmin)</a>
<a class="sourceLine" id="cb7-19" title="19">            , style <span class="st">&quot;margin&quot;</span> <span class="st">&quot;0&quot;</span></a>
<a class="sourceLine" id="cb7-20" title="20">            , style <span class="st">&quot;box-sizing&quot;</span> <span class="st">&quot;border-box&quot;</span></a>
<a class="sourceLine" id="cb7-21" title="21">            , style <span class="st">&quot;border&quot;</span> <span class="st">&quot;0.2vmin solid gray&quot;</span></a>
<a class="sourceLine" id="cb7-22" title="22">            ]</a>
<a class="sourceLine" id="cb7-23" title="23"></a>
<a class="sourceLine" id="cb7-24" title="24">        bornAttr <span class="fu">=</span></a>
<a class="sourceLine" id="cb7-25" title="25">            <span class="kw">if</span> board<span class="fu">.</span>planting <span class="kw">then</span></a>
<a class="sourceLine" id="cb7-26" title="26">                [ Pointer.onDown (always <span class="dt">Planting</span>)</a>
<a class="sourceLine" id="cb7-27" title="27">                , Pointer.onOver (always (<span class="dt">Born</span> idx))</a>
<a class="sourceLine" id="cb7-28" title="28">                ]</a>
<a class="sourceLine" id="cb7-29" title="29"></a>
<a class="sourceLine" id="cb7-30" title="30">            <span class="kw">else</span></a>
<a class="sourceLine" id="cb7-31" title="31">                [ Pointer.onDown (always <span class="dt">Planting</span>) ]</a>
<a class="sourceLine" id="cb7-32" title="32"></a>
<a class="sourceLine" id="cb7-33" title="33">        imageLink <span class="fu">=</span></a>
<a class="sourceLine" id="cb7-34" title="34">            <span class="kw">case</span> cell <span class="kw">of</span></a>
<a class="sourceLine" id="cb7-35" title="35">                <span class="dt">Dead</span> <span class="ot">-&gt;</span></a>
<a class="sourceLine" id="cb7-36" title="36">                    [ src <span class="st">&quot;static/image/dead.png&quot;</span> ]</a>
<a class="sourceLine" id="cb7-37" title="37"></a>
<a class="sourceLine" id="cb7-38" title="38">                <span class="dt">Alive</span> <span class="ot">-&gt;</span></a>
<a class="sourceLine" id="cb7-39" title="39">                    [ src <span class="st">&quot;static/image/alive.png&quot;</span> ]</a>
<a class="sourceLine" id="cb7-40" title="40">    <span class="kw">in</span></a>
<a class="sourceLine" id="cb7-41" title="41">    Html.img (List.concat [ styleAttrs, bornAttr, imageLink ]) []</a>
<a class="sourceLine" id="cb7-42" title="42"></a>
<a class="sourceLine" id="cb7-43" title="43">concatIndexedMapWith <span class="fu">:</span> (<span class="dt">List</span> a <span class="ot">-&gt;</span> b) <span class="ot">-&gt;</span> (<span class="dt">Int</span> <span class="ot">-&gt;</span> <span class="dt">Cell</span> <span class="ot">-&gt;</span> a) <span class="ot">-&gt;</span> <span class="dt">Board</span> <span class="ot">-&gt;</span> b</a>
<a class="sourceLine" id="cb7-44" title="44">concatIndexedMapWith f g board <span class="fu">=</span></a>
<a class="sourceLine" id="cb7-45" title="45">    board<span class="fu">.</span>cells</a>
<a class="sourceLine" id="cb7-46" title="46">        <span class="fu">|&gt;</span> Array.indexedMap g</a>
<a class="sourceLine" id="cb7-47" title="47">        <span class="fu">|&gt;</span> Array.toList</a>
<a class="sourceLine" id="cb7-48" title="48">        <span class="fu">|&gt;</span> f</a></code></pre></div>
<p>マウスイベントには，おいおいスマホ対応もできるように <a href="https://package.elm-lang.org/packages/mpizenberg/elm-pointer-events/latest"><code>mpizenberg/elm-pointer-events</code></a> パッケージを利用した． あとは <code>main</code> 側を書き換えれば出来上がり:</p>
<div class="sourceCode" id="cb8"><pre class="sourceCode haskell"><code class="sourceCode haskell"><a class="sourceLine" id="cb8-1" title="1"><span class="kw">type</span> <span class="dt">Msg</span></a>
<a class="sourceLine" id="cb8-2" title="2">    <span class="fu">=</span> <span class="dt">SizeSliderMsg</span> <span class="dt">SingleSlider.Msg</span></a>
<a class="sourceLine" id="cb8-3" title="3">    <span class="fu">|</span> <span class="dt">BoardMsg</span> <span class="dt">BoardMsg</span></a>
<a class="sourceLine" id="cb8-4" title="4"></a>
<a class="sourceLine" id="cb8-5" title="5">update <span class="fu">:</span> <span class="dt">Msg</span> <span class="ot">-&gt;</span> <span class="dt">Model</span> <span class="ot">-&gt;</span> (<span class="dt">Model</span>, <span class="dt">Cmd</span> <span class="dt">Msg</span>)</a>
<a class="sourceLine" id="cb8-6" title="6">update msg model <span class="fu">=</span></a>
<a class="sourceLine" id="cb8-7" title="7">    <span class="kw">case</span> msg <span class="kw">of</span></a>
<a class="sourceLine" id="cb8-8" title="8">        <span class="dt">SizeSliderMsg</span> subMsg <span class="ot">-&gt;</span> <span class="fu">...</span></a>
<a class="sourceLine" id="cb8-9" title="9"></a>
<a class="sourceLine" id="cb8-10" title="10">        <span class="dt">BoardMsg</span> subMsg <span class="ot">-&gt;</span></a>
<a class="sourceLine" id="cb8-11" title="11">            <span class="kw">let</span></a>
<a class="sourceLine" id="cb8-12" title="12">                ( updatedBoard, cmd ) <span class="fu">=</span></a>
<a class="sourceLine" id="cb8-13" title="13">                    updateBoard subMsg model<span class="fu">.</span>board</a>
<a class="sourceLine" id="cb8-14" title="14">            <span class="kw">in</span></a>
<a class="sourceLine" id="cb8-15" title="15">            ( { model <span class="fu">|</span> board <span class="fu">=</span> updatedBoard }, Cmd.map <span class="dt">BoardMsg</span> cmd )</a>
<a class="sourceLine" id="cb8-16" title="16"></a>
<a class="sourceLine" id="cb8-17" title="17">view <span class="fu">:</span> <span class="dt">Model</span> <span class="ot">-&gt;</span> <span class="dt">Html</span> <span class="dt">Msg</span></a>
<a class="sourceLine" id="cb8-18" title="18">view model <span class="fu">=</span></a>
<a class="sourceLine" id="cb8-19" title="19">    <span class="kw">let</span></a>
<a class="sourceLine" id="cb8-20" title="20">        sliderAttrs <span class="fu">=</span></a>
<a class="sourceLine" id="cb8-21" title="21">            [ style <span class="st">&quot;margin-left&quot;</span> <span class="st">&quot;10px&quot;</span></a>
<a class="sourceLine" id="cb8-22" title="22">            , style <span class="st">&quot;margin-right&quot;</span> <span class="st">&quot;10px&quot;</span></a>
<a class="sourceLine" id="cb8-23" title="23">            ]</a>
<a class="sourceLine" id="cb8-24" title="24">    <span class="kw">in</span></a>
<a class="sourceLine" id="cb8-25" title="25">      <span class="fu">div</span> []</a>
<a class="sourceLine" id="cb8-26" title="26">        [ <span class="fu">div</span></a>
<a class="sourceLine" id="cb8-27" title="27">            [ style <span class="st">&quot;text-align&quot;</span> <span class="st">&quot;center&quot;</span></a>
<a class="sourceLine" id="cb8-28" title="28">            , style <span class="st">&quot;display&quot;</span> <span class="st">&quot;flex&quot;</span></a>
<a class="sourceLine" id="cb8-29" title="29">            , style <span class="st">&quot;justify-content&quot;</span> <span class="st">&quot;center&quot;</span></a>
<a class="sourceLine" id="cb8-30" title="30">            ]</a>
<a class="sourceLine" id="cb8-31" title="31">            [ <span class="fu">div</span> sliderAttrs</a>
<a class="sourceLine" id="cb8-32" title="32">                [ Html.map <span class="dt">SizeSliderMsg</span> (SingleSlider.view model<span class="fu">.</span>sizeSlider) ]</a>
<a class="sourceLine" id="cb8-33" title="33">            ]</a>
<a class="sourceLine" id="cb8-34" title="34">        , Html.map <span class="dt">BoardMsg</span> (viewBoard model<span class="fu">.</span>board)</a>
<a class="sourceLine" id="cb8-35" title="35">        ]</a></code></pre></div>
<p><a href="https://ellie-app.com/4c3qbgJmvZ8a1">結果こんな感じ</a>．</p>
<h3 id="更新を追加">更新を追加</h3>
<p>いよいよライフゲーム化． まず，上述した状態変化の定義を関数(<code>nextCell</code>)にする:</p>
<div class="sourceCode" id="cb9"><pre class="sourceCode haskell"><code class="sourceCode haskell"><a class="sourceLine" id="cb9-1" title="1">nextBoard <span class="fu">:</span> <span class="dt">Board</span> <span class="ot">-&gt;</span> <span class="dt">Board</span></a>
<a class="sourceLine" id="cb9-2" title="2">nextBoard board <span class="fu">=</span></a>
<a class="sourceLine" id="cb9-3" title="3">    { board <span class="fu">|</span> cells <span class="fu">=</span> Array.indexedMap (nextCell board) board<span class="fu">.</span>cells }</a>
<a class="sourceLine" id="cb9-4" title="4"></a>
<a class="sourceLine" id="cb9-5" title="5">nextCell <span class="fu">:</span> <span class="dt">Board</span> <span class="ot">-&gt;</span> <span class="dt">Int</span> <span class="ot">-&gt;</span> <span class="dt">Cell</span> <span class="ot">-&gt;</span> <span class="dt">Cell</span></a>
<a class="sourceLine" id="cb9-6" title="6">nextCell board idx cell <span class="fu">=</span></a>
<a class="sourceLine" id="cb9-7" title="7">    <span class="kw">case</span> ( countAroundAliveCell board idx, cell ) <span class="kw">of</span></a>
<a class="sourceLine" id="cb9-8" title="8">        ( <span class="dv">2</span>, <span class="dt">Alive</span> ) <span class="ot">-&gt;</span></a>
<a class="sourceLine" id="cb9-9" title="9">            <span class="dt">Alive</span></a>
<a class="sourceLine" id="cb9-10" title="10"></a>
<a class="sourceLine" id="cb9-11" title="11">        ( <span class="dv">3</span>, _ ) <span class="ot">-&gt;</span></a>
<a class="sourceLine" id="cb9-12" title="12">            <span class="dt">Alive</span></a>
<a class="sourceLine" id="cb9-13" title="13"></a>
<a class="sourceLine" id="cb9-14" title="14">        _ <span class="ot">-&gt;</span></a>
<a class="sourceLine" id="cb9-15" title="15">            <span class="dt">Dead</span></a>
<a class="sourceLine" id="cb9-16" title="16"></a>
<a class="sourceLine" id="cb9-17" title="17">countAroundAliveCell <span class="fu">:</span> <span class="dt">Board</span> <span class="ot">-&gt;</span> <span class="dt">Int</span> <span class="ot">-&gt;</span> <span class="dt">Int</span></a>
<a class="sourceLine" id="cb9-18" title="18">countAroundAliveCell board idx <span class="fu">=</span> Debug.todo <span class="st">&quot;todo&quot;</span></a></code></pre></div>
<p><code>countAroundAliveCell</code> は「回り」の生状態のセル数を返す想定． ここで少し大変． <code>cells</code> を2次元配列ではなく，1次元配列にしてCSSで折りたたむようにしてしまったので，壁際にあるかどうかの判定をインデックスと盤面のサイズから導く必要があった:</p>
<div class="sourceCode" id="cb10"><pre class="sourceCode haskell"><code class="sourceCode haskell"><a class="sourceLine" id="cb10-1" title="1">countAroundAliveCell <span class="fu">:</span> <span class="dt">Board</span> <span class="ot">-&gt;</span> <span class="dt">Int</span> <span class="ot">-&gt;</span> <span class="dt">Int</span></a>
<a class="sourceLine" id="cb10-2" title="2">countAroundAliveCell board idx <span class="fu">=</span></a>
<a class="sourceLine" id="cb10-3" title="3">    aroundCell board idx <span class="fu">|&gt;</span> List.filter ((<span class="fu">==</span>) <span class="dt">Alive</span>) <span class="fu">|&gt;</span> List.length</a>
<a class="sourceLine" id="cb10-4" title="4"></a>
<a class="sourceLine" id="cb10-5" title="5">aroundCell <span class="fu">:</span> <span class="dt">Board</span> <span class="ot">-&gt;</span> <span class="dt">Int</span> <span class="ot">-&gt;</span> <span class="dt">List</span> <span class="dt">Cell</span></a>
<a class="sourceLine" id="cb10-6" title="6">aroundCell board idx <span class="fu">=</span></a>
<a class="sourceLine" id="cb10-7" title="7">    [ <span class="kw">if</span> modBy board<span class="fu">.</span>size idx <span class="fu">==</span> <span class="dv">0</span> <span class="kw">then</span></a>
<a class="sourceLine" id="cb10-8" title="8">        [] <span class="co">-- 左端にいる場合</span></a>
<a class="sourceLine" id="cb10-9" title="9"></a>
<a class="sourceLine" id="cb10-10" title="10">      <span class="kw">else</span></a>
<a class="sourceLine" id="cb10-11" title="11">        [ idx <span class="fu">-</span> board<span class="fu">.</span>size <span class="fu">-</span> <span class="dv">1</span>, idx <span class="fu">-</span> <span class="dv">1</span>, idx <span class="fu">+</span> board<span class="fu">.</span>size <span class="fu">-</span> <span class="dv">1</span> ]</a>
<a class="sourceLine" id="cb10-12" title="12">    , [ idx <span class="fu">-</span> board<span class="fu">.</span>size, idx <span class="fu">+</span> board<span class="fu">.</span>size ] <span class="co">-- 上下は `Array.get` で `Nothing` になる</span></a>
<a class="sourceLine" id="cb10-13" title="13">    , <span class="kw">if</span> modBy board<span class="fu">.</span>size idx <span class="fu">==</span> board<span class="fu">.</span>size <span class="fu">-</span> <span class="dv">1</span> <span class="kw">then</span>        </a>
<a class="sourceLine" id="cb10-14" title="14">        [] <span class="co">-- 右端にいる場合</span></a>
<a class="sourceLine" id="cb10-15" title="15"></a>
<a class="sourceLine" id="cb10-16" title="16">      <span class="kw">else</span></a>
<a class="sourceLine" id="cb10-17" title="17">        [ idx <span class="fu">-</span> board<span class="fu">.</span>size <span class="fu">+</span> <span class="dv">1</span>, idx <span class="fu">+</span> <span class="dv">1</span>, idx <span class="fu">+</span> board<span class="fu">.</span>size <span class="fu">+</span> <span class="dv">1</span> ]</a>
<a class="sourceLine" id="cb10-18" title="18">    ]</a>
<a class="sourceLine" id="cb10-19" title="19">        <span class="fu">|&gt;</span> List.concat</a>
<a class="sourceLine" id="cb10-20" title="20">        <span class="fu">|&gt;</span> List.filterMap (\n <span class="ot">-&gt;</span> Array.get n board<span class="fu">.</span>cells)</a></code></pre></div>
<p>これで更新部分はできた． 次に <code>nextBoard</code> 関数を呼び出すタイミングを <code>subscriptions</code> と <code>Msg</code> で定義する:</p>
<div class="sourceCode" id="cb11"><pre class="sourceCode haskell"><code class="sourceCode haskell"><a class="sourceLine" id="cb11-1" title="1">main <span class="fu">=</span> Browser.element</a>
<a class="sourceLine" id="cb11-2" title="2">  { <span class="fu">init</span> <span class="fu">=</span> <span class="fu">init</span></a>
<a class="sourceLine" id="cb11-3" title="3">  , view <span class="fu">=</span> view</a>
<a class="sourceLine" id="cb11-4" title="4">  , update <span class="fu">=</span> update</a>
<a class="sourceLine" id="cb11-5" title="5">  , subscriptions <span class="fu">=</span> subscriptions</a>
<a class="sourceLine" id="cb11-6" title="6">  }</a>
<a class="sourceLine" id="cb11-7" title="7"></a>
<a class="sourceLine" id="cb11-8" title="8"><span class="kw">type</span> <span class="dt">Msg</span></a>
<a class="sourceLine" id="cb11-9" title="9">    <span class="fu">=</span> <span class="dt">SizeSliderMsg</span> <span class="dt">SingleSlider.Msg</span></a>
<a class="sourceLine" id="cb11-10" title="10">    <span class="fu">|</span> <span class="dt">BoardMsg</span> <span class="dt">BoardMsg</span></a>
<a class="sourceLine" id="cb11-11" title="11">    <span class="fu">|</span> <span class="dt">NextTick</span></a>
<a class="sourceLine" id="cb11-12" title="12"></a>
<a class="sourceLine" id="cb11-13" title="13">update <span class="fu">:</span> <span class="dt">Msg</span> <span class="ot">-&gt;</span> <span class="dt">Model</span> <span class="ot">-&gt;</span> (<span class="dt">Model</span>, <span class="dt">Cmd</span> <span class="dt">Msg</span>)</a>
<a class="sourceLine" id="cb11-14" title="14">update msg model <span class="fu">=</span></a>
<a class="sourceLine" id="cb11-15" title="15">    <span class="kw">case</span> msg <span class="kw">of</span></a>
<a class="sourceLine" id="cb11-16" title="16">        <span class="dt">SizeSliderMsg</span> subMsg <span class="ot">-&gt;</span> <span class="fu">...</span></a>
<a class="sourceLine" id="cb11-17" title="17"></a>
<a class="sourceLine" id="cb11-18" title="18">        <span class="dt">BoardMsg</span> subMsg <span class="ot">-&gt;</span> <span class="fu">...</span></a>
<a class="sourceLine" id="cb11-19" title="19"></a>
<a class="sourceLine" id="cb11-20" title="20">        <span class="dt">NextTick</span> <span class="ot">-&gt;</span></a>
<a class="sourceLine" id="cb11-21" title="21">            ( { model <span class="fu">|</span> board <span class="fu">=</span> nextBoard model<span class="fu">.</span>board }, Cmd.none )</a>
<a class="sourceLine" id="cb11-22" title="22"></a>
<a class="sourceLine" id="cb11-23" title="23">subscriptions <span class="fu">:</span> <span class="dt">Model</span> <span class="ot">-&gt;</span> <span class="dt">Sub</span> <span class="dt">Msg</span></a>
<a class="sourceLine" id="cb11-24" title="24">subscriptions model <span class="fu">=</span></a>
<a class="sourceLine" id="cb11-25" title="25">    <span class="kw">if</span> model<span class="fu">.</span>board<span class="fu">.</span>planting <span class="kw">then</span></a>
<a class="sourceLine" id="cb11-26" title="26">        Sub.none</a>
<a class="sourceLine" id="cb11-27" title="27"></a>
<a class="sourceLine" id="cb11-28" title="28">    <span class="kw">else</span></a>
<a class="sourceLine" id="cb11-29" title="29">        Time.every <span class="dv">100</span> (always <span class="dt">NextTick</span>)</a></code></pre></div>
<p><a href="https://ellie-app.com/4c7ncvvgQVqa1">結果こんな感じ</a>．</p>
<h3 id="時間スライダーの導入">時間スライダーの導入</h3>
<p>ついでに更新間隔の時間もスライダーで設定できるようにした． やり方は簡単で，<code>Model</code> にもう一つ <code>SingleSlider</code> を生やせばいい:</p>
<div class="sourceCode" id="cb12"><pre class="sourceCode haskell"><code class="sourceCode haskell"><a class="sourceLine" id="cb12-1" title="1"><span class="kw">type</span> alias <span class="dt">Model</span> <span class="fu">=</span></a>
<a class="sourceLine" id="cb12-2" title="2">  { board <span class="fu">:</span> <span class="dt">Board</span></a>
<a class="sourceLine" id="cb12-3" title="3">  , sizeSlider <span class="fu">:</span> <span class="dt">SingleSlider.Model</span></a>
<a class="sourceLine" id="cb12-4" title="4">  , tickSlider <span class="fu">:</span> <span class="dt">SingleSlider.Model</span></a>
<a class="sourceLine" id="cb12-5" title="5">  }</a>
<a class="sourceLine" id="cb12-6" title="6"></a>
<a class="sourceLine" id="cb12-7" title="7">initModel <span class="fu">:</span> <span class="dt">Model</span></a>
<a class="sourceLine" id="cb12-8" title="8">initModel <span class="fu">=</span></a>
<a class="sourceLine" id="cb12-9" title="9">    <span class="kw">let</span></a>
<a class="sourceLine" id="cb12-10" title="10">        <span class="fu">...</span></a>
<a class="sourceLine" id="cb12-11" title="11"></a>
<a class="sourceLine" id="cb12-12" title="12">        tickSlider <span class="fu">=</span></a>
<a class="sourceLine" id="cb12-13" title="13">            { defaultSlider</a>
<a class="sourceLine" id="cb12-14" title="14">                <span class="fu">|</span> <span class="fu">min</span> <span class="fu">=</span> <span class="fl">50.0</span></a>
<a class="sourceLine" id="cb12-15" title="15">                , <span class="fu">max</span> <span class="fu">=</span> <span class="fl">1000.0</span></a>
<a class="sourceLine" id="cb12-16" title="16">                , step <span class="fu">=</span> <span class="fl">10.0</span></a>
<a class="sourceLine" id="cb12-17" title="17">                , value <span class="fu">=</span> <span class="fl">100.0</span></a>
<a class="sourceLine" id="cb12-18" title="18">                , minFormatter <span class="fu">=</span> always <span class="st">&quot;&quot;</span></a>
<a class="sourceLine" id="cb12-19" title="19">                , maxFormatter <span class="fu">=</span> always <span class="st">&quot;&quot;</span></a>
<a class="sourceLine" id="cb12-20" title="20">                , currentValueFormatter <span class="fu">=</span></a>
<a class="sourceLine" id="cb12-21" title="21">                    \n _ <span class="ot">-&gt;</span> <span class="dt">String</span><span class="fu">.concat</span> [ <span class="st">&quot;更新間隔: &quot;</span>, <span class="dt">String</span><span class="fu">.</span>fromFloat n, <span class="st">&quot;ms&quot;</span> ]</a>
<a class="sourceLine" id="cb12-22" title="22">            }</a>
<a class="sourceLine" id="cb12-23" title="23">    <span class="kw">in</span></a>
<a class="sourceLine" id="cb12-24" title="24">    { board <span class="fu">=</span> initBoard size</a>
<a class="sourceLine" id="cb12-25" title="25">    , sizeSlider <span class="fu">=</span> sizeSlider</a>
<a class="sourceLine" id="cb12-26" title="26">    , tickSlider <span class="fu">=</span> tickSlider</a>
<a class="sourceLine" id="cb12-27" title="27">    }</a>
<a class="sourceLine" id="cb12-28" title="28"></a>
<a class="sourceLine" id="cb12-29" title="29"><span class="kw">type</span> <span class="dt">Msg</span></a>
<a class="sourceLine" id="cb12-30" title="30">    <span class="fu">=</span> <span class="dt">SizeSliderMsg</span> <span class="dt">SingleSlider.Msg</span></a>
<a class="sourceLine" id="cb12-31" title="31">    <span class="fu">|</span> <span class="dt">TickSliderMsg</span> <span class="dt">SingleSlider.Msg</span> <span class="co">-- 追加</span></a>
<a class="sourceLine" id="cb12-32" title="32">    <span class="fu">|</span> <span class="dt">BoardMsg</span> <span class="dt">BoardMsg</span></a>
<a class="sourceLine" id="cb12-33" title="33">    <span class="fu">|</span> <span class="dt">NextTick</span></a>
<a class="sourceLine" id="cb12-34" title="34"></a>
<a class="sourceLine" id="cb12-35" title="35">update <span class="fu">:</span> <span class="dt">Msg</span> <span class="ot">-&gt;</span> <span class="dt">Model</span> <span class="ot">-&gt;</span> (<span class="dt">Model</span>, <span class="dt">Cmd</span> <span class="dt">Msg</span>)</a>
<a class="sourceLine" id="cb12-36" title="36">update msg model <span class="fu">=</span></a>
<a class="sourceLine" id="cb12-37" title="37">    <span class="kw">case</span> msg <span class="kw">of</span></a>
<a class="sourceLine" id="cb12-38" title="38">        <span class="dt">SizeSliderMsg</span> subMsg <span class="ot">-&gt;</span> <span class="fu">...</span></a>
<a class="sourceLine" id="cb12-39" title="39"></a>
<a class="sourceLine" id="cb12-40" title="40">        <span class="dt">TickSliderMsg</span> subMsg <span class="ot">-&gt;</span></a>
<a class="sourceLine" id="cb12-41" title="41">            <span class="kw">let</span></a>
<a class="sourceLine" id="cb12-42" title="42">                ( updatedSlider, cmd, _ ) <span class="fu">=</span></a>
<a class="sourceLine" id="cb12-43" title="43">                    SingleSlider.update subMsg model<span class="fu">.</span>tickSlider</a>
<a class="sourceLine" id="cb12-44" title="44">            <span class="kw">in</span></a>
<a class="sourceLine" id="cb12-45" title="45">            ( { model <span class="fu">|</span> tickSlider <span class="fu">=</span> updatedSlider }</a>
<a class="sourceLine" id="cb12-46" title="46">            , Cmd.batch [ Cmd.map <span class="dt">TickSliderMsg</span> cmd ]</a>
<a class="sourceLine" id="cb12-47" title="47">            )</a>
<a class="sourceLine" id="cb12-48" title="48"></a>
<a class="sourceLine" id="cb12-49" title="49">        <span class="dt">BoardMsg</span> subMsg <span class="ot">-&gt;</span> <span class="fu">...</span></a>
<a class="sourceLine" id="cb12-50" title="50"></a>
<a class="sourceLine" id="cb12-51" title="51">        <span class="dt">NextTick</span> <span class="ot">-&gt;</span> <span class="fu">...</span></a>
<a class="sourceLine" id="cb12-52" title="52"></a>
<a class="sourceLine" id="cb12-53" title="53">view <span class="fu">:</span> <span class="dt">Model</span> <span class="ot">-&gt;</span> <span class="dt">Html</span> <span class="dt">Msg</span></a>
<a class="sourceLine" id="cb12-54" title="54">view model <span class="fu">=</span></a>
<a class="sourceLine" id="cb12-55" title="55">    <span class="kw">let</span></a>
<a class="sourceLine" id="cb12-56" title="56">        <span class="fu">...</span></a>
<a class="sourceLine" id="cb12-57" title="57">    <span class="kw">in</span></a>
<a class="sourceLine" id="cb12-58" title="58">      <span class="fu">div</span> []</a>
<a class="sourceLine" id="cb12-59" title="59">        [ <span class="fu">div</span></a>
<a class="sourceLine" id="cb12-60" title="60">            [ style <span class="st">&quot;text-align&quot;</span> <span class="st">&quot;center&quot;</span></a>
<a class="sourceLine" id="cb12-61" title="61">            , style <span class="st">&quot;display&quot;</span> <span class="st">&quot;flex&quot;</span></a>
<a class="sourceLine" id="cb12-62" title="62">            , style <span class="st">&quot;justify-content&quot;</span> <span class="st">&quot;center&quot;</span></a>
<a class="sourceLine" id="cb12-63" title="63">            ]</a>
<a class="sourceLine" id="cb12-64" title="64">            [ <span class="fu">div</span> sliderAttrs</a>
<a class="sourceLine" id="cb12-65" title="65">                [ Html.map <span class="dt">SizeSliderMsg</span> (SingleSlider.view model<span class="fu">.</span>sizeSlider) ]</a>
<a class="sourceLine" id="cb12-66" title="66">            , <span class="fu">div</span> sliderAttrs</a>
<a class="sourceLine" id="cb12-67" title="67">                [ Html.map <span class="dt">TickSliderMsg</span> (SingleSlider.view model<span class="fu">.</span>tickSlider) ]</a>
<a class="sourceLine" id="cb12-68" title="68">            ]</a>
<a class="sourceLine" id="cb12-69" title="69">        , Html.map <span class="dt">BoardMsg</span> (viewBoard model<span class="fu">.</span>board)</a>
<a class="sourceLine" id="cb12-70" title="70">        ]</a></code></pre></div>
<p>これでスライダーが増えた． あとは <code>subscriptions</code> のところを書き換えるだけ:</p>
<div class="sourceCode" id="cb13"><pre class="sourceCode haskell"><code class="sourceCode haskell"><a class="sourceLine" id="cb13-1" title="1">subscriptions <span class="fu">:</span> <span class="dt">Model</span> <span class="ot">-&gt;</span> <span class="dt">Sub</span> <span class="dt">Msg</span></a>
<a class="sourceLine" id="cb13-2" title="2">subscriptions model <span class="fu">=</span></a>
<a class="sourceLine" id="cb13-3" title="3">    <span class="kw">if</span> model<span class="fu">.</span>board<span class="fu">.</span>planting <span class="kw">then</span></a>
<a class="sourceLine" id="cb13-4" title="4">        Sub.none</a>
<a class="sourceLine" id="cb13-5" title="5"></a>
<a class="sourceLine" id="cb13-6" title="6">    <span class="kw">else</span></a>
<a class="sourceLine" id="cb13-7" title="7">        Time.every model<span class="fu">.</span>tickSlider<span class="fu">.</span>value (always <span class="dt">NextTick</span>)</a></code></pre></div>
<p>簡単ですね． <a href="https://ellie-app.com/4c7nNjzjy44a1">結果こんな感じ</a>．</p>
<h3 id="urlパーサー">URLパーサー</h3>
<p>生状態や死状態の画像を好きなのに変えたいなと思った． そこで，ちょうど elm/url の勉強をしたので，url のクエリから指定できるようにしようと考えた． まずは状態の画像のリンクを <code>Board</code> に持たせる:</p>
<div class="sourceCode" id="cb14"><pre class="sourceCode haskell"><code class="sourceCode haskell"><a class="sourceLine" id="cb14-1" title="1"><span class="kw">type</span> alias <span class="dt">Board</span> <span class="fu">=</span></a>
<a class="sourceLine" id="cb14-2" title="2">    { size <span class="fu">:</span> <span class="dt">Int</span></a>
<a class="sourceLine" id="cb14-3" title="3">    , cells <span class="fu">:</span> <span class="dt">Array</span> <span class="dt">Cell</span></a>
<a class="sourceLine" id="cb14-4" title="4">    , planting <span class="fu">:</span> <span class="dt">Bool</span></a>
<a class="sourceLine" id="cb14-5" title="5">    , links <span class="fu">:</span> <span class="dt">Links</span></a>
<a class="sourceLine" id="cb14-6" title="6">    }</a>
<a class="sourceLine" id="cb14-7" title="7"></a>
<a class="sourceLine" id="cb14-8" title="8"><span class="kw">type</span> alias <span class="dt">Links</span> <span class="fu">=</span></a>
<a class="sourceLine" id="cb14-9" title="9">    { alive <span class="fu">:</span> <span class="dt">String</span></a>
<a class="sourceLine" id="cb14-10" title="10">    , dead <span class="fu">:</span> <span class="dt">String</span></a>
<a class="sourceLine" id="cb14-11" title="11">    }</a>
<a class="sourceLine" id="cb14-12" title="12"></a>
<a class="sourceLine" id="cb14-13" title="13">initBoard <span class="fu">:</span> <span class="dt">Int</span> <span class="ot">-&gt;</span> <span class="dt">Links</span> <span class="ot">-&gt;</span> <span class="dt">Board</span></a>
<a class="sourceLine" id="cb14-14" title="14">initBoard n links <span class="fu">=</span></a>
<a class="sourceLine" id="cb14-15" title="15">    { size <span class="fu">=</span> n</a>
<a class="sourceLine" id="cb14-16" title="16">    , cells <span class="fu">=</span> Array.repeat (n <span class="fu">*</span> n) <span class="dt">Dead</span></a>
<a class="sourceLine" id="cb14-17" title="17">    , planting <span class="fu">=</span> <span class="dt">False</span></a>
<a class="sourceLine" id="cb14-18" title="18">    , links <span class="fu">=</span> links</a>
<a class="sourceLine" id="cb14-19" title="19">    }</a>
<a class="sourceLine" id="cb14-20" title="20"></a>
<a class="sourceLine" id="cb14-21" title="21">viewCell <span class="fu">:</span> <span class="dt">Board</span> <span class="ot">-&gt;</span> <span class="dt">Int</span> <span class="ot">-&gt;</span> <span class="dt">Cell</span> <span class="ot">-&gt;</span> <span class="dt">Html</span> <span class="dt">Msg</span></a>
<a class="sourceLine" id="cb14-22" title="22">viewCell board idx cell <span class="fu">=</span></a>
<a class="sourceLine" id="cb14-23" title="23">    <span class="kw">let</span></a>
<a class="sourceLine" id="cb14-24" title="24">        <span class="fu">...</span></a>
<a class="sourceLine" id="cb14-25" title="25"></a>
<a class="sourceLine" id="cb14-26" title="26">        imageLink <span class="fu">=</span></a>
<a class="sourceLine" id="cb14-27" title="27">            <span class="kw">case</span> cell <span class="kw">of</span></a>
<a class="sourceLine" id="cb14-28" title="28">                <span class="dt">Dead</span> <span class="ot">-&gt;</span></a>
<a class="sourceLine" id="cb14-29" title="29">                    [ src board<span class="fu">.</span>links<span class="fu">.</span>dead ]</a>
<a class="sourceLine" id="cb14-30" title="30"></a>
<a class="sourceLine" id="cb14-31" title="31">                <span class="dt">Alive</span> <span class="ot">-&gt;</span></a>
<a class="sourceLine" id="cb14-32" title="32">                    [ src board<span class="fu">.</span>links<span class="fu">.</span>alive ]</a>
<a class="sourceLine" id="cb14-33" title="33">    <span class="kw">in</span></a>
<a class="sourceLine" id="cb14-34" title="34">    Html.img (List.concat [ styleAttrs, bornAttr, imageLink ]) []</a></code></pre></div>
<p>次は URL から値を取得する． URL を取得するには <code>Browser.application</code> を使う必要がある:</p>
<div class="sourceCode" id="cb15"><pre class="sourceCode haskell"><code class="sourceCode haskell"><a class="sourceLine" id="cb15-1" title="1">main <span class="fu">=</span></a>
<a class="sourceLine" id="cb15-2" title="2">    Browser.application</a>
<a class="sourceLine" id="cb15-3" title="3">        { <span class="fu">init</span> <span class="fu">=</span> <span class="fu">init</span></a>
<a class="sourceLine" id="cb15-4" title="4">        , update <span class="fu">=</span> update</a>
<a class="sourceLine" id="cb15-5" title="5">        , view <span class="fu">=</span> view</a>
<a class="sourceLine" id="cb15-6" title="6">        , subscriptions <span class="fu">=</span> subscriptions</a>
<a class="sourceLine" id="cb15-7" title="7">        , onUrlRequest <span class="fu">=</span> always (<span class="dt">ChangeUrl</span> defaultLinks)</a>
<a class="sourceLine" id="cb15-8" title="8">        , onUrlChange <span class="fu">=</span> \url <span class="ot">-&gt;</span> <span class="dt">ChangeUrl</span> (parseUrl url)</a>
<a class="sourceLine" id="cb15-9" title="9">        }</a>
<a class="sourceLine" id="cb15-10" title="10"></a>
<a class="sourceLine" id="cb15-11" title="11"><span class="fu">init</span> <span class="fu">:</span> () <span class="ot">-&gt;</span> <span class="dt">Url</span> <span class="ot">-&gt;</span> <span class="dt">Key</span> <span class="ot">-&gt;</span> (<span class="dt">Model</span>, <span class="dt">Cmd</span> <span class="dt">Msg</span>)</a>
<a class="sourceLine" id="cb15-12" title="12"><span class="fu">init</span> _ url _ <span class="fu">=</span> (initModel url, Cmd.none)</a>
<a class="sourceLine" id="cb15-13" title="13"></a>
<a class="sourceLine" id="cb15-14" title="14">initModel <span class="fu">:</span> <span class="dt">Url</span> <span class="ot">-&gt;</span> <span class="dt">Model</span></a>
<a class="sourceLine" id="cb15-15" title="15">initModel url <span class="fu">=</span></a>
<a class="sourceLine" id="cb15-16" title="16">    <span class="kw">let</span></a>
<a class="sourceLine" id="cb15-17" title="17">        <span class="fu">...</span></a>
<a class="sourceLine" id="cb15-18" title="18">    <span class="kw">in</span></a>
<a class="sourceLine" id="cb15-19" title="19">    { board <span class="fu">=</span> initBoard size (parseUrl url)</a>
<a class="sourceLine" id="cb15-20" title="20">    , sizeSlider <span class="fu">=</span> sizeSlider</a>
<a class="sourceLine" id="cb15-21" title="21">    , tickSlider <span class="fu">=</span> tickSlider</a>
<a class="sourceLine" id="cb15-22" title="22">    }</a>
<a class="sourceLine" id="cb15-23" title="23"></a>
<a class="sourceLine" id="cb15-24" title="24">defaultLinks <span class="fu">=</span></a>
<a class="sourceLine" id="cb15-25" title="25">    { alive <span class="fu">=</span> <span class="st">&quot;static/image/alive.png&quot;</span></a>
<a class="sourceLine" id="cb15-26" title="26">    , dead <span class="fu">=</span> <span class="st">&quot;static/image/dead.png&quot;</span></a>
<a class="sourceLine" id="cb15-27" title="27">    }</a>
<a class="sourceLine" id="cb15-28" title="28"></a>
<a class="sourceLine" id="cb15-29" title="29">parseUrl <span class="fu">:</span> <span class="dt">Url</span> <span class="ot">-&gt;</span> <span class="dt">Links</span></a>
<a class="sourceLine" id="cb15-30" title="30">parseUrl url <span class="fu">=</span> Debug.todo <span class="st">&quot;parser&quot;</span></a></code></pre></div>
<p><code>.onUrlRequest</code> や <code>.onUrlChange</code> は SPA 内で URL を変更して遷移した場合に使う． 今回はおそらく不要だが適当にそれっぽい <code>Msg</code> を生やした:</p>
<div class="sourceCode" id="cb16"><pre class="sourceCode haskell"><code class="sourceCode haskell"><a class="sourceLine" id="cb16-1" title="1"><span class="kw">type</span> <span class="dt">Msg</span></a>
<a class="sourceLine" id="cb16-2" title="2">    <span class="fu">=</span> <span class="dt">SizeSliderMsg</span> <span class="dt">SingleSlider.Msg</span></a>
<a class="sourceLine" id="cb16-3" title="3">    <span class="fu">|</span> <span class="dt">TickSliderMsg</span> <span class="dt">SingleSlider.Msg</span></a>
<a class="sourceLine" id="cb16-4" title="4">    <span class="fu">|</span> <span class="dt">BoardMsg</span> <span class="dt">Board.Msg</span></a>
<a class="sourceLine" id="cb16-5" title="5">    <span class="fu">|</span> <span class="dt">NextTick</span></a>
<a class="sourceLine" id="cb16-6" title="6">    <span class="fu">|</span> <span class="dt">ChangeUrl</span> <span class="dt">Links</span></a>
<a class="sourceLine" id="cb16-7" title="7"></a>
<a class="sourceLine" id="cb16-8" title="8">update <span class="fu">:</span> <span class="dt">Msg</span> <span class="ot">-&gt;</span> <span class="dt">Model</span> <span class="ot">-&gt;</span> (<span class="dt">Model</span>, <span class="dt">Cmd</span> <span class="dt">Msg</span>)</a>
<a class="sourceLine" id="cb16-9" title="9">update msg model <span class="fu">=</span></a>
<a class="sourceLine" id="cb16-10" title="10">    <span class="kw">case</span> msg <span class="kw">of</span></a>
<a class="sourceLine" id="cb16-11" title="11">        <span class="dt">SizeSliderMsg</span> subMsg <span class="ot">-&gt;</span></a>
<a class="sourceLine" id="cb16-12" title="12">            <span class="kw">let</span></a>
<a class="sourceLine" id="cb16-13" title="13">                ( updatedSlider, cmd, _ ) <span class="fu">=</span></a>
<a class="sourceLine" id="cb16-14" title="14">                    SingleSlider.update subMsg model<span class="fu">.</span>sizeSlider</a>
<a class="sourceLine" id="cb16-15" title="15"></a>
<a class="sourceLine" id="cb16-16" title="16">                updatedBoard <span class="fu">=</span></a>
<a class="sourceLine" id="cb16-17" title="17">                    initBoard (<span class="fu">truncate</span> updatedSlider<span class="fu">.</span>value) model<span class="fu">.</span>board<span class="fu">.</span>links <span class="co">-- 追記</span></a>
<a class="sourceLine" id="cb16-18" title="18">            <span class="kw">in</span></a>
<a class="sourceLine" id="cb16-19" title="19">            ( { model <span class="fu">|</span> board <span class="fu">=</span> updatedBoard, sizeSlider <span class="fu">=</span> updatedSlider }</a>
<a class="sourceLine" id="cb16-20" title="20">            , Cmd.map <span class="dt">SizeSliderMsg</span> cmd</a>
<a class="sourceLine" id="cb16-21" title="21">            )</a>
<a class="sourceLine" id="cb16-22" title="22"></a>
<a class="sourceLine" id="cb16-23" title="23">        <span class="dt">TickSliderMsg</span> subMsg <span class="ot">-&gt;</span> <span class="fu">...</span></a>
<a class="sourceLine" id="cb16-24" title="24"></a>
<a class="sourceLine" id="cb16-25" title="25">        <span class="dt">BoardMsg</span> subMsg <span class="ot">-&gt;</span> <span class="fu">...</span></a>
<a class="sourceLine" id="cb16-26" title="26"></a>
<a class="sourceLine" id="cb16-27" title="27">        <span class="dt">NextTick</span> <span class="ot">-&gt;</span> <span class="fu">...</span></a>
<a class="sourceLine" id="cb16-28" title="28"></a>
<a class="sourceLine" id="cb16-29" title="29">        <span class="dt">ChangeUrl</span> links <span class="ot">-&gt;</span></a>
<a class="sourceLine" id="cb16-30" title="30">            <span class="kw">let</span></a>
<a class="sourceLine" id="cb16-31" title="31">                board <span class="fu">=</span></a>
<a class="sourceLine" id="cb16-32" title="32">                    model<span class="fu">.</span>board</a>
<a class="sourceLine" id="cb16-33" title="33"></a>
<a class="sourceLine" id="cb16-34" title="34">                updatedBoard <span class="fu">=</span></a>
<a class="sourceLine" id="cb16-35" title="35">                    { board <span class="fu">|</span> links <span class="fu">=</span> links }</a>
<a class="sourceLine" id="cb16-36" title="36">            <span class="kw">in</span></a>
<a class="sourceLine" id="cb16-37" title="37">            ( { model <span class="fu">|</span> board <span class="fu">=</span> updatedBoard }, Cmd.none )</a></code></pre></div>
<p>さぁいよいよ URL のパーサーだ:</p>
<div class="sourceCode" id="cb17"><pre class="sourceCode haskell"><code class="sourceCode haskell"><a class="sourceLine" id="cb17-1" title="1"><span class="kw">import</span> <span class="dt">Url</span> exposing (<span class="dt">Url</span>)</a>
<a class="sourceLine" id="cb17-2" title="2"><span class="kw">import</span> <span class="dt">Url.Parser</span> <span class="kw">as</span> <span class="dt">Url</span> exposing ((&lt;/&gt;), (&lt;?&gt;))</a>
<a class="sourceLine" id="cb17-3" title="3"><span class="kw">import</span> <span class="dt">Url.Parser.Query</span> <span class="kw">as</span> <span class="dt">UrlQuery</span></a>
<a class="sourceLine" id="cb17-4" title="4"></a>
<a class="sourceLine" id="cb17-5" title="5">parseUrl <span class="fu">:</span> <span class="dt">Url</span> <span class="ot">-&gt;</span> <span class="dt">Links</span></a>
<a class="sourceLine" id="cb17-6" title="6">parseUrl url <span class="fu">=</span></a>
<a class="sourceLine" id="cb17-7" title="7">    <span class="kw">let</span></a>
<a class="sourceLine" id="cb17-8" title="8">        queryParser <span class="fu">=</span></a>
<a class="sourceLine" id="cb17-9" title="9">            UrlQuery.map2</a>
<a class="sourceLine" id="cb17-10" title="10">                <span class="dt">Links</span></a>
<a class="sourceLine" id="cb17-11" title="11">                (UrlQuery.string <span class="st">&quot;alive&quot;</span> <span class="fu">|&gt;</span> UrlQuery.map (<span class="dt">Maybe</span><span class="fu">.</span>withDefault defaultLinks<span class="fu">.</span>alive))</a>
<a class="sourceLine" id="cb17-12" title="12">                (UrlQuery.string <span class="st">&quot;dead&quot;</span> <span class="fu">|&gt;</span> UrlQuery.map (<span class="dt">Maybe</span><span class="fu">.</span>withDefault defaultLinks<span class="fu">.</span>dead))</a>
<a class="sourceLine" id="cb17-13" title="13"></a>
<a class="sourceLine" id="cb17-14" title="14">        parser <span class="fu">=</span></a>
<a class="sourceLine" id="cb17-15" title="15">            Url.top <span class="fu">&lt;?&gt;</span> queryParser</a>
<a class="sourceLine" id="cb17-16" title="16">    <span class="kw">in</span></a>
<a class="sourceLine" id="cb17-17" title="17">    { url <span class="fu">|</span> path <span class="fu">=</span> <span class="st">&quot;&quot;</span> }</a>
<a class="sourceLine" id="cb17-18" title="18">        <span class="fu">|&gt;</span> Url.parse parser</a>
<a class="sourceLine" id="cb17-19" title="19">        <span class="fu">|&gt;</span> <span class="dt">Maybe</span><span class="fu">.</span>withDefault defaultLinks</a></code></pre></div>
<p>今回の要件ではクエリしか必要ないので <code>{ url | path = &quot;&quot; }</code> とパースする前にした． 現状の全体のコードは<a href="https://gist.github.com/matsubara0507/b3c5b33505fbe50f63c1d3242414eece">こんな感じ</a>(ellie は application を動かせない)． これで <code>https://matsubara0507.github.io/lifegame?alive=http://4.bp.blogspot.com/-_A6aKYIGbf8/UOJXnVPCmQI/AAAAAAAAKH0/CHFd0OPz0Hk/s180-c/virus_character.png</code> などで状態の画像が指定できるようになった．</p>
<h3 id="スマホ対応">スマホ対応</h3>
<p>最後にスマホでもできるようにした． 色々試行錯誤してみたが，マウスのような <code>onOver</code> を使うことはできない． マウスのように一筆書きのみたいに入力するには <code>Touch.onMove</code> を使うしかなく，このためには <code>Model</code> に <code>Touch.onMove</code> イベントで取得した値を保持させる必要があった:</p>
<div class="sourceCode" id="cb18"><pre class="sourceCode haskell"><code class="sourceCode haskell"><a class="sourceLine" id="cb18-1" title="1"><span class="kw">type</span> alias <span class="dt">Board</span> <span class="fu">=</span></a>
<a class="sourceLine" id="cb18-2" title="2">    { size <span class="fu">:</span> <span class="dt">Int</span></a>
<a class="sourceLine" id="cb18-3" title="3">    , cells <span class="fu">:</span> <span class="dt">Array</span> <span class="dt">Cell</span></a>
<a class="sourceLine" id="cb18-4" title="4">    , planting <span class="fu">:</span> <span class="dt">Bool</span></a>
<a class="sourceLine" id="cb18-5" title="5">    , links <span class="fu">:</span> <span class="dt">Links</span></a>
<a class="sourceLine" id="cb18-6" title="6">    , touchPos <span class="fu">:</span> ( <span class="dt">Float</span>, <span class="dt">Float</span> )</a>
<a class="sourceLine" id="cb18-7" title="7">    }</a>
<a class="sourceLine" id="cb18-8" title="8"></a>
<a class="sourceLine" id="cb18-9" title="9">initBoard <span class="fu">:</span> <span class="dt">Int</span> <span class="ot">-&gt;</span> <span class="dt">Links</span> <span class="ot">-&gt;</span> <span class="dt">Board</span></a>
<a class="sourceLine" id="cb18-10" title="10">initBoard n links <span class="fu">=</span></a>
<a class="sourceLine" id="cb18-11" title="11">    { size <span class="fu">=</span> n</a>
<a class="sourceLine" id="cb18-12" title="12">    , cells <span class="fu">=</span> Array.repeat (n <span class="fu">*</span> n) <span class="dt">Dead</span></a>
<a class="sourceLine" id="cb18-13" title="13">    , planting <span class="fu">=</span> <span class="dt">False</span></a>
<a class="sourceLine" id="cb18-14" title="14">    , links <span class="fu">=</span> links</a>
<a class="sourceLine" id="cb18-15" title="15">    , touchPos <span class="fu">=</span> ( <span class="dv">0</span>, <span class="dv">0</span> )</a>
<a class="sourceLine" id="cb18-16" title="16">    }</a></code></pre></div>
<p><code>.touchPos</code> を更新するために <code>BoardMsg</code> と <code>view</code> を書き換える:</p>
<div class="sourceCode" id="cb19"><pre class="sourceCode haskell"><code class="sourceCode haskell"><a class="sourceLine" id="cb19-1" title="1"><span class="kw">type</span> <span class="dt">BoardMsg</span></a>
<a class="sourceLine" id="cb19-2" title="2">    <span class="fu">=</span> <span class="dt">Born</span> <span class="dt">Int</span></a>
<a class="sourceLine" id="cb19-3" title="3">    <span class="fu">|</span> <span class="dt">Planting</span></a>
<a class="sourceLine" id="cb19-4" title="4">    <span class="fu">|</span> <span class="dt">TouchMovePos</span> ( <span class="dt">Float</span>, <span class="dt">Float</span> )</a>
<a class="sourceLine" id="cb19-5" title="5"></a>
<a class="sourceLine" id="cb19-6" title="6">updateBoard <span class="fu">:</span> <span class="dt">BoardMsg</span> <span class="ot">-&gt;</span> <span class="dt">Board</span> <span class="ot">-&gt;</span> ( <span class="dt">Board</span>, <span class="dt">Cmd</span> <span class="dt">BoardMsg</span> )</a>
<a class="sourceLine" id="cb19-7" title="7">updateBoard msg board <span class="fu">=</span></a>
<a class="sourceLine" id="cb19-8" title="8">    <span class="kw">case</span> msg <span class="kw">of</span></a>
<a class="sourceLine" id="cb19-9" title="9">        <span class="fu">...</span></a>
<a class="sourceLine" id="cb19-10" title="10"></a>
<a class="sourceLine" id="cb19-11" title="11">        <span class="dt">TouchMovePos</span> pos <span class="ot">-&gt;</span></a>
<a class="sourceLine" id="cb19-12" title="12">            ( { board <span class="fu">|</span> touchPos <span class="fu">=</span> pos }</a>
<a class="sourceLine" id="cb19-13" title="13">            , Cmd.none</a>
<a class="sourceLine" id="cb19-14" title="14">            )</a>
<a class="sourceLine" id="cb19-15" title="15"></a>
<a class="sourceLine" id="cb19-16" title="16">view <span class="fu">:</span> <span class="dt">Board</span> <span class="ot">-&gt;</span> <span class="dt">Html</span> <span class="dt">BoardMsg</span></a>
<a class="sourceLine" id="cb19-17" title="17">view board <span class="fu">=</span></a>
<a class="sourceLine" id="cb19-18" title="18">    <span class="kw">let</span></a>
<a class="sourceLine" id="cb19-19" title="19">        <span class="fu">...</span></a>
<a class="sourceLine" id="cb19-20" title="20"></a>
<a class="sourceLine" id="cb19-21" title="21">        getTouchPos event <span class="fu">=</span></a>
<a class="sourceLine" id="cb19-22" title="22">            List.head event<span class="fu">.</span>targetTouches</a>
<a class="sourceLine" id="cb19-23" title="23">                <span class="fu">|&gt;</span> <span class="dt">Maybe</span><span class="fu">.map</span> <span class="fu">.</span>clientPos</a>
<a class="sourceLine" id="cb19-24" title="24">                <span class="fu">|&gt;</span> <span class="dt">Maybe</span><span class="fu">.</span>withDefault ( <span class="dv">0</span>, <span class="dv">0</span> )</a>
<a class="sourceLine" id="cb19-25" title="25"></a>
<a class="sourceLine" id="cb19-26" title="26">        bornAttr <span class="fu">=</span></a>
<a class="sourceLine" id="cb19-27" title="27">            [ Touch.onWithOptions</a>
<a class="sourceLine" id="cb19-28" title="28">                <span class="st">&quot;touchmove&quot;</span></a>
<a class="sourceLine" id="cb19-29" title="29">                { stopPropagation <span class="fu">=</span> <span class="dt">False</span>, preventDefault <span class="fu">=</span> <span class="dt">True</span> }</a>
<a class="sourceLine" id="cb19-30" title="30">                (<span class="dt">TouchMovePos</span> <span class="fu">&lt;&lt;</span> getTouchPos)</a>
<a class="sourceLine" id="cb19-31" title="31">            ]    </a>
<a class="sourceLine" id="cb19-32" title="32">    <span class="kw">in</span></a>
<a class="sourceLine" id="cb19-33" title="33">    concatIndexedMapWith (Html.div (attr <span class="fu">++</span> bornAttr)) (viewCell board) board</a></code></pre></div>
<p>確か <code>.preventDefault</code> を <code>True</code> にするとスワイプ(?)で画面が動いてしまうのを止めてくれるらしい． さて問題はここから． <code>cells</code> を1次元配列にしてしまった弊害パート2で，この <code>.touchPos</code> からなんとかして配列のインデックスを出さなきゃいけない． 幸いなことにセル一つの大きさは相対サイズにしていたので，盤全体の実際の大きさとセル数がわかれば逆算できる． 盤全体の大きさを得るには <code>Dom.getElement</code> を使う必要があり，そのためには <code>BoardMsg</code> を追加する必要があった:</p>
<div class="sourceCode" id="cb20"><pre class="sourceCode haskell"><code class="sourceCode haskell"><a class="sourceLine" id="cb20-1" title="1"><span class="kw">type</span> <span class="dt">BoardMsg</span></a>
<a class="sourceLine" id="cb20-2" title="2">    <span class="fu">=</span> <span class="dt">Born</span> <span class="dt">Int</span></a>
<a class="sourceLine" id="cb20-3" title="3">    <span class="fu">|</span> <span class="dt">Planting</span></a>
<a class="sourceLine" id="cb20-4" title="4">    <span class="fu">|</span> <span class="dt">TouchMovePos</span> ( <span class="dt">Float</span>, <span class="dt">Float</span> )</a>
<a class="sourceLine" id="cb20-5" title="5">    <span class="fu">|</span> <span class="dt">BornWithTouch</span> (<span class="dt">Maybe</span> <span class="dt">Element</span>)</a>
<a class="sourceLine" id="cb20-6" title="6"></a>
<a class="sourceLine" id="cb20-7" title="7">update <span class="fu">:</span> <span class="dt">BoardMsg</span> <span class="ot">-&gt;</span> <span class="dt">Board</span> <span class="ot">-&gt;</span> ( <span class="dt">Board</span>, <span class="dt">Cmd</span> <span class="dt">BoardMsg</span> )</a>
<a class="sourceLine" id="cb20-8" title="8">update msg board <span class="fu">=</span></a>
<a class="sourceLine" id="cb20-9" title="9">    <span class="kw">case</span> msg <span class="kw">of</span></a>
<a class="sourceLine" id="cb20-10" title="10">        <span class="fu">...</span></a>
<a class="sourceLine" id="cb20-11" title="11"></a>
<a class="sourceLine" id="cb20-12" title="12">        <span class="dt">TouchMovePos</span> pos <span class="ot">-&gt;</span></a>
<a class="sourceLine" id="cb20-13" title="13">            ( { board <span class="fu">|</span> touchPos <span class="fu">=</span> pos }</a>
<a class="sourceLine" id="cb20-14" title="14">            , Dom.getElement <span class="st">&quot;board&quot;</span></a>
<a class="sourceLine" id="cb20-15" title="15">                <span class="fu">|&gt;</span> Task.attempt (<span class="dt">BornWithTouch</span> <span class="fu">&lt;&lt;</span> Result.toMaybe)</a>
<a class="sourceLine" id="cb20-16" title="16">            )</a>
<a class="sourceLine" id="cb20-17" title="17"></a>
<a class="sourceLine" id="cb20-18" title="18">        <span class="dt">BornWithTouch</span> <span class="dt">Nothing</span> <span class="ot">-&gt;</span></a>
<a class="sourceLine" id="cb20-19" title="19">            ( board, Cmd.none )</a>
<a class="sourceLine" id="cb20-20" title="20"></a>
<a class="sourceLine" id="cb20-21" title="21">        <span class="dt">BornWithTouch</span> (<span class="dt">Just</span> <span class="fu">elem</span>) <span class="ot">-&gt;</span></a>
<a class="sourceLine" id="cb20-22" title="22">            <span class="kw">let</span></a>
<a class="sourceLine" id="cb20-23" title="23">                <span class="co">-- 1セルの大きさ</span></a>
<a class="sourceLine" id="cb20-24" title="24">                ( px, py ) <span class="fu">=</span></a>
<a class="sourceLine" id="cb20-25" title="25">                    ( <span class="fu">elem.</span>element<span class="fu">.</span>width <span class="fu">/</span> toFloat board<span class="fu">.</span>size</a>
<a class="sourceLine" id="cb20-26" title="26">                    , <span class="fu">elem.</span>element<span class="fu">.</span>height <span class="fu">/</span> toFloat board<span class="fu">.</span>size</a>
<a class="sourceLine" id="cb20-27" title="27">                    )</a>
<a class="sourceLine" id="cb20-28" title="28"></a>
<a class="sourceLine" id="cb20-29" title="29">                ( tx, ty ) <span class="fu">=</span></a>
<a class="sourceLine" id="cb20-30" title="30">                    board<span class="fu">.</span>touchPos</a>
<a class="sourceLine" id="cb20-31" title="31"></a>
<a class="sourceLine" id="cb20-32" title="32">                <span class="co">-- タップしたところの2次元座標</span></a>
<a class="sourceLine" id="cb20-33" title="33">                ( x, y ) <span class="fu">=</span></a>
<a class="sourceLine" id="cb20-34" title="34">                    ( (tx <span class="fu">-</span> <span class="fu">elem.</span>element<span class="fu">.</span>x) <span class="fu">/</span> px <span class="fu">|&gt;</span> <span class="fu">floor</span></a>
<a class="sourceLine" id="cb20-35" title="35">                    , (ty <span class="fu">-</span> <span class="fu">elem.</span>element<span class="fu">.</span>y) <span class="fu">/</span> py <span class="fu">|&gt;</span> <span class="fu">floor</span></a>
<a class="sourceLine" id="cb20-36" title="36">                    )</a>
<a class="sourceLine" id="cb20-37" title="37">            <span class="kw">in</span></a>
<a class="sourceLine" id="cb20-38" title="38">            ( born (y <span class="fu">*</span> board<span class="fu">.</span>size <span class="fu">+</span> x) board, Cmd.none )</a></code></pre></div>
<p>これで完成． ちなみに，最初は全てのセルの <code>Dom.getElement</code> して，<code>element.width</code> を比較する全探索方式でやってみたが，遅すぎて使い物にならなかったので，逆算するようにした． まぁ多少誤差があったってもともと指でなぞってるだけなのでいいでしょう．</p>
<h2 id="section-1"></h2>
<p>ちなみに，<code>.touchPos</code> みたいな要素を盤面の <code>Model</code> に入れるべきか？って気がするが，今回はやっつけなので大目にみてください．</p>
<h1 id="おしまい">おしまい</h1>
<p>無駄にコードを貼りまくったせいで長くなってしまった． できたアプリ，意外と気に入ってます．</p>
  </div>
</div>
</article>
]]></summary>
</entry>
<entry>
    <title>GHC 8.x 勉強会に行ってきた</title>
    <link href="https://matsubara0507.github.io/posts/2018-12-18-ghc8x.html" />
    <id>https://matsubara0507.github.io/posts/2018-12-18-ghc8x.html</id>
    <published>2018-12-18T00:00:00Z</published>
    <updated>2018-12-18T00:00:00Z</updated>
    <summary type="html"><![CDATA[<article class="post card" itemscope itemtype="http://schema.org/BlogPosting">
 <div class="card-content">
  <header class="post-header">
    <h1 class="post-title" itemprop="name headline">GHC 8.x 勉強会に行ってきた</h1>
    <p class="post-meta">
      <time datetime="2018-12-18" itemprop="datePublished">
        Dec 18, 2018
      </time>
      
      
      <div class="tags">
          <i class="fa fa-tags"></i> <a href="/tags/Haskell.html">Haskell</a> <a href="/tags/event.html">event</a>
      </div>
      
    </p>
  </header>

  <div class="post-content" itemprop="articleBody">
    <p>本記事は <a href="https://qiita.com/advent-calendar/2018/haskell2">Haskell (その2) Advent Calendar 2018</a> の18日目の記事です． 空いていたのでついでに埋めました．</p>
<h2 id="section"></h2>
<p>12/7 の10-17時半ぐらいに IIJ-II で GHC8 系のバージョンアップを追う会的なイベントが企画されました． このイベントは IIJ-II の Haskell チームで発案・企画し，Haskell-jp の Slack で募集をかけていました． 定員12人かつ，平日昼間でしたが，面白そうなので有給とって行ってきた(僕は IIJ-II では無いので)． 多少クローズドな会ということもあり，せっかくなので色々と議論したことを記事に起こしておきます． 正確な情報は GHC のドキュメントを呼んでください．</p>
<h2 id="進め方">進め方</h2>
<p>GHCには<a href="https://downloads.haskell.org/~ghc/8.0.2/docs/html/users_guide/8.0.1-notes.html">こんな感じ</a>のリリースノートがある． 当日は8系のリリースノートのハイライトを追っていくという感じだった．</p>
<p>事前に一人一つぐらいは調べてきて発表する感じだったが，担当者がいない内容でも，紹介記事を引っ張ってきたりなんだりしてた．</p>
<h2 id="section-1">8.0</h2>
<p><a href="https://downloads.haskell.org/~ghc/8.0.2/docs/html/users_guide/8.0.1-notes.html">リリースノートはこれ</a>． 8.0だけめっちゃ多い． 当初は 7.12 とかにする予定だったが，あまりにも差分があったので 8 にした的な話があるとかないとか(要出典)．</p>
<h3 id="typeintype-など">TypeInType など</h3>
<ul>
<li><a href="https://downloads.haskell.org/~ghc/8.0.2/docs/html/users_guide/glasgow_exts.html#ghc-flag--XTypeInType"><code>TypeInType</code></a> 言語拡張について</li>
<li>以下3つの言語拡張も包含している
<ul>
<li>PolyKinds</li>
<li>DataKinds</li>
<li>KindSignatures</li>
</ul></li>
<li>PolyKind: 型変数のカインドが多相的になる（本来は <code>*</code>）</li>
<li>DataKinds: 定義した型をカインドとして利用できる</li>
<li>KindSignatures: カインドを明示的に指定できる</li>
<li>TypeInType:
<ul>
<li>上記全部を利用可</li>
<li>多相カインド</li>
<li>RankNTypes も追加で高階カインドも可能</li>
</ul></li>
<li>Q: 結局目指すところは？
<ul>
<li><a href="https://ghc.haskell.org/trac/ghc/wiki/DependentHaskell">Dependent Haskell</a> のマイルストーンの一部では？</li>
<li>Merging Types and Kinds</li>
</ul></li>
</ul>
<h3 id="patternsynonyms-系">PatternSynonyms 系</h3>
<ul>
<li><a href="https://downloads.haskell.org/~ghc/8.0.2/docs/html/users_guide/glasgow_exts.html#record-patsyn">Record Pattern Synonyms</a> をサポート</li>
<li>レコード型でも PatternSynonyms を利用</li>
<li><a href="https://kazu-yamamoto.hatenablog.jp/entry/20170919/1505787393">PatternSynonymsのススメ - あどけない話</a>
<ul>
<li>そもそも PatternSynonyms って？</li>
<li>PatternSynonyms それ自体は 7.8.1 から</li>
</ul></li>
<li>8.0 から export 時に <code>pattern</code> キーワードがいらなくなった
<ul>
<li>すごい助かるって意見もあれば</li>
<li>あえて明示的にすべきという意見も</li>
</ul></li>
<li>ネットワーク屋さん的にはこのパターンは本当に便利という話</li>
<li>BangPattern や ViewPattern の組み合わせ</li>
</ul>
<h3 id="deriveanyclass">DeriveAnyClass</h3>
<ul>
<li><a href="https://downloads.haskell.org/~ghc/8.0.2/docs/html/users_guide/glasgow_exts.html#derive-any-class">DeriveAnyClass</a> 言語拡張について</li>
<li>名前の通り任意の型クラスに対して <code>deriving</code> を利用する仕組みを提供</li>
<li><code>deriving</code> 可能な型クラスからデフォルト実装を定義したり</li>
</ul>
<h3 id="injective-type-families">Injective type families</h3>
<ul>
<li><a href="https://downloads.haskell.org/~ghc/8.0.2/docs/html/users_guide/glasgow_exts.html#injective-ty-fams"><code>TypeFamilyDependencies</code></a> 言語拡張について</li>
<li><a href="https://qiita.com/lotz/items/6c038698c8f04f57113a">型族が単射だと嬉しい理由 - Qiita</a></li>
<li>(書いた当人は書いてたこと忘れてた笑)</li>
</ul>
<h3 id="applicativedo">ApplicativeDo</h3>
<ul>
<li><a href="https://downloads.haskell.org/~ghc/8.0.2/docs/html/users_guide/glasgow_exts.html#applicative-do"><code>ApplicativeDo</code></a> 言語拡張について</li>
<li>do 記法が Applicative でも使える</li>
<li>だけじゃなく，do 記法が特定の条件を満たすと勝手に Applicative や Functor に脱糖してくれる
<ul>
<li>この条件がなかなか(笑)</li>
</ul></li>
</ul>
<p>なんか結構盛り上がった(笑)</p>
<h3 id="wildcards-in-data-and-type-family">Wildcards in data and type family</h3>
<p><a href="https://downloads.haskell.org/~ghc/8.0.2/docs/html/users_guide/glasgow_exts.html#wildcards-on-the-lhs-of-data-and-type-family-instances">この辺り</a>？ ちょっと何話したか忘れた．</p>
<h3 id="strict-系">Strict 系</h3>
<ul>
<li><a href="https://downloads.haskell.org/~ghc/8.0.2/docs/html/users_guide/glasgow_exts.html#strict-haskell"><code>Strict</code></a> 言語拡張について</li>
<li><a href="https://kazu-yamamoto.hatenablog.jp/entry/20151117/1447726679">Strict Haskell - あどけない話</a></li>
<li>昔から正格評価にする記法はあったが，この拡張によりデフォルトの評価戦略を切り替えれる．</li>
<li>実は逆に <code>~x</code> とすることで <code>x</code> を遅延評価できる</li>
<li>Q: パターンマッチの反駁不能パターンはどうなるんだろ？
<ul>
<li><code>~(~x)</code> のようにチルダをカッコで重ねる</li>
</ul></li>
</ul>
<h3 id="duplicate-record-fields">Duplicate record fields</h3>
<ul>
<li><a href="https://kazu-yamamoto.hatenablog.jp/entry/20160114/1452735514">重複したフィールドラベル - あどけない話</a></li>
<li>Q: <code>instance (a ~ Int) =&gt; IsLabel &quot;same&quot; (Foo -&gt; a)</code> の <code>a ~ Int</code> はなぜ必要か？
<ul>
<li><code>IsLabel &quot;same&quot; (Foo -&gt; Int)</code> ではなく</li>
<li>推論の順番を明示的にする</li>
</ul></li>
<li>Q: ボイラーテンプレートの件は進んだの？？
<ul>
<li>なんか放置されてる</li>
</ul></li>
<li>SystemF + レコード多相は死ぬ
<ul>
<li>OCaml は分けている</li>
</ul></li>
</ul>
<h3 id="ユーザ定義-typeerror">ユーザ定義 TypeError</h3>
<ul>
<li>型エラーをユーザーで定義できる？</li>
<li><a href="https://ghc.haskell.org/trac/ghc/wiki/Proposal/CustomTypeErrors">プロポーザル</a></li>
<li>どんな話したか忘れました，すいません</li>
</ul>
<h3 id="ghci-関連">GHCi 関連</h3>
<ul>
<li>本来 GHCi はコードを同一のプロセスと共通のヒープで実行する</li>
<li>それを <a href="https://downloads.haskell.org/~ghc/8.0.2/docs/html/users_guide/ghci.html#external-interpreter"><code>fexternal-interpreter</code></a> オプションでコントロールできる</li>
<li>だっけか（また細かい話は忘れました，すいません）</li>
</ul>
<h2 id="section-2">8.2</h2>
<p><a href="https://downloads.haskell.org/~ghc/8.2.2/docs/html/users_guide/8.2.1-notes.html">リリースノートはこれ</a>．</p>
<ul>
<li>Typeable mechanism, Type.Reflection</li>
<li>そういえばCUIがカラフルになったね</li>
<li>Heap 系
<ul>
<li>あんまりよく覚えてないごめんなさい</li>
</ul></li>
</ul>
<h3 id="derivingstrategies">DerivingStrategies</h3>
<ul>
<li><code>DerivingStrategies</code> 言語拡張について</li>
<li><a href="https://ghc.haskell.org/trac/ghc/wiki/Commentary/Compiler/DerivingStrategies">Commentary/Compiler/DerivingStrategies – GHC</a></li>
<li><a href="https://github.com/kakkun61/deriving-strategies-playground">kakkun 氏の資料</a></li>
<li><code>deriving</code> する時に <code>newtype</code> や <code>stock</code> などのキーワードを指定することで <code>deriving</code> の仕方をコントロールできる</li>
</ul>
<h3 id="unboxedsums">UnboxedSums</h3>
<ul>
<li><a href="https://downloads.haskell.org/~ghc/8.2.2/docs/html/users_guide/glasgow_exts.html#ghc-flag--XUnboxedSums"><code>UnboxedSums</code></a> 言語拡張について</li>
<li><a href="https://gist.github.com/maoe/e5888fad16a190a9c7cf58b8bedb1d04">maoe 氏の資料</a></li>
</ul>
<h3 id="compact-regions">Compact Regions</h3>
<ul>
<li><a href="https://github.com/ezyang/compact">ezyang/compact - GitHub</a></li>
<li>処理系によってGCされないデータ領域</li>
<li>インターフェースは充実してる</li>
<li>ただしデータの追加しかできない（書き換えは不可）</li>
<li>Q: 何に使える？
<ul>
<li>強大な辞書とか？</li>
<li>設定ファイルとか？（巨大なら）</li>
<li>NGワード集とか？</li>
</ul></li>
</ul>
<p>GHC8.x 勉強会のあとに記事にしてくれた:</p>
<ul>
<li><a href="https://qiita.com/ruicc/items/c955e794c5dc74c4cb58">Compact Regionsについて軽く - Qiita</a></li>
</ul>
<h3 id="backpack">Backpack</h3>
<ul>
<li><a href="https://ghc.haskell.org/trac/ghc/wiki/Backpack">Backpack – GHC</a></li>
<li>雑にいうと: ML系のファンクターのようなより強力なモジュールシステム</li>
<li>モジュールのインターフェースと実装を分離できる</li>
<li><a href="https://matsubara0507.github.io/posts/2017-12-12-backpack-memo.html">Haskell Backpack 覚え書き - ひげメモ</a>
<ul>
<li>自分の記事だけど1年近く前で覚えてない(笑)</li>
</ul></li>
<li>Q: どんな時に有用？
<ul>
<li>本質的には型クラスと同じ用途のはず</li>
<li>ただし型に依存しない（型クラスは型によって実装をディスパッチ）</li>
<li>不自然な <code>Proxy a</code> を渡さなくていい（苦肉の策でそういう実装をしている型クラスがある）</li>
</ul></li>
<li>そういえば最近 <a href="https://github.com/kowainik/containers-backpack">contains の Backpack 版</a>がでた</li>
</ul>
<p>作者さんが忙しくて Stack への適用を断念したため，なかなか浸透しない． 今「Stack への適用をやりたい」という人が現れたが時間がかかりそう．</p>
<h3 id="脱線-各位リンカどうしてるの">脱線: 各位リンカどうしてるの？</h3>
<p>kazu yamamoto 氏が GHC 8.6 になってから(だっけ？)リンカ周りで動作しなくて困ってるらしい(OS は Mac)． 僕は適当にやってて困ったことないのでよくわからない．</p>
<p>ちなみに GHC 8.6.3 で無事動いたらしい:</p>
<blockquote class="twitter-tweet" data-lang="ja">
<p lang="ja" dir="ltr">
吉報：GHC 8.6.3 は macOS で問題なく使えるようになりました！
</p>
— 山本和彦 (<span class="citation" data-cites="kazu_yamamoto">@kazu_yamamoto</span>) <a href="https://twitter.com/kazu_yamamoto/status/1072030847799255040?ref_src=twsrc%5Etfw">2018年12月10日</a>
</blockquote>
<script async src="https://platform.twitter.com/widgets.js" charset="utf-8"></script>
<h2 id="section-3">8.4</h2>
<p><a href="https://downloads.haskell.org/~ghc/8.4.4/docs/html/users_guide/8.4.1-notes.html">リリースノートはこれ</a>．</p>
<p>そういえば，8.4.4 は 8.6 系が出てから出て，ちゃんとバグフィックス出すんだと感心した的な話をした．</p>
<h3 id="semigroup-monoid-proposal">Semigroup-Monoid Proposal</h3>
<ul>
<li><code>Monoid</code> にサブクラスとして <code>Semigroup</code> を持たせる
<ul>
<li>その方が数学的に自然</li>
</ul></li>
<li><a href="https://kazu-yamamoto.hatenablog.jp/entry/20180306/1520314185">あなたの知らないSemigroupの世界 - あどけない話</a></li>
<li>前のバージョンアから <code>-Wnoncanonical-monoid-instances</code> などの警告を付け足して段階的にやっている
<ul>
<li>しかし <code>-Wall</code> に含まれてないので気づかず</li>
<li>なんか 8.4 で急にエラーに</li>
</ul></li>
<li>ちなみに以降は <code>Monoid</code> をインポートしなくても <code>(&lt;&gt;)</code> が使える</li>
</ul>
<h3 id="monadfail-と-no-return">MonadFail と no return</h3>
<p>ここは脱線．</p>
<ul>
<li><a href="https://wiki.haskell.org/MonadFail_Proposal">MonadFail Proposal - HaskellWiki</a></li>
<li><code>Monad</code> には <code>fail</code> が定義されている
<ul>
<li>が <code>error</code> などを利用している残念な実装もある</li>
</ul></li>
<li><code>MonadFail</code> という型クラスで切り出す</li>
<li><code>-Wnoncanonical-monadfail-instances</code> ができた？</li>
<li>8.6: <a href="https://downloads.haskell.org/~ghc/latest/docs/html/users_guide/glasgow_exts.html#extension-MonadFailDesugaring"><code>MonadFailDesugaring</code></a> 言語拡張がデフォルトに
<ul>
<li>do 記法の <code>fail</code> への脱糖が <code>MonadFail</code> のものになる</li>
</ul></li>
</ul>
<h2 id="section-4">8.6</h2>
<p><a href="https://downloads.haskell.org/~ghc/latest/docs/html/users_guide/8.6.1-notes.html">リリースノートはこれ</a>．</p>
<h3 id="quantifiedconstraints">QuantifiedConstraints</h3>
<ul>
<li><a href="https://downloads.haskell.org/~ghc/latest/docs/html/users_guide/glasgow_exts.html#extension-QuantifiedConstraints">QuantifiedConstraints</a> 言語拡張を追加</li>
<li>インスタンスの定義に量化が使える
<ul>
<li>例: <code>instance (Eq a, forall b. (Eq b) =&gt; Eq (f b)) =&gt; Eq (Rose f a)</code></li>
</ul></li>
<li><a href="http://the.igreque.info/slides/2018-12-07-ghc8x.html">igrap 氏の資料</a></li>
<li>Q: Constraint のシノニムでも使える？
<ul>
<li>無理だった orz</li>
</ul></li>
</ul>
<h3 id="derivingvia">DerivingVia</h3>
<ul>
<li><a href="https://downloads.haskell.org/~ghc/latest/docs/html/users_guide/glasgow_exts.html#extension-DerivingVia"><code>DerivingVia</code></a> 言語拡張について</li>
<li><code>via</code> キーワードを使ってインスタンスを明示的に選択できるようになる</li>
<li><a href="https://github.com/kayhide/try-ghc86">kayhide 氏の資料</a>
<ul>
<li>QuickCheck の例</li>
<li>テストの実装を Via で定義</li>
</ul></li>
<li>わかりやすい<a href="https://speakerdeck.com/konn/ben-dang-hasugoi-newtype">スライド</a>
<ul>
<li>後半の方</li>
<li>タプルの例</li>
</ul></li>
</ul>
<h3 id="plugin-mechanism">Plugin mechanism</h3>
<p>(誰も調べてはない) ちょうど記事があった</p>
<ul>
<li><a href="https://qiita.com/waddlaw/items/65b57517f105fcbbe724">GHC Source Plugin 作ってみた - Qiita</a></li>
</ul>
<p>終わった後の雑談で，Scala には似たような機能(Scala Compiler Plugins?)が既にあるので，真似するといいとかなんとか．</p>
<h3 id="valid-hole-fits">Valid hole fits</h3>
<ul>
<li><a href="https://wiki.haskell.org/GHC/Typed_holes">Type holes</a> という機能についての拡張
<ul>
<li><a href="https://haskell.jp/blog/posts/2017/07-TypedHoles.html">Type Hole については Haskell-jp に記事がある</a></li>
</ul></li>
<li><a href="https://downloads.haskell.org/~ghc/latest/docs/html/users_guide/glasgow_exts.html#typed-hole-valid-hole-fits">コンパイルフラグ</a>で type Holes での推論アルゴリズム(?)のコントロールができるようになった(って感じかな)</li>
</ul>
<h3 id="シンタックスの言語拡張">シンタックスの言語拡張</h3>
<ul>
<li>数値リテラルに <code>_</code> が使える: <code>10_000_000</code> とか</li>
<li><code>do</code> 記法の前に <code>$</code> などがいらなくなる: <code>\x -&gt; do ...</code> とか</li>
</ul>
<h1 id="おしまい">おしまい</h1>
<p>時間経ちすぎてめっちゃ適当になってしまった． すいません． ただ，めっちゃ楽しかった．</p>
  </div>
</div>
</article>
]]></summary>
</entry>
<entry>
    <title>詳解 elm/url !!</title>
    <link href="https://matsubara0507.github.io/posts/2018-12-11-detail-elm-url.html" />
    <id>https://matsubara0507.github.io/posts/2018-12-11-detail-elm-url.html</id>
    <published>2018-12-11T00:00:00Z</published>
    <updated>2018-12-11T00:00:00Z</updated>
    <summary type="html"><![CDATA[<article class="post card" itemscope itemtype="http://schema.org/BlogPosting">
 <div class="card-content">
  <header class="post-header">
    <h1 class="post-title" itemprop="name headline">詳解 elm/url !!</h1>
    <p class="post-meta">
      <time datetime="2018-12-11" itemprop="datePublished">
        Dec 11, 2018
      </time>
      
      
      <div class="tags">
          <i class="fa fa-tags"></i> <a href="/tags/Elm.html">Elm</a>
      </div>
      
    </p>
  </header>

  <div class="post-content" itemprop="articleBody">
    <p>本記事は <a href="https://qiita.com/advent-calendar/2018/elm">Elm Advent Calendar 2018</a> の11日目の記事です． elm-jp の Discord で突如無茶振りされたので頑張ります．</p>
<h2 id="elmurl">elm/url</h2>
<p><a href="https://package.elm-lang.org/packages/elm/url/1.0.0/">elm/url</a> は Elm 0.19 で刷新されたパッケージ群にしれっと混ざってきた URL に関するパッケージ． <a href="https://package.elm-lang.org/packages/elm/browser/latest/Browser#application">Browser.application</a> でも使われているのでみなさんも頑張って使えるようになりましょう．</p>
<p>ちなみに本記事では ver1.0.0 の elm/url を想定している．</p>
<h2 id="url-の型">Url の型</h2>
<p>こんな風に定義されている:</p>
<div class="sourceCode" id="cb1"><pre class="sourceCode haskell"><code class="sourceCode haskell"><a class="sourceLine" id="cb1-1" title="1"><span class="kw">type</span> alias <span class="dt">Url</span> <span class="fu">=</span></a>
<a class="sourceLine" id="cb1-2" title="2">    { protocol <span class="fu">:</span> <span class="dt">Protocol</span></a>
<a class="sourceLine" id="cb1-3" title="3">    , host <span class="fu">:</span> <span class="dt">String</span></a>
<a class="sourceLine" id="cb1-4" title="4">    , port_ <span class="fu">:</span> <span class="dt">Maybe</span> <span class="dt">Int</span></a>
<a class="sourceLine" id="cb1-5" title="5">    , path <span class="fu">:</span> <span class="dt">String</span></a>
<a class="sourceLine" id="cb1-6" title="6">    , query <span class="fu">:</span> <span class="dt">Maybe</span> <span class="dt">String</span></a>
<a class="sourceLine" id="cb1-7" title="7">    , fragment <span class="fu">:</span> <span class="dt">Maybe</span> <span class="dt">String</span></a>
<a class="sourceLine" id="cb1-8" title="8">    }</a>
<a class="sourceLine" id="cb1-9" title="9"></a>
<a class="sourceLine" id="cb1-10" title="10"><span class="kw">type</span> <span class="dt">Protocol</span> <span class="fu">=</span> <span class="dt">Http</span> <span class="fu">|</span> <span class="dt">Https</span></a></code></pre></div>
<p>超絶わかりやすい ASCII アートまでありエヴァン様神って感じ:</p>
<pre><code>  https://example.com:8042/over/there?name=ferret#nose
  \___/   \______________/\_________/ \_________/ \__/
    |            |            |            |        |
  scheme     authority       path        query   fragment</code></pre>
<p><code>host</code> は <code>example.com</code> の部分で <code>port_</code> は <code>8042</code> の部分． 試しに REPL で <code>Url.fromString</code> してみよう:</p>
<div class="sourceCode" id="cb3"><pre class="sourceCode haskell"><code class="sourceCode haskell"><a class="sourceLine" id="cb3-1" title="1"><span class="fu">&gt;</span> <span class="kw">import</span> <span class="dt">Url</span></a>
<a class="sourceLine" id="cb3-2" title="2"><span class="fu">&gt;</span> Url.fromString <span class="st">&quot;https://example.com:8042/over/there?name=ferret#nose&quot;</span></a>
<a class="sourceLine" id="cb3-3" title="3"><span class="dt">Just</span> { fragment <span class="fu">=</span> <span class="dt">Just</span> <span class="st">&quot;nose&quot;</span>, host <span class="fu">=</span> <span class="st">&quot;example.com&quot;</span>, path <span class="fu">=</span> <span class="st">&quot;/over/there&quot;</span>, port_ <span class="fu">=</span> <span class="dt">Just</span> <span class="dv">8042</span>, protocol <span class="fu">=</span> <span class="dt">Https</span>, query <span class="fu">=</span> <span class="dt">Just</span> <span class="st">&quot;name=ferret&quot;</span> }</a>
<a class="sourceLine" id="cb3-4" title="4">    <span class="fu">:</span> <span class="dt">Maybe</span> <span class="dt">Url.Url</span></a></code></pre></div>
<h2 id="url.parser-の使い方">Url.Parser の使い方</h2>
<p>さて，ここからが本番． <code>Url.Parser</code> モジュールを利用して <code>Browser.application</code> などから受け取った URL をパースして，任意の型に変換するパーサーを記述する．</p>
<h3 id="パーサーの例">パーサーの例</h3>
<p>次のような型にパースするパーサーを記述する:</p>
<div class="sourceCode" id="cb4"><pre class="sourceCode haskell"><code class="sourceCode haskell"><a class="sourceLine" id="cb4-1" title="1"><span class="kw">type</span> alias <span class="dt">Post</span> <span class="fu">=</span></a>
<a class="sourceLine" id="cb4-2" title="2">  { <span class="fu">id</span> <span class="fu">:</span> <span class="dt">Int</span></a>
<a class="sourceLine" id="cb4-3" title="3">  , name <span class="fu">:</span> <span class="dt">Maybe</span> <span class="dt">String</span></a>
<a class="sourceLine" id="cb4-4" title="4">  }</a></code></pre></div>
<p>入力には <code>http://localhost/hoge/1234?name=fuga</code> URL というのを想定している．</p>
<div class="sourceCode" id="cb5"><pre class="sourceCode haskell"><code class="sourceCode haskell"><a class="sourceLine" id="cb5-1" title="1"><span class="kw">import</span> <span class="dt">Url.Parser</span> <span class="kw">as</span> <span class="dt">Url</span> exposing ((&lt;/&gt;), (&lt;?&gt;))</a>
<a class="sourceLine" id="cb5-2" title="2"><span class="kw">import</span> <span class="dt">Url.Parser.Query</span> <span class="kw">as</span> <span class="dt">Query</span></a>
<a class="sourceLine" id="cb5-3" title="3"></a>
<a class="sourceLine" id="cb5-4" title="4">parser1 <span class="fu">:</span> <span class="dt">Url.Parser</span> (<span class="dt">Post</span> <span class="ot">-&gt;</span> a) a</a>
<a class="sourceLine" id="cb5-5" title="5">parser1 <span class="fu">=</span></a>
<a class="sourceLine" id="cb5-6" title="6">  Url.map <span class="dt">Post</span> (Url.s <span class="st">&quot;hoge&quot;</span> <span class="fu">&lt;/&gt;</span> Url.string <span class="fu">&lt;?&gt;</span> Query.string <span class="st">&quot;name&quot;</span>)</a></code></pre></div>
<p>これを使ってみると:</p>
<div class="sourceCode" id="cb6"><pre class="sourceCode haskell"><code class="sourceCode haskell"><a class="sourceLine" id="cb6-1" title="1"><span class="fu">&gt;</span> Url.fromString <span class="st">&quot;http://localhost/hoge/1234?name=fuga&quot;</span> <span class="fu">|&gt;</span> <span class="dt">Maybe</span><span class="fu">.</span>andThen (Url.parse parser1)</a>
<a class="sourceLine" id="cb6-2" title="2"><span class="dt">Just</span> { <span class="fu">id</span> <span class="fu">=</span> <span class="dv">1234</span>, name <span class="fu">=</span> <span class="dt">Just</span> <span class="st">&quot;fuga&quot;</span> }</a>
<a class="sourceLine" id="cb6-3" title="3">    <span class="fu">:</span> <span class="dt">Maybe</span> <span class="dt">Post</span></a></code></pre></div>
<h3 id="基本的な関数と型">基本的な関数と型</h3>
<p>まずは肝となる <code>Url.parse</code> 関数の型を見てみる:</p>
<div class="sourceCode" id="cb7"><pre class="sourceCode haskell"><code class="sourceCode haskell"><a class="sourceLine" id="cb7-1" title="1">parse <span class="fu">:</span> <span class="dt">Parser</span> (a <span class="ot">-&gt;</span> a) a <span class="ot">-&gt;</span> <span class="dt">Url</span> <span class="ot">-&gt;</span> <span class="dt">Maybe</span> a</a></code></pre></div>
<p><code>Parser a b</code> というのがパーサーの型だ(<code>a</code> と <code>b</code> が何を意味しているかは後述，無論 <code>a</code> と <code>b</code> が同じでもいい)． <code>Parser (a -&gt; a) a</code> という型(この <code>a</code> は全て同じ型)のパーサーを与えて <code>Url</code> という入力を食わせることで <code>Maybe a</code> という結果を受け取れる． 途中でパース失敗した場合は <code>Nothing</code> が返り，成功すると <code>Just a</code> の値が返る．</p>
<h2 id="section"></h2>
<p>次のような関数を組み合わせて，パーサーを構築する:</p>
<div class="sourceCode" id="cb8"><pre class="sourceCode haskell"><code class="sourceCode haskell"><a class="sourceLine" id="cb8-1" title="1">string <span class="fu">:</span> <span class="dt">Parser</span> (<span class="dt">String</span> <span class="ot">-&gt;</span> a) a</a>
<a class="sourceLine" id="cb8-2" title="2">int    <span class="fu">:</span> <span class="dt">Parser</span> (<span class="dt">Int</span> <span class="ot">-&gt;</span> a) a</a>
<a class="sourceLine" id="cb8-3" title="3">s      <span class="fu">:</span> <span class="dt">String</span> <span class="ot">-&gt;</span> <span class="dt">Parser</span> a a</a>
<a class="sourceLine" id="cb8-4" title="4">top    <span class="fu">:</span> <span class="dt">Parser</span> a a</a>
<a class="sourceLine" id="cb8-5" title="5">(<span class="fu">&lt;/&gt;</span>)  <span class="fu">:</span> <span class="dt">Parser</span> a b <span class="ot">-&gt;</span> <span class="dt">Parser</span> b c <span class="ot">-&gt;</span> <span class="dt">Parser</span> a c</a>
<a class="sourceLine" id="cb8-6" title="6"><span class="fu">map</span>    <span class="fu">:</span> a <span class="ot">-&gt;</span> <span class="dt">Parser</span> a b <span class="ot">-&gt;</span> <span class="dt">Parser</span> (b <span class="ot">-&gt;</span> c) c</a></code></pre></div>
<p><code>Parser</code> の型が <code>Parser a b</code> の場合と <code>Parser (a -&gt; b) b</code> の場合の2パターンがあることに気づいただろうか？ <code>string</code> や <code>int</code> のような <code>(a -&gt; b)</code> のようなパーサーの場合は， <code>a</code> の部分がパース結果の型と考えられる． 対して <code>s</code> や <code>top</code> のような関数は入力(<code>Url</code>)を消費するだけでパース結果の型(<code>parse</code> の <code>Maybe a</code> の <code>a</code> の部分)に影響を与えない． そして <code>(&lt;/&gt;)</code> が URL の区切り文字(<code>/</code>) である．</p>
<h2 id="section-1"></h2>
<p>試しにいくつか組み合わせてみよう:</p>
<div class="sourceCode" id="cb9"><pre class="sourceCode haskell"><code class="sourceCode haskell"><a class="sourceLine" id="cb9-1" title="1"><span class="fu">&gt;</span> parser2 <span class="fu">=</span> Url.s <span class="st">&quot;hoge&quot;</span> <span class="fu">&lt;/&gt;</span> Url.string <span class="fu">&lt;/&gt;</span> Url.int</a>
<a class="sourceLine" id="cb9-2" title="2"><span class="dt">Parser</span> <span class="fu">&lt;</span>function<span class="fu">&gt;</span> <span class="fu">:</span> <span class="dt">Url.Parser</span> (<span class="dt">String</span> <span class="ot">-&gt;</span> <span class="dt">Int</span> <span class="ot">-&gt;</span> c) c</a>
<a class="sourceLine" id="cb9-3" title="3"></a>
<a class="sourceLine" id="cb9-4" title="4"><span class="fu">&gt;</span> parser3 <span class="fu">=</span> parser2 <span class="fu">&lt;/&gt;</span> Url.int <span class="fu">&lt;/&gt;</span> Url.top</a>
<a class="sourceLine" id="cb9-5" title="5"><span class="dt">Parser</span> <span class="fu">&lt;</span>function<span class="fu">&gt;</span> <span class="fu">:</span> <span class="dt">Url.Parser</span> (<span class="dt">String</span> <span class="ot">-&gt;</span> <span class="dt">Int</span> <span class="ot">-&gt;</span> <span class="dt">Int</span> <span class="ot">-&gt;</span> c) c</a>
<a class="sourceLine" id="cb9-6" title="6"></a>
<a class="sourceLine" id="cb9-7" title="7"><span class="fu">&gt;</span> <span class="kw">type</span> alias <span class="dt">Hoge1</span> <span class="fu">=</span> { hoge1 <span class="fu">:</span> <span class="dt">String</span>, hoge2 <span class="fu">:</span> <span class="dt">Int</span>, hoge3 <span class="fu">:</span> <span class="dt">Int</span> }</a>
<a class="sourceLine" id="cb9-8" title="8"></a>
<a class="sourceLine" id="cb9-9" title="9"><span class="fu">&gt;</span> parser4 <span class="fu">=</span> Url.map <span class="dt">Hoge1</span> parser3</a>
<a class="sourceLine" id="cb9-10" title="10"><span class="dt">Parser</span> <span class="fu">&lt;</span>function<span class="fu">&gt;</span> <span class="fu">:</span> <span class="dt">Url.Parser</span> (<span class="dt">Hoge1</span> <span class="ot">-&gt;</span> c) c</a></code></pre></div>
<p>このように <code>&lt;/&gt;</code> でパーサーを連結することで <code>Parser a b</code> の <code>a</code> の部分がどんどん伸びてくる． ちなみに，<code>top</code> はURLの末尾かどうかのチェックするパーサーだ:</p>
<div class="sourceCode" id="cb10"><pre class="sourceCode haskell"><code class="sourceCode haskell"><a class="sourceLine" id="cb10-1" title="1"><span class="fu">&gt;</span> <span class="kw">type</span> <span class="dt">Hoge2</span> <span class="fu">=</span> <span class="dt">Hoge2</span></a>
<a class="sourceLine" id="cb10-2" title="2"></a>
<a class="sourceLine" id="cb10-3" title="3"><span class="fu">&gt;</span> Url.fromString <span class="st">&quot;http://localhost/&quot;</span> <span class="fu">|&gt;</span> <span class="dt">Maybe</span><span class="fu">.</span>andThen (Url.parse (Url.map <span class="dt">Hoge2</span> Url.top))</a>
<a class="sourceLine" id="cb10-4" title="4"><span class="dt">Just</span> <span class="dt">Hoge2</span> <span class="fu">:</span> <span class="dt">Maybe</span> <span class="dt">Hoge2</span></a>
<a class="sourceLine" id="cb10-5" title="5"></a>
<a class="sourceLine" id="cb10-6" title="6"><span class="fu">&gt;</span> Url.fromString <span class="st">&quot;http://localhost/1&quot;</span> <span class="fu">|&gt;</span> <span class="dt">Maybe</span><span class="fu">.</span>andThen (Url.parse (Url.map <span class="dt">Hoge2</span> Url.top))</a>
<a class="sourceLine" id="cb10-7" title="7"><span class="dt">Nothing</span> <span class="fu">:</span> <span class="dt">Maybe</span> <span class="dt">Hoge2</span></a></code></pre></div>
<h2 id="url.parser.query-の使い方">Url.Parser.Query の使い方</h2>
<p><code>Parser a b</code> の <code>b</code> 側が仕事をするのはクエリに関するパーサーがある場合だ． なので次にクエリのパーサーを見てみる． 便宜上以降ではクエリの型や関数には <code>Query</code> を付けるようにする．</p>
<div class="sourceCode" id="cb11"><pre class="sourceCode haskell"><code class="sourceCode haskell"><a class="sourceLine" id="cb11-1" title="1">(<span class="fu">&lt;?&gt;</span>)  <span class="fu">:</span> <span class="dt">Parser</span> a (query <span class="ot">-&gt;</span> b) <span class="ot">-&gt;</span> <span class="dt">Query.Parser</span> query <span class="ot">-&gt;</span> <span class="dt">Parser</span> a b</a>
<a class="sourceLine" id="cb11-2" title="2">string <span class="fu">:</span> <span class="dt">String</span> <span class="ot">-&gt;</span> <span class="dt">Query.Parser</span> (<span class="dt">Maybe</span> <span class="dt">String</span>)</a>
<a class="sourceLine" id="cb11-3" title="3">int    <span class="fu">:</span> <span class="dt">String</span> <span class="ot">-&gt;</span> <span class="dt">Query.Parser</span> (<span class="dt">Maybe</span> <span class="dt">Int</span>)</a>
<a class="sourceLine" id="cb11-4" title="4"><span class="fu">map</span>    <span class="fu">:</span> (a <span class="ot">-&gt;</span> b) <span class="ot">-&gt;</span> <span class="dt">Query.Parser</span> a <span class="ot">-&gt;</span> <span class="dt">Query.Parser</span> b</a>
<a class="sourceLine" id="cb11-5" title="5">map2   <span class="fu">:</span> (a <span class="ot">-&gt;</span> b <span class="ot">-&gt;</span> result) <span class="ot">-&gt;</span> <span class="dt">Query.Parser</span> a <span class="ot">-&gt;</span> <span class="dt">Query.Parser</span> b <span class="ot">-&gt;</span> <span class="dt">Query.Parser</span> result</a></code></pre></div>
<p><code>(&lt;?&gt;)</code> という演算子が Url のパーサーとクエリのパーサーを繋ぐ． クエリのパーサーの型は <code>Parser a</code> と JSON デコーダーのような型と同じ仕組みだ．</p>
<p><code>map</code> で連結したものを <code>(&lt;?&gt;)</code> で一気に繋げても良いし，<code>(&lt;?&gt;)</code> で一つずつ繋げても良い:</p>
<div class="sourceCode" id="cb12"><pre class="sourceCode haskell"><code class="sourceCode haskell"><a class="sourceLine" id="cb12-1" title="1"><span class="fu">&gt;</span> <span class="kw">type</span> alias <span class="dt">Fuga1</span> <span class="fu">=</span> { fuga1 <span class="fu">:</span> <span class="dt">Maybe</span> <span class="dt">String</span>, fuga2 <span class="fu">:</span> <span class="dt">Maybe</span> <span class="dt">Int</span> }</a>
<a class="sourceLine" id="cb12-2" title="2"></a>
<a class="sourceLine" id="cb12-3" title="3"><span class="fu">&gt;</span> parser5 <span class="fu">=</span> Url.top <span class="fu">&lt;?&gt;</span> Query.map2 <span class="dt">Fuga1</span> (Query.string <span class="st">&quot;fuga1&quot;</span>) (Query.int <span class="st">&quot;fuga2&quot;</span>)</a>
<a class="sourceLine" id="cb12-4" title="4"><span class="dt">Parser</span> <span class="fu">&lt;</span>function<span class="fu">&gt;</span> <span class="fu">:</span> <span class="dt">Url.Parser</span> (<span class="dt">Fuga1</span> <span class="ot">-&gt;</span> b) b</a>
<a class="sourceLine" id="cb12-5" title="5"></a>
<a class="sourceLine" id="cb12-6" title="6"><span class="fu">&gt;</span> parser5 <span class="fu">=</span> Url.map <span class="dt">Fuga1</span> (Url.top <span class="fu">&lt;?&gt;</span> Query.string <span class="st">&quot;fuga1&quot;</span> <span class="fu">&lt;?&gt;</span> Query.int <span class="st">&quot;fuga2&quot;</span>)</a>
<a class="sourceLine" id="cb12-7" title="7"><span class="dt">Parser</span> <span class="fu">&lt;</span>function<span class="fu">&gt;</span> <span class="fu">:</span> <span class="dt">Url.Parser</span> (<span class="dt">Fuga1</span> <span class="ot">-&gt;</span> c) c</a></code></pre></div>
<h2 id="fragment">Fragment</h2>
<p>フラグメントの部分をパースするには <code>fragment</code> 関数を使う:</p>
<div class="sourceCode" id="cb13"><pre class="sourceCode haskell"><code class="sourceCode haskell"><a class="sourceLine" id="cb13-1" title="1">fragment <span class="fu">:</span> (<span class="dt">Maybe</span> <span class="dt">String</span> <span class="ot">-&gt;</span> fragment) <span class="ot">-&gt;</span> <span class="dt">Parser</span> (fragment <span class="ot">-&gt;</span> a) a</a></code></pre></div>
<p>なんでもよければ <code>identity</code> を使えば良い:</p>
<div class="sourceCode" id="cb14"><pre class="sourceCode haskell"><code class="sourceCode haskell"><a class="sourceLine" id="cb14-1" title="1"><span class="fu">&gt;</span> parser6 <span class="fu">=</span> Url.top <span class="fu">&lt;/&gt;</span> Url.fragment identity</a>
<a class="sourceLine" id="cb14-2" title="2"><span class="dt">Parser</span> <span class="fu">&lt;</span>function<span class="fu">&gt;</span> <span class="fu">:</span> <span class="dt">Url.Parser</span> (<span class="dt">Maybe</span> <span class="dt">String</span> <span class="ot">-&gt;</span> c) c</a>
<a class="sourceLine" id="cb14-3" title="3"></a>
<a class="sourceLine" id="cb14-4" title="4"><span class="fu">&gt;</span> Url.fromString <span class="st">&quot;http://localhost#abc&quot;</span> <span class="fu">|&gt;</span> <span class="dt">Maybe</span><span class="fu">.</span>andThen (Url.parse parser6)</a>
<a class="sourceLine" id="cb14-5" title="5"><span class="dt">Just</span> (<span class="dt">Just</span> <span class="st">&quot;abc&quot;</span>) <span class="fu">:</span> <span class="dt">Maybe</span> (<span class="dt">Maybe</span> <span class="dt">String</span>)</a>
<a class="sourceLine" id="cb14-6" title="6"></a>
<a class="sourceLine" id="cb14-7" title="7"><span class="fu">&gt;</span> Url.fromString <span class="st">&quot;http://localhost&quot;</span> <span class="fu">|&gt;</span> <span class="dt">Maybe</span><span class="fu">.</span>andThen (Url.parse parser6)</a>
<a class="sourceLine" id="cb14-8" title="8"><span class="dt">Just</span> <span class="dt">Nothing</span> <span class="fu">:</span> <span class="dt">Maybe</span> (<span class="dt">Maybe</span> <span class="dt">String</span>)</a></code></pre></div>
<h2 id="中身を読んでいく">中身を読んでいく</h2>
<p>今までの話でなんとなく使い方はわかっただろう． ここからは elm/url の実装について読み解いていく． なので，使い方が分かればもう十分勢の人は以降を読む必要はない．</p>
<h3 id="余談-参考にしたもの">余談: 参考にしたもの</h3>
<p><a href="https://github.com/elm/url#related-work">README曰く</a>，<code>Url.Parser</code> の実装の着想は下記の記事によって得たようだ．</p>
<ul>
<li><a href="https://chrisdone.com/posts/formatting">Formatting in Haskell</a></li>
<li><a href="http://rgrinberg.com/posts/primitive-type-safe-routing/">Type Safe Routing - Baby Steps</a></li>
</ul>
<p>前者は Haskell の <code>printf</code> のようなフォーマット出力ライブラリで，後者は OCaml のルーティングのライブラリに関する記事．</p>
<h3 id="パーサーの型">パーサーの型</h3>
<p>まずは型の中身を見てみる:</p>
<div class="sourceCode" id="cb15"><pre class="sourceCode haskell"><code class="sourceCode haskell"><a class="sourceLine" id="cb15-1" title="1"><span class="kw">type</span> <span class="dt">Parser</span> a b <span class="fu">=</span></a>
<a class="sourceLine" id="cb15-2" title="2">  <span class="dt">Parser</span> (<span class="dt">State</span> a <span class="ot">-&gt;</span> <span class="dt">List</span> (<span class="dt">State</span> b))</a>
<a class="sourceLine" id="cb15-3" title="3"></a>
<a class="sourceLine" id="cb15-4" title="4"><span class="kw">type</span> alias <span class="dt">State</span> value <span class="fu">=</span></a>
<a class="sourceLine" id="cb15-5" title="5">  { visited <span class="fu">:</span> <span class="dt">List</span> <span class="dt">String</span></a>
<a class="sourceLine" id="cb15-6" title="6">  , unvisited <span class="fu">:</span> <span class="dt">List</span> <span class="dt">String</span></a>
<a class="sourceLine" id="cb15-7" title="7">  , params <span class="fu">:</span> <span class="dt">Dict</span> <span class="dt">String</span> (<span class="dt">List</span> <span class="dt">String</span>)</a>
<a class="sourceLine" id="cb15-8" title="8">  , frag <span class="fu">:</span> <span class="dt">Maybe</span> <span class="dt">String</span></a>
<a class="sourceLine" id="cb15-9" title="9">  , value <span class="fu">:</span> value</a>
<a class="sourceLine" id="cb15-10" title="10">  }</a></code></pre></div>
<p><code>State a -&gt; List (State b)</code> というのは関数型パーサー(パーサーコンビネーター)でよくある型だ(<code>Functional Parser</code> や <code>Parser Combinator</code> などで調べると良い)． 入力の状態が <code>State a</code> で出力の状態が <code>State b</code>，出力がリストになっているが <code>Maybe</code> と考えて問題ないはずだ．</p>
<p><code>Url.parse</code> や簡単なパーサーの中身を見てみればそれぞれのフィールドの意味がわかるはずだ:</p>
<div class="sourceCode" id="cb16"><pre class="sourceCode haskell"><code class="sourceCode haskell"><a class="sourceLine" id="cb16-1" title="1">parse <span class="fu">:</span> <span class="dt">Parser</span> (a <span class="ot">-&gt;</span> a) a <span class="ot">-&gt;</span> <span class="dt">Url</span> <span class="ot">-&gt;</span> <span class="dt">Maybe</span> a</a>
<a class="sourceLine" id="cb16-2" title="2">parse (<span class="dt">Parser</span> parser) url <span class="fu">=</span></a>
<a class="sourceLine" id="cb16-3" title="3">  getFirstMatch <span class="fu">&lt;|</span> parser <span class="fu">&lt;|</span></a>
<a class="sourceLine" id="cb16-4" title="4">    <span class="dt">State</span> [] (preparePath url<span class="fu">.</span>path) (prepareQuery url<span class="fu">.</span>query) url<span class="fu">.</span>fragment identity</a>
<a class="sourceLine" id="cb16-5" title="5"></a>
<a class="sourceLine" id="cb16-6" title="6">getFirstMatch <span class="fu">:</span> <span class="dt">List</span> (<span class="dt">State</span> a) <span class="ot">-&gt;</span> <span class="dt">Maybe</span> a</a>
<a class="sourceLine" id="cb16-7" title="7">getFirstMatch states <span class="fu">=</span></a>
<a class="sourceLine" id="cb16-8" title="8">  <span class="kw">case</span> states <span class="kw">of</span></a>
<a class="sourceLine" id="cb16-9" title="9">    [] <span class="ot">-&gt;</span></a>
<a class="sourceLine" id="cb16-10" title="10">      <span class="dt">Nothing</span></a>
<a class="sourceLine" id="cb16-11" title="11"></a>
<a class="sourceLine" id="cb16-12" title="12"><span class="ot">    state ::</span> rest <span class="ot">-&gt;</span></a>
<a class="sourceLine" id="cb16-13" title="13">      <span class="kw">case</span> state<span class="fu">.</span>unvisited <span class="kw">of</span></a>
<a class="sourceLine" id="cb16-14" title="14">        [] <span class="ot">-&gt;</span></a>
<a class="sourceLine" id="cb16-15" title="15">          <span class="dt">Just</span> state<span class="fu">.</span>value</a>
<a class="sourceLine" id="cb16-16" title="16"></a>
<a class="sourceLine" id="cb16-17" title="17">        [<span class="st">&quot;&quot;</span>] <span class="ot">-&gt;</span></a>
<a class="sourceLine" id="cb16-18" title="18">          <span class="dt">Just</span> state<span class="fu">.</span>value</a>
<a class="sourceLine" id="cb16-19" title="19"></a>
<a class="sourceLine" id="cb16-20" title="20">        _ <span class="ot">-&gt;</span></a>
<a class="sourceLine" id="cb16-21" title="21">          getFirstMatch rest</a></code></pre></div>
<p><code>parse</code> の定義より，<code>unvisited</code> と <code>params</code> と <code>frag</code> はそれぞれパスとクエリとフラグメントを与えているのがわかる． <code>getFirstMatch</code> の定義を見ると，最後に <code>Just state.value</code> をしているので，<code>value</code> フィールドが最終的な結果となる． では <code>visited</code> はなんだろうか？ パーサーの実装を見てみる．</p>
<h3 id="組み込みのパーサー">組み込みのパーサー</h3>
<p>例えば <code>Url.string</code> を見てみる:</p>
<div class="sourceCode" id="cb17"><pre class="sourceCode haskell"><code class="sourceCode haskell"><a class="sourceLine" id="cb17-1" title="1">string <span class="fu">:</span> <span class="dt">Parser</span> (<span class="dt">String</span> <span class="ot">-&gt;</span> a) a</a>
<a class="sourceLine" id="cb17-2" title="2">string <span class="fu">=</span></a>
<a class="sourceLine" id="cb17-3" title="3">  custom <span class="st">&quot;STRING&quot;</span> <span class="dt">Just</span></a>
<a class="sourceLine" id="cb17-4" title="4"></a>
<a class="sourceLine" id="cb17-5" title="5">custom <span class="fu">:</span> <span class="dt">String</span> <span class="ot">-&gt;</span> (<span class="dt">String</span> <span class="ot">-&gt;</span> <span class="dt">Maybe</span> a) <span class="ot">-&gt;</span> <span class="dt">Parser</span> (a <span class="ot">-&gt;</span> b) b</a>
<a class="sourceLine" id="cb17-6" title="6">custom tipe stringToSomething <span class="fu">=</span></a>
<a class="sourceLine" id="cb17-7" title="7">  <span class="dt">Parser</span> <span class="fu">&lt;|</span> \{ visited, unvisited, params, frag, value } <span class="ot">-&gt;</span></a>
<a class="sourceLine" id="cb17-8" title="8">    <span class="kw">case</span> unvisited <span class="kw">of</span></a>
<a class="sourceLine" id="cb17-9" title="9">      [] <span class="ot">-&gt;</span></a>
<a class="sourceLine" id="cb17-10" title="10">        []</a>
<a class="sourceLine" id="cb17-11" title="11"></a>
<a class="sourceLine" id="cb17-12" title="12"><span class="ot">      next ::</span> rest <span class="ot">-&gt;</span></a>
<a class="sourceLine" id="cb17-13" title="13">        <span class="kw">case</span> stringToSomething next <span class="kw">of</span></a>
<a class="sourceLine" id="cb17-14" title="14">          <span class="dt">Just</span> nextValue <span class="ot">-&gt;</span></a>
<a class="sourceLine" id="cb17-15" title="15">            [ <span class="dt">State</span> (<span class="ot">next ::</span> visited) rest params frag (value nextValue) ]</a>
<a class="sourceLine" id="cb17-16" title="16"></a>
<a class="sourceLine" id="cb17-17" title="17">          <span class="dt">Nothing</span> <span class="ot">-&gt;</span></a>
<a class="sourceLine" id="cb17-18" title="18">            []</a></code></pre></div>
<p><code>custom</code> 関数の定義からわかるように，<code>unvisited</code> を入力にして <code>stringToSomething</code> というパーサーを咬ませて，その結果を <code>value</code> に追加し，元の文字列を <code>visited</code> に追加している． すなわち，<code>visited</code> はパースできたパスをためている． しかし，elm/url のコードを探しても <code>visited</code> が使われているところはないので，今の実装では無くても良いフィールドのはずだ(パースエラーをわかりやすくするときに使えそう)．</p>
<h2 id="section-2"></h2>
<p>ちなみに，クエリやフラグメントのパーサーは入力が違う(<code>unvisited</code> を使うのではない)だけだ:</p>
<div class="sourceCode" id="cb18"><pre class="sourceCode haskell"><code class="sourceCode haskell"><a class="sourceLine" id="cb18-1" title="1">query <span class="fu">:</span> <span class="dt">Query.Parser</span> query <span class="ot">-&gt;</span> <span class="dt">Parser</span> (query <span class="ot">-&gt;</span> a) a</a>
<a class="sourceLine" id="cb18-2" title="2">query (<span class="dt">Q.Parser</span> queryParser) <span class="fu">=</span></a>
<a class="sourceLine" id="cb18-3" title="3">  <span class="dt">Parser</span> <span class="fu">&lt;|</span> \{ visited, unvisited, params, frag, value } <span class="ot">-&gt;</span></a>
<a class="sourceLine" id="cb18-4" title="4">    [ <span class="dt">State</span> visited unvisited params frag (value (queryParser params))</a>
<a class="sourceLine" id="cb18-5" title="5">    ]</a>
<a class="sourceLine" id="cb18-6" title="6"></a>
<a class="sourceLine" id="cb18-7" title="7">fragment <span class="fu">:</span> (<span class="dt">Maybe</span> <span class="dt">String</span> <span class="ot">-&gt;</span> fragment) <span class="ot">-&gt;</span> <span class="dt">Parser</span> (fragment <span class="ot">-&gt;</span> a) a</a>
<a class="sourceLine" id="cb18-8" title="8">fragment toFrag <span class="fu">=</span></a>
<a class="sourceLine" id="cb18-9" title="9">  <span class="dt">Parser</span> <span class="fu">&lt;|</span> \{ visited, unvisited, params, frag, value } <span class="ot">-&gt;</span></a>
<a class="sourceLine" id="cb18-10" title="10">    [ <span class="dt">State</span> visited unvisited params frag (value (toFrag frag))</a>
<a class="sourceLine" id="cb18-11" title="11">    ]</a></code></pre></div>
<h3 id="コンビネーター">コンビネーター</h3>
<p>ちなみに，コンビネーター(<code>(&lt;/&gt;)</code>)の定義も見てみる:</p>
<div class="sourceCode" id="cb19"><pre class="sourceCode haskell"><code class="sourceCode haskell"><a class="sourceLine" id="cb19-1" title="1">slash <span class="fu">:</span> <span class="dt">Parser</span> a b <span class="ot">-&gt;</span> <span class="dt">Parser</span> b c <span class="ot">-&gt;</span> <span class="dt">Parser</span> a c</a>
<a class="sourceLine" id="cb19-2" title="2">slash (<span class="dt">Parser</span> parseBefore) (<span class="dt">Parser</span> parseAfter) <span class="fu">=</span></a>
<a class="sourceLine" id="cb19-3" title="3">  <span class="dt">Parser</span> <span class="fu">&lt;|</span> \state <span class="ot">-&gt;</span></a>
<a class="sourceLine" id="cb19-4" title="4">    List.concatMap parseAfter (parseBefore state)</a></code></pre></div>
<p><code>(&lt;/&gt;)</code> は <code>slash</code> のエイリアスになっている． <code>Parser</code> の型は <code>State a -&gt; [State b]</code> のラップなので，パーサーの連結は <code>concatMap</code> をするだけになっている．</p>
<p>また，<code>Url.map</code> も見てみる:</p>
<div class="sourceCode" id="cb20"><pre class="sourceCode haskell"><code class="sourceCode haskell"><a class="sourceLine" id="cb20-1" title="1"><span class="fu">map</span> <span class="fu">:</span> a <span class="ot">-&gt;</span> <span class="dt">Parser</span> a b <span class="ot">-&gt;</span> <span class="dt">Parser</span> (b <span class="ot">-&gt;</span> c) c</a>
<a class="sourceLine" id="cb20-2" title="2"><span class="fu">map</span> subValue (<span class="dt">Parser</span> parseArg) <span class="fu">=</span></a>
<a class="sourceLine" id="cb20-3" title="3">  <span class="dt">Parser</span> <span class="fu">&lt;|</span> \{ visited, unvisited, params, frag, value } <span class="ot">-&gt;</span></a>
<a class="sourceLine" id="cb20-4" title="4">    List.map (mapState value) <span class="fu">&lt;|</span> parseArg <span class="fu">&lt;|</span></a>
<a class="sourceLine" id="cb20-5" title="5">      <span class="dt">State</span> visited unvisited params frag subValue</a>
<a class="sourceLine" id="cb20-6" title="6"></a>
<a class="sourceLine" id="cb20-7" title="7">mapState <span class="fu">:</span> (a <span class="ot">-&gt;</span> b) <span class="ot">-&gt;</span> <span class="dt">State</span> a <span class="ot">-&gt;</span> <span class="dt">State</span> b</a>
<a class="sourceLine" id="cb20-8" title="8">mapState func { visited, unvisited, params, frag, value } <span class="fu">=</span></a>
<a class="sourceLine" id="cb20-9" title="9">  <span class="dt">State</span> visited unvisited params frag (func value)</a></code></pre></div>
<p><code>map</code> を利用する場合，各型変数は次のようになっていることが多いだろう:</p>
<div class="sourceCode" id="cb21"><pre class="sourceCode haskell"><code class="sourceCode haskell"><a class="sourceLine" id="cb21-1" title="1"><span class="co">-- parseArg : State (x -&gt; y) -&gt; List (State y)</span></a>
<a class="sourceLine" id="cb21-2" title="2"><span class="co">-- value を identity と考えれば良い</span></a>
<a class="sourceLine" id="cb21-3" title="3"><span class="fu">map</span> <span class="fu">:</span> (x <span class="ot">-&gt;</span> y) <span class="ot">-&gt;</span> <span class="dt">Parser</span> (x <span class="ot">-&gt;</span> y) y <span class="ot">-&gt;</span> <span class="dt">Parser</span> (y <span class="ot">-&gt;</span> z) z</a>
<a class="sourceLine" id="cb21-4" title="4"><span class="fu">map</span> subValue (<span class="dt">Parser</span> parseArg) <span class="fu">=</span></a>
<a class="sourceLine" id="cb21-5" title="5">  <span class="dt">Parser</span> <span class="fu">&lt;|</span> \{ visited, unvisited, params, frag, value } <span class="ot">-&gt;</span></a>
<a class="sourceLine" id="cb21-6" title="6">    List.map (mapState value) <span class="fu">&lt;|</span> parseArg <span class="fu">&lt;|</span></a>
<a class="sourceLine" id="cb21-7" title="7">      <span class="dt">State</span> visited unvisited params frag subValue</a></code></pre></div>
<p>こう考えれば <code>map</code> 関数の定義も読めるはずだ．</p>
<h2 id="結局">結局</h2>
<p>最後に <code>Parser a b</code> の各型変数は何を意味して，従来の <code>Parser a</code> 方式のパーサーではなぜダメなのかについて議論する(まぁあくまでも，実際に実装などを読んでの個人的な肌感なんですけど)．</p>
<h3 id="型変数の意味">型変数の意味</h3>
<p><code>Parser a b</code> の意味は <code>State a -&gt; List (State b)</code> からわかるように，パーサーの入力の状態に使われる型 <code>a</code> と出力の状態に使われる型 <code>b</code> である． ここで，「使われる」というのが肝で，<code>a</code> それ自体は入力ではない． 入力にせよ，出力にせよ，パーサーが行うのは状態 <code>State r1</code> から <code>State r2</code> への変換だ(ただしそれは失敗するかもしれないので <code>List</code> でラップされている)． <code>State r</code> にとって <code>r</code> は <strong>パースの最終結果</strong> を意味している(変化する状態の最終結果)．</p>
<p>なので <code>Parser a b</code> のパーサーがあった場合，このパーサーの最終結果は <code>b</code> であり，<code>a</code> は入力の状態が想定している最終結果である． ただし，<code>Parser (String -&gt; b) b</code> というパーサーの場合，<code>b</code> は <code>String</code> でも良く，このパーサーを <code>Url.parse</code> で実行する場合は <code>b = String</code> と推論される．</p>
<h3 id="parser-a-との違い"><code>Parser a</code> との違い</h3>
<p>大きな違いは <code>map</code> の振る舞いだ． <code>Parser a</code> の場合，レコード型 <code>Hoge = { hoge1 : Int, hoge2 : String }</code> のパーサーを記述するのには次のように書く:</p>
<div class="sourceCode" id="cb22"><pre class="sourceCode haskell"><code class="sourceCode haskell"><a class="sourceLine" id="cb22-1" title="1">intParser <span class="fu">:</span> <span class="dt">Parser</span> <span class="dt">Int</span></a>
<a class="sourceLine" id="cb22-2" title="2">stringParser <span class="fu">:</span> <span class="dt">Parser</span> <span class="dt">String</span></a>
<a class="sourceLine" id="cb22-3" title="3"></a>
<a class="sourceLine" id="cb22-4" title="4">parser1 <span class="fu">:</span> <span class="dt">Parser</span> <span class="dt">Hoge</span></a>
<a class="sourceLine" id="cb22-5" title="5">parser1 <span class="fu">=</span> map2 <span class="dt">Hoge</span> intParser stringParser</a></code></pre></div>
<p>フィールドの個数が3つ4つと増えるたびに，<code>map3</code> <code>map4</code> と作る必要がある． また，parser1 を再利用して <code>Fuga = { hoge1 : Int, hoge2 : String, hoge3 : Int }</code> 型のパーサーを記述することはできない．</p>
<h2 id="section-3"></h2>
<p>対して <code>Parser a b</code> の場合は <code>(&lt;/&gt;)</code> を用いて <code>intParser</code> や <code>stringParser</code> をどんどん連結していき，最終的に <code>map</code> をする．</p>
<div class="sourceCode" id="cb23"><pre class="sourceCode haskell"><code class="sourceCode haskell"><a class="sourceLine" id="cb23-1" title="1">parser0 <span class="fu">:</span> <span class="dt">Parser</span> (<span class="dt">Int</span> <span class="ot">-&gt;</span> <span class="dt">String</span>  <span class="ot">-&gt;</span> a) a</a>
<a class="sourceLine" id="cb23-2" title="2">parser0 <span class="fu">=</span> intParser <span class="fu">&lt;/&gt;</span> stringParser</a>
<a class="sourceLine" id="cb23-3" title="3"></a>
<a class="sourceLine" id="cb23-4" title="4">parser1 <span class="fu">:</span> <span class="dt">Parser</span> (<span class="dt">Hoge</span> <span class="ot">-&gt;</span> a) a</a>
<a class="sourceLine" id="cb23-5" title="5">parser1 <span class="fu">=</span> <span class="fu">map</span> <span class="dt">Hoge</span> parser0</a>
<a class="sourceLine" id="cb23-6" title="6"></a>
<a class="sourceLine" id="cb23-7" title="7">parser2 <span class="fu">:</span> <span class="dt">Parser</span> (<span class="dt">Fuga</span> <span class="ot">-&gt;</span> a) a</a>
<a class="sourceLine" id="cb23-8" title="8">parser2 <span class="fu">=</span> <span class="fu">map</span> <span class="dt">Fuga</span> (parser0 <span class="fu">&lt;/&gt;</span> intParser)</a></code></pre></div>
<p>すなわち利点は:</p>
<ol type="1">
<li>引数ごとの <code>map</code> がいらない</li>
<li><code>(&lt;/&gt;)</code> で繋いだパーサーの再利用性が高い</li>
</ol>
<h3 id="applicative-スタイル">Applicative スタイル</h3>
<p>Elm で一般的かどうかはわからないが，Haskell では一般的な Applicative スタイルというのがある． ちなみに elm/url を Applicative スタイルにしたパッケージは GitHub に揚げてある．</p>
<ul>
<li><a href="https://github.com/matsubara0507/elm-url-applicative">matsubara0507/elm-url-applicative - GitHub</a></li>
</ul>
<p>Applicative スタイルとは，次のようなコンビネーターを使って関数を構築する:</p>
<div class="sourceCode" id="cb24"><pre class="sourceCode haskell"><code class="sourceCode haskell"><a class="sourceLine" id="cb24-1" title="1"><span class="fu">map</span>   <span class="fu">:</span> (a <span class="ot">-&gt;</span> b) <span class="ot">-&gt;</span> <span class="dt">Parser</span> a <span class="ot">-&gt;</span> <span class="dt">Parser</span> b</a>
<a class="sourceLine" id="cb24-2" title="2">apply <span class="fu">:</span> <span class="dt">Parser</span> (a <span class="ot">-&gt;</span> b) <span class="ot">-&gt;</span> <span class="dt">Parser</span> a <span class="ot">-&gt;</span> <span class="dt">Parser</span> b</a></code></pre></div>
<p>ちなみに，今回の話の流れ上 <code>Parser</code> を用いたが，ここが <code>Maybe</code> だろうと <code>List</code> だろうと同じに扱える． この場合，パーサーの構築は次のようになる:</p>
<div class="sourceCode" id="cb25"><pre class="sourceCode haskell"><code class="sourceCode haskell"><a class="sourceLine" id="cb25-1" title="1">parser2 <span class="fu">:</span> <span class="dt">Parser</span> <span class="dt">Fuga</span></a>
<a class="sourceLine" id="cb25-2" title="2">parser2 <span class="fu">=</span></a>
<a class="sourceLine" id="cb25-3" title="3">  apply (apply (<span class="fu">map</span> <span class="dt">Fuga</span> intParser) stringParser) intParser</a></code></pre></div>
<p>Elm 的にはパイプで連結できるので <code>app</code> の引数の順番を変えた方がいいかもしれない．</p>
<div class="sourceCode" id="cb26"><pre class="sourceCode haskell"><code class="sourceCode haskell"><a class="sourceLine" id="cb26-1" title="1">andApply <span class="fu">:</span> <span class="dt">Parser</span> a <span class="ot">-&gt;</span> <span class="dt">Parser</span> (a <span class="ot">-&gt;</span> b) <span class="ot">-&gt;</span> <span class="dt">Parser</span> b</a>
<a class="sourceLine" id="cb26-2" title="2"></a>
<a class="sourceLine" id="cb26-3" title="3">parser2 <span class="fu">:</span> <span class="dt">Parser</span> <span class="dt">Fuga</span></a>
<a class="sourceLine" id="cb26-4" title="4">parser2 <span class="fu">=</span></a>
<a class="sourceLine" id="cb26-5" title="5">  <span class="fu">map</span> <span class="dt">Fuga</span> intParser</a>
<a class="sourceLine" id="cb26-6" title="6">    <span class="fu">|&gt;</span> andApply stringParser</a>
<a class="sourceLine" id="cb26-7" title="7">    <span class="fu">|&gt;</span> andApply intParser</a></code></pre></div>
<p>一見問題なさそうだ． しかし，今回でいう <code>Url.s : String -&gt; Parser a a</code> のような入力を消費するだけで結果に反映しないパーサーがあるとうまく行かない． <code>ignore</code> のようなコンビネーターが必要になる(ちなみに Haskell の Applicative にはもちろんある):</p>
<div class="sourceCode" id="cb27"><pre class="sourceCode haskell"><code class="sourceCode haskell"><a class="sourceLine" id="cb27-1" title="1">s <span class="fu">:</span> <span class="dt">String</span> <span class="ot">-&gt;</span> <span class="dt">Parser</span> ()</a>
<a class="sourceLine" id="cb27-2" title="2">ignore <span class="fu">:</span> <span class="dt">Parser</span> b <span class="ot">-&gt;</span> <span class="dt">Parser</span> a <span class="ot">-&gt;</span> <span class="dt">Parser</span> a</a>
<a class="sourceLine" id="cb27-3" title="3"></a>
<a class="sourceLine" id="cb27-4" title="4">parser3 <span class="fu">:</span> <span class="dt">Parser</span> <span class="dt">Fuga</span></a>
<a class="sourceLine" id="cb27-5" title="5">parser3 <span class="fu">=</span></a>
<a class="sourceLine" id="cb27-6" title="6">  <span class="fu">map</span> <span class="dt">Fuga</span> intParser</a>
<a class="sourceLine" id="cb27-7" title="7">    <span class="fu">|&gt;</span> andApply stringParser</a>
<a class="sourceLine" id="cb27-8" title="8">    <span class="fu">|&gt;</span> ignore (s <span class="st">&quot;fuga&quot;</span>)</a>
<a class="sourceLine" id="cb27-9" title="9">    <span class="fu">|&gt;</span> andApply intParser</a></code></pre></div>
<p>ちなみに，再利用の方もうまくいく:</p>
<div class="sourceCode" id="cb28"><pre class="sourceCode haskell"><code class="sourceCode haskell"><a class="sourceLine" id="cb28-1" title="1">parser0 <span class="fu">:</span> (<span class="dt">Int</span> <span class="ot">-&gt;</span> <span class="dt">String</span> <span class="ot">-&gt;</span> a) <span class="ot">-&gt;</span> <span class="dt">Parser</span> a</a>
<a class="sourceLine" id="cb28-2" title="2">parser0 f <span class="fu">=</span> <span class="fu">map</span> f intParser <span class="fu">|&gt;</span> andApply stringParser</a>
<a class="sourceLine" id="cb28-3" title="3"></a>
<a class="sourceLine" id="cb28-4" title="4">parser1 <span class="fu">:</span> <span class="dt">Parser</span> <span class="dt">Hoge</span></a>
<a class="sourceLine" id="cb28-5" title="5">parser1 <span class="fu">=</span> parser0 <span class="dt">Hoge</span></a>
<a class="sourceLine" id="cb28-6" title="6"></a>
<a class="sourceLine" id="cb28-7" title="7">parser2 <span class="fu">:</span> <span class="dt">Parser</span> <span class="dt">Fuga</span></a>
<a class="sourceLine" id="cb28-8" title="8">parser2 <span class="fu">=</span> parser0 <span class="dt">Fuga</span> <span class="fu">|&gt;</span> andApply intParser</a></code></pre></div>
<p>これで <code>Parser a b</code> の場合と同等の能力を持つはずだ． すなわち，<code>Parser a b</code> と Applicative スタイルは見た目以上の差異はない（はず）．</p>
<h1 id="おしまい">おしまい</h1>
<p>Elm には珍しく型がテクニカルなパッケージということで，細かく中を読んでみました． 色々試した結果，Haskell の Applicative スタイルの見た目を変えてるだけのようでした． まだ，エヴァンさんが参考にしたという記事をちゃんと読んでないので，もしかしたら間違っているかも． 時間ができたら読んでみます．</p>
  </div>
</div>
</article>
]]></summary>
</entry>
<entry>
    <title>Dhall を試して物足りない部分を補うツールを自作した</title>
    <link href="https://matsubara0507.github.io/posts/2018-12-05-create-dhall-ex.html" />
    <id>https://matsubara0507.github.io/posts/2018-12-05-create-dhall-ex.html</id>
    <published>2018-12-05T00:00:00Z</published>
    <updated>2018-12-05T00:00:00Z</updated>
    <summary type="html"><![CDATA[<article class="post card" itemscope itemtype="http://schema.org/BlogPosting">
 <div class="card-content">
  <header class="post-header">
    <h1 class="post-title" itemprop="name headline">Dhall を試して物足りない部分を補うツールを自作した</h1>
    <p class="post-meta">
      <time datetime="2018-12-05" itemprop="datePublished">
        Dec 5, 2018
      </time>
      
      
      <div class="tags">
          <i class="fa fa-tags"></i> <a href="/tags/Haskell.html">Haskell</a> <a href="/tags/Dhall.html">Dhall</a>
      </div>
      
    </p>
  </header>

  <div class="post-content" itemprop="articleBody">
    <p>本稿は <a href="https://qiita.com/advent-calendar/2018/haskell">Haskell Advent Calendar 2018</a> 5日目の記事です．</p>
<p>Haskell Day 2018 の発表をきっかけに，兼ねてから気になっていた Dhall を試した． いくつかツールが欲しくなったので作りましたっていう話です．</p>
<p>作ったものはこれ:</p>
<ul>
<li><a href="https://github.com/matsubara0507/yaml-to-dhall">matsubara0507/yaml-to-dhall - GitHub</a></li>
<li><a href="https://github.com/matsubara0507/dhall-ex">matsubara0507/dhall-ex - GitHub</a></li>
</ul>
<p>ちなみに，今回作ったツールは現状の stack の stable resolver にある v1.5.1 を利用している．</p>
<h2 id="dhall">Dhall</h2>
<p><a href="https://github.com/dhall-lang/dhall-lang">Dhall</a> は静的型付けされた設定記述言語である． 多くの場合，プログラミング言語やアプリケーションに使われる設定ファイルには JSON や YAML が利用されている． プログラミング言語のビルドシステムのような設定ファイル一つ程度なら問題ないが，Kubernetes や Ansible のような膨大な設定ファイルが依存しあう場合，静的型付けプログラミング言語のようにコンパイルによる型検査を導入したくなるだろう． Dhall はそのための言語であり，また便利な関数が用意されているため，非常に再利用性の高い設定ファイルを記述できる．</p>
<h3 id="例">例:</h3>
<p>Dhall は静的片付け言語なので，まずは型を定義しよう:</p>
<div class="sourceCode" id="cb1"><pre class="sourceCode ocaml"><code class="sourceCode ocaml"><a class="sourceLine" id="cb1-1" title="1">$ cat ./User.dhall</a>
<a class="sourceLine" id="cb1-2" title="2">{ homeDirectory : Text, privateKeyFile : Text, publicKeyFile : Text }</a></code></pre></div>
<p>このユーザ型の値はユーザ名から一意に生成されることは容易に想像できるだろう:</p>
<div class="sourceCode" id="cb2"><pre class="sourceCode ocaml"><code class="sourceCode ocaml"><a class="sourceLine" id="cb2-1" title="1">$ cat ./makeUser.dhall</a>
<a class="sourceLine" id="cb2-2" title="2">  \(user_name : Text)</a>
<a class="sourceLine" id="cb2-3" title="3">-&gt;    <span class="kw">let</span> homeDirectory = <span class="st">&quot;/home/${user_name}&quot;</span></a>
<a class="sourceLine" id="cb2-4" title="4"></a>
<a class="sourceLine" id="cb2-5" title="5">  <span class="kw">in</span>  <span class="kw">let</span> privateKeyFile = <span class="st">&quot;${homeDirectory}/id_rsa&quot;</span></a>
<a class="sourceLine" id="cb2-6" title="6"></a>
<a class="sourceLine" id="cb2-7" title="7">  <span class="kw">in</span>  <span class="kw">let</span> publicKeyFile = <span class="st">&quot;${privateKeyFile}.pub&quot;</span></a>
<a class="sourceLine" id="cb2-8" title="8"></a>
<a class="sourceLine" id="cb2-9" title="9">  <span class="kw">in</span>    { homeDirectory =</a>
<a class="sourceLine" id="cb2-10" title="10">            homeDirectory</a>
<a class="sourceLine" id="cb2-11" title="11">        , privateKeyFile =</a>
<a class="sourceLine" id="cb2-12" title="12">            privateKeyFile</a>
<a class="sourceLine" id="cb2-13" title="13">        , publicKeyFile =</a>
<a class="sourceLine" id="cb2-14" title="14">            publicKeyFile</a>
<a class="sourceLine" id="cb2-15" title="15">        }</a>
<a class="sourceLine" id="cb2-16" title="16">      : ./User.dhall</a></code></pre></div>
<p>この <code>./makeUser.dhall</code> は任意の文字列を与えると，それをユーザ名として <code>./User.dhall</code> 型の値を生成してくれる． さらに，高階関数を使って複数のユーザに対し一気に適用してみよう．</p>
<pre class="dhall"><code>$ cat ./users.dhall
let User = ./User.dhall

in  let map =
      https://raw.githubusercontent.com/dhall-lang/dhall-lang/0a7f596d03b3ea760a96a8e03935f4baa64274e1/Prelude/List/map

in  map Text User ./makeUser.dhall [ &quot;alice&quot;, &quot;bob&quot;, &quot;curry&quot; ] : List User</code></pre>
<p><code>map</code> には <a href="https://github.com/dhall-lang/dhall-lang/blob/master/Prelude/List/map">dhall のリポジトリにある標準パッケージの関数</a>を直接インポートしている． <code>map</code> の型は <code>∀(a : Type) → ∀(b : Type) → (a → b) → List a → List b</code> となっている． 基本的に Dhall で多相な高階関数を利用するときは，引数から直接型を与えてあげる必要がある．</p>
<p>さて，これを dhall でビルドすると次のような結果を得る:</p>
<pre class="dhall"><code>$ dhall &lt;&lt;&lt; ./users.dhall
[ { homeDirectory =
      &quot;/home/alice&quot;
  , privateKeyFile =
      &quot;/home/alice/id_rsa&quot;
  , publicKeyFile =
      &quot;/home/alice/id_rsa.pub&quot;
  }
, { homeDirectory =
      &quot;/home/bob&quot;
  , privateKeyFile =
      &quot;/home/bob/id_rsa&quot;
  , publicKeyFile =
      &quot;/home/bob/id_rsa.pub&quot;
  }
, { homeDirectory =
      &quot;/home/curry&quot;
  , privateKeyFile =
      &quot;/home/curry/id_rsa&quot;
  , publicKeyFile =
      &quot;/home/curry/id_rsa.pub&quot;
  }
]</code></pre>
<p>これは次のようなYAMLに対応し，<code>dhall-to-yaml</code> などのツールで変換可能だ:</p>
<div class="sourceCode" id="cb5"><pre class="sourceCode yaml"><code class="sourceCode yaml"><a class="sourceLine" id="cb5-1" title="1"><span class="kw">-</span> <span class="fu">privateKeyFile:</span><span class="at"> /home/alice/id_rsa</span></a>
<a class="sourceLine" id="cb5-2" title="2">  <span class="fu">publicKeyFile:</span><span class="at"> /home/alice/id_rsa.pub</span></a>
<a class="sourceLine" id="cb5-3" title="3">  <span class="fu">homeDirectory:</span><span class="at"> /home/alice</span></a>
<a class="sourceLine" id="cb5-4" title="4"><span class="kw">-</span> <span class="fu">privateKeyFile:</span><span class="at"> /home/bob/id_rsa</span></a>
<a class="sourceLine" id="cb5-5" title="5">  <span class="fu">publicKeyFile:</span><span class="at"> /home/bob/id_rsa.pub</span></a>
<a class="sourceLine" id="cb5-6" title="6">  <span class="fu">homeDirectory:</span><span class="at"> /home/bob</span></a>
<a class="sourceLine" id="cb5-7" title="7"><span class="kw">-</span> <span class="fu">privateKeyFile:</span><span class="at"> /home/curry/id_rsa</span></a>
<a class="sourceLine" id="cb5-8" title="8">  <span class="fu">publicKeyFile:</span><span class="at"> /home/curry/id_rsa.pub</span></a>
<a class="sourceLine" id="cb5-9" title="9">  <span class="fu">homeDirectory:</span><span class="at"> /home/curry</span></a></code></pre></div>
<h2 id="section"></h2>
<p>また，ざっくりとしたイメージを得るには、先日あった <a href="https://wiki.haskell.jp/Workshop/HaskellDay/2018">Haskell Day 2018</a> での<a href="https://speakerdeck.com/syocy/dhall-haskellfalsexin-tanakiraapuri">発表資料</a>がわかりやすくてオススメ．</p>
<h3 id="使ってみて思うところ">使ってみて思うところ</h3>
<p>もしかしたら最新のバージョンであれば改善しているものもあるかもしれない．</p>
<ul>
<li>基本的な高階関数があり便利
<ul>
<li>map,fold,filter など</li>
</ul></li>
<li>普通のプログラミングのように式を再利用できる</li>
<li>型推論がザコい
<ul>
<li>パラメトリック多相を挟むとダメみたいですね</li>
</ul></li>
<li>結構ビルドエラーがエスパー
<ul>
<li>慣れの問題か？</li>
</ul></li>
<li>YAML のいわゆる連想配列への変換ができない</li>
<li>日本語が化ける ;;
<ul>
<li>まぁ原因はわかるので最新でも治ってなかったらPRしてみるか</li>
</ul></li>
</ul>
<h2 id="何に導入したか">何に導入したか</h2>
<p>弊社が企画してる学生向けの競技型イベントに関するシステムの設定ファイルを Dhall に置き換えてみた． そのシステムは，インフラ・スコアボード・デプロイツールの3つのリポジトリに別れており，ところどころ重複した設定が3つのリポジトリに存在する． そこで，設定用のリポジトリを作って，そこに Dhall で記述した設定を置き，そこから各リポジトリに設定を撒くような仕組みを考えることにした．</p>
<p><img src="/assets/create-dhall-ex/system-with-dhall.png" /></p>
<p>別に Dhall にしたからといって劇的に何かがよくなるわけでは無いのだが，ちょうど良いサンドボックスがあったのでイロイロと試してみる，というのが本音です（笑）</p>
<h2 id="yaml-to-dhall">yaml-to-dhall</h2>
<p>最初の方はせっせと手作業で変換していたが，何個かやって変換の仕方の勘所がわかって来た． そうなると後は作業でしか無いので，なんとかして大量にある設定ファイルを一括変換したい．</p>
<p>調べた限り，YAML から Dhall に変換するプログラムは無さそう(逆はもちろんあるけど)． なのですっごい雑なものを作った．</p>
<ul>
<li><a href="https://github.com/matsubara0507/yaml-to-dhall">matsubara0507/yaml-to-dhall - GitHub</a></li>
</ul>
<p>これは極めて単純なことしかできない． 数値は全て Float に変換されるし，Optional や空リストの書き方が間違っている． とりあえず変換して，手元のエディタで置換すればいいかなと思ったので雑なままである．</p>
<p>時間ができたらそのうち直すかも．</p>
<h2 id="dhall-ex">dhall-ex</h2>
<p>前述した通り，一組の設定ファイル群から複数のリポジトリの設定ファイルを生成したかったのでその仕組みを作った． dhall-ex は次のような設定ファイルを記述する:</p>
<pre class="dhall"><code>{ GH_TOKEN =
      [ &quot;matsubara0507:XXXX&quot; ] : Optional Text
  , root =
      &quot;configs&quot;
  , exports =
      [ { name =
            &quot;deploy-tool&quot;
        , repo =
            [ &quot;git-challenge/deploy-tool&quot; ] : Optional Text
        , paths =
            [ &quot;settings/orgs/orgs.yml&quot;
            , &quot;settings/orgs/review.yml&quot;
            ...
            ]
        }
      ...
      ]
}</code></pre>
<p>別にどっちでもよかったのだが，せっかくなので dhall-ex の設定ファイルも Dhall で記述するようにした． なので，具体例より<a href="https://github.com/matsubara0507/dhall-ex/blob/master/dhall/dhall-ex-type.dhall">型</a>を見た方が早いだろう．</p>
<pre class="dhall"><code>let Export = { name : Text, repo : Optional Text, paths : List Text }
in  { GH_TOKEN : Optional Text, root : Text, exports : List Export }</code></pre>
<p><code>root</code> は設定ファイル群を置くパスで，<code>exports</code> が設定ファイル群の更新先のリポジトリなどの情報だ． <code>repo</code> で GitHub リポジトリを指定し，<code>paths</code> で関連する設定ファイルを列挙する． 例の場合 <code>./config/settings/orgs/orgs.yml.dhall</code> を <code>./.dhall-ex/git-challenge/deploy-tool/settings/orgs/orgs.yml</code> に dhall でビルドする．</p>
<p>ちなみに Dhall のバージョンが古いので <code>Optional</code> がリストのリテラルを利用しているが，最新の Dhall には <code>Some</code> と <code>None</code> があるはず．</p>
<h3 id="機能">機能</h3>
<p>現状はこんな感じ:</p>
<pre><code>$ dhall-ex --help
dhall-ex - cli tool to support dhall

Usage: dhall-ex [-v|--verbose] [-c|--config PATH] [--only NAME] COMMAND
                [--version]

Available options:
  -v,--verbose             Enable verbose mode: verbosity level &quot;debug&quot;
  -c,--config PATH         Configuration file
  --only NAME              Exec subcommand only NAME in config
  --version                Show version
  -h,--help                Show this help text

Available commands:
  sort                     Sort record keys in dhall file
  echo                     Echo TEXT
  init                     Init dhall-ex work directory
  build                    Build Dhall file to YAML or JSON
  deploy                   Deploy builded config file to remote repository
  checkout                 Checkout repository in dhall workspace
  pull                     Pull repository in dhall workspace</code></pre>
<p><code>echo</code> は設定が正しく読み取れるかどうかにだけ使う雑機能． <code>sort</code> レコードのフィールドの順番を型に合わせて並び替えてくれるコマンドだ． 前述した <code>yaml-to-dhall</code> などを使った後に使った(並び変える必要はないんだけど，なんか読みやすいように)．</p>
<p><code>init</code> でリポジトリなどの初期化をし，<code>build</code> で設定ファイルを変換し，<code>deploy</code> でコミットとプッシュを行ってくれる． <code>checkout</code> や <code>pull</code> はただの git コマンドのラッパーだ．</p>
<p>また，<code>--only deploy-tool</code> などとすることでコマンドの実行を特定のリポジトリに限定できる．</p>
<h3 id="実装">実装</h3>
<p>実は内部実装はそこまで難しいことをしていない． Dhall のファイルを読み込み，ビルドし，それを dhall-ex の設定ファイルに則って出力するだけだ． <code>build</code> 以外のコマンドは <a href="http://hackage.haskell.org/package/shelly"><code>shelly</code></a> を使ってシェルスクリプトもどきを実行している．</p>
<h3 id="todo">ToDo</h3>
<ul>
<li>例外処理が雑なのを直す
<ul>
<li>だいたいこの部分が残る（笑）</li>
</ul></li>
<li>任意のコマンドを各リポジトリのワークスペースで実行できるようにする
<ul>
<li>なんか <code>git status</code> とか <code>git branch</code> とかしたい</li>
</ul></li>
<li>並行処理</li>
</ul>
<h1 id="おしまい">おしまい</h1>
<p>随分雑な記事になってしまった．</p>
  </div>
</div>
</article>
]]></summary>
</entry>
<entry>
    <title>Stack の Docker Integration とイメージの自動更新</title>
    <link href="https://matsubara0507.github.io/posts/2018-12-02-stack-docker-travici.html" />
    <id>https://matsubara0507.github.io/posts/2018-12-02-stack-docker-travici.html</id>
    <published>2018-12-02T00:00:00Z</published>
    <updated>2018-12-02T00:00:00Z</updated>
    <summary type="html"><![CDATA[<article class="post card" itemscope itemtype="http://schema.org/BlogPosting">
 <div class="card-content">
  <header class="post-header">
    <h1 class="post-title" itemprop="name headline">Stack の Docker Integration とイメージの自動更新</h1>
    <p class="post-meta">
      <time datetime="2018-12-02" itemprop="datePublished">
        Dec 2, 2018
      </time>
      
      
      <div class="tags">
          <i class="fa fa-tags"></i> <a href="/tags/Haskell.html">Haskell</a> <a href="/tags/Docker.html">Docker</a>
      </div>
      
    </p>
  </header>

  <div class="post-content" itemprop="articleBody">
    <p>本稿は <a href="https://qiita.com/advent-calendar/2018/haskell2">Haskell (その2) Advent Calendar 2018</a> 2日目の記事です．</p>
<p>最近よく CLI ツールを作るんですが，Haskell Stack を持ってなくても CLI ツールが使えるように，ツールを Docker イメージ化するようにしています． その流れを書き留めておこうというの本稿の趣旨です．</p>
<p>ちなみに，以下のリポジトリで実際に試しています．</p>
<ul>
<li><a href="https://github.com/matsubara0507/mdium">matsubara0507/mdium - GitHub</a></li>
<li><a href="https://github.com/matsubara0507/dhall-ex">matsubara0507/dhall-ex - GitHub</a></li>
</ul>
<h2 id="docker-integration">Docker Integration</h2>
<p>Haskell のビルドツール Stack には Dcoker Integration という機能がある（現在最新の安定版である v1.9.1 を想定しています）．</p>
<ul>
<li><a href="https://docs.haskellstack.org/en/v1.9.1/docker_integration/">Docker integration - The Haskell Tool Stack</a></li>
<li><a href="https://docs.haskellstack.org/en/v1.9.1/yaml_configuration/#image">Image - Yaml configuration - The Haskell Tool Stack</a></li>
</ul>
<p>Docker Integration として，ざっくりと次のような機能がある．</p>
<ol type="1">
<li>指定したイメージのコンテナでビルド・実行をする</li>
<li>ビルドした実行ファイルを含めた Docker イメージの作成</li>
</ol>
<p>(2 は正確には Docker Integration とは呼ばない)</p>
<p>ちなみに，Stack はワークスペース内の <code>.stack-work</code> の中に中間結果などを含むビルド結果をバージョンやビルド環境ごとに保存する． そして，<code>--docker</code> オプションでビルドすることで，ローカルではなく Docker のコンテナ内でビルドをしたり，生成したプログラムを実行したりできる． しかも，コンテナ内でビルドした場合でもビルド結果をローカルの <code>.stack-work</code> に保存するのだ．</p>
<h2 id="docker-イメージ内でビルド">Docker イメージ内でビルド</h2>
<p>まず stack.yaml に次のような設定を追加する．</p>
<div class="sourceCode" id="cb1"><pre class="sourceCode yaml"><code class="sourceCode yaml"><a class="sourceLine" id="cb1-1" title="1"><span class="fu">docker:</span></a>
<a class="sourceLine" id="cb1-2" title="2">  <span class="fu">enable:</span><span class="at"> </span><span class="ch">false</span></a>
<a class="sourceLine" id="cb1-3" title="3">  <span class="fu">repo:</span><span class="at"> </span><span class="st">&quot;fpco/stack-build&quot;</span></a></code></pre></div>
<p><code>enable: true</code> にすると，以降の <code>--docker</code> オプションを省けるが，逆に普通にローカルでビルドしたい場合は <code>--no-docker</code> オプションが必要になる． <code>repo</code> でビルドするイメージを指定する． [<code>fpco/stack-build</code> はこれだ]（https://hub.docker.com/r/fpco/stack-build/）． stack.yaml の <code>resolver</code> からイメージタグを自動的に選んでくれるはずだ．</p>
<p>あとは次のコマンドでビルドできる．</p>
<pre><code># repo で指定した docker image の pull
$ stack docker pull

# docker コンテナ内でビルド
$ stack build --docker</code></pre>
<p>他にも細かい設定がかけるが割愛（上述したドキュメントを参照してください）．</p>
<h2 id="docker-イメージを作る">Docker イメージを作る</h2>
<p>stack.yaml に次の設定を追加する．</p>
<div class="sourceCode" id="cb3"><pre class="sourceCode yaml"><code class="sourceCode yaml"><a class="sourceLine" id="cb3-1" title="1"><span class="fu">image:</span></a>
<a class="sourceLine" id="cb3-2" title="2">  <span class="fu">container:</span></a>
<a class="sourceLine" id="cb3-3" title="3">    <span class="fu">name:</span><span class="at"> hoge</span></a>
<a class="sourceLine" id="cb3-4" title="4">    <span class="fu">base:</span><span class="at"> fpco/ubuntu-with-libgmp</span></a></code></pre></div>
<p><code>image.container.name</code> は生成する Docker イメージの名前で，<code>image.container.base</code> は生成する Docker イメージに使うベースイメージだ． ベースイメージは <code>docker.repo</code> などで指定したイメージのOSとあってさえいれば良い（ちなみに <code>fpco/stack-build</code> は <code>ubuntu:16.04</code>）． やってくれることは簡単で， <code>stack build --docker</code> で作成した実行ファイルをベースイメージの <code>local/bin</code> などにコピーするだけだ． なので，もし静的リンクしていない場合はリンクが含まれるベースイメージを指定すると良い(<a href="https://hub.docker.com/r/fpco/ubuntu-with-libgmp/"><code>fpco/ubuntu-with-libgmp</code></a> はそのために使っている)．</p>
<p>あとは次のコマンドでイメージの作成ができる．</p>
<pre><code># repo で指定した docker image の pull
$ stack --docker image container</code></pre>
<p><code>--docker</code> を指定しないとローカルでビルドした実行ファイルをコピーして，生成したイメージのコンテナで実行できなくなるので注意してください（もちろんローカルが ubuntu なら問題ないけど）． あと， stack によるイメージ作成方法では他に Dockerfile の <code>add</code> っぽいことと <code>entrypoints</code> っぽいことができるが，それ以上のことはできない． もっと複雑な設定をしたい場合は，生成したイメージをベースイメージにした Dockerfile を書いたり， Docker のマルチステージビルドを使って設定を上書きしたりするとと良いだろう．</p>
<h2 id="travisci-docker-hub">TravisCI + Docker Hub</h2>
<p>Docker Integration の欠点は Docker Hub の Automated build が使えない点だ． そこで，TravisCI を使って自動ビルドし，Docker Hub にプッシュするようにした． 次のような設定を travis.yml に書くと良いだろう．</p>
<div class="sourceCode" id="cb5"><pre class="sourceCode yaml"><code class="sourceCode yaml"><a class="sourceLine" id="cb5-1" title="1"><span class="kw">-</span> <span class="fu">stage:</span><span class="at"> push docker image</span></a>
<a class="sourceLine" id="cb5-2" title="2">  <span class="fu">if:</span><span class="at"> branch = master</span></a>
<a class="sourceLine" id="cb5-3" title="3">  <span class="fu">script:</span></a>
<a class="sourceLine" id="cb5-4" title="4">   <span class="kw">-</span> stack docker pull</a>
<a class="sourceLine" id="cb5-5" title="5">   <span class="kw">-</span> stack --docker image container</a>
<a class="sourceLine" id="cb5-6" title="6">   <span class="kw">-</span> echo <span class="st">&quot;$DOCKER_PASSWORD&quot;</span> | docker login -u <span class="st">&quot;$DOCKER_USERNAME&quot;</span> --password-stdin</a>
<a class="sourceLine" id="cb5-7" title="7">   <span class="kw">-</span> docker push $TRAVIS_REPO_SLUG</a></code></pre></div>
<p>実は <code>stack --docker image container</code> でビルドまでしてくれる． Docker Hub には Token のようなものはないので <code>--password-stdin</code> とパイプを使って普通のパスワードでログインする． あとは <code>image.container.name</code> で指定する名前を <code>hoge</code> ではなく <code>user_name/repo_name</code> としておけば良い． もちろんこれは GitHub と Docker Hub のユーザ名が同じ場合にしか使えない． 違う場合は直接書いてね．</p>
<h1 id="おしまい">おしまい</h1>
<p>この方法なら実行ファイルしか入ってないイメージが出来上がるので軽いし， stack のビルド遅すぎて利用者側は厳しい問題も緩和するので最近のマイブームです．</p>
  </div>
</div>
</article>
]]></summary>
</entry>
<entry>
    <title>Haskell Day 2018 に参加してきた</title>
    <link href="https://matsubara0507.github.io/posts/2018-11-17-join-haskell-day-2018.html" />
    <id>https://matsubara0507.github.io/posts/2018-11-17-join-haskell-day-2018.html</id>
    <published>2018-11-17T00:00:00Z</published>
    <updated>2018-11-17T00:00:00Z</updated>
    <summary type="html"><![CDATA[<article class="post card" itemscope itemtype="http://schema.org/BlogPosting">
 <div class="card-content">
  <header class="post-header">
    <h1 class="post-title" itemprop="name headline">Haskell Day 2018 に参加してきた</h1>
    <p class="post-meta">
      <time datetime="2018-11-17" itemprop="datePublished">
        Nov 17, 2018
      </time>
      
      
      <div class="tags">
          <i class="fa fa-tags"></i> <a href="/tags/Haskell.html">Haskell</a> <a href="/tags/event.html">event</a>
      </div>
      
    </p>
  </header>

  <div class="post-content" itemprop="articleBody">
    <p>11月10日にあった「<a href="https://haskell-jp.connpass.com/event/92617/">Haskell Day 2018</a>」に参加してきたのでメモ書きです．</p>
<h2 id="午前中-ハンズオン">午前中 : ハンズオン</h2>
<p><a href="https://github.com/igrep">igrep</a> 氏が中心になって作成した <a href="https://github.com/haskell-jp/makeMistakesToLearnHaskell"><code>makeMistakesToLearnHaskell</code></a> を使ったハンズオン． ぼくも少しだけコミットした．</p>
<p>当日の様子は，みなさんかなり黙々と作業してて静かだったが，Twitter 上で質問している人がチラチラいた． それらの Twitter の様子などをみてリアルタイムに修正を行なっていたのはすごい．</p>
<h2 id="午後">午後</h2>
<p>そのうちログミーが公開されるそうなので，概要と感想だけ．</p>
<h3 id="haskellを導入した話hrrの話">Haskellを導入した話/HRRの話</h3>
<p><a href="https://htmlpreview.github.io/?https://github.com/khibino/haskell-day-2018/blob/master/presentation.html">発表資料はこちら</a>．</p>
<p>10年近く職業 Haskeller をやっていた <a href="https://github.com/khibino">khibino</a> 氏が，当時 Haskell を導入するに至った話と，彼が作った <a href="https://hackage.haskell.org/package/relational-record">HRR</a> というライブラリの紹介 Perl に変わるグルー言語を求めて Haskell に行き着いたそうだ． 「GHC6.8 ですよ，GHC8.6 じゃなく，すごく無いですか？」すごい． HRRは面白そうだけど，使うタイミングがないや．</p>
<h3 id="servantで実現する高速かつ安全なapi">Servantで実現する高速かつ安全なAPI</h3>
<p><a href="https://speakerdeck.com/daishi/servantdexing-uan-quan-katugao-su-naapikai-fa">発表資料はこちら</a>．</p>
<p>同様に職業 Haskeller の <a href="https://github.com/nakaji-dayo">nakaji</a> 氏の発表． <a href="https://haskell-servant.github.io/">Servant</a> という型レベルに RSETful API を定義できるパッケージを実際にどのように使っているかという話． Servant は僕もよく使う． 「実際に依存してるパッケージの紹介」や「実運用する上で困ったこと」などもあって興味深い．</p>
<h3 id="並列並行言語haskell">並列並行言語Haskell</h3>
<p><a href="https://speakerdeck.com/syocy/bing-lie-bing-xing-yan-yu-haskell">発表資料はこちら</a>．</p>
<p>次のも含めて2本連続で <a href="https://github.com/syocy">syocy</a> 氏の発表． Haskell における並行・並列プログラミングについての紹介． 並行・並列プログラミングとして最近は Go・Elixir/Erlang・Rust などが注目されているが，Haskell は20年近く前から並行・並列に対して意識してる． おまけとして，ツールの話や並行並列系パッケージの話があって勉強になる． 余談として「<a href="https://a-tour-of-go-in-haskell.syocy.net/ja_JP/index.html">A Tour of Go in Haskell</a>」というのを作ったが，英語版も作ったところめっさ PR が来たという話をしてくれた． やっぱ分母の大きい自然言語は強い．</p>
<h3 id="dhall-haskellの新たなキラーアプリ">Dhall: Haskellの新たなキラーアプリ</h3>
<p><a href="https://speakerdeck.com/syocy/dhall-haskellfalsexin-tanakiraapuri">発表資料はこちら</a>．</p>
<p>個人的に今回一番面白かった． <a href="https://github.com/dhall-lang/dhall-lang">Dhall</a> というアプリケーションの紹介． Dhall は設定ファイルを記述するための DSL である． 設定ファイルの多くは YAML や JSON などで書かれるが，複数の YAML が複雑な依存関係を持っている場合(k8sとか)は静的解析したいよね？ しかし逆に「設定ファイルとしての領分」を守って欲しいという要求もある(汎用プログラミング言語としての役割はいらない)． そこで Dhall です！って感じの発表だった． 最後の導入事例として，自社の設定ファイル群を書き換えた話も面白かった．</p>
<h3 id="semigroupとはmonoidとは環とは">Semigroupとは？Monoidとは？環とは？</h3>
<p><a href="https://aiya000.github.io/Maid/haskell-day-2018-algebra/">発表資料はこちら</a>．</p>
<p><a href="https://github.com/aiya000">aiya</a> 氏の発表． 群や環などの代数的構造についての話． ステップバイステップに要件が増えていくのでわかりやすい説明だった．</p>
<p>ちなみに個人的な肌感として，このような数学的な素養がないと Haskell プログラミングができないかというと，そうでもないと思う． 僕自身は教養としてそのあたりを知ってはいるので微妙なところだが，普段 Haskell プログラミングしてる時に意識してはいないはず． ただ，いくつかの言語機能やライブラリは数学や論理学など学術的なバックグランドを持ってることがある． そのような場合は「なぜこのような仕様なのか」「どうしてこのような仕組みでうまくいくかのか」などは，学術論文にしか書いてないことが多い． そのため，そういう機能やライブラリの仕組みを <strong>ちゃんと</strong> 追おうとする場合は数学的素養がないと厳しいかもしれない．</p>
<h3 id="haskellで作るcli">Haskellで作るCLI</h3>
<p>僕の発表．後述します．</p>
<h3 id="gloss-動かして遊んで学ぶhaskell">gloss: 動かして遊んで学ぶHaskell</h3>
<p><a href="https://qiita.com/lotz/items/bdb04c771efc8919b79c">発表資料はこちら</a>．</p>
<p><a href="https://github.com/lotz84">lotz</a> 氏の発表． Haskell を勉強したあと何するかシリーズ，GUI 編． 作りたいものがはっきりないときは <a href="http://hackage.haskell.org/package/gloss">gloss</a> で振り子やライフゲームを作って遊んでみよう，という感じ． 僕自身はあんまり GUI に関心がないけど，実際に作りたいものがない場合はこういうので色々出力して手をうごしてみるのは正しい． 時間あるときになんか変なことできないか調べてみようかな．</p>
<h3 id="liszt-あるいは永続データ構造を真に永続させる方法">Liszt あるいは永続データ構造を真に永続させる方法</h3>
<p><a href="https://shared-assets.adobe.com/link/353213c2-281a-4a53-6cff-a52bff1314c1">発表資料はこちら</a>．</p>
<p>僕が愛用している extensible というライブラリの作者，<a href="https://github.com/fumieval">fumieval</a> 氏の発表． <a href="https://github.com/fumieval/liszt">liszt</a> を作り始めていたことは知っていたので気になっていた． Liszt は Kafka のような大量のデータを収集・配信するためのプログラムだそうだ(名前も <a href="https://ja.wikipedia.org/wiki/フランツ・カフカ">Franz Kafka</a> に対抗して <a href="https://ja.wikipedia.org/wiki/フランツ・リスト">Franz Liszt</a> らしい)． 内部のデータ構造として Skew binary random access list を要素としてもつ 2-3 木 を用いている． このあたりの詳しい話は「<a href="https://asciidwango.jp/post/160831986220/純粋関数型データ構造">純粋関数型データ構造</a>」を読むと良いとのこと(本の名前が上がった瞬間「ですよね〜」となってたw)．</p>
<h2 id="自分の話">自分の話</h2>
<p>Haskell で CLI を作るうえでの小話をした。 スライドはこれ． <iframe src="//www.slideshare.net/slideshow/embed_code/key/FQE1QxbCST8kYi" width="595" height="485" frameborder="0" marginwidth="0" marginheight="0" scrolling="no" style="border:1px solid #CCC; border-width:1px; margin-bottom:5px; max-width: 100%;" allowfullscreen> </iframe></p>
<p>実はどれも，既に記事におこしたことのあるネタだった．</p>
<ol type="1">
<li>コマンドライン引数
<ul>
<li><code>getArgs</code>・<code>GetOpt</code>・<code>optparse-applicative</code> について紹介</li>
<li><code>optparse-applicative</code> + <code>extensible</code> でサブコマンドも網羅性をチェック</li>
<li>「<a href="2018-05-10-make-cli-with-haskell-in-2018">オレ的 Haskell で CLI を作る方法 2018</a>」</li>
</ul></li>
<li>Alt. Prelude
<ul>
<li>Prelude 微妙だなって思ったら Alt. Prelude なパッケージを使ってみようという話</li>
<li>具体的には愛用している RIO を紹介した</li>
<li>「<a href="2018-04-13-try-rio-1">rio ライブラリを試す その１</a>」</li>
</ul></li>
<li>Stack Template
<ul>
<li>よく使う依存パッケージやアプリのインターフェースの書き方がパターン化してきたら Stack Template 化しようという話</li>
<li>Stack 1.9 から GitHub にあるテンプレートを参照できるようになった</li>
<li>GitHub にあるテンプレートを出力する stack-tpls コマンドの紹介</li>
<li>「<a href="2018-10-14-collect-stack-templates">stack-templates を集める with GraphQL</a>」</li>
</ul></li>
</ol>
<p>Haskell を知ってる人にとってはあんまり面白くない話題だったかもしれないが，まぁまぁ(発言が)ウケていたのでよかった(?)．</p>
<h2 id="おしまい">おしまい</h2>
<p>初心者がわかりやすく，玄人にもウケるネタってなんだろうね． 来年もやるかもしれないから考えておこう．</p>
  </div>
</div>
</article>
]]></summary>
</entry>

</feed>
