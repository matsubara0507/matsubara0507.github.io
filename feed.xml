<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
    <title>ひげメモ</title>
    <link href="https://matsubara0507.github.io/feed.xml" rel="self" />
    <link href="https://matsubara0507.github.io" />
    <id>https://matsubara0507.github.io/feed.xml</id>
    <author>
        <name>MATSUBARA Nobutada</name>
        <email></email>
    </author>
    <updated>2019-08-05T00:00:00Z</updated>
    <entry>
    <title>elmap.hs プロジェクトを作りました</title>
    <link href="https://matsubara0507.github.io/posts/2019-08-05-create-elmap-project.html" />
    <id>https://matsubara0507.github.io/posts/2019-08-05-create-elmap-project.html</id>
    <published>2019-08-05T00:00:00Z</published>
    <updated>2019-08-05T00:00:00Z</updated>
    <summary type="html"><![CDATA[<div class="post-content" itemprop="articleBody">
    <p>GUI 付きのツールを作成したい時、普段は Elm を使います． さらにバックエンドを付けるときは Haskell + Elm で実装し，Elm 側で呼び出す API クライアントは <a href="http://hackage.haskell.org/package/elm-export">elm-export</a> と <a href="http://hackage.haskell.org/package/servant-elm">servant-elm</a> というパッケージを使い，Haskell Servant の API 定義から自動生成させていました．</p>
<p>elm-export は Elm 0.19 に追いつけてなかったので独自にフォークして運用し，また愛用している extensible パッケージにも独自で対応していました． しかし，servant-elm が Elm 0.19 に対応するために依存パッケージを elm-export から <a href="http://hackage.haskell.org/package/elm-bridge">elm-bridge</a> に変更したところ，独自で対応してた部分と色々都合が悪かったので，それらのクッションとなる薄いラッパーパッケージ群として elmap.hs プロジェクトを作成しました:</p>
<h2 id="section"><iframe width="426" height="162" scrolling="no" frameborder="0" src="https://matsubara0507.github.io/my-github-cards/?target=matsubara0507/elmap.hs"></iframe></h2>
<p>この記事は elmap.hs を作る上で色々したことのメモ書きです．</p>
<h2 id="なぜ-elm-bridgeservant-elm-ではダメか">なぜ elm-bridge/servant-elm ではダメか</h2>
<p>を説明するためにまずは elm-bridge パッケージについて紹介する．</p>
<h3 id="elm-bridge-パッケージ">elm-bridge パッケージ</h3>
<p>elm-bridge は Haskell の型定義から Elm の型定義などを生成するためのパッケージだ． 型定義の他にも，Elm 側の JSON デコーダー・エンコーダーも自動生成してくれる(メタプログラミングなどが無い Elm にとってこれは大変嬉しい)．</p>
<p>仕組みは簡単で，簡易的な Elm の型定義などを Haskell で表現している．</p>
<div class="sourceCode" id="cb1"><pre class="sourceCode haskell"><code class="sourceCode haskell"><a class="sourceLine" id="cb1-1" title="1"><span class="co">-- Elm の型定義そのもの</span></a>
<a class="sourceLine" id="cb1-2" title="2"><span class="kw">data</span> <span class="dt">ETypeDef</span></a>
<a class="sourceLine" id="cb1-3" title="3">   <span class="fu">=</span> <span class="dt">ETypeAlias</span> <span class="dt">EAlias</span>         <span class="co">-- レコードの型エイリアス</span></a>
<a class="sourceLine" id="cb1-4" title="4">   <span class="fu">|</span> <span class="dt">ETypePrimAlias</span> <span class="dt">EPrimAlias</span> <span class="co">-- 普通の型エイリアス</span></a>
<a class="sourceLine" id="cb1-5" title="5">   <span class="fu">|</span> <span class="dt">ETypeSum</span> <span class="dt">ESum</span>             <span class="co">-- 直和型</span></a>
<a class="sourceLine" id="cb1-6" title="6"></a>
<a class="sourceLine" id="cb1-7" title="7"><span class="co">-- Elm の型自身</span></a>
<a class="sourceLine" id="cb1-8" title="8"><span class="kw">data</span> <span class="dt">EType</span></a>
<a class="sourceLine" id="cb1-9" title="9">   <span class="fu">=</span> <span class="dt">ETyVar</span> <span class="dt">ETVar</span>       <span class="co">-- 型変数</span></a>
<a class="sourceLine" id="cb1-10" title="10">   <span class="fu">|</span> <span class="dt">ETyCon</span> <span class="dt">ETCon</span>       <span class="co">-- コンストラクタ</span></a>
<a class="sourceLine" id="cb1-11" title="11">   <span class="fu">|</span> <span class="dt">ETyApp</span> <span class="dt">EType</span> <span class="dt">EType</span> <span class="co">-- 型適用</span></a>
<a class="sourceLine" id="cb1-12" title="12">   <span class="fu">|</span> <span class="dt">ETyTuple</span> <span class="dt">Int</span>       <span class="co">-- タプル型</span></a></code></pre></div>
<p>Elm での型定義の構文を表したのが <code>ETypeDef</code> 型で，関数の型を書くときなどの型を表現する構文を表したのが <code>EType</code> 型だ． <code>toElmType</code> 関数を使うことで任意の型の <code>EType</code> を <code>Typeable</code> で機械的に導出したり，<code>deriveElmDef</code> と TemplateHaskell で <code>ETypeDef</code> への変換を導出することができる:</p>
<div class="sourceCode" id="cb2"><pre class="sourceCode haskell"><code class="sourceCode haskell"><a class="sourceLine" id="cb2-1" title="1"><span class="ot">toElmType ::</span> <span class="dt">Typeable</span> a <span class="ot">=&gt;</span> <span class="dt">Proxy</span> a <span class="ot">-&gt;</span> <span class="dt">EType</span></a>
<a class="sourceLine" id="cb2-2" title="2"></a>
<a class="sourceLine" id="cb2-3" title="3"><span class="co">-- ETypeDef への変換は型クラスで定義する</span></a>
<a class="sourceLine" id="cb2-4" title="4"><span class="kw">class</span> <span class="dt">IsElmDefinition</span> a <span class="kw">where</span></a>
<a class="sourceLine" id="cb2-5" title="5"><span class="ot">  compileElmDef ::</span> <span class="dt">Proxy</span> a <span class="ot">-&gt;</span> <span class="dt">ETypeDef</span></a>
<a class="sourceLine" id="cb2-6" title="6"></a>
<a class="sourceLine" id="cb2-7" title="7"><span class="co">-- Hoge 型の IsElmDefinition 型クラスのインスタンスを導出</span></a>
<a class="sourceLine" id="cb2-8" title="8">deriveElmDef defaultOptions &#39;<span class="dt">&#39;Hoge</span></a></code></pre></div>
<p>ちなみに <code>deriveElmDef</code> の代わりに <code>deriveBoth</code> を使うと aeson 系の型クラスのインスタンスも一緒に導出してくれる． そして <code>ETypeDef</code> などに変換したあとは，<code>renderElm</code> 関数や <code>makeElmModule</code> 関数を使うことで Elm のコードに変換できる．</p>
<h3 id="都合の悪い部分">都合の悪い部分</h3>
<p>問題はどっちかというと servant-elm にある． servant-elm は Elm 関数の変換に内部で <code>toElmType</code> 関数を使っている:</p>
<div class="sourceCode" id="cb3"><pre class="sourceCode haskell"><code class="sourceCode haskell"><a class="sourceLine" id="cb3-1" title="1"><span class="kw">data</span> <span class="dt">LangElm</span></a>
<a class="sourceLine" id="cb3-2" title="2"></a>
<a class="sourceLine" id="cb3-3" title="3"><span class="kw">instance</span> <span class="dt">Typeable</span> a <span class="ot">=&gt;</span> <span class="dt">HasForeignType</span> <span class="dt">LangElm</span> <span class="dt">EType</span> a <span class="kw">where</span></a>
<a class="sourceLine" id="cb3-4" title="4">  typeFor _ _ _ <span class="fu">=</span> toElmType (<span class="dt">Proxy</span><span class="ot"> ::</span> <span class="dt">Proxy</span> a)</a>
<a class="sourceLine" id="cb3-5" title="5"></a>
<a class="sourceLine" id="cb3-6" title="6"><span class="ot">getEndpoints ::</span></a>
<a class="sourceLine" id="cb3-7" title="7">  (<span class="dt">HasForeign</span> <span class="dt">LangElm</span> <span class="dt">EType</span> api, <span class="dt">GenerateList</span> <span class="dt">EType</span> (<span class="dt">Foreign</span> <span class="dt">EType</span> api))</a>
<a class="sourceLine" id="cb3-8" title="8">  <span class="ot">=&gt;</span> <span class="dt">Proxy</span> api</a>
<a class="sourceLine" id="cb3-9" title="9">  <span class="ot">-&gt;</span> [<span class="dt">Req</span> <span class="dt">EType</span>]</a>
<a class="sourceLine" id="cb3-10" title="10">getEndpoints <span class="fu">=</span> listFromAPI (<span class="dt">Proxy</span><span class="ot"> ::</span> <span class="dt">Proxy</span> <span class="dt">LangElm</span>) (<span class="dt">Proxy</span><span class="ot"> ::</span> <span class="dt">Proxy</span> <span class="dt">EType</span>)</a></code></pre></div>
<p>ここで，extensible パッケージの拡張可能レコード型に <code>toElmType</code> を使ってみると…</p>
<div class="sourceCode" id="cb4"><pre class="sourceCode haskell"><code class="sourceCode haskell"><a class="sourceLine" id="cb4-1" title="1"><span class="fu">&gt;&gt;&gt;</span> <span class="kw">type</span> <span class="dt">User</span> <span class="fu">=</span> <span class="dt">Record</span> &#39;[ <span class="st">&quot;id&quot;</span> <span class="fu">&gt;:</span> <span class="dt">Int</span>, <span class="st">&quot;name&quot;</span> <span class="fu">&gt;:</span> <span class="dt">String</span> ]</a>
<a class="sourceLine" id="cb4-2" title="2"><span class="fu">&gt;&gt;&gt;</span> toElmType (<span class="dt">Proxy</span><span class="ot"> ::</span> <span class="dt">Proxy</span> <span class="dt">User</span>)</a>
<a class="sourceLine" id="cb4-3" title="3"><span class="dt">ETyApp</span> (<span class="dt">ETyApp</span> (<span class="dt">ETyCon</span> (<span class="dt">ETCon</span> {tc_name <span class="fu">=</span> <span class="st">&quot;:&amp;&quot;</span>})) (<span class="dt">ETyApp</span> (<span class="dt">ETyApp</span> (<span class="dt">ETyCon</span> (<span class="dt">ETCon</span> {tc_name <span class="fu">=</span> <span class="st">&quot;&#39;:&quot;</span>})) (<span class="dt">ETyApp</span> (<span class="dt">ETyApp</span> (<span class="dt">ETyCon</span> (<span class="dt">ETCon</span> {tc_name <span class="fu">=</span> <span class="st">&quot;&#39;:&gt;&quot;</span>})) (<span class="dt">ETyCon</span> (<span class="dt">ETCon</span> {tc_name <span class="fu">=</span> <span class="st">&quot;\&quot;id\&quot;&quot;</span>}))) (<span class="dt">ETyCon</span> (<span class="dt">ETCon</span> {tc_name <span class="fu">=</span> <span class="st">&quot;Int&quot;</span>})))) (<span class="dt">ETyApp</span> (<span class="dt">ETyApp</span> (<span class="dt">ETyCon</span> (<span class="dt">ETCon</span> {tc_name <span class="fu">=</span> <span class="st">&quot;&#39;:&quot;</span>})) (<span class="dt">ETyApp</span> (<span class="dt">ETyApp</span> (<span class="dt">ETyCon</span> (<span class="dt">ETCon</span> {tc_name <span class="fu">=</span> <span class="st">&quot;&#39;:&gt;&quot;</span>})) (<span class="dt">ETyCon</span> (<span class="dt">ETCon</span> {tc_name <span class="fu">=</span> <span class="st">&quot;\&quot;name\&quot;&quot;</span>}))) (<span class="dt">ETyCon</span> (<span class="dt">ETCon</span> {tc_name <span class="fu">=</span> <span class="st">&quot;String&quot;</span>})))) (<span class="dt">ETyCon</span> (<span class="dt">ETCon</span> {tc_name <span class="fu">=</span> <span class="st">&quot;&#39;[]&quot;</span>}))))) (<span class="dt">ETyApp</span> (<span class="dt">ETyCon</span> (<span class="dt">ETCon</span> {tc_name <span class="fu">=</span> <span class="st">&quot;Field&quot;</span>})) (<span class="dt">ETyCon</span> (<span class="dt">ETCon</span> {tc_name <span class="fu">=</span> <span class="st">&quot;Identity&quot;</span>})))</a></code></pre></div>
<p>これは絶対に Elm 側で動かない… そもそも拡張可能レコードは型エイリアスで定義されているため型名の情報が落ちてしまうし，理想的には Elm のレコード型に変換してほしい．</p>
<h2 id="section-1"></h2>
<p>ということで，extensible の拡張可能レコードでもうまく動作する薄いラッパーパッケージを作ることにした．</p>
<h2 id="elmap.hs-プロジェクト">elmap.hs プロジェクト</h2>
<p>elm-bridge と servant-elm には生成した <code>ETypeDef</code> や <code>EType</code> を再変換する関数を指定することができる:</p>
<div class="sourceCode" id="cb5"><pre class="sourceCode haskell"><code class="sourceCode haskell"><a class="sourceLine" id="cb5-1" title="1"><span class="co">-- servant-elm</span></a>
<a class="sourceLine" id="cb5-2" title="2"><span class="kw">data</span> <span class="dt">ElmOptions</span> <span class="fu">=</span> <span class="dt">ElmOptions</span></a>
<a class="sourceLine" id="cb5-3" title="3">  {<span class="ot"> urlPrefix             ::</span> <span class="dt">UrlPrefix</span></a>
<a class="sourceLine" id="cb5-4" title="4">  ,<span class="ot"> elmTypeAlterations    ::</span> (<span class="dt">EType</span> <span class="ot">-&gt;</span> <span class="dt">EType</span>)</a>
<a class="sourceLine" id="cb5-5" title="5">    <span class="co">-- ^ 生成した ETypes を変換しなおす</span></a>
<a class="sourceLine" id="cb5-6" title="6">  ,<span class="ot"> elmAlterations        ::</span> (<span class="dt">ETypeDef</span> <span class="ot">-&gt;</span> <span class="dt">ETypeDef</span>)</a>
<a class="sourceLine" id="cb5-7" title="7">    <span class="co">-- ^ 生成した ETypeDef を変換しなおす</span></a>
<a class="sourceLine" id="cb5-8" title="8">  ,<span class="ot"> emptyResponseElmTypes ::</span> [<span class="dt">EType</span>]</a>
<a class="sourceLine" id="cb5-9" title="9">  ,<span class="ot"> stringElmTypes        ::</span> [<span class="dt">EType</span>]</a>
<a class="sourceLine" id="cb5-10" title="10">  }</a></code></pre></div>
<p>しかし，これで extensible の型を変換しなおすのは大変なので <code>toElmType</code> のところから置き換える必要がある(そもそも型名の情報が落ちてしまっているし)．</p>
<h3 id="elmap-パッケージ">elmap パッケージ</h3>
<p><code>toElmType</code> が扱いにくい理由は，<code>Typeable</code> 型クラスから自動で定義を導出されてしまうからだ． 多くの場合，自動で導出される方が嬉しいのだが，今回は型名の情報を与えたり Elm のレコード型に対応させたりなど，個別に対応したいので型クラスを利用することにする:</p>
<div class="sourceCode" id="cb6"><pre class="sourceCode haskell"><code class="sourceCode haskell"><a class="sourceLine" id="cb6-1" title="1"><span class="kw">class</span> <span class="dt">IsElmType</span> a <span class="kw">where</span></a>
<a class="sourceLine" id="cb6-2" title="2"><span class="ot">  compileElmType ::</span> <span class="dt">Proxy</span> a <span class="ot">-&gt;</span> <span class="dt">EType</span></a>
<a class="sourceLine" id="cb6-3" title="3"></a>
<a class="sourceLine" id="cb6-4" title="4"><span class="kw">instance</span> <span class="dt">IsElmType</span> <span class="dt">Int</span> <span class="kw">where</span></a>
<a class="sourceLine" id="cb6-5" title="5">  compileElmType _ <span class="fu">=</span> toElmType (<span class="dt">Proxy</span><span class="ot"> ::</span> <span class="dt">Proxy</span> <span class="dt">Int</span>)</a>
<a class="sourceLine" id="cb6-6" title="6"><span class="kw">instance</span> <span class="dt">IsElmType</span> <span class="dt">Float</span> <span class="kw">where</span></a>
<a class="sourceLine" id="cb6-7" title="7">  compileElmType _ <span class="fu">=</span> toElmType (<span class="dt">Proxy</span><span class="ot"> ::</span> <span class="dt">Proxy</span> <span class="dt">Float</span>)</a></code></pre></div>
<p>さらに，リネームを簡単に行いやすいようにリネームする関数を定義しておいた:</p>
<div class="sourceCode" id="cb7"><pre class="sourceCode haskell"><code class="sourceCode haskell"><a class="sourceLine" id="cb7-1" title="1"><span class="ot">toElmTypeWith ::</span> <span class="dt">Typeable</span> a <span class="ot">=&gt;</span> <span class="dt">String</span> <span class="ot">-&gt;</span> <span class="dt">Proxy</span> a <span class="ot">-&gt;</span> <span class="dt">EType</span></a>
<a class="sourceLine" id="cb7-2" title="2"></a>
<a class="sourceLine" id="cb7-3" title="3"><span class="co">-- Elm の場合 `Order` という型名になっている</span></a>
<a class="sourceLine" id="cb7-4" title="4"><span class="kw">instance</span> <span class="dt">IsElmType</span> <span class="dt">Ordering</span> <span class="kw">where</span></a>
<a class="sourceLine" id="cb7-5" title="5">  compileElmType _ <span class="fu">=</span> toElmTypeWith <span class="st">&quot;Order&quot;</span> (<span class="dt">Proxy</span> <span class="fu">@</span> <span class="dt">Ordering</span>)</a></code></pre></div>
<h3 id="servant-elmap-パッケージ">servant-elmap パッケージ</h3>
<p>servant 側では elmap パッケージで定義した <code>IsElmType</code> 型クラスを利用するようにする:</p>
<div class="sourceCode" id="cb8"><pre class="sourceCode haskell"><code class="sourceCode haskell"><a class="sourceLine" id="cb8-1" title="1"><span class="kw">data</span> <span class="dt">LangElmap</span></a>
<a class="sourceLine" id="cb8-2" title="2"></a>
<a class="sourceLine" id="cb8-3" title="3"><span class="kw">instance</span> <span class="dt">IsElmType</span> a <span class="ot">=&gt;</span> <span class="dt">HasForeignType</span> <span class="dt">LangElmap</span> <span class="dt">EType</span> a <span class="kw">where</span></a>
<a class="sourceLine" id="cb8-4" title="4">  typeFor _ _ _ <span class="fu">=</span> compileElmType (<span class="dt">Proxy</span> <span class="fu">@</span> a)</a>
<a class="sourceLine" id="cb8-5" title="5"></a>
<a class="sourceLine" id="cb8-6" title="6"><span class="ot">getEndpoints ::</span></a>
<a class="sourceLine" id="cb8-7" title="7">  (<span class="dt">HasForeign</span> <span class="dt">LangElmap</span> <span class="dt">EType</span> api, <span class="dt">GenerateList</span> <span class="dt">EType</span> (<span class="dt">Foreign</span> <span class="dt">EType</span> api))</a>
<a class="sourceLine" id="cb8-8" title="8">  <span class="ot">=&gt;</span> <span class="dt">Proxy</span> api</a>
<a class="sourceLine" id="cb8-9" title="9">  <span class="ot">-&gt;</span> [<span class="dt">Req</span> <span class="dt">EType</span>]</a>
<a class="sourceLine" id="cb8-10" title="10">getEndpoints <span class="fu">=</span> listFromAPI (<span class="dt">Proxy</span> <span class="fu">@</span> <span class="dt">LangElmap</span>) (<span class="dt">Proxy</span> <span class="fu">@</span> <span class="dt">EType</span>)</a></code></pre></div>
<p><code>getEndpoints</code> 関数を書き換えたので，この関数に依存している関数を全部置き換えた(ということをする必要があったのでフォークせずに薄いラッパーパッケージを作るようにした)．</p>
<h3 id="extensible-elmap-パッケージ">extensible-elmap パッケージ</h3>
<p>最後に，extensible の拡張可能レコード型に対して <code>IsElmType</code> 型クラスのインスタンスを定義すれば完成． 完成品はこちら:</p>
<div class="sourceCode" id="cb9"><pre class="sourceCode haskell"><code class="sourceCode haskell"><a class="sourceLine" id="cb9-1" title="1"><span class="ot">compileElmRecordTypeWith ::</span> <span class="dt">String</span> <span class="ot">-&gt;</span> <span class="dt">Proxy</span> (<span class="dt">RecordOf</span> h xs) <span class="ot">-&gt;</span> <span class="dt">EType</span></a>
<a class="sourceLine" id="cb9-2" title="2">compileElmRecordTypeWith name _ <span class="fu">=</span> <span class="dt">ETyCon</span> <span class="fu">$</span> <span class="dt">ETCon</span> name</a>
<a class="sourceLine" id="cb9-3" title="3"></a>
<a class="sourceLine" id="cb9-4" title="4"><span class="co">-- ここから下は利用者側で定義する</span></a>
<a class="sourceLine" id="cb9-5" title="5"><span class="kw">type</span> <span class="dt">User</span> <span class="fu">=</span> <span class="dt">Record</span> &#39;[ <span class="st">&quot;id&quot;</span> <span class="fu">&gt;:</span> <span class="dt">Int</span>, <span class="st">&quot;name&quot;</span> <span class="fu">&gt;:</span> <span class="dt">String</span> ]</a>
<a class="sourceLine" id="cb9-6" title="6"></a>
<a class="sourceLine" id="cb9-7" title="7"><span class="kw">instance</span> <span class="dt">IsElmType</span> <span class="dt">User</span> <span class="kw">where</span></a>
<a class="sourceLine" id="cb9-8" title="8">  compileElmType <span class="fu">=</span> compileElmRecordTypeWith <span class="st">&quot;User&quot;</span></a></code></pre></div>
<p><code>ElmType</code> 自体は型名を覚えるだけなので簡単(とはいえ，この定義だと型変数などには未対応だが…)． さらに <code>IsElmDefinition</code> 型クラスのインスタンスも定義する:</p>
<div class="sourceCode" id="cb10"><pre class="sourceCode haskell"><code class="sourceCode haskell"><a class="sourceLine" id="cb10-1" title="1"><span class="ot">compileElmRecordAliasWith ::</span></a>
<a class="sourceLine" id="cb10-2" title="2">  <span class="kw">forall</span> xs h <span class="fu">.</span> <span class="dt">Forall</span> (<span class="dt">KeyTargetAre</span> <span class="dt">KnownSymbol</span> <span class="dt">IsElmType</span>) xs</a>
<a class="sourceLine" id="cb10-3" title="3">  <span class="ot">=&gt;</span> <span class="dt">String</span> <span class="ot">-&gt;</span> <span class="dt">Proxy</span> (<span class="dt">RecordOf</span> h xs) <span class="ot">-&gt;</span> <span class="dt">EAlias</span></a>
<a class="sourceLine" id="cb10-4" title="4">compileElmRecordAliasWith name _ <span class="fu">=</span> <span class="dt">EAlias</span></a>
<a class="sourceLine" id="cb10-5" title="5">  { ea_name <span class="fu">=</span> <span class="dt">ETypeName</span> name []</a>
<a class="sourceLine" id="cb10-6" title="6">  , ea_fields <span class="fu">=</span> fields</a>
<a class="sourceLine" id="cb10-7" title="7">  , ea_omit_null <span class="fu">=</span> <span class="dt">False</span></a>
<a class="sourceLine" id="cb10-8" title="8">  , ea_newtype <span class="fu">=</span> <span class="dt">False</span></a>
<a class="sourceLine" id="cb10-9" title="9">  , ea_unwrap_unary <span class="fu">=</span> <span class="dt">True</span></a>
<a class="sourceLine" id="cb10-10" title="10">  }</a>
<a class="sourceLine" id="cb10-11" title="11">  <span class="kw">where</span></a>
<a class="sourceLine" id="cb10-12" title="12">    fields <span class="fu">=</span> henumerateFor</a>
<a class="sourceLine" id="cb10-13" title="13">      (<span class="dt">Proxy</span> <span class="fu">@</span> (<span class="dt">KeyTargetAre</span> <span class="dt">KnownSymbol</span> <span class="dt">IsElmType</span>))</a>
<a class="sourceLine" id="cb10-14" title="14">      (<span class="dt">Proxy</span> <span class="fu">@</span> xs)</a>
<a class="sourceLine" id="cb10-15" title="15">      (\m acc <span class="ot">-&gt;</span> (stringKeyOf m, compileElmType <span class="fu">$</span> proxyTargetOf m) <span class="fu">:</span> acc)</a>
<a class="sourceLine" id="cb10-16" title="16">      []</a>
<a class="sourceLine" id="cb10-17" title="17"></a>
<a class="sourceLine" id="cb10-18" title="18"><span class="co">-- ここから下は利用者側で定義する</span></a>
<a class="sourceLine" id="cb10-19" title="19"><span class="kw">instance</span> <span class="dt">IsElmDefinition</span> <span class="dt">User</span> <span class="kw">where</span></a>
<a class="sourceLine" id="cb10-20" title="20">  compileElmDef <span class="fu">=</span> <span class="dt">ETypeAlias</span> <span class="fu">.</span> compileElmRecordAliasWith <span class="st">&quot;User&quot;</span></a></code></pre></div>
<p>多少ボイラーテンプレートができてしまったが，まぁ個人的には許容範囲．</p>
<h2 id="おまけ-普通のレコードに対応する">おまけ: 普通のレコードに対応する</h2>
<p>僕はほとんど使わないからいいんだけど，普通のレコード型も <code>IsElmType</code> に対応しやすいようなヘルパー関数を定義しておこう:</p>
<div class="sourceCode" id="cb11"><pre class="sourceCode haskell"><code class="sourceCode haskell"><a class="sourceLine" id="cb11-1" title="1"><span class="ot">toElmAlias ::</span> <span class="kw">forall</span> a<span class="fu">.</span> (<span class="dt">GIsElmFields</span> (<span class="dt">Rep</span> a), <span class="dt">IsElmType</span> a) <span class="ot">=&gt;</span> <span class="dt">Proxy</span> a <span class="ot">-&gt;</span> <span class="dt">EAlias</span></a>
<a class="sourceLine" id="cb11-2" title="2">toElmAlias proxy <span class="fu">=</span> <span class="dt">EAlias</span></a>
<a class="sourceLine" id="cb11-3" title="3">  { ea_name <span class="fu">=</span> <span class="dt">ETypeName</span> (renderElm <span class="fu">$</span> compileElmType proxy) []</a>
<a class="sourceLine" id="cb11-4" title="4">  , ea_fields <span class="fu">=</span> gcompileElmFields (<span class="dt">Proxy</span> <span class="fu">@</span> (<span class="dt">Rep</span> a))</a>
<a class="sourceLine" id="cb11-5" title="5">  , ea_omit_null <span class="fu">=</span> <span class="dt">False</span></a>
<a class="sourceLine" id="cb11-6" title="6">  , ea_newtype <span class="fu">=</span> <span class="dt">False</span></a>
<a class="sourceLine" id="cb11-7" title="7">  , ea_unwrap_unary <span class="fu">=</span> <span class="dt">True</span></a>
<a class="sourceLine" id="cb11-8" title="8">  }</a>
<a class="sourceLine" id="cb11-9" title="9"></a>
<a class="sourceLine" id="cb11-10" title="10"><span class="kw">class</span> <span class="dt">GIsElmFields</span> (<span class="ot">rep ::</span> <span class="dt">Type</span> <span class="ot">-&gt;</span> <span class="dt">Type</span>) <span class="kw">where</span></a>
<a class="sourceLine" id="cb11-11" title="11"><span class="ot">  gcompileElmFields ::</span> <span class="dt">Proxy</span> rep <span class="ot">-&gt;</span> [(<span class="dt">String</span>, <span class="dt">EType</span>)]</a>
<a class="sourceLine" id="cb11-12" title="12"></a>
<a class="sourceLine" id="cb11-13" title="13"><span class="co">-- ここから下は利用者側で定義する</span></a>
<a class="sourceLine" id="cb11-14" title="14"><span class="kw">data</span> <span class="dt">User</span> <span class="fu">=</span> <span class="dt">User</span></a>
<a class="sourceLine" id="cb11-15" title="15">    {<span class="ot"> userId   ::</span> <span class="dt">String</span></a>
<a class="sourceLine" id="cb11-16" title="16">    ,<span class="ot"> userName ::</span> <span class="dt">String</span></a>
<a class="sourceLine" id="cb11-17" title="17">    } <span class="kw">deriving</span> (<span class="dt">Generic</span>)</a>
<a class="sourceLine" id="cb11-18" title="18"></a>
<a class="sourceLine" id="cb11-19" title="19"><span class="kw">instance</span> <span class="dt">IsElmType</span> <span class="dt">Book</span> <span class="kw">where</span></a>
<a class="sourceLine" id="cb11-20" title="20">  compileElmType _ <span class="fu">=</span> <span class="dt">ETyCon</span> <span class="fu">$</span> <span class="dt">ETCon</span> <span class="st">&quot;Book&quot;</span></a>
<a class="sourceLine" id="cb11-21" title="21"></a>
<a class="sourceLine" id="cb11-22" title="22"><span class="kw">instance</span> <span class="dt">IsElmDefinition</span> <span class="dt">Book</span> <span class="kw">where</span></a>
<a class="sourceLine" id="cb11-23" title="23">  compileElmDef <span class="fu">=</span> <span class="dt">ETypeAlias</span> <span class="fu">.</span> toElmAlias</a></code></pre></div>
<p><code>toElmAlias</code> 関数では，Haskell の総称プログラミング(Generics)という機能を利用している． Generics では Haskell 内での型や値のメタ情報を Haskell の型や値として取得できる． これと型クラスを組み合わせることで，型の構造毎に関数の実装を分岐することができる:</p>
<div class="sourceCode" id="cb12"><pre class="sourceCode haskell"><code class="sourceCode haskell"><a class="sourceLine" id="cb12-1" title="1"><span class="co">-- `M1 D` はデータ型を表現</span></a>
<a class="sourceLine" id="cb12-2" title="2"><span class="kw">instance</span> <span class="dt">GIsElmFields</span> a <span class="ot">=&gt;</span> <span class="dt">GIsElmFields</span> (<span class="dt">M1</span> <span class="dt">D</span> x a) <span class="kw">where</span></a>
<a class="sourceLine" id="cb12-3" title="3">  gcompileElmFields _ <span class="fu">=</span> gcompileElmFields (<span class="dt">Proxy</span> <span class="fu">@</span> a)</a>
<a class="sourceLine" id="cb12-4" title="4"></a>
<a class="sourceLine" id="cb12-5" title="5"><span class="co">-- `M1 C` はコンストラクタを表現</span></a>
<a class="sourceLine" id="cb12-6" title="6"><span class="kw">instance</span> <span class="dt">GIsElmFields</span> a <span class="ot">=&gt;</span> <span class="dt">GIsElmFields</span> (<span class="dt">M1</span> <span class="dt">C</span> x a) <span class="kw">where</span></a>
<a class="sourceLine" id="cb12-7" title="7">  gcompileElmFields _ <span class="fu">=</span> gcompileElmFields (<span class="dt">Proxy</span> <span class="fu">@</span> a)</a>
<a class="sourceLine" id="cb12-8" title="8"></a>
<a class="sourceLine" id="cb12-9" title="9"><span class="co">-- `M1 S` はレコードのセレクタを表現(`K1` はカインドの情報)</span></a>
<a class="sourceLine" id="cb12-10" title="10"><span class="kw">instance</span> (<span class="dt">Selector</span> x, <span class="dt">IsElmType</span> a) <span class="ot">=&gt;</span> <span class="dt">GIsElmFields</span> (<span class="dt">M1</span> <span class="dt">S</span> x (<span class="dt">K1</span> <span class="dt">R</span> a)) <span class="kw">where</span></a>
<a class="sourceLine" id="cb12-11" title="11">  gcompileElmFields _ <span class="fu">=</span> [(selName (<span class="fu">undefined</span><span class="ot"> ::</span> <span class="dt">S1</span> x (<span class="dt">K1</span> <span class="dt">R</span> a) ()), compileElmType (<span class="dt">Proxy</span> <span class="fu">@</span> a))]</a>
<a class="sourceLine" id="cb12-12" title="12"></a>
<a class="sourceLine" id="cb12-13" title="13"><span class="co">--- `:*:` は型の直積を表現</span></a>
<a class="sourceLine" id="cb12-14" title="14"><span class="kw">instance</span> (<span class="dt">GIsElmFields</span> a, <span class="dt">GIsElmFields</span> b) <span class="ot">=&gt;</span> <span class="dt">GIsElmFields</span> (a <span class="fu">:*:</span> b) <span class="kw">where</span></a>
<a class="sourceLine" id="cb12-15" title="15">  gcompileElmFields _ <span class="fu">=</span> gcompileElmFields (<span class="dt">Proxy</span> <span class="fu">@</span> a) <span class="fu">++</span> gcompileElmFields (<span class="dt">Proxy</span> <span class="fu">@</span> b)</a></code></pre></div>
<h2 id="おしまい">おしまい</h2>
<p>もう少し簡単に解決する方法もあったような気もするけど，Haskell のメタプログラミングを色々味わえたのでまぁいいや． どうせ，僕ぐらいしか使わないだろうし(笑)</p>
  </div>]]></summary>
</entry>
<entry>
    <title>stack image コマンドなしに Haskell アプリの Docker イメージを作る</title>
    <link href="https://matsubara0507.github.io/posts/2019-06-10-build-haskell-app-docker-image-without-stack-image-cmd.html" />
    <id>https://matsubara0507.github.io/posts/2019-06-10-build-haskell-app-docker-image-without-stack-image-cmd.html</id>
    <published>2019-06-10T00:00:00Z</published>
    <updated>2019-06-10T00:00:00Z</updated>
    <summary type="html"><![CDATA[<div class="post-content" itemprop="articleBody">
    <p>自分は Haskell アプリケーションの Docker イメージを作るのに <code>stack image</code> コマンドを愛用している． しかし悲しいことに <strong>stack v2 からはこの機能が無くなってしまう</strong> のだ． ということで代替方法を考えてみた，というお話．</p>
<h2 id="tldr">tl;dr</h2>
<p>matsubara0507/whoami というリポジトリで試したので，その PR を見ると良い:</p>
<ul>
<li><a href="https://github.com/matsubara0507/whoami/pull/6">Build docker image without stack image command by matsubara0507 · Pull Request #6 · matsubara0507/whoami</a></li>
</ul>
<p>結論としては stack の <code>--local-bin-path</code> オプションと Docker Integration を使って Docker イメージ用の実行ファイルをワークディレクトリに置いて，<code>docker build</code> でコピーしているだけ．</p>
<h2 id="stack-image-コマンド">stack image コマンド</h2>
<p>簡単に今は亡き <code>stack image</code> コマンドを説明する． このコマンドは <code>stack image container</code> というサブコマンドにより，stack.yaml の設定を元にして実行ファイルだけを含んだ Docker イメージを作ってくれる． <code>docker</code> コマンドで普通にイメージを作るのと違い，<code>.stack-work</code> のビルドキャッシュをホストマシンのローカルに保存し，利用してくれる． そのおかげで2回目以降のビルドも高速に行える(<code>stack</code> による初回ビルドはとても時間がかかる…)．</p>
<p>使い方は簡単で，次のようなのを stack.yaml に記述し <code>stack --docker image container</code> とするだけ:</p>
<div class="sourceCode" id="cb1"><pre class="sourceCode yaml"><code class="sourceCode yaml"><a class="sourceLine" id="cb1-1" title="1"><span class="fu">docker:</span></a>
<a class="sourceLine" id="cb1-2" title="2">  <span class="fu">repo:</span><span class="at"> fpco/stack-build</span></a>
<a class="sourceLine" id="cb1-3" title="3">  <span class="fu">enable:</span><span class="at"> </span><span class="ch">false</span></a>
<a class="sourceLine" id="cb1-4" title="4"><span class="fu">image:</span></a>
<a class="sourceLine" id="cb1-5" title="5">  <span class="fu">container:</span></a>
<a class="sourceLine" id="cb1-6" title="6">    <span class="fu">name:</span><span class="at"> matsubara0507/whoami</span></a>
<a class="sourceLine" id="cb1-7" title="7">    <span class="fu">base:</span><span class="at"> matsubara0507/ubuntu-for-haskell:git</span></a></code></pre></div>
<p><code>docker</code> の方の設定は Docker Integration と呼ばれるもので，<code>repo</code> で設定したイメージのコンテナ内で stack のビルドをしてくれる(こいつがローカルの <code>.stack-work</code> を利用する)． <code>image</code> の方の設定が <code>stack image</code> の設定で，<code>base</code> が作成するイメージのベースイメージだ． やってることは実行ファイルを <code>.stack-work</code> からコピーしてくるだけで，ベースイメージが Docker Integration のイメージと同じ OS であればちゃんと動作する．</p>
<h2 id="section"></h2>
<p>さて，冒頭に書いた通り，<a href="https://github.com/commercialhaskell/stack/blob/c0c6510741a0f3e2f687a4fecf9b0ae625fca12a/ChangeLog.md#v2101-release-candidate"><strong>この機能は stack の新しいバージョンでは無くなってしまう</strong></a>．</p>
<blockquote>
<p>Remove the stack image command. With the advent of Docker multistage builds, this functionality is no longer useful. For an example, please see Building Haskell Apps with Docker.</p>
</blockquote>
<p>マルチステージビルドができたし，あんまりこれもう便利じゃないよね，とのこと． 代わりに「<a href="https://www.fpcomplete.com/blog/2017/12/building-haskell-apps-with-docker">Building Haskell Apps with Docker</a>」という記事を読むと良いらしい．</p>
<h2 id="マルチステージビルドする">マルチステージビルドする</h2>
<p>上記リンクではマルチステージビルドを使えと書いてある． 多分こんな感じ(試してない):</p>
<div class="sourceCode" id="cb2"><pre class="sourceCode dockerfile"><code class="sourceCode dockerfile"><a class="sourceLine" id="cb2-1" title="1"><span class="kw">FROM</span> fpco/stack-build:lts-13.21 as bin</a>
<a class="sourceLine" id="cb2-2" title="2"><span class="kw">RUN</span> mkdir -p /root/work</a>
<a class="sourceLine" id="cb2-3" title="3"><span class="kw">COPY</span> . /root/work</a>
<a class="sourceLine" id="cb2-4" title="4"><span class="kw">RUN</span> cd /root/work &amp;&amp; stack install --system-ghc</a>
<a class="sourceLine" id="cb2-5" title="5"></a>
<a class="sourceLine" id="cb2-6" title="6"><span class="kw">FROM</span> matsubara0507/ubuntu-for-haskell</a>
<a class="sourceLine" id="cb2-7" title="7"><span class="kw">RUN</span> mkdir -p /root/.local/bin &amp;&amp; mkdir -p /root/work</a>
<a class="sourceLine" id="cb2-8" title="8"><span class="kw">ENV</span> PATH /root/.local/bin:$PATH</a>
<a class="sourceLine" id="cb2-9" title="9"><span class="kw">WORKDIR</span> /root/work</a>
<a class="sourceLine" id="cb2-10" title="10"><span class="kw">COPY</span> --from=bin /root/.local/bin /root/.local/bin</a></code></pre></div>
<p>stack の Docker Integration は残ってるので <code>stack --docker build</code> とすることで Docker コンテナ内でのビルド自体は実行される(これによってローカルにキャッシュが作られる)． 一つ目のステージでは <code>stack install</code> により <code>.stack-work</code> 内の実行ファイルを <code>/root/.local/bin</code> にコピーし，二つ目のステージではさらにこの実行ファイルだけを最終的に作られるイメージにコピーしている． ちなみに，<code>/root/.local/bin</code> は stack が決めてるローカル実行ファイルを置くパスで，<code>stack path</code> で確認できる(OS によって違うはず)．</p>
<p>でもこれ一つ欠点があって． <code>docker build</code> するときに，肥大化しがちな <code>.stack-work</code> をいちいち上げる必要があるので，だんだん <code>docker build</code> の時間が長くなる(最近作ってたアプリケーションは4GBになってしまって…)． <code>.dockerignore</code> で無視できれば良いのだが，それだと <code>stack insatll</code> できない(<code>.stack-work</code> 内の実行ファイルのパスは resolver や GHC のバージョンなどで変わるので，これをイチイチ <code>.dockerignore</code> に書くのはめんどくさい)．</p>
<h2 id="local-bin-path-オプション">local-bin-path オプション</h2>
<p><code>docker build</code> する時は <code>.stack-work</code> を無視したい． じゃぁどうするか． 一つ目のステージでやっているのは既に出来上がった実行ファイルを <code>stack install</code> を使って分かりやすいパスに持ってきてるだけだ． そこで気づく，それを上書きするオプションがあるのではないかと． あった:</p>
<ul>
<li><a href="https://github.com/commercialhaskell/stack/issues/730">Specify local-bin-path · Issue #730 · commercialhaskell/stack · GitHub</a></li>
</ul>
<p><code>stack --local-bin-path=any_path install</code> とすることで任意のパスに実行ファイルをコピーできる！ 知らなかった． あとはここから <code>docker build</code> で実行ファイルコピーしてくるように Dockerfile を書くだけ:</p>
<div class="sourceCode" id="cb3"><pre class="sourceCode dockerfile"><code class="sourceCode dockerfile"><a class="sourceLine" id="cb3-1" title="1"><span class="kw">FROM</span> matsubara0507/ubuntu-for-haskell</a>
<a class="sourceLine" id="cb3-2" title="2"><span class="kw">ARG</span> local_bin_path</a>
<a class="sourceLine" id="cb3-3" title="3"><span class="kw">RUN</span> mkdir -p /root/.local/bin &amp;&amp; mkdir -p /root/work</a>
<a class="sourceLine" id="cb3-4" title="4"><span class="kw">ENV</span> PATH /root/.local/bin:$PATH</a>
<a class="sourceLine" id="cb3-5" title="5"><span class="kw">WORKDIR</span> /root/work</a>
<a class="sourceLine" id="cb3-6" title="6"><span class="kw">COPY</span> ${local_bin_path} /root/.local/bin</a></code></pre></div>
<p><code>ARG</code> を使ったので次のように <code>docker build</code> コマンドのオプションで指定する:</p>
<pre><code>$ stack --local-bin-path=./bin --docker install
$ docker build -t matsubara0507/whoami . --build-arg local_bin_path=./bin</code></pre>
<p>いい感じ！ もちろん <code>.dockerignore</code> に <code>.stack-work</code> が書いてあるのでイメージのビルドも速い．</p>
<h2 id="おしまい">おしまい</h2>
<p>これで心置き無く新しい stack のバージョンを使うことができる．</p>
  </div>]]></summary>
</entry>
<entry>
    <title>rio + extensible なフレームワーク: mix</title>
    <link href="https://matsubara0507.github.io/posts/2019-05-27-create-mix-libs.html" />
    <id>https://matsubara0507.github.io/posts/2019-05-27-create-mix-libs.html</id>
    <published>2019-05-27T00:00:00Z</published>
    <updated>2019-05-27T00:00:00Z</updated>
    <summary type="html"><![CDATA[<div class="post-content" itemprop="articleBody">
    <p>最近はよく <a href="https://hackage.haskell.org/package/rio">rio</a> + <a href="https://hackage.haskell.org/package/extensible">extensible</a> で Haskell アプリケーションを書きます(趣味の)． 前々から何となくパターン化できそうだなぁと思っていたのが，それをついにパターン化し mix パッケージとして形にしましたというお話です．</p>
<p>ちなみに，それぞれのパッケージを軽く説明すると:</p>
<ul>
<li>rio : Haskell のビルドツール Stack を開発しているチームが作っている Reader パターンをベースにした Alt. Prelude</li>
<li>extensible : 拡張可能レコードを始めとして様々な拡張可能なデータ構造を同一の形式で利用できるようになるパッケージ</li>
</ul>
<h2 id="mix-パッケージ">mix パッケージ</h2>
<p>リポジトリはこれ:</p>
<h5 id="section"><iframe width="426" height="183" scrolling="no" frameborder="0" src="https://matsubara0507.github.io/my-github-cards/?target=matsubara0507/mix.hs"></iframe></h5>
<p>mix パッケージの目的は rio パッケージの <code>RIO env a</code> モナドの <code>env</code> の部分を extensible パッケージを用いて簡単に構築することであり，<code>env</code> をプラグインとして構築する． プラグインで構築という部分は <a href="https://hackage.haskell.org/package/tonatona">tonatona</a> から着想を得た(tonatona も rio のラッパーパッケージなはず)． 例えば，<code>rio</code> パッケージのロガーを利用して次のような簡易的なプログラムをかける:</p>
<div class="sourceCode" id="cb1"><pre class="sourceCode haskell"><code class="sourceCode haskell"><a class="sourceLine" id="cb1-1" title="1"><span class="kw">module</span> <span class="dt">Main</span> <span class="kw">where</span></a>
<a class="sourceLine" id="cb1-2" title="2"></a>
<a class="sourceLine" id="cb1-3" title="3"><span class="kw">import</span>           <span class="dt">RIO</span></a>
<a class="sourceLine" id="cb1-4" title="4"></a>
<a class="sourceLine" id="cb1-5" title="5"><span class="kw">import</span>           <span class="dt">Data.Extensible</span></a>
<a class="sourceLine" id="cb1-6" title="6"><span class="kw">import</span>           <span class="dt">Mix</span></a>
<a class="sourceLine" id="cb1-7" title="7"><span class="kw">import</span>           <span class="dt">Mix.Plugin.Logger</span> <span class="kw">as</span> <span class="dt">MixLogger</span></a>
<a class="sourceLine" id="cb1-8" title="8"></a>
<a class="sourceLine" id="cb1-9" title="9"><span class="kw">type</span> <span class="dt">Env</span> <span class="fu">=</span> <span class="dt">Record</span></a>
<a class="sourceLine" id="cb1-10" title="10">  &#39;[ <span class="st">&quot;logger&quot;</span> <span class="fu">&gt;:</span> <span class="dt">MixLogger.LogFunc</span></a>
<a class="sourceLine" id="cb1-11" title="11">   , <span class="st">&quot;name&quot;</span>   <span class="fu">&gt;:</span> <span class="dt">Text</span></a>
<a class="sourceLine" id="cb1-12" title="12">   ]</a>
<a class="sourceLine" id="cb1-13" title="13"></a>
<a class="sourceLine" id="cb1-14" title="14"><span class="ot">main ::</span> <span class="dt">IO</span> ()</a>
<a class="sourceLine" id="cb1-15" title="15">main <span class="fu">=</span> Mix.run plugin <span class="fu">$</span> <span class="kw">do</span></a>
<a class="sourceLine" id="cb1-16" title="16">  name <span class="ot">&lt;-</span> asks (view <span class="fu">#</span>name)</a>
<a class="sourceLine" id="cb1-17" title="17">  MixLogger.logDebug <span class="fu">$</span> display (<span class="st">&quot;This is debug: &quot;</span> <span class="fu">&lt;&gt;</span> name)</a>
<a class="sourceLine" id="cb1-18" title="18">  MixLogger.logInfo  <span class="fu">$</span> display (<span class="st">&quot;This is info: &quot;</span>  <span class="fu">&lt;&gt;</span> name)</a>
<a class="sourceLine" id="cb1-19" title="19">  MixLogger.logWarn  <span class="fu">$</span> display (<span class="st">&quot;This is warn: &quot;</span>  <span class="fu">&lt;&gt;</span> name)</a>
<a class="sourceLine" id="cb1-20" title="20">  MixLogger.logError <span class="fu">$</span> display (<span class="st">&quot;This is error: &quot;</span> <span class="fu">&lt;&gt;</span> name)</a>
<a class="sourceLine" id="cb1-21" title="21">  <span class="kw">where</span></a>
<a class="sourceLine" id="cb1-22" title="22"><span class="ot">    plugin ::</span> <span class="dt">Plugin</span> () <span class="dt">IO</span> <span class="dt">Env</span></a>
<a class="sourceLine" id="cb1-23" title="23">    plugin <span class="fu">=</span> hsequence</a>
<a class="sourceLine" id="cb1-24" title="24">        <span class="fu">$</span> <span class="fu">#</span>logger <span class="fu">&lt;@=&gt;</span> MixLogger.buildPlugin (<span class="fu">#</span>handle <span class="fu">@=</span> stdout <span class="fu">&lt;:</span> <span class="fu">#</span>verbose <span class="fu">@=</span> <span class="dt">True</span> <span class="fu">&lt;:</span> nil)</a>
<a class="sourceLine" id="cb1-25" title="25">       <span class="fu">&lt;:</span> <span class="fu">#</span>name   <span class="fu">&lt;@=&gt;</span> <span class="fu">pure</span> <span class="st">&quot;Hoge&quot;</span></a>
<a class="sourceLine" id="cb1-26" title="26">       <span class="fu">&lt;:</span> nil</a></code></pre></div>
<p>tonatona との違いは <code>RIO env a</code> の <code>env</code> に当たる部分に対して，特別なインスタンス宣言がいらない点だ． 単純に，設定っぽい extensible の拡張可能レコード(<code>#logger &lt;@=&gt; ...</code> とか)を記述するだけで良い． これの実行結果は次のようになる:</p>
<pre class="code"><code>$ stack runghc mix/sample/Main.hs
2019-05-21 22:33:49.378471: [debug] This is debug: Hoge
@(mix/sample/Main.hs:23:3)
2019-05-21 22:33:49.381893: [info] This is info: Hoge
@(mix/sample/Main.hs:24:3)
2019-05-21 22:33:49.381943: [warn] This is warn: Hoge
@(mix/sample/Main.hs:25:3)
2019-05-21 22:33:49.382005: [error] This is error: Hoge
@(mix/sample/Main.hs:26:3)</code></pre>
<p>なぜ mix ではインスタンス宣言などせずに自由にプラグインのオンオフや設定のカスタマイズをすることができるのだろうか？ 言わずもがな，<code>extensible</code> の魔法によるものである．</p>
<h3 id="extensible-の魔法">extensible の魔法</h3>
<p>もっとも鬼門になったのは rio のロガーだ． rio のロガーは次のように利用する必要がある:</p>
<div class="sourceCode" id="cb3"><pre class="sourceCode haskell"><code class="sourceCode haskell"><a class="sourceLine" id="cb3-1" title="1"><span class="kw">newtype</span> <span class="dt">Env</span> <span class="fu">=</span> <span class="dt">Env</span> {<span class="ot"> logFunc ::</span> <span class="dt">LogFunc</span> }</a>
<a class="sourceLine" id="cb3-2" title="2"></a>
<a class="sourceLine" id="cb3-3" title="3"><span class="ot">main ::</span> <span class="dt">IO</span> ()</a>
<a class="sourceLine" id="cb3-4" title="4">main <span class="fu">=</span> <span class="kw">do</span></a>
<a class="sourceLine" id="cb3-5" title="5">  opt <span class="ot">&lt;-</span> logOptionsHandle stdout <span class="dt">False</span></a>
<a class="sourceLine" id="cb3-6" title="6">  withLogFunc opt <span class="fu">$</span> \logFunc <span class="ot">-&gt;</span> runRIO <span class="dt">Env</span>{<span class="fu">..</span>} <span class="fu">$</span> <span class="kw">do</span></a>
<a class="sourceLine" id="cb3-7" title="7">    logInfo <span class="st">&quot;hoge&quot;</span></a>
<a class="sourceLine" id="cb3-8" title="8">    logDebug <span class="st">&quot;fuga&quot;</span></a></code></pre></div>
<p><code>withLogFunc opt</code> の型は <code>MonadUnliftIO m =&gt; (LogFunc -&gt; m a) -&gt; m a</code> となっている． なぜこのような形になっているのかの秘密は(たぶん) <code>MonadUnliftIO</code> にあるのだが今回は割愛する． この型，よく見ると継続になっているのがわかるだろうか？</p>
<div class="sourceCode" id="cb4"><pre class="sourceCode haskell"><code class="sourceCode haskell"><a class="sourceLine" id="cb4-1" title="1"><span class="ot">withLogFunc ::</span> <span class="dt">MonadUnliftIO</span> m <span class="ot">=&gt;</span> <span class="dt">LogOptions</span> <span class="ot">-&gt;</span> (<span class="dt">LogFunc</span> <span class="ot">-&gt;</span> m a) <span class="ot">-&gt;</span> m a</a>
<a class="sourceLine" id="cb4-2" title="2"></a>
<a class="sourceLine" id="cb4-3" title="3"><span class="co">-- 継続(Continuation)のモナドトランスフォーム仕様の型</span></a>
<a class="sourceLine" id="cb4-4" title="4"><span class="kw">newtype</span> <span class="dt">ContT</span> r m a <span class="fu">=</span> <span class="dt">ContT</span> {<span class="ot"> runContT ::</span> ((a <span class="ot">-&gt;</span> m r) <span class="ot">-&gt;</span> m r) }</a></code></pre></div>
<p>継続は <code>Monad</code> 型クラスのインスタンスなのでモナディックに扱える． そして，extensible の拡張可能レコードの特徴として <strong>レコードのフィールドをモナディックに走査できる！</strong> というのがある(正確には <code>Applicative</code> ですが)． 例えば <a href="http://hackage.haskell.org/package/extensible-0.5/docs/Data-Extensible-Product.html#v:hsequence"><code>hsequence</code></a> という関数が走査する関数だ:</p>
<div class="sourceCode" id="cb5"><pre class="sourceCode haskell"><code class="sourceCode haskell"><a class="sourceLine" id="cb5-1" title="1"><span class="ot">hsequence ::</span> <span class="dt">Applicative</span> f <span class="ot">=&gt;</span> (<span class="dt">Comp</span> f h <span class="fu">:*</span> xs) <span class="ot">-&gt;</span> f (h <span class="fu">:*</span> xs)</a></code></pre></div>
<p>実は <code>Plugin</code> という型はただの継続で，<code>Mix.run plugin</code> は単純に <code>runContT</code> した中で <code>runRIO env action</code> しているだけだ:</p>
<div class="sourceCode" id="cb6"><pre class="sourceCode haskell"><code class="sourceCode haskell"><a class="sourceLine" id="cb6-1" title="1"><span class="kw">type</span> <span class="dt">Plugin</span> a m env <span class="fu">=</span> <span class="dt">ContT</span> a m env</a>
<a class="sourceLine" id="cb6-2" title="2"></a>
<a class="sourceLine" id="cb6-3" title="3"><span class="ot">run ::</span> <span class="dt">MonadIO</span> m <span class="ot">=&gt;</span> <span class="dt">Plugin</span> a m env <span class="ot">-&gt;</span> <span class="dt">RIO</span> env a <span class="ot">-&gt;</span> m a</a>
<a class="sourceLine" id="cb6-4" title="4">run plugin act <span class="fu">=</span> (<span class="ot">`runRIO`</span> act) <span class="ot">`withPlugin`</span> plugin</a>
<a class="sourceLine" id="cb6-5" title="5"></a>
<a class="sourceLine" id="cb6-6" title="6"><span class="ot">withPlugin ::</span> (env <span class="ot">-&gt;</span> m a) <span class="ot">-&gt;</span> <span class="dt">Plugin</span> a m env <span class="ot">-&gt;</span> m a</a>
<a class="sourceLine" id="cb6-7" title="7">withPlugin <span class="fu">=</span> <span class="fu">flip</span> runContT</a>
<a class="sourceLine" id="cb6-8" title="8"></a>
<a class="sourceLine" id="cb6-9" title="9"><span class="ot">toPlugin ::</span> ((env <span class="ot">-&gt;</span> m a) <span class="ot">-&gt;</span> m a) <span class="ot">-&gt;</span> <span class="dt">Plugin</span> a m env</a>
<a class="sourceLine" id="cb6-10" title="10">toPlugin <span class="fu">=</span> <span class="dt">ContT</span></a></code></pre></div>
<p>思いついてしまえば極めて簡単な仕組みだ(なおパフォーマンスについては特に考えていません)．</p>
<h2 id="プラグイン">プラグイン</h2>
<p>プラグインと言ったもののただの継続だ． 今あるのは:</p>
<ul>
<li>Logger</li>
<li>Config</li>
<li>API Client (GitHub, Drone)</li>
<li>Shell</li>
</ul>
<p>だけで，ちょうど最近作ってたOSSで必要になった分だけ． そのうちDB系のやつを作ってもいいかもしれない． これらは全て mix と同じリポジトリに置いてある．</p>
<h3 id="logger-と-config">Logger と Config</h3>
<p>この2つは mix ライブラリに入っている． Logger は上記に載せた rio の Logger のラッパー． Config というのは設定ファイルを指しているつもり． <code>&quot;config&quot;</code> フィールドと任意の型と紐づかせている:</p>
<div class="sourceCode" id="cb7"><pre class="sourceCode haskell"><code class="sourceCode haskell"><a class="sourceLine" id="cb7-1" title="1"><span class="kw">import</span> <span class="kw">qualified</span> <span class="dt">Mix.Plugin.Logger</span> <span class="kw">as</span> <span class="dt">MixLogger</span></a>
<a class="sourceLine" id="cb7-2" title="2"><span class="kw">import</span> <span class="kw">qualified</span> <span class="dt">Mix.Plugin.Config</span> <span class="kw">as</span> <span class="dt">MixConfig</span></a>
<a class="sourceLine" id="cb7-3" title="3"></a>
<a class="sourceLine" id="cb7-4" title="4"><span class="kw">type</span> <span class="dt">Env</span> <span class="fu">=</span> <span class="dt">Record</span></a>
<a class="sourceLine" id="cb7-5" title="5">  &#39;[ <span class="st">&quot;logger&quot;</span> <span class="fu">&gt;:</span> <span class="dt">MixLogger.LogFunc</span></a>
<a class="sourceLine" id="cb7-6" title="6">   , <span class="st">&quot;config&quot;</span> <span class="fu">&gt;:</span> <span class="dt">Config</span></a>
<a class="sourceLine" id="cb7-7" title="7">   ]</a>
<a class="sourceLine" id="cb7-8" title="8"></a>
<a class="sourceLine" id="cb7-9" title="9"><span class="kw">type</span> <span class="dt">Config</span> <span class="fu">=</span> <span class="dt">Record</span></a>
<a class="sourceLine" id="cb7-10" title="10">  &#39;[ <span class="st">&quot;name&quot;</span> <span class="fu">&gt;:</span> <span class="dt">Text</span></a>
<a class="sourceLine" id="cb7-11" title="11">   ]</a>
<a class="sourceLine" id="cb7-12" title="12"></a>
<a class="sourceLine" id="cb7-13" title="13"><span class="ot">main ::</span> <span class="dt">IO</span> ()</a>
<a class="sourceLine" id="cb7-14" title="14">main <span class="fu">=</span> Mix.run plugin <span class="fu">$</span> <span class="kw">do</span></a>
<a class="sourceLine" id="cb7-15" title="15">  config <span class="ot">&lt;-</span> MixConfig.askConfig</a>
<a class="sourceLine" id="cb7-16" title="16">  MixLogger.logInfo <span class="fu">$</span> display (<span class="st">&quot;This is info: &quot;</span> <span class="fu">&lt;&gt;</span> config <span class="fu">^.</span> <span class="fu">#</span>name)</a>
<a class="sourceLine" id="cb7-17" title="17">  <span class="kw">where</span></a>
<a class="sourceLine" id="cb7-18" title="18"><span class="ot">    plugin ::</span> <span class="dt">Plugin</span> () <span class="dt">IO</span> <span class="dt">Env</span></a>
<a class="sourceLine" id="cb7-19" title="19">    plugin <span class="fu">=</span> hsequence</a>
<a class="sourceLine" id="cb7-20" title="20">        <span class="fu">$</span> <span class="fu">#</span>logger <span class="fu">&lt;@=&gt;</span> MixLogger.buildPlugin (<span class="fu">#</span>handle <span class="fu">@=</span> stdout <span class="fu">&lt;:</span> <span class="fu">#</span>verbose <span class="fu">@=</span> <span class="dt">True</span> <span class="fu">&lt;:</span> nil)</a>
<a class="sourceLine" id="cb7-21" title="21">       <span class="fu">&lt;:</span> <span class="fu">#</span>config <span class="fu">&lt;@=&gt;</span> MixConfig.buildPlugin (<span class="fu">#</span>name <span class="fu">@=</span> <span class="st">&quot;hoge&quot;</span> <span class="fu">&lt;:</span> nil)</a>
<a class="sourceLine" id="cb7-22" title="22">       <span class="fu">&lt;:</span> nil</a></code></pre></div>
<p>Config は試しに作ってみたけど，いまいち使い道がない．</p>
<h3 id="api-client">API Client</h3>
<p>API クライアントを利用するのに必要な情報(API トークンなど)を <code>env</code> に載せて，クライアントを利用するときにほんの少しだけ簡単に利用できるプラグイン． GitHub と <a href="https://drone.io/">Drone CI</a> のものを作った． GitHub のクライアントは <a href="https://hackage.haskell.org/package/github">github</a> パッケージを Drone のクライアントは(僕が作った) <a href="https://hackage.haskell.org/package/drone">drone</a> パッケージを使う． 各プラグインのパッケージは <a href="https://github.com/matsubara0507/mix.hs/tree/master/mix-plugin-github">mix-plugin-github</a> と <a href="https://github.com/matsubara0507/mix.hs/tree/master/mix-plugin-drone">mix-plugin-drone</a> として matsubara0507/mix.hs リポジトリに置いてある．</p>
<p>こんな感じに使える:</p>
<div class="sourceCode" id="cb8"><pre class="sourceCode haskell"><code class="sourceCode haskell"><a class="sourceLine" id="cb8-1" title="1"><span class="kw">import</span> <span class="kw">qualified</span> <span class="dt">Drone</span></a>
<a class="sourceLine" id="cb8-2" title="2"><span class="kw">import</span> <span class="kw">qualified</span> <span class="dt">GitHub</span></a>
<a class="sourceLine" id="cb8-3" title="3"><span class="kw">import</span> <span class="kw">qualified</span> <span class="dt">GitHub.Endpoints.Users</span> <span class="kw">as</span> <span class="dt">GitHub</span></a>
<a class="sourceLine" id="cb8-4" title="4"><span class="kw">import</span> <span class="kw">qualified</span> <span class="dt">Mix.Plugin.Drone</span>       <span class="kw">as</span> <span class="dt">MixDrone</span></a>
<a class="sourceLine" id="cb8-5" title="5"><span class="kw">import</span> <span class="kw">qualified</span> <span class="dt">Mix.Plugin.GitHub</span>      <span class="kw">as</span> <span class="dt">MixGitHub</span></a>
<a class="sourceLine" id="cb8-6" title="6"><span class="kw">import</span>           <span class="dt">System.Environment</span>     (getEnv)</a>
<a class="sourceLine" id="cb8-7" title="7"></a>
<a class="sourceLine" id="cb8-8" title="8"><span class="kw">type</span> <span class="dt">Env</span> <span class="fu">=</span> <span class="dt">Record</span></a>
<a class="sourceLine" id="cb8-9" title="9">  &#39;[ <span class="st">&quot;logger&quot;</span> <span class="fu">&gt;:</span> <span class="dt">MixLogger.LogFunc</span></a>
<a class="sourceLine" id="cb8-10" title="10">   , <span class="st">&quot;github&quot;</span> <span class="fu">&gt;:</span> <span class="dt">MixGitHub.Token</span></a>
<a class="sourceLine" id="cb8-11" title="11">   , <span class="st">&quot;drone&quot;</span>  <span class="fu">&gt;:</span> <span class="dt">MixDrone.Config</span></a>
<a class="sourceLine" id="cb8-12" title="12">   ]</a>
<a class="sourceLine" id="cb8-13" title="13"></a>
<a class="sourceLine" id="cb8-14" title="14"><span class="ot">main ::</span> <span class="dt">IO</span> ()</a>
<a class="sourceLine" id="cb8-15" title="15">main <span class="fu">=</span> <span class="kw">do</span></a>
<a class="sourceLine" id="cb8-16" title="16">  gToken <span class="ot">&lt;-</span> liftIO <span class="fu">$</span> fromString <span class="fu">&lt;$&gt;</span> getEnv <span class="st">&quot;GH_TOKEN&quot;</span></a>
<a class="sourceLine" id="cb8-17" title="17">  dHost  <span class="ot">&lt;-</span> liftIO <span class="fu">$</span> fromString <span class="fu">&lt;$&gt;</span> getEnv <span class="st">&quot;DRONE_HOST&quot;</span></a>
<a class="sourceLine" id="cb8-18" title="18">  dToken <span class="ot">&lt;-</span> liftIO <span class="fu">$</span> fromString <span class="fu">&lt;$&gt;</span> getEnv <span class="st">&quot;DRONE_TOKEN&quot;</span></a>
<a class="sourceLine" id="cb8-19" title="19">  <span class="kw">let</span> logConf <span class="fu">=</span> <span class="fu">#</span>handle <span class="fu">@=</span> stdout <span class="fu">&lt;:</span> <span class="fu">#</span>verbose <span class="fu">@=</span> <span class="dt">False</span> <span class="fu">&lt;:</span> nil</a>
<a class="sourceLine" id="cb8-20" title="20">      dClient <span class="fu">=</span> <span class="fu">#</span>host <span class="fu">@=</span> dHost <span class="fu">&lt;:</span> <span class="fu">#</span>port <span class="fu">@=</span> <span class="dt">Nothing</span> <span class="fu">&lt;:</span> <span class="fu">#</span>token <span class="fu">@=</span> dToken <span class="fu">&lt;:</span> nil</a>
<a class="sourceLine" id="cb8-21" title="21">      plugin <span class="fu">=</span> hsequence</a>
<a class="sourceLine" id="cb8-22" title="22">            <span class="fu">$</span> <span class="fu">#</span>logger <span class="fu">&lt;@=&gt;</span> MixLogger.buildPlugin logConf</a>
<a class="sourceLine" id="cb8-23" title="23">           <span class="fu">&lt;:</span> <span class="fu">#</span>github <span class="fu">&lt;@=&gt;</span> MixGitHub.buildPlugin gToken</a>
<a class="sourceLine" id="cb8-24" title="24">           <span class="fu">&lt;:</span> <span class="fu">#</span>drone  <span class="fu">&lt;@=&gt;</span> MixDrone.buildPlugin dClient <span class="dt">True</span>  </a>
<a class="sourceLine" id="cb8-25" title="25">           <span class="fu">&lt;:</span> nil</a>
<a class="sourceLine" id="cb8-26" title="26">  Mix.run plugin app</a>
<a class="sourceLine" id="cb8-27" title="27"></a>
<a class="sourceLine" id="cb8-28" title="28"><span class="ot">app ::</span> <span class="dt">RIO</span> <span class="dt">Env</span> ()</a>
<a class="sourceLine" id="cb8-29" title="29">app <span class="fu">=</span> <span class="kw">do</span></a>
<a class="sourceLine" id="cb8-30" title="30">  MixLogger.logInfo <span class="st">&quot;fetch GitHub user info:&quot;</span></a>
<a class="sourceLine" id="cb8-31" title="31">  resp <span class="ot">&lt;-</span> MixGitHub.fetch GitHub.userInfoCurrent&#39;</a>
<a class="sourceLine" id="cb8-32" title="32">  <span class="kw">case</span> resp <span class="kw">of</span></a>
<a class="sourceLine" id="cb8-33" title="33">    <span class="dt">Left</span> err   <span class="ot">-&gt;</span> logError <span class="st">&quot;GitHub fetch error....&quot;</span></a>
<a class="sourceLine" id="cb8-34" title="34">    <span class="dt">Right</span> user <span class="ot">-&gt;</span> logInfo <span class="fu">$</span> display (<span class="st">&quot;Hi &quot;</span> <span class="fu">&lt;&gt;</span> ghLogin user <span class="fu">&lt;&gt;</span> <span class="st">&quot;!!&quot;</span>)</a>
<a class="sourceLine" id="cb8-35" title="35">  MixLogger.logInfo <span class="st">&quot;fetch Drone user info:&quot;</span></a>
<a class="sourceLine" id="cb8-36" title="36">  tryAny (responseBody <span class="fu">&lt;$&gt;</span> MixDrone.fetch Drone.getSelf) <span class="fu">&gt;&gt;=</span> \<span class="kw">case</span></a>
<a class="sourceLine" id="cb8-37" title="37">    <span class="dt">Left</span> err   <span class="ot">-&gt;</span> logError <span class="st">&quot;Drone CI fetch error...&quot;</span></a>
<a class="sourceLine" id="cb8-38" title="38">    <span class="dt">Right</span> user <span class="ot">-&gt;</span> logInfo <span class="fu">$</span> display (<span class="st">&quot;Hi &quot;</span> <span class="fu">&lt;&gt;</span> user <span class="fu">^.</span> <span class="fu">#</span>login <span class="fu">&lt;&gt;</span> <span class="st">&quot;!!&quot;</span>)</a>
<a class="sourceLine" id="cb8-39" title="39">  <span class="kw">where</span></a>
<a class="sourceLine" id="cb8-40" title="40">    ghLogin <span class="fu">=</span> GitHub.untagName <span class="fu">.</span> GitHub.userLogin</a></code></pre></div>
<p>これを実行するとこんな感じ:</p>
<pre class="code"><code>$ GH_TOKEN=xxx DRONE_HOST=cloud.drone.io DRONE_TOKEN=yyy stack runghc -- Main.hs
fetch GitHub user info:
Hi matsubara0507!!
fetch Drone user info:
Hi matsubara0507!!</code></pre>
<p>本来は <code>env</code> を <code>Reader</code> モナドから取ってきて使うのを省いているだけなので，まぁ対して変わらない． 試しに実験的に作ってみただけ． インターフェースを揃えるとか，もう少し手を加えてもいいかもしれない．</p>
<h3 id="shell-コマンド">Shell コマンド</h3>
<p><a href="https://hackage.haskell.org/package/shelly">shelly</a> というパッケージを利用したシェルコマンドの実行を支援する． <code>env</code> にはシェルコマンドを実行したいパスを保存し，与えたシェルコマンドを <code>cd</code> した上で実行してくれる:</p>
<div class="sourceCode" id="cb10"><pre class="sourceCode haskell"><code class="sourceCode haskell"><a class="sourceLine" id="cb10-1" title="1"><span class="kw">import</span> <span class="kw">qualified</span> <span class="dt">Mix.Plugin.Shell</span>  <span class="kw">as</span> <span class="dt">MixShell</span></a>
<a class="sourceLine" id="cb10-2" title="2"><span class="kw">import</span> <span class="kw">qualified</span> <span class="dt">Shelly</span>            <span class="kw">as</span> <span class="dt">Shell</span></a>
<a class="sourceLine" id="cb10-3" title="3"></a>
<a class="sourceLine" id="cb10-4" title="4"><span class="kw">type</span> <span class="dt">Env</span> <span class="fu">=</span> <span class="dt">Record</span></a>
<a class="sourceLine" id="cb10-5" title="5">  &#39;[ <span class="st">&quot;logger&quot;</span> <span class="fu">&gt;:</span> <span class="dt">MixLogger.LogFunc</span></a>
<a class="sourceLine" id="cb10-6" title="6">   , <span class="st">&quot;work&quot;</span>   <span class="fu">&gt;:</span> <span class="dt">FilePath</span></a>
<a class="sourceLine" id="cb10-7" title="7">   ]</a>
<a class="sourceLine" id="cb10-8" title="8"></a>
<a class="sourceLine" id="cb10-9" title="9"><span class="ot">main ::</span> <span class="dt">IO</span> ()</a>
<a class="sourceLine" id="cb10-10" title="10">main <span class="fu">=</span> Mix.run plugin <span class="fu">$</span> <span class="kw">do</span></a>
<a class="sourceLine" id="cb10-11" title="11">  paths <span class="ot">&lt;-</span> MixShell.exec <span class="fu">$</span> Shell.ls <span class="st">&quot;.&quot;</span></a>
<a class="sourceLine" id="cb10-12" title="12">  forM_ paths <span class="fu">$</span> \path <span class="ot">-&gt;</span> MixLogger.logInfo (display <span class="fu">$</span> Shell.toTextIgnore path)</a>
<a class="sourceLine" id="cb10-13" title="13">  <span class="kw">where</span></a>
<a class="sourceLine" id="cb10-14" title="14"><span class="ot">    plugin ::</span> <span class="dt">Plugin</span> () <span class="dt">IO</span> <span class="dt">Env</span></a>
<a class="sourceLine" id="cb10-15" title="15">    plugin <span class="fu">=</span> hsequence</a>
<a class="sourceLine" id="cb10-16" title="16">        <span class="fu">$</span> <span class="fu">#</span>logger <span class="fu">&lt;@=&gt;</span> MixLogger.buildPlugin (<span class="fu">#</span>handle <span class="fu">@=</span> stdout <span class="fu">&lt;:</span> <span class="fu">#</span>verbose <span class="fu">@=</span> <span class="dt">False</span> <span class="fu">&lt;:</span> nil)</a>
<a class="sourceLine" id="cb10-17" title="17">       <span class="fu">&lt;:</span> <span class="fu">#</span>work   <span class="fu">&lt;@=&gt;</span> <span class="fu">pure</span> <span class="st">&quot;.&quot;</span></a>
<a class="sourceLine" id="cb10-18" title="18">       <span class="fu">&lt;:</span> nil</a></code></pre></div>
<h2 id="おしまい">おしまい</h2>
<p>過去のツールをこれで mix で置き換えていきたい2019です． ちなみにパッケージの名前は現在(2019/5)所属してる社名から(せっかく入社したならって気分)．</p>
  </div>]]></summary>
</entry>
<entry>
    <title>Drone Plugin を作ってみた: slack-notify-log</title>
    <link href="https://matsubara0507.github.io/posts/2019-05-26-create-drone-slack-notify-log.html" />
    <id>https://matsubara0507.github.io/posts/2019-05-26-create-drone-slack-notify-log.html</id>
    <published>2019-05-26T00:00:00Z</published>
    <updated>2019-05-26T00:00:00Z</updated>
    <summary type="html"><![CDATA[<div class="post-content" itemprop="articleBody">
    <p>とある事情で Drone CI のビルドログを Slack にスニペットとして通知したくなった． 公式の <a href="https://github.com/drone-plugins/drone-slack"><code>plugin/slack</code></a> では出来なそうだったので，Plugin を自作した，というお話．</p>
<h2 id="作ったもの">作ったもの</h2>
<iframe width="426" height="162" scrolling="no" frameborder="0" src="https://matsubara0507.github.io/my-github-cards/?target=matsubara0507/drone-slack-notify-log">
</iframe>
<p>色々調べてみたものの，同じビルド中の別のステップでのログを取得する方法がわからなかった… ので，最終手段として Drone API を使って引っ張ってくる方法をとった． ほぼほぼドキュメントは無いが，Drone API は <a href="https://github.com/drone/drone-go">drone/drone-go</a> を使うことで簡単に呼び出すことができる． ざっくりと次のような感じで呼び出している:</p>
<div class="sourceCode" id="cb1"><pre class="sourceCode go"><code class="sourceCode go"><a class="sourceLine" id="cb1-1" title="1"><span class="kw">import</span> (</a>
<a class="sourceLine" id="cb1-2" title="2">	<span class="st">&quot;context&quot;</span></a>
<a class="sourceLine" id="cb1-3" title="3">	<span class="st">&quot;fmt&quot;</span></a>
<a class="sourceLine" id="cb1-4" title="4"></a>
<a class="sourceLine" id="cb1-5" title="5">	<span class="st">&quot;github.com/drone/drone-go/drone&quot;</span></a>
<a class="sourceLine" id="cb1-6" title="6">	<span class="st">&quot;github.com/pkg/errors&quot;</span></a>
<a class="sourceLine" id="cb1-7" title="7">	log <span class="st">&quot;github.com/sirupsen/logrus&quot;</span></a>
<a class="sourceLine" id="cb1-8" title="8">	<span class="st">&quot;golang.org/x/oauth2&quot;</span></a>
<a class="sourceLine" id="cb1-9" title="9">)</a>
<a class="sourceLine" id="cb1-10" title="10"></a>
<a class="sourceLine" id="cb1-11" title="11"><span class="kw">func</span> (p Plugin) Exec() <span class="dt">error</span> {</a>
<a class="sourceLine" id="cb1-12" title="12">  config := <span class="bu">new</span>(oauth2.Config)</a>
<a class="sourceLine" id="cb1-13" title="13">  client := drone.NewClient(</a>
<a class="sourceLine" id="cb1-14" title="14">    p.Config.DroneHost,</a>
<a class="sourceLine" id="cb1-15" title="15">    config.Client(</a>
<a class="sourceLine" id="cb1-16" title="16">      context.Background(),</a>
<a class="sourceLine" id="cb1-17" title="17">      &amp;oauth2.Token{</a>
<a class="sourceLine" id="cb1-18" title="18">        AccessToken: p.Config.DroneToken,</a>
<a class="sourceLine" id="cb1-19" title="19">      },</a>
<a class="sourceLine" id="cb1-20" title="20">    ),</a>
<a class="sourceLine" id="cb1-21" title="21">  )</a>
<a class="sourceLine" id="cb1-22" title="22"></a>
<a class="sourceLine" id="cb1-23" title="23">  logs, err := client.Logs(p.Repo.Owner, p.Repo.Name, p.Build.Number, p.Build.Stage, p.Config.StepNum)</a>
<a class="sourceLine" id="cb1-24" title="24">  <span class="kw">if</span> err != <span class="ot">nil</span> {</a>
<a class="sourceLine" id="cb1-25" title="25">    <span class="kw">return</span> errors.Wrapf(err, <span class="st">&quot;can&#39;t fetch drone logs: builds/%d/logs/%d/%d&quot;</span>, p.Build.Number, p.Build.Stage, p.Config.StepNum)</a>
<a class="sourceLine" id="cb1-26" title="26">  }</a>
<a class="sourceLine" id="cb1-27" title="27">  log.Infof(<span class="st">&quot;Success: fetch drone logs (lines num is %d)&quot;</span>, <span class="bu">len</span>(logs))</a>
<a class="sourceLine" id="cb1-28" title="28"></a>
<a class="sourceLine" id="cb1-29" title="29">  ...</a>
<a class="sourceLine" id="cb1-30" title="30">}</a></code></pre></div>
<p>で，実際の Plugin の使い方はこんな感じ:</p>
<div class="sourceCode" id="cb2"><pre class="sourceCode yaml"><code class="sourceCode yaml"><a class="sourceLine" id="cb2-1" title="1"><span class="fu">steps:</span></a>
<a class="sourceLine" id="cb2-2" title="2">  ...</a>
<a class="sourceLine" id="cb2-3" title="3"><span class="kw">-</span> <span class="fu">name:</span><span class="at"> notify drone log to slack</span></a>
<a class="sourceLine" id="cb2-4" title="4">  <span class="fu">image:</span><span class="at"> matsubara0507/slack-notify-log</span></a>
<a class="sourceLine" id="cb2-5" title="5">  <span class="fu">settings:</span></a>
<a class="sourceLine" id="cb2-6" title="6"><span class="fu">    template:</span> <span class="st">&gt;</span></a>
<a class="sourceLine" id="cb2-7" title="7">      {{#success build.status}}</a>
<a class="sourceLine" id="cb2-8" title="8">        {{repo.name}} is Success!</a>
<a class="sourceLine" id="cb2-9" title="9">      {{else}}</a>
<a class="sourceLine" id="cb2-10" title="10">        {{repo.name}} is Failure...</a>
<a class="sourceLine" id="cb2-11" title="11">      {{/success}}</a>
<a class="sourceLine" id="cb2-12" title="12">    <span class="fu">token:</span></a>
<a class="sourceLine" id="cb2-13" title="13">      <span class="fu">from_secret:</span><span class="at"> slack_token</span></a>
<a class="sourceLine" id="cb2-14" title="14">    <span class="fu">channel:</span><span class="at"> bot-test</span></a>
<a class="sourceLine" id="cb2-15" title="15">    <span class="fu">step_number:</span><span class="at"> </span><span class="dv">2</span></a>
<a class="sourceLine" id="cb2-16" title="16">    <span class="fu">drone_host:</span></a>
<a class="sourceLine" id="cb2-17" title="17">      <span class="fu">from_secret:</span><span class="at"> drone_host</span></a>
<a class="sourceLine" id="cb2-18" title="18">    <span class="fu">drone_token:</span></a>
<a class="sourceLine" id="cb2-19" title="19">      <span class="fu">from_secret:</span><span class="at"> drone_token</span></a>
<a class="sourceLine" id="cb2-20" title="20">  <span class="fu">when:</span></a>
<a class="sourceLine" id="cb2-21" title="21">    <span class="fu">status:</span></a>
<a class="sourceLine" id="cb2-22" title="22">    <span class="kw">-</span> success</a>
<a class="sourceLine" id="cb2-23" title="23">    <span class="kw">-</span> failure</a></code></pre></div>
<p>各 <code>settings</code> は:</p>
<ul>
<li><code>template</code> : スニペットのコメント</li>
<li><code>token</code> : slack にポストするための API トークン
<ul>
<li>個人トークンや <a href="https://slack.com/apps/A0F7YS25R-bots">Bots App</a> などから生成する</li>
</ul></li>
<li><code>channel</code> : 通知先チャンネル
<ul>
<li>無駄にテンプレートを利用できるようにした(ブランチやビルド結果によって通知先を変えるため)</li>
</ul></li>
<li><code>step_number</code> : 何ステップ目のログを通知したいか
<ul>
<li><code>step_number: 1</code> は git clone になる点に注意</li>
</ul></li>
<li><code>drone_host</code> : この CI を実行したい Drone のホスト
<ul>
<li>別にシークレットにする必要はないけど</li>
<li><code>https://cloud.drone.io</code> とか</li>
</ul></li>
<li><code>drone_token</code> : この CI を実行したい Drone の API トークン</li>
</ul>
<p>実行結果はこんな感じ:</p>
<p><img src="/assets/create-drone-slack-notify-log/example.jpg"></img></p>
<p>これは matsubara0507/drone-slack-notify-log のビルドステップ．</p>
<h2 id="おしまい">おしまい</h2>
<p>なんか他に良い方法が絶対にある気がするんだけどな…</p>
  </div>]]></summary>
</entry>
<entry>
    <title>Ruby のパターンマッチング機能を MinRuby で試す</title>
    <link href="https://matsubara0507.github.io/posts/2019-05-16-minruby-with-patternmatch.html" />
    <id>https://matsubara0507.github.io/posts/2019-05-16-minruby-with-patternmatch.html</id>
    <published>2019-05-16T00:00:00Z</published>
    <updated>2019-05-16T00:00:00Z</updated>
    <summary type="html"><![CDATA[<div class="post-content" itemprop="articleBody">
    <p>Ruby 2.7 で導入予定で，すでに <a href="https://github.com/ruby/ruby">Ruby リポジトリ</a>の trunk (いわゆる master ブランチのこと) にマージ済みの「パターンマッチング」機能を試してみたので，そのメモ書きです． 特に包括的に検証したわけではないので注意してください．</p>
<h2 id="パターンマッチング">パターンマッチング</h2>
<p>(わざわざ解説することでもないけど)</p>
<p>パターンマッチングは <code>if</code> 文や <code>case</code> 文のようなプログラムの分岐に使うプログラミング機能． <code>if</code> 文が真偽値を返す条件式 (e.g. <code>a &gt; 0 &amp;&amp; x == &#39;hoge&#39;</code>) の結果により分岐し，<code>case</code> 文が指定した変数の値によって分岐するのに対し，パターンマッチングは指定した変数のデータ構造によって分岐する．</p>
<p>例えば Ruby に導入されたパターンマッチングだと次のようになる:</p>
<div class="sourceCode" id="cb1"><pre class="sourceCode ruby"><code class="sourceCode ruby"><a class="sourceLine" id="cb1-1" title="1"><span class="kw">case</span> var <span class="co"># var のデータ構造により分岐</span></a>
<a class="sourceLine" id="cb1-2" title="2"><span class="kw">in</span> []</a>
<a class="sourceLine" id="cb1-3" title="3">  puts <span class="st">&quot;var is empty list&quot;</span></a>
<a class="sourceLine" id="cb1-4" title="4"><span class="kw">in</span> [a]</a>
<a class="sourceLine" id="cb1-5" title="5">  puts <span class="st">&quot;var is singleton: </span><span class="ot">#{</span>a<span class="ot">}</span><span class="st">&quot;</span> <span class="co"># 変数 a に値を代入する</span></a>
<a class="sourceLine" id="cb1-6" title="6"><span class="kw">in</span> [<span class="st">:hoge</span>, a, b]</a>
<a class="sourceLine" id="cb1-7" title="7">  puts <span class="st">&quot;var is hoge list: </span><span class="ot">#{</span>[a, b]<span class="ot">}</span><span class="st">&quot;</span> <span class="co"># 一要素目が :hoge の3要素リスト</span></a>
<a class="sourceLine" id="cb1-8" title="8"><span class="kw">else</span></a>
<a class="sourceLine" id="cb1-9" title="9">  puts <span class="st">&quot;No match: </span><span class="ot">#{</span>var<span class="ot">}</span><span class="st">&quot;</span> <span class="co"># else はどれにもマッチしないとき</span></a>
<a class="sourceLine" id="cb1-10" title="10"><span class="kw">end</span></a></code></pre></div>
<p>このようにデータ構造(例えば配列の要素数など)によって分岐かつ変数への代入が可能になる． パターンマッチングは様々なデータを扱うようなプログラミングを行う時に極めて簡潔にかつ直感的にプログラムを記述することができる．</p>
<p>ちなみに，パターンマッチングがあれば基本的に <code>if</code> 文も <code>case</code> 文も要らない． どちらもパターンマッチングの糖衣構文として表現でき，現に Haskell ではそうなっている(たぶん)．</p>
<h3 id="ruby-のパターンマッチング">Ruby のパターンマッチング</h3>
<p>ちょこちょこ既に記事があるが，RubyKaigi 2019 でも作者からの発表があり参考になる:</p>
<iframe class="embedly-embed" src="//cdn.embedly.com/widgets/media.html?src=https%3A%2F%2Fspeakerdeck.com%2Fplayer%2Fa853a73bba9d48ae88860f7c9b068334&amp;url=https%3A%2F%2Fspeakerdeck.com%2Fk_tsj%2Fpattern-matching-new-feature-in-ruby-2-dot-7&amp;image=https%3A%2F%2Fspeakerd.s3.amazonaws.com%2Fpresentations%2Fa853a73bba9d48ae88860f7c9b068334%2Fslide_0.jpg%3F510667&amp;key=internal&amp;type=text%2Fhtml&amp;schema=speakerdeck" width="500" height="299" scrolling="no" frameborder="0" allow="autoplay; fullscreen" allowfullscreen="true">
</iframe>
<p>すでに <a href="https://www.youtube.com/watch?v=paBlgsqoKk8">YouTube で動画も公開された</a>． ちなみに，2012 ぐらいからずっと作っていたらしい．</p>
<p>Elixir のピンパターン(<code>^var</code>)など，数多くのパターンマッチング機能がある(後発の利点ですね)． ただし，変数のスコープが個人的には思ってたのと違った:</p>
<div class="sourceCode" id="cb2"><pre class="sourceCode ruby"><code class="sourceCode ruby"><a class="sourceLine" id="cb2-1" title="1">irb(main):<span class="dv">001</span>:<span class="dv">0</span>&gt; <span class="kw">case</span> [<span class="dv">1</span>, <span class="dv">2</span>]</a>
<a class="sourceLine" id="cb2-2" title="2">irb(main):<span class="dv">002</span>:<span class="dv">1</span>&gt; <span class="kw">in</span> [a, <span class="dv">3</span>] <span class="kw">then</span> p a</a>
<a class="sourceLine" id="cb2-3" title="3">irb(main):<span class="dv">003</span>:<span class="dv">1</span>&gt; <span class="kw">in</span> [b, c] <span class="kw">then</span> p c</a>
<a class="sourceLine" id="cb2-4" title="4">irb(main):<span class="dv">004</span>:<span class="dv">1</span>&gt; <span class="kw">end</span></a>
<a class="sourceLine" id="cb2-5" title="5"><span class="dv">2</span></a>
<a class="sourceLine" id="cb2-6" title="6">=&gt; <span class="dv">2</span></a>
<a class="sourceLine" id="cb2-7" title="7">irb(main):<span class="dv">005</span>:<span class="dv">0</span>&gt; [a,b,c]</a>
<a class="sourceLine" id="cb2-8" title="8">=&gt; [<span class="dv">1</span>, <span class="dv">1</span>, <span class="dv">2</span>]</a></code></pre></div>
<p><code>in ..</code> ごとにスコープは閉じてるのが一般的な気がするけど Ruby でそれは難しいのだろうか(<code>if</code> 文や <code>case</code> 文でもこんな感じの挙動)．</p>
<h2 id="試す">試す</h2>
<h3 id="ruby2.7-dev">Ruby2.7-dev</h3>
<p>前述した通り，パターンマッチングは trunk にマージされているので Ruby2.7-dev で試すことができる． trunk を試す方法はいくつかあると思うが，僕は手っ取り早く <a href="https://github.com/rbenv/rbenv">rbenv</a> を使った．</p>
<pre><code>$ rbenv install 2.7.0-dev</code></pre>
<h3 id="minruby">MinRuby</h3>
<p>パターンマッチングを試す対象として，「<a href="https://ascii.jp/elem/000/001/230/1230449/">Ruby で学ぶ Ruby</a>」という連載で作っている，かなり簡易的な Ruby のサブセット処理系 MinRuby を利用する．</p>
<p>最終的な処理系は <a href="https://github.com/matsubara0507/MinRuby.rb/blob/dbe9891f916877fc3c260135696f48344bceb98a/interp.rb">Ruby コード一枚</a>でできている(一番めんどくさい構文解析を <a href="https://github.com/ruby/ruby/tree/970a25b10415bc3735e6e3c165e167e6abc3d7f4/ext/ripper">ripper</a> とそのラッパー <a href="https://github.com/mame/minruby">minruby</a> というのに任せているので):</p>
<div class="sourceCode" id="cb4"><pre class="sourceCode ruby"><code class="sourceCode ruby"><a class="sourceLine" id="cb4-1" title="1"><span class="co"># interp.rb</span></a>
<a class="sourceLine" id="cb4-2" title="2">require <span class="st">&quot;minruby&quot;</span></a>
<a class="sourceLine" id="cb4-3" title="3"></a>
<a class="sourceLine" id="cb4-4" title="4"><span class="kw">def</span> evaluate(tree, genv, lenv)</a>
<a class="sourceLine" id="cb4-5" title="5">  <span class="kw">case</span> tree[<span class="dv">0</span>]</a>
<a class="sourceLine" id="cb4-6" title="6">  <span class="kw">when</span> <span class="st">&quot;lit&quot;</span></a>
<a class="sourceLine" id="cb4-7" title="7">    tree[<span class="dv">1</span>]</a>
<a class="sourceLine" id="cb4-8" title="8">  <span class="kw">when</span> <span class="st">&quot;+&quot;</span></a>
<a class="sourceLine" id="cb4-9" title="9">    evaluate(tree[<span class="dv">1</span>], genv, lenv) + evaluate(tree[<span class="dv">2</span>], genv, lenv)</a>
<a class="sourceLine" id="cb4-10" title="10">  <span class="kw">when</span> <span class="st">&quot;-&quot;</span></a>
<a class="sourceLine" id="cb4-11" title="11">    evaluate(tree[<span class="dv">1</span>], genv, lenv) - evaluate(tree[<span class="dv">2</span>], genv, lenv)</a>
<a class="sourceLine" id="cb4-12" title="12">  <span class="kw">when</span> <span class="st">&quot;*&quot;</span></a>
<a class="sourceLine" id="cb4-13" title="13">    evaluate(tree[<span class="dv">1</span>], genv, lenv) * evaluate(tree[<span class="dv">2</span>], genv, lenv)</a>
<a class="sourceLine" id="cb4-14" title="14">  <span class="kw">when</span> <span class="st">&quot;/&quot;</span></a>
<a class="sourceLine" id="cb4-15" title="15">    evaluate(tree[<span class="dv">1</span>], genv, lenv) / evaluate(tree[<span class="dv">2</span>], genv, lenv)</a>
<a class="sourceLine" id="cb4-16" title="16">  <span class="kw">when</span> <span class="st">&quot;%&quot;</span></a>
<a class="sourceLine" id="cb4-17" title="17">    evaluate(tree[<span class="dv">1</span>], genv, lenv) % evaluate(tree[<span class="dv">2</span>], genv, lenv)</a>
<a class="sourceLine" id="cb4-18" title="18">  <span class="kw">when</span> <span class="st">&quot;&lt;&quot;</span></a>
<a class="sourceLine" id="cb4-19" title="19">    evaluate(tree[<span class="dv">1</span>], genv, lenv) &lt; evaluate(tree[<span class="dv">2</span>], genv, lenv)</a>
<a class="sourceLine" id="cb4-20" title="20">  <span class="kw">when</span> <span class="st">&quot;&lt;=&quot;</span></a>
<a class="sourceLine" id="cb4-21" title="21">    evaluate(tree[<span class="dv">1</span>], genv, lenv) &lt;= evaluate(tree[<span class="dv">2</span>], genv, lenv)</a>
<a class="sourceLine" id="cb4-22" title="22">  <span class="kw">when</span> <span class="st">&quot;==&quot;</span></a>
<a class="sourceLine" id="cb4-23" title="23">    evaluate(tree[<span class="dv">1</span>], genv, lenv) == evaluate(tree[<span class="dv">2</span>], genv, lenv)</a>
<a class="sourceLine" id="cb4-24" title="24">  <span class="kw">when</span> <span class="st">&quot;!=&quot;</span></a>
<a class="sourceLine" id="cb4-25" title="25">    evaluate(tree[<span class="dv">1</span>], genv, lenv) != evaluate(tree[<span class="dv">2</span>], genv, lenv)</a>
<a class="sourceLine" id="cb4-26" title="26">  <span class="kw">when</span> <span class="st">&quot;&gt;=&quot;</span></a>
<a class="sourceLine" id="cb4-27" title="27">    evaluate(tree[<span class="dv">1</span>], genv, lenv) &gt;= evaluate(tree[<span class="dv">2</span>], genv, lenv)</a>
<a class="sourceLine" id="cb4-28" title="28">  <span class="kw">when</span> <span class="st">&quot;&gt;&quot;</span></a>
<a class="sourceLine" id="cb4-29" title="29">    evaluate(tree[<span class="dv">1</span>], genv, lenv) &gt; evaluate(tree[<span class="dv">2</span>], genv, lenv)</a>
<a class="sourceLine" id="cb4-30" title="30">  <span class="kw">when</span> <span class="st">&quot;stmts&quot;</span></a>
<a class="sourceLine" id="cb4-31" title="31">    i = <span class="dv">1</span></a>
<a class="sourceLine" id="cb4-32" title="32">    last = <span class="dv">nil</span></a>
<a class="sourceLine" id="cb4-33" title="33">    <span class="kw">while</span> tree[i]</a>
<a class="sourceLine" id="cb4-34" title="34">      last = evaluate(tree[i], genv, lenv)</a>
<a class="sourceLine" id="cb4-35" title="35">      i = i + <span class="dv">1</span></a>
<a class="sourceLine" id="cb4-36" title="36">    <span class="kw">end</span></a>
<a class="sourceLine" id="cb4-37" title="37">    last</a>
<a class="sourceLine" id="cb4-38" title="38">  <span class="kw">when</span> <span class="st">&quot;var_assign&quot;</span></a>
<a class="sourceLine" id="cb4-39" title="39">    lenv[tree[<span class="dv">1</span>]] = evaluate(tree[<span class="dv">2</span>], genv, lenv)</a>
<a class="sourceLine" id="cb4-40" title="40">  <span class="kw">when</span> <span class="st">&quot;var_ref&quot;</span></a>
<a class="sourceLine" id="cb4-41" title="41">    lenv[tree[<span class="dv">1</span>]]</a>
<a class="sourceLine" id="cb4-42" title="42">  <span class="kw">when</span> <span class="st">&quot;if&quot;</span></a>
<a class="sourceLine" id="cb4-43" title="43">    <span class="kw">if</span> evaluate(tree[<span class="dv">1</span>], genv, lenv)</a>
<a class="sourceLine" id="cb4-44" title="44">      evaluate(tree[<span class="dv">2</span>], genv, lenv)</a>
<a class="sourceLine" id="cb4-45" title="45">    <span class="kw">else</span></a>
<a class="sourceLine" id="cb4-46" title="46">      evaluate(tree[<span class="dv">3</span>], genv, lenv)</a>
<a class="sourceLine" id="cb4-47" title="47">    <span class="kw">end</span></a>
<a class="sourceLine" id="cb4-48" title="48">  <span class="kw">when</span> <span class="st">&quot;while&quot;</span></a>
<a class="sourceLine" id="cb4-49" title="49">    <span class="kw">while</span> evaluate(tree[<span class="dv">1</span>], genv, lenv)</a>
<a class="sourceLine" id="cb4-50" title="50">      evaluate(tree[<span class="dv">2</span>], genv, lenv)</a>
<a class="sourceLine" id="cb4-51" title="51">    <span class="kw">end</span></a>
<a class="sourceLine" id="cb4-52" title="52">  <span class="kw">when</span> <span class="st">&quot;func_def&quot;</span></a>
<a class="sourceLine" id="cb4-53" title="53">    genv[tree[<span class="dv">1</span>]] = [<span class="st">&quot;user_defined&quot;</span>, tree[<span class="dv">2</span>], tree[<span class="dv">3</span>]]</a>
<a class="sourceLine" id="cb4-54" title="54">  <span class="kw">when</span> <span class="st">&quot;func_call&quot;</span></a>
<a class="sourceLine" id="cb4-55" title="55">    args = []</a>
<a class="sourceLine" id="cb4-56" title="56">    i = <span class="dv">0</span></a>
<a class="sourceLine" id="cb4-57" title="57">    <span class="kw">while</span> tree[i + <span class="dv">2</span>]</a>
<a class="sourceLine" id="cb4-58" title="58">      args[i] = evaluate(tree[i + <span class="dv">2</span>], genv, lenv)</a>
<a class="sourceLine" id="cb4-59" title="59">      i = i + <span class="dv">1</span></a>
<a class="sourceLine" id="cb4-60" title="60">    <span class="kw">end</span></a>
<a class="sourceLine" id="cb4-61" title="61">    mhd = genv[tree[<span class="dv">1</span>]]</a>
<a class="sourceLine" id="cb4-62" title="62">    <span class="kw">if</span> mhd[<span class="dv">0</span>] == <span class="st">&quot;builtin&quot;</span></a>
<a class="sourceLine" id="cb4-63" title="63">      minruby_call(mhd[<span class="dv">1</span>], args)</a>
<a class="sourceLine" id="cb4-64" title="64">    <span class="kw">else</span></a>
<a class="sourceLine" id="cb4-65" title="65">      new_lenv = {}</a>
<a class="sourceLine" id="cb4-66" title="66">      params = mhd[<span class="dv">1</span>]</a>
<a class="sourceLine" id="cb4-67" title="67">      i = <span class="dv">0</span></a>
<a class="sourceLine" id="cb4-68" title="68">      <span class="kw">while</span> params[i]</a>
<a class="sourceLine" id="cb4-69" title="69">        new_lenv[params[i]] = args[i]</a>
<a class="sourceLine" id="cb4-70" title="70">        i = i + <span class="dv">1</span></a>
<a class="sourceLine" id="cb4-71" title="71">      <span class="kw">end</span></a>
<a class="sourceLine" id="cb4-72" title="72">      evaluate(mhd[<span class="dv">2</span>], genv, new_lenv)</a>
<a class="sourceLine" id="cb4-73" title="73">    <span class="kw">end</span></a>
<a class="sourceLine" id="cb4-74" title="74">  <span class="kw">when</span> <span class="st">&quot;ary_new&quot;</span></a>
<a class="sourceLine" id="cb4-75" title="75">    ary = []</a>
<a class="sourceLine" id="cb4-76" title="76">    i = <span class="dv">0</span></a>
<a class="sourceLine" id="cb4-77" title="77">    <span class="kw">while</span> tree[i + <span class="dv">1</span>]</a>
<a class="sourceLine" id="cb4-78" title="78">      ary[i] = evaluate(tree[i + <span class="dv">1</span>], genv, lenv)</a>
<a class="sourceLine" id="cb4-79" title="79">      i = i + <span class="dv">1</span></a>
<a class="sourceLine" id="cb4-80" title="80">    <span class="kw">end</span></a>
<a class="sourceLine" id="cb4-81" title="81">    ary</a>
<a class="sourceLine" id="cb4-82" title="82">  <span class="kw">when</span> <span class="st">&quot;ary_ref&quot;</span></a>
<a class="sourceLine" id="cb4-83" title="83">    ary = evaluate(tree[<span class="dv">1</span>], genv, lenv)</a>
<a class="sourceLine" id="cb4-84" title="84">    idx = evaluate(tree[<span class="dv">2</span>], genv, lenv)</a>
<a class="sourceLine" id="cb4-85" title="85">    ary[idx]</a>
<a class="sourceLine" id="cb4-86" title="86">  <span class="kw">when</span> <span class="st">&quot;ary_assign&quot;</span></a>
<a class="sourceLine" id="cb4-87" title="87">    ary = evaluate(tree[<span class="dv">1</span>], genv, lenv)</a>
<a class="sourceLine" id="cb4-88" title="88">    idx = evaluate(tree[<span class="dv">2</span>], genv, lenv)</a>
<a class="sourceLine" id="cb4-89" title="89">    val = evaluate(tree[<span class="dv">3</span>], genv, lenv)</a>
<a class="sourceLine" id="cb4-90" title="90">    ary[idx] = val</a>
<a class="sourceLine" id="cb4-91" title="91">  <span class="kw">when</span> <span class="st">&quot;hash_new&quot;</span></a>
<a class="sourceLine" id="cb4-92" title="92">    hsh = {}</a>
<a class="sourceLine" id="cb4-93" title="93">    i = <span class="dv">0</span></a>
<a class="sourceLine" id="cb4-94" title="94">    <span class="kw">while</span> tree[i + <span class="dv">1</span>]</a>
<a class="sourceLine" id="cb4-95" title="95">      key = evaluate(tree[i + <span class="dv">1</span>], genv, lenv)</a>
<a class="sourceLine" id="cb4-96" title="96">      val = evaluate(tree[i + <span class="dv">2</span>], genv, lenv)</a>
<a class="sourceLine" id="cb4-97" title="97">      hsh[key] = val</a>
<a class="sourceLine" id="cb4-98" title="98">      i = i + <span class="dv">2</span></a>
<a class="sourceLine" id="cb4-99" title="99">    <span class="kw">end</span></a>
<a class="sourceLine" id="cb4-100" title="100">    hsh</a>
<a class="sourceLine" id="cb4-101" title="101">  <span class="kw">end</span></a>
<a class="sourceLine" id="cb4-102" title="102"><span class="kw">end</span></a>
<a class="sourceLine" id="cb4-103" title="103"></a>
<a class="sourceLine" id="cb4-104" title="104">str = minruby_load()</a>
<a class="sourceLine" id="cb4-105" title="105"></a>
<a class="sourceLine" id="cb4-106" title="106">tree = minruby_parse(str)</a>
<a class="sourceLine" id="cb4-107" title="107"></a>
<a class="sourceLine" id="cb4-108" title="108">genv = {</a>
<a class="sourceLine" id="cb4-109" title="109">  <span class="st">&quot;p&quot;</span> =&gt; [<span class="st">&quot;builtin&quot;</span>, <span class="st">&quot;p&quot;</span>],</a>
<a class="sourceLine" id="cb4-110" title="110">  <span class="st">&quot;require&quot;</span> =&gt; [<span class="st">&quot;builtin&quot;</span>, <span class="st">&quot;require&quot;</span>],</a>
<a class="sourceLine" id="cb4-111" title="111">  <span class="st">&quot;minruby_parse&quot;</span> =&gt; [<span class="st">&quot;builtin&quot;</span>, <span class="st">&quot;minruby_parse&quot;</span>],</a>
<a class="sourceLine" id="cb4-112" title="112">  <span class="st">&quot;minruby_load&quot;</span> =&gt; [<span class="st">&quot;builtin&quot;</span>, <span class="st">&quot;minruby_load&quot;</span>],</a>
<a class="sourceLine" id="cb4-113" title="113">  <span class="st">&quot;minruby_call&quot;</span> =&gt; [<span class="st">&quot;builtin&quot;</span>, <span class="st">&quot;minruby_call&quot;</span>],</a>
<a class="sourceLine" id="cb4-114" title="114">}</a>
<a class="sourceLine" id="cb4-115" title="115">lenv = {}</a>
<a class="sourceLine" id="cb4-116" title="116">evaluate(tree, genv, lenv)</a></code></pre></div>
<p>コードを見て分かるように(?)，配列の一引数目のリテラルで <code>case</code> 文による分岐をし，分岐先で配列の要素を引っ張っている． このようにデータ構造 + <code>case</code> 文による分岐はパターンマッチングにうってつけのユースケースだ．</p>
<h3 id="minruby-パターンマッチング">MinRuby + パターンマッチング</h3>
<p>作業リポジトリはこれ:</p>
<iframe width="426" height="162" scrolling="no" frameborder="0" src="https://matsubara0507.github.io/my-github-cards/?target=matsubara0507/MinRuby.rb">
</iframe>
<p><code>pattern-match</code> というブランチにパターンマッチングで書き換えたコードがある． パターンマッチングで書き換えたのは <code>evaluate</code> 関数だけなのでそこだけ載せる:</p>
<div class="sourceCode" id="cb5"><pre class="sourceCode ruby"><code class="sourceCode ruby"><a class="sourceLine" id="cb5-1" title="1"><span class="kw">def</span> evaluate(tree, genv, lenv)</a>
<a class="sourceLine" id="cb5-2" title="2">  <span class="kw">case</span> tree</a>
<a class="sourceLine" id="cb5-3" title="3">  <span class="kw">in</span> <span class="st">&quot;lit&quot;</span>, lit</a>
<a class="sourceLine" id="cb5-4" title="4">    lit</a>
<a class="sourceLine" id="cb5-5" title="5">  <span class="kw">in</span> <span class="st">&quot;+&quot;</span>, exp1, exp2</a>
<a class="sourceLine" id="cb5-6" title="6">    evaluate(exp1, genv, lenv) + evaluate(exp2, genv, lenv)</a>
<a class="sourceLine" id="cb5-7" title="7">  <span class="kw">in</span> <span class="st">&quot;-&quot;</span>, exp1, exp2</a>
<a class="sourceLine" id="cb5-8" title="8">    evaluate(exp1, genv, lenv) - evaluate(exp2, genv, lenv)</a>
<a class="sourceLine" id="cb5-9" title="9">  <span class="kw">in</span> <span class="st">&quot;*&quot;</span>, exp1, exp2</a>
<a class="sourceLine" id="cb5-10" title="10">    evaluate(exp1, genv, lenv) * evaluate(exp2, genv, lenv)</a>
<a class="sourceLine" id="cb5-11" title="11">  <span class="kw">in</span> <span class="st">&quot;/&quot;</span>, exp1, exp2</a>
<a class="sourceLine" id="cb5-12" title="12">    evaluate(exp1, genv, lenv) / evaluate(exp2, genv, lenv)</a>
<a class="sourceLine" id="cb5-13" title="13">  <span class="kw">in</span> <span class="st">&quot;%&quot;</span>, exp1, exp2</a>
<a class="sourceLine" id="cb5-14" title="14">    evaluate(exp1, genv, lenv) % evaluate(exp2, genv, lenv)</a>
<a class="sourceLine" id="cb5-15" title="15">  <span class="kw">in</span> <span class="st">&quot;&lt;&quot;</span>, exp1, exp2</a>
<a class="sourceLine" id="cb5-16" title="16">    evaluate(exp1, genv, lenv) &lt; evaluate(exp2, genv, lenv)</a>
<a class="sourceLine" id="cb5-17" title="17">  <span class="kw">in</span> <span class="st">&quot;&lt;=&quot;</span>, exp1, exp2</a>
<a class="sourceLine" id="cb5-18" title="18">    evaluate(exp1, genv, lenv) &lt;= evaluate(exp2, genv, lenv)</a>
<a class="sourceLine" id="cb5-19" title="19">  <span class="kw">in</span> <span class="st">&quot;==&quot;</span>, exp1, exp2</a>
<a class="sourceLine" id="cb5-20" title="20">    evaluate(exp1, genv, lenv) == evaluate(exp2, genv, lenv)</a>
<a class="sourceLine" id="cb5-21" title="21">  <span class="kw">in</span> <span class="st">&quot;!=&quot;</span>, exp1, exp2</a>
<a class="sourceLine" id="cb5-22" title="22">    evaluate(exp1, genv, lenv) != evaluate(exp2, genv, lenv)</a>
<a class="sourceLine" id="cb5-23" title="23">  <span class="kw">in</span> <span class="st">&quot;&gt;=&quot;</span>, exp1, exp2</a>
<a class="sourceLine" id="cb5-24" title="24">    evaluate(exp1, genv, lenv) &gt;= evaluate(exp2, genv, lenv)</a>
<a class="sourceLine" id="cb5-25" title="25">  <span class="kw">in</span> <span class="st">&quot;&gt;&quot;</span>, exp1, exp2</a>
<a class="sourceLine" id="cb5-26" title="26">    evaluate(exp1, genv, lenv) &gt; evaluate(exp2, genv, lenv)</a>
<a class="sourceLine" id="cb5-27" title="27">  <span class="kw">in</span> <span class="st">&quot;stmts&quot;</span>, *stmts</a>
<a class="sourceLine" id="cb5-28" title="28">    last = <span class="dv">nil</span></a>
<a class="sourceLine" id="cb5-29" title="29">    i = <span class="dv">0</span></a>
<a class="sourceLine" id="cb5-30" title="30">    <span class="kw">while</span> stmts[i]</a>
<a class="sourceLine" id="cb5-31" title="31">      last = evaluate(stmts[i], genv, lenv)</a>
<a class="sourceLine" id="cb5-32" title="32">      i = i + <span class="dv">1</span></a>
<a class="sourceLine" id="cb5-33" title="33">    <span class="kw">end</span></a>
<a class="sourceLine" id="cb5-34" title="34">    last</a>
<a class="sourceLine" id="cb5-35" title="35">  <span class="kw">in</span> <span class="st">&quot;var_assign&quot;</span>, var_name, var_value</a>
<a class="sourceLine" id="cb5-36" title="36">    lenv[var_name] = evaluate(var_value, genv, lenv)</a>
<a class="sourceLine" id="cb5-37" title="37">  <span class="kw">in</span> <span class="st">&quot;var_ref&quot;</span>, var_name</a>
<a class="sourceLine" id="cb5-38" title="38">    lenv[var_name]</a>
<a class="sourceLine" id="cb5-39" title="39">  <span class="kw">in</span> <span class="st">&quot;if&quot;</span>, cond, exp1, exp2</a>
<a class="sourceLine" id="cb5-40" title="40">    <span class="kw">if</span> evaluate(cond, genv, lenv)</a>
<a class="sourceLine" id="cb5-41" title="41">      evaluate(exp1, genv, lenv)</a>
<a class="sourceLine" id="cb5-42" title="42">    <span class="kw">else</span></a>
<a class="sourceLine" id="cb5-43" title="43">      evaluate(exp2, genv, lenv)</a>
<a class="sourceLine" id="cb5-44" title="44">    <span class="kw">end</span></a>
<a class="sourceLine" id="cb5-45" title="45">  <span class="kw">in</span> <span class="st">&quot;while&quot;</span>, cond, exp</a>
<a class="sourceLine" id="cb5-46" title="46">    <span class="kw">while</span> evaluate(cond, genv, lenv)</a>
<a class="sourceLine" id="cb5-47" title="47">      evaluate(exp, genv, lenv)</a>
<a class="sourceLine" id="cb5-48" title="48">    <span class="kw">end</span></a>
<a class="sourceLine" id="cb5-49" title="49">  <span class="kw">in</span> <span class="st">&quot;func_def&quot;</span>, func_name, func_args, func_body</a>
<a class="sourceLine" id="cb5-50" title="50">    genv[func_name] = [<span class="st">&quot;user_defined&quot;</span>, func_args, func_body]</a>
<a class="sourceLine" id="cb5-51" title="51">  <span class="kw">in</span> <span class="st">&quot;func_call&quot;</span>, func_name, *func_args</a>
<a class="sourceLine" id="cb5-52" title="52">    args = []</a>
<a class="sourceLine" id="cb5-53" title="53">    i = <span class="dv">0</span></a>
<a class="sourceLine" id="cb5-54" title="54">    <span class="kw">while</span> func_args[i]</a>
<a class="sourceLine" id="cb5-55" title="55">      args[i] = evaluate(func_args[i], genv, lenv)</a>
<a class="sourceLine" id="cb5-56" title="56">      i = i + <span class="dv">1</span></a>
<a class="sourceLine" id="cb5-57" title="57">    <span class="kw">end</span></a>
<a class="sourceLine" id="cb5-58" title="58">    mhd = genv[func_name]</a>
<a class="sourceLine" id="cb5-59" title="59">    <span class="kw">if</span> mhd[<span class="dv">0</span>] == <span class="st">&quot;builtin&quot;</span></a>
<a class="sourceLine" id="cb5-60" title="60">      minruby_call(mhd[<span class="dv">1</span>], args)</a>
<a class="sourceLine" id="cb5-61" title="61">    <span class="kw">else</span></a>
<a class="sourceLine" id="cb5-62" title="62">      new_lenv = {}</a>
<a class="sourceLine" id="cb5-63" title="63">      params = mhd[<span class="dv">1</span>]</a>
<a class="sourceLine" id="cb5-64" title="64">      i = <span class="dv">0</span></a>
<a class="sourceLine" id="cb5-65" title="65">      <span class="kw">while</span> params[i]</a>
<a class="sourceLine" id="cb5-66" title="66">        new_lenv[params[i]] = args[i]</a>
<a class="sourceLine" id="cb5-67" title="67">        i = i + <span class="dv">1</span></a>
<a class="sourceLine" id="cb5-68" title="68">      <span class="kw">end</span></a>
<a class="sourceLine" id="cb5-69" title="69">      evaluate(mhd[<span class="dv">2</span>], genv, new_lenv)</a>
<a class="sourceLine" id="cb5-70" title="70">    <span class="kw">end</span></a>
<a class="sourceLine" id="cb5-71" title="71">  <span class="kw">in</span> <span class="st">&quot;ary_new&quot;</span>, ary_values</a>
<a class="sourceLine" id="cb5-72" title="72">    ary = []</a>
<a class="sourceLine" id="cb5-73" title="73">    i = <span class="dv">0</span></a>
<a class="sourceLine" id="cb5-74" title="74">    <span class="kw">while</span> ary_values[i]</a>
<a class="sourceLine" id="cb5-75" title="75">      ary [i] = evaluate(ary_values[i], genv, lenv)</a>
<a class="sourceLine" id="cb5-76" title="76">      i = i + <span class="dv">1</span></a>
<a class="sourceLine" id="cb5-77" title="77">    <span class="kw">end</span></a>
<a class="sourceLine" id="cb5-78" title="78">  <span class="kw">in</span> <span class="st">&quot;ary_ref&quot;</span>, ary_exp, idx_exp</a>
<a class="sourceLine" id="cb5-79" title="79">    ary = evaluate(ary_exp, genv, lenv)</a>
<a class="sourceLine" id="cb5-80" title="80">    idx = evaluate(idx_exp, genv, lenv)</a>
<a class="sourceLine" id="cb5-81" title="81">    ary[idx]</a>
<a class="sourceLine" id="cb5-82" title="82">  <span class="kw">in</span> <span class="st">&quot;ary_assign&quot;</span>, ary_exp, idx_exp, value_exp</a>
<a class="sourceLine" id="cb5-83" title="83">    ary = evaluate(ary_exp, genv, lenv)</a>
<a class="sourceLine" id="cb5-84" title="84">    idx = evaluate(idx_exp, genv, lenv)</a>
<a class="sourceLine" id="cb5-85" title="85">    val = evaluate(value_exp, genv, lenv)</a>
<a class="sourceLine" id="cb5-86" title="86">    ary[idx] = val</a>
<a class="sourceLine" id="cb5-87" title="87">  <span class="kw">in</span> <span class="st">&quot;hash_new&quot;</span>, *key_values</a>
<a class="sourceLine" id="cb5-88" title="88">    hsh = {}</a>
<a class="sourceLine" id="cb5-89" title="89">    i = <span class="dv">0</span></a>
<a class="sourceLine" id="cb5-90" title="90">    <span class="kw">while</span> key_values[i]</a>
<a class="sourceLine" id="cb5-91" title="91">      key = evaluate(key_values[i], genv, lenv)</a>
<a class="sourceLine" id="cb5-92" title="92">      val = evaluate(key_values[i + <span class="dv">1</span>], genv, lenv)</a>
<a class="sourceLine" id="cb5-93" title="93">      hsh[key] = val</a>
<a class="sourceLine" id="cb5-94" title="94">      i = i + <span class="dv">2</span></a>
<a class="sourceLine" id="cb5-95" title="95">    <span class="kw">end</span></a>
<a class="sourceLine" id="cb5-96" title="96">    hsh</a>
<a class="sourceLine" id="cb5-97" title="97">  <span class="kw">end</span></a>
<a class="sourceLine" id="cb5-98" title="98"><span class="kw">end</span></a></code></pre></div>
<p>配列にマッチさせる場合，<code>in [a, b, c]</code> の <code>[]</code> を省くことができる． また，<code>in &quot;hoge&quot;, *rest</code> は配列の残りの要素全てを <code>*rest</code> にマッチさせる構文だ． 他は特別な機能を使ってないのできっと読めるでしょう．</p>
<h2 id="おまけ-minruby-パターンマッチング">おまけ: minruby + パターンマッチング</h2>
<p>試しに <code>minruby</code> もパターンマッチで書き換えてみた． 差分は<a href="https://github.com/matsubara0507/minruby-gem/pull/1">これ</a>． めちゃくちゃやっつけで作ったので穴があるかもしれない．</p>
<p>ここでは新しく Alternative Pattern を使っている． こういうのだ:</p>
<div class="sourceCode" id="cb6"><pre class="sourceCode ruby"><code class="sourceCode ruby"><a class="sourceLine" id="cb6-1" title="1"><span class="co"># Alternative Pattern: hoge | fuga</span></a>
<a class="sourceLine" id="cb6-2" title="2"><span class="kw">in</span> (<span class="st">:program</span> | <span class="st">:bodystmt</span>), exp1, *_</a>
<a class="sourceLine" id="cb6-3" title="3">    make_stmts(exp1)</a></code></pre></div>
<p>Alternative Pattern には注意点があって，このパターンでは変数へのマッチを利用することができない:</p>
<div class="sourceCode" id="cb7"><pre class="sourceCode ruby"><code class="sourceCode ruby"><a class="sourceLine" id="cb7-1" title="1"><span class="co"># Error: illegal variable in alternative pattern</span></a>
<a class="sourceLine" id="cb7-2" title="2"><span class="kw">in</span> (<span class="st">:program</span> exp1, *_ | <span class="st">:bodystmt</span> exp1, *_),</a>
<a class="sourceLine" id="cb7-3" title="3">    make_stmts(exp1)</a></code></pre></div>
<p>ここからは余談． MinRuby は <code>ruby interp.rb interp.rb fizzbuzz.rb</code> のように自身を自身で評価することが可能だ(そのため <code>map</code> や <code>foreach</code> などを使わずに少し冗長なコードになっている)． しかし，パターンマッチングを導入しちゃうとこれができない． なんとかできないかなぁと思って <code>minruby</code> をパターンマッチングで書き換えてみたけど，まぁ無理でした． いいアイデアあったら教えて．</p>
<h2 id="おしまい">おしまい</h2>
<p>次は型検査も試したいですね．</p>
  </div>]]></summary>
</entry>
<entry>
    <title>GitHub Card を生成する SPA を Elm で作った</title>
    <link href="https://matsubara0507.github.io/posts/2019-05-12-create-my-github-cards.html" />
    <id>https://matsubara0507.github.io/posts/2019-05-12-create-my-github-cards.html</id>
    <published>2019-05-12T00:00:00Z</published>
    <updated>2019-05-12T00:00:00Z</updated>
    <summary type="html"><![CDATA[<div class="post-content" itemprop="articleBody">
    <p>Qiita や自分のブログに GitHub のリポジトリのリンク貼ってもなんか寂しいからいい感じのカードっぽいやつ生成するやつを作ったって話です． iframe で埋め込むことができます。</p>
<p><strong>だがしかし！Qiita などに任意の iframe が埋め込めるわけないジャーーーン！</strong></p>
<p>ということに，だいたい完成してから気づいた orz</p>
<h3 id="github-card">GitHub Card</h3>
<p>特別定義はないけど，<a href="https://lab.lepture.com/github-cards/">こんな感じ</a>のを iframe で作りたかった．</p>
<h2 id="作る">作る</h2>
<p>マイフェィバリット JS 系プログラミング言語 Elm を使った． だいたい半日ぐらいかかった．GWの最終日．GW最高． リポジトリはこれ:</p>
<h4 id="section"><iframe width="426" height="162" scrolling="no" frameborder="0" src="https://matsubara0507.github.io/my-github-cards/?target=matsubara0507/github-card"></iframe></h4>
<p><a href="https://matsubara0507.github.io/github-card">GitHub Pages に置いた</a>ので誰でも試せる． ただし，裏では GitHub API v3 をトークンなしで叩いてる…</p>
<p>こんな感じになる:</p>
<p><a href="https://matsubara0507.github.io/github-card/#matsubara0507"><img src="/assets/create-my-github-cards/user-github-card.jpg" style="max-width: 500px;"></a></p>
<p><a href="https://matsubara0507.github.io/github-card/#matsubara0507/github-card"><img src="/assets/create-my-github-cards/repo-github-card.jpg" style="max-width: 500px;"></a></p>
<p>上がユーザーのカードで下がリポジトリのカード． <code>Embed:</code> の下に書いてある iframe タグをコピペすることで埋め込める．</p>
<h3 id="ちょっとした工夫">ちょっとした工夫</h3>
<p>Elm の <code>Browser.application</code> の URL 機能を<del>わざわざ</del>使って色々工夫してる:</p>
<ul>
<li><code>https://xxxx#name</code> とすることで直接任意ユーザー/リポジトリのカードのページを開ける
<ul>
<li>実は <code>Build</code> ボタンで <code>#name</code> にジャンプしてる笑</li>
</ul></li>
<li><code>https://xxx?target=name</code> とすることで <code>name</code> のカードだけを表示
<ul>
<li>iframe にはこっちを使う</li>
</ul></li>
<li><code>getElementById</code> とか<del>わざわざ</del>してぴったりの <code>width</code> と <code>height</code> を iframe に生成してる</li>
</ul>
<h3 id="問題点">問題点</h3>
<p>上述した通り，GitHub API をトークンなしで利用しているので rate limit がある(同一アドレスから60req/h)． 開いた人によってはページが見れないのは悲しい…</p>
<h2 id="作るパート2">作る(パート2)</h2>
<p>ウンウン考えながら帰宅してたら気づいた． どーせ GitHub のユーザーやリポジトリのステータスなんてコロコロ変わるもんでもないし，<strong>適当に JSON で吐いておいて毎日更新する CI でも回しておけば良くない??</strong> と．</p>
<p>ということで、思いついてしまったので作ってしまった． 気づいたら朝4時．GW延長戦(????)．</p>
<h3 id="できたもの">できたもの</h3>
<p>集める部分と表示する部分を分けた:</p>
<h4 id="section-1"><iframe width="426" height="162" scrolling="no" frameborder="0" src="https://matsubara0507.github.io/my-github-cards/?target=matsubara0507/selfcat"></iframe></h4>
<h4 id="section-2"><iframe width="426" height="162" scrolling="no" frameborder="0" src="https://matsubara0507.github.io/my-github-cards/?target=matsubara0507/my-github-cards"></iframe></h4>
<p>前回の <a href="https://github.com/matsubara0507/github-card">matsubara0507/github-card</a> と違い自分専用． selfcat という CLI ツールで次のような設定ファイル <code>.selfcat.yaml</code> にあるユーザーとリポジトリの情報を収集(GitHub API v3)し，JSON として保存する． もちろん Haskell 製．</p>
<div class="sourceCode" id="cb1"><pre class="sourceCode yaml"><code class="sourceCode yaml"><a class="sourceLine" id="cb1-1" title="1"><span class="fu">owner:</span><span class="at"> matsubara0507</span></a>
<a class="sourceLine" id="cb1-2" title="2"><span class="fu">repos:</span></a>
<a class="sourceLine" id="cb1-3" title="3"><span class="kw">-</span> mix.hs</a>
<a class="sourceLine" id="cb1-4" title="4"><span class="kw">-</span> selfcat</a></code></pre></div>
<p><code>--compact</code> オプションをつけることで一つの JSON にまとめてくれる． my-github-cards の方は selfcat を使って一つにまとめて生成した JSON ファイルを読み込んで GitHub Card を表示する． 表示した見た目は前回のと同じ．</p>
<h3 id="selfcat">selfcat</h3>
<p>これはやってること単純:</p>
<ol type="1">
<li>設定ファイルの YAML を読み込み (<a href="http://hackage.haskell.org/package/yaml">yaml</a> パッケージ)</li>
<li>GitHub API を叩き (<a href="http://hackage.haskell.org/package/github">github</a> パッケージ)</li>
<li>JSON を吐くだけ (<a href="http://hackage.haskell.org/package/aeson">aeson</a> パッケージ)</li>
</ol>
<p>例のごとく，<a href="http://hackage.haskell.org/package/rio">rio</a> + <a href="http://hackage.haskell.org/package/extensible">extensible</a> でサクッと作った．</p>
<p>中身を見るとわかるのだが <a href="https://github.com/matsubara0507/mix.hs">mix</a> というパッケージを使っている． これは rio + extensible のいつも自分が使うパターンをパッケージ化したもの． そのうちまたまとめます．</p>
<h3 id="生成した-json-ファイルを読み込む">生成した JSON ファイルを読み込む</h3>
<p>Elm で「生成した JSON ファイルを読み込む」というのは少し大変だった． Elm で初期値を与えるには <code>init</code> 関数の <code>Flag</code> というのを使う。<a href="https://qiita.com/jinjor/items/245959d2da710eda18fa#browserelement">このあたりが参考になる</a>．</p>
<p>で，問題はどうやってローカルの JSON を読み込むか． <a href="https://github.com/matsubara0507/git-plantation/blob/8b0c44e6e6e20bd23998f7df5e0817fcf17fb6a8/src/Git/Plantation/API.hs#L47-L48">git-plantation では Haskell で埋め込んでいた</a>のだが，今回はサーバー側がないのでできない． ググったら出てきた:</p>
<ul>
<li><a href="https://codepen.io/KryptoniteDove/post/load-json-file-locally-using-pure-javascript">Load JSON file locally using pure Javascript by Rich on CodePen</a></li>
</ul>
<p>JS 詳しくないのでこれが良い方法なのかはわからないけど，これを参考にして次のような JS を書いて <code>index.html</code> から読み込むようにした:</p>
<div class="sourceCode" id="cb2"><pre class="sourceCode javascript"><code class="sourceCode javascript"><a class="sourceLine" id="cb2-1" title="1"><span class="st">&quot;use strict&quot;</span><span class="op">;</span></a>
<a class="sourceLine" id="cb2-2" title="2"></a>
<a class="sourceLine" id="cb2-3" title="3"><span class="kw">function</span> <span class="at">loadJSON</span>(callback) <span class="op">{</span></a>
<a class="sourceLine" id="cb2-4" title="4">   <span class="kw">var</span> xobj <span class="op">=</span> <span class="kw">new</span> <span class="at">XMLHttpRequest</span>()<span class="op">;</span></a>
<a class="sourceLine" id="cb2-5" title="5">       <span class="va">xobj</span>.<span class="at">overrideMimeType</span>(<span class="st">&quot;application/json&quot;</span>)<span class="op">;</span></a>
<a class="sourceLine" id="cb2-6" title="6">   <span class="va">xobj</span>.<span class="at">open</span>(<span class="st">&#39;GET&#39;</span><span class="op">,</span> <span class="st">&#39;static/info.json&#39;</span><span class="op">,</span> <span class="kw">true</span>)<span class="op">;</span></a>
<a class="sourceLine" id="cb2-7" title="7">   <span class="va">xobj</span>.<span class="at">onreadystatechange</span> <span class="op">=</span> <span class="kw">function</span> () <span class="op">{</span></a>
<a class="sourceLine" id="cb2-8" title="8">         <span class="cf">if</span> (<span class="va">xobj</span>.<span class="at">readyState</span> <span class="op">==</span> <span class="dv">4</span> <span class="op">&amp;&amp;</span> <span class="va">xobj</span>.<span class="at">status</span> <span class="op">==</span> <span class="st">&quot;200&quot;</span>) <span class="op">{</span></a>
<a class="sourceLine" id="cb2-9" title="9">           <span class="at">callback</span>(<span class="va">xobj</span>.<span class="at">responseText</span>)<span class="op">;</span></a>
<a class="sourceLine" id="cb2-10" title="10">         <span class="op">}</span></a>
<a class="sourceLine" id="cb2-11" title="11">   <span class="op">};</span></a>
<a class="sourceLine" id="cb2-12" title="12">   <span class="va">xobj</span>.<span class="at">send</span>(<span class="kw">null</span>)<span class="op">;</span></a>
<a class="sourceLine" id="cb2-13" title="13"><span class="op">}</span></a>
<a class="sourceLine" id="cb2-14" title="14"></a>
<a class="sourceLine" id="cb2-15" title="15"><span class="at">loadJSON</span>(<span class="kw">function</span>(response) <span class="op">{</span></a>
<a class="sourceLine" id="cb2-16" title="16">  <span class="kw">var</span> json <span class="op">=</span> <span class="va">JSON</span>.<span class="at">parse</span>(response)<span class="op">;</span></a>
<a class="sourceLine" id="cb2-17" title="17">  <span class="va">Elm</span>.<span class="va">Main</span>.<span class="at">init</span>(</a>
<a class="sourceLine" id="cb2-18" title="18">    <span class="op">{</span> <span class="dt">node</span><span class="op">:</span> <span class="va">document</span>.<span class="at">getElementById</span>(<span class="st">&#39;main&#39;</span>)</a>
<a class="sourceLine" id="cb2-19" title="19">    <span class="op">,</span> <span class="dt">flags</span><span class="op">:</span> <span class="op">{</span> <span class="dt">info</span><span class="op">:</span> json <span class="op">}</span></a>
<a class="sourceLine" id="cb2-20" title="20">    <span class="op">}</span></a>
<a class="sourceLine" id="cb2-21" title="21">  )<span class="op">;</span></a>
<a class="sourceLine" id="cb2-22" title="22"><span class="op">}</span>)<span class="op">;</span></a></code></pre></div>
<p>少なくとも，うまく動作はしている．</p>
<p>いつも通り，GitHub Pages に置いたので<a href="https://matsubara0507.github.io/my-github-cards/">ここ</a>から見れる． というか，さっきから表示している GitHub Card がこれで埋め込んだものだ．</p>
<h3 id="daily-cron-on-travisci">Daily cron on TravisCI</h3>
<p>更新は TravisCI の Daily cron を使う． <a href="https://hub.docker.com/r/matsubara0507/selfcat/">selfcat は Docker Image にした</a>ので selfcat をビルドする必要はない． <code>docker run</code> で JSON を生成し，差分があったら GitHub に push する．</p>
<p>知らぬ間に，TravisCI の設定方法に <code>deploy</code> という設定が増えていたんですね:</p>
<div class="sourceCode" id="cb3"><pre class="sourceCode yaml"><code class="sourceCode yaml"><a class="sourceLine" id="cb3-1" title="1"><span class="co"># .travis.yml</span></a>
<a class="sourceLine" id="cb3-2" title="2"><span class="fu">language:</span><span class="at"> generic</span></a>
<a class="sourceLine" id="cb3-3" title="3"><span class="fu">services:</span></a>
<a class="sourceLine" id="cb3-4" title="4">  <span class="kw">-</span> docker</a>
<a class="sourceLine" id="cb3-5" title="5"></a>
<a class="sourceLine" id="cb3-6" title="6"><span class="fu">before_install:</span></a>
<a class="sourceLine" id="cb3-7" title="7"><span class="kw">-</span> docker pull matsubara0507/selfcat</a>
<a class="sourceLine" id="cb3-8" title="8"></a>
<a class="sourceLine" id="cb3-9" title="9"><span class="fu">jobs:</span></a>
<a class="sourceLine" id="cb3-10" title="10">  <span class="fu">include:</span></a>
<a class="sourceLine" id="cb3-11" title="11">    <span class="kw">-</span> <span class="fu">stage:</span><span class="at"> exec selfcat</span></a>
<a class="sourceLine" id="cb3-12" title="12">      <span class="fu">if:</span><span class="at"> branch = master</span></a>
<a class="sourceLine" id="cb3-13" title="13">      <span class="fu">script:</span><span class="at"> docker run --rm -e GH_TOKEN -v `pwd`:/app matsubara0507/selfcat bin/bash -c &#39;cd app &amp;&amp; selfcat --output=docs/static/info.json --compact .selfcat.yaml&#39;</span></a>
<a class="sourceLine" id="cb3-14" title="14"></a>
<a class="sourceLine" id="cb3-15" title="15"><span class="fu">deploy:</span></a>
<a class="sourceLine" id="cb3-16" title="16">  <span class="kw">-</span> <span class="fu">provider:</span><span class="at"> script</span></a>
<a class="sourceLine" id="cb3-17" title="17">    <span class="fu">skip_cleanup:</span><span class="at"> </span><span class="ch">true</span></a>
<a class="sourceLine" id="cb3-18" title="18">    <span class="fu">script:</span><span class="at"> bash .travis/deploy.bash</span></a>
<a class="sourceLine" id="cb3-19" title="19">    <span class="fu">on:</span></a>
<a class="sourceLine" id="cb3-20" title="20">      <span class="fu">branch:</span><span class="at"> master</span></a></code></pre></div>
<p><code>deploy</code> のところで読んでいるスクリプトは以下:</p>
<div class="sourceCode" id="cb4"><pre class="sourceCode bash"><code class="sourceCode bash"><a class="sourceLine" id="cb4-1" title="1"><span class="co">#!/bin/bash</span></a>
<a class="sourceLine" id="cb4-2" title="2"><span class="kw">set</span> <span class="ex">-eux</span></a>
<a class="sourceLine" id="cb4-3" title="3"></a>
<a class="sourceLine" id="cb4-4" title="4"><span class="co"># setup ssh-agent and provide the GitHub deploy key</span></a>
<a class="sourceLine" id="cb4-5" title="5"><span class="bu">eval</span> <span class="st">&quot;</span><span class="va">$(</span><span class="fu">ssh-agent</span> -s<span class="va">)</span><span class="st">&quot;</span></a>
<a class="sourceLine" id="cb4-6" title="6"><span class="ex">openssl</span> aes-256-cbc -K <span class="va">$encrypted_3b94903f5871_key</span> -iv <span class="va">$encrypted_3b94903f5871_iv</span> -in .travis/id_rsa.enc -out .travis/id_rsa -d</a>
<a class="sourceLine" id="cb4-7" title="7"><span class="fu">chmod</span> 600 .travis/id_rsa</a>
<a class="sourceLine" id="cb4-8" title="8"><span class="fu">ssh-add</span> .travis/id_rsa</a>
<a class="sourceLine" id="cb4-9" title="9"></a>
<a class="sourceLine" id="cb4-10" title="10"><span class="co"># commit the assets in docs/ if changed, and push to GitHub using SSH</span></a>
<a class="sourceLine" id="cb4-11" title="11"><span class="fu">git</span> config user.name <span class="st">&quot;</span><span class="va">${GIT_NAME}</span><span class="st">&quot;</span></a>
<a class="sourceLine" id="cb4-12" title="12"><span class="fu">git</span> config user.email <span class="st">&quot;</span><span class="va">${GIT_EMAIL}</span><span class="st">&quot;</span></a>
<a class="sourceLine" id="cb4-13" title="13"><span class="fu">git</span> remote set-url origin git@github.com:<span class="va">${TRAVIS_REPO_SLUG}</span>.git</a>
<a class="sourceLine" id="cb4-14" title="14"></a>
<a class="sourceLine" id="cb4-15" title="15"><span class="fu">git</span> checkout master</a>
<a class="sourceLine" id="cb4-16" title="16"><span class="fu">git</span> status</a>
<a class="sourceLine" id="cb4-17" title="17"><span class="fu">git</span> add docs</a>
<a class="sourceLine" id="cb4-18" title="18"><span class="fu">git</span> diff --staged --quiet <span class="kw">||</span> <span class="fu">git</span> commit -m <span class="st">&quot;[skip ci] Update docs by selfcat&quot;</span></a>
<a class="sourceLine" id="cb4-19" title="19"><span class="fu">git</span> push origin master</a></code></pre></div>
<p>GitHub の Personal Access Token を使うのが嫌なので deploy key を登録して，暗号化したものをリポジトリに置き，それを CI の中で複合して使うという方法をとっている． ググったら下記の記事が出てきてそのまま使わせてもらった:</p>
<ul>
<li><a href="https://medium.com/@simon.legner/deploy-to-github-pages-using-travis-ci-and-deploy-keys-db84fed7a929">Deploy to GitHub Pages using Travis CI and deploy keys - Medium</a></li>
</ul>
<p>暗号化/複合の部分は TravisCI の <a href="https://docs.travis-ci.com/user/encrypting-files/">Encrypting Files</a> を使うことで簡単に行える． 記事で1点，スクリプトの呼び出しが <code>script: ./.travis-deploy.sh</code> では呼べなかった． ググったら <a href="https://github.com/travis-ci/travis-ci/issues/5538">Issue</a> があり，<code>script: sh deploy.sh</code> とすれば良いみたいだったのでそうしたらうまくいった．</p>
<h1 id="section-3"></h1>
<p>ちなみに，<a href="https://github.com/matsubara0507/my-github-cards">matsubara0507/my-github-cards</a> をフォークして，selfcat と TravisCI の設定(<code>.travis/id_rsa.enc</code> と環境変数など)を変えれば誰でも my-github-cards を使える． 気が向いたらドキュメントにしよ．</p>
<h2 id="todo">ToDo</h2>
<ul>
<li>入力してエンターキーで Build ボタン押したことにしたい</li>
<li>Embed のところにクリップボードにコピーボタン欲しい</li>
</ul>
<p>あと，特に Elm はやっつけで書いたので全体的にコードが汚い気がする．</p>
<h2 id="おしまい">おしまい</h2>
<p>自分(self)の GitHub (Octocat)の情報を集めるから selfcat です(????)。</p>
  </div>]]></summary>
</entry>
<entry>
    <title>Drone 1.0 を GCE 上に構築する</title>
    <link href="https://matsubara0507.github.io/posts/2019-04-06-drone-1-0-in-gce.html" />
    <id>https://matsubara0507.github.io/posts/2019-04-06-drone-1-0-in-gce.html</id>
    <published>2019-04-06T00:00:00Z</published>
    <updated>2019-04-06T00:00:00Z</updated>
    <summary type="html"><![CDATA[<div class="post-content" itemprop="articleBody">
    <p>先月ついに <a href="https://drone.io/">Drone CI</a> のバージョン1.0がリリースされました(rc でも無い方)． まだドキュメントの方が追いついてないところもありますが，これで大手を振って本番導入できますね！</p>
<p>で，別に本番導入したわけじゃ無いんですけど，とあるイベントで Drone CI を使いたかったので GCE 上に立てました． 本記事はそのメモ書きです．</p>
<h2 id="drone-ci">Drone CI</h2>
<p>Jenkins のような OSS な CI/CD プラットフォーム． 使い勝手的には TravisCI や CircleCI に近く、<code>.drone.yml</code> という設定ファイルにパイプラインを使って記述する:</p>
<div class="sourceCode" id="cb1"><pre class="sourceCode yaml"><code class="sourceCode yaml"><a class="sourceLine" id="cb1-1" title="1"><span class="fu">kind:</span><span class="at"> pipeline</span></a>
<a class="sourceLine" id="cb1-2" title="2"><span class="fu">steps:</span></a>
<a class="sourceLine" id="cb1-3" title="3"><span class="kw">-</span> <span class="fu">name:</span><span class="at"> test</span></a>
<a class="sourceLine" id="cb1-4" title="4">  <span class="fu">image:</span><span class="at"> node</span></a>
<a class="sourceLine" id="cb1-5" title="5">  <span class="fu">commands:</span></a>
<a class="sourceLine" id="cb1-6" title="6">  <span class="kw">-</span> npm install</a>
<a class="sourceLine" id="cb1-7" title="7">  <span class="kw">-</span> npm test</a>
<a class="sourceLine" id="cb1-8" title="8"><span class="fu">services:</span></a>
<a class="sourceLine" id="cb1-9" title="9"><span class="kw">-</span> <span class="fu">name:</span><span class="at"> database</span></a>
<a class="sourceLine" id="cb1-10" title="10">  <span class="fu">image:</span><span class="at"> mysql</span></a>
<a class="sourceLine" id="cb1-11" title="11">  <span class="fu">ports:</span></a>
<a class="sourceLine" id="cb1-12" title="12">  <span class="kw">-</span> <span class="dv">3306</span></a></code></pre></div>
<p>Go言語製で，Docker との親和性がかなり高いという特徴を持っている． また，<a href="https://cloud.drone.io/">Drone Cloud</a> というクラウドサービスも提供されているので，とりあえず試したい人はぜひ．</p>
<h2 id="drone-on-gcp">Drone on GCP</h2>
<p>Drone 自体は Docker で起動できる(<a href="https://docs.drone.io/installation">公式ドキュメント</a>)． docker-compose を次のように記述することで簡単に起動可能だ:</p>
<div class="sourceCode" id="cb2"><pre class="sourceCode yaml"><code class="sourceCode yaml"><a class="sourceLine" id="cb2-1" title="1"><span class="fu">version:</span><span class="at"> </span><span class="st">&#39;2&#39;</span></a>
<a class="sourceLine" id="cb2-2" title="2"></a>
<a class="sourceLine" id="cb2-3" title="3"><span class="fu">services:</span></a>
<a class="sourceLine" id="cb2-4" title="4">  <span class="fu">drone:</span></a>
<a class="sourceLine" id="cb2-5" title="5">    <span class="fu">image:</span><span class="at"> drone/drone:1</span></a>
<a class="sourceLine" id="cb2-6" title="6">    <span class="fu">ports:</span></a>
<a class="sourceLine" id="cb2-7" title="7">      <span class="kw">-</span> 8000:80</a>
<a class="sourceLine" id="cb2-8" title="8">      <span class="kw">-</span> 443:443</a>
<a class="sourceLine" id="cb2-9" title="9">    <span class="fu">volumes:</span></a>
<a class="sourceLine" id="cb2-10" title="10">      <span class="kw">-</span> /var/run/docker.sock:/var/run/docker.sock</a>
<a class="sourceLine" id="cb2-11" title="11">      <span class="kw">-</span> /var/lib/drone:/data</a>
<a class="sourceLine" id="cb2-12" title="12">    <span class="fu">restart:</span><span class="at"> always</span></a>
<a class="sourceLine" id="cb2-13" title="13">    <span class="fu">environment:</span></a>
<a class="sourceLine" id="cb2-14" title="14">      <span class="kw">-</span> DRONE_GITHUB_SERVER=https://github.com</a>
<a class="sourceLine" id="cb2-15" title="15">      <span class="kw">-</span> DRONE_GITHUB_CLIENT_ID=$<span class="kw">{</span>DRONE_GITHUB_CLIENT<span class="kw">}</span></a>
<a class="sourceLine" id="cb2-16" title="16">      <span class="kw">-</span> DRONE_GITHUB_CLIENT_SECRET=$<span class="kw">{</span>DRONE_GITHUB_SECRET<span class="kw">}</span></a>
<a class="sourceLine" id="cb2-17" title="17">      <span class="kw">-</span> DRONE_AGENTS_ENABLED=true</a>
<a class="sourceLine" id="cb2-18" title="18">      <span class="kw">-</span> DRONE_RPC_SECRET=$<span class="kw">{</span>DRONE_SECRET<span class="kw">}</span></a>
<a class="sourceLine" id="cb2-19" title="19">      <span class="kw">-</span> DRONE_SERVER_HOST=$<span class="kw">{</span>DRONE_HOST<span class="kw">}</span></a>
<a class="sourceLine" id="cb2-20" title="20">      <span class="kw">-</span> DRONE_SERVER_PROTO=https</a>
<a class="sourceLine" id="cb2-21" title="21">      <span class="kw">-</span> DRONE_TLS_AUTOCERT=true</a>
<a class="sourceLine" id="cb2-22" title="22"></a>
<a class="sourceLine" id="cb2-23" title="23">  <span class="fu">agent:</span></a>
<a class="sourceLine" id="cb2-24" title="24">    <span class="fu">image:</span><span class="at"> drone/agent:1</span></a>
<a class="sourceLine" id="cb2-25" title="25">    <span class="fu">restart:</span><span class="at"> always</span></a>
<a class="sourceLine" id="cb2-26" title="26">    <span class="fu">depends_on:</span></a>
<a class="sourceLine" id="cb2-27" title="27">      <span class="kw">-</span> drone</a>
<a class="sourceLine" id="cb2-28" title="28">    <span class="fu">volumes:</span></a>
<a class="sourceLine" id="cb2-29" title="29">      <span class="kw">-</span> /var/run/docker.sock:/var/run/docker.sock</a>
<a class="sourceLine" id="cb2-30" title="30">    <span class="fu">environment:</span></a>
<a class="sourceLine" id="cb2-31" title="31">      <span class="kw">-</span> DRONE_RPC_SERVER=http://drone</a>
<a class="sourceLine" id="cb2-32" title="32">      <span class="kw">-</span> DRONE_RPC_SECRET=$<span class="kw">{</span>DRONE_SECRET<span class="kw">}</span></a>
<a class="sourceLine" id="cb2-33" title="33">      <span class="kw">-</span> DRONE_RUNNER_CAPACITY=2</a>
<a class="sourceLine" id="cb2-34" title="34">      <span class="kw">-</span> DRONE_RUNNER_NAME=$<span class="kw">{</span>HOSTNAME<span class="kw">}</span></a></code></pre></div>
<p>(<a href="/posts/2019-01-05-docker-compose-up-drone-1-0.html">ローカルで試す話は前に書いた</a>)</p>
<p>今回はこれを GCE 上でやることにした(GKE を試そうとも思ったが，まだ時期尚早って感じだったのでやめた)．</p>
<h3 id="gcpでの準備">GCPでの準備</h3>
<p>HTTPS 通信をやりたいのでドメインの取得をし，HTTP(S) LB と Managed SSL を使って簡単に証明書を発行することにした． この仕組みは下記の記事を参考にした:</p>
<ul>
<li><a href="https://qiita.com/koshilife/items/a75a69d03e2524f33c8e">GCP managed SSL(β版)を利用したhttpsサーバ構築 - Qiita</a></li>
</ul>
<p>β版だったためか，ところどころ違った気がするけど概ね記事の通りできた．</p>
<ol type="1">
<li>GCEインスタンスを立てる
<ul>
<li>スペックは <code>n1-standard-1（vCPU x 1、メモリ 3.75 GB）+ 10GB disk</code> にした</li>
<li>HTTPアクセスを許可しておく</li>
</ul></li>
<li>インスタンスグループを作成</li>
<li>HTTP(S) LB を作成
<ul>
<li>バックエンド: (2)のインスタンスグループを選んで他はデフォルト値</li>
<li>ホストとパスのルール: 特になし</li>
<li>フロントエンド: エフェラメルIPでHTTP/HTTPSの2つを作成</li>
</ul></li>
<li>DNSのAレコードを作成
<ul>
<li>有効化されるのに長いと1時間ぐらいかかる</li>
</ul></li>
</ol>
<p>ドメインは Google Domain で取得したのだが，そっちの DNS 設定を切っておくのを忘れて有効化に失敗していた．</p>
<h3 id="drone-の準備と起動">Drone の準備と起動</h3>
<p>上記手順の(1)で以下のプログラムをインストール:</p>
<ul>
<li><code>docker</code></li>
<li><code>docker-compose</code></li>
<li><code>nginx</code></li>
</ul>
<p>nginx の設定は雑に次のような感じ(<a href="https://angristan.xyz/host-your-own-ci-cd-server-with-drone/">参考</a>):</p>
<div class="sourceCode" id="cb3"><pre class="sourceCode conf"><code class="sourceCode ini"><a class="sourceLine" id="cb3-1" title="1"><span class="dt">server {</span></a>
<a class="sourceLine" id="cb3-2" title="2"><span class="dt">  listen 80 default_server;</span></a>
<a class="sourceLine" id="cb3-3" title="3"><span class="dt">  listen </span><span class="kw">[::]</span><span class="dt">:80 default_server;</span></a>
<a class="sourceLine" id="cb3-4" title="4"><span class="dt">  server_name _;</span></a>
<a class="sourceLine" id="cb3-5" title="5"><span class="dt">  return 444;</span></a>
<a class="sourceLine" id="cb3-6" title="6"><span class="dt">}</span></a>
<a class="sourceLine" id="cb3-7" title="7"></a>
<a class="sourceLine" id="cb3-8" title="8"><span class="dt">server {</span></a>
<a class="sourceLine" id="cb3-9" title="9"><span class="dt">  listen 80;</span></a>
<a class="sourceLine" id="cb3-10" title="10"><span class="dt">  server_name </span><span class="kw">[(4)で設定するドメイン]</span><span class="dt">;</span></a>
<a class="sourceLine" id="cb3-11" title="11"></a>
<a class="sourceLine" id="cb3-12" title="12"><span class="dt">  if ($http_x_forwarded_proto </span><span class="ot">=</span><span class="st"> &#39;http&#39;) {</span></a>
<a class="sourceLine" id="cb3-13" title="13"><span class="dt">    return 301 https://$server_name$request_uri;</span></a>
<a class="sourceLine" id="cb3-14" title="14"><span class="dt">  }</span></a>
<a class="sourceLine" id="cb3-15" title="15"></a>
<a class="sourceLine" id="cb3-16" title="16"><span class="dt">  location / {</span></a>
<a class="sourceLine" id="cb3-17" title="17"><span class="dt">    proxy_set_header Host $http_host;</span></a>
<a class="sourceLine" id="cb3-18" title="18"><span class="dt">    proxy_set_header X-Real-IP $remote_addr;</span></a>
<a class="sourceLine" id="cb3-19" title="19"><span class="dt">    proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;</span></a>
<a class="sourceLine" id="cb3-20" title="20"><span class="dt">    proxy_set_header X-Forwarded-Proto $scheme;</span></a>
<a class="sourceLine" id="cb3-21" title="21"><span class="dt">    proxy_pass http://localhost:8000;</span></a>
<a class="sourceLine" id="cb3-22" title="22"><span class="dt">    proxy_redirect off;</span></a>
<a class="sourceLine" id="cb3-23" title="23"><span class="dt">    proxy_buffering off;</span></a>
<a class="sourceLine" id="cb3-24" title="24"><span class="dt">    chunked_transfer_encoding off;</span></a>
<a class="sourceLine" id="cb3-25" title="25"><span class="dt">  }</span></a>
<a class="sourceLine" id="cb3-26" title="26"><span class="dt">}</span></a></code></pre></div>
<p>これで (4) で設定したドメインの HTTPS 通信のみ許可するようになった． あとは適当なところで <code>docker-compose up -d</code> とすれば良い．</p>
<p><img src="/assets/drone-1-0-in-gce/my-drone-example.jpg"></img></p>
<h2 id="おまけ">おまけ</h2>
<h3 id="drone-起動時の環境変数">Drone 起動時の環境変数</h3>
<p>このあたりのを適宜使った:</p>
<ul>
<li>DRONE_USER_FILTER
<ul>
<li>認証後に閲覧できるユーザーを絞る</li>
<li>ただし Public は誰でも見れる(はず)</li>
<li>ちなみに Internal はここで指定したユーザー全員が見れる</li>
</ul></li>
<li>DRONE_USER_CREATE
<ul>
<li>Admin ユーザーみたいな感じ</li>
</ul></li>
<li>DRONE_LOGS_DEBUG,DRONE_LOGS_TRACE
<ul>
<li>この二つをオンにしておくと <code>docker logs</code> でだいたいログを追える</li>
</ul></li>
</ul>
<h3 id="drone-の情報">Drone の情報</h3>
<p>冒頭で述べた通り，Drone の公式情報は綺麗にまとまってるとは言い難い． 基本は以下の公式ドキュメント:</p>
<ul>
<li><a href="https://docs.drone.io/">Drone Documentation</a></li>
</ul>
<p><code>.drone.yml</code> の書き方はここにまとまってるので Drone CI を使うってだけならここで概ね問題ないでしょう． API を使ったり，drone-cli を使ったり，コンテナ起動時の設定を調べたりは情報が足りない時がちょくちょくある． Drone は <a href="https://github.com/search?q=org%3Adrone&amp;type=Issues">GitHub Issue</a> の他に <a href="https://discourse.org/">Discourse</a> というサービスを使っている:</p>
<ul>
<li><a href="https://discourse.drone.io/">Drone</a></li>
</ul>
<p>具体的なエラーなんかは StackOverflow よりここを検索した方が見つかる． またチャットサービスとして Gitter も用意しているので，そこに聞きに行ってもいいかもしれない:</p>
<ul>
<li><a href="https://gitter.im/drone/home">drone/home - Gitter</a></li>
</ul>
<p>まぁあとは OSS なので直接コードを観に行けばだいたい仕様はわかる． 特に，API に関する情報は 0.8 以前の古いものしかなく，<a href="https://github.com/matsubara0507/drone-haskell">Haskell の Drone クライアント</a>を作るときは直接ソースコードを見ていた:</p>
<ul>
<li><a href="https://github.com/drone/drone">drone/drone - GitHub</a>: <code>handler/api</code> とか見ると良い</li>
<li><a href="https://github.com/drone/drone-go">drone/drone-go - GitHub</a>: Drone API の Go クライアント</li>
</ul>
<h1 id="おしまい">おしまい</h1>
  </div>]]></summary>
</entry>
<entry>
    <title>Re: Marp のすゝめ</title>
    <link href="https://matsubara0507.github.io/posts/2019-02-04-re-recommend-marp.html" />
    <id>https://matsubara0507.github.io/posts/2019-02-04-re-recommend-marp.html</id>
    <published>2019-02-04T00:00:00Z</published>
    <updated>2019-02-04T00:00:00Z</updated>
    <summary type="html"><![CDATA[<div class="post-content" itemprop="articleBody">
    <p><strong>2019.4.6 Marp-core-0.6.0 での更新を反映した</strong></p>
<h1 id="section"></h1>
<p><a href="https://yhatt.github.io/marp/">Marp</a> というのは Markdown 記法で書けるスライド作成ツールです．</p>
<ul>
<li>Markdown 記法で手軽に書ける</li>
<li>見た目が綺麗</li>
<li>画像の拡縮が可能</li>
</ul>
<p>などの特徴から個人的にかなり重宝しています． その辺りは昔<a href="/posts/2016-12-14-recommend-marp.html">記事にしました</a>．</p>
<p>しかし，現在 Marp は今後メンテナンスをしないという明言をし，新しくゼロから <a href="https://github.com/marp-team/marp">Marp Next</a> というのを作っているようです． そのあたりの話は作者の記事にすこーしずつ書いてあります:</p>
<ul>
<li><a href="https://yhatt.hatenablog.jp/entry/2017/02/27/markdown-it-incremental-dom_というプラグインを作ってます">markdown-it-incremental-dom というプラグインを作ってます - YHATT (わいはっと)</a></li>
<li><a href="https://qiita.com/yhatt/items/874d5bfa919c32728403">Puppeteer &amp; Carlo を Markdown スライド作成 CLI ツール (Marp CLI) で活用する - Qiita</a></li>
</ul>
<p>時折，リポジトリをチェックして更新がないかを見ていたのですが，いよいよ Web UI まで出来上がっているので，現状のを試しに使ってみることにしました，というメモです．</p>
<h1 id="section-1"></h1>
<p>ちなみに，本記事での Marp Next のバージョンは <code>marp-cli-0.6</code> ぐらいを想定しています(現在開発が活発なので既に古くなっているかも)．</p>
<h2 id="marp-next">Marp Next</h2>
<p>新しい Marp の大きな目的は，よりメンテナブルな設計になることのようで，旧 Marp と異なり，機能ごとに個別の JS パッケージとなっている:</p>
<table>
<thead>
<tr class="header">
<th style="text-align: center;">リポジトリ</th>
<th>備考</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td style="text-align: center;"><a href="https://github.com/marp-team/marp">marp-team/marp</a></td>
<td>Marp 全体を取りまとめるリポジトリ</td>
</tr>
<tr class="even">
<td style="text-align: center;"><a href="https://github.com/marp-team/marpit">Marpit</a></td>
<td>Markdown からスライドの HTML へ変換する部分 (画像の拡縮などもココ)</td>
</tr>
<tr class="odd">
<td style="text-align: center;"><a href="https://github.com/marp-team/marp-core">Marp Core</a></td>
<td>Markdown 以外の拡張構文 (e.g. LaTeX, Emoji, Embed HTML)</td>
</tr>
<tr class="even">
<td style="text-align: center;"><a href="https://github.com/marp-team/marp-cli">Marp CLI</a></td>
<td>Marp の CLI ツール</td>
</tr>
<tr class="odd">
<td style="text-align: center;"><a href="https://github.com/marp-team/marp-web">Marp Web</a></td>
<td>Marp の Web UI (まだベータっぽい)</td>
</tr>
<tr class="even">
<td style="text-align: center;">Marp Desktop</td>
<td>Marp Web を Electron でラップして Desktop アプリにしたいらしい (まだ無い)</td>
</tr>
</tbody>
</table>
<p>(どうでも良いですが，モノリポにした方良かったと思う… Marpit で更新があると全てのリポジトリで PR を出して更新する必要があるので…)</p>
<p>ちなみに，<a href="https://github.com/yhatt/marp/issues?q=is%3Aopen+is%3Aissue+label%3A%22Supports+in+Marp+Next%22">旧 Marp のリポジトリの Issue ラベルに <code>Marp Next</code> や <code>Supports in Marp Next</code> というのができている</a>． 旧 Marp の Issue には，かなり要望っぽい Issue がたくさんあり，その中でも Marp Next では対応する予定のものには <code>Support in Marp Next</code> を付けたようだ．</p>
<h3 id="旧-marp-との非互換な機能">旧 Marp との非互換な機能</h3>
<p>これらは旧 Marp ユーザーしか意味ないが，適当に書き連ねていおく:</p>
<ol type="1">
<li><code>==AAA==</code> というハイライト機能がない（辛い）</li>
<li>打ち消し線記法 <code>~~AAA~~</code> もない</li>
<li>画像の拡縮ルール (Marpit)
<ul>
<li>より<a href="https://marpit.marp.app/image-syntax">細かいルールができて</a>書きやすくなった</li>
<li>しかし前のは記法は非互換</li>
<li><code>center</code> がないので中央寄せができない</li>
</ul></li>
<li><code>&lt;!-- *template: xxx --&gt;</code> のようなそのページだけ機能追加 (Marpit)
<ul>
<li><code>&lt;!-- _class: xxx --&gt;</code> のように先頭にアンダースコア <code>_</code> を付けるスタイルになった</li>
<li>ちなみに <code>&lt;!-- $theme: xxx --&gt;</code> はあるっぽい</li>
</ul></li>
<li>テーマの取り扱い (Marpit ??)
<ul>
<li><code>#</code> だけだと中央寄せなどになっていた機能がなくなった</li>
<li>それらはテーマのイチ <code>class</code> となっている</li>
<li>前の <code>template</code> も <code>class</code> なので組み合わせれない</li>
<li>明示的に指定できるようになったのは嬉しい</li>
<li>class を複数設定できるようになった！ (<a href="https://github.com/marp-team/marp-core/pull/69">marp-core-0.6.0~</a>)</li>
</ul></li>
<li>KaTeX のバージョンアップ (Marp Core)
<ul>
<li>0.6.0 =&gt; 0.10.0</li>
<li>0.6.0 だと全然 LaTeX 記法をサポートしていないので<a href="https://katex.org/docs/supported.html">助かる</a></li>
<li>まぁ僕はフォークしてバージョンをあげてたけど</li>
</ul></li>
<li>スライドのサイズ・縦横比 (Marpit)
<ul>
<li><a href="https://github.com/marp-team/marpit/blob/9ab8e153e66db3a55e8edf9fec1356dd60ddf9e6/docs/theme-css.md#slide-size">テーマごとになったぽい</a>？</li>
<li><a href="https://marpit.marp.app/directives?id=tweak-theme-style"><code>style</code></a> で上書きすると変な余白ができる</li>
<li>どっちにせよ前の <code>&lt;!-- size: 4:3 --&gt;</code> みたいなのはできないっぽい</li>
</ul></li>
</ol>
<p>ちなみに，コードが全部 CoffeScript から TypeScript になってた．</p>
<h2 id="cli-を試す">CLI を試す</h2>
<p>リッチすぎてビビる</p>
<ul>
<li>README の通りで動いた (Mac, npx)
<ul>
<li><code>npx @marp-team/marp-cli slide.md</code></li>
</ul></li>
<li><a href="https://hub.docker.com/r/marpteam/marp-cli/">Docker もサポートされてる</a>
<ul>
<li>ただし一部機能に制限があるっぽい</li>
</ul></li>
<li>Markdown から HTML を生成する</li>
<li><code>--pdf</code> オプションで PDF を生成する
<ul>
<li>ただし <strong><a href="https://github.com/marp-team/marp-cli/pull/10">セキュリティの関係</a>でデフォルトではローカルファイルの画像などを埋め込めない</strong></li>
<li>そのためローカル画像を使うには <code>--allow-local-files</code> をつける</li>
<li>日本語フォントも変になっている気がする</li>
<li>日本語検索もダメっぽい</li>
</ul></li>
<li><code>--watch</code> オプションで Markdown の変更を検知し再生成する</li>
<li><code>--server</code> オプションで <code>localhost:8080</code> で閲覧やPDFの生成ができる (watch もされます)</li>
<li><code>--preview</code> でプレビューモード
<ul>
<li>待望の！！</li>
<li>ブラウザの全画面モードを使ってるみたい</li>
</ul></li>
<li><code>--theme</code> でカスタムテーマを設定可能 (CSS)</li>
<li>CLI のオプションを使わずに<a href="https://github.com/marp-team/marp-cli#configuration-file">設定ファイルでも設定可能</a>
<ul>
<li><code>package.json</code> <code>.marprc.yml</code> <code>marp.config.js</code> のどれでも</li>
</ul></li>
</ul>
<h2 id="cli-netlify-を試す">CLI + Netlify を試す</h2>
<p>試した:</p>
<ul>
<li><a href="https://github.com/matsubara0507/pub-slides">matsubara0507/pub-slides - GitHub</a></li>
</ul>
<p><a href="https://matsubara0507-slides.netlify.com/"><img src="/assets/re-recommend-marp/pub-slides-with-marp.jpg" alt="image.png"></img></a></p>
<p>試し方: Marp の作者の<a href="https://github.com/yhatt/marp-cli-example">リポジトリ</a>の <code>Deploy to netlify</code> をクリックするだけ．</p>
<p>この方法の場合，リポジトリの <code>PITCHME.md</code> を <code>index.html</code> に変換する． marp-cli の設定は <code>package.yml</code> に書いてある． <a href="https://github.com/marp-team/marp-cli#options">設定方法</a>はこれを参照．</p>
<p>僕はできれば，複数のスライドを一つのリポジトリに置きたかった． ので，僕のリポジトリでは:</p>
<ul>
<li><code>slides</code> 以下の <code>*.md</code> を全部変換
<ul>
<li><code>index.md</code> が <code>index.html</code> のスライドになる</li>
</ul></li>
<li>後述する自作テーマをサブモジュールで設定</li>
<li><code>slides/assets</code> にある画像を <code>public</code> にコピーしてる</li>
</ul>
<p>のように少しだけ設定を書き換えた．</p>
<h2 id="web-ui-を試す">Web UI を試す</h2>
<p>すでに<a href="https://web.marp.app/">ここ</a>から試せる． 手元で試すなら:</p>
<pre><code>git clone https://github.com/marp-team/marp-web.git
cd marp-web
yarn install
yarn start</code></pre>
<p>でできた．</p>
<p><img src="/assets/re-recommend-marp/editing_marp_next.jpg"></img></p>
<ul>
<li>ファイルの読み込みや保存が可能</li>
<li>プレゼンテーションモードは(まだ)なかった</li>
<li>PDFのエクスポートはブラウザの印刷機能を使うようだった</li>
<li>カスタムテーマの設定などはまだできない？？</li>
</ul>
<h2 id="テーマを移植する">テーマを移植する</h2>
<p>オリジナルテーマを作ってたので Marp Next にも移植した:</p>
<ul>
<li>olive</li>
<li>colors</li>
<li>haskell</li>
</ul>
<p><a href="https://github.com/matsubara0507/marp-themes">marp-themes</a> というリポジトリを作り，そこに置いてある． やったことは:</p>
<ul>
<li><a href="https://github.com/marp-team/marp-core/blob/26f2402d443d26af387adb0ee86cafa1149beb34/themes/gaia.scss">gaia の scss</a> を持ってきて主に色を変更
<ul>
<li>カスタムテーマとして指定できるのは CSS だけなので <code>scss</code> コマンドで手動変換する</li>
</ul></li>
<li>画像の中央寄せをできるようにした
<ul>
<li><code># ![](path/to/image.jpg)</code> とすると中央寄せになるようにした</li>
<li><code>h1</code> から <code>h6</code> のどれでも良いです</li>
<li>ただし，雑に <code>img</code> タグに適用してるので emoji を含ませるとずれる…</li>
<li>marpit に修正入れてもらった方が良いかな</li>
</ul></li>
<li><code>lead</code> + <code>invert</code> などの class を作っておいた
<ul>
<li>scss で書いてるので <code>lead</code> を適当に mixi-in にして include するだけ</li>
<li>これもできれば <code>class</code> の組み合わせができるようになって欲しい</li>
<li>marp-core-0.6.0 から class を複数設定できるようになったので、これはいらない ;)</li>
</ul></li>
</ul>
<h3 id="olive">Olive</h3>
<iframe src="//www.slideshare.net/slideshow/embed_code/key/797Uraln5Fo9gD" width="595" height="485" frameborder="0" marginwidth="0" marginheight="0" scrolling="no" style="border:1px solid #CCC; border-width:1px; margin-bottom:5px; max-width: 100%;" allowfullscreen>
</iframe>
<h3 id="colors">Colors</h3>
<iframe src="//www.slideshare.net/slideshow/embed_code/key/2kOvCIcUpOzKRg" width="595" height="485" frameborder="0" marginwidth="0" marginheight="0" scrolling="no" style="border:1px solid #CCC; border-width:1px; margin-bottom:5px; max-width: 100%;" allowfullscreen>
</iframe>
<h3 id="haskell">Haskell</h3>
<iframe src="//www.slideshare.net/slideshow/embed_code/key/kJqmkk54SJnaky" width="595" height="485" frameborder="0" marginwidth="0" marginheight="0" scrolling="no" style="border:1px solid #CCC; border-width:1px; margin-bottom:5px; max-width: 100%;" allowfullscreen>
</iframe>
<h2 id="おしまい">おしまい</h2>
<p>もう既に十分使える状態になっていました． すごい！</p>
  </div>]]></summary>
</entry>
<entry>
    <title>Drone Plugin を作ってみた: git-with-ssh</title>
    <link href="https://matsubara0507.github.io/posts/2019-01-20-create-drone-git-with-ssh.html" />
    <id>https://matsubara0507.github.io/posts/2019-01-20-create-drone-git-with-ssh.html</id>
    <published>2019-01-20T00:00:00Z</published>
    <updated>2019-01-20T00:00:00Z</updated>
    <summary type="html"><![CDATA[<div class="post-content" itemprop="articleBody">
    <p>最近 <a href="https://drone.io">Drone</a> という CI プラットフォームを試しています． Drone は Plugin という形で拡張機能を提供するので Plugin を自作してみた，という話です．</p>
<h2 id="作ったもの">作ったもの</h2>
<p>表題の通り，git-with-ssh という Plugin を作った:</p>
<ul>
<li><a href="https://github.com/matsubara0507/drone-git-with-ssh">matsubara0507/drone-git-with-ssh - GitHub</a></li>
</ul>
<p>この Plugin は SSH による git コマンドの利用を可能にする． 例えば，Drone で GitHub へのプッシュをしたいとき，パーソナル API トークンを使うのではなく Deploy Key を使いたい場合は次のように書くと良い:</p>
<div class="sourceCode" id="cb1"><pre class="sourceCode yaml"><code class="sourceCode yaml"><a class="sourceLine" id="cb1-1" title="1"><span class="fu">steps:</span></a>
<a class="sourceLine" id="cb1-2" title="2"><span class="kw">-</span> <span class="fu">name:</span><span class="at"> clone gh-pages</span></a>
<a class="sourceLine" id="cb1-3" title="3">  <span class="fu">image:</span><span class="at"> docker:git</span></a>
<a class="sourceLine" id="cb1-4" title="4">  <span class="fu">environment:</span></a>
<a class="sourceLine" id="cb1-5" title="5">    <span class="fu">SSH_KEY:</span></a>
<a class="sourceLine" id="cb1-6" title="6">      <span class="fu">from_secret:</span><span class="at"> deploy_key</span></a>
<a class="sourceLine" id="cb1-7" title="7">  <span class="fu">commands:</span></a>
<a class="sourceLine" id="cb1-8" title="8">  <span class="kw">-</span> mkdir /root/.ssh &amp;&amp; echo <span class="st">&quot;$SSH_KEY&quot;</span> &gt; /root/.ssh/id_rsa &amp;&amp; chmod 0600 /root/.ssh/id_rsa</a>
<a class="sourceLine" id="cb1-9" title="9">  <span class="kw">-</span> echo -e <span class="st">&quot;Host github.com</span><span class="sc">\n\t</span><span class="st">StrictHostKeyChecking no</span><span class="sc">\n</span><span class="st">&quot;</span> &gt; /root/.ssh/config</a>
<a class="sourceLine" id="cb1-10" title="10">  <span class="kw">-</span> git clone -b gh-pages git@github.com:haskell-jp/antenna.git temp</a></code></pre></div>
<p>この方法は <a href="https://github.com/drone/drone/issues/1891#issuecomment-269629929">Issue で作者本人が提案している</a>ため，おそらく推奨されている方法なのだろう． 二行追加するだけだから特別な機能は提供しない，と述べてるので CircleCI のような Deploy key を追加する機能は実装されないだろう(少なくとも当分は)．</p>
<p>しかし，実際に使い始めてボイラーテンプレート化してしまったので，せっかくだからこれを Plugin にしてみようと考えた． 結果として，自作した Plugin を使うと次のようにかける:</p>
<div class="sourceCode" id="cb2"><pre class="sourceCode yaml"><code class="sourceCode yaml"><a class="sourceLine" id="cb2-1" title="1"><span class="fu">steps:</span></a>
<a class="sourceLine" id="cb2-2" title="2"><span class="kw">-</span> <span class="fu">name:</span><span class="at"> clone gh-pages</span></a>
<a class="sourceLine" id="cb2-3" title="3">  <span class="fu">image:</span><span class="at"> matsubara0507/git-with-ssh</span></a>
<a class="sourceLine" id="cb2-4" title="4">  <span class="fu">settings:</span></a>
<a class="sourceLine" id="cb2-5" title="5">    <span class="fu">ssh_private_key:</span></a>
<a class="sourceLine" id="cb2-6" title="6">      <span class="fu">from_secret:</span><span class="at"> deploy_key</span></a>
<a class="sourceLine" id="cb2-7" title="7">    <span class="fu">ssh_hosts:</span></a>
<a class="sourceLine" id="cb2-8" title="8">    <span class="kw">-</span> github.com</a>
<a class="sourceLine" id="cb2-9" title="9">    <span class="fu">commands:</span></a>
<a class="sourceLine" id="cb2-10" title="10">    <span class="kw">-</span> git clone -b gh-pages git@github.com:haskell-jp/antenna.git temp</a></code></pre></div>
<p>行数は大してかわらないけど，なんか綺麗になったでしょ？(笑)</p>
<h2 id="作る">作る</h2>
<p>だいたい<a href="https://docs.drone.io/plugins">公式ドキュメント</a>と，<a href="https://github.com/drone-plugins">drone-plugin 組織アカウント</a>にある公式のリポジトリのコードとにらめっこすればなんとかなった．</p>
<h3 id="drone-plugin">Drone Plugin</h3>
<p>Drone Plugin の中身はただの Docker イメージだ． 仕組みは簡単で，単純に ENTRYPOINT を設定し，<code>.drone.yml</code> の <code>settings</code> 以下の値を <code>PLUGIN_</code> というプレフィックスをつけて環境変数としておくだけだ． 例えば上記の <code>git-with-ssh</code> の例だと:</p>
<pre><code>PLUGIN_SSH_PRIVATE_KEY
PLUGIN_SSH_HOSTS
PLUGIN_COMMANDS</code></pre>
<p>という環境変数にそれぞれの値が代入される． なのであとは ENTRYPOINT を設定する Dockerfile を定義すれば良い． 公式ドキュメントにはシェルスクリプトと Go 言語で作る場合の方法が載っている． が，別に Docker の ENTRYPOINT として実行できればなんでも良いので Haskell でも Ruby でも作れるだろう．</p>
<p>今回は本家のを参考にするために Go 言語で作った．</p>
<h3 id="main.go-と-plugin.go">main.go と plugin.go</h3>
<p>Go で作る場合，main.go と plugin.go に分けるのがデファクトスタンダートみたいだ． main.go には ENTRYPOINT に設定する CLI アプリのインターフェースを記述し，plugin.go には処理のロジックを記述するようだ． ざっくりと雰囲気だけ書くと:</p>
<div class="sourceCode" id="cb4"><pre class="sourceCode go"><code class="sourceCode go"><a class="sourceLine" id="cb4-1" title="1"><span class="co">// main.go</span></a>
<a class="sourceLine" id="cb4-2" title="2"><span class="kw">package</span> main</a>
<a class="sourceLine" id="cb4-3" title="3"></a>
<a class="sourceLine" id="cb4-4" title="4"><span class="kw">import</span> (</a>
<a class="sourceLine" id="cb4-5" title="5">  <span class="st">&quot;fmt&quot;</span></a>
<a class="sourceLine" id="cb4-6" title="6">  <span class="st">&quot;os&quot;</span></a>
<a class="sourceLine" id="cb4-7" title="7">  <span class="st">&quot;strings&quot;</span></a>
<a class="sourceLine" id="cb4-8" title="8"></a>
<a class="sourceLine" id="cb4-9" title="9">  <span class="st">&quot;github.com/joho/godotenv&quot;</span></a>
<a class="sourceLine" id="cb4-10" title="10">  log <span class="st">&quot;github.com/sirupsen/logrus&quot;</span></a>
<a class="sourceLine" id="cb4-11" title="11">  <span class="st">&quot;github.com/urfave/cli&quot;</span></a>
<a class="sourceLine" id="cb4-12" title="12">)</a>
<a class="sourceLine" id="cb4-13" title="13"></a>
<a class="sourceLine" id="cb4-14" title="14"><span class="kw">var</span> build = <span class="st">&quot;0&quot;</span></a>
<a class="sourceLine" id="cb4-15" title="15"></a>
<a class="sourceLine" id="cb4-16" title="16"><span class="kw">func</span> main() {</a>
<a class="sourceLine" id="cb4-17" title="17">  app := cli.NewApp()</a>
<a class="sourceLine" id="cb4-18" title="18">  app.Name = <span class="st">&quot;git-with-ssh plugin&quot;</span></a>
<a class="sourceLine" id="cb4-19" title="19">  app.Usage = <span class="st">&quot;git-with-ssh plugin&quot;</span></a>
<a class="sourceLine" id="cb4-20" title="20">  app.Action = run</a>
<a class="sourceLine" id="cb4-21" title="21">  app.Version = fmt.Sprintf(<span class="st">&quot;1.0.0+%s&quot;</span>, build)</a>
<a class="sourceLine" id="cb4-22" title="22">  app.Flags = []cli.Flag{</a>
<a class="sourceLine" id="cb4-23" title="23">    cli.StringFlag{</a>
<a class="sourceLine" id="cb4-24" title="24">      Name:   <span class="st">&quot;ssh_private_key&quot;</span>,</a>
<a class="sourceLine" id="cb4-25" title="25">      Usage:  <span class="st">&quot;SSH private key for git&quot;</span>,</a>
<a class="sourceLine" id="cb4-26" title="26">      EnvVar: <span class="st">&quot;PLUGIN_SSH_PRIVATE_KEY&quot;</span>,</a>
<a class="sourceLine" id="cb4-27" title="27">    },</a>
<a class="sourceLine" id="cb4-28" title="28">    ...</a>
<a class="sourceLine" id="cb4-29" title="29">    <span class="co">// ここに CLI の引数を定義</span></a>
<a class="sourceLine" id="cb4-30" title="30">  }</a>
<a class="sourceLine" id="cb4-31" title="31"></a>
<a class="sourceLine" id="cb4-32" title="32">  <span class="kw">if</span> err := app.Run(os.Args); err != <span class="ot">nil</span> {</a>
<a class="sourceLine" id="cb4-33" title="33">    log.Fatal(err)</a>
<a class="sourceLine" id="cb4-34" title="34">  }</a>
<a class="sourceLine" id="cb4-35" title="35">}</a>
<a class="sourceLine" id="cb4-36" title="36"></a>
<a class="sourceLine" id="cb4-37" title="37"><span class="kw">func</span> run(c *cli.Context) <span class="dt">error</span> {</a>
<a class="sourceLine" id="cb4-38" title="38">  <span class="kw">if</span> c.String(<span class="st">&quot;env-file&quot;</span>) != <span class="st">&quot;&quot;</span> {</a>
<a class="sourceLine" id="cb4-39" title="39">    _ = godotenv.Load(c.String(<span class="st">&quot;env-file&quot;</span>))</a>
<a class="sourceLine" id="cb4-40" title="40">  }</a>
<a class="sourceLine" id="cb4-41" title="41">  plugin := Plugin{</a>
<a class="sourceLine" id="cb4-42" title="42">    SSHKey: c.String(<span class="st">&quot;ssh_private_key&quot;</span>),</a>
<a class="sourceLine" id="cb4-43" title="43">    ...</a>
<a class="sourceLine" id="cb4-44" title="44">    <span class="co">// ここで CLI の引数からロジックへ橋渡し</span></a>
<a class="sourceLine" id="cb4-45" title="45">    <span class="co">// Plugin 型とかは plugin.go に書いてある</span></a>
<a class="sourceLine" id="cb4-46" title="46">  }</a>
<a class="sourceLine" id="cb4-47" title="47">  <span class="kw">return</span> plugin.Exec()</a>
<a class="sourceLine" id="cb4-48" title="48">}</a></code></pre></div>
<p>CLI には <a href="https://github.com/urfave/cli"><code>urfave/cli</code></a> を使っている． 理由は特に知らない． <code>go build</code> することで実行ファイルが生成される．</p>
<h3 id="脱線-vs.改行">脱線: vs. 改行</h3>
<p>少し Drone Plugin とは本質的に関係ない話． <code>plugin.go</code> では <code>id_rsa</code> を次のように生成している:</p>
<div class="sourceCode" id="cb5"><pre class="sourceCode go"><code class="sourceCode go"><a class="sourceLine" id="cb5-1" title="1"><span class="co">// plugin.go</span></a>
<a class="sourceLine" id="cb5-2" title="2">...</a>
<a class="sourceLine" id="cb5-3" title="3"></a>
<a class="sourceLine" id="cb5-4" title="4"><span class="kw">type</span> Plugin <span class="kw">struct</span> {</a>
<a class="sourceLine" id="cb5-5" title="5">  Home     <span class="dt">string</span></a>
<a class="sourceLine" id="cb5-6" title="6">  SSHKey   <span class="dt">string</span></a>
<a class="sourceLine" id="cb5-7" title="7">  Hosts    []<span class="dt">string</span></a>
<a class="sourceLine" id="cb5-8" title="8">  Commands []<span class="dt">string</span></a>
<a class="sourceLine" id="cb5-9" title="9">}</a>
<a class="sourceLine" id="cb5-10" title="10"></a>
<a class="sourceLine" id="cb5-11" title="11"><span class="kw">func</span> (p Plugin) Exec() <span class="dt">error</span> {</a>
<a class="sourceLine" id="cb5-12" title="12">  sshDir := fmt.Sprintf(<span class="st">&quot;%s/.ssh&quot;</span>, p.Home)</a>
<a class="sourceLine" id="cb5-13" title="13">  <span class="kw">if</span> err := os.MkdirAll(sshDir, <span class="dv">0700</span>); err != <span class="ot">nil</span> {</a>
<a class="sourceLine" id="cb5-14" title="14">    <span class="kw">return</span> errors.Wrapf(err, <span class="st">&quot;Exec cmd: mkdir -p %s&quot;</span>, sshDir)</a>
<a class="sourceLine" id="cb5-15" title="15">  }</a>
<a class="sourceLine" id="cb5-16" title="16">  log.Infof(<span class="st">&quot;Exec cmd: mkdir -p %s&quot;</span>, sshDir)</a>
<a class="sourceLine" id="cb5-17" title="17"></a>
<a class="sourceLine" id="cb5-18" title="18">  <span class="kw">if</span> err := ioutil.WriteFile(fmt.Sprintf(<span class="st">&quot;%s/id_rsa&quot;</span>, sshDir), []<span class="dt">byte</span>(p.SSHKey), <span class="dv">0600</span>); err != <span class="ot">nil</span> {</a>
<a class="sourceLine" id="cb5-19" title="19">    <span class="kw">return</span> errors.Wrapf(err, <span class="st">&quot;Write file: %s/id_rsa&quot;</span>, sshDir)</a>
<a class="sourceLine" id="cb5-20" title="20">  }</a>
<a class="sourceLine" id="cb5-21" title="21">  log.Infof(<span class="st">&quot;Write file: %s/id_rsa&quot;</span>, sshDir)</a>
<a class="sourceLine" id="cb5-22" title="22"></a>
<a class="sourceLine" id="cb5-23" title="23">  ...</a>
<a class="sourceLine" id="cb5-24" title="24">}</a></code></pre></div>
<p>そして，<code>id_rsa</code> の中身をオプションないしは環境変数として Go アプリに渡したい． しかし，次のように単純に渡してみてもうまく動作しない:</p>
<div class="sourceCode" id="cb6"><pre class="sourceCode sh"><code class="sourceCode bash"><a class="sourceLine" id="cb6-1" title="1">$ <span class="ex">./drone-git-with-ssh</span> --ssh_private_key=<span class="st">&#39;aaa\nbbb&#39;</span></a></code></pre></div>
<p>これだと <code>id_rsa</code> の中身は <code>aaa\nbbb</code> となる． <code>--ssh_private_key=$&#39;aaa\nbbb&#39;</code> としたら一応動作するが環境変数などが使えなくなるので，<a href="https://blog.konboi.com/post/2018/05/01/225336/">内部で明示的に置換すると良い</a>ようだ:</p>
<div class="sourceCode" id="cb7"><pre class="sourceCode go"><code class="sourceCode go"><a class="sourceLine" id="cb7-1" title="1"><span class="co">// main.go</span></a>
<a class="sourceLine" id="cb7-2" title="2">...</a>
<a class="sourceLine" id="cb7-3" title="3"></a>
<a class="sourceLine" id="cb7-4" title="4"><span class="kw">func</span> run(c *cli.Context) <span class="dt">error</span> {</a>
<a class="sourceLine" id="cb7-5" title="5">  ...</a>
<a class="sourceLine" id="cb7-6" title="6">  plugin := Plugin{</a>
<a class="sourceLine" id="cb7-7" title="7">    SSHKey: strings.Replace(c.String(<span class="st">&quot;ssh_private_key&quot;</span>), <span class="st">`</span><span class="ch">\n</span><span class="st">`</span>, <span class="st">&quot;</span><span class="ch">\n</span><span class="st">&quot;</span>, <span class="dv">-1</span>),</a>
<a class="sourceLine" id="cb7-8" title="8">    ...</a>
<a class="sourceLine" id="cb7-9" title="9">  }</a>
<a class="sourceLine" id="cb7-10" title="10">  <span class="kw">return</span> plugin.Exec()</a>
<a class="sourceLine" id="cb7-11" title="11">}</a></code></pre></div>
<h3 id="docker-イメージ">Docker イメージ</h3>
<p>他の Drone Plugin のリポジトリを参考にすると，次のような Dockerfile を書くと良い:</p>
<div class="sourceCode" id="cb8"><pre class="sourceCode dockerfile"><code class="sourceCode dockerfile"><a class="sourceLine" id="cb8-1" title="1"><span class="kw">FROM</span> docker:git</a>
<a class="sourceLine" id="cb8-2" title="2"></a>
<a class="sourceLine" id="cb8-3" title="3"><span class="kw">ADD</span> release/linux/amd64/drone-git-with-ssh /bin/</a>
<a class="sourceLine" id="cb8-4" title="4"><span class="kw">ENTRYPOINT</span> [<span class="st">&quot;/bin/drone-git-with-ssh&quot;</span>]</a></code></pre></div>
<p><code>FROM</code> で指定するベースイメージには普通，<a href="https://hub.docker.com/r/plugins/base/"><code>plugins/base</code></a> を使うようだが，これは <code>scratch</code> にちょっとだけ毛が生えた程度のイメージで <code>git</code> がない． なので <a href="https://hub.docker.com/_/docker"><code>docker:git</code></a> をベースイメージにした． 次のコマンドを実行することで Docker イメージを作成できる:</p>
<div class="sourceCode" id="cb9"><pre class="sourceCode sh"><code class="sourceCode bash"><a class="sourceLine" id="cb9-1" title="1">$ <span class="va">GOOS=</span>linux <span class="va">GOARCH=</span>amd64 <span class="va">CGO_ENABLED=</span>0 <span class="ex">go</span> build -a -tags netgo -o release/linux/amd64/drone-git-with-ssh</a>
<a class="sourceLine" id="cb9-2" title="2">$ <span class="ex">docker</span> build --rm -t matsubara0507/git-with-ssh .</a></code></pre></div>
<h3 id="drone-を設定する">Drone を設定する</h3>
<p>せっかくなので Drone で Docker イメージのビルドなどを CI してみる． <a href="https://cloud.drone.io/">Drone Cloud</a> という OSS は無料で使える Drone のクラウドサービスがあるのでこれに設定する．</p>
<p>テストはあとで考えるとして，Go のビルドと Docker イメージのビルドを CI で回す． また，master のプッシュだけは Docker イメージの自動プッシュも実現したい． Drone は他の CI サービスみたいに YAML ファイルで設定ファイルを記述する:</p>
<div class="sourceCode" id="cb10"><pre class="sourceCode yaml"><code class="sourceCode yaml"><a class="sourceLine" id="cb10-1" title="1"><span class="co"># .drone.yml</span></a>
<a class="sourceLine" id="cb10-2" title="2"><span class="fu">kind:</span><span class="at"> pipeline</span></a>
<a class="sourceLine" id="cb10-3" title="3"><span class="fu">name:</span><span class="at"> default</span></a>
<a class="sourceLine" id="cb10-4" title="4"></a>
<a class="sourceLine" id="cb10-5" title="5"><span class="fu">steps:</span></a>
<a class="sourceLine" id="cb10-6" title="6"><span class="kw">-</span> <span class="fu">name:</span><span class="at"> build go</span></a>
<a class="sourceLine" id="cb10-7" title="7">  <span class="fu">image:</span><span class="at"> golang:1.11</span></a>
<a class="sourceLine" id="cb10-8" title="8">  <span class="fu">commands:</span></a>
<a class="sourceLine" id="cb10-9" title="9">  <span class="kw">-</span> GOOS=linux GOARCH=amd64 CGO_ENABLED=0 go build -a -tags netgo -o release/linux/amd64/drone-git-with-ssh</a>
<a class="sourceLine" id="cb10-10" title="10"></a>
<a class="sourceLine" id="cb10-11" title="11"><span class="kw">-</span> <span class="fu">name:</span><span class="at"> build docker image (dry_run)</span></a>
<a class="sourceLine" id="cb10-12" title="12">  <span class="fu">image:</span><span class="at"> plugins/docker</span></a>
<a class="sourceLine" id="cb10-13" title="13">  <span class="fu">settings:</span></a>
<a class="sourceLine" id="cb10-14" title="14">    <span class="fu">username:</span><span class="at"> matsubara0507</span></a>
<a class="sourceLine" id="cb10-15" title="15">    <span class="fu">password:</span></a>
<a class="sourceLine" id="cb10-16" title="16">      <span class="fu">from_secret:</span><span class="at"> docker_hub_password</span></a>
<a class="sourceLine" id="cb10-17" title="17">    <span class="fu">repo:</span><span class="at"> matsubara0507/git-with-ssh</span></a>
<a class="sourceLine" id="cb10-18" title="18">    <span class="fu">dry-run:</span><span class="at"> </span><span class="ch">true</span><span class="at"> </span><span class="co"># Push をしないフラグ</span></a>
<a class="sourceLine" id="cb10-19" title="19">  <span class="fu">when:</span></a>
<a class="sourceLine" id="cb10-20" title="20">    <span class="fu">event:</span></a>
<a class="sourceLine" id="cb10-21" title="21">      <span class="fu">exclude:</span></a>
<a class="sourceLine" id="cb10-22" title="22">        <span class="kw">-</span> pull_request</a>
<a class="sourceLine" id="cb10-23" title="23"></a>
<a class="sourceLine" id="cb10-24" title="24"><span class="kw">-</span> <span class="fu">name:</span><span class="at"> push docker image</span></a>
<a class="sourceLine" id="cb10-25" title="25">  <span class="fu">image:</span><span class="at"> plugins/docker</span></a>
<a class="sourceLine" id="cb10-26" title="26">  <span class="fu">settings:</span></a>
<a class="sourceLine" id="cb10-27" title="27">    <span class="fu">username:</span><span class="at"> matsubara0507</span></a>
<a class="sourceLine" id="cb10-28" title="28">    <span class="fu">password:</span></a>
<a class="sourceLine" id="cb10-29" title="29">      <span class="fu">from_secret:</span><span class="at"> docker_hub_password</span></a>
<a class="sourceLine" id="cb10-30" title="30">    <span class="fu">repo:</span><span class="at"> matsubara0507/git-with-ssh</span></a>
<a class="sourceLine" id="cb10-31" title="31">  <span class="fu">when:</span></a>
<a class="sourceLine" id="cb10-32" title="32">    <span class="fu">branch:</span></a>
<a class="sourceLine" id="cb10-33" title="33">    <span class="kw">-</span> master</a>
<a class="sourceLine" id="cb10-34" title="34">    <span class="fu">event:</span></a>
<a class="sourceLine" id="cb10-35" title="35">      <span class="fu">exclude:</span></a>
<a class="sourceLine" id="cb10-36" title="36">        <span class="kw">-</span> pull_request</a></code></pre></div>
<p>Docker Hub への操作には <a href="https://github.com/drone-plugins/drone-docker"><code>docker</code></a> という Plugin を用いた． パスワードのような，ハードコーディングすべきではない文字列は Drone の Secret という仕組みをを用いる． <code>from_secret: key</code> とすることで，Drone の Web UI で設定した <code>key</code> という名の Secret を参照してくれる． 僕はパスワード系の Secret を PR では参照できないようにしているので，<code>when.event.exclude.pull_request</code> とすることで PR の CI では Secret を参照しているステップが動作しないようにしている．</p>
<h3 id="テストをどうするか">テストをどうするか</h3>
<p><code>plugin.go</code> はただ単にファイルを作ってるだけなのでユニットテストなどはしてもしょうがない． 悩んだ末，最初のシェルコマンドで実行して生成されるファイルと自作 Plugin で生成されるを比較することにした:</p>
<div class="sourceCode" id="cb11"><pre class="sourceCode yaml"><code class="sourceCode yaml"><a class="sourceLine" id="cb11-1" title="1"><span class="co"># .drone.yml</span></a>
<a class="sourceLine" id="cb11-2" title="2"><span class="fu">kind:</span><span class="at"> pipeline</span></a>
<a class="sourceLine" id="cb11-3" title="3"><span class="fu">name:</span><span class="at"> default</span></a>
<a class="sourceLine" id="cb11-4" title="4"></a>
<a class="sourceLine" id="cb11-5" title="5"><span class="fu">steps:</span></a>
<a class="sourceLine" id="cb11-6" title="6">  <span class="kw">-</span> <span class="fu">name:</span><span class="at"> build go</span></a>
<a class="sourceLine" id="cb11-7" title="7">    <span class="fu">image:</span><span class="at"> golang:1.11</span></a>
<a class="sourceLine" id="cb11-8" title="8">    <span class="fu">commands:</span></a>
<a class="sourceLine" id="cb11-9" title="9">    <span class="kw">-</span> go build</a>
<a class="sourceLine" id="cb11-10" title="10">    <span class="kw">-</span> GOOS=linux GOARCH=amd64 CGO_ENABLED=0 go build -a -tags netgo -o release/linux/amd64/drone-git-with-ssh</a>
<a class="sourceLine" id="cb11-11" title="11"></a>
<a class="sourceLine" id="cb11-12" title="12">  <span class="kw">-</span> <span class="fu">name:</span><span class="at"> test</span></a>
<a class="sourceLine" id="cb11-13" title="13">    <span class="fu">image:</span><span class="at"> golang:1.11</span></a>
<a class="sourceLine" id="cb11-14" title="14">    <span class="fu">environment:</span></a>
<a class="sourceLine" id="cb11-15" title="15">      <span class="fu">SSH_KEY:</span><span class="at"> </span><span class="st">&#39;aaa\nbbb&#39;</span></a>
<a class="sourceLine" id="cb11-16" title="16">    <span class="fu">commands:</span></a>
<a class="sourceLine" id="cb11-17" title="17">    <span class="kw">-</span> printf $SSH_KEY &gt; ./test/expected/.ssh/id_rsa &amp;&amp; chmod 600 ./test/expected/.ssh/id_rsa</a>
<a class="sourceLine" id="cb11-18" title="18">    <span class="kw">-</span> ./drone-git-with-ssh --home ./test/result --ssh_private_key $SSH_KEY --ssh_hosts github.com --ssh_hosts bitbucket.org  --commands <span class="st">&#39;pwd&#39;</span> --commands <span class="st">&#39;ls&#39;</span></a>
<a class="sourceLine" id="cb11-19" title="19">    <span class="kw">-</span> diff ./test/result/.ssh ./test/expected/.ssh</a>
<a class="sourceLine" id="cb11-20" title="20"></a>
<a class="sourceLine" id="cb11-21" title="21">  ...</a></code></pre></div>
<p>expected な <code>id_rsa</code> をわざわざ test ステップで生成するのではなく，GitHub に直接おいても良いが，なんか <code>id_rsa</code> という名前のファイルをパブリックリポジトリに置くのはどうなのかなぁと思ってやめた． このテストのために <code>--home</code> というオプションで任意のディレクトリに SSH の設定 <code>.ssh</code> を生成してくれるようにした． デフォルトは <code>/root</code> だが．</p>
<h3 id="おまけ-バッチ">おまけ: バッチ</h3>
<p>公式の Drone Plugin のリポジトリをみると README にいろんなバッジがあった． ので，真似して git-with-ssh にも設定してみた:</p>
<p><a href="https://github.com/matsubara0507/drone-git-with-ssh/blob/aee8928379453d89aedba010a1664ca6adf1ee72/README.md"><img src="/assets/create-drone-git-with-ssh/badges.jpg"></img></a></p>
<p>付けたのは4つ:</p>
<ol type="1">
<li>Drone のビルド結果</li>
<li><a href="https://godoc.org/">Go Doc</a></li>
<li><a href="https://goreportcard.com/">Go Report Card</a></li>
<li><a href="https://microbadger.com/">MicroBadger</a></li>
</ol>
<p>1つ目は Drone のビルド結果のバッジ． Drone のバッジは settings の一番下から取得できる．</p>
<h2 id="section"></h2>
<p>Go Doc は指定した Go のリポジトリからドキュメントを生成してくれるサービスである． 依存パッケージとかも解析していい感じに表示してくれる． すごい．</p>
<p>Go Report Card も同様に Go のリポジトリを指定することで動作する． こっちは go fmt がちゃんとかかってるかや linter の結果などをチェックしてくれる． すごい．</p>
<h2 id="section-1"></h2>
<p>MicroBadger は Docker Hub にあるイメージを静的検査してくれる． イメージサイズや生成時間はもちろん，Docker イメージのレイヤ構造も出してくれる． これで Dockerfile をわざわざ探さなくても良いのですごい助かる．</p>
<h2 id="おしまい">おしまい</h2>
<p>久しぶりにサンプルじゃない Go のアプリケーションを作ってみた． 楽しかった〜．</p>
  </div>]]></summary>
</entry>
<entry>
    <title>GCS で Drone 1.0 をキャッシュする</title>
    <link href="https://matsubara0507.github.io/posts/2019-01-06-use-drone-cache-with-gcs.html" />
    <id>https://matsubara0507.github.io/posts/2019-01-06-use-drone-cache-with-gcs.html</id>
    <published>2019-01-06T00:00:00Z</published>
    <updated>2019-01-06T00:00:00Z</updated>
    <summary type="html"><![CDATA[<div class="post-content" itemprop="articleBody">
    <p>Drone ネタ2本目． せっかく drone-haskell を作ったので TravisCI でテストを回すのではなく，Drone で回そうかなと思ったのだが，Stack でフルビルドするとめっちゃ時間かかる． なので，Drone のキャッシュをやってみましたっていう小話です．</p>
<h2 id="cache-in-drone">Cache in Drone</h2>
<p>Drone でキャッシュを利用するには次のような Plugin を使用する:</p>
<ul>
<li>drone-s3-cache: <a href="https://github.com/drone-plugins/drone-s3-cache">GitHub</a>・<a href="http://plugins.drone.io/drone-plugins/drone-s3-cache/">Marketplace</a></li>
<li>drone-volume-cache: <a href="https://github.com/drone-plugins/drone-volume-cache">GitHub</a>・<a href="http://plugins.drone.io/drillster/drone-volume-cache/">Marketplace</a></li>
<li>drone-gcs-cache: <a href="https://github.com/hvalle/drone-gcs-cache">GitHub</a>・<a href="http://plugins.drone.io/hvalle/drone-gcs-cache/">Marketplace</a></li>
</ul>
<p>s3-cache や gcs-cache は任意のフォルダを tar かなんかに固めて各種クラウドストレージに保存する． volume-cache はローカルに保存してくれるのだが，これを利用するためにはリポジトリの <code>Trusted</code> フラグを立てる必要がある． ただし，これは Admin しかできないので，Drone Cloud では利用できない． なので s3-cache や gcs-cache を使うしかない．</p>
<p>ちなみに公式で提供してくれてるのは s3-cache なので，そっちを使うべきなのだが，見事に AWS のパスワードやらを忘れてしまったので GCP の Cloud Storage の方を利用した(オイ)． ただ，gcs-cache は 0.8.x 時代の設定方法しか書いてない． いろいろ調べてみた結果，YAML の書き方を変えるだけでそのまま利用できそうだったのでそのまま drone-gcs-cache を利用する．</p>
<h2 id="drone-gcs-cache">Drone GCS Cache</h2>
<h3 id="認証鍵の設定">認証鍵の設定</h3>
<p>GCS の認証にはサービスアカウントの JSON Key を使う． GCP コンソールの <code>APIとサービス</code> の <code>認証情報</code> からサービスアカウントを作成し(このときに JSON が DL される)，<code>IAMと管理</code> の <code>IAM</code> からさっき作ったアカウントに <code>ストレージ管理者</code> を追加した IAM を作成する．</p>
<p>この JSON を Drone のウェブコンソールから Secret として設定する． 改行込みでファイルの中身そのままコピペで大丈夫． もし PR を作成したときにも動作させたいなら <code>Allow Pull Requests</code> にチェックする．</p>
<h3 id="yaml-の設定">YAML の設定</h3>
<p>あとは YAML を設定するだけ． 例えば drone-gcs-cache の古い設定を書き直すと次のようになる:</p>
<div class="sourceCode" id="cb1"><pre class="sourceCode yaml"><code class="sourceCode yaml"><a class="sourceLine" id="cb1-1" title="1"><span class="fu">kind:</span><span class="at"> pipeline</span></a>
<a class="sourceLine" id="cb1-2" title="2"><span class="fu">name:</span><span class="at"> default</span></a>
<a class="sourceLine" id="cb1-3" title="3"></a>
<a class="sourceLine" id="cb1-4" title="4"><span class="fu">steps:</span></a>
<a class="sourceLine" id="cb1-5" title="5"><span class="kw">-</span> <span class="fu">name:</span><span class="at"> restore</span></a>
<a class="sourceLine" id="cb1-6" title="6">  <span class="fu">image:</span><span class="at"> homerovalle/drone-gcs-cache</span></a>
<a class="sourceLine" id="cb1-7" title="7">  <span class="fu">settings:</span></a>
<a class="sourceLine" id="cb1-8" title="8">    <span class="fu">pull:</span><span class="at"> </span><span class="ch">true</span></a>
<a class="sourceLine" id="cb1-9" title="9">    <span class="fu">bucket:</span><span class="at"> gcs_bucket</span></a>
<a class="sourceLine" id="cb1-10" title="10">    <span class="fu">json_key:</span></a>
<a class="sourceLine" id="cb1-11" title="11">      <span class="fu">from_secret:</span><span class="at"> gcs-access-json-key</span></a>
<a class="sourceLine" id="cb1-12" title="12">    <span class="fu">restore:</span><span class="at"> </span><span class="ch">true</span></a>
<a class="sourceLine" id="cb1-13" title="13"></a>
<a class="sourceLine" id="cb1-14" title="14"><span class="kw">-</span> <span class="fu">name:</span><span class="at"> build</span></a>
<a class="sourceLine" id="cb1-15" title="15">  <span class="fu">image:</span><span class="at"> node</span></a>
<a class="sourceLine" id="cb1-16" title="16">  <span class="fu">commands:</span></a>
<a class="sourceLine" id="cb1-17" title="17">  <span class="kw">-</span> npm install</a>
<a class="sourceLine" id="cb1-18" title="18"></a>
<a class="sourceLine" id="cb1-19" title="19"><span class="kw">-</span> <span class="fu">name:</span><span class="at"> rebuild</span></a>
<a class="sourceLine" id="cb1-20" title="20">  <span class="fu">image:</span><span class="at"> homerovalle/drone-gcs-cache</span></a>
<a class="sourceLine" id="cb1-21" title="21">  <span class="fu">settings:</span></a>
<a class="sourceLine" id="cb1-22" title="22">    <span class="fu">pull:</span><span class="at"> </span><span class="ch">true</span></a>
<a class="sourceLine" id="cb1-23" title="23">    <span class="fu">bucket:</span><span class="at"> gcs_bucket</span></a>
<a class="sourceLine" id="cb1-24" title="24">    <span class="fu">json_key:</span></a>
<a class="sourceLine" id="cb1-25" title="25">      <span class="fu">from_secret:</span><span class="at"> gcs-access-json-key</span></a>
<a class="sourceLine" id="cb1-26" title="26">    <span class="fu">rebuild:</span><span class="at"> </span><span class="ch">true</span></a>
<a class="sourceLine" id="cb1-27" title="27">    <span class="fu">mount:</span></a>
<a class="sourceLine" id="cb1-28" title="28">      <span class="kw">-</span> node_modules</a>
<a class="sourceLine" id="cb1-29" title="29">    <span class="fu">when:</span></a>
<a class="sourceLine" id="cb1-30" title="30">      <span class="fu">event:</span><span class="at"> push</span></a>
<a class="sourceLine" id="cb1-31" title="31"></a>
<a class="sourceLine" id="cb1-32" title="32"><span class="kw">-</span> <span class="fu">name:</span><span class="at"> flush</span></a>
<a class="sourceLine" id="cb1-33" title="33">  <span class="fu">image:</span><span class="at"> homerovalle/drone-gcs-cache</span></a>
<a class="sourceLine" id="cb1-34" title="34">  <span class="fu">settings:</span></a>
<a class="sourceLine" id="cb1-35" title="35">    <span class="fu">pull:</span><span class="at"> </span><span class="ch">true</span></a>
<a class="sourceLine" id="cb1-36" title="36">    <span class="fu">bucket:</span><span class="at"> gcs_bucket</span></a>
<a class="sourceLine" id="cb1-37" title="37">    <span class="fu">json_key:</span></a>
<a class="sourceLine" id="cb1-38" title="38">      <span class="fu">from_secret:</span><span class="at"> gcs-access-json-key</span></a>
<a class="sourceLine" id="cb1-39" title="39">    <span class="fu">flush:</span><span class="at"> </span><span class="ch">true</span></a>
<a class="sourceLine" id="cb1-40" title="40">    <span class="fu">flush_age:</span><span class="at"> </span><span class="dv">14</span></a></code></pre></div>
<p>これは Drone の Secret に <code>gcs-access-json-key</code> という名前で登録している場合である． ちなみに <code>flush_age</code> は，ここで設定した日付よりも前のキャッシュを削除する設定のようだ(デフォルトは30)．</p>
<h2 id="haskell-で試す">Haskell で試す</h2>
<p>ちなみに<a href="https://github.com/matsubara0507/drone-haskell/pull/3">導入したPRはこれ</a>． <code>.stack</code> と <code>.stack-work</code> をキャッシュする:</p>
<div class="sourceCode" id="cb2"><pre class="sourceCode yaml"><code class="sourceCode yaml"><a class="sourceLine" id="cb2-1" title="1"><span class="fu">kind:</span><span class="at"> pipeline</span></a>
<a class="sourceLine" id="cb2-2" title="2"><span class="fu">name:</span><span class="at"> default</span></a>
<a class="sourceLine" id="cb2-3" title="3"></a>
<a class="sourceLine" id="cb2-4" title="4"><span class="fu">steps:</span></a>
<a class="sourceLine" id="cb2-5" title="5"><span class="kw">-</span> <span class="fu">name:</span><span class="at"> restore</span></a>
<a class="sourceLine" id="cb2-6" title="6">  <span class="fu">image:</span><span class="at"> homerovalle/drone-gcs-cache</span></a>
<a class="sourceLine" id="cb2-7" title="7">  <span class="fu">settings:</span></a>
<a class="sourceLine" id="cb2-8" title="8">    ...</a>
<a class="sourceLine" id="cb2-9" title="9"></a>
<a class="sourceLine" id="cb2-10" title="10"><span class="kw">-</span> <span class="fu">name:</span><span class="at"> test</span></a>
<a class="sourceLine" id="cb2-11" title="11">  <span class="fu">image:</span><span class="at"> haskell:8.6</span></a>
<a class="sourceLine" id="cb2-12" title="12">  <span class="fu">commands:</span></a>
<a class="sourceLine" id="cb2-13" title="13">  <span class="kw">-</span> stack --no-terminal --stack-root `pwd`/.stack --install-ghc test --bench --only-dependencies</a>
<a class="sourceLine" id="cb2-14" title="14">  <span class="kw">-</span> stack --no-terminal --stack-root `pwd`/.stack test --bench --no-run-benchmarks --no-haddock-deps --pedantic</a>
<a class="sourceLine" id="cb2-15" title="15"></a>
<a class="sourceLine" id="cb2-16" title="16"><span class="kw">-</span> <span class="fu">name:</span><span class="at"> rebuild</span></a>
<a class="sourceLine" id="cb2-17" title="17">  <span class="fu">image:</span><span class="at"> homerovalle/drone-gcs-cache</span></a>
<a class="sourceLine" id="cb2-18" title="18">  <span class="fu">settings:</span></a>
<a class="sourceLine" id="cb2-19" title="19">    <span class="fu">pull:</span><span class="at"> </span><span class="ch">true</span></a>
<a class="sourceLine" id="cb2-20" title="20">    <span class="fu">bucket:</span><span class="at"> matsubara-drone-cache</span></a>
<a class="sourceLine" id="cb2-21" title="21">    <span class="fu">json_key:</span></a>
<a class="sourceLine" id="cb2-22" title="22">      <span class="fu">from_secret:</span><span class="at"> gcs-access-json-key</span></a>
<a class="sourceLine" id="cb2-23" title="23">    <span class="fu">rebuild:</span><span class="at"> </span><span class="ch">true</span></a>
<a class="sourceLine" id="cb2-24" title="24">    <span class="fu">mount:</span></a>
<a class="sourceLine" id="cb2-25" title="25">      <span class="kw">-</span> .stack</a>
<a class="sourceLine" id="cb2-26" title="26">      <span class="kw">-</span> .stack-work</a>
<a class="sourceLine" id="cb2-27" title="27">    <span class="fu">when:</span></a>
<a class="sourceLine" id="cb2-28" title="28">      <span class="fu">event:</span><span class="at"> push</span></a>
<a class="sourceLine" id="cb2-29" title="29"></a>
<a class="sourceLine" id="cb2-30" title="30"><span class="kw">-</span> <span class="fu">name:</span><span class="at"> flush</span></a>
<a class="sourceLine" id="cb2-31" title="31">  <span class="fu">image:</span><span class="at"> homerovalle/drone-gcs-cache</span></a>
<a class="sourceLine" id="cb2-32" title="32">  <span class="fu">settings:</span></a>
<a class="sourceLine" id="cb2-33" title="33">    ...</a></code></pre></div>
<p><code>restore</code> と <code>flush</code> は同じなので割愛． <code>$HOME/.stack</code> だと動作しなかったので，いっそのことカレントディレクトリに <code>.stack</code> を持ってくることにした． で，実際どれくらい早くなったのか． ビフォー:</p>
<p><img src="/assets/use-drone-cache-with-gcs/before.jpg"></img></p>
<p>9分は長い． そんでアフター:</p>
<p><img src="/assets/use-drone-cache-with-gcs/after.jpg"></img></p>
<p>4GB弱キャッシュされてるので，restore に結構かかってしまう． まぁ半分近くになったのでこれで良しとしましょう(GCS分のお金はかかるけど)．</p>
<h2 id="おしまい">おしまい</h2>
<p>Drone は Crone を hourly で使えるから haskell-antenna を Drone に移行してみようかしら．</p>
  </div>]]></summary>
</entry>

</feed>
